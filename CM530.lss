
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flashtext    00000000  08003134  08003134  00008018  2**0
                  CONTENTS
  2 .text         000031d4  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000018  20000000  08006308  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000204  20000018  08006320  00008018  2**2
                  ALLOC
  5 ._usrstack    00000100  2000021c  08006524  00008018  2**0
                  ALLOC
  6 .comment      00000070  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000080c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009452  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000193d  00000000  00000000  000116da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000181e  00000000  00000000  00013017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e80  00000000  00000000  00014838  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003097  00000000  00000000  000166b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000554b  00000000  00000000  0001974f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c0  00000000  00000000  0001ec9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	andcs	r0, r1, r0
 8003004:	08005ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, lr}
 8003008:	08003dfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
 800300c:	08003dff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
 8003010:	08003e01 	stmdaeq	r0, {r0, r9, sl, fp, ip, sp}
 8003014:	08003e03 	stmdaeq	r0, {r0, r1, r9, sl, fp, ip, sp}
 8003018:	08003e05 	stmdaeq	r0, {r0, r2, r9, sl, fp, ip, sp}
	...
 800302c:	08003e09 	stmdaeq	r0, {r0, r3, r9, sl, fp, ip, sp}
 8003030:	08003e07 	stmdaeq	r0, {r0, r1, r2, r9, sl, fp, ip, sp}
 8003034:	00000000 	andeq	r0, r0, r0
 8003038:	08003e0b 	stmdaeq	r0, {r0, r1, r3, r9, sl, fp, ip, sp}
 800303c:	08003e0d 	stmdaeq	r0, {r0, r2, r3, r9, sl, fp, ip, sp}
 8003040:	08003e11 	stmdaeq	r0, {r0, r4, r9, sl, fp, ip, sp}
 8003044:	08003e13 	stmdaeq	r0, {r0, r1, r4, r9, sl, fp, ip, sp}
 8003048:	08003e15 	stmdaeq	r0, {r0, r2, r4, r9, sl, fp, ip, sp}
 800304c:	08003e17 	stmdaeq	r0, {r0, r1, r2, r4, r9, sl, fp, ip, sp}
 8003050:	08003e19 	stmdaeq	r0, {r0, r3, r4, r9, sl, fp, ip, sp}
 8003054:	08003e1b 	stmdaeq	r0, {r0, r1, r3, r4, r9, sl, fp, ip, sp}
 8003058:	08003e1d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, fp, ip, sp}
 800305c:	08003e1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, sl, fp, ip, sp}
 8003060:	08003e21 	stmdaeq	r0, {r0, r5, r9, sl, fp, ip, sp}
 8003064:	08003e23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp, ip, sp}
 8003068:	08003e25 	stmdaeq	r0, {r0, r2, r5, r9, sl, fp, ip, sp}
	...
 8003088:	08003e35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, ip, sp}
 800308c:	08003e37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, sl, fp, ip, sp}
 8003090:	08003e39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, ip, sp}
 8003094:	08003e3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sl, fp, ip, sp}
 8003098:	08003e3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 800309c:	08003e3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 80030a0:	08003e41 	stmdaeq	r0, {r0, r6, r9, sl, fp, ip, sp}
 80030a4:	08003e43 	stmdaeq	r0, {r0, r1, r6, r9, sl, fp, ip, sp}
 80030a8:	08003e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip, sp}
 80030ac:	08003e47 	stmdaeq	r0, {r0, r1, r2, r6, r9, sl, fp, ip, sp}
 80030b0:	08003e49 	stmdaeq	r0, {r0, r3, r6, r9, sl, fp, ip, sp}
 80030b4:	08003e4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, fp, ip, sp}
 80030b8:	08003e4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, sl, fp, ip, sp}
 80030bc:	08003e51 	stmdaeq	r0, {r0, r4, r6, r9, sl, fp, ip, sp}
 80030c0:	08003e53 	stmdaeq	r0, {r0, r1, r4, r6, r9, sl, fp, ip, sp}
 80030c4:	08003e55 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, fp, ip, sp}
 80030c8:	08003e57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, sl, fp, ip, sp}
 80030cc:	08003e59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, ip, sp}
 80030d0:	08003e5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, sl, fp, ip, sp}
 80030d4:	08003e5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sl, fp, ip, sp}
 80030d8:	08003e61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, ip, sp}
 80030dc:	08003e63 	stmdaeq	r0, {r0, r1, r5, r6, r9, sl, fp, ip, sp}
 80030e0:	08003e65 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, fp, ip, sp}
 80030e4:	08003e67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r9, sl, fp, ip, sp}
 80030e8:	08003e69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp, ip, sp}
 80030ec:	08003e6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, fp, ip, sp}
 80030f0:	08003e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp}
 80030f4:	08003e6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
 80030f8:	08003e71 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, fp, ip, sp}
 80030fc:	08003e73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8003100:	08003e75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sl, fp, ip, sp}
 8003104:	08003e77 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, ip, sp}
 8003108:	08003e79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 800310c:	08003e7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8003110:	08003e7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8003114:	08003e7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8003118:	08003e81 	stmdaeq	r0, {r0, r7, r9, sl, fp, ip, sp}
 800311c:	08003e83 	stmdaeq	r0, {r0, r1, r7, r9, sl, fp, ip, sp}
 8003120:	08003e85 	stmdaeq	r0, {r0, r2, r7, r9, sl, fp, ip, sp}
 8003124:	08003e87 	stmdaeq	r0, {r0, r1, r2, r7, r9, sl, fp, ip, sp}
 8003128:	08003e89 	stmdaeq	r0, {r0, r3, r7, r9, sl, fp, ip, sp}
 800312c:	08003e8b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sl, fp, ip, sp}
 8003130:	0000f85f 	andeq	pc, r0, pc, asr r8	; <UNPREDICTABLE>

Disassembly of section .text:

08003134 <RCC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RCC_Configuration(void)
{
 8003134:	b510      	push	{r4, lr}
  ErrorStatus HSEStartUpStatus;
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();
 8003136:	f001 fdf3 	bl	8004d20 <RCC_DeInit>

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
 800313a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800313e:	f001 fe0d 	bl	8004d5c <RCC_HSEConfig>

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003142:	f001 ff5b 	bl	8004ffc <RCC_WaitForHSEStartUp>

  if(HSEStartUpStatus == SUCCESS)
 8003146:	2801      	cmp	r0, #1

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003148:	4604      	mov	r4, r0

  if(HSEStartUpStatus == SUCCESS)
 800314a:	d00d      	beq.n	8003168 <RCC_Configuration+0x34>
    }

  /* Enable peripheral clocks --------------------------------------------------*/

  /* Enable USART1 and GPIOB clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 800314c:	f244 0008 	movw	r0, #16392	; 0x4008
 8003150:	2101      	movs	r1, #1
 8003152:	f001 fefd 	bl	8004f50 <RCC_APB2PeriphClockCmd>

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);
 8003156:	4817      	ldr	r0, [pc, #92]	; (80031b4 <RCC_Configuration+0x80>)
 8003158:	2101      	movs	r1, #1
 800315a:	f001 ff05 	bl	8004f68 <RCC_APB1PeriphClockCmd>

  PWR_BackupAccessCmd(ENABLE);
}
 800315e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);

  PWR_BackupAccessCmd(ENABLE);
 8003162:	2001      	movs	r0, #1
 8003164:	f001 bd85 	b.w	8004c72 <PWR_BackupAccessCmd>
  HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS)
    {
      /* Enable Prefetch Buffer */
      FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003168:	2010      	movs	r0, #16
 800316a:	f001 f897 	bl	800429c <FLASH_PrefetchBufferCmd>

      /* Flash 2 wait state */
      FLASH_SetLatency(FLASH_Latency_2);
 800316e:	2002      	movs	r0, #2
 8003170:	f001 f87c 	bl	800426c <FLASH_SetLatency>

      /* HCLK = SYSCLK */
      RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8003174:	2000      	movs	r0, #0
 8003176:	f001 fe3f 	bl	8004df8 <RCC_HCLKConfig>

      /* PCLK2 = HCLK */
      RCC_PCLK2Config(RCC_HCLK_Div1);
 800317a:	2000      	movs	r0, #0
 800317c:	f001 fe50 	bl	8004e20 <RCC_PCLK2Config>

      /* PCLK1 = HCLK/2 */
      RCC_PCLK1Config(RCC_HCLK_Div2);
 8003180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003184:	f001 fe42 	bl	8004e0c <RCC_PCLK1Config>

      /* PLLCLK = 8MHz * 9 = 72 MHz */
      RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8003188:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800318c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8003190:	f001 fe10 	bl	8004db4 <RCC_PLLConfig>

      /* Enable PLL */
      RCC_PLLCmd(ENABLE);
 8003194:	4620      	mov	r0, r4
 8003196:	f001 fe17 	bl	8004dc8 <RCC_PLLCmd>

      /* Wait till PLL is ready */
      while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 800319a:	2039      	movs	r0, #57	; 0x39
 800319c:	f001 ff1a 	bl	8004fd4 <RCC_GetFlagStatus>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0fa      	beq.n	800319a <RCC_Configuration+0x66>
	{
	}

      /* Select PLL as system clock source */
      RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80031a4:	2002      	movs	r0, #2
 80031a6:	f001 fe15 	bl	8004dd4 <RCC_SYSCLKConfig>

      /* Wait till PLL is used as system clock source */
      while(RCC_GetSYSCLKSource() != 0x08)
 80031aa:	f001 fe1d 	bl	8004de8 <RCC_GetSYSCLKSource>
 80031ae:	2808      	cmp	r0, #8
 80031b0:	d1fb      	bne.n	80031aa <RCC_Configuration+0x76>
 80031b2:	e7cb      	b.n	800314c <RCC_Configuration+0x18>
 80031b4:	00040001 	andeq	r0, r4, r1

080031b8 <NVIC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NVIC_Configuration(void)
{
 80031b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef  VECT_TAB_RAM
  // Set the Vector Table base location at 0x20000000
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
  // Set the Vector Table base location at 0x08003000
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80031ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80031be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031c2:	f001 fc97 	bl	8004af4 <NVIC_SetVectorTable>
#endif

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80031c6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80031ca:	f001 fbed 	bl	80049a8 <NVIC_PriorityGroupConfig>

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031ce:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031d0:	2401      	movs	r4, #1

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031d2:	2325      	movs	r3, #37	; 0x25
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031d4:	a801      	add	r0, sp, #4

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031d6:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031da:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031de:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031e2:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031e6:	f001 fbe9 	bl	80049bc <NVIC_Init>

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80031ea:	231c      	movs	r3, #28
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031ec:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80031ee:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80031f2:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031f6:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031fa:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031fe:	f001 fbdd 	bl	80049bc <NVIC_Init>
}
 8003202:	b003      	add	sp, #12
 8003204:	bd30      	pop	{r4, r5, pc}

08003206 <GPIO_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
 8003206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003208:	4c1e      	ldr	r4, [pc, #120]	; (8003284 <GPIO_Configuration+0x7e>)
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 800320a:	a801      	add	r0, sp, #4
 800320c:	f001 fb19 	bl	8004842 <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003210:	2604      	movs	r6, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8003212:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003214:	2703      	movs	r7, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003216:	2510      	movs	r5, #16
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003218:	4620      	mov	r0, r4
 800321a:	a901      	add	r1, sp, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 800321c:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003220:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003224:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003228:	f001 fabd 	bl	80047a6 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 800322c:	f44f 6308 	mov.w	r3, #2176	; 0x880
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003230:	4620      	mov	r0, r4
 8003232:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8003236:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800323a:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800323e:	f001 fab2 	bl	80047a6 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8003242:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003246:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800324a:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800324c:	2318      	movs	r3, #24
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800324e:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003252:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003256:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800325a:	f001 faa4 	bl	80047a6 <GPIO_Init>

  GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 800325e:	4630      	mov	r0, r6
 8003260:	2101      	movs	r1, #1
 8003262:	f001 fb2f 	bl	80048c4 <GPIO_PinRemapConfig>
  GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <GPIO_Configuration+0x82>)
 8003268:	2101      	movs	r1, #1
 800326a:	f001 fb2b 	bl	80048c4 <GPIO_PinRemapConfig>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f001 fb02 	bl	800487a <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 8003276:	4620      	mov	r0, r4
 8003278:	2120      	movs	r1, #32
 800327a:	f001 fafc 	bl	8004876 <GPIO_SetBits>
}
 800327e:	b003      	add	sp, #12
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003282:	bf00      	nop
 8003284:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003288:	00300400 	eorseq	r0, r0, r0, lsl #8

0800328c <DisableUSART1>:
    }
}

void DisableUSART1(void)
{
  USART_Cmd(USART1, DISABLE);
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <DisableUSART1+0x8>)
 800328e:	2100      	movs	r1, #0
 8003290:	f002 bcfb 	b.w	8005c8a <USART_Cmd>
 8003294:	40013800 	andmi	r3, r1, r0, lsl #16

08003298 <ClearBuffer256>:
}

void ClearBuffer256(void)
{
  gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <ClearBuffer256+0xc>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	705a      	strb	r2, [r3, #1]
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000018 	andcs	r0, r0, r8, lsl r0

080032a8 <CheckNewArrive>:
}

byte CheckNewArrive(void)
{
  if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <CheckNewArrive+0x10>)
 80032aa:	7858      	ldrb	r0, [r3, #1]
 80032ac:	781b      	ldrb	r3, [r3, #0]
    return 1;
  else
    return 0;
}
 80032ae:	1ac0      	subs	r0, r0, r3
 80032b0:	bf18      	it	ne
 80032b2:	2001      	movne	r0, #1
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000018 	andcs	r0, r0, r8, lsl r0

080032bc <TxDByte_DXL>:

void TxDByte_DXL(byte bTxdData)
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	4604      	mov	r4, r0
  GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80032c0:	2120      	movs	r1, #32
 80032c2:	480d      	ldr	r0, [pc, #52]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032c4:	f001 fad9 	bl	800487a <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032ca:	2110      	movs	r1, #16
 80032cc:	f001 fad3 	bl	8004876 <GPIO_SetBits>

  USART_SendData(USART1,bTxdData);
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <TxDByte_DXL+0x40>)
 80032d2:	4621      	mov	r1, r4
 80032d4:	f002 fd40 	bl	8005d58 <USART_SendData>
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <TxDByte_DXL+0x40>)
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	f002 fd97 	bl	8005e0e <USART_GetFlagStatus>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d0f9      	beq.n	80032d8 <TxDByte_DXL+0x1c>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032e6:	2110      	movs	r1, #16
 80032e8:	f001 fac7 	bl	800487a <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USART_SendData(USART1,bTxdData);
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032f2:	2120      	movs	r1, #32
 80032f4:	f001 babf 	b.w	8004876 <GPIO_SetBits>
 80032f8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80032fc:	40013800 	andmi	r3, r1, r0, lsl #16

08003300 <RxDByte_DXL>:
{
  byte bTemp;

  while(1)
    {
      if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <RxDByte_DXL+0x1c>)
 8003302:	7859      	ldrb	r1, [r3, #1]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	4291      	cmp	r1, r2
 8003308:	d0fa      	beq.n	8003300 <RxDByte_DXL>
    }

  bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 800330a:	785a      	ldrb	r2, [r3, #1]
 800330c:	441a      	add	r2, r3
 800330e:	7890      	ldrb	r0, [r2, #2]
  gbRxBufferReadPointer++;
 8003310:	785a      	ldrb	r2, [r3, #1]
 8003312:	3201      	adds	r2, #1
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	705a      	strb	r2, [r3, #1]

  return bTemp;
}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000018 	andcs	r0, r0, r8, lsl r0

08003320 <TxDByte_PC>:
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
  USART_SendData(USART3,bTxdData);
 8003320:	4601      	mov	r1, r0
    bTmp += 7;
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 8003322:	b508      	push	{r3, lr}
  USART_SendData(USART3,bTxdData);
 8003324:	4804      	ldr	r0, [pc, #16]	; (8003338 <TxDByte_PC+0x18>)
 8003326:	f002 fd17 	bl	8005d58 <USART_SendData>
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <TxDByte_PC+0x18>)
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	f002 fd6e 	bl	8005e0e <USART_GetFlagStatus>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0f9      	beq.n	800332a <TxDByte_PC+0xa>
}
 8003336:	bd08      	pop	{r3, pc}
 8003338:	40004800 	andmi	r4, r0, r0, lsl #16

0800333c <TxDString>:
  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
}

void TxDString(byte *bData)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	1e44      	subs	r4, r0, #1
  while (*bData)
 8003340:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003344:	b110      	cbz	r0, 800334c <TxDString+0x10>
    TxDByte_PC(*bData++);
 8003346:	f7ff ffeb 	bl	8003320 <TxDByte_PC>
 800334a:	e7f9      	b.n	8003340 <TxDString+0x4>
}
 800334c:	bd10      	pop	{r4, pc}

0800334e <infiniteTurn>:
/////////////// AX 12 ////////////////
//////////////////////////////////////

// infinite turn mode activation, see technical docu
// parameter: ID of motor
void infiniteTurn(unsigned char id) {
 800334e:	b510      	push	{r4, lr}
 8003350:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 8003352:	2106      	movs	r1, #6
 8003354:	2200      	movs	r2, #0
 8003356:	f000 ff73 	bl	8004240 <dxl_write_word>
  int result =  dxl_get_result();
 800335a:	f000 fee7 	bl	800412c <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
 800335e:	4620      	mov	r0, r4
 8003360:	2108      	movs	r1, #8
 8003362:	2200      	movs	r2, #0
 8003364:	f000 ff6c 	bl	8004240 <dxl_write_word>
  result =  dxl_get_result();
 8003368:	f000 fee0 	bl	800412c <dxl_get_result>
  TxDString("\nCM5 infinite rotation mode set\n");
}
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void infiniteTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 infinite rotation mode set\n");
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <infiniteTurn+0x2a>)
 8003372:	f7ff bfe3 	b.w	800333c <TxDString>
 8003376:	bf00      	nop
 8003378:	080060b0 	stmdaeq	r0, {r4, r5, r7, sp, lr}

0800337c <normalTurn>:
}


// infinite turn mode desactivation, see technical docu
// parameter: ID of motor
void normalTurn(unsigned char id) {
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 8003380:	2106      	movs	r1, #6
 8003382:	2200      	movs	r2, #0
 8003384:	f000 ff5c 	bl	8004240 <dxl_write_word>
  int result =  dxl_get_result();
 8003388:	f000 fed0 	bl	800412c <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
 800338c:	4620      	mov	r0, r4
 800338e:	2108      	movs	r1, #8
 8003390:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003394:	f000 ff54 	bl	8004240 <dxl_write_word>
  result =  dxl_get_result();
 8003398:	f000 fec8 	bl	800412c <dxl_get_result>
  TxDString("\nCM5 normal rotation mode set\n");
}
 800339c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void normalTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 normal rotation mode set\n");
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <normalTurn+0x2c>)
 80033a2:	f7ff bfcb 	b.w	800333c <TxDString>
 80033a6:	bf00      	nop
 80033a8:	080060d1 	stmdaeq	r0, {r0, r4, r6, r7, sp, lr}

080033ac <PrintCommStatus>:


// Print communication result
void PrintCommStatus(int CommStatus)
{
  switch(CommStatus)
 80033ac:	3802      	subs	r0, #2
 80033ae:	2805      	cmp	r0, #5
 80033b0:	d810      	bhi.n	80033d4 <PrintCommStatus+0x28>
 80033b2:	e8df f000 	tbb	[pc, r0]
 80033b6:	09050703 	stmdbeq	r5, {r0, r1, r8, r9, sl}
 80033ba:	48070d0b 	stmdami	r7, {r0, r1, r3, r8, sl, fp}
    {
    case COMM_TXFAIL:
      TxDString("COMM_TXFAIL: Failed transmit instruction packet!\n");
 80033be:	e00a      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_TXERROR:
      TxDString("COMM_TXERROR: Incorrect instruction packet!\n");
 80033c0:	4807      	ldr	r0, [pc, #28]	; (80033e0 <PrintCommStatus+0x34>)
 80033c2:	e008      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXFAIL:
      TxDString("COMM_RXFAIL: Failed get status packet from device!\n");
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <PrintCommStatus+0x38>)
 80033c6:	e006      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXWAITING:
      TxDString("COMM_RXWAITING: Now recieving status packet!\n");
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <PrintCommStatus+0x3c>)
 80033ca:	e004      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXTIMEOUT:
      TxDString("COMM_RXTIMEOUT: There is no status packet!\n");
 80033cc:	4807      	ldr	r0, [pc, #28]	; (80033ec <PrintCommStatus+0x40>)
 80033ce:	e002      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXCORRUPT:
      TxDString("COMM_RXCORRUPT: Incorrect status packet!\n");
 80033d0:	4807      	ldr	r0, [pc, #28]	; (80033f0 <PrintCommStatus+0x44>)
 80033d2:	e000      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    default:
      TxDString("This is unknown error code!\n");
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <PrintCommStatus+0x48>)
 80033d6:	f7ff bfb1 	b.w	800333c <TxDString>
 80033da:	bf00      	nop
 80033dc:	080060f0 	stmdaeq	r0, {r4, r5, r6, r7, sp, lr}
 80033e0:	08006122 	stmdaeq	r0, {r1, r5, r8, sp, lr}
 80033e4:	0800614f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, sp, lr}
 80033e8:	08006183 	stmdaeq	r0, {r0, r1, r7, r8, sp, lr}
 80033ec:	080061b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sp, lr}
 80033f0:	080061dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, lr}
 80033f4:	08006207 	stmdaeq	r0, {r0, r1, r2, r9, sp, lr}

080033f8 <PrintErrorCode>:
    }
}

// Print error bit of status packet
void PrintErrorCode()
{
 80033f8:	b508      	push	{r3, lr}
  if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 feb4 	bl	8004168 <dxl_get_rxpacket_error>
 8003400:	2801      	cmp	r0, #1
 8003402:	d102      	bne.n	800340a <PrintErrorCode+0x12>
    TxDString("Input voltage error!\n");
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <PrintErrorCode+0x78>)
 8003406:	f7ff ff99 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 800340a:	2002      	movs	r0, #2
 800340c:	f000 feac 	bl	8004168 <dxl_get_rxpacket_error>
 8003410:	2801      	cmp	r0, #1
 8003412:	d102      	bne.n	800341a <PrintErrorCode+0x22>
    TxDString("Angle limit error!\n");
 8003414:	4817      	ldr	r0, [pc, #92]	; (8003474 <PrintErrorCode+0x7c>)
 8003416:	f7ff ff91 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 800341a:	2004      	movs	r0, #4
 800341c:	f000 fea4 	bl	8004168 <dxl_get_rxpacket_error>
 8003420:	2801      	cmp	r0, #1
 8003422:	d102      	bne.n	800342a <PrintErrorCode+0x32>
    TxDString("Overheat error!\n");
 8003424:	4814      	ldr	r0, [pc, #80]	; (8003478 <PrintErrorCode+0x80>)
 8003426:	f7ff ff89 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 800342a:	2008      	movs	r0, #8
 800342c:	f000 fe9c 	bl	8004168 <dxl_get_rxpacket_error>
 8003430:	2801      	cmp	r0, #1
 8003432:	d102      	bne.n	800343a <PrintErrorCode+0x42>
    TxDString("Out of range error!\n");
 8003434:	4811      	ldr	r0, [pc, #68]	; (800347c <PrintErrorCode+0x84>)
 8003436:	f7ff ff81 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 800343a:	2010      	movs	r0, #16
 800343c:	f000 fe94 	bl	8004168 <dxl_get_rxpacket_error>
 8003440:	2801      	cmp	r0, #1
 8003442:	d102      	bne.n	800344a <PrintErrorCode+0x52>
    TxDString("Checksum error!\n");
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <PrintErrorCode+0x88>)
 8003446:	f7ff ff79 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 800344a:	2020      	movs	r0, #32
 800344c:	f000 fe8c 	bl	8004168 <dxl_get_rxpacket_error>
 8003450:	2801      	cmp	r0, #1
 8003452:	d102      	bne.n	800345a <PrintErrorCode+0x62>
    TxDString("Overload error!\n");
 8003454:	480b      	ldr	r0, [pc, #44]	; (8003484 <PrintErrorCode+0x8c>)
 8003456:	f7ff ff71 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 800345a:	2040      	movs	r0, #64	; 0x40
 800345c:	f000 fe84 	bl	8004168 <dxl_get_rxpacket_error>
 8003460:	2801      	cmp	r0, #1
 8003462:	d104      	bne.n	800346e <PrintErrorCode+0x76>
    TxDString("Instruction code error!\n");
}
 8003464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    TxDString("Overload error!\n");

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
 8003468:	4807      	ldr	r0, [pc, #28]	; (8003488 <PrintErrorCode+0x90>)
 800346a:	f7ff bf67 	b.w	800333c <TxDString>
 800346e:	bd08      	pop	{r3, pc}
 8003470:	08006224 	stmdaeq	r0, {r2, r5, r9, sp, lr}
 8003474:	0800623a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sp, lr}
 8003478:	0800624e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sp, lr}
 800347c:	0800625f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, sp, lr}
 8003480:	08006274 	stmdaeq	r0, {r2, r4, r5, r6, r9, sp, lr}
 8003484:	08006285 	stmdaeq	r0, {r0, r2, r7, r9, sp, lr}
 8003488:	08006296 	stmdaeq	r0, {r1, r2, r4, r7, r9, sp, lr}

0800348c <TxDByte16>:
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
}

void TxDByte16(byte bSentData)
{
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 8003490:	0903      	lsrs	r3, r0, #4
 8003492:	f103 0030 	add.w	r0, r3, #48	; 0x30
  if (bTmp > '9')
 8003496:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 8003498:	bf88      	it	hi
 800349a:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 800349e:	f004 040f 	and.w	r4, r4, #15
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034a2:	f7ff ff3d 	bl	8003320 <TxDByte_PC>
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 80034a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
  if (bTmp > '9')
 80034aa:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 80034ac:	bf88      	it	hi
 80034ae:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
  TxDByte_PC(bTmp);
}
 80034b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bTmp += 7;
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034b6:	f7ff bf33 	b.w	8003320 <TxDByte_PC>

080034ba <TxDWord16>:
  while (*bData)
    TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
 80034ba:	b510      	push	{r4, lr}
 80034bc:	4604      	mov	r4, r0
  TxDByte16((wSentData >> 8) & 0xff);
 80034be:	0a00      	lsrs	r0, r0, #8
 80034c0:	f7ff ffe4 	bl	800348c <TxDByte16>
  TxDByte16(wSentData & 0xff);
 80034c4:	b2e0      	uxtb	r0, r4
}
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void TxDWord16(word wSentData)
{
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
 80034ca:	f7ff bfdf 	b.w	800348c <TxDByte16>

080034ce <setSpeed>:
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
  int order;
  if(speed >= 0)
 80034ce:	1e0a      	subs	r2, r1, #0
// set rotation speed of a single motor, only works in infinite turn mode!
// speed is an integer between -1023 and 1023
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
 80034d0:	b510      	push	{r4, lr}
  int order;
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
 80034d2:	bfb8      	it	lt
 80034d4:	f5c2 6280 	rsblt	r2, r2, #1024	; 0x400
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
 80034d8:	2120      	movs	r1, #32
 80034da:	f000 feb1 	bl	8004240 <dxl_write_word>
  int result =  dxl_get_result();
 80034de:	f000 fe25 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80034e2:	2801      	cmp	r0, #1
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
  int result =  dxl_get_result();
 80034e4:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80034e6:	d00a      	beq.n	80034fe <setSpeed+0x30>
    {
      TxDString("problem, code=");
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <setSpeed+0x32>)
 80034ea:	f7ff ff27 	bl	800333c <TxDString>
      TxDWord16(result);
 80034ee:	b2a0      	uxth	r0, r4
 80034f0:	f7ff ffe3 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("problem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <setSpeed+0x36>)
 80034fa:	f7ff bf1f 	b.w	800333c <TxDString>
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	080062c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sp, lr}
 8003504:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

08003508 <move_forward>:
// MOVEMENT
// --------



void move_forward(int speed) {
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
    setSpeed(MOTOR_down_left, speed);
 800350c:	2004      	movs	r0, #4
 800350e:	4621      	mov	r1, r4
 8003510:	f7ff ffdd 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, -speed);
 8003514:	4261      	negs	r1, r4
 8003516:	2003      	movs	r0, #3
}
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}



void move_forward(int speed) {
    setSpeed(MOTOR_down_left, speed);
    setSpeed(MOTOR_down_right, -speed);
 800351c:	f7ff bfd7 	b.w	80034ce <setSpeed>

08003520 <turn_right>:
}

void turn_right() {
 8003520:	b508      	push	{r3, lr}
    setSpeed(MOTOR_down_left, speed_turn);
 8003522:	2004      	movs	r0, #4
 8003524:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003528:	f7ff ffd1 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, speed_turn);
}
 800352c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setSpeed(MOTOR_down_right, -speed);
}

void turn_right() {
    setSpeed(MOTOR_down_left, speed_turn);
    setSpeed(MOTOR_down_right, speed_turn);
 8003530:	2003      	movs	r0, #3
 8003532:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003536:	f7ff bfca 	b.w	80034ce <setSpeed>

0800353a <turn_left>:
}

void turn_left() {
 800353a:	b508      	push	{r3, lr}
    setSpeed(MOTOR_down_left, speed_turn);
 800353c:	2004      	movs	r0, #4
 800353e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003542:	f7ff ffc4 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, speed_turn);
}
 8003546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setSpeed(MOTOR_down_right, speed_turn);
}

void turn_left() {
    setSpeed(MOTOR_down_left, speed_turn);
    setSpeed(MOTOR_down_right, speed_turn);
 800354a:	2003      	movs	r0, #3
 800354c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003550:	f7ff bfbd 	b.w	80034ce <setSpeed>

08003554 <setAngle>:

// move motor to a given angle, only works when nOt in infinite turn mode
// parameter motor: ID of motor
// parameter: angle is an integer between -1023 and 1023
// no angle should be between 300 and 360 degrees
void setAngle(unsigned char id, int angle, int speed) {
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	460c      	mov	r4, r1
 8003558:	4605      	mov	r5, r0
  setSpeed(id, speed);
 800355a:	4611      	mov	r1, r2
 800355c:	f7ff ffb7 	bl	80034ce <setSpeed>
  int angle_norm;

  if (angle >=0)
 8003560:	2c00      	cmp	r4, #0
    angle_norm = angle;

  else
    angle_norm = 1024 + angle;
 8003562:	bfb8      	it	lt
 8003564:	f504 6480 	addlt.w	r4, r4, #1024	; 0x400

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
 8003568:	4622      	mov	r2, r4
 800356a:	4628      	mov	r0, r5
 800356c:	211e      	movs	r1, #30
 800356e:	f000 fe67 	bl	8004240 <dxl_write_word>
  int result =  dxl_get_result();
 8003572:	f000 fddb 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003576:	2801      	cmp	r0, #1

  else
    angle_norm = 1024 + angle;

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
  int result =  dxl_get_result();
 8003578:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800357a:	d00a      	beq.n	8003592 <setAngle+0x3e>
    {
      TxDString("\nproblem, code==");
 800357c:	4805      	ldr	r0, [pc, #20]	; (8003594 <setAngle+0x40>)
 800357e:	f7ff fedd 	bl	800333c <TxDString>
      TxDWord16(result);
 8003582:	b2a0      	uxth	r0, r4
 8003584:	f7ff ff99 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <setAngle+0x44>)
 800358e:	f7ff bed5 	b.w	800333c <TxDString>
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 8003598:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

0800359c <lifting>:
// SHOVEL
// ------



void lifting(int out_Angle1, int out_Angle2){
 800359c:	4603      	mov	r3, r0
 800359e:	b510      	push	{r4, lr}
 80035a0:	460c      	mov	r4, r1
    setAngle(MOTOR_up_left, out_Angle1, 100);
 80035a2:	2002      	movs	r0, #2
 80035a4:	4619      	mov	r1, r3
 80035a6:	2264      	movs	r2, #100	; 0x64
 80035a8:	f7ff ffd4 	bl	8003554 <setAngle>
    setAngle(MOTOR_up_right, out_Angle2, 100);
 80035ac:	4621      	mov	r1, r4
}
 80035ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}



void lifting(int out_Angle1, int out_Angle2){
    setAngle(MOTOR_up_left, out_Angle1, 100);
    setAngle(MOTOR_up_right, out_Angle2, 100);
 80035b2:	2001      	movs	r0, #1
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	f7ff bfcd 	b.w	8003554 <setAngle>

080035ba <down_to_upping>:
    getAngle(MOTOR_up_left, &current_Angle1);
    if( abs(current_Angle1-init_Angle1) <= shovelthreshold && abs(current_Angle2-init_Angle2) <= shovelthreshold)
        *shovel_state = shovel_down;
}

void down_to_upping(int* shovel_state, int out_Angle1, int out_Angle2){
 80035ba:	b510      	push	{r4, lr}
 80035bc:	4604      	mov	r4, r0
    lifting(out_Angle1, out_Angle2);
 80035be:	4608      	mov	r0, r1
 80035c0:	4611      	mov	r1, r2
 80035c2:	f7ff ffeb 	bl	800359c <lifting>
    *shovel_state = shovel_upping;
 80035c6:	2302      	movs	r3, #2
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd10      	pop	{r4, pc}

080035cc <lightOn>:
}


// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
 80035cc:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
 80035ce:	2119      	movs	r1, #25
 80035d0:	2201      	movs	r2, #1
 80035d2:	f000 fe0b 	bl	80041ec <dxl_write_byte>
  int result =  dxl_get_result();
 80035d6:	f000 fda9 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80035da:	2801      	cmp	r0, #1

// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
  int result =  dxl_get_result();
 80035dc:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80035de:	d00a      	beq.n	80035f6 <lightOn+0x2a>
    {
      TxDString("\nproblem, code==");
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <lightOn+0x2c>)
 80035e2:	f7ff feab 	bl	800333c <TxDString>
      TxDWord16(result);
 80035e6:	b2a0      	uxth	r0, r4
 80035e8:	f7ff ff67 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80035ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <lightOn+0x30>)
 80035f2:	f7ff bea3 	b.w	800333c <TxDString>
 80035f6:	bd10      	pop	{r4, pc}
 80035f8:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 80035fc:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

08003600 <lightOff>:
    }
}

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
 8003600:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
 8003602:	2119      	movs	r1, #25
 8003604:	2200      	movs	r2, #0
 8003606:	f000 fdf1 	bl	80041ec <dxl_write_byte>
  int result =  dxl_get_result();
 800360a:	f000 fd8f 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800360e:	2801      	cmp	r0, #1

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
  int result =  dxl_get_result();
 8003610:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003612:	d00a      	beq.n	800362a <lightOff+0x2a>
    {
      TxDString("\nproblem, code==");
 8003614:	4805      	ldr	r0, [pc, #20]	; (800362c <lightOff+0x2c>)
 8003616:	f7ff fe91 	bl	800333c <TxDString>
      TxDWord16(result);
 800361a:	b2a0      	uxth	r0, r4
 800361c:	f7ff ff4d 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <lightOff+0x30>)
 8003626:	f7ff be89 	b.w	800333c <TxDString>
 800362a:	bd10      	pop	{r4, pc}
 800362c:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 8003630:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

08003634 <getSpeed>:

// returns the current motor's speed
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
 8003634:	b510      	push	{r4, lr}
 8003636:	460c      	mov	r4, r1
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
 8003638:	2120      	movs	r1, #32
 800363a:	f000 fde9 	bl	8004210 <dxl_read_word>
 800363e:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 8003640:	f000 fd74 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003644:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
  int result =  dxl_get_result();
 8003646:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003648:	d00a      	beq.n	8003660 <getSpeed+0x2c>
    {
      TxDString("\nproblem, code=");
 800364a:	4806      	ldr	r0, [pc, #24]	; (8003664 <getSpeed+0x30>)
 800364c:	f7ff fe76 	bl	800333c <TxDString>
      TxDWord16(result);
 8003650:	b2a0      	uxth	r0, r4
 8003652:	f7ff ff32 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 800365a:	4803      	ldr	r0, [pc, #12]	; (8003668 <getSpeed+0x34>)
 800365c:	f7ff be6e 	b.w	800333c <TxDString>
 8003660:	bd10      	pop	{r4, pc}
 8003662:	bf00      	nop
 8003664:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003668:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

0800366c <getAngle>:

// returns the current motor's angle,  infinite turn must be disabled to use this function
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
 800366c:	b510      	push	{r4, lr}
 800366e:	460c      	mov	r4, r1
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
 8003670:	2124      	movs	r1, #36	; 0x24
 8003672:	f000 fdcd 	bl	8004210 <dxl_read_word>
 8003676:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 8003678:	f000 fd58 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800367c:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
  int result =  dxl_get_result();
 800367e:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003680:	d00a      	beq.n	8003698 <getAngle+0x2c>
    {
      TxDString("\nproblem, code=");
 8003682:	4806      	ldr	r0, [pc, #24]	; (800369c <getAngle+0x30>)
 8003684:	f7ff fe5a 	bl	800333c <TxDString>
      TxDWord16(result);
 8003688:	b2a0      	uxth	r0, r4
 800368a:	f7ff ff16 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 800368e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003692:	4803      	ldr	r0, [pc, #12]	; (80036a0 <getAngle+0x34>)
 8003694:	f7ff be52 	b.w	800333c <TxDString>
 8003698:	bd10      	pop	{r4, pc}
 800369a:	bf00      	nop
 800369c:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 80036a0:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

080036a4 <upping_to_up>:
void lifting(int out_Angle1, int out_Angle2){
    setAngle(MOTOR_up_left, out_Angle1, 100);
    setAngle(MOTOR_up_right, out_Angle2, 100);
}

void upping_to_up(int* shovel_state, int out_Angle1, int out_Angle2){
 80036a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036a6:	460e      	mov	r6, r1
 80036a8:	4604      	mov	r4, r0
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 80036aa:	a901      	add	r1, sp, #4
 80036ac:	2001      	movs	r0, #1
void lifting(int out_Angle1, int out_Angle2){
    setAngle(MOTOR_up_left, out_Angle1, 100);
    setAngle(MOTOR_up_right, out_Angle2, 100);
}

void upping_to_up(int* shovel_state, int out_Angle1, int out_Angle2){
 80036ae:	4615      	mov	r5, r2
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 80036b0:	f7ff ffdc 	bl	800366c <getAngle>
    getAngle(MOTOR_up_left, &current_Angle1);
 80036b4:	4669      	mov	r1, sp
 80036b6:	2002      	movs	r0, #2
 80036b8:	f7ff ffd8 	bl	800366c <getAngle>
    if(abs(current_Angle1-out_Angle1) <= shovelthreshold  && abs(current_Angle2-out_Angle2) <= shovelthreshold)
 80036bc:	9900      	ldr	r1, [sp, #0]
 80036be:	1b89      	subs	r1, r1, r6
 80036c0:	310a      	adds	r1, #10
 80036c2:	2914      	cmp	r1, #20
 80036c4:	d806      	bhi.n	80036d4 <upping_to_up+0x30>
 80036c6:	9b01      	ldr	r3, [sp, #4]
 80036c8:	1b5b      	subs	r3, r3, r5
 80036ca:	330a      	adds	r3, #10
 80036cc:	2b14      	cmp	r3, #20
        *shovel_state = shovel_up;
 80036ce:	bf9c      	itt	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	6023      	strls	r3, [r4, #0]
}
 80036d4:	b002      	add	sp, #8
 80036d6:	bd70      	pop	{r4, r5, r6, pc}

080036d8 <lowering_to_low>:
    mDelay(1000);
    lifting(init_Angle1, init_Angle2);
    *shovel_state = shovel_lowering;
}

void lowering_to_low(int* shovel_state, unsigned int init_Angle1, unsigned int init_Angle2){
 80036d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036da:	460e      	mov	r6, r1
 80036dc:	4604      	mov	r4, r0
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 80036de:	a901      	add	r1, sp, #4
 80036e0:	2001      	movs	r0, #1
    mDelay(1000);
    lifting(init_Angle1, init_Angle2);
    *shovel_state = shovel_lowering;
}

void lowering_to_low(int* shovel_state, unsigned int init_Angle1, unsigned int init_Angle2){
 80036e2:	4615      	mov	r5, r2
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 80036e4:	f7ff ffc2 	bl	800366c <getAngle>
    getAngle(MOTOR_up_left, &current_Angle1);
 80036e8:	4669      	mov	r1, sp
 80036ea:	2002      	movs	r0, #2
 80036ec:	f7ff ffbe 	bl	800366c <getAngle>
    if( abs(current_Angle1-init_Angle1) <= shovelthreshold && abs(current_Angle2-init_Angle2) <= shovelthreshold)
 80036f0:	9900      	ldr	r1, [sp, #0]
 80036f2:	1b89      	subs	r1, r1, r6
 80036f4:	f111 0f0a 	cmn.w	r1, #10
 80036f8:	db0a      	blt.n	8003710 <lowering_to_low+0x38>
 80036fa:	290a      	cmp	r1, #10
 80036fc:	dc08      	bgt.n	8003710 <lowering_to_low+0x38>
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	1b5a      	subs	r2, r3, r5
 8003702:	f112 0f0a 	cmn.w	r2, #10
 8003706:	db03      	blt.n	8003710 <lowering_to_low+0x38>
 8003708:	2a0a      	cmp	r2, #10
        *shovel_state = shovel_down;
 800370a:	bfdc      	itt	le
 800370c:	2300      	movle	r3, #0
 800370e:	6023      	strle	r3, [r4, #0]
}
 8003710:	b002      	add	sp, #8
 8003712:	bd70      	pop	{r4, r5, r6, pc}

08003714 <checkObstacle>:
/////////////////////////////////////////////////////

// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
 8003714:	b510      	push	{r4, lr}
 8003716:	460c      	mov	r4, r1
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
 8003718:	2120      	movs	r1, #32
 800371a:	f000 fd53 	bl	80041c4 <dxl_read_byte>
 800371e:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 8003720:	f000 fd04 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003724:	2801      	cmp	r0, #1
// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
  int result =  dxl_get_result();
 8003726:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003728:	d00a      	beq.n	8003740 <checkObstacle+0x2c>
    {
      TxDString("\nproblem, code=");
 800372a:	4806      	ldr	r0, [pc, #24]	; (8003744 <checkObstacle+0x30>)
 800372c:	f7ff fe06 	bl	800333c <TxDString>
      TxDWord16(result);
 8003730:	b2a0      	uxth	r0, r4
 8003732:	f7ff fec2 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }

}
 8003736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 800373a:	4803      	ldr	r0, [pc, #12]	; (8003748 <checkObstacle+0x34>)
 800373c:	f7ff bdfe 	b.w	800333c <TxDString>
 8003740:	bd10      	pop	{r4, pc}
 8003742:	bf00      	nop
 8003744:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003748:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

0800374c <checkLuminosity>:


// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
 800374c:	b510      	push	{r4, lr}
 800374e:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
 8003750:	2121      	movs	r1, #33	; 0x21
 8003752:	f000 fd37 	bl	80041c4 <dxl_read_byte>
 8003756:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003758:	f000 fce8 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 800375c:	2801      	cmp	r0, #1
// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
   int result =  dxl_get_result();
 800375e:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003760:	d00a      	beq.n	8003778 <checkLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 8003762:	4806      	ldr	r0, [pc, #24]	; (800377c <checkLuminosity+0x30>)
 8003764:	f7ff fdea 	bl	800333c <TxDString>
       TxDWord16(result);
 8003768:	b2a0      	uxth	r0, r4
 800376a:	f7ff fea6 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }

}
 800376e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003772:	4803      	ldr	r0, [pc, #12]	; (8003780 <checkLuminosity+0x34>)
 8003774:	f7ff bde2 	b.w	800333c <TxDString>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	bf00      	nop
 800377c:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003780:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

08003784 <leftInfraRed>:

}
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
 8003784:	b510      	push	{r4, lr}
 8003786:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
 8003788:	211a      	movs	r1, #26
 800378a:	f000 fd1b 	bl	80041c4 <dxl_read_byte>
 800378e:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 8003790:	f000 fccc 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003794:	2801      	cmp	r0, #1
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
  int result =  dxl_get_result();
 8003796:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003798:	d00a      	beq.n	80037b0 <leftInfraRed+0x2c>
    {
      TxDString("\nproblem, code=");
 800379a:	4806      	ldr	r0, [pc, #24]	; (80037b4 <leftInfraRed+0x30>)
 800379c:	f7ff fdce 	bl	800333c <TxDString>
      TxDWord16(result);
 80037a0:	b2a0      	uxth	r0, r4
 80037a2:	f7ff fe8a 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80037a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80037aa:	4803      	ldr	r0, [pc, #12]	; (80037b8 <leftInfraRed+0x34>)
 80037ac:	f7ff bdc6 	b.w	800333c <TxDString>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 80037b8:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

080037bc <centerInfraRed>:
}

// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
 80037bc:	b510      	push	{r4, lr}
 80037be:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
 80037c0:	211b      	movs	r1, #27
 80037c2:	f000 fcff 	bl	80041c4 <dxl_read_byte>
 80037c6:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 80037c8:	f000 fcb0 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80037cc:	2801      	cmp	r0, #1
// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
   int result =  dxl_get_result();
 80037ce:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80037d0:	d00a      	beq.n	80037e8 <centerInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 80037d2:	4806      	ldr	r0, [pc, #24]	; (80037ec <centerInfraRed+0x30>)
 80037d4:	f7ff fdb2 	bl	800333c <TxDString>
       TxDWord16(result);
 80037d8:	b2a0      	uxth	r0, r4
 80037da:	f7ff fe6e 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
    }
}
 80037de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80037e2:	4803      	ldr	r0, [pc, #12]	; (80037f0 <centerInfraRed+0x34>)
 80037e4:	f7ff bdaa 	b.w	800333c <TxDString>
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 80037f0:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

080037f4 <rightInfraRed>:
}

// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
 80037f4:	b510      	push	{r4, lr}
 80037f6:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
 80037f8:	211c      	movs	r1, #28
 80037fa:	f000 fce3 	bl	80041c4 <dxl_read_byte>
 80037fe:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003800:	f000 fc94 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003804:	2801      	cmp	r0, #1
// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
   int result =  dxl_get_result();
 8003806:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003808:	d00a      	beq.n	8003820 <rightInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 800380a:	4806      	ldr	r0, [pc, #24]	; (8003824 <rightInfraRed+0x30>)
 800380c:	f7ff fd96 	bl	800333c <TxDString>
       TxDWord16(result);
 8003810:	b2a0      	uxth	r0, r4
 8003812:	f7ff fe52 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800381a:	4803      	ldr	r0, [pc, #12]	; (8003828 <rightInfraRed+0x34>)
 800381c:	f7ff bd8e 	b.w	800333c <TxDString>
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003828:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

0800382c <leftLuminosity>:


// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
 800382c:	b510      	push	{r4, lr}
 800382e:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
 8003830:	211d      	movs	r1, #29
 8003832:	f000 fcc7 	bl	80041c4 <dxl_read_byte>
 8003836:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003838:	f000 fc78 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 800383c:	2801      	cmp	r0, #1
// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
   int result =  dxl_get_result();
 800383e:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003840:	d00a      	beq.n	8003858 <leftLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 8003842:	4806      	ldr	r0, [pc, #24]	; (800385c <leftLuminosity+0x30>)
 8003844:	f7ff fd7a 	bl	800333c <TxDString>
       TxDWord16(result);
 8003848:	b2a0      	uxth	r0, r4
 800384a:	f7ff fe36 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 800384e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003852:	4803      	ldr	r0, [pc, #12]	; (8003860 <leftLuminosity+0x34>)
 8003854:	f7ff bd72 	b.w	800333c <TxDString>
 8003858:	bd10      	pop	{r4, pc}
 800385a:	bf00      	nop
 800385c:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003860:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

08003864 <centerLuminosity>:
}

// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
 8003864:	b510      	push	{r4, lr}
 8003866:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
 8003868:	211e      	movs	r1, #30
 800386a:	f000 fcab 	bl	80041c4 <dxl_read_byte>
 800386e:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003870:	f000 fc5c 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003874:	2801      	cmp	r0, #1
// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
   int result =  dxl_get_result();
 8003876:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003878:	d00a      	beq.n	8003890 <centerLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <centerLuminosity+0x30>)
 800387c:	f7ff fd5e 	bl	800333c <TxDString>
       TxDWord16(result);
 8003880:	b2a0      	uxth	r0, r4
 8003882:	f7ff fe1a 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800388a:	4803      	ldr	r0, [pc, #12]	; (8003898 <centerLuminosity+0x34>)
 800388c:	f7ff bd56 	b.w	800333c <TxDString>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003898:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

0800389c <rightLuminosity>:
}

// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
 800389c:	b510      	push	{r4, lr}
 800389e:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
 80038a0:	211f      	movs	r1, #31
 80038a2:	f000 fc8f 	bl	80041c4 <dxl_read_byte>
 80038a6:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 80038a8:	f000 fc40 	bl	800412c <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80038ac:	2801      	cmp	r0, #1
// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
  int result =  dxl_get_result();
 80038ae:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80038b0:	d00a      	beq.n	80038c8 <rightLuminosity+0x2c>
    {
      TxDString("\nproblem, code=");
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <rightLuminosity+0x30>)
 80038b4:	f7ff fd42 	bl	800333c <TxDString>
      TxDWord16(result);
 80038b8:	b2a0      	uxth	r0, r4
 80038ba:	f7ff fdfe 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80038be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80038c2:	4803      	ldr	r0, [pc, #12]	; (80038d0 <rightLuminosity+0x34>)
 80038c4:	f7ff bd3a 	b.w	800333c <TxDString>
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	bf00      	nop
 80038cc:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 80038d0:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

080038d4 <dataSound>:
}


// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
 80038d4:	b510      	push	{r4, lr}
 80038d6:	460c      	mov	r4, r1
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
 80038d8:	2123      	movs	r1, #35	; 0x23
 80038da:	f000 fc99 	bl	8004210 <dxl_read_word>
 80038de:	6020      	str	r0, [r4, #0]
   int result =  dxl_get_result();
 80038e0:	f000 fc24 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80038e4:	2801      	cmp	r0, #1

// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
   int result =  dxl_get_result();
 80038e6:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80038e8:	d00a      	beq.n	8003900 <dataSound+0x2c>
     {
       TxDString("\nproblem, code=");
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <dataSound+0x30>)
 80038ec:	f7ff fd26 	bl	800333c <TxDString>
       TxDWord16(result);
 80038f0:	b2a0      	uxth	r0, r4
 80038f2:	f7ff fde2 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 80038f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80038fa:	4803      	ldr	r0, [pc, #12]	; (8003908 <dataSound+0x34>)
 80038fc:	f7ff bd1e 	b.w	800333c <TxDString>
 8003900:	bd10      	pop	{r4, pc}
 8003902:	bf00      	nop
 8003904:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 8003908:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

0800390c <noteBuzz>:
     }
}


//helper function
void noteBuzz(unsigned char sensor, int note) {
 800390c:	b510      	push	{r4, lr}
 800390e:	460a      	mov	r2, r1
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
 8003910:	2128      	movs	r1, #40	; 0x28
 8003912:	f000 fc6b 	bl	80041ec <dxl_write_byte>
   int result =  dxl_get_result();
 8003916:	f000 fc09 	bl	800412c <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 800391a:	2801      	cmp	r0, #1


//helper function
void noteBuzz(unsigned char sensor, int note) {
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
   int result =  dxl_get_result();
 800391c:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 800391e:	d00a      	beq.n	8003936 <noteBuzz+0x2a>
     {
       TxDString("\nproblem, code=");
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <noteBuzz+0x2c>)
 8003922:	f7ff fd0b 	bl	800333c <TxDString>
       TxDWord16(result);
 8003926:	b2a0      	uxth	r0, r4
 8003928:	f7ff fdc7 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 800392c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <noteBuzz+0x30>)
 8003932:	f7ff bd03 	b.w	800333c <TxDString>
 8003936:	bd10      	pop	{r4, pc}
 8003938:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
 800393c:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}

08003940 <timeBuzz>:
     }
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4605      	mov	r5, r0
 8003944:	460c      	mov	r4, r1
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
  {
    dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerTime, time) ;
 8003946:	4628      	mov	r0, r5
 8003948:	2129      	movs	r1, #41	; 0x29
 800394a:	4622      	mov	r2, r4
 800394c:	f000 fc4e 	bl	80041ec <dxl_write_byte>
    result =  dxl_get_result();
 8003950:	f000 fbec 	bl	800412c <dxl_get_result>
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
 8003954:	2801      	cmp	r0, #1
 8003956:	d1f6      	bne.n	8003946 <timeBuzz+0x6>
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
    }
}
 8003958:	bd38      	pop	{r3, r4, r5, pc}

0800395a <Timer_Configuration>:
  USART_SendData(USART3,bTxdData);
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}

void Timer_Configuration(void)
{
 800395a:	b510      	push	{r4, lr}
 800395c:	b088      	sub	sp, #32
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800395e:	a801      	add	r0, sp, #4
 8003960:	f001 fd7f 	bl	8005462 <TIM_TimeBaseStructInit>
  TIM_OCStructInit(&TIM_OCInitStructure);
 8003964:	a804      	add	r0, sp, #16
 8003966:	f001 fd85 	bl	8005474 <TIM_OCStructInit>

  TIM_DeInit(TIM2);
 800396a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800396e:	f001 fbf1 	bl	8005154 <TIM_DeInit>

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 8003972:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003976:	2400      	movs	r4, #0
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003978:	a901      	add	r1, sp, #4
 800397a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_OCStructInit(&TIM_OCInitStructure);

  TIM_DeInit(TIM2);

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 800397e:	f8ad 3008 	strh.w	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003982:	f8ad 4004 	strh.w	r4, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8003986:	f8ad 400a 	strh.w	r4, [sp, #10]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800398a:	f8ad 4006 	strh.w	r4, [sp, #6]

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800398e:	f001 fc45 	bl	800521c <TIM_TimeBaseInit>

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 8003992:	2201      	movs	r2, #1
 8003994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003998:	f240 21d2 	movw	r1, #722	; 0x2d2
 800399c:	f001 fe06 	bl	80055ac <TIM_PrescalerConfig>

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <Timer_Configuration+0x8a>)

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80039a2:	a904      	add	r1, sp, #16

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80039a4:	881b      	ldrh	r3, [r3, #0]

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80039a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80039aa:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 80039ae:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 80039b2:	f8ad 4012 	strh.w	r4, [sp, #18]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80039b6:	f8ad 4018 	strh.w	r4, [sp, #24]
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80039ba:	f001 fc4d 	bl	8005258 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 80039be:	4621      	mov	r1, r4
 80039c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039c4:	f001 fe77 	bl	80056b6 <TIM_OC1PreloadConfig>

  /* TIM IT enable */
  TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 80039c8:	2201      	movs	r2, #1
 80039ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039ce:	2102      	movs	r1, #2
 80039d0:	f001 fd85 	bl	80054de <TIM_ITConfig>

  /* TIM2 enable counter */
  TIM_Cmd(TIM2, ENABLE);
 80039d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039d8:	2101      	movs	r1, #1
 80039da:	f001 fd66 	bl	80054aa <TIM_Cmd>
}
 80039de:	b008      	add	sp, #32
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	20000000 	andcs	r0, r0, r0

080039e8 <TimerInterrupt_1ms>:

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 80039e8:	b510      	push	{r4, lr}
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 80039ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039ee:	2102      	movs	r1, #2
 80039f0:	f002 f88d 	bl	8005b0e <TIM_GetITStatus>
 80039f4:	b1e8      	cbz	r0, 8003a32 <TimerInterrupt_1ms+0x4a>
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 80039f6:	2102      	movs	r1, #2
 80039f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039fc:	f002 f892 	bl	8005b24 <TIM_ClearITPendingBit>

      capture = TIM_GetCapture1(TIM2);
 8003a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a04:	f002 f866 	bl	8005ad4 <TIM_GetCapture1>
 8003a08:	4c0a      	ldr	r4, [pc, #40]	; (8003a34 <TimerInterrupt_1ms+0x4c>)
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <TimerInterrupt_1ms+0x50>)
{
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);

      capture = TIM_GetCapture1(TIM2);
 8003a0c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 8003a10:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a1a:	4419      	add	r1, r3
 8003a1c:	b289      	uxth	r1, r1
 8003a1e:	f001 ff86 	bl	800592e <TIM_SetCompare1>

      if(gw1msCounter > 0)
 8003a22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a26:	b123      	cbz	r3, 8003a32 <TimerInterrupt_1ms+0x4a>
	gw1msCounter--;
 8003a28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	20000018 	andcs	r0, r0, r8, lsl r0
 8003a38:	20000000 	andcs	r0, r0, r0

08003a3c <RxD0Interrupt>:
    }
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 8003a3c:	b538      	push	{r3, r4, r5, lr}
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003a3e:	4809      	ldr	r0, [pc, #36]	; (8003a64 <RxD0Interrupt+0x28>)
 8003a40:	f240 5125 	movw	r1, #1317	; 0x525
 8003a44:	f002 f9ed 	bl	8005e22 <USART_GetITStatus>
 8003a48:	b158      	cbz	r0, 8003a62 <RxD0Interrupt+0x26>
    gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 8003a4a:	4d07      	ldr	r5, [pc, #28]	; (8003a68 <RxD0Interrupt+0x2c>)
 8003a4c:	4805      	ldr	r0, [pc, #20]	; (8003a64 <RxD0Interrupt+0x28>)
 8003a4e:	782b      	ldrb	r3, [r5, #0]
 8003a50:	b2dc      	uxtb	r4, r3
 8003a52:	1c63      	adds	r3, r4, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	702b      	strb	r3, [r5, #0]
 8003a58:	f002 f982 	bl	8005d60 <USART_ReceiveData>
 8003a5c:	442c      	add	r4, r5
 8003a5e:	b2c0      	uxtb	r0, r0
 8003a60:	70a0      	strb	r0, [r4, #2]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	40013800 	andmi	r3, r1, r0, lsl #16
 8003a68:	20000018 	andcs	r0, r0, r8, lsl r0

08003a6c <SysTick_Configuration>:
}

void SysTick_Configuration(void)
{
 8003a6c:	b508      	push	{r3, lr}
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);
 8003a6e:	f242 3028 	movw	r0, #9000	; 0x2328
 8003a72:	f001 faff 	bl	8005074 <SysTick_SetReload>

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
}
 8003a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f001 bb14 	b.w	80050a8 <SysTick_ITConfig>

08003a80 <__ISR_DELAY>:
}

void __ISR_DELAY(void)
{
  if (gwTimingDelay != 0x00)
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <__ISR_DELAY+0x14>)
 8003a82:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003a86:	b122      	cbz	r2, 8003a92 <__ISR_DELAY+0x12>
    gwTimingDelay--;
 8003a88:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8003a92:	4770      	bx	lr
 8003a94:	20000018 	andcs	r0, r0, r8, lsl r0

08003a98 <mDelay>:
}

void mDelay(u32 nTime)
{
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	4604      	mov	r4, r0
  /* Enable the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Enable);
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f001 faef 	bl	8005080 <SysTick_CounterCmd>

  gwTimingDelay = nTime;
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <mDelay+0x2c>)
 8003aa4:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c

  while(gwTimingDelay != 0);
 8003aa8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8003aac:	2c00      	cmp	r4, #0
 8003aae:	d1fb      	bne.n	8003aa8 <mDelay+0x10>

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
 8003ab0:	f06f 0001 	mvn.w	r0, #1
 8003ab4:	f001 fae4 	bl	8005080 <SysTick_CounterCmd>
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 8003ab8:	4620      	mov	r0, r4
}
 8003aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(gwTimingDelay != 0);

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 8003abe:	f001 badf 	b.w	8005080 <SysTick_CounterCmd>
 8003ac2:	bf00      	nop
 8003ac4:	20000018 	andcs	r0, r0, r8, lsl r0

08003ac8 <buzzWithDelay>:
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	460c      	mov	r4, r1
 8003acc:	4605      	mov	r5, r0
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 8003ace:	21fe      	movs	r1, #254	; 0xfe
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 8003ad0:	4616      	mov	r6, r2
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 8003ad2:	f7ff ff35 	bl	8003940 <timeBuzz>
  noteBuzz(sensor, note);
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7ff ff17 	bl	800390c <noteBuzz>

  for (k=0; k<time; k++) {
 8003ade:	2400      	movs	r4, #0
 8003ae0:	42b4      	cmp	r4, r6
 8003ae2:	da04      	bge.n	8003aee <buzzWithDelay+0x26>
       mDelay(1) ;
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff ffd7 	bl	8003a98 <mDelay>
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
  noteBuzz(sensor, note);

  for (k=0; k<time; k++) {
 8003aea:	3401      	adds	r4, #1
 8003aec:	e7f8      	b.n	8003ae0 <buzzWithDelay+0x18>
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 8003aee:	4628      	mov	r0, r5
  return ;

}
 8003af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  for (k=0; k<time; k++) {
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 8003af4:	2100      	movs	r1, #0
 8003af6:	f7ff bf23 	b.w	8003940 <timeBuzz>

08003afa <init_music>:
    USART_Configuration(USART_PC, Baudrate_PC);
}


// delay -> 1,5s
void init_music() {                  //Totally spies
 8003afa:	b508      	push	{r3, lr}

    buzzWithDelay(SENSOR, 19, 125);
 8003afc:	2064      	movs	r0, #100	; 0x64
 8003afe:	2113      	movs	r1, #19
 8003b00:	227d      	movs	r2, #125	; 0x7d
 8003b02:	f7ff ffe1 	bl	8003ac8 <buzzWithDelay>
    buzzWithDelay(SENSOR, 16, 125);
 8003b06:	2064      	movs	r0, #100	; 0x64
 8003b08:	2110      	movs	r1, #16
 8003b0a:	227d      	movs	r2, #125	; 0x7d
 8003b0c:	f7ff ffdc 	bl	8003ac8 <buzzWithDelay>
    buzzWithDelay(SENSOR, 16, 250);
 8003b10:	2110      	movs	r1, #16
 8003b12:	22fa      	movs	r2, #250	; 0xfa
 8003b14:	2064      	movs	r0, #100	; 0x64
 8003b16:	f7ff ffd7 	bl	8003ac8 <buzzWithDelay>
    mDelay(500);
 8003b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b1e:	f7ff ffbb 	bl	8003a98 <mDelay>
    
    buzzWithDelay(SENSOR, 14, 125);
 8003b22:	2064      	movs	r0, #100	; 0x64
 8003b24:	210e      	movs	r1, #14
 8003b26:	227d      	movs	r2, #125	; 0x7d
 8003b28:	f7ff ffce 	bl	8003ac8 <buzzWithDelay>
    buzzWithDelay(SENSOR, 16, 125);
 8003b2c:	2064      	movs	r0, #100	; 0x64
 8003b2e:	2110      	movs	r1, #16
 8003b30:	227d      	movs	r2, #125	; 0x7d
 8003b32:	f7ff ffc9 	bl	8003ac8 <buzzWithDelay>
    buzzWithDelay(SENSOR, 19, 250);
}
 8003b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    buzzWithDelay(SENSOR, 16, 250);
    mDelay(500);
    
    buzzWithDelay(SENSOR, 14, 125);
    buzzWithDelay(SENSOR, 16, 125);
    buzzWithDelay(SENSOR, 19, 250);
 8003b3a:	2064      	movs	r0, #100	; 0x64
 8003b3c:	2113      	movs	r1, #19
 8003b3e:	22fa      	movs	r2, #250	; 0xfa
 8003b40:	f7ff bfc2 	b.w	8003ac8 <buzzWithDelay>

08003b44 <init_music2>:
}

// delay -> 2,5s
void init_music2(){                   //John cena
 8003b44:	b508      	push	{r3, lr}
    buzzWithDelay(SENSOR, 22, 125);
 8003b46:	2116      	movs	r1, #22
 8003b48:	227d      	movs	r2, #125	; 0x7d
 8003b4a:	2064      	movs	r0, #100	; 0x64
 8003b4c:	f7ff ffbc 	bl	8003ac8 <buzzWithDelay>
    mDelay(125);
 8003b50:	207d      	movs	r0, #125	; 0x7d
 8003b52:	f7ff ffa1 	bl	8003a98 <mDelay>
    buzzWithDelay(SENSOR, 24, 125);
 8003b56:	2064      	movs	r0, #100	; 0x64
 8003b58:	2118      	movs	r1, #24
 8003b5a:	227d      	movs	r2, #125	; 0x7d
 8003b5c:	f7ff ffb4 	bl	8003ac8 <buzzWithDelay>
    buzzWithDelay(SENSOR, 20, 125);
 8003b60:	2114      	movs	r1, #20
 8003b62:	227d      	movs	r2, #125	; 0x7d
 8003b64:	2064      	movs	r0, #100	; 0x64
 8003b66:	f7ff ffaf 	bl	8003ac8 <buzzWithDelay>
    mDelay(125);
 8003b6a:	207d      	movs	r0, #125	; 0x7d
 8003b6c:	f7ff ff94 	bl	8003a98 <mDelay>
    
    // trop long les sons ?
    buzzWithDelay(SENSOR, 22, 500);
 8003b70:	2116      	movs	r1, #22
 8003b72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b76:	2064      	movs	r0, #100	; 0x64
 8003b78:	f7ff ffa6 	bl	8003ac8 <buzzWithDelay>
    mDelay(125);
 8003b7c:	207d      	movs	r0, #125	; 0x7d
 8003b7e:	f7ff ff8b 	bl	8003a98 <mDelay>
    buzzWithDelay(SENSOR, 25, 125);
 8003b82:	2119      	movs	r1, #25
 8003b84:	227d      	movs	r2, #125	; 0x7d
 8003b86:	2064      	movs	r0, #100	; 0x64
 8003b88:	f7ff ff9e 	bl	8003ac8 <buzzWithDelay>
    mDelay(125);
 8003b8c:	207d      	movs	r0, #125	; 0x7d
 8003b8e:	f7ff ff83 	bl	8003a98 <mDelay>
    buzzWithDelay(SENSOR, 24, 125);
 8003b92:	2064      	movs	r0, #100	; 0x64
 8003b94:	2118      	movs	r1, #24
 8003b96:	227d      	movs	r2, #125	; 0x7d
 8003b98:	f7ff ff96 	bl	8003ac8 <buzzWithDelay>
    buzzWithDelay(SENSOR, 20, 125);
 8003b9c:	2114      	movs	r1, #20
 8003b9e:	227d      	movs	r2, #125	; 0x7d
 8003ba0:	2064      	movs	r0, #100	; 0x64
 8003ba2:	f7ff ff91 	bl	8003ac8 <buzzWithDelay>
    mDelay(125);
 8003ba6:	207d      	movs	r0, #125	; 0x7d
 8003ba8:	f7ff ff76 	bl	8003a98 <mDelay>
    buzzWithDelay(SENSOR, 22, 500);
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	2116      	movs	r1, #22
 8003bb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bb4:	f7ff ff88 	bl	8003ac8 <buzzWithDelay>
    mDelay(125);
}
 8003bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    mDelay(125);
    buzzWithDelay(SENSOR, 24, 125);
    buzzWithDelay(SENSOR, 20, 125);
    mDelay(125);
    buzzWithDelay(SENSOR, 22, 500);
    mDelay(125);
 8003bbc:	207d      	movs	r0, #125	; 0x7d
 8003bbe:	f7ff bf6b 	b.w	8003a98 <mDelay>

08003bc2 <init_lights>:
}


// delay -> 1,4s
void init_lights() {
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	2402      	movs	r4, #2
    int z ;
    for(z = 0; z < 2; z++)
    {   
        TxDString("Motor lights on...\n") ;
 8003bc6:	483a      	ldr	r0, [pc, #232]	; (8003cb0 <init_lights+0xee>)
 8003bc8:	f7ff fbb8 	bl	800333c <TxDString>
        lightOn(MOTOR_down_left);
 8003bcc:	2004      	movs	r0, #4
 8003bce:	f7ff fcfd 	bl	80035cc <lightOn>
        lightOn(MOTOR_down_right);
 8003bd2:	2003      	movs	r0, #3
 8003bd4:	f7ff fcfa 	bl	80035cc <lightOn>

        TxDString("blink!!\n") ;
 8003bd8:	4836      	ldr	r0, [pc, #216]	; (8003cb4 <init_lights+0xf2>)
 8003bda:	f7ff fbaf 	bl	800333c <TxDString>
        GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003bde:	4836      	ldr	r0, [pc, #216]	; (8003cb8 <init_lights+0xf6>)
 8003be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003be4:	f000 fe47 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bec:	4833      	ldr	r0, [pc, #204]	; (8003cbc <init_lights+0xfa>)
 8003bee:	f000 fe44 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003bf2:	2064      	movs	r0, #100	; 0x64
 8003bf4:	f7ff ff50 	bl	8003a98 <mDelay>

        GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003bf8:	4830      	ldr	r0, [pc, #192]	; (8003cbc <init_lights+0xfa>)
 8003bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bfe:	f000 fe3a 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c06:	482d      	ldr	r0, [pc, #180]	; (8003cbc <init_lights+0xfa>)
 8003c08:	f000 fe37 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003c0c:	2064      	movs	r0, #100	; 0x64
 8003c0e:	f7ff ff43 	bl	8003a98 <mDelay>

        GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003c12:	482a      	ldr	r0, [pc, #168]	; (8003cbc <init_lights+0xfa>)
 8003c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c18:	f000 fe2d 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8003c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c20:	4826      	ldr	r0, [pc, #152]	; (8003cbc <init_lights+0xfa>)
 8003c22:	f000 fe2a 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	f7ff ff36 	bl	8003a98 <mDelay>

        GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8003c2c:	4823      	ldr	r0, [pc, #140]	; (8003cbc <init_lights+0xfa>)
 8003c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c32:	f000 fe20 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
 8003c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c3a:	481f      	ldr	r0, [pc, #124]	; (8003cb8 <init_lights+0xf6>)
 8003c3c:	f000 fe1d 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003c40:	2064      	movs	r0, #100	; 0x64
 8003c42:	f7ff ff29 	bl	8003a98 <mDelay>

        GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);
 8003c46:	481c      	ldr	r0, [pc, #112]	; (8003cb8 <init_lights+0xf6>)
 8003c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c4c:	f000 fe13 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);
 8003c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c54:	4818      	ldr	r0, [pc, #96]	; (8003cb8 <init_lights+0xf6>)
 8003c56:	f000 fe10 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003c5a:	2064      	movs	r0, #100	; 0x64
 8003c5c:	f7ff ff1c 	bl	8003a98 <mDelay>

        GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);
 8003c60:	4815      	ldr	r0, [pc, #84]	; (8003cb8 <init_lights+0xf6>)
 8003c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c66:	f000 fe06 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c6e:	4813      	ldr	r0, [pc, #76]	; (8003cbc <init_lights+0xfa>)
 8003c70:	f000 fe03 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003c74:	2064      	movs	r0, #100	; 0x64
 8003c76:	f7ff ff0f 	bl	8003a98 <mDelay>

        GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003c7a:	4810      	ldr	r0, [pc, #64]	; (8003cbc <init_lights+0xfa>)
 8003c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c80:	f000 fdf9 	bl	8004876 <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c88:	480b      	ldr	r0, [pc, #44]	; (8003cb8 <init_lights+0xf6>)
 8003c8a:	f000 fdf6 	bl	800487a <GPIO_ResetBits>
        mDelay(100);
 8003c8e:	2064      	movs	r0, #100	; 0x64
 8003c90:	f7ff ff02 	bl	8003a98 <mDelay>

        TxDString("Motor lights oFF...\n") ;
 8003c94:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <init_lights+0xfe>)
 8003c96:	f7ff fb51 	bl	800333c <TxDString>
        lightOff(MOTOR_down_left);
 8003c9a:	2004      	movs	r0, #4
 8003c9c:	f7ff fcb0 	bl	8003600 <lightOff>
        lightOff(MOTOR_down_right);
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	f7ff fcad 	bl	8003600 <lightOff>


// delay -> 1,4s
void init_lights() {
    int z ;
    for(z = 0; z < 2; z++)
 8003ca6:	2c01      	cmp	r4, #1
 8003ca8:	d001      	beq.n	8003cae <init_lights+0xec>
 8003caa:	2401      	movs	r4, #1
 8003cac:	e78b      	b.n	8003bc6 <init_lights+0x4>

        TxDString("Motor lights oFF...\n") ;
        lightOff(MOTOR_down_left);
        lightOff(MOTOR_down_right);
    }
}
 8003cae:	bd10      	pop	{r4, pc}
 8003cb0:	080062d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sp, lr}
 8003cb4:	080062e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sp, lr}
 8003cb8:	40011000 	andmi	r1, r1, r0
 8003cbc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003cc0:	080062f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sp, lr}

08003cc4 <up_to_lowering>:
    getAngle(MOTOR_up_left, &current_Angle1);
    if(abs(current_Angle1-out_Angle1) <= shovelthreshold  && abs(current_Angle2-out_Angle2) <= shovelthreshold)
        *shovel_state = shovel_up;
}

void up_to_lowering(int* shovel_state, unsigned int init_Angle1, unsigned int init_Angle2){
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4615      	mov	r5, r2
 8003cc8:	460e      	mov	r6, r1
 8003cca:	4604      	mov	r4, r0
    setSpeed(MOTOR_down_left, speed_ini);
 8003ccc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8003cd0:	2004      	movs	r0, #4
 8003cd2:	f7ff fbfc 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, -speed_ini);
 8003cd6:	4907      	ldr	r1, [pc, #28]	; (8003cf4 <up_to_lowering+0x30>)
 8003cd8:	2003      	movs	r0, #3
 8003cda:	f7ff fbf8 	bl	80034ce <setSpeed>
    mDelay(1000);
 8003cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce2:	f7ff fed9 	bl	8003a98 <mDelay>
    lifting(init_Angle1, init_Angle2);
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7ff fc57 	bl	800359c <lifting>
    *shovel_state = shovel_lowering;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	fffffd44 			; <UNDEFINED> instruction: 0xfffffd44

08003cf8 <detectlb>:

// -----------------
// CONTOUR DETECTION
// -----------------

void detectlb(int thresholdLight, unsigned char *leftfield){
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	460d      	mov	r5, r1
    leftInfraRed(SENSOR, leftfield);
 8003cfe:	2064      	movs	r0, #100	; 0x64
 8003d00:	f7ff fd40 	bl	8003784 <leftInfraRed>
    if (leftfield >= thresholdLight){
 8003d04:	42a5      	cmp	r5, r4
 8003d06:	d30f      	bcc.n	8003d28 <detectlb+0x30>
        setSpeed(MOTOR_down_left, speed_max);
 8003d08:	2004      	movs	r0, #4
 8003d0a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003d0e:	f7ff fbde 	bl	80034ce <setSpeed>
        setSpeed(MOTOR_down_right, speed_max);
 8003d12:	2003      	movs	r0, #3
 8003d14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003d18:	f7ff fbd9 	bl	80034ce <setSpeed>
        mDelay(2000);
    }
}
 8003d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void detectlb(int thresholdLight, unsigned char *leftfield){
    leftInfraRed(SENSOR, leftfield);
    if (leftfield >= thresholdLight){
        setSpeed(MOTOR_down_left, speed_max);
        setSpeed(MOTOR_down_right, speed_max);
        mDelay(2000);
 8003d20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d24:	f7ff beb8 	b.w	8003a98 <mDelay>
 8003d28:	bd38      	pop	{r3, r4, r5, pc}

08003d2a <USART_Configuration>:
{
  USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 8003d2a:	b530      	push	{r4, r5, lr}
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	4604      	mov	r4, r0
 8003d30:	b085      	sub	sp, #20

  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);
 8003d32:	4668      	mov	r0, sp
 8003d34:	f001 ff88 	bl	8005c48 <USART_StructInit>


  USART_InitStructure.USART_BaudRate = baudrate;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003d3e:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003d42:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003d46:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003d4a:	230c      	movs	r3, #12
  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);


  USART_InitStructure.USART_BaudRate = baudrate;
 8003d4c:	9500      	str	r5, [sp, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003d4e:	f8ad 300a 	strh.w	r3, [sp, #10]


  if( PORT == USART_DXL )
 8003d52:	b98c      	cbnz	r4, 8003d78 <USART_Configuration+0x4e>
    {
      USART_DeInit(USART1);
 8003d54:	4811      	ldr	r0, [pc, #68]	; (8003d9c <USART_Configuration+0x72>)
 8003d56:	f001 fee9 	bl	8005b2c <USART_DeInit>
      mDelay(10);
 8003d5a:	200a      	movs	r0, #10
 8003d5c:	f7ff fe9c 	bl	8003a98 <mDelay>
      /* Configure the USART1 */
      USART_Init(USART1, &USART_InitStructure);
 8003d60:	480e      	ldr	r0, [pc, #56]	; (8003d9c <USART_Configuration+0x72>)
 8003d62:	4669      	mov	r1, sp
 8003d64:	f001 ff2c 	bl	8005bc0 <USART_Init>

      /* Enable USART1 Receive and Transmit interrupts */
      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003d68:	480c      	ldr	r0, [pc, #48]	; (8003d9c <USART_Configuration+0x72>)
 8003d6a:	f240 5125 	movw	r1, #1317	; 0x525
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f001 ff97 	bl	8005ca2 <USART_ITConfig>
      //USART_ITConfig(USART1, USART_IT_TC, ENABLE);

      /* Enable the USART1 */
      USART_Cmd(USART1, ENABLE);
 8003d74:	4809      	ldr	r0, [pc, #36]	; (8003d9c <USART_Configuration+0x72>)
 8003d76:	e00c      	b.n	8003d92 <USART_Configuration+0x68>
    }

  else if( PORT == USART_PC )
 8003d78:	2c02      	cmp	r4, #2
 8003d7a:	d10d      	bne.n	8003d98 <USART_Configuration+0x6e>
    {
      USART_DeInit(USART3);
 8003d7c:	4808      	ldr	r0, [pc, #32]	; (8003da0 <USART_Configuration+0x76>)
 8003d7e:	f001 fed5 	bl	8005b2c <USART_DeInit>
      mDelay(10);
 8003d82:	200a      	movs	r0, #10
 8003d84:	f7ff fe88 	bl	8003a98 <mDelay>
      /* Configure the USART3 */
      USART_Init(USART3, &USART_InitStructure);
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <USART_Configuration+0x76>)
 8003d8a:	4669      	mov	r1, sp
 8003d8c:	f001 ff18 	bl	8005bc0 <USART_Init>
      /* Enable USART3 Receive and Transmit interrupts */
      //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
      //USART_ITConfig(USART3, USART_IT_TC, ENABLE);

      /* Enable the USART3 */
      USART_Cmd(USART3, ENABLE);
 8003d90:	4803      	ldr	r0, [pc, #12]	; (8003da0 <USART_Configuration+0x76>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	f001 ff79 	bl	8005c8a <USART_Cmd>
    }
}
 8003d98:	b005      	add	sp, #20
 8003d9a:	bd30      	pop	{r4, r5, pc}
 8003d9c:	40013800 	andmi	r3, r1, r0, lsl #16
 8003da0:	40004800 	andmi	r4, r0, r0, lsl #16

08003da4 <init_config>:
// --------------



// DO NOT TOUCH
void init_config() {
 8003da4:	b508      	push	{r3, lr}
    /* System Clocks Configuration */
    RCC_Configuration();
 8003da6:	f7ff f9c5 	bl	8003134 <RCC_Configuration>

    /* NVIC configuration */
    NVIC_Configuration();
 8003daa:	f7ff fa05 	bl	80031b8 <NVIC_Configuration>

    /* GPIO configuration */
    GPIO_Configuration();
 8003dae:	f7ff fa2a 	bl	8003206 <GPIO_Configuration>

    SysTick_Configuration();
 8003db2:	f7ff fe5b 	bl	8003a6c <SysTick_Configuration>

    Timer_Configuration();
 8003db6:	f7ff fdd0 	bl	800395a <Timer_Configuration>

    dxl_initialize( 0, 1 );
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f000 f897 	bl	8003ef0 <dxl_initialize>
    USART_Configuration(USART_PC, Baudrate_PC);
 8003dc2:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <init_config+0x2c>)
 8003dc4:	2002      	movs	r0, #2
 8003dc6:	6859      	ldr	r1, [r3, #4]
}
 8003dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SysTick_Configuration();

    Timer_Configuration();

    dxl_initialize( 0, 1 );
    USART_Configuration(USART_PC, Baudrate_PC);
 8003dcc:	f7ff bfad 	b.w	8003d2a <USART_Configuration>
 8003dd0:	20000000 	andcs	r0, r0, r0

08003dd4 <USART1_Configuration>:
  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 8003dd4:	4601      	mov	r1, r0
  USART_Configuration(USART_DXL, baudrate);
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7ff bfa7 	b.w	8003d2a <USART_Configuration>

08003ddc <StartDiscount>:
  SysTick_CounterCmd(SysTick_Counter_Clear);
}

void StartDiscount(s32 StartTime)
{
  gw1msCounter = StartTime;
 8003ddc:	4b01      	ldr	r3, [pc, #4]	; (8003de4 <StartDiscount+0x8>)
 8003dde:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 8003de2:	4770      	bx	lr
 8003de4:	20000018 	andcs	r0, r0, r8, lsl r0

08003de8 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
  // Check timeout
  // Return: 0 is false, 1 is true(timeout occurred)

  if(gw1msCounter == 0)
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <CheckTimeOut+0x10>)
 8003dea:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    return 1;
  else
    return 0;
}
 8003dee:	fab0 f080 	clz	r0, r0
 8003df2:	0940      	lsrs	r0, r0, #5
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000018 	andcs	r0, r0, r8, lsl r0

08003dfc <NMIException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
 8003dfc:	4770      	bx	lr

08003dfe <HardFaultException>:
void HardFaultException(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003dfe:	e7fe      	b.n	8003dfe <HardFaultException>

08003e00 <MemManageException>:
void MemManageException(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003e00:	e7fe      	b.n	8003e00 <MemManageException>

08003e02 <BusFaultException>:
void BusFaultException(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003e02:	e7fe      	b.n	8003e02 <BusFaultException>

08003e04 <UsageFaultException>:
void UsageFaultException(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003e04:	e7fe      	b.n	8003e04 <UsageFaultException>

08003e06 <DebugMonitor>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
 8003e06:	4770      	bx	lr

08003e08 <SVCHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
 8003e08:	4770      	bx	lr

08003e0a <PendSVC>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
 8003e0a:	4770      	bx	lr

08003e0c <SysTickHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
	__ISR_DELAY();
 8003e0c:	f7ff be38 	b.w	8003a80 <__ISR_DELAY>

08003e10 <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 8003e10:	4770      	bx	lr

08003e12 <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 8003e12:	4770      	bx	lr

08003e14 <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8003e14:	4770      	bx	lr

08003e16 <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8003e16:	4770      	bx	lr

08003e18 <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 8003e18:	4770      	bx	lr

08003e1a <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8003e1a:	4770      	bx	lr

08003e1c <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8003e1c:	4770      	bx	lr

08003e1e <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 8003e1e:	4770      	bx	lr

08003e20 <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8003e20:	4770      	bx	lr

08003e22 <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8003e22:	4770      	bx	lr

08003e24 <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8003e24:	4770      	bx	lr

08003e26 <DMA1_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8003e26:	4770      	bx	lr

08003e28 <DMA1_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8003e28:	4770      	bx	lr

08003e2a <DMA1_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8003e2a:	4770      	bx	lr

08003e2c <DMA1_Channel4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 8003e2c:	4770      	bx	lr

08003e2e <DMA1_Channel5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8003e2e:	4770      	bx	lr

08003e30 <DMA1_Channel6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 8003e30:	4770      	bx	lr

08003e32 <DMA1_Channel7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8003e32:	4770      	bx	lr

08003e34 <ADC1_2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8003e34:	4770      	bx	lr

08003e36 <USB_HP_CAN_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 8003e36:	4770      	bx	lr

08003e38 <USB_LP_CAN_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003e38:	4770      	bx	lr

08003e3a <CAN_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8003e3a:	4770      	bx	lr

08003e3c <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8003e3c:	4770      	bx	lr

08003e3e <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8003e3e:	4770      	bx	lr

08003e40 <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 8003e40:	4770      	bx	lr

08003e42 <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8003e42:	4770      	bx	lr

08003e44 <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 8003e44:	4770      	bx	lr

08003e46 <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8003e46:	4770      	bx	lr

08003e48 <TIM2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
	TimerInterrupt_1ms();
 8003e48:	f7ff bdce 	b.w	80039e8 <TimerInterrupt_1ms>

08003e4c <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 8003e4c:	4770      	bx	lr

08003e4e <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 8003e4e:	4770      	bx	lr

08003e50 <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8003e50:	4770      	bx	lr

08003e52 <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8003e52:	4770      	bx	lr

08003e54 <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8003e54:	4770      	bx	lr

08003e56 <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8003e56:	4770      	bx	lr

08003e58 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8003e58:	4770      	bx	lr

08003e5a <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8003e5a:	4770      	bx	lr

08003e5c <USART1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
	RxD0Interrupt();
 8003e5c:	f7ff bdee 	b.w	8003a3c <RxD0Interrupt>

08003e60 <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8003e60:	4770      	bx	lr

08003e62 <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8003e62:	4770      	bx	lr

08003e64 <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8003e64:	4770      	bx	lr

08003e66 <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8003e66:	4770      	bx	lr

08003e68 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8003e68:	4770      	bx	lr

08003e6a <TIM8_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
 8003e6a:	4770      	bx	lr

08003e6c <TIM8_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
 8003e6c:	4770      	bx	lr

08003e6e <TIM8_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
 8003e6e:	4770      	bx	lr

08003e70 <TIM8_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
 8003e70:	4770      	bx	lr

08003e72 <ADC3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
 8003e72:	4770      	bx	lr

08003e74 <FSMC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
 8003e74:	4770      	bx	lr

08003e76 <SDIO_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
 8003e76:	4770      	bx	lr

08003e78 <TIM5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
 8003e78:	4770      	bx	lr

08003e7a <SPI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
 8003e7a:	4770      	bx	lr

08003e7c <UART4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
 8003e7c:	4770      	bx	lr

08003e7e <UART5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
 8003e7e:	4770      	bx	lr

08003e80 <TIM6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
 8003e80:	4770      	bx	lr

08003e82 <TIM7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
 8003e82:	4770      	bx	lr

08003e84 <DMA2_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
 8003e84:	4770      	bx	lr

08003e86 <DMA2_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
 8003e86:	4770      	bx	lr

08003e88 <DMA2_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
 8003e88:	4770      	bx	lr

08003e8a <DMA2_Channel4_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
 8003e8a:	4770      	bx	lr

08003e8c <dxl_hal_open>:
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 8003e8c:	b508      	push	{r3, lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003e8e:	4608      	mov	r0, r1
 8003e90:	f7ff ffa0 	bl	8003dd4 <USART1_Configuration>
	return 1;
}
 8003e94:	2001      	movs	r0, #1
 8003e96:	bd08      	pop	{r3, pc}

08003e98 <dxl_hal_close>:
void dxl_hal_close()
{
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 8003e98:	f7ff b9f8 	b.w	800328c <DisableUSART1>

08003e9c <dxl_hal_clear>:

void dxl_hal_clear(void)
{
	// Clear communication buffer

	ClearBuffer256();
 8003e9c:	f7ff b9fc 	b.w	8003298 <ClearBuffer256>

08003ea0 <dxl_hal_tx>:
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460c      	mov	r4, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	1c5d      	adds	r5, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	da04      	bge.n	8003eba <dxl_hal_tx+0x1a>
		TxDByte_DXL(pPacket[i]);
 8003eb0:	5cf0      	ldrb	r0, [r6, r3]
 8003eb2:	f7ff fa03 	bl	80032bc <TxDByte_DXL>
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	e7f6      	b.n	8003ea8 <dxl_hal_tx+0x8>

	return numPacket;
}
 8003eba:	4620      	mov	r0, r4
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}

08003ebe <dxl_hal_rx>:

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 8003ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	460e      	mov	r6, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003ec4:	2400      	movs	r4, #0
 8003ec6:	b2e5      	uxtb	r5, r4
 8003ec8:	42b5      	cmp	r5, r6
 8003eca:	da07      	bge.n	8003edc <dxl_hal_rx+0x1e>
	{
		if (CheckNewArrive())
 8003ecc:	f7ff f9ec 	bl	80032a8 <CheckNewArrive>
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	b120      	cbz	r0, 8003ede <dxl_hal_rx+0x20>
			pPacket[i] =  RxDByte_DXL();
 8003ed4:	f7ff fa14 	bl	8003300 <RxDByte_DXL>
 8003ed8:	5578      	strb	r0, [r7, r5]
 8003eda:	e7f4      	b.n	8003ec6 <dxl_hal_rx+0x8>
 8003edc:	4635      	mov	r5, r6
		else
			return i;
	}
	return numPacket;
}
 8003ede:	4628      	mov	r0, r5
 8003ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ee2 <dxl_hal_set_timeout>:
{
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8003ee2:	2364      	movs	r3, #100	; 0x64
 8003ee4:	4358      	muls	r0, r3
 8003ee6:	f7ff bf79 	b.w	8003ddc <StartDiscount>

08003eea <dxl_hal_timeout>:
int dxl_hal_timeout(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 8003eea:	f7ff bf7d 	b.w	8003de8 <CheckTimeOut>
	...

08003ef0 <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003ef0:	b508      	push	{r3, lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <dxl_initialize+0x20>)


int dxl_initialize( int devIndex, int baudnum )
{
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
 8003ef4:	3101      	adds	r1, #1
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003ef6:	fb93 f1f1 	sdiv	r1, r3, r1
 8003efa:	f7ff ffc7 	bl	8003e8c <dxl_hal_open>
 8003efe:	b128      	cbz	r0, 8003f0c <dxl_initialize+0x1c>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <dxl_initialize+0x24>)
 8003f02:	2001      	movs	r0, #1
 8003f04:	6018      	str	r0, [r3, #0]
	giBusUsing = 0;
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <dxl_initialize+0x28>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]



	return 1;
}
 8003f0c:	bd08      	pop	{r3, pc}
 8003f0e:	bf00      	nop
 8003f10:	001e8480 	andseq	r8, lr, r0, lsl #9
 8003f14:	20000014 	andcs	r0, r0, r4, lsl r0
 8003f18:	20000130 	andcs	r0, r0, r0, lsr r1

08003f1c <dxl_terminate>:

void dxl_terminate()
{
	dxl_hal_close();
 8003f1c:	f7ff bfbc 	b.w	8003e98 <dxl_hal_close>

08003f20 <dxl_tx_packet>:
}

void dxl_tx_packet()
{
 8003f20:	b570      	push	{r4, r5, r6, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003f22:	4c24      	ldr	r4, [pc, #144]	; (8003fb4 <dxl_tx_packet+0x94>)
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d043      	beq.n	8003fb2 <dxl_tx_packet+0x92>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003f2a:	79e2      	ldrb	r2, [r4, #7]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003f2c:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003f2e:	2a98      	cmp	r2, #152	; 0x98
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003f30:	6023      	str	r3, [r4, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003f32:	d905      	bls.n	8003f40 <dxl_tx_packet+0x20>
	{
		gbCommStatus = COMM_TXERROR;
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <dxl_tx_packet+0x98>)
 8003f36:	2204      	movs	r2, #4
 8003f38:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	6023      	str	r3, [r4, #0]
		return;
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8003f40:	7a23      	ldrb	r3, [r4, #8]
 8003f42:	1e59      	subs	r1, r3, #1
 8003f44:	2905      	cmp	r1, #5
 8003f46:	d901      	bls.n	8003f4c <dxl_tx_packet+0x2c>
		&& gbInstructionPacket[INSTRUCTION] != INST_READ
		&& gbInstructionPacket[INSTRUCTION] != INST_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
 8003f48:	2b83      	cmp	r3, #131	; 0x83
 8003f4a:	d1f3      	bne.n	8003f34 <dxl_tx_packet+0x14>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003f4c:	23ff      	movs	r3, #255	; 0xff
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003f4e:	2000      	movs	r0, #0
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003f50:	7123      	strb	r3, [r4, #4]
	gbInstructionPacket[1] = 0xff;
 8003f52:	7163      	strb	r3, [r4, #5]

void dxl_tx_packet()
{
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;
 8003f54:	4603      	mov	r3, r0
 8003f56:	b2c1      	uxtb	r1, r0
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003f58:	428a      	cmp	r2, r1
 8003f5a:	f100 0001 	add.w	r0, r0, #1
 8003f5e:	db04      	blt.n	8003f6a <dxl_tx_packet+0x4a>
		checksum += gbInstructionPacket[i+2];
 8003f60:	4421      	add	r1, r4
 8003f62:	7989      	ldrb	r1, [r1, #6]
 8003f64:	440b      	add	r3, r1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e7f5      	b.n	8003f56 <dxl_tx_packet+0x36>
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003f6a:	43db      	mvns	r3, r3
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003f6c:	4d12      	ldr	r5, [pc, #72]	; (8003fb8 <dxl_tx_packet+0x98>)
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003f6e:	4422      	add	r2, r4
 8003f70:	71d3      	strb	r3, [r2, #7]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	3b06      	subs	r3, #6
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d801      	bhi.n	8003f7e <dxl_tx_packet+0x5e>
	{




		dxl_hal_clear();
 8003f7a:	f7ff ff8f 	bl	8003e9c <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003f7e:	79e4      	ldrb	r4, [r4, #7]
 8003f80:	4e0c      	ldr	r6, [pc, #48]	; (8003fb4 <dxl_tx_packet+0x94>)
 8003f82:	3404      	adds	r4, #4
 8003f84:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003f86:	1d30      	adds	r0, r6, #4
 8003f88:	4621      	mov	r1, r4
 8003f8a:	f7ff ff89 	bl	8003ea0 <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8003f8e:	b2c0      	uxtb	r0, r0
 8003f90:	4284      	cmp	r4, r0
 8003f92:	d004      	beq.n	8003f9e <dxl_tx_packet+0x7e>
	{

		gbCommStatus = COMM_TXFAIL;
 8003f94:	2302      	movs	r3, #2
 8003f96:	602b      	str	r3, [r5, #0]
		giBusUsing = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6033      	str	r3, [r6, #0]
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8003f9e:	7a33      	ldrb	r3, [r6, #8]
 8003fa0:	2b02      	cmp	r3, #2
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003fa2:	bf0a      	itet	eq
 8003fa4:	7ab0      	ldrbeq	r0, [r6, #10]
	else
		dxl_hal_set_timeout( 6 );
 8003fa6:	2006      	movne	r0, #6
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003fa8:	3006      	addeq	r0, #6
	else
		dxl_hal_set_timeout( 6 );
 8003faa:	f7ff ff9a 	bl	8003ee2 <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	602b      	str	r3, [r5, #0]
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	20000130 	andcs	r0, r0, r0, lsr r1
 8003fb8:	20000014 	andcs	r0, r0, r4, lsl r0

08003fbc <dxl_rx_packet>:
}

void dxl_rx_packet()
{
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8003fbe:	4c51      	ldr	r4, [pc, #324]	; (8004104 <dxl_rx_packet+0x148>)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 809c 	beq.w	8004100 <dxl_rx_packet+0x144>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 8003fc8:	79a3      	ldrb	r3, [r4, #6]
 8003fca:	4e4f      	ldr	r6, [pc, #316]	; (8004108 <dxl_rx_packet+0x14c>)
 8003fcc:	2bfe      	cmp	r3, #254	; 0xfe
 8003fce:	d101      	bne.n	8003fd4 <dxl_rx_packet+0x18>
	{
		gbCommStatus = COMM_RXSUCCESS;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e033      	b.n	800403c <dxl_rx_packet+0x80>
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 8003fd4:	6833      	ldr	r3, [r6, #0]
 8003fd6:	b923      	cbnz	r3, 8003fe2 <dxl_rx_packet+0x26>
	{
		gbRxGetLength = 0;
 8003fd8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
		gbRxPacketLength = 6;
 8003fdc:	2306      	movs	r3, #6
 8003fde:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003fe2:	4d48      	ldr	r5, [pc, #288]	; (8004104 <dxl_rx_packet+0x148>)
 8003fe4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003fe8:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8003fec:	f105 07a6 	add.w	r7, r5, #166	; 0xa6
 8003ff0:	18f8      	adds	r0, r7, r3
 8003ff2:	1ac9      	subs	r1, r1, r3
 8003ff4:	f7ff ff63 	bl	8003ebe <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003ff8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003ffc:	4418      	add	r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003ffe:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8004002:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 8004004:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8004006:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if( gbRxGetLength < gbRxPacketLength )
 800400a:	d91b      	bls.n	8004044 <dxl_rx_packet+0x88>
	{
		if( dxl_hal_timeout() == 1 )
 800400c:	f7ff ff6d 	bl	8003eea <dxl_hal_timeout>
 8004010:	2801      	cmp	r0, #1
 8004012:	d117      	bne.n	8004044 <dxl_rx_packet+0x88>
		{


			if(gbRxGetLength == 0)
 8004014:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 8004018:	b97b      	cbnz	r3, 800403a <dxl_rx_packet+0x7e>
				gbCommStatus = COMM_RXTIMEOUT;
 800401a:	2306      	movs	r3, #6
 800401c:	e00e      	b.n	800403c <dxl_rx_packet+0x80>
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 800401e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	}

	if( gbRxGetLength < gbRxPacketLength )
 8004022:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8004026:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800402a:	4d36      	ldr	r5, [pc, #216]	; (8004104 <dxl_rx_packet+0x148>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d84d      	bhi.n	80040cc <dxl_rx_packet+0x110>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 8004030:	79aa      	ldrb	r2, [r5, #6]
 8004032:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 8004036:	429a      	cmp	r2, r3
 8004038:	d032      	beq.n	80040a0 <dxl_rx_packet+0xe4>


			if(gbRxGetLength == 0)
				gbCommStatus = COMM_RXTIMEOUT;
			else
				gbCommStatus = COMM_RXCORRUPT;
 800403a:	2307      	movs	r3, #7
 800403c:	6033      	str	r3, [r6, #0]
			giBusUsing = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	6023      	str	r3, [r4, #0]
			return;
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8004044:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8004048:	2200      	movs	r2, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 800404a:	1e48      	subs	r0, r1, #1
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 800404c:	f1a1 0e02 	sub.w	lr, r1, #2
 8004050:	b2d3      	uxtb	r3, r2
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8004052:	4283      	cmp	r3, r0
 8004054:	da09      	bge.n	800406a <dxl_rx_packet+0xae>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8004056:	18e5      	adds	r5, r4, r3
 8004058:	f895 c0a6 	ldrb.w	ip, [r5, #166]	; 0xa6
 800405c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8004060:	d107      	bne.n	8004072 <dxl_rx_packet+0xb6>
 8004062:	f895 50a7 	ldrb.w	r5, [r5, #167]	; 0xa7
 8004066:	2dff      	cmp	r5, #255	; 0xff
 8004068:	d103      	bne.n	8004072 <dxl_rx_packet+0xb6>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0d9      	beq.n	8004022 <dxl_rx_packet+0x66>
 800406e:	2000      	movs	r0, #0
 8004070:	e008      	b.n	8004084 <dxl_rx_packet+0xc8>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8004072:	4573      	cmp	r3, lr
 8004074:	d104      	bne.n	8004080 <dxl_rx_packet+0xc4>
 8004076:	1825      	adds	r5, r4, r0
 8004078:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 800407c:	2dff      	cmp	r5, #255	; 0xff
 800407e:	d0f4      	beq.n	800406a <dxl_rx_packet+0xae>
 8004080:	3201      	adds	r2, #1
 8004082:	e7e5      	b.n	8004050 <dxl_rx_packet+0x94>
 8004084:	b2c2      	uxtb	r2, r0
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8004086:	1acd      	subs	r5, r1, r3
 8004088:	42aa      	cmp	r2, r5
 800408a:	f100 0001 	add.w	r0, r0, #1
 800408e:	dac6      	bge.n	800401e <dxl_rx_packet+0x62>
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8004090:	18e5      	adds	r5, r4, r3
 8004092:	4415      	add	r5, r2
 8004094:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8004098:	4422      	add	r2, r4
 800409a:	f882 50a6 	strb.w	r5, [r2, #166]	; 0xa6
 800409e:	e7f1      	b.n	8004084 <dxl_rx_packet+0xc8>
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 80040a0:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
 80040a4:	3304      	adds	r3, #4
 80040a6:	b2db      	uxtb	r3, r3
	if( gbRxGetLength < gbRxPacketLength )
 80040a8:	4299      	cmp	r1, r3
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 80040aa:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if( gbRxGetLength < gbRxPacketLength )
 80040ae:	d210      	bcs.n	80040d2 <dxl_rx_packet+0x116>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 80040b0:	1878      	adds	r0, r7, r1
 80040b2:	1a59      	subs	r1, r3, r1
 80040b4:	f7ff ff03 	bl	8003ebe <dxl_hal_rx>
		gbRxGetLength += nRead;
 80040b8:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 80040bc:	4418      	add	r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 80040be:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 80040c2:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 80040c4:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 80040c6:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
		if( gbRxGetLength < gbRxPacketLength )
 80040ca:	d902      	bls.n	80040d2 <dxl_rx_packet+0x116>
		gbRxGetLength -= i;		
	}

	if( gbRxGetLength < gbRxPacketLength )
	{
		gbCommStatus = COMM_RXWAITING;
 80040cc:	2305      	movs	r3, #5
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 80040d2:	2000      	movs	r0, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 80040da:	b2c1      	uxtb	r1, r0
 80040dc:	428a      	cmp	r2, r1
 80040de:	f100 0001 	add.w	r0, r0, #1
 80040e2:	db05      	blt.n	80040f0 <dxl_rx_packet+0x134>
		checksum += gbStatusPacket[i+2];
 80040e4:	4421      	add	r1, r4
 80040e6:	f891 10a8 	ldrb.w	r1, [r1, #168]	; 0xa8
 80040ea:	440b      	add	r3, r1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e7f4      	b.n	80040da <dxl_rx_packet+0x11e>
	checksum = ~checksum;
 80040f0:	43db      	mvns	r3, r3

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 80040f2:	4422      	add	r2, r4
 80040f4:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d19d      	bne.n	800403a <dxl_rx_packet+0x7e>
 80040fe:	e767      	b.n	8003fd0 <dxl_rx_packet+0x14>
 8004100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004102:	bf00      	nop
 8004104:	20000130 	andcs	r0, r0, r0, lsr r1
 8004108:	20000014 	andcs	r0, r0, r4, lsl r0

0800410c <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 800410c:	b510      	push	{r4, lr}

	dxl_tx_packet();
 800410e:	f7ff ff07 	bl	8003f20 <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <dxl_txrx_packet+0x1c>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	461c      	mov	r4, r3
 8004118:	b922      	cbnz	r2, 8004124 <dxl_txrx_packet+0x18>
		return;	

	do{

		dxl_rx_packet();
 800411a:	f7ff ff4f 	bl	8003fbc <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	2b05      	cmp	r3, #5
 8004122:	d0fa      	beq.n	800411a <dxl_txrx_packet+0xe>
 8004124:	bd10      	pop	{r4, pc}
 8004126:	bf00      	nop
 8004128:	20000014 	andcs	r0, r0, r4, lsl r0

0800412c <dxl_get_result>:
}

int dxl_get_result()
{
	return gbCommStatus;
}
 800412c:	4b01      	ldr	r3, [pc, #4]	; (8004134 <dxl_get_result+0x8>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000014 	andcs	r0, r0, r4, lsl r0

08004138 <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <dxl_set_txpacket_id+0x8>)
 800413a:	7198      	strb	r0, [r3, #6]
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000130 	andcs	r0, r0, r0, lsr r1

08004144 <dxl_set_txpacket_instruction>:
}

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 8004144:	4b01      	ldr	r3, [pc, #4]	; (800414c <dxl_set_txpacket_instruction+0x8>)
 8004146:	7218      	strb	r0, [r3, #8]
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000130 	andcs	r0, r0, r0, lsr r1

08004150 <dxl_set_txpacket_parameter>:
}

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <dxl_set_txpacket_parameter+0x8>)
 8004152:	4418      	add	r0, r3
 8004154:	7241      	strb	r1, [r0, #9]
 8004156:	4770      	bx	lr
 8004158:	20000130 	andcs	r0, r0, r0, lsr r1

0800415c <dxl_set_txpacket_length>:
}

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <dxl_set_txpacket_length+0x8>)
 800415e:	71d8      	strb	r0, [r3, #7]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000130 	andcs	r0, r0, r0, lsr r1

08004168 <dxl_get_rxpacket_error>:
}

int dxl_get_rxpacket_error( int errbit )
{
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <dxl_get_rxpacket_error+0x10>)
 800416a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800416e:	4218      	tst	r0, r3
		return 1;

	return 0;
}
 8004170:	bf14      	ite	ne
 8004172:	2001      	movne	r0, #1
 8004174:	2000      	moveq	r0, #0
 8004176:	4770      	bx	lr
 8004178:	20000130 	andcs	r0, r0, r0, lsr r1

0800417c <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
	return (int)gbStatusPacket[LENGTH];
}
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <dxl_get_rxpacket_length+0x8>)
 800417e:	f893 00a9 	ldrb.w	r0, [r3, #169]	; 0xa9
 8004182:	4770      	bx	lr
 8004184:	20000130 	andcs	r0, r0, r0, lsr r1

08004188 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
	return (int)gbStatusPacket[PARAMETER+index];
 8004188:	4b02      	ldr	r3, [pc, #8]	; (8004194 <dxl_get_rxpacket_parameter+0xc>)
 800418a:	4418      	add	r0, r3
}
 800418c:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000130 	andcs	r0, r0, r0, lsr r1

08004198 <dxl_makeword>:
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8004198:	eb00 2001 	add.w	r0, r0, r1, lsl #8
	return (int)word;
}
 800419c:	b280      	uxth	r0, r0
 800419e:	4770      	bx	lr

080041a0 <dxl_get_lowbyte>:
{
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 80041a0:	b2c0      	uxtb	r0, r0
 80041a2:	4770      	bx	lr

080041a4 <dxl_get_highbyte>:
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
	return (int)temp;
}
 80041a4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80041a8:	4770      	bx	lr

080041aa <dxl_ping>:

void dxl_ping( int id )
{
	while(giBusUsing);
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <dxl_ping+0x16>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	d1fd      	bne.n	80041ae <dxl_ping+0x4>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 80041b2:	2201      	movs	r2, #1
 80041b4:	721a      	strb	r2, [r3, #8]
	gbInstructionPacket[LENGTH] = 2;
 80041b6:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80041b8:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 80041ba:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
 80041bc:	f7ff bfa6 	b.w	800410c <dxl_txrx_packet>
 80041c0:	20000130 	andcs	r0, r0, r0, lsr r1

080041c4 <dxl_read_byte>:
}

int dxl_read_byte( int id, int address )
{
 80041c4:	b510      	push	{r4, lr}
	while(giBusUsing);
 80041c6:	4c08      	ldr	r4, [pc, #32]	; (80041e8 <dxl_read_byte+0x24>)
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1fd      	bne.n	80041ca <dxl_read_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 80041ce:	2302      	movs	r3, #2
 80041d0:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 80041d6:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80041d8:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 80041da:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 80041dc:	71e3      	strb	r3, [r4, #7]
	
	dxl_txrx_packet();
 80041de:	f7ff ff95 	bl	800410c <dxl_txrx_packet>

	return (int)gbStatusPacket[PARAMETER];
}
 80041e2:	f894 00ab 	ldrb.w	r0, [r4, #171]	; 0xab
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	20000130 	andcs	r0, r0, r0, lsr r1

080041ec <dxl_write_byte>:

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <dxl_write_byte+0x20>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 80041ee:	b510      	push	{r4, lr}
	while(giBusUsing);
 80041f0:	681c      	ldr	r4, [r3, #0]
 80041f2:	2c00      	cmp	r4, #0
 80041f4:	d1fd      	bne.n	80041f2 <dxl_write_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
 80041f6:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 80041f8:	729a      	strb	r2, [r3, #10]
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80041fa:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 80041fc:	2204      	movs	r2, #4
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80041fe:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8004200:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8004202:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 8004204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 8004208:	f7ff bf80 	b.w	800410c <dxl_txrx_packet>
 800420c:	20000130 	andcs	r0, r0, r0, lsr r1

08004210 <dxl_read_word>:
}

int dxl_read_word( int id, int address )
{
 8004210:	b510      	push	{r4, lr}
	while(giBusUsing);
 8004212:	4c0a      	ldr	r4, [pc, #40]	; (800423c <dxl_read_word+0x2c>)
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1fd      	bne.n	8004216 <dxl_read_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 800421a:	2302      	movs	r3, #2
 800421c:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 800421e:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 8004220:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8004222:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 8004224:	71e3      	strb	r3, [r4, #7]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8004226:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[LENGTH] = 4;
	



	dxl_txrx_packet();
 8004228:	f7ff ff70 	bl	800410c <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 800422c:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
	word = word << 8;
	word = word + lowbyte;
 8004230:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 8004234:	eb03 2000 	add.w	r0, r3, r0, lsl #8


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 8004238:	b280      	uxth	r0, r0
 800423a:	bd10      	pop	{r4, pc}
 800423c:	20000130 	andcs	r0, r0, r0, lsr r1

08004240 <dxl_write_word>:

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <dxl_write_word+0x28>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8004242:	b510      	push	{r4, lr}
	while(giBusUsing);
 8004244:	681c      	ldr	r4, [r3, #0]
 8004246:	2c00      	cmp	r4, #0
 8004248:	d1fd      	bne.n	8004246 <dxl_write_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 800424a:	729a      	strb	r2, [r3, #10]
int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
 800424c:	f3c2 2207 	ubfx	r2, r2, #8, #8

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8004250:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 8004252:	72da      	strb	r2, [r3, #11]
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8004254:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 8004256:	2205      	movs	r2, #5
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8004258:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 800425a:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 800425c:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 800425e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
	
	dxl_txrx_packet();
 8004262:	f7ff bf53 	b.w	800410c <dxl_txrx_packet>
 8004266:	bf00      	nop
 8004268:	20000130 	andcs	r0, r0, r0, lsr r1

0800426c <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <FLASH_SetLatency+0x14>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004274:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4310      	orrs	r0, r2
 800427a:	6018      	str	r0, [r3, #0]
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40022000 	andmi	r2, r2, r0

08004284 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <FLASH_HalfCycleAccessCmd+0x14>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	f022 0208 	bic.w	r2, r2, #8
 800428c:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4310      	orrs	r0, r2
 8004292:	6018      	str	r0, [r3, #0]
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40022000 	andmi	r2, r2, r0

0800429c <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 800429c:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <FLASH_PrefetchBufferCmd+0x14>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f022 0210 	bic.w	r2, r2, #16
 80042a4:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4310      	orrs	r0, r2
 80042aa:	6018      	str	r0, [r3, #0]
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40022000 	andmi	r2, r2, r0

080042b4 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <FLASH_Unlock+0x10>)
 80042b6:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <FLASH_Unlock+0x14>)
 80042b8:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80042ba:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40022000 	andmi	r2, r2, r0
 80042c8:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080042cc <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 80042cc:	4a02      	ldr	r2, [pc, #8]	; (80042d8 <FLASH_Lock+0xc>)
 80042ce:	6913      	ldr	r3, [r2, #16]
 80042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d4:	6113      	str	r3, [r2, #16]
 80042d6:	4770      	bx	lr
 80042d8:	40022000 	andmi	r2, r2, r0

080042dc <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 80042dc:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <FLASH_GetUserOptionByte+0x8>)
 80042de:	69d8      	ldr	r0, [r3, #28]
}
 80042e0:	0880      	lsrs	r0, r0, #2
 80042e2:	4770      	bx	lr
 80042e4:	40022000 	andmi	r2, r2, r0

080042e8 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <FLASH_GetWriteProtectionOptionByte+0x8>)
 80042ea:	6a18      	ldr	r0, [r3, #32]
}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40022000 	andmi	r2, r2, r0

080042f4 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 80042f4:	4b02      	ldr	r3, [pc, #8]	; (8004300 <FLASH_GetReadOutProtectionStatus+0xc>)
 80042f6:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 80042f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40022000 	andmi	r2, r2, r0

08004304 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <FLASH_GetPrefetchBufferStatus+0xc>)
 8004306:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8004308:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40022000 	andmi	r2, r2, r0

08004314 <FLASH_ITConfig>:
*                       - FLASH_IT_EOP: FLASH end of operation Interrupt
* Output         : None
* Return         : None 
*******************************************************************************/
void FLASH_ITConfig(u16 FLASH_IT, FunctionalState NewState)
{
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8004316:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8004318:	b109      	cbz	r1, 800431e <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800431a:	4310      	orrs	r0, r2
 800431c:	e001      	b.n	8004322 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 800431e:	ea22 0000 	bic.w	r0, r2, r0
 8004322:	6118      	str	r0, [r3, #16]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40022000 	andmi	r2, r2, r0

0800432c <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 800432c:	2801      	cmp	r0, #1
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <FLASH_GetFlagStatus+0x1c>)
 8004330:	d103      	bne.n	800433a <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 8004332:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8004334:	f000 0001 	and.w	r0, r0, #1
 8004338:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4218      	tst	r0, r3
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 800433e:	bf14      	ite	ne
 8004340:	2001      	movne	r0, #1
 8004342:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40022000 	andmi	r2, r2, r0

0800434c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <FLASH_ClearFlag+0x8>)
 800434e:	60d8      	str	r0, [r3, #12]
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40022000 	andmi	r2, r2, r0

08004358 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <FLASH_GetStatus+0x24>)
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	07d1      	lsls	r1, r2, #31
 800435e:	d409      	bmi.n	8004374 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	0752      	lsls	r2, r2, #29
 8004364:	d408      	bmi.n	8004378 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 800436c:	bf14      	ite	ne
 800436e:	2003      	movne	r0, #3
 8004370:	2004      	moveq	r0, #4
 8004372:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8004374:	2001      	movs	r0, #1
 8004376:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 8004378:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800437a:	4770      	bx	lr
 800437c:	40022000 	andmi	r2, r2, r0

08004380 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8004380:	b513      	push	{r0, r1, r4, lr}
 8004382:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 8004384:	f7ff ffe8 	bl	8004358 <FLASH_GetStatus>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8004388:	2801      	cmp	r0, #1
 800438a:	d10f      	bne.n	80043ac <FLASH_WaitForLastOperation+0x2c>
 800438c:	b164      	cbz	r4, 80043a8 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	9301      	str	r3, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8004392:	23ff      	movs	r3, #255	; 0xff
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	9b01      	ldr	r3, [sp, #4]
 8004398:	b113      	cbz	r3, 80043a0 <FLASH_WaitForLastOperation+0x20>
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	3b01      	subs	r3, #1
 800439e:	e7f9      	b.n	8004394 <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 80043a0:	f7ff ffda 	bl	8004358 <FLASH_GetStatus>
    Timeout--;
 80043a4:	3c01      	subs	r4, #1
 80043a6:	e7ef      	b.n	8004388 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80043a8:	2005      	movs	r0, #5
 80043aa:	e002      	b.n	80043b2 <FLASH_WaitForLastOperation+0x32>
 80043ac:	2c00      	cmp	r4, #0
 80043ae:	bf08      	it	eq
 80043b0:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 80043b2:	b002      	add	sp, #8
 80043b4:	bd10      	pop	{r4, pc}

080043b6 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 80043b6:	b538      	push	{r3, r4, r5, lr}
 80043b8:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80043ba:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043be:	f7ff ffdf 	bl	8004380 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80043c2:	2804      	cmp	r0, #4
 80043c4:	d114      	bne.n	80043f0 <FLASH_ErasePage+0x3a>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80043c6:	4c0b      	ldr	r4, [pc, #44]	; (80043f4 <FLASH_ErasePage+0x3e>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80043c8:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 80043d4:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043dc:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80043de:	f7ff ffcf 	bl	8004380 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80043e2:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 80043e4:	bf1f      	itttt	ne
 80043e6:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 80043ea:	6922      	ldrne	r2, [r4, #16]
 80043ec:	4013      	andne	r3, r2
 80043ee:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
 80043f2:	bf00      	nop
 80043f4:	40022000 	andmi	r2, r2, r0

080043f8 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 80043f8:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80043fa:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043fe:	f7ff ffbf 	bl	8004380 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004402:	2804      	cmp	r0, #4
 8004404:	d113      	bne.n	800442e <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8004406:	4c0a      	ldr	r4, [pc, #40]	; (8004430 <FLASH_EraseAllPages+0x38>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004408:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441a:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800441c:	f7ff ffb0 	bl	8004380 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004420:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8004422:	bf1f      	itttt	ne
 8004424:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8004428:	6922      	ldrne	r2, [r4, #16]
 800442a:	4013      	andne	r3, r2
 800442c:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 800442e:	bd10      	pop	{r4, pc}
 8004430:	40022000 	andmi	r2, r2, r0

08004434 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8004434:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004436:	f640 70ff 	movw	r0, #4095	; 0xfff
 800443a:	f7ff ffa1 	bl	8004380 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800443e:	2804      	cmp	r0, #4
 8004440:	d129      	bne.n	8004496 <FLASH_EraseOptionBytes+0x62>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004442:	4c15      	ldr	r4, [pc, #84]	; (8004498 <FLASH_EraseOptionBytes+0x64>)
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <FLASH_EraseOptionBytes+0x68>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004446:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800444a:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800444c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004450:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	f043 0320 	orr.w	r3, r3, #32
 8004458:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004462:	f7ff ff8d 	bl	8004380 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 8004466:	2804      	cmp	r0, #4
 8004468:	d10e      	bne.n	8004488 <FLASH_EraseOptionBytes+0x54>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 800446a:	f641 73df 	movw	r3, #8159	; 0x1fdf
 800446e:	6922      	ldr	r2, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004470:	200f      	movs	r0, #15
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8004472:	4013      	ands	r3, r2
 8004474:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8004476:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8004478:	22a5      	movs	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 800447a:	f043 0310 	orr.w	r3, r3, #16
 800447e:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <FLASH_EraseOptionBytes+0x6c>)
 8004482:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004484:	f7ff ff7c 	bl	8004380 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8004488:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 800448a:	bf1f      	itttt	ne
 800448c:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004490:	6922      	ldrne	r2, [r4, #16]
 8004492:	4013      	andne	r3, r2
 8004494:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8004496:	bd10      	pop	{r4, pc}
 8004498:	40022000 	andmi	r2, r2, r0
 800449c:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80044a0:	1ffff800 	svcne	0x00fff800

080044a4 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044a8:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 80044aa:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044ac:	f7ff ff68 	bl	8004380 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80044b0:	2804      	cmp	r0, #4
 80044b2:	d117      	bne.n	80044e4 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80044b4:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044b6:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 80044c0:	b2ab      	uxth	r3, r5
 80044c2:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044c4:	f7ff ff5c 	bl	8004380 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 80044c8:	2804      	cmp	r0, #4
 80044ca:	d104      	bne.n	80044d6 <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 80044cc:	0c2d      	lsrs	r5, r5, #16
 80044ce:	8075      	strh	r5, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044d0:	200f      	movs	r0, #15
 80044d2:	f7ff ff55 	bl	8004380 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 80044d6:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 80044d8:	bf1f      	itttt	ne
 80044da:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 80044de:	6922      	ldrne	r2, [r4, #16]
 80044e0:	4013      	andne	r3, r2
 80044e2:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
 80044e6:	bf00      	nop
 80044e8:	40022000 	andmi	r2, r2, r0

080044ec <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044f0:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 80044f2:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044f4:	f7ff ff44 	bl	8004380 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80044f8:	2804      	cmp	r0, #4
 80044fa:	d10f      	bne.n	800451c <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 80044fc:	4c08      	ldr	r4, [pc, #32]	; (8004520 <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80044fe:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004500:	6923      	ldr	r3, [r4, #16]
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8004508:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800450a:	f7ff ff39 	bl	8004380 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800450e:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8004510:	bf1f      	itttt	ne
 8004512:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8004516:	6922      	ldrne	r2, [r4, #16]
 8004518:	4013      	andne	r3, r2
 800451a:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 800451c:	bd70      	pop	{r4, r5, r6, pc}
 800451e:	bf00      	nop
 8004520:	40022000 	andmi	r2, r2, r0

08004524 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004528:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 800452a:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800452c:	f7ff ff28 	bl	8004380 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8004530:	2804      	cmp	r0, #4
 8004532:	d115      	bne.n	8004560 <FLASH_ProgramOptionByteData+0x3c>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004534:	4c0b      	ldr	r4, [pc, #44]	; (8004564 <FLASH_ProgramOptionByteData+0x40>)
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <FLASH_ProgramOptionByteData+0x44>)
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
 8004538:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800453a:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800453c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004540:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8004542:	6923      	ldr	r3, [r4, #16]
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004544:	200f      	movs	r0, #15
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8004546:	f043 0310 	orr.w	r3, r3, #16
 800454a:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 800454c:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800454e:	f7ff ff17 	bl	8004380 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004552:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8004554:	bf1f      	itttt	ne
 8004556:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 800455a:	6922      	ldrne	r2, [r4, #16]
 800455c:	4013      	andne	r3, r2
 800455e:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	bf00      	nop
 8004564:	40022000 	andmi	r2, r2, r0
 8004568:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

0800456c <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 800456c:	b510      	push	{r4, lr}
 800456e:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004570:	200f      	movs	r0, #15
 8004572:	f7ff ff05 	bl	8004380 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004576:	2804      	cmp	r0, #4
 8004578:	d141      	bne.n	80045fe <FLASH_EnableWriteProtection+0x92>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 800457a:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800457c:	4b20      	ldr	r3, [pc, #128]	; (8004600 <FLASH_EnableWriteProtection+0x94>)
 800457e:	4a21      	ldr	r2, [pc, #132]	; (8004604 <FLASH_EnableWriteProtection+0x98>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8004580:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004582:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8004584:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004588:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 800458a:	691a      	ldr	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 800458c:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800458e:	f042 0210 	orr.w	r2, r2, #16
 8004592:	611a      	str	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 8004594:	d104      	bne.n	80045a0 <FLASH_EnableWriteProtection+0x34>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 8004596:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d108      	bne.n	80045b0 <FLASH_EnableWriteProtection+0x44>
 800459e:	e00f      	b.n	80045c0 <FLASH_EnableWriteProtection+0x54>
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <FLASH_EnableWriteProtection+0x9c>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045a2:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 80045a4:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045a6:	f7ff feeb 	bl	8004380 <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 80045aa:	2804      	cmp	r0, #4
 80045ac:	d11f      	bne.n	80045ee <FLASH_EnableWriteProtection+0x82>
 80045ae:	e7f2      	b.n	8004596 <FLASH_EnableWriteProtection+0x2a>
    {
      OB->WRP1 = WRP1_Data;
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <FLASH_EnableWriteProtection+0x9c>)
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 80045b2:	b29b      	uxth	r3, r3
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 80045b4:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045b6:	200f      	movs	r0, #15
 80045b8:	f7ff fee2 	bl	8004380 <FLASH_WaitForLastOperation>
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80045bc:	2804      	cmp	r0, #4
 80045be:	d116      	bne.n	80045ee <FLASH_EnableWriteProtection+0x82>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 80045c0:	f3c4 4307 	ubfx	r3, r4, #16, #8
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 80045c4:	2bff      	cmp	r3, #255	; 0xff
 80045c6:	d007      	beq.n	80045d8 <FLASH_EnableWriteProtection+0x6c>
    {
      OB->WRP2 = WRP2_Data;
 80045c8:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <FLASH_EnableWriteProtection+0x9c>)
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 80045ca:	b29b      	uxth	r3, r3
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 80045cc:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045ce:	200f      	movs	r0, #15
 80045d0:	f7ff fed6 	bl	8004380 <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80045d4:	2804      	cmp	r0, #4
 80045d6:	d10a      	bne.n	80045ee <FLASH_EnableWriteProtection+0x82>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 80045d8:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80045da:	2cff      	cmp	r4, #255	; 0xff
 80045dc:	d101      	bne.n	80045e2 <FLASH_EnableWriteProtection+0x76>
 80045de:	2004      	movs	r0, #4
 80045e0:	e007      	b.n	80045f2 <FLASH_EnableWriteProtection+0x86>
    {
      OB->WRP3 = WRP3_Data;
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <FLASH_EnableWriteProtection+0x9c>)
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 80045e4:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 80045e6:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045e8:	200f      	movs	r0, #15
 80045ea:	f7ff fec9 	bl	8004380 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 80045ee:	2801      	cmp	r0, #1
 80045f0:	d005      	beq.n	80045fe <FLASH_EnableWriteProtection+0x92>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80045f2:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80045f6:	4a02      	ldr	r2, [pc, #8]	; (8004600 <FLASH_EnableWriteProtection+0x94>)
 80045f8:	6911      	ldr	r1, [r2, #16]
 80045fa:	400b      	ands	r3, r1
 80045fc:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 80045fe:	bd10      	pop	{r4, pc}
 8004600:	40022000 	andmi	r2, r2, r0
 8004604:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004608:	1ffff800 	svcne	0x00fff800

0800460c <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004610:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004614:	f7ff feb4 	bl	8004380 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8004618:	2804      	cmp	r0, #4
 800461a:	d136      	bne.n	800468a <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800461c:	4c1b      	ldr	r4, [pc, #108]	; (800468c <FLASH_ReadOutProtection+0x80>)
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <FLASH_ReadOutProtection+0x84>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004620:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004624:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8004626:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800462a:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463a:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800463c:	f7ff fea0 	bl	8004380 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 8004640:	2804      	cmp	r0, #4
 8004642:	d11b      	bne.n	800467c <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8004644:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8004648:	6922      	ldr	r2, [r4, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	6123      	str	r3, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	f043 0310 	orr.w	r3, r3, #16
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <FLASH_ReadOutProtection+0x88>)

      if(NewState != DISABLE)
 8004658:	b10d      	cbz	r5, 800465e <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 800465a:	2200      	movs	r2, #0
 800465c:	e000      	b.n	8004660 <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 800465e:	22a5      	movs	r2, #165	; 0xa5
 8004660:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 8004662:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004666:	f7ff fe8b 	bl	8004380 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 800466a:	2801      	cmp	r0, #1
 800466c:	d00d      	beq.n	800468a <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 800466e:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8004672:	4a06      	ldr	r2, [pc, #24]	; (800468c <FLASH_ReadOutProtection+0x80>)
 8004674:	6911      	ldr	r1, [r2, #16]
 8004676:	400b      	ands	r3, r1
 8004678:	6113      	str	r3, [r2, #16]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 800467c:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 800467e:	bf1f      	itttt	ne
 8004680:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8004684:	6922      	ldrne	r2, [r4, #16]
 8004686:	4013      	andne	r3, r2
 8004688:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	40022000 	andmi	r2, r2, r0
 8004690:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004694:	1ffff800 	svcne	0x00fff800

08004698 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800469a:	4d11      	ldr	r5, [pc, #68]	; (80046e0 <FLASH_UserOptionByteConfig+0x48>)
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <FLASH_UserOptionByteConfig+0x4c>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800469e:	4606      	mov	r6, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80046a0:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 80046a2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80046a6:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80046a8:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 80046aa:	460f      	mov	r7, r1
 80046ac:	4614      	mov	r4, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80046ae:	f7ff fe67 	bl	8004380 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80046b2:	2804      	cmp	r0, #4
 80046b4:	d113      	bne.n	80046de <FLASH_UserOptionByteConfig+0x46>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80046b6:	692b      	ldr	r3, [r5, #16]
 80046b8:	f044 00f8 	orr.w	r0, r4, #248	; 0xf8
 80046bc:	f043 0310 	orr.w	r3, r3, #16
 80046c0:	612b      	str	r3, [r5, #16]
 80046c2:	4338      	orrs	r0, r7
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <FLASH_UserOptionByteConfig+0x50>)
 80046c6:	4330      	orrs	r0, r6
 80046c8:	8058      	strh	r0, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80046ca:	200f      	movs	r0, #15
 80046cc:	f7ff fe58 	bl	8004380 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80046d0:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80046d2:	bf1f      	itttt	ne
 80046d4:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80046d8:	692a      	ldrne	r2, [r5, #16]
 80046da:	4013      	andne	r3, r2
 80046dc:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 80046de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e0:	40022000 	andmi	r2, r2, r0
 80046e4:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80046e8:	1ffff800 	svcne	0x00fff800

080046ec <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80046ec:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <GPIO_DeInit+0x9c>)
 80046f0:	4298      	cmp	r0, r3
 80046f2:	d02f      	beq.n	8004754 <GPIO_DeInit+0x68>
 80046f4:	d811      	bhi.n	800471a <GPIO_DeInit+0x2e>
 80046f6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80046fa:	4298      	cmp	r0, r3
 80046fc:	d01e      	beq.n	800473c <GPIO_DeInit+0x50>
 80046fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004702:	4298      	cmp	r0, r3
 8004704:	d020      	beq.n	8004748 <GPIO_DeInit+0x5c>
 8004706:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800470a:	4298      	cmp	r0, r3
 800470c:	d13a      	bne.n	8004784 <GPIO_DeInit+0x98>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800470e:	2004      	movs	r0, #4
 8004710:	2101      	movs	r1, #1
 8004712:	f000 fc35 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8004716:	2004      	movs	r0, #4
 8004718:	e02f      	b.n	800477a <GPIO_DeInit+0x8e>
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <GPIO_DeInit+0xa0>)
 800471c:	4298      	cmp	r0, r3
 800471e:	d01f      	beq.n	8004760 <GPIO_DeInit+0x74>
 8004720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004724:	4298      	cmp	r0, r3
 8004726:	d021      	beq.n	800476c <GPIO_DeInit+0x80>
 8004728:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800472c:	4298      	cmp	r0, r3
 800472e:	d129      	bne.n	8004784 <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8004730:	2040      	movs	r0, #64	; 0x40
 8004732:	2101      	movs	r1, #1
 8004734:	f000 fc24 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8004738:	2040      	movs	r0, #64	; 0x40
 800473a:	e01e      	b.n	800477a <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800473c:	2008      	movs	r0, #8
 800473e:	2101      	movs	r1, #1
 8004740:	f000 fc1e 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8004744:	2008      	movs	r0, #8
 8004746:	e018      	b.n	800477a <GPIO_DeInit+0x8e>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004748:	2010      	movs	r0, #16
 800474a:	2101      	movs	r1, #1
 800474c:	f000 fc18 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8004750:	2010      	movs	r0, #16
 8004752:	e012      	b.n	800477a <GPIO_DeInit+0x8e>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8004754:	2020      	movs	r0, #32
 8004756:	2101      	movs	r1, #1
 8004758:	f000 fc12 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800475c:	2020      	movs	r0, #32
 800475e:	e00c      	b.n	800477a <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8004760:	2080      	movs	r0, #128	; 0x80
 8004762:	2101      	movs	r1, #1
 8004764:	f000 fc0c 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8004768:	2080      	movs	r0, #128	; 0x80
 800476a:	e006      	b.n	800477a <GPIO_DeInit+0x8e>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800476c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004770:	2101      	movs	r1, #1
 8004772:	f000 fc05 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8004776:	f44f 7080 	mov.w	r0, #256	; 0x100
 800477a:	2100      	movs	r1, #0
      break;                       

    default:
      break;
  }
}
 800477c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8004780:	f000 bbfe 	b.w	8004f80 <RCC_APB2PeriphResetCmd>
 8004784:	bd08      	pop	{r3, pc}
 8004786:	bf00      	nop
 8004788:	40011400 	andmi	r1, r1, r0, lsl #8
 800478c:	40011c00 	andmi	r1, r1, r0, lsl #24

08004790 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8004790:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8004792:	2001      	movs	r0, #1
 8004794:	4601      	mov	r1, r0
 8004796:	f000 fbf3 	bl	8004f80 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 800479a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800479e:	2001      	movs	r0, #1
 80047a0:	2100      	movs	r1, #0
 80047a2:	f000 bbed 	b.w	8004f80 <RCC_APB2PeriphResetCmd>

080047a6 <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 80047a6:	78ca      	ldrb	r2, [r1, #3]
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80047a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 80047aa:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80047ac:	bf48      	it	mi
 80047ae:	788c      	ldrbmi	r4, [r1, #2]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80047b0:	880d      	ldrh	r5, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 80047b2:	f002 030f 	and.w	r3, r2, #15
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80047b6:	bf48      	it	mi
 80047b8:	4323      	orrmi	r3, r4
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80047ba:	f015 0fff 	tst.w	r5, #255	; 0xff
 80047be:	d01d      	beq.n	80047fc <GPIO_Init+0x56>
  {
    tmpreg = GPIOx->CRL;
 80047c0:	6801      	ldr	r1, [r0, #0]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80047c2:	2400      	movs	r4, #0
    {
      pos = ((u32)0x01) << pinpos;
 80047c4:	2601      	movs	r6, #1
 80047c6:	40a6      	lsls	r6, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80047c8:	ea06 0705 	and.w	r7, r6, r5

      if (currentpin == pos)
 80047cc:	42b7      	cmp	r7, r6
 80047ce:	d111      	bne.n	80047f4 <GPIO_Init+0x4e>
      {
        pos = pinpos << 2;
 80047d0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 80047d4:	260f      	movs	r6, #15
 80047d6:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 80047da:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80047de:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80047e0:	fa03 f60e 	lsl.w	r6, r3, lr
 80047e4:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80047e8:	d101      	bne.n	80047ee <GPIO_Init+0x48>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 80047ea:	6147      	str	r7, [r0, #20]
 80047ec:	e002      	b.n	80047f4 <GPIO_Init+0x4e>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80047ee:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 80047f0:	bf08      	it	eq
 80047f2:	6107      	streq	r7, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80047f4:	3401      	adds	r4, #1
 80047f6:	2c08      	cmp	r4, #8
 80047f8:	d1e4      	bne.n	80047c4 <GPIO_Init+0x1e>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80047fa:	6001      	str	r1, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80047fc:	2dff      	cmp	r5, #255	; 0xff
 80047fe:	d91f      	bls.n	8004840 <GPIO_Init+0x9a>
  {
    tmpreg = GPIOx->CRH;
 8004800:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004802:	2400      	movs	r4, #0
 8004804:	f104 0708 	add.w	r7, r4, #8
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8004808:	2601      	movs	r6, #1
 800480a:	40be      	lsls	r6, r7
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800480c:	ea06 0705 	and.w	r7, r6, r5
      if (currentpin == pos)
 8004810:	42b7      	cmp	r7, r6
 8004812:	d111      	bne.n	8004838 <GPIO_Init+0x92>
      {
        pos = pinpos << 2;
 8004814:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8004818:	260f      	movs	r6, #15
 800481a:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 800481e:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004822:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004824:	fa03 f60e 	lsl.w	r6, r3, lr
 8004828:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800482c:	d101      	bne.n	8004832 <GPIO_Init+0x8c>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 800482e:	6147      	str	r7, [r0, #20]
 8004830:	e002      	b.n	8004838 <GPIO_Init+0x92>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004832:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8004834:	bf08      	it	eq
 8004836:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004838:	3401      	adds	r4, #1
 800483a:	2c08      	cmp	r4, #8
 800483c:	d1e2      	bne.n	8004804 <GPIO_Init+0x5e>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800483e:	6041      	str	r1, [r0, #4]
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004842 <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8004842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004846:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8004848:	2302      	movs	r3, #2
 800484a:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800484c:	2304      	movs	r3, #4
 800484e:	70c3      	strb	r3, [r0, #3]
 8004850:	4770      	bx	lr

08004852 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8004852:	6883      	ldr	r3, [r0, #8]
 8004854:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8004856:	bf14      	ite	ne
 8004858:	2001      	movne	r0, #1
 800485a:	2000      	moveq	r0, #0
 800485c:	4770      	bx	lr

0800485e <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 800485e:	6880      	ldr	r0, [r0, #8]
}
 8004860:	b280      	uxth	r0, r0
 8004862:	4770      	bx	lr

08004864 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8004864:	68c3      	ldr	r3, [r0, #12]
 8004866:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8004868:	bf14      	ite	ne
 800486a:	2001      	movne	r0, #1
 800486c:	2000      	moveq	r0, #0
 800486e:	4770      	bx	lr

08004870 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8004870:	68c0      	ldr	r0, [r0, #12]
}
 8004872:	b280      	uxth	r0, r0
 8004874:	4770      	bx	lr

08004876 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8004876:	6101      	str	r1, [r0, #16]
 8004878:	4770      	bx	lr

0800487a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800487a:	6141      	str	r1, [r0, #20]
 800487c:	4770      	bx	lr

0800487e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800487e:	b10a      	cbz	r2, 8004884 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004880:	6101      	str	r1, [r0, #16]
 8004882:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8004884:	6141      	str	r1, [r0, #20]
 8004886:	4770      	bx	lr

08004888 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8004888:	60c1      	str	r1, [r0, #12]
 800488a:	4770      	bx	lr

0800488c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800488c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004890:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8004892:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004894:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004896:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004898:	6983      	ldr	r3, [r0, #24]
 800489a:	4770      	bx	lr

0800489c <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800489c:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <GPIO_EventOutputConfig+0x18>)
 800489e:	6813      	ldr	r3, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80048a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	4319      	orrs	r1, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80048aa:	ea41 1000 	orr.w	r0, r1, r0, lsl #4

  AFIO->EVCR = tmpreg;
 80048ae:	6010      	str	r0, [r2, #0]
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40010000 	andmi	r0, r1, r0

080048b8 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 80048b8:	4b01      	ldr	r3, [pc, #4]	; (80048c0 <GPIO_EventOutputCmd+0x8>)
 80048ba:	6018      	str	r0, [r3, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	4220001c 	eormi	r0, r0, #28

080048c4 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 80048c4:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80048c6:	4c13      	ldr	r4, [pc, #76]	; (8004914 <GPIO_PinRemapConfig+0x50>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80048c8:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 80048cc:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80048d0:	6863      	ldr	r3, [r4, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80048d2:	b282      	uxth	r2, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80048d4:	d106      	bne.n	80048e4 <GPIO_PinRemapConfig+0x20>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80048d6:	6865      	ldr	r5, [r4, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80048d8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80048dc:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80048e0:	6065      	str	r5, [r4, #4]
 80048e2:	e00e      	b.n	8004902 <GPIO_PinRemapConfig+0x3e>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80048e4:	02c4      	lsls	r4, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80048e6:	bf55      	itete	pl
 80048e8:	0d44      	lsrpl	r4, r0, #21
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 80048ea:	2403      	movmi	r4, #3
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80048ec:	0124      	lslpl	r4, r4, #4
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80048ee:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 80048f2:	bf4c      	ite	mi
 80048f4:	40ac      	lslmi	r4, r5
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80048f6:	fa02 f404 	lslpl.w	r4, r2, r4
 80048fa:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80048fe:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8004902:	b119      	cbz	r1, 800490c <GPIO_PinRemapConfig+0x48>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004904:	0d40      	lsrs	r0, r0, #21
 8004906:	0100      	lsls	r0, r0, #4
 8004908:	4082      	lsls	r2, r0
 800490a:	4313      	orrs	r3, r2
  }

  AFIO->MAPR = tmpreg;
 800490c:	4a01      	ldr	r2, [pc, #4]	; (8004914 <GPIO_PinRemapConfig+0x50>)
 800490e:	6053      	str	r3, [r2, #4]
 8004910:	bd30      	pop	{r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	40010000 	andmi	r0, r1, r0

08004918 <GPIO_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004918:	f001 0303 	and.w	r3, r1, #3
 800491c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8004920:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004924:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8004928:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 800492a:	009b      	lsls	r3, r3, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800492c:	688c      	ldr	r4, [r1, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 800492e:	220f      	movs	r2, #15
 8004930:	409a      	lsls	r2, r3

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004932:	ea24 0202 	bic.w	r2, r4, r2
 8004936:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8004938:	688a      	ldr	r2, [r1, #8]
 800493a:	4098      	lsls	r0, r3
 800493c:	4302      	orrs	r2, r0
 800493e:	608a      	str	r2, [r1, #8]
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop

08004944 <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <NVIC_DeInit+0x30>)
  NVIC->ICER[1] = 0x0FFFFFFF;
 8004946:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 800494a:	f04f 31ff 	mov.w	r1, #4294967295
 800494e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICER[1] = 0x0FFFFFFF;
 8004952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8004956:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ICPR[1] = 0x0FFFFFFF;
 800495a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  
  for(index = 0; index < 0x0F; index++)
 800495e:	2200      	movs	r2, #0
  {
     NVIC->IPR[index] = 0x00000000;
 8004960:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004964:	3201      	adds	r2, #1
  {
     NVIC->IPR[index] = 0x00000000;
 8004966:	2000      	movs	r0, #0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004968:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 800496a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 800496e:	d1f7      	bne.n	8004960 <NVIC_DeInit+0x1c>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	and	lr, r0, r0, lsl #2

08004978 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <NVIC_SCBDeInit+0x28>)
 800497a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 800497e:	4909      	ldr	r1, [pc, #36]	; (80049a4 <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004980:	605a      	str	r2, [r3, #4]
  SCB->VTOR = 0x00000000;
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8004986:	60d9      	str	r1, [r3, #12]
  SCB->SCR = 0x00000000;
 8004988:	611a      	str	r2, [r3, #16]
  SCB->CCR = 0x00000000;
 800498a:	615a      	str	r2, [r3, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 800498c:	619a      	str	r2, [r3, #24]
 800498e:	61da      	str	r2, [r3, #28]
 8004990:	621a      	str	r2, [r3, #32]
  }
  SCB->SHCSR = 0x00000000;
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
  SCB->CFSR = 0xFFFFFFFF;
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
  SCB->HFSR = 0xFFFFFFFF;
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c
  SCB->DFSR = 0xFFFFFFFF;
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
 800499e:	4770      	bx	lr
 80049a0:	e000ed00 	and	lr, r0, r0, lsl #26
 80049a4:	05fa0000 	ldrbeq	r0, [sl, #0]!

080049a8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80049a8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <NVIC_PriorityGroupConfig+0x10>)
 80049ae:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80049b2:	60d8      	str	r0, [r3, #12]
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	e000ed00 	and	lr, r0, r0, lsl #26

080049bc <NVIC_Init>:
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80049bc:	78c2      	ldrb	r2, [r0, #3]
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80049be:	b530      	push	{r4, r5, lr}
 80049c0:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80049c2:	b372      	cbz	r2, 8004a22 <NVIC_Init+0x66>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80049c4:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <NVIC_Init+0x7c>)
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80049c6:	f003 0503 	and.w	r5, r3, #3
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80049ca:	68d4      	ldr	r4, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80049cc:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80049ce:	43e4      	mvns	r4, r4
 80049d0:	f3c4 2402 	ubfx	r4, r4, #8, #3
    tmppre = (0x4 - tmppriority);
 80049d4:	f1c4 0104 	rsb	r1, r4, #4
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80049d8:	fa02 f101 	lsl.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80049dc:	220f      	movs	r2, #15
 80049de:	40e2      	lsrs	r2, r4
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80049e0:	7884      	ldrb	r4, [r0, #2]
 80049e2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80049e6:	4022      	ands	r2, r4
 80049e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80049ec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80049f0:	430a      	orrs	r2, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80049f2:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80049f6:	00ed      	lsls	r5, r5, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80049f8:	0112      	lsls	r2, r2, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80049fa:	21ff      	movs	r1, #255	; 0xff
 80049fc:	40a9      	lsls	r1, r5
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80049fe:	40aa      	lsls	r2, r5
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8004a00:	ea24 0401 	bic.w	r4, r4, r1
    tmppriority &= tmpmask;  
 8004a04:	400a      	ands	r2, r1
    tmpreg |= tmppriority;
 8004a06:	4322      	orrs	r2, r4

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8004a08:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004a0c:	7803      	ldrb	r3, [r0, #0]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004a0e:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004a10:	0959      	lsrs	r1, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <NVIC_Init+0x80>)
 8004a1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004a20:	bd30      	pop	{r4, r5, pc}
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004a22:	095a      	lsrs	r2, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004a24:	2101      	movs	r1, #1
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	4099      	lsls	r1, r3
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004a2c:	f102 0320 	add.w	r3, r2, #32
 8004a30:	4a02      	ldr	r2, [pc, #8]	; (8004a3c <NVIC_Init+0x80>)
 8004a32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004a36:	bd30      	pop	{r4, r5, pc}
 8004a38:	e000ed00 	and	lr, r0, r0, lsl #26
 8004a3c:	e000e100 	and	lr, r0, r0, lsl #2

08004a40 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8004a40:	2300      	movs	r3, #0
 8004a42:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8004a44:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8004a46:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8004a48:	70c3      	strb	r3, [r0, #3]
 8004a4a:	4770      	bx	lr

08004a4c <NVIC_SETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
  __SETPRIMASK();
 8004a4c:	f001 ba35 	b.w	8005eba <__SETPRIMASK>

08004a50 <NVIC_RESETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
  __RESETPRIMASK();
 8004a50:	f001 ba35 	b.w	8005ebe <__RESETPRIMASK>

08004a54 <NVIC_SETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
  __SETFAULTMASK();
 8004a54:	f001 ba35 	b.w	8005ec2 <__SETFAULTMASK>

08004a58 <NVIC_RESETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
  __RESETFAULTMASK();
 8004a58:	f001 ba35 	b.w	8005ec6 <__RESETFAULTMASK>

08004a5c <NVIC_BASEPRICONFIG>:
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8004a5c:	0100      	lsls	r0, r0, #4
 8004a5e:	f001 ba34 	b.w	8005eca <__BASEPRICONFIG>

08004a62 <NVIC_GetBASEPRI>:
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
  return (__GetBASEPRI());
 8004a62:	f001 ba35 	b.w	8005ed0 <__GetBASEPRI>

08004a66 <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8004a66:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <NVIC_GetCurrentPendingIRQChannel+0xa>)
 8004a68:	6858      	ldr	r0, [r3, #4]
}
 8004a6a:	f3c0 3009 	ubfx	r0, r0, #12, #10
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	and	lr, r0, r0, lsl #26

08004a74 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004a74:	f000 031f 	and.w	r3, r0, #31
 8004a78:	2201      	movs	r2, #1
 8004a7a:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8004a7c:	4904      	ldr	r1, [pc, #16]	; (8004a90 <NVIC_GetIRQChannelPendingBitStatus+0x1c>)
 8004a7e:	0943      	lsrs	r3, r0, #5
 8004a80:	3340      	adds	r3, #64	; 0x40
 8004a82:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004a86:	4010      	ands	r0, r2
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8004a88:	1a83      	subs	r3, r0, r2
 8004a8a:	4258      	negs	r0, r3
 8004a8c:	4158      	adcs	r0, r3
 8004a8e:	4770      	bx	lr
 8004a90:	e000e100 	and	lr, r0, r0, lsl #2

08004a94 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8004a94:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <NVIC_SetIRQChannelPendingBit+0x8>)
 8004a96:	6018      	str	r0, [r3, #0]
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000ef00 	and	lr, r0, r0, lsl #30

08004aa0 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8004aa0:	0943      	lsrs	r3, r0, #5
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f000 001f 	and.w	r0, r0, #31
 8004aa8:	4902      	ldr	r1, [pc, #8]	; (8004ab4 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8004aaa:	4082      	lsls	r2, r0
 8004aac:	3360      	adds	r3, #96	; 0x60
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	and	lr, r0, r0, lsl #2

08004ab8 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8004ab8:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <NVIC_GetCurrentActiveHandler+0xc>)
 8004aba:	6858      	ldr	r0, [r3, #4]
}
 8004abc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	e000ed00 	and	lr, r0, r0, lsl #26

08004ac8 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004ac8:	f000 031f 	and.w	r3, r0, #31
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8004ad0:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <NVIC_GetIRQChannelActiveBitStatus+0x1c>)
 8004ad2:	0943      	lsrs	r3, r0, #5
 8004ad4:	3380      	adds	r3, #128	; 0x80
 8004ad6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004ada:	4010      	ands	r0, r2
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8004adc:	1a83      	subs	r3, r0, r2
 8004ade:	4258      	negs	r0, r3
 8004ae0:	4158      	adcs	r0, r3
 8004ae2:	4770      	bx	lr
 8004ae4:	e000e100 	and	lr, r0, r0, lsl #2

08004ae8 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <NVIC_GetCPUID+0x8>)
 8004aea:	6818      	ldr	r0, [r3, #0]
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000ed00 	and	lr, r0, r0, lsl #26

08004af4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8004af4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004af8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004afc:	4b01      	ldr	r3, [pc, #4]	; (8004b04 <NVIC_SetVectorTable+0x10>)
 8004afe:	4308      	orrs	r0, r1
 8004b00:	6098      	str	r0, [r3, #8]
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	and	lr, r0, r0, lsl #26

08004b08 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8004b08:	4a01      	ldr	r2, [pc, #4]	; (8004b10 <NVIC_GenerateSystemReset+0x8>)
 8004b0a:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <NVIC_GenerateSystemReset+0xc>)
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	4770      	bx	lr
 8004b10:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8004b14:	e000ed00 	and	lr, r0, r0, lsl #26

08004b18 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8004b18:	4a01      	ldr	r2, [pc, #4]	; (8004b20 <NVIC_GenerateCoreReset+0x8>)
 8004b1a:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <NVIC_GenerateCoreReset+0xc>)
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	4770      	bx	lr
 8004b20:	05fa0001 	ldrbeq	r0, [sl, #1]!
 8004b24:	e000ed00 	and	lr, r0, r0, lsl #26

08004b28 <NVIC_SystemLPConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
{
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8004b2a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004b2c:	b109      	cbz	r1, 8004b32 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8004b2e:	4310      	orrs	r0, r2
 8004b30:	e001      	b.n	8004b36 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 8004b32:	ea22 0000 	bic.w	r0, r2, r0
 8004b36:	6118      	str	r0, [r3, #16]
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000ed00 	and	lr, r0, r0, lsl #26

08004b40 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 8004b40:	f000 001f 	and.w	r0, r0, #31
 8004b44:	2201      	movs	r2, #1
 8004b46:	4082      	lsls	r2, r0
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <NVIC_SystemHandlerConfig+0x1c>)

  if (NewState != DISABLE)
 8004b4a:	b111      	cbz	r1, 8004b52 <NVIC_SystemHandlerConfig+0x12>
  {
    SCB->SHCSR |= tmpreg;
 8004b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	e002      	b.n	8004b58 <NVIC_SystemHandlerConfig+0x18>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8004b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b54:	ea21 0202 	bic.w	r2, r1, r2
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	and	lr, r0, r0, lsl #26

08004b60 <NVIC_SystemHandlerPriorityConfig>:
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <NVIC_SystemHandlerPriorityConfig+0x48>)
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 8004b62:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	f3c3 2302 	ubfx	r3, r3, #8, #3
  tmp1 = (0x4 - tmppriority);
 8004b6c:	f1c3 0404 	rsb	r4, r3, #4
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 8004b70:	40a1      	lsls	r1, r4
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
 8004b72:	24ff      	movs	r4, #255	; 0xff
 8004b74:	fa24 f303 	lsr.w	r3, r4, r3
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8004b78:	401a      	ands	r2, r3

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
 8004b7a:	f3c0 2301 	ubfx	r3, r0, #8, #2
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 8004b7e:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004b82:	0080      	lsls	r0, r0, #2
 8004b84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004b88:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8004b8c:	4311      	orrs	r1, r2

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8004b8e:	00db      	lsls	r3, r3, #3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004b90:	6982      	ldr	r2, [r0, #24]
  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
 8004b92:	409c      	lsls	r4, r3
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004b94:	ea22 0404 	bic.w	r4, r2, r4
 8004b98:	6184      	str	r4, [r0, #24]
  SCB->SHPR[tmp1] |= tmppriority;
 8004b9a:	6982      	ldr	r2, [r0, #24]
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8004b9c:	0109      	lsls	r1, r1, #4
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8004b9e:	4099      	lsls	r1, r3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	6181      	str	r1, [r0, #24]
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000ed00 	and	lr, r0, r0, lsl #26

08004bac <NVIC_GetSystemHandlerPendingBitStatus>:
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004bac:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <NVIC_GetSystemHandlerPendingBitStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;
 8004bae:	f3c0 2083 	ubfx	r0, r0, #10, #4

  tmppos = (u32)0x01 << tmppos;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004bb6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004bb8:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004bba:	1ac3      	subs	r3, r0, r3
 8004bbc:	4258      	negs	r0, r3
 8004bbe:	4158      	adcs	r0, r3
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000ed00 	and	lr, r0, r0, lsl #26

08004bc8 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004bc8:	4904      	ldr	r1, [pc, #16]	; (8004bdc <NVIC_SetSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004bca:	f000 001f 	and.w	r0, r0, #31
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004bce:	684b      	ldr	r3, [r1, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	4082      	lsls	r2, r0
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000ed00 	and	lr, r0, r0, lsl #26

08004be0 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004be0:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <NVIC_ClearSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004be2:	f000 001f 	and.w	r0, r0, #31
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004be6:	684b      	ldr	r3, [r1, #4]
 8004be8:	3801      	subs	r0, #1
 8004bea:	2201      	movs	r2, #1
 8004bec:	4082      	lsls	r2, r0
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	and	lr, r0, r0, lsl #26

08004bf8 <NVIC_GetSystemHandlerActiveBitStatus>:
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004bf8:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <NVIC_GetSystemHandlerActiveBitStatus+0x18>)
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
 8004bfa:	f3c0 3083 	ubfx	r0, r0, #14, #4

  tmppos = (u32)0x01 << tmppos;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004c02:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004c04:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004c06:	1ac3      	subs	r3, r0, r3
 8004c08:	4258      	negs	r0, r3
 8004c0a:	4158      	adcs	r0, r3
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	e000ed00 	and	lr, r0, r0, lsl #26

08004c14 <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8004c14:	f3c0 4381 	ubfx	r3, r0, #18, #2
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <NVIC_GetFaultHandlerSources+0x2c>)
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8004c1a:	b90b      	cbnz	r3, 8004c20 <NVIC_GetFaultHandlerSources+0xc>
  {
    faultsources = SCB->HFSR;
 8004c1c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004c1e:	4770      	bx	lr
  }
  else if (tmpreg == 0x01)
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10a      	bne.n	8004c3a <NVIC_GetFaultHandlerSources+0x26>

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004c24:	f3c0 5301 	ubfx	r3, r0, #20, #2
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004c28:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004c2a:	00da      	lsls	r2, r3, #3
 8004c2c:	40d0      	lsrs	r0, r2
    if (tmppos != 0x02)
 8004c2e:	2b02      	cmp	r3, #2
    {
      faultsources &= (u32)0x0F;
 8004c30:	bf14      	ite	ne
 8004c32:	f000 000f 	andne.w	r0, r0, #15
    }
    else
    {
      faultsources &= (u32)0xFF;
 8004c36:	b2c0      	uxtbeq	r0, r0
 8004c38:	4770      	bx	lr
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8004c3a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  }
  return faultsources;
}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	and	lr, r0, r0, lsl #26

08004c44 <NVIC_GetFaultAddress>:
*                       - SystemHandler_BusFault
* Output         : None
* Return         : Fault address.
*******************************************************************************/
u32 NVIC_GetFaultAddress(u32 SystemHandler)
{
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <NVIC_GetFaultAddress+0x10>)
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8004c46:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8004c4a:	bf0c      	ite	eq
 8004c4c:	6b58      	ldreq	r0, [r3, #52]	; 0x34
  }
  else
  {
    faultaddress = SCB->BFAR;
 8004c4e:	6b98      	ldrne	r0, [r3, #56]	; 0x38
  }
  return faultaddress;
}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000ed00 	and	lr, r0, r0, lsl #26

08004c58 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8004c58:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8004c5a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004c5e:	2101      	movs	r1, #1
 8004c60:	f000 f99a 	bl	8004f98 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 8004c64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004c68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f000 b993 	b.w	8004f98 <RCC_APB1PeriphResetCmd>

08004c72 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8004c72:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <PWR_BackupAccessCmd+0x6>)
 8004c74:	6018      	str	r0, [r3, #0]
 8004c76:	4770      	bx	lr
 8004c78:	420e0020 	andmi	r0, lr, #32

08004c7c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8004c7c:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <PWR_PVDCmd+0x8>)
 8004c7e:	6018      	str	r0, [r3, #0]
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	420e0010 	andmi	r0, lr, #16

08004c88 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <PWR_PVDLevelConfig+0x10>)
 8004c8a:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8004c8c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8004c90:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004c92:	6010      	str	r0, [r2, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40007000 	andmi	r7, r0, r0

08004c9c <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8004c9c:	4b01      	ldr	r3, [pc, #4]	; (8004ca4 <PWR_WakeUpPinCmd+0x8>)
 8004c9e:	6018      	str	r0, [r3, #0]
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	420e00a0 	andmi	r0, lr, #160	; 0xa0

08004ca8 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004ca8:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <PWR_EnterSTOPMode+0x24>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004caa:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004cac:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8004cae:	f023 0303 	bic.w	r3, r3, #3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8004cb2:	ea40 0003 	orr.w	r0, r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004cb6:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004cb8:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <PWR_EnterSTOPMode+0x28>)
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004cc2:	d101      	bne.n	8004cc8 <PWR_EnterSTOPMode+0x20>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004cc4:	f001 b8d4 	b.w	8005e70 <__WFI>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8004cc8:	f001 b8d4 	b.w	8005e74 <__WFE>
 8004ccc:	40007000 	andmi	r7, r0, r0
 8004cd0:	e000ed10 	and	lr, r0, r0, lsl sp

08004cd4 <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004cd4:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <PWR_EnterSTANDBYMode+0x20>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	f042 0204 	orr.w	r2, r2, #4
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	f042 0202 	orr.w	r2, r2, #2
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004ce6:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <PWR_EnterSTANDBYMode+0x24>)
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	f043 0304 	orr.w	r3, r3, #4
 8004cee:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8004cf0:	f001 b8be 	b.w	8005e70 <__WFI>
 8004cf4:	40007000 	andmi	r7, r0, r0
 8004cf8:	e000ed10 	and	lr, r0, r0, lsl sp

08004cfc <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <PWR_GetFlagStatus+0x10>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004d02:	bf14      	ite	ne
 8004d04:	2001      	movne	r0, #1
 8004d06:	2000      	moveq	r0, #0
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40007000 	andmi	r7, r0, r0

08004d10 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8004d10:	4a02      	ldr	r2, [pc, #8]	; (8004d1c <PWR_ClearFlag+0xc>)
 8004d12:	6813      	ldr	r3, [r2, #0]
 8004d14:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8004d18:	6010      	str	r0, [r2, #0]
 8004d1a:	4770      	bx	lr
 8004d1c:	40007000 	andmi	r7, r0, r0

08004d20 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <RCC_DeInit+0x34>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8004d2a:	6859      	ldr	r1, [r3, #4]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <RCC_DeInit+0x38>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004d38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d44:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	4770      	bx	lr
 8004d54:	40021000 	andmi	r1, r2, r0
 8004d58:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08004d5c <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <RCC_HSEConfig+0x34>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004d5e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d68:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d70:	601a      	str	r2, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004d72:	d003      	beq.n	8004d7c <RCC_HSEConfig+0x20>
 8004d74:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004d78:	d004      	beq.n	8004d84 <RCC_HSEConfig+0x28>
 8004d7a:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d82:	e002      	b.n	8004d8a <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40021000 	andmi	r1, r2, r0

08004d94 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004d94:	4a03      	ldr	r2, [pc, #12]	; (8004da4 <RCC_AdjustHSICalibrationValue+0x10>)
 8004d96:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004d98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004d9c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004da0:	6010      	str	r0, [r2, #0]
 8004da2:	4770      	bx	lr
 8004da4:	40021000 	andmi	r1, r2, r0

08004da8 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004da8:	4b01      	ldr	r3, [pc, #4]	; (8004db0 <RCC_HSICmd+0x8>)
 8004daa:	6018      	str	r0, [r3, #0]
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	42420000 	submi	r0, r2, #0

08004db4 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004db4:	4a03      	ldr	r2, [pc, #12]	; (8004dc4 <RCC_PLLConfig+0x10>)
 8004db6:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004db8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004dbc:	4319      	orrs	r1, r3

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004dbe:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004dc0:	6050      	str	r0, [r2, #4]
 8004dc2:	4770      	bx	lr
 8004dc4:	40021000 	andmi	r1, r2, r0

08004dc8 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004dc8:	4b01      	ldr	r3, [pc, #4]	; (8004dd0 <RCC_PLLCmd+0x8>)
 8004dca:	6018      	str	r0, [r3, #0]
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	42420060 	submi	r0, r2, #96	; 0x60

08004dd4 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004dd4:	4a03      	ldr	r2, [pc, #12]	; (8004de4 <RCC_SYSCLKConfig+0x10>)
 8004dd6:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004dd8:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004ddc:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004dde:	6050      	str	r0, [r2, #4]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	andmi	r1, r2, r0

08004de8 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004de8:	4b02      	ldr	r3, [pc, #8]	; (8004df4 <RCC_GetSYSCLKSource+0xc>)
 8004dea:	6858      	ldr	r0, [r3, #4]
}
 8004dec:	f000 000c 	and.w	r0, r0, #12
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40021000 	andmi	r1, r2, r0

08004df8 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004df8:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <RCC_HCLKConfig+0x10>)
 8004dfa:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004e00:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e02:	6050      	str	r0, [r2, #4]
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40021000 	andmi	r1, r2, r0

08004e0c <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004e0c:	4a03      	ldr	r2, [pc, #12]	; (8004e1c <RCC_PCLK1Config+0x10>)
 8004e0e:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004e10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004e14:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e16:	6050      	str	r0, [r2, #4]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	andmi	r1, r2, r0

08004e20 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004e20:	4a03      	ldr	r2, [pc, #12]	; (8004e30 <RCC_PCLK2Config+0x10>)
 8004e22:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004e24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004e28:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e2c:	6050      	str	r0, [r2, #4]
 8004e2e:	4770      	bx	lr
 8004e30:	40021000 	andmi	r1, r2, r0

08004e34 <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004e36:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e38:	b109      	cbz	r1, 8004e3e <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004e3a:	4310      	orrs	r0, r2
 8004e3c:	e001      	b.n	8004e42 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8004e3e:	ea22 0000 	bic.w	r0, r2, r0
 8004e42:	7018      	strb	r0, [r3, #0]
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40021009 	andmi	r1, r2, r9

08004e4c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <RCC_USBCLKConfig+0x8>)
 8004e4e:	6018      	str	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	424200d8 	submi	r0, r2, #216	; 0xd8

08004e58 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8004e58:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <RCC_ADCCLKConfig+0x10>)
 8004e5a:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004e60:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e62:	6050      	str	r0, [r2, #4]
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40021000 	andmi	r1, r2, r0

08004e6c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <RCC_LSEConfig+0x1c>)
 8004e6e:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004e70:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004e72:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004e74:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004e76:	d002      	beq.n	8004e7e <RCC_LSEConfig+0x12>
 8004e78:	2804      	cmp	r0, #4
 8004e7a:	d002      	beq.n	8004e82 <RCC_LSEConfig+0x16>
 8004e7c:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8004e7e:	7018      	strb	r0, [r3, #0]
      break;
 8004e80:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004e82:	2205      	movs	r2, #5
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	4770      	bx	lr
 8004e88:	40021020 	andmi	r1, r2, r0, lsr #32

08004e8c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8004e8c:	4b01      	ldr	r3, [pc, #4]	; (8004e94 <RCC_LSICmd+0x8>)
 8004e8e:	6018      	str	r0, [r3, #0]
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08004e98 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004e98:	4a02      	ldr	r2, [pc, #8]	; (8004ea4 <RCC_RTCCLKConfig+0xc>)
 8004e9a:	6a13      	ldr	r3, [r2, #32]
 8004e9c:	4318      	orrs	r0, r3
 8004e9e:	6210      	str	r0, [r2, #32]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	andmi	r1, r2, r0

08004ea8 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004ea8:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <RCC_RTCCLKCmd+0x8>)
 8004eaa:	6018      	str	r0, [r3, #0]
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

08004eb4 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <RCC_GetClocksFreq+0x74>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004eb6:	b510      	push	{r4, lr}
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004eb8:	6853      	ldr	r3, [r2, #4]
 8004eba:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d001      	beq.n	8004ec6 <RCC_GetClocksFreq+0x12>
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d001      	beq.n	8004eca <RCC_GetClocksFreq+0x16>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <RCC_GetClocksFreq+0x78>)
 8004ec8:	e00e      	b.n	8004ee8 <RCC_GetClocksFreq+0x34>
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004eca:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004ecc:	6851      	ldr	r1, [r2, #4]
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004ece:	f3c3 4383 	ubfx	r3, r3, #18, #4

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004ed2:	03cc      	lsls	r4, r1, #15
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004ed4:	f103 0302 	add.w	r3, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004ed8:	d502      	bpl.n	8004ee0 <RCC_GetClocksFreq+0x2c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8004eda:	6851      	ldr	r1, [r2, #4]
 8004edc:	0389      	lsls	r1, r1, #14
 8004ede:	d501      	bpl.n	8004ee4 <RCC_GetClocksFreq+0x30>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8004ee0:	4913      	ldr	r1, [pc, #76]	; (8004f30 <RCC_GetClocksFreq+0x7c>)
 8004ee2:	e000      	b.n	8004ee6 <RCC_GetClocksFreq+0x32>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004ee4:	4911      	ldr	r1, [pc, #68]	; (8004f2c <RCC_GetClocksFreq+0x78>)
 8004ee6:	434b      	muls	r3, r1
 8004ee8:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004eea:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8004eec:	4911      	ldr	r1, [pc, #68]	; (8004f34 <RCC_GetClocksFreq+0x80>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8004eee:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004ef2:	5ccc      	ldrb	r4, [r1, r3]
 8004ef4:	6803      	ldr	r3, [r0, #0]
 8004ef6:	40e3      	lsrs	r3, r4
 8004ef8:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004efa:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8004efc:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004f00:	5d0c      	ldrb	r4, [r1, r4]
 8004f02:	fa23 f404 	lsr.w	r4, r3, r4
 8004f06:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004f08:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8004f0a:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004f0e:	5d0c      	ldrb	r4, [r1, r4]
 8004f10:	40e3      	lsrs	r3, r4
 8004f12:	60c3      	str	r3, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004f14:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8004f16:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8004f1a:	440a      	add	r2, r1
 8004f1c:	7c12      	ldrb	r2, [r2, #16]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f22:	6103      	str	r3, [r0, #16]
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	andmi	r1, r2, r0
 8004f2c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8004f30:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8004f34:	0800609c 	stmdaeq	r0, {r2, r3, r4, r7, sp, lr}

08004f38 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004f3a:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f3c:	b109      	cbz	r1, 8004f42 <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004f3e:	4310      	orrs	r0, r2
 8004f40:	e001      	b.n	8004f46 <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004f42:	ea22 0000 	bic.w	r0, r2, r0
 8004f46:	6158      	str	r0, [r3, #20]
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	andmi	r1, r2, r0

08004f50 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004f52:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f54:	b109      	cbz	r1, 8004f5a <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004f56:	4310      	orrs	r0, r2
 8004f58:	e001      	b.n	8004f5e <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004f5a:	ea22 0000 	bic.w	r0, r2, r0
 8004f5e:	6198      	str	r0, [r3, #24]
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40021000 	andmi	r1, r2, r0

08004f68 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004f6a:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f6c:	b109      	cbz	r1, 8004f72 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004f6e:	4310      	orrs	r0, r2
 8004f70:	e001      	b.n	8004f76 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004f72:	ea22 0000 	bic.w	r0, r2, r0
 8004f76:	61d8      	str	r0, [r3, #28]
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	andmi	r1, r2, r0

08004f80 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004f82:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f84:	b109      	cbz	r1, 8004f8a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004f86:	4310      	orrs	r0, r2
 8004f88:	e001      	b.n	8004f8e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004f8a:	ea22 0000 	bic.w	r0, r2, r0
 8004f8e:	60d8      	str	r0, [r3, #12]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40021000 	andmi	r1, r2, r0

08004f98 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004f9a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f9c:	b109      	cbz	r1, 8004fa2 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004f9e:	4310      	orrs	r0, r2
 8004fa0:	e001      	b.n	8004fa6 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004fa2:	ea22 0000 	bic.w	r0, r2, r0
 8004fa6:	6118      	str	r0, [r3, #16]
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40021000 	andmi	r1, r2, r0

08004fb0 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <RCC_BackupResetCmd+0x8>)
 8004fb2:	6018      	str	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

08004fbc <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8004fbc:	4b01      	ldr	r3, [pc, #4]	; (8004fc4 <RCC_ClockSecuritySystemCmd+0x8>)
 8004fbe:	6018      	str	r0, [r3, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	4242004c 	submi	r0, r2, #76	; 0x4c

08004fc8 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8004fc8:	4b01      	ldr	r3, [pc, #4]	; (8004fd0 <RCC_MCOConfig+0x8>)
 8004fca:	7018      	strb	r0, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021007 	andmi	r1, r2, r7

08004fd4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004fd4:	0942      	lsrs	r2, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8004fd6:	2a01      	cmp	r2, #1
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <RCC_GetFlagStatus+0x24>)
 8004fda:	d101      	bne.n	8004fe0 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	e003      	b.n	8004fe8 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004fe0:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8004fe2:	bf0c      	ite	eq
 8004fe4:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004fe6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8004fe8:	f000 001f 	and.w	r0, r0, #31
 8004fec:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004ff0:	f000 0001 	and.w	r0, r0, #1
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	andmi	r1, r2, r0

08004ffc <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004ffc:	b507      	push	{r0, r1, r2, lr}
  vu32 StartUpCounter = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8005002:	2031      	movs	r0, #49	; 0x31
 8005004:	f7ff ffe6 	bl	8004fd4 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	3301      	adds	r3, #1
 800500c:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 800500e:	b918      	cbnz	r0, 8005018 <RCC_WaitForHSEStartUp+0x1c>
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005016:	d1f4      	bne.n	8005002 <RCC_WaitForHSEStartUp+0x6>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8005018:	2031      	movs	r0, #49	; 0x31
 800501a:	f7ff ffdb 	bl	8004fd4 <RCC_GetFlagStatus>
  {
    status = ERROR;
  }  

  return (status);
}
 800501e:	3000      	adds	r0, #0
 8005020:	bf18      	it	ne
 8005022:	2001      	movne	r0, #1
 8005024:	b003      	add	sp, #12
 8005026:	f85d fb04 	ldr.w	pc, [sp], #4

0800502a <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 800502a:	4a03      	ldr	r2, [pc, #12]	; (8005038 <RCC_ClearFlag+0xe>)
 800502c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800502e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005032:	6253      	str	r3, [r2, #36]	; 0x24
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40021000 	andmi	r1, r2, r0

0800503c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <RCC_GetITStatus+0x10>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8005042:	bf14      	ite	ne
 8005044:	2001      	movne	r0, #1
 8005046:	2000      	moveq	r0, #0
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40021000 	andmi	r1, r2, r0

08005050 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8005050:	4b01      	ldr	r3, [pc, #4]	; (8005058 <RCC_ClearITPendingBit+0x8>)
 8005052:	7018      	strb	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	4002100a 	andmi	r1, r2, sl

0800505c <SysTick_CLKSourceConfig>:
*                         SysTick clock source.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800505e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	bf0c      	ite	eq
 8005064:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005068:	f022 0204 	bicne.w	r2, r2, #4
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4770      	bx	lr
 8005070:	e000e010 	and	lr, r0, r0, lsl r0

08005074 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8005074:	4b01      	ldr	r3, [pc, #4]	; (800507c <SysTick_SetReload+0x8>)
 8005076:	6058      	str	r0, [r3, #4]
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000e010 	and	lr, r0, r0, lsl r0

08005080 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8005080:	2801      	cmp	r0, #1
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <SysTick_CounterCmd+0x24>)
 8005084:	d103      	bne.n	800508e <SysTick_CounterCmd+0xe>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	e004      	b.n	8005098 <SysTick_CounterCmd+0x18>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 800508e:	3002      	adds	r0, #2
 8005090:	d104      	bne.n	800509c <SysTick_CounterCmd+0x1c>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	4770      	bx	lr
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 800509c:	2200      	movs	r2, #0
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	e000e010 	and	lr, r0, r0, lsl r0

080050a8 <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <SysTick_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 80050aa:	681a      	ldr	r2, [r3, #0]
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80050ac:	b110      	cbz	r0, 80050b4 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 80050ae:	f042 0202 	orr.w	r2, r2, #2
 80050b2:	e001      	b.n	80050b8 <SysTick_ITConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 80050b4:	f022 0202 	bic.w	r2, r2, #2
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4770      	bx	lr
 80050bc:	e000e010 	and	lr, r0, r0, lsl r0

080050c0 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 80050c0:	4b01      	ldr	r3, [pc, #4]	; (80050c8 <SysTick_GetCounter+0x8>)
 80050c2:	6898      	ldr	r0, [r3, #8]
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	e000e010 	and	lr, r0, r0, lsl r0

080050cc <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 80050cc:	08c3      	lsrs	r3, r0, #3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <SysTick_GetFlagStatus+0x18>)
  {
    statusreg = SysTick->CTRL;
 80050d2:	bf0c      	ite	eq
 80050d4:	681b      	ldreq	r3, [r3, #0]
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 80050d6:	68db      	ldrne	r3, [r3, #12]
  }

  if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
 80050d8:	fa23 f000 	lsr.w	r0, r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80050dc:	f000 0001 	and.w	r0, r0, #1
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000e010 	and	lr, r0, r0, lsl r0

080050e8 <TI1_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI1_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 80050e8:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80050ea:	8c04      	ldrh	r4, [r0, #32]
 80050ec:	f024 0401 	bic.w	r4, r4, #1
 80050f0:	0424      	lsls	r4, r4, #16
 80050f2:	0c24      	lsrs	r4, r4, #16
 80050f4:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80050f6:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80050f8:	8c05      	ldrh	r5, [r0, #32]
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;

  tmpccmr1 = TIMx->CCMR1;
 80050fa:	b2a4      	uxth	r4, r4
  tmpccer = TIMx->CCER;
 80050fc:	b2ad      	uxth	r5, r5

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 80050fe:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8005102:	4322      	orrs	r2, r4
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005104:	f025 0502 	bic.w	r5, r5, #2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005108:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800510c:	f045 0501 	orr.w	r5, r5, #1
 8005110:	b29a      	uxth	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005112:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005114:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005116:	8401      	strh	r1, [r0, #32]
 8005118:	bd30      	pop	{r4, r5, pc}

0800511a <TI2_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI2_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 800511a:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 800511c:	8c04      	ldrh	r4, [r0, #32]
 800511e:	f024 0410 	bic.w	r4, r4, #16
 8005122:	0424      	lsls	r4, r4, #16
 8005124:	0c24      	lsrs	r4, r4, #16
 8005126:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005128:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800512a:	8c04      	ldrh	r4, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 800512c:	f425 7540 	bic.w	r5, r5, #768	; 0x300

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;

  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8005130:	b2a4      	uxth	r4, r4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005132:	052d      	lsls	r5, r5, #20
 8005134:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
 8005136:	f024 0420 	bic.w	r4, r4, #32
 800513a:	f044 0410 	orr.w	r4, r4, #16
 800513e:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005142:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005146:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 800514a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800514c:	b28c      	uxth	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800514e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005150:	8404      	strh	r4, [r0, #32]
 8005152:	bd30      	pop	{r4, r5, pc}

08005154 <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005154:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <TIM_DeInit+0xbc>)
 8005158:	4298      	cmp	r0, r3
 800515a:	d03a      	beq.n	80051d2 <TIM_DeInit+0x7e>
 800515c:	d810      	bhi.n	8005180 <TIM_DeInit+0x2c>
 800515e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005162:	4298      	cmp	r0, r3
 8005164:	d025      	beq.n	80051b2 <TIM_DeInit+0x5e>
 8005166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516a:	4298      	cmp	r0, r3
 800516c:	d02b      	beq.n	80051c6 <TIM_DeInit+0x72>
 800516e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005172:	d14c      	bne.n	800520e <TIM_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005174:	2001      	movs	r0, #1
 8005176:	4601      	mov	r1, r0
 8005178:	f7ff ff0e 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800517c:	2001      	movs	r0, #1
 800517e:	e01d      	b.n	80051bc <TIM_DeInit+0x68>
void TIM_DeInit(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <TIM_DeInit+0xc0>)
 8005182:	4298      	cmp	r0, r3
 8005184:	d031      	beq.n	80051ea <TIM_DeInit+0x96>
 8005186:	d804      	bhi.n	8005192 <TIM_DeInit+0x3e>
 8005188:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800518c:	4298      	cmp	r0, r3
 800518e:	d026      	beq.n	80051de <TIM_DeInit+0x8a>
 8005190:	bd08      	pop	{r3, pc}
 8005192:	4b21      	ldr	r3, [pc, #132]	; (8005218 <TIM_DeInit+0xc4>)
 8005194:	4298      	cmp	r0, r3
 8005196:	d004      	beq.n	80051a2 <TIM_DeInit+0x4e>
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	4298      	cmp	r0, r3
 800519e:	d02a      	beq.n	80051f6 <TIM_DeInit+0xa2>
 80051a0:	bd08      	pop	{r3, pc}
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80051a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051a6:	2101      	movs	r1, #1
 80051a8:	f7ff feea 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80051ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051b0:	e028      	b.n	8005204 <TIM_DeInit+0xb0>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80051b2:	2002      	movs	r0, #2
 80051b4:	2101      	movs	r1, #1
 80051b6:	f7ff feef 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80051ba:	2002      	movs	r0, #2
 80051bc:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 80051be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80051c2:	f7ff bee9 	b.w	8004f98 <RCC_APB1PeriphResetCmd>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80051c6:	2004      	movs	r0, #4
 80051c8:	2101      	movs	r1, #1
 80051ca:	f7ff fee5 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80051ce:	2004      	movs	r0, #4
 80051d0:	e7f4      	b.n	80051bc <TIM_DeInit+0x68>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80051d2:	2008      	movs	r0, #8
 80051d4:	2101      	movs	r1, #1
 80051d6:	f7ff fedf 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80051da:	2008      	movs	r0, #8
 80051dc:	e7ee      	b.n	80051bc <TIM_DeInit+0x68>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80051de:	2010      	movs	r0, #16
 80051e0:	2101      	movs	r1, #1
 80051e2:	f7ff fed9 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80051e6:	2010      	movs	r0, #16
 80051e8:	e7e8      	b.n	80051bc <TIM_DeInit+0x68>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80051ea:	2020      	movs	r0, #32
 80051ec:	2101      	movs	r1, #1
 80051ee:	f7ff fed3 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80051f2:	2020      	movs	r0, #32
 80051f4:	e7e2      	b.n	80051bc <TIM_DeInit+0x68>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80051f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80051fa:	2101      	movs	r1, #1
 80051fc:	f7ff fec0 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005200:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005204:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 8005206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800520a:	f7ff beb9 	b.w	8004f80 <RCC_APB2PeriphResetCmd>
 800520e:	bd08      	pop	{r3, pc}
 8005210:	40000c00 	andmi	r0, r0, r0, lsl #24
 8005214:	40001400 	andmi	r1, r0, r0, lsl #8
 8005218:	40012c00 	andmi	r2, r1, r0, lsl #24

0800521c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 800521c:	8803      	ldrh	r3, [r0, #0]
 800521e:	88ca      	ldrh	r2, [r1, #6]
 8005220:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8005224:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8005226:	8803      	ldrh	r3, [r0, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	884a      	ldrh	r2, [r1, #2]
 800522e:	4313      	orrs	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005234:	888b      	ldrh	r3, [r1, #4]
 8005236:	8583      	strh	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005238:	880b      	ldrh	r3, [r1, #0]
 800523a:	8503      	strh	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 800523c:	2301      	movs	r3, #1
 800523e:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 8005240:	4b04      	ldr	r3, [pc, #16]	; (8005254 <TIM_TimeBaseInit+0x38>)
 8005242:	4298      	cmp	r0, r3
 8005244:	d003      	beq.n	800524e <TIM_TimeBaseInit+0x32>
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	4298      	cmp	r0, r3
 800524c:	d101      	bne.n	8005252 <TIM_TimeBaseInit+0x36>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800524e:	7a0b      	ldrb	r3, [r1, #8]
 8005250:	8603      	strh	r3, [r0, #48]	; 0x30
 8005252:	4770      	bx	lr
 8005254:	40012c00 	andmi	r2, r1, r0, lsl #24

08005258 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005258:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800525a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800526c:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 800526e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005272:	0412      	lsls	r2, r2, #16
 8005274:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8005276:	f023 0502 	bic.w	r5, r3, #2
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800527a:	4316      	orrs	r6, r2
 800527c:	884b      	ldrh	r3, [r1, #2]
 800527e:	890a      	ldrh	r2, [r1, #8]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8005280:	042d      	lsls	r5, r5, #16
 8005282:	4313      	orrs	r3, r2
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005284:	88ca      	ldrh	r2, [r1, #6]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8005286:	0c2d      	lsrs	r5, r5, #16
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005288:	8682      	strh	r2, [r0, #52]	; 0x34
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800528a:	4a0f      	ldr	r2, [pc, #60]	; (80052c8 <TIM_OC1Init+0x70>)

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800528c:	432b      	orrs	r3, r5
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800528e:	4290      	cmp	r0, r2
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005292:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005294:	d003      	beq.n	800529e <TIM_OC1Init+0x46>
 8005296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529a:	4290      	cmp	r0, r2
 800529c:	d10f      	bne.n	80052be <TIM_OC1Init+0x66>
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 800529e:	f647 45ff 	movw	r5, #31999	; 0x7cff
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80052a2:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 80052a4:	f023 0308 	bic.w	r3, r3, #8

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80052a8:	4313      	orrs	r3, r2

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80052aa:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 80052ac:	f023 0304 	bic.w	r3, r3, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 80052b0:	4025      	ands	r5, r4

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80052b2:	4313      	orrs	r3, r2
 80052b4:	89cc      	ldrh	r4, [r1, #14]
 80052b6:	898a      	ldrh	r2, [r1, #12]
 80052b8:	4314      	orrs	r4, r2

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80052ba:	432c      	orrs	r4, r5
 80052bc:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052be:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052c0:	8306      	strh	r6, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	8403      	strh	r3, [r0, #32]
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
 80052c6:	bf00      	nop
 80052c8:	40012c00 	andmi	r2, r1, r0, lsl #24

080052cc <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80052cc:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80052ce:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80052d0:	f023 0310 	bic.w	r3, r3, #16
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80052da:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052de:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80052e0:	880c      	ldrh	r4, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 80052e2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80052e6:	0412      	lsls	r2, r2, #16
 80052e8:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80052ea:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 80052ee:	f023 0320 	bic.w	r3, r3, #32
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80052f2:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 80052f4:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80052f6:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 80052f8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80052fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 80052fe:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	b2ad      	uxth	r5, r5

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005302:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005306:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005308:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800530a:	8702      	strh	r2, [r0, #56]	; 0x38
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800530c:	4a10      	ldr	r2, [pc, #64]	; (8005350 <TIM_OC2Init+0x84>)
 800530e:	4290      	cmp	r0, r2
 8005310:	d003      	beq.n	800531a <TIM_OC2Init+0x4e>
 8005312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005316:	4290      	cmp	r0, r2
 8005318:	d116      	bne.n	8005348 <TIM_OC2Init+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 800531a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800531e:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8005320:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005322:	ea43 1202 	orr.w	r2, r3, r2, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 8005326:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800532a:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800532c:	888a      	ldrh	r2, [r1, #4]
 800532e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 8005332:	f247 32ff 	movw	r2, #29695	; 0x73ff
 8005336:	402a      	ands	r2, r5

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005338:	898d      	ldrh	r5, [r1, #12]

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800533a:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800533c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005340:	89cd      	ldrh	r5, [r1, #14]
 8005342:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
 8005346:	b2ad      	uxth	r5, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005348:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534a:	8304      	strh	r4, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534c:	8403      	strh	r3, [r0, #32]
 800534e:	bd30      	pop	{r4, r5, pc}
 8005350:	40012c00 	andmi	r2, r1, r0, lsl #24

08005354 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005354:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005356:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005366:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005368:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 800536a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800536e:	0412      	lsls	r2, r2, #16
 8005370:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8005372:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005376:	4316      	orrs	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8005378:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800537a:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 800537c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800537e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005382:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800538a:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 800538c:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800538e:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005390:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <TIM_OC3Init+0x80>)
 8005392:	4290      	cmp	r0, r2
 8005394:	d003      	beq.n	800539e <TIM_OC3Init+0x4a>
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	4290      	cmp	r0, r2
 800539c:	d116      	bne.n	80053cc <TIM_OC3Init+0x78>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 800539e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80053a2:	894a      	ldrh	r2, [r1, #10]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 80053a4:	f644 75ff 	movw	r5, #20479	; 0x4fff
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 80053a8:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80053aa:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 80053ae:	f64f 33ff 	movw	r3, #64511	; 0xfbff
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 80053b2:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80053b4:	898c      	ldrh	r4, [r1, #12]

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 80053b6:	4013      	ands	r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80053b8:	ea45 1504 	orr.w	r5, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80053bc:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80053be:	89cc      	ldrh	r4, [r1, #14]

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80053c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80053c4:	ea45 1404 	orr.w	r4, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80053c8:	b29b      	uxth	r3, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80053ca:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053cc:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ce:	8386      	strh	r6, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d0:	8403      	strh	r3, [r0, #32]
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	40012c00 	andmi	r2, r1, r0, lsl #24

080053d8 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 80053d8:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80053da:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 80053dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ea:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80053ec:	880d      	ldrh	r5, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 80053ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80053f2:	0412      	lsls	r2, r2, #16
 80053f4:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 80053f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80053fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 80053fe:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005400:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8005402:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005404:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005408:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540a:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 800540c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005410:	88cd      	ldrh	r5, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005412:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005414:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005418:	4d08      	ldr	r5, [pc, #32]	; (800543c <TIM_OC4Init+0x64>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 800541a:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800541c:	42a8      	cmp	r0, r5
 800541e:	d003      	beq.n	8005428 <TIM_OC4Init+0x50>
 8005420:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005424:	42a8      	cmp	r0, r5
 8005426:	d105      	bne.n	8005434 <TIM_OC4Init+0x5c>

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005428:	8989      	ldrh	r1, [r1, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 800542a:	f3c4 040d 	ubfx	r4, r4, #0, #14

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800542e:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
 8005432:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005436:	8382      	strh	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005438:	8403      	strh	r3, [r0, #32]
 800543a:	bd30      	pop	{r4, r5, pc}
 800543c:	40012c00 	andmi	r2, r1, r0, lsl #24

08005440 <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8005440:	884a      	ldrh	r2, [r1, #2]
 8005442:	880b      	ldrh	r3, [r1, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	888a      	ldrh	r2, [r1, #4]
 8005448:	4313      	orrs	r3, r2
 800544a:	88ca      	ldrh	r2, [r1, #6]
 800544c:	4313      	orrs	r3, r2
 800544e:	890a      	ldrh	r2, [r1, #8]
 8005450:	4313      	orrs	r3, r2
 8005452:	894a      	ldrh	r2, [r1, #10]
 8005454:	4313      	orrs	r3, r2
 8005456:	898a      	ldrh	r2, [r1, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	b29b      	uxth	r3, r3
 800545c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8005460:	4770      	bx	lr

08005462 <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8005462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005466:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8005468:	2300      	movs	r3, #0
 800546a:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800546c:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800546e:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8005470:	7203      	strb	r3, [r0, #8]
 8005472:	4770      	bx	lr

08005474 <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005474:	2300      	movs	r3, #0
 8005476:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005478:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800547a:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 800547c:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800547e:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005480:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8005482:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005484:	81c3      	strh	r3, [r0, #14]
 8005486:	4770      	bx	lr

08005488 <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005488:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800548a:	2201      	movs	r2, #1
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800548c:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800548e:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005490:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8005492:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8005494:	8103      	strh	r3, [r0, #8]
 8005496:	4770      	bx	lr

08005498 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8005498:	2300      	movs	r3, #0
 800549a:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800549c:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800549e:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80054a0:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80054a2:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80054a4:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80054a6:	8183      	strh	r3, [r0, #12]
 80054a8:	4770      	bx	lr

080054aa <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 80054aa:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80054ac:	b119      	cbz	r1, 80054b6 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	e003      	b.n	80054be <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	059b      	lsls	r3, r3, #22
 80054bc:	0d9b      	lsrs	r3, r3, #22
 80054be:	8003      	strh	r3, [r0, #0]
 80054c0:	4770      	bx	lr

080054c2 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 80054c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054c6:	b129      	cbz	r1, 80054d4 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 80054c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	e001      	b.n	80054d8 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 80054d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054d8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80054dc:	4770      	bx	lr

080054de <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80054de:	8983      	ldrh	r3, [r0, #12]
 80054e0:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80054e2:	b10a      	cbz	r2, 80054e8 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80054e4:	4319      	orrs	r1, r3
 80054e6:	e001      	b.n	80054ec <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 80054e8:	ea23 0101 	bic.w	r1, r3, r1
 80054ec:	8181      	strh	r1, [r0, #12]
 80054ee:	4770      	bx	lr

080054f0 <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80054f0:	8281      	strh	r1, [r0, #20]
 80054f2:	4770      	bx	lr

080054f4 <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80054f4:	430a      	orrs	r2, r1
 80054f6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80054fa:	4770      	bx	lr

080054fc <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80054fc:	8983      	ldrh	r3, [r0, #12]
 80054fe:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005500:	b10a      	cbz	r2, 8005506 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005502:	4319      	orrs	r1, r3
 8005504:	e001      	b.n	800550a <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 8005506:	ea23 0101 	bic.w	r1, r3, r1
 800550a:	8181      	strh	r1, [r0, #12]
 800550c:	4770      	bx	lr

0800550e <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 800550e:	8903      	ldrh	r3, [r0, #8]
 8005510:	f023 0307 	bic.w	r3, r3, #7
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	0c1b      	lsrs	r3, r3, #16
 8005518:	8103      	strh	r3, [r0, #8]
 800551a:	4770      	bx	lr

0800551c <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800551c:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	041b      	lsls	r3, r3, #16
 8005524:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005526:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005528:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800552a:	8903      	ldrh	r3, [r0, #8]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f043 0307 	orr.w	r3, r3, #7
 8005532:	8103      	strh	r3, [r0, #8]
 8005534:	4770      	bx	lr

08005536 <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 8005536:	b538      	push	{r3, r4, r5, lr}
 8005538:	460d      	mov	r5, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800553a:	2d60      	cmp	r5, #96	; 0x60
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 800553c:	4611      	mov	r1, r2
 800553e:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8005540:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8005544:	d102      	bne.n	800554c <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8005546:	f7ff fde8 	bl	800511a <TI2_Config>
 800554a:	e001      	b.n	8005550 <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800554c:	f7ff fdcc 	bl	80050e8 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005550:	8921      	ldrh	r1, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 8005552:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005556:	0409      	lsls	r1, r1, #16
 8005558:	0c09      	lsrs	r1, r1, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800555a:	4329      	orrs	r1, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555c:	8121      	strh	r1, [r4, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800555e:	8923      	ldrh	r3, [r4, #8]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f043 0307 	orr.w	r3, r3, #7
 8005566:	8123      	strh	r3, [r4, #8]
 8005568:	bd38      	pop	{r3, r4, r5, pc}

0800556a <TIM_ETRConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRConfig(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                   u16 ExtTRGFilter)
{
 800556a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800556c:	8904      	ldrh	r4, [r0, #8]
 800556e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 8005572:	b2e4      	uxtb	r4, r4
 8005574:	4323      	orrs	r3, r4
 8005576:	b29b      	uxth	r3, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 8005578:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	8101      	strh	r1, [r0, #8]
 800557c:	bd10      	pop	{r4, pc}

0800557e <TIM_ETRClockMode1Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                             u16 ExtTRGFilter)
{
 800557e:	b510      	push	{r4, lr}
 8005580:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8005582:	f7ff fff2 	bl	800556a <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005586:	8923      	ldrh	r3, [r4, #8]
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
 8005588:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8005590:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005594:	8123      	strh	r3, [r4, #8]
 8005596:	bd10      	pop	{r4, pc}

08005598 <TIM_ETRClockMode2Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, 
                             u16 TIM_ExtTRGPolarity, u16 ExtTRGFilter)
{
 8005598:	b510      	push	{r4, lr}
 800559a:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800559c:	f7ff ffe5 	bl	800556a <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 80055a0:	8923      	ldrh	r3, [r4, #8]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a8:	8123      	strh	r3, [r4, #8]
 80055aa:	bd10      	pop	{r4, pc}

080055ac <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80055ac:	8501      	strh	r1, [r0, #40]	; 0x28

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80055ae:	8282      	strh	r2, [r0, #20]
 80055b0:	4770      	bx	lr

080055b2 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80055b2:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	059b      	lsls	r3, r3, #22
 80055ba:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80055bc:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80055be:	8001      	strh	r1, [r0, #0]
 80055c0:	4770      	bx	lr

080055c2 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055c2:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80055cc:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	8101      	strh	r1, [r0, #8]
 80055d0:	4770      	bx	lr

080055d2 <TIM_EncoderInterfaceConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 80055d2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d4:	8906      	ldrh	r6, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80055d6:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d8:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055da:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055e0:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
 80055e4:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80055e8:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055ec:	0424      	lsls	r4, r4, #16
 80055ee:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80055f0:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055f2:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80055f4:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 80055f6:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80055fa:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 80055fe:	4331      	orrs	r1, r6

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 8005600:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005604:	b29d      	uxth	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005608:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	8405      	strh	r5, [r0, #32]
 800560c:	bd70      	pop	{r4, r5, r6, pc}

0800560e <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 800560e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 8005610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8005618:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800561a:	8301      	strh	r1, [r0, #24]
 800561c:	4770      	bx	lr

0800561e <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 800561e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 8005620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 8005628:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800562c:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800562e:	8301      	strh	r1, [r0, #24]
 8005630:	4770      	bx	lr

08005632 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8005632:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800563c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800563e:	8381      	strh	r1, [r0, #28]
 8005640:	4770      	bx	lr

08005642 <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8005642:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 8005644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 800564c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005650:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005652:	8381      	strh	r1, [r0, #28]
 8005654:	4770      	bx	lr

08005656 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 8005656:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005658:	b119      	cbz	r1, 8005662 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 800565a:	b29b      	uxth	r3, r3
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	e003      	b.n	800566a <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 8005662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005666:	059b      	lsls	r3, r3, #22
 8005668:	0d9b      	lsrs	r3, r3, #22
 800566a:	8003      	strh	r3, [r0, #0]
 800566c:	4770      	bx	lr

0800566e <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 800566e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005670:	b119      	cbz	r1, 800567a <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 8005672:	b29b      	uxth	r3, r3
 8005674:	f043 0304 	orr.w	r3, r3, #4
 8005678:	e003      	b.n	8005682 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 800567a:	f023 0304 	bic.w	r3, r3, #4
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	0c1b      	lsrs	r3, r3, #16
 8005682:	8083      	strh	r3, [r0, #4]
 8005684:	4770      	bx	lr

08005686 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 8005686:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005688:	b119      	cbz	r1, 8005692 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 800568a:	b29b      	uxth	r3, r3
 800568c:	f043 0308 	orr.w	r3, r3, #8
 8005690:	e003      	b.n	800569a <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 8005692:	f023 0308 	bic.w	r3, r3, #8
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	8083      	strh	r3, [r0, #4]
 800569c:	4770      	bx	lr

0800569e <TIM_CCPreloadControl>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 800569e:	8883      	ldrh	r3, [r0, #4]
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80056a0:	b119      	cbz	r1, 80056aa <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	e003      	b.n	80056b2 <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	8083      	strh	r3, [r0, #4]
 80056b4:	4770      	bx	lr

080056b6 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80056b6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 80056b8:	f023 0308 	bic.w	r3, r3, #8
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80056c0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056c2:	8301      	strh	r1, [r0, #24]
 80056c4:	4770      	bx	lr

080056c6 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80056c6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 80056c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 80056d0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056d4:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056d6:	8301      	strh	r1, [r0, #24]
 80056d8:	4770      	bx	lr

080056da <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80056da:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 80056dc:	f023 0308 	bic.w	r3, r3, #8
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80056e4:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80056e6:	8381      	strh	r1, [r0, #28]
 80056e8:	4770      	bx	lr

080056ea <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80056ea:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 80056ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 80056f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056f8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80056fa:	8381      	strh	r1, [r0, #28]
 80056fc:	4770      	bx	lr

080056fe <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8005708:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800570a:	8301      	strh	r1, [r0, #24]
 800570c:	4770      	bx	lr

0800570e <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800570e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 8005710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 8005718:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800571c:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800571e:	8301      	strh	r1, [r0, #24]
 8005720:	4770      	bx	lr

08005722 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005722:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800572c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800572e:	8381      	strh	r1, [r0, #28]
 8005730:	4770      	bx	lr

08005732 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005732:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 8005734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 800573c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005740:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005742:	8381      	strh	r1, [r0, #28]
 8005744:	4770      	bx	lr

08005746 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8005746:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 8005748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8005750:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005752:	8301      	strh	r1, [r0, #24]
 8005754:	4770      	bx	lr

08005756 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8005756:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 8005758:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 800575c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005760:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005762:	8301      	strh	r1, [r0, #24]
 8005764:	4770      	bx	lr

08005766 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8005766:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 8005768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8005770:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005772:	8381      	strh	r1, [r0, #28]
 8005774:	4770      	bx	lr

08005776 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8005776:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 8005778:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 800577c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005780:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005782:	8381      	strh	r1, [r0, #28]
 8005784:	4770      	bx	lr

08005786 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005786:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	041b      	lsls	r3, r3, #16
 800578e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8005790:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005792:	8401      	strh	r1, [r0, #32]
 8005794:	4770      	bx	lr

08005796 <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8005796:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 8005798:	f023 0308 	bic.w	r3, r3, #8
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80057a0:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057a2:	8401      	strh	r1, [r0, #32]
 80057a4:	4770      	bx	lr

080057a6 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80057a6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 80057a8:	f023 0320 	bic.w	r3, r3, #32
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 80057b0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80057b4:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057b6:	8401      	strh	r1, [r0, #32]
 80057b8:	4770      	bx	lr

080057ba <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80057ba:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 80057bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 80057c4:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80057c8:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057ca:	8401      	strh	r1, [r0, #32]
 80057cc:	4770      	bx	lr

080057ce <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80057ce:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 80057d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 80057d8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80057dc:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057de:	8401      	strh	r1, [r0, #32]
 80057e0:	4770      	bx	lr

080057e2 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80057e2:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 80057e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 80057ec:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80057f0:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057f2:	8401      	strh	r1, [r0, #32]
 80057f4:	4770      	bx	lr

080057f6 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80057f6:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 80057f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 8005800:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8005804:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005806:	8401      	strh	r1, [r0, #32]
 8005808:	4770      	bx	lr

0800580a <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800580a:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCx)
{
 800580c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800580e:	b29c      	uxth	r4, r3
 8005810:	2301      	movs	r3, #1
 8005812:	408b      	lsls	r3, r1
 8005814:	ea24 0303 	bic.w	r3, r4, r3
 8005818:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 800581a:	8c03      	ldrh	r3, [r0, #32]
 800581c:	408a      	lsls	r2, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	8403      	strh	r3, [r0, #32]
 8005824:	bd10      	pop	{r4, pc}

08005826 <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005826:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxNCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCxN)
{
 8005828:	b510      	push	{r4, lr}
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 800582a:	b29c      	uxth	r4, r3
 800582c:	2304      	movs	r3, #4
 800582e:	408b      	lsls	r3, r1
 8005830:	ea24 0303 	bic.w	r3, r4, r3
 8005834:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 8005836:	8c03      	ldrh	r3, [r0, #32]
 8005838:	408a      	lsls	r2, r1
 800583a:	4313      	orrs	r3, r2
 800583c:	b29b      	uxth	r3, r3
 800583e:	8403      	strh	r3, [r0, #32]
 8005840:	bd10      	pop	{r4, pc}

08005842 <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005842:	8c03      	ldrh	r3, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8005844:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005846:	b29c      	uxth	r4, r3
 8005848:	2301      	movs	r3, #1
 800584a:	408b      	lsls	r3, r1
 800584c:	ea24 0303 	bic.w	r3, r4, r3
 8005850:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005852:	f021 0308 	bic.w	r3, r1, #8
 8005856:	3018      	adds	r0, #24
 8005858:	b93b      	cbnz	r3, 800586a <TIM_SelectOCxM+0x28>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 800585a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800585e:	0849      	lsrs	r1, r1, #1
 8005860:	5844      	ldr	r4, [r0, r1]
 8005862:	4023      	ands	r3, r4
 8005864:	5043      	str	r3, [r0, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 8005866:	5843      	ldr	r3, [r0, r1]
 8005868:	e00a      	b.n	8005880 <TIM_SelectOCxM+0x3e>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 800586a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800586e:	3904      	subs	r1, #4
 8005870:	f3c1 014e 	ubfx	r1, r1, #1, #15
 8005874:	5844      	ldr	r4, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 8005876:	0212      	lsls	r2, r2, #8

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 8005878:	4023      	ands	r3, r4
 800587a:	5043      	str	r3, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 800587c:	5843      	ldr	r3, [r0, r1]
 800587e:	b292      	uxth	r2, r2
 8005880:	431a      	orrs	r2, r3
 8005882:	5042      	str	r2, [r0, r1]
 8005884:	bd10      	pop	{r4, pc}

08005886 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 8005886:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005888:	b119      	cbz	r1, 8005892 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 800588a:	b29b      	uxth	r3, r3
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	e003      	b.n	800589a <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 8005892:	f023 0302 	bic.w	r3, r3, #2
 8005896:	059b      	lsls	r3, r3, #22
 8005898:	0d9b      	lsrs	r3, r3, #22
 800589a:	8003      	strh	r3, [r0, #0]
 800589c:	4770      	bx	lr

0800589e <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 800589e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80058a0:	b119      	cbz	r1, 80058aa <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f043 0304 	orr.w	r3, r3, #4
 80058a8:	e003      	b.n	80058b2 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 80058aa:	f023 0304 	bic.w	r3, r3, #4
 80058ae:	059b      	lsls	r3, r3, #22
 80058b0:	0d9b      	lsrs	r3, r3, #22
 80058b2:	8003      	strh	r3, [r0, #0]
 80058b4:	4770      	bx	lr

080058b6 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 80058b6:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058b8:	b119      	cbz	r1, 80058c2 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	e003      	b.n	80058ca <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 80058c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	8083      	strh	r3, [r0, #4]
 80058cc:	4770      	bx	lr

080058ce <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 80058ce:	8803      	ldrh	r3, [r0, #0]
 80058d0:	f023 0308 	bic.w	r3, r3, #8
 80058d4:	059b      	lsls	r3, r3, #22
 80058d6:	0d9b      	lsrs	r3, r3, #22
 80058d8:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80058da:	8803      	ldrh	r3, [r0, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	4319      	orrs	r1, r3
 80058e0:	8001      	strh	r1, [r0, #0]
 80058e2:	4770      	bx	lr

080058e4 <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 80058e4:	8883      	ldrh	r3, [r0, #4]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80058f0:	8883      	ldrh	r3, [r0, #4]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4319      	orrs	r1, r3
 80058f6:	8081      	strh	r1, [r0, #4]
 80058f8:	4770      	bx	lr

080058fa <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 80058fa:	8903      	ldrh	r3, [r0, #8]
 80058fc:	f023 0307 	bic.w	r3, r3, #7
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8005906:	8903      	ldrh	r3, [r0, #8]
 8005908:	b29b      	uxth	r3, r3
 800590a:	4319      	orrs	r1, r3
 800590c:	8101      	strh	r1, [r0, #8]
 800590e:	4770      	bx	lr

08005910 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 8005910:	8903      	ldrh	r3, [r0, #8]
 8005912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800591c:	8903      	ldrh	r3, [r0, #8]
 800591e:	b29b      	uxth	r3, r3
 8005920:	4319      	orrs	r1, r3
 8005922:	8101      	strh	r1, [r0, #8]
 8005924:	4770      	bx	lr

08005926 <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8005926:	8481      	strh	r1, [r0, #36]	; 0x24
 8005928:	4770      	bx	lr

0800592a <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800592a:	8581      	strh	r1, [r0, #44]	; 0x2c
 800592c:	4770      	bx	lr

0800592e <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800592e:	8681      	strh	r1, [r0, #52]	; 0x34
 8005930:	4770      	bx	lr

08005932 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005932:	8701      	strh	r1, [r0, #56]	; 0x38
 8005934:	4770      	bx	lr

08005936 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005936:	8781      	strh	r1, [r0, #60]	; 0x3c
 8005938:	4770      	bx	lr

0800593a <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800593a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800593e:	4770      	bx	lr

08005940 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005940:	8b03      	ldrh	r3, [r0, #24]
 8005942:	f023 030c 	bic.w	r3, r3, #12
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800594c:	8b03      	ldrh	r3, [r0, #24]
 800594e:	b29b      	uxth	r3, r3
 8005950:	4319      	orrs	r1, r3
 8005952:	8301      	strh	r1, [r0, #24]
 8005954:	4770      	bx	lr

08005956 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8005956:	8b03      	ldrh	r3, [r0, #24]
 8005958:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8005962:	8b03      	ldrh	r3, [r0, #24]
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800596a:	b289      	uxth	r1, r1
 800596c:	8301      	strh	r1, [r0, #24]
 800596e:	4770      	bx	lr

08005970 <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005974:	8849      	ldrh	r1, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005976:	88a2      	ldrh	r2, [r4, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005978:	2900      	cmp	r1, #0
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800597a:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800597e:	bf0c      	ite	eq
 8005980:	2702      	moveq	r7, #2
 8005982:	2700      	movne	r7, #0
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005984:	2a01      	cmp	r2, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005986:	4605      	mov	r5, r0
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8005988:	bf0c      	ite	eq
 800598a:	2602      	moveq	r6, #2
 800598c:	2601      	movne	r6, #1
 800598e:	8923      	ldrh	r3, [r4, #8]
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005990:	f1be 0f00 	cmp.w	lr, #0
 8005994:	d111      	bne.n	80059ba <TIM_PWMIConfig+0x4a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005996:	f7ff fba7 	bl	80050e8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800599a:	4628      	mov	r0, r5
 800599c:	88e1      	ldrh	r1, [r4, #6]
 800599e:	f7ff ffcf 	bl	8005940 <TIM_SetIC1Prescaler>

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80059a2:	4628      	mov	r0, r5
 80059a4:	4639      	mov	r1, r7
 80059a6:	4632      	mov	r2, r6
 80059a8:	8923      	ldrh	r3, [r4, #8]
 80059aa:	f7ff fbb6 	bl	800511a <TI2_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80059ae:	4628      	mov	r0, r5
 80059b0:	88e1      	ldrh	r1, [r4, #6]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80059b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80059b6:	f7ff bfce 	b.w	8005956 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80059ba:	f7ff fbae 	bl	800511a <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80059be:	4628      	mov	r0, r5
 80059c0:	88e1      	ldrh	r1, [r4, #6]
 80059c2:	f7ff ffc8 	bl	8005956 <TIM_SetIC2Prescaler>

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80059c6:	4628      	mov	r0, r5
 80059c8:	4639      	mov	r1, r7
 80059ca:	4632      	mov	r2, r6
 80059cc:	8923      	ldrh	r3, [r4, #8]
 80059ce:	f7ff fb8b 	bl	80050e8 <TI1_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80059d2:	4628      	mov	r0, r5
 80059d4:	88e1      	ldrh	r1, [r4, #6]
  }
}
 80059d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80059da:	f7ff bfb1 	b.w	8005940 <TIM_SetIC1Prescaler>

080059de <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 80059de:	8b83      	ldrh	r3, [r0, #28]
 80059e0:	f023 030c 	bic.w	r3, r3, #12
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80059ea:	8b83      	ldrh	r3, [r0, #28]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4319      	orrs	r1, r3
 80059f0:	8381      	strh	r1, [r0, #28]
 80059f2:	4770      	bx	lr

080059f4 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 80059f4:	8b83      	ldrh	r3, [r0, #28]
 80059f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 8005a00:	8b83      	ldrh	r3, [r0, #28]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005a08:	b289      	uxth	r1, r1
 8005a0a:	8381      	strh	r1, [r0, #28]
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ICInit>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a10:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005a12:	880e      	ldrh	r6, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005a14:	4604      	mov	r4, r0
 8005a16:	8849      	ldrh	r1, [r1, #2]
 8005a18:	88aa      	ldrh	r2, [r5, #4]
 8005a1a:	892b      	ldrh	r3, [r5, #8]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005a1c:	b93e      	cbnz	r6, 8005a2e <TIM_ICInit+0x20>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005a1e:	f7ff fb63 	bl	80050e8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a22:	4620      	mov	r0, r4
 8005a24:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a2a:	f7ff bf89 	b.w	8005940 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005a2e:	2e04      	cmp	r6, #4
 8005a30:	d107      	bne.n	8005a42 <TIM_ICInit+0x34>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005a32:	f7ff fb72 	bl	800511a <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a36:	4620      	mov	r0, r4
 8005a38:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a3e:	f7ff bf8a 	b.w	8005956 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005a42:	2e08      	cmp	r6, #8
 8005a44:	f8b5 e006 	ldrh.w	lr, [r5, #6]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005a48:	8c05      	ldrh	r5, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005a4a:	d11c      	bne.n	8005a86 <TIM_ICInit+0x78>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005a4c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005a50:	042d      	lsls	r5, r5, #16
 8005a52:	0c2d      	lsrs	r5, r5, #16
 8005a54:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 8005a56:	8b87      	ldrh	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 8005a58:	8c06      	ldrh	r6, [r0, #32]
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;

  tmpccmr2 = TIMx->CCMR2;
 8005a5a:	b2bf      	uxth	r7, r7
  tmpccer = TIMx->CCER;
 8005a5c:	b2b6      	uxth	r6, r6
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 8005a5e:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
 8005a62:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 8005a66:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  tmpccer |= tmp | CCER_CC3E_Set;
 8005a6a:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8005a6e:	b29f      	uxth	r7, r3
 8005a70:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005a72:	433a      	orrs	r2, r7

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8005a74:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a78:	8382      	strh	r2, [r0, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a7a:	4671      	mov	r1, lr
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8005a7c:	8406      	strh	r6, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a82:	f7ff bfac 	b.w	80059de <TIM_SetIC3Prescaler>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005a86:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005a8a:	042d      	lsls	r5, r5, #16
 8005a8c:	0c2d      	lsrs	r5, r5, #16
 8005a8e:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 8005a90:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8005a92:	8c07      	ldrh	r7, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005a94:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8005a98:	052d      	lsls	r5, r5, #20

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;

  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8005a9a:	b2bf      	uxth	r7, r7
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005a9c:	0d2d      	lsrs	r5, r5, #20
 8005a9e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005aa2:	f427 5200 	bic.w	r2, r7, #8192	; 0x2000
  tmpccer |= tmp | CCER_CC4E_Set;
 8005aa6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005aaa:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005aae:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005ab0:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ab6:	8383      	strh	r3, [r0, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005ab8:	4671      	mov	r1, lr
  }
}
 8005aba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer ;
 8005abe:	8402      	strh	r2, [r0, #32]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005ac0:	f7ff bf98 	b.w	80059f4 <TIM_SetIC4Prescaler>

08005ac4 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 8005ac4:	8803      	ldrh	r3, [r0, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005aca:	8803      	ldrh	r3, [r0, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4319      	orrs	r1, r3
 8005ad0:	8001      	strh	r1, [r0, #0]
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8005ad4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8005ad6:	b280      	uxth	r0, r0
 8005ad8:	4770      	bx	lr

08005ada <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005ada:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8005adc:	b280      	uxth	r0, r0
 8005ade:	4770      	bx	lr

08005ae0 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005ae0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8005ae2:	b280      	uxth	r0, r0
 8005ae4:	4770      	bx	lr

08005ae6 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8005ae6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8005aea:	b280      	uxth	r0, r0
 8005aec:	4770      	bx	lr

08005aee <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005aee:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8005af0:	b280      	uxth	r0, r0
 8005af2:	4770      	bx	lr

08005af4 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8005af4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8005af6:	b280      	uxth	r0, r0
 8005af8:	4770      	bx	lr

08005afa <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 8005afa:	8a03      	ldrh	r3, [r0, #16]
 8005afc:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005afe:	bf14      	ite	ne
 8005b00:	2001      	movne	r0, #1
 8005b02:	2000      	moveq	r0, #0
 8005b04:	4770      	bx	lr

08005b06 <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 8005b06:	43c9      	mvns	r1, r1
 8005b08:	b289      	uxth	r1, r1
 8005b0a:	8201      	strh	r1, [r0, #16]
 8005b0c:	4770      	bx	lr

08005b0e <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005b0e:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8005b10:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005b12:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8005b16:	b292      	uxth	r2, r2

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005b18:	d003      	beq.n	8005b22 <TIM_GetITStatus+0x14>
 8005b1a:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8005b1c:	bf14      	ite	ne
 8005b1e:	2001      	movne	r0, #1
 8005b20:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005b22:	4770      	bx	lr

08005b24 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 8005b24:	43c9      	mvns	r1, r1
 8005b26:	b289      	uxth	r1, r1
 8005b28:	8201      	strh	r1, [r0, #16]
 8005b2a:	4770      	bx	lr

08005b2c <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005b2c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8005b2e:	4b22      	ldr	r3, [pc, #136]	; (8005bb8 <USART_DeInit+0x8c>)
 8005b30:	4298      	cmp	r0, r3
 8005b32:	d02c      	beq.n	8005b8e <USART_DeInit+0x62>
 8005b34:	d808      	bhi.n	8005b48 <USART_DeInit+0x1c>
 8005b36:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	d017      	beq.n	8005b6e <USART_DeInit+0x42>
 8005b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b42:	4298      	cmp	r0, r3
 8005b44:	d01b      	beq.n	8005b7e <USART_DeInit+0x52>
 8005b46:	bd08      	pop	{r3, pc}
 8005b48:	4b1c      	ldr	r3, [pc, #112]	; (8005bbc <USART_DeInit+0x90>)
 8005b4a:	4298      	cmp	r0, r3
 8005b4c:	d027      	beq.n	8005b9e <USART_DeInit+0x72>
 8005b4e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8005b52:	4298      	cmp	r0, r3
 8005b54:	d12f      	bne.n	8005bb6 <USART_DeInit+0x8a>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8005b56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	f7ff fa10 	bl	8004f80 <RCC_APB2PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8005b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  switch (*(u32*)&USARTx)
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8005b64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005b68:	2100      	movs	r1, #0
 8005b6a:	f7ff ba09 	b.w	8004f80 <RCC_APB2PeriphResetCmd>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8005b6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005b72:	2101      	movs	r1, #1
 8005b74:	f7ff fa10 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8005b78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005b7c:	e016      	b.n	8005bac <USART_DeInit+0x80>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8005b7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005b82:	2101      	movs	r1, #1
 8005b84:	f7ff fa08 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8005b88:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005b8c:	e00e      	b.n	8005bac <USART_DeInit+0x80>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8005b8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b92:	2101      	movs	r1, #1
 8005b94:	f7ff fa00 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8005b98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b9c:	e006      	b.n	8005bac <USART_DeInit+0x80>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8005b9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	f7ff f9f8 	bl	8004f98 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005ba8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005bac:	2100      	movs	r1, #0
      break;            

    default:
      break;
  }
}
 8005bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005bb2:	f7ff b9f1 	b.w	8004f98 <RCC_APB1PeriphResetCmd>
 8005bb6:	bd08      	pop	{r3, pc}
 8005bb8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8005bbc:	40005000 	andmi	r5, r0, r0

08005bc0 <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005bc0:	b530      	push	{r4, r5, lr}
 8005bc2:	460d      	mov	r5, r1
 8005bc4:	4604      	mov	r4, r0
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005bc6:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005bc8:	88ca      	ldrh	r2, [r1, #6]
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005bca:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005bcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005bd0:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005bd2:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005bd4:	8982      	ldrh	r2, [r0, #12]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005bd6:	8909      	ldrh	r1, [r1, #8]
 8005bd8:	88ab      	ldrh	r3, [r5, #4]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005bda:	b292      	uxth	r2, r2

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	8969      	ldrh	r1, [r5, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005be0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005be4:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005be6:	f022 020c 	bic.w	r2, r2, #12

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005bee:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005bf0:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005bf2:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005bf4:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8005bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005bfa:	b087      	sub	sp, #28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005bfc:	4313      	orrs	r3, r2

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8005bfe:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005c00:	a801      	add	r0, sp, #4
 8005c02:	f7ff f957 	bl	8004eb4 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005c06:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005c08:	9a04      	ldr	r2, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005c0a:	490e      	ldr	r1, [pc, #56]	; (8005c44 <USART_Init+0x84>)
 8005c0c:	428c      	cmp	r4, r1
 8005c0e:	bf18      	it	ne
 8005c10:	461a      	movne	r2, r3
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8005c12:	2319      	movs	r3, #25
 8005c14:	4353      	muls	r3, r2
 8005c16:	682a      	ldr	r2, [r5, #0]
 8005c18:	0092      	lsls	r2, r2, #2
 8005c1a:	fbb3 f2f2 	udiv	r2, r3, r2
  tmpreg = (integerdivider / 0x64) << 0x04;
 8005c1e:	2364      	movs	r3, #100	; 0x64
 8005c20:	fbb2 f0f3 	udiv	r0, r2, r3
 8005c24:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8005c26:	0901      	lsrs	r1, r0, #4
 8005c28:	fb03 2211 	mls	r2, r3, r1, r2
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8005c2c:	0112      	lsls	r2, r2, #4
 8005c2e:	3232      	adds	r2, #50	; 0x32
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	4303      	orrs	r3, r0

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8123      	strh	r3, [r4, #8]
}
 8005c3e:	b007      	add	sp, #28
 8005c40:	bd30      	pop	{r4, r5, pc}
 8005c42:	bf00      	nop
 8005c44:	40013800 	andmi	r3, r1, r0, lsl #16

08005c48 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8005c48:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005c4c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005c4e:	220c      	movs	r2, #12
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005c50:	2300      	movs	r3, #0
 8005c52:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8005c54:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8005c56:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005c58:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8005c5a:	8183      	strh	r3, [r0, #12]
 8005c5c:	4770      	bx	lr

08005c5e <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005c5e:	880b      	ldrh	r3, [r1, #0]
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005c60:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005c62:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005c64:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005c66:	4323      	orrs	r3, r4
 8005c68:	888c      	ldrh	r4, [r1, #4]
 8005c6a:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005c6c:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005c6e:	4323      	orrs	r3, r4
 8005c70:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005c72:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005c76:	4313      	orrs	r3, r2
 8005c78:	b29b      	uxth	r3, r3
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005c7a:	8203      	strh	r3, [r0, #16]
 8005c7c:	bd10      	pop	{r4, pc}

08005c7e <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005c82:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005c84:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005c86:	80c3      	strh	r3, [r0, #6]
 8005c88:	4770      	bx	lr

08005c8a <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005c8a:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005c8c:	b119      	cbz	r1, 8005c96 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c94:	e003      	b.n	8005c9e <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	8183      	strh	r3, [r0, #12]
 8005ca0:	4770      	bx	lr

08005ca2 <USART_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005ca2:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005ca4:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005cae:	2c01      	cmp	r4, #1
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005cb0:	fa03 f301 	lsl.w	r3, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005cb4:	d101      	bne.n	8005cba <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8005cb6:	300c      	adds	r0, #12
 8005cb8:	e003      	b.n	8005cc2 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005cba:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8005cbc:	bf0c      	ite	eq
 8005cbe:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005cc0:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8005cc2:	b112      	cbz	r2, 8005cca <USART_ITConfig+0x28>
  {
    *(vu32*)usartxbase  |= itmask;
 8005cc4:	6802      	ldr	r2, [r0, #0]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	e002      	b.n	8005cd0 <USART_ITConfig+0x2e>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8005cca:	6802      	ldr	r2, [r0, #0]
 8005ccc:	ea22 0303 	bic.w	r3, r2, r3
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005cd4:	8a83      	ldrh	r3, [r0, #20]
 8005cd6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005cd8:	b10a      	cbz	r2, 8005cde <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005cda:	4319      	orrs	r1, r3
 8005cdc:	e001      	b.n	8005ce2 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 8005cde:	ea23 0101 	bic.w	r1, r3, r1
 8005ce2:	8281      	strh	r1, [r0, #20]
 8005ce4:	4770      	bx	lr

08005ce6 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8005ce6:	8a03      	ldrh	r3, [r0, #16]
 8005ce8:	f023 030f 	bic.w	r3, r3, #15
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	0c1b      	lsrs	r3, r3, #16
 8005cf0:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005cf2:	8a03      	ldrh	r3, [r0, #16]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	4319      	orrs	r1, r3
 8005cf8:	8201      	strh	r1, [r0, #16]
 8005cfa:	4770      	bx	lr

08005cfc <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8005cfc:	8983      	ldrh	r3, [r0, #12]
 8005cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005d08:	8983      	ldrh	r3, [r0, #12]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4319      	orrs	r1, r3
 8005d0e:	8181      	strh	r1, [r0, #12]
 8005d10:	4770      	bx	lr

08005d12 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005d12:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005d14:	b119      	cbz	r1, 8005d1e <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f043 0302 	orr.w	r3, r3, #2
 8005d1c:	e003      	b.n	8005d26 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8005d1e:	f023 0302 	bic.w	r3, r3, #2
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	8183      	strh	r3, [r0, #12]
 8005d28:	4770      	bx	lr

08005d2a <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8005d2a:	8a03      	ldrh	r3, [r0, #16]
 8005d2c:	f023 0320 	bic.w	r3, r3, #32
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8005d36:	8a03      	ldrh	r3, [r0, #16]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4319      	orrs	r1, r3
 8005d3c:	8201      	strh	r1, [r0, #16]
 8005d3e:	4770      	bx	lr

08005d40 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005d40:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005d42:	b119      	cbz	r1, 8005d4c <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d4a:	e003      	b.n	8005d54 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8005d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	0c1b      	lsrs	r3, r3, #16
 8005d54:	8203      	strh	r3, [r0, #16]
 8005d56:	4770      	bx	lr

08005d58 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8005d58:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005d5c:	8081      	strh	r1, [r0, #4]
 8005d5e:	4770      	bx	lr

08005d60 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8005d60:	8880      	ldrh	r0, [r0, #4]
}
 8005d62:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005d66:	4770      	bx	lr

08005d68 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8005d68:	8983      	ldrh	r3, [r0, #12]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	8183      	strh	r3, [r0, #12]
 8005d72:	4770      	bx	lr

08005d74 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8005d74:	8b03      	ldrh	r3, [r0, #24]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8005d7a:	8b03      	ldrh	r3, [r0, #24]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005d82:	8301      	strh	r1, [r0, #24]
 8005d84:	4770      	bx	lr

08005d86 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8005d86:	8b03      	ldrh	r3, [r0, #24]
 8005d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d8c:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8005d8e:	8b03      	ldrh	r3, [r0, #24]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	4319      	orrs	r1, r3
 8005d94:	8301      	strh	r1, [r0, #24]
 8005d96:	4770      	bx	lr

08005d98 <USART_SmartCardCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005d98:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005d9a:	b119      	cbz	r1, 8005da4 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f043 0320 	orr.w	r3, r3, #32
 8005da2:	e003      	b.n	8005dac <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8005da4:	f023 0320 	bic.w	r3, r3, #32
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	8283      	strh	r3, [r0, #20]
 8005dae:	4770      	bx	lr

08005db0 <USART_SmartCardNACKCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005db0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005db2:	b119      	cbz	r1, 8005dbc <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f043 0310 	orr.w	r3, r3, #16
 8005dba:	e003      	b.n	8005dc4 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	8283      	strh	r3, [r0, #20]
 8005dc6:	4770      	bx	lr

08005dc8 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005dc8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005dca:	b119      	cbz	r1, 8005dd4 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f043 0308 	orr.w	r3, r3, #8
 8005dd2:	e003      	b.n	8005ddc <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8005dd4:	f023 0308 	bic.w	r3, r3, #8
 8005dd8:	041b      	lsls	r3, r3, #16
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	8283      	strh	r3, [r0, #20]
 8005dde:	4770      	bx	lr

08005de0 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8005de0:	8a83      	ldrh	r3, [r0, #20]
 8005de2:	f023 0304 	bic.w	r3, r3, #4
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005dec:	8a83      	ldrh	r3, [r0, #20]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	4319      	orrs	r1, r3
 8005df2:	8281      	strh	r1, [r0, #20]
 8005df4:	4770      	bx	lr

08005df6 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005df6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005df8:	b119      	cbz	r1, 8005e02 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	e003      	b.n	8005e0a <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8005e02:	f023 0302 	bic.w	r3, r3, #2
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	8283      	strh	r3, [r0, #20]
 8005e0c:	4770      	bx	lr

08005e0e <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8005e0e:	8803      	ldrh	r3, [r0, #0]
 8005e10:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005e12:	bf14      	ite	ne
 8005e14:	2001      	movne	r0, #1
 8005e16:	2000      	moveq	r0, #0
 8005e18:	4770      	bx	lr

08005e1a <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8005e1a:	43c9      	mvns	r1, r1
 8005e1c:	b289      	uxth	r1, r1
 8005e1e:	8001      	strh	r1, [r0, #0]
 8005e20:	4770      	bx	lr

08005e22 <USART_GetITStatus>:
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005e22:	2301      	movs	r3, #1
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
 8005e24:	b510      	push	{r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005e26:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005e2a:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005e2e:	429c      	cmp	r4, r3
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005e30:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005e34:	d101      	bne.n	8005e3a <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8005e36:	8983      	ldrh	r3, [r0, #12]
 8005e38:	e003      	b.n	8005e42 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005e3a:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8005e3c:	bf0c      	ite	eq
 8005e3e:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005e40:	8a83      	ldrhne	r3, [r0, #20]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8005e46:	8802      	ldrh	r2, [r0, #0]
 8005e48:	b292      	uxth	r2, r2

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005e4a:	b13b      	cbz	r3, 8005e5c <USART_GetITStatus+0x3a>
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8005e4c:	0a09      	lsrs	r1, r1, #8
 8005e4e:	2301      	movs	r3, #1
 8005e50:	408b      	lsls	r3, r1
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005e52:	4213      	tst	r3, r2
  {
    bitstatus = SET;
 8005e54:	bf14      	ite	ne
 8005e56:	2001      	movne	r0, #1
 8005e58:	2000      	moveq	r0, #0
 8005e5a:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8005e5c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <USART_ClearITPendingBit>:
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
 8005e60:	0a09      	lsrs	r1, r1, #8
 8005e62:	2301      	movs	r3, #1
 8005e64:	408b      	lsls	r3, r1
  USARTx->SR = (u16)~itmask;
 8005e66:	43db      	mvns	r3, r3
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8003      	strh	r3, [r0, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop

08005e70 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8005e70:	bf30      	wfi
    BX r14
 8005e72:	4770      	bx	lr

08005e74 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8005e74:	bf20      	wfe
    BX r14
 8005e76:	4770      	bx	lr

08005e78 <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8005e78:	bf40      	sev
    BX r14
 8005e7a:	4770      	bx	lr

08005e7c <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8005e7c:	f3bf 8f6f 	isb	sy
    BX r14
 8005e80:	4770      	bx	lr

08005e82 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8005e82:	f3bf 8f4f 	dsb	sy
    BX r14
 8005e86:	4770      	bx	lr

08005e88 <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8005e88:	f3bf 8f5f 	dmb	sy
    BX r14
 8005e8c:	4770      	bx	lr

08005e8e <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8005e8e:	df01      	svc	1
    BX r14
 8005e90:	4770      	bx	lr

08005e92 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8005e92:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8005e96:	4770      	bx	lr

08005e98 <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8005e98:	f380 8814 	msr	CONTROL, r0
  ISB
 8005e9c:	f3bf 8f6f 	isb	sy
  BX r14
 8005ea0:	4770      	bx	lr

08005ea2 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8005ea2:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8005ea6:	4770      	bx	lr

08005ea8 <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8005ea8:	f380 8809 	msr	PSP, r0
    BX r14
 8005eac:	4770      	bx	lr

08005eae <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8005eae:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8005eb2:	4770      	bx	lr

08005eb4 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8005eb4:	f380 8808 	msr	MSP, r0
    BX r14
 8005eb8:	4770      	bx	lr

08005eba <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8005eba:	b672      	cpsid	i
  BX r14
 8005ebc:	4770      	bx	lr

08005ebe <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8005ebe:	b662      	cpsie	i
  BX r14
 8005ec0:	4770      	bx	lr

08005ec2 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8005ec2:	b671      	cpsid	f
  BX r14
 8005ec4:	4770      	bx	lr

08005ec6 <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8005ec6:	b661      	cpsie	f
  BX r14
 8005ec8:	4770      	bx	lr

08005eca <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8005eca:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8005ece:	4770      	bx	lr

08005ed0 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8005ed0:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  BX r14
 8005ed4:	4770      	bx	lr

08005ed6 <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8005ed6:	ba40      	rev16	r0, r0
  BX r14
 8005ed8:	4770      	bx	lr

08005eda <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8005eda:	ba00      	rev	r0, r0
  BX r14
 8005edc:	4770      	bx	lr
	...

08005ee0 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8005ee0:	4668      	mov	r0, sp
 8005ee2:	f020 0107 	bic.w	r1, r0, #7
 8005ee6:	468d      	mov	sp, r1
 8005ee8:	b501      	push	{r0, lr}
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <Reset_Handler+0x3c>)
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <Reset_Handler+0x40>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8005eee:	490d      	ldr	r1, [pc, #52]	; (8005f24 <Reset_Handler+0x44>)
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	d204      	bcs.n	8005efe <Reset_Handler+0x1e>
    {
        *(pulDest++) = *(pulSrc++);
 8005ef4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8005ef8:	f843 1b04 	str.w	r1, [r3], #4
 8005efc:	e7f7      	b.n	8005eee <Reset_Handler+0xe>
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <Reset_Handler+0x48>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8005f00:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <Reset_Handler+0x4c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d203      	bcs.n	8005f0e <Reset_Handler+0x2e>
    {
        *(pulDest++) = 0;
 8005f06:	2200      	movs	r2, #0
 8005f08:	f843 2b04 	str.w	r2, [r3], #4
 8005f0c:	e7f8      	b.n	8005f00 <Reset_Handler+0x20>
    }

    //
    // Call the application's entry point.
    //
    main();
 8005f0e:	f000 f80f 	bl	8005f30 <main>
}
 8005f12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8005f16:	4685      	mov	sp, r0
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	08006304 	stmdaeq	r0, {r2, r8, r9, sp, lr}
 8005f20:	20000000 	andcs	r0, r0, r0
 8005f24:	20000018 	andcs	r0, r0, r8, lsl r0
 8005f28:	20000018 	andcs	r0, r0, r8, lsl r0
 8005f2c:	2000021c 	andcs	r0, r0, ip, lsl r2

08005f30 <main>:
//////////////////////////   M A I N   L O O P   ////////////////////////
/////////////////////////////////////////////////////////////////////////


int main(void)
{
 8005f30:	b530      	push	{r4, r5, lr}
 8005f32:	b087      	sub	sp, #28
    // --------------DO NOT TOUCH!!------------------------ //
    // NEVER!!! EVER!!!

    init_config();
 8005f34:	f7fd ff36 	bl	8003da4 <init_config>
    // thats why we call it state :-)
    int state;


    state=INIT;
    infiniteTurn(MOTOR_down_left);
 8005f38:	2004      	movs	r0, #4
 8005f3a:	f7fd fa08 	bl	800334e <infiniteTurn>
    infiniteTurn(MOTOR_down_right);
 8005f3e:	2003      	movs	r0, #3
 8005f40:	f7fd fa05 	bl	800334e <infiniteTurn>
    setSpeed(MOTOR_down_left, speed_ini);
 8005f44:	2004      	movs	r0, #4
 8005f46:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005f4a:	f7fd fac0 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, speed_ini);
 8005f4e:	2003      	movs	r0, #3
 8005f50:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005f54:	f7fd fabb 	bl	80034ce <setSpeed>
    unsigned char field;
    unsigned char leftfield;

    setSpeed(MOTOR_down_left, 0);
 8005f58:	2004      	movs	r0, #4
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f7fd fab7 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, 0);
 8005f60:	2003      	movs	r0, #3
 8005f62:	2100      	movs	r1, #0
 8005f64:	f7fd fab3 	bl	80034ce <setSpeed>

    //OUR GLOBAL VARIABLE
    int shovel_state = shovel_down;
 8005f68:	2300      	movs	r3, #0
    unsigned int init_Angle1;
    unsigned int init_Angle2;
    getAngle(MOTOR_up_left, &init_Angle1);
 8005f6a:	2002      	movs	r0, #2
 8005f6c:	a902      	add	r1, sp, #8

    setSpeed(MOTOR_down_left, 0);
    setSpeed(MOTOR_down_right, 0);

    //OUR GLOBAL VARIABLE
    int shovel_state = shovel_down;
 8005f6e:	9301      	str	r3, [sp, #4]
    unsigned int init_Angle1;
    unsigned int init_Angle2;
    getAngle(MOTOR_up_left, &init_Angle1);
 8005f70:	f7fd fb7c 	bl	800366c <getAngle>
    getAngle(MOTOR_up_right, &init_Angle2);
 8005f74:	a903      	add	r1, sp, #12
 8005f76:	2001      	movs	r0, #1
 8005f78:	f7fd fb78 	bl	800366c <getAngle>
    while(state!=STOP)
    {

        while (state==INIT) {
            // play some music
            init_music();
 8005f7c:	f7fd fdbd 	bl	8003afa <init_music>
            // blink some lights
            init_lights();
 8005f80:	f7fd fe1f 	bl	8003bc2 <init_lights>

            unsigned int init_Angle1;
            unsigned int init_Angle2;
            getAngle(MOTOR_up_left, &init_Angle1);    //angles bas
 8005f84:	2002      	movs	r0, #2
 8005f86:	a904      	add	r1, sp, #16
 8005f88:	f7fd fb70 	bl	800366c <getAngle>
            getAngle(MOTOR_up_right, &init_Angle2);
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	a905      	add	r1, sp, #20
 8005f90:	f7fd fb6c 	bl	800366c <getAngle>
        }


        while (state==GO_TO_CENTER) {  
            // the temporisation should be adapted
            GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8005f94:	483f      	ldr	r0, [pc, #252]	; (8006094 <main+0x164>)
 8005f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000

            unsigned int init_Angle1;
            unsigned int init_Angle2;
            getAngle(MOTOR_up_left, &init_Angle1);    //angles bas
            getAngle(MOTOR_up_right, &init_Angle2);
            out_Angle1 = init_Angle1-150;         //angles hauts
 8005f9a:	9c04      	ldr	r4, [sp, #16]
            out_Angle2 = init_Angle2+150;
 8005f9c:	9d05      	ldr	r5, [sp, #20]
        }


        while (state==GO_TO_CENTER) {  
            // the temporisation should be adapted
            GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8005f9e:	f7fe fc6a 	bl	8004876 <GPIO_SetBits>
            GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8005fa2:	483d      	ldr	r0, [pc, #244]	; (8006098 <main+0x168>)
 8005fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fa8:	f7fe fc67 	bl	800487a <GPIO_ResetBits>
            move_forward(speed_ini);
 8005fac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8005fb0:	f7fd faaa 	bl	8003508 <move_forward>

            // advance for 3s, maybe adapt...
            mDelay(1500);
 8005fb4:	f240 50dc 	movw	r0, #1500	; 0x5dc

            unsigned int init_Angle1;
            unsigned int init_Angle2;
            getAngle(MOTOR_up_left, &init_Angle1);    //angles bas
            getAngle(MOTOR_up_right, &init_Angle2);
            out_Angle1 = init_Angle1-150;         //angles hauts
 8005fb8:	3c96      	subs	r4, #150	; 0x96
            out_Angle2 = init_Angle2+150;
 8005fba:	3596      	adds	r5, #150	; 0x96
            GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
            GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
            move_forward(speed_ini);

            // advance for 3s, maybe adapt...
            mDelay(1500);
 8005fbc:	f7fd fd6c 	bl	8003a98 <mDelay>



        // begin the "seeking for an opponent" phase
        while (state==SEEKING) {
            if(shovel_state == shovel_up || shovel_state == shovel_upping){
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d804      	bhi.n	8005fd2 <main+0xa2>
                up_to_lowering(&shovel_state, init_Angle1, init_Angle2);
 8005fc8:	a801      	add	r0, sp, #4
 8005fca:	9902      	ldr	r1, [sp, #8]
 8005fcc:	9a03      	ldr	r2, [sp, #12]
 8005fce:	f7fd fe79 	bl	8003cc4 <up_to_lowering>
            }

            // the robot starts spinning around
            GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8005fd2:	4831      	ldr	r0, [pc, #196]	; (8006098 <main+0x168>)
 8005fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fd8:	f7fe fc4d 	bl	8004876 <GPIO_SetBits>
            GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8005fdc:	482e      	ldr	r0, [pc, #184]	; (8006098 <main+0x168>)
 8005fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fe2:	f7fe fc48 	bl	8004876 <GPIO_SetBits>
            GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8005fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fea:	482b      	ldr	r0, [pc, #172]	; (8006098 <main+0x168>)
 8005fec:	f7fe fc45 	bl	800487a <GPIO_ResetBits>
            turn_right();
 8005ff0:	f7fd fa96 	bl	8003520 <turn_right>
            centerInfraRed(SENSOR, &field);
 8005ff4:	2064      	movs	r0, #100	; 0x64
 8005ff6:	f10d 0102 	add.w	r1, sp, #2
 8005ffa:	f7fd fbdf 	bl	80037bc <centerInfraRed>

            // detect border
            detectlb(thresholdLight, &leftfield);
 8005ffe:	2032      	movs	r0, #50	; 0x32
 8006000:	f10d 0103 	add.w	r1, sp, #3
 8006004:	f7fd fe78 	bl	8003cf8 <detectlb>

            // opponent detection will result in an attitude change
            if (field >= thresholdInfrared)  // indeed this condition should be explicit
 8006008:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800600c:	2b31      	cmp	r3, #49	; 0x31
 800600e:	ddd7      	ble.n	8005fc0 <main+0x90>
        }

        // the robot will focus the opponent and try to push him away,
        // as hard as possible
        while (state==CHASING) {
            GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8006010:	4821      	ldr	r0, [pc, #132]	; (8006098 <main+0x168>)
 8006012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006016:	f7fe fc2e 	bl	8004876 <GPIO_SetBits>
            GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 800601a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800601e:	481e      	ldr	r0, [pc, #120]	; (8006098 <main+0x168>)
 8006020:	f7fe fc2b 	bl	800487a <GPIO_ResetBits>
            move_forward(speed_max);
 8006024:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8006028:	f7fd fa6e 	bl	8003508 <move_forward>
            centerInfraRed(SENSOR, &field);
 800602c:	2064      	movs	r0, #100	; 0x64
 800602e:	f10d 0102 	add.w	r1, sp, #2
 8006032:	f7fd fbc3 	bl	80037bc <centerInfraRed>
            
            // shovel
            if(shovel_state == shovel_down){
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	b92b      	cbnz	r3, 8006046 <main+0x116>
    if( abs(current_Angle1-init_Angle1) <= shovelthreshold && abs(current_Angle2-init_Angle2) <= shovelthreshold)
        *shovel_state = shovel_down;
}

void down_to_upping(int* shovel_state, int out_Angle1, int out_Angle2){
    lifting(out_Angle1, out_Angle2);
 800603a:	4620      	mov	r0, r4
 800603c:	4629      	mov	r1, r5
 800603e:	f7fd faad 	bl	800359c <lifting>
    *shovel_state = shovel_upping;
 8006042:	2302      	movs	r3, #2
 8006044:	9301      	str	r3, [sp, #4]
            // shovel
            if(shovel_state == shovel_down){
                down_to_upping(&shovel_state, out_Angle1, out_Angle2);
            }

            if(shovel_state == shovel_upping ){
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d104      	bne.n	8006056 <main+0x126>
                upping_to_up(&shovel_state, out_Angle1, out_Angle2);
 800604c:	a801      	add	r0, sp, #4
 800604e:	4621      	mov	r1, r4
 8006050:	462a      	mov	r2, r5
 8006052:	f7fd fb27 	bl	80036a4 <upping_to_up>
            }


            if(shovel_state == shovel_up){
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d104      	bne.n	8006066 <main+0x136>
                up_to_lowering(&shovel_state, init_Angle1, init_Angle2);
 800605c:	a801      	add	r0, sp, #4
 800605e:	9902      	ldr	r1, [sp, #8]
 8006060:	9a03      	ldr	r2, [sp, #12]
 8006062:	f7fd fe2f 	bl	8003cc4 <up_to_lowering>
            }

            if(shovel_state == shovel_lowering){
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d104      	bne.n	8006076 <main+0x146>
                lowering_to_low(&shovel_state, init_Angle1, init_Angle2);
 800606c:	a801      	add	r0, sp, #4
 800606e:	9902      	ldr	r1, [sp, #8]
 8006070:	9a03      	ldr	r2, [sp, #12]
 8006072:	f7fd fb31 	bl	80036d8 <lowering_to_low>
            }

            // detect border
            detectlb(thresholdLight, &leftfield);
 8006076:	2032      	movs	r0, #50	; 0x32
 8006078:	f10d 0103 	add.w	r1, sp, #3
 800607c:	f7fd fe3c 	bl	8003cf8 <detectlb>

            // if, for whatever reason, the robot does not detect any obstacle anymore
            // it returns to its seeking opponent phase
            if (field<thresholdInfrared/2)
 8006080:	f89d 3002 	ldrb.w	r3, [sp, #2]
                state=SEEKING;
 8006084:	2b18      	cmp	r3, #24
 8006086:	bfcc      	ite	gt
 8006088:	2303      	movgt	r3, #3
 800608a:	2302      	movle	r3, #2
                state = CHASING;
        }

        // the robot will focus the opponent and try to push him away,
        // as hard as possible
        while (state==CHASING) {
 800608c:	2b03      	cmp	r3, #3
 800608e:	d0bf      	beq.n	8006010 <main+0xe0>
 8006090:	e796      	b.n	8005fc0 <main+0x90>
 8006092:	bf00      	nop
 8006094:	40011000 	andmi	r1, r1, r0
 8006098:	40010c00 	andmi	r0, r1, r0, lsl #24

0800609c <APBAHBPrescTable>:
 800609c:	00000000 	andeq	r0, r0, r0
 80060a0:	04030201 	streq	r0, [r3], #-513	; 0x201
 80060a4:	04030201 	streq	r0, [r3], #-513	; 0x201
 80060a8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

080060ac <ADCPrescTable>:
 80060ac:	08060402 	stmdaeq	r6, {r1, sl}
 80060b0:	354d430a 	strbcc	r4, [sp, #-778]	; 0x30a
 80060b4:	666e6920 	strbtvs	r6, [lr], -r0, lsr #18
 80060b8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 80060bc:	6f722065 	svcvs	0x00722065
 80060c0:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 80060c4:	6d206e6f 	stcvs	14, cr6, [r0, #-444]!	; 0xfffffe44
 80060c8:	2065646f 	rsbcs	r6, r5, pc, ror #8
 80060cc:	0a746573 	beq	9d1f6a0 <_etext+0x1d19398>
 80060d0:	4d430a00 	vstrmi	s1, [r3, #-0]
 80060d4:	6f6e2035 	svcvs	0x006e2035
 80060d8:	6c616d72 	stclvs	13, cr6, [r1], #-456	; 0xfffffe38
 80060dc:	746f7220 	strbtvc	r7, [pc], #-544	; 80060e4 <ADCPrescTable+0x38>
 80060e0:	6f697461 	svcvs	0x00697461
 80060e4:	6f6d206e 	svcvs	0x006d206e
 80060e8:	73206564 			; <UNDEFINED> instruction: 0x73206564
 80060ec:	000a7465 	andeq	r7, sl, r5, ror #8
 80060f0:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 80060f4:	4658545f 			; <UNDEFINED> instruction: 0x4658545f
 80060f8:	3a4c4941 	bcc	9318604 <_etext+0x13122fc>
 80060fc:	69614620 	stmdbvs	r1!, {r5, r9, sl, lr}^
 8006100:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8006104:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 8006108:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
 800610c:	736e6920 	cmnvc	lr, #32, 18	; 0x80000
 8006110:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 8006114:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 8006118:	63617020 	cmnvs	r1, #32
 800611c:	2174656b 	cmncs	r4, fp, ror #10
 8006120:	4f43000a 	svcmi	0x0043000a
 8006124:	545f4d4d 	ldrbpl	r4, [pc], #-3405	; 800612c <ADCPrescTable+0x80>
 8006128:	52524558 	subspl	r4, r2, #88, 10	; 0x16000000
 800612c:	203a524f 	eorscs	r5, sl, pc, asr #4
 8006130:	6f636e49 	svcvs	0x00636e49
 8006134:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 8006138:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 800613c:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 8006140:	6f697463 	svcvs	0x00697463
 8006144:	6170206e 	cmnvs	r0, lr, rrx
 8006148:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 800614c:	43000a21 	movwmi	r0, #2593	; 0xa21
 8006150:	5f4d4d4f 	svcpl	0x004d4d4f
 8006154:	41465852 	cmpmi	r6, r2, asr r8
 8006158:	203a4c49 	eorscs	r4, sl, r9, asr #24
 800615c:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 8006160:	67206465 	strvs	r6, [r0, -r5, ror #8]!
 8006164:	73207465 			; <UNDEFINED> instruction: 0x73207465
 8006168:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 800616c:	61702073 	cmnvs	r0, r3, ror r0
 8006170:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8006174:	6f726620 	svcvs	0x00726620
 8006178:	6564206d 	strbvs	r2, [r4, #-109]!	; 0x6d
 800617c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
 8006180:	43000a21 	movwmi	r0, #2593	; 0xa21
 8006184:	5f4d4d4f 	svcpl	0x004d4d4f
 8006188:	41575852 	cmpmi	r7, r2, asr r8
 800618c:	4e495449 	cdpmi	4, 4, cr5, cr9, cr9, {2}
 8006190:	4e203a47 	vnmulmi.f32	s6, s0, s14
 8006194:	7220776f 	eorvc	r7, r0, #29097984	; 0x1bc0000
 8006198:	65696365 	strbvs	r6, [r9, #-869]!	; 0x365
 800619c:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
 80061a0:	61747320 	cmnvs	r4, r0, lsr #6
 80061a4:	20737574 	rsbscs	r7, r3, r4, ror r5
 80061a8:	6b636170 	blvs	98de770 <_etext+0x18d8468>
 80061ac:	0a217465 	beq	8863348 <_etext+0x85d040>
 80061b0:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 80061b8 <ADCPrescTable+0x10c>
 80061b4:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 80061b8:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
 80061bc:	3a54554f 	bcc	951b700 <_etext+0x15153f8>
 80061c0:	65685420 	strbvs	r5, [r8, #-1056]!	; 0x420
 80061c4:	69206572 	stmdbvs	r0!, {r1, r4, r5, r6, r8, sl, sp, lr}
 80061c8:	6f6e2073 	svcvs	0x006e2073
 80061cc:	61747320 	cmnvs	r4, r0, lsr #6
 80061d0:	20737574 	rsbscs	r7, r3, r4, ror r5
 80061d4:	6b636170 	blvs	98de79c <_etext+0x18d8494>
 80061d8:	0a217465 	beq	8863374 <_etext+0x85d06c>
 80061dc:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 80061e4 <ADCPrescTable+0x138>
 80061e0:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 80061e4:	52524f43 	subspl	r4, r2, #268	; 0x10c
 80061e8:	3a545055 	bcc	951a344 <_etext+0x151403c>
 80061ec:	636e4920 	cmnvs	lr, #32, 18	; 0x80000
 80061f0:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
 80061f4:	73207463 			; <UNDEFINED> instruction: 0x73207463
 80061f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 80061fc:	61702073 	cmnvs	r0, r3, ror r0
 8006200:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8006204:	54000a21 	strpl	r0, [r0], #-2593	; 0xa21
 8006208:	20736968 	rsbscs	r6, r3, r8, ror #18
 800620c:	75207369 	strvc	r7, [r0, #-873]!	; 0x369
 8006210:	6f6e6b6e 	svcvs	0x006e6b6e
 8006214:	65206e77 	strvs	r6, [r0, #-3703]!	; 0xe77
 8006218:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 800621c:	646f6320 	strbtvs	r6, [pc], #-800	; 8006224 <ADCPrescTable+0x178>
 8006220:	000a2165 	andeq	r2, sl, r5, ror #2
 8006224:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
 8006228:	6f762074 	svcvs	0x00762074
 800622c:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
 8006230:	72652065 	rsbvc	r2, r5, #101	; 0x65
 8006234:	21726f72 	cmncs	r2, r2, ror pc
 8006238:	6e41000a 	cdpvs	0, 4, cr0, cr1, cr10, {0}
 800623c:	20656c67 	rsbcs	r6, r5, r7, ror #24
 8006240:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 8006244:	72652074 	rsbvc	r2, r5, #116	; 0x74
 8006248:	21726f72 	cmncs	r2, r2, ror pc
 800624c:	764f000a 	strbvc	r0, [pc], -sl
 8006250:	65687265 	strbvs	r7, [r8, #-613]!	; 0x265
 8006254:	65207461 	strvs	r7, [r0, #-1121]!	; 0x461
 8006258:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 800625c:	4f000a21 	svcmi	0x00000a21
 8006260:	6f207475 	svcvs	0x00207475
 8006264:	61722066 	cmnvs	r2, r6, rrx
 8006268:	2065676e 	rsbcs	r6, r5, lr, ror #14
 800626c:	6f727265 	svcvs	0x00727265
 8006270:	000a2172 	andeq	r2, sl, r2, ror r1
 8006274:	63656843 	cmnvs	r5, #4390912	; 0x430000
 8006278:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
 800627c:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 8006280:	0a21726f 	beq	8862c44 <_etext+0x85c93c>
 8006284:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xf00
 8006288:	616f6c72 	smcvs	63170	; 0xf6c2
 800628c:	72652064 	rsbvc	r2, r5, #100	; 0x64
 8006290:	21726f72 	cmncs	r2, r2, ror pc
 8006294:	6e49000a 	cdpvs	0, 4, cr0, cr9, cr10, {0}
 8006298:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 800629c:	6f697463 	svcvs	0x00697463
 80062a0:	6f63206e 	svcvs	0x0063206e
 80062a4:	65206564 	strvs	r6, [r0, #-1380]!	; 0x564
 80062a8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 80062ac:	21000a21 	tstcs	r0, r1, lsr #20
 80062b0:	000a2121 	andeq	r2, sl, r1, lsr #2
 80062b4:	6f72700a 	svcvs	0x0072700a
 80062b8:	6d656c62 	stclvs	12, cr6, [r5, #-392]!	; 0xfffffe78
 80062bc:	6f63202c 	svcvs	0x0063202c
 80062c0:	3d3d6564 	cfldr32cc	mvfx6, [sp, #-400]!	; 0xfffffe70
 80062c4:	72700a00 	rsbsvc	r0, r0, #0, 20
 80062c8:	656c626f 	strbvs	r6, [ip, #-623]!	; 0x26f
 80062cc:	63202c6d 			; <UNDEFINED> instruction: 0x63202c6d
 80062d0:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 80062d4:	746f4d00 	strbtvc	r4, [pc], #-3328	; 80062dc <ADCPrescTable+0x230>
 80062d8:	6c20726f 	sfmvs	f7, 4, [r0], #-444	; 0xfffffe44
 80062dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
 80062e0:	6e6f2073 	mcrvs	0, 3, r2, cr15, cr3, {3}
 80062e4:	0a2e2e2e 	beq	8b91ba4 <_etext+0xb8b89c>
 80062e8:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
 80062ec:	21216b6e 			; <UNDEFINED> instruction: 0x21216b6e
 80062f0:	6f4d000a 	svcvs	0x004d000a
 80062f4:	20726f74 	rsbscs	r6, r2, r4, ror pc
 80062f8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 80062fc:	6f207374 	svcvs	0x00207374
 8006300:	2e2e4646 	cfmadda32cs	mvax2, mvax4, mvfx14, mvfx6
 8006304:	00000a2e 	andeq	r0, r0, lr, lsr #20

Disassembly of section .data:

20000000 <CCR1_Val>:
20000000:	00000064 	andeq	r0, r0, r4, rrx

20000004 <Baudrate_PC>:
20000004:	0000e100 	andeq	lr, r0, r0, lsl #2

20000008 <id>:
20000008:	00000001 	andeq	r0, r0, r1

2000000a <GoalPos>:
2000000a:	03ff0000 	mvnseq	r0, #0
	...

20000010 <Baudrate_DXL>:
20000010:	000f4240 	andeq	r4, pc, r0, asr #4

20000014 <gbCommStatus>:
20000014:	00000001 	andeq	r0, r0, r1

Disassembly of section .bss:

20000018 <_sbss>:
	...

20000019 <gbRxBufferReadPointer>:
	...

2000001a <gbpRxInterruptBuffer>:
	...

2000011c <capture>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <gw1msCounter>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <gwTimingDelay>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <CommStatus>:
	...

20000129 <bMoving>:
	...

2000012a <Voltage>:
	...

2000012b <INDEX>:
	...

2000012c <wPresentPos>:
	...

2000012e <Position>:
	...

20000130 <giBusUsing>:
20000130:	00000000 	andeq	r0, r0, r0

20000134 <gbInstructionPacket>:
	...

200001d4 <gbRxGetLength>:
	...

200001d5 <gbRxPacketLength>:
	...

200001d6 <gbStatusPacket>:
	...

Disassembly of section ._usrstack:

2000021c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30353130 	eorscc	r3, r5, r0, lsr r1
  38:	20393235 	eorscs	r3, r9, r5, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <SCS_BASE+0x1fff12fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
  6c:	005d3737 	subseq	r3, sp, r7, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  14:	00000cc8 	andeq	r0, r0, r8, asr #25
  18:	08005f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, lr}
  1c:	0000016c 	andeq	r0, r0, ip, ror #2
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	33300002 	teqcc	r0, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	08003dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
  3c:	00000090 	muleq	r0, r0, r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	38b40002 	ldmcc	r4!, {r1}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp}
  5c:	00000062 	andeq	r0, r0, r2, rrx
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	3b8c0002 	blcc	fe30007c <SCS_BASE+0x1e2f207c>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08003ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, sp}
  7c:	0000037c 	andeq	r0, r0, ip, ror r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	42c00002 	sbcmi	r0, r0, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	0800426c 	stmdaeq	r0, {r2, r3, r5, r6, r9, lr}
  9c:	00000480 	andeq	r0, r0, r0, lsl #9
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	4b7b0002 	blmi	1ec00bc <__Stack_Size+0x1ebfcbc>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	080046ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, lr}
  bc:	00000256 	andeq	r0, r0, r6, asr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	52c20002 	sbcpl	r0, r2, #2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
  dc:	00000314 	andeq	r0, r0, r4, lsl r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	5c2a0002 	stcpl	0, cr0, [sl], #-8
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	5ef00002 	cdppl	0, 15, cr0, cr0, cr2, {0}
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
 11c:	0000033c 	andeq	r0, r0, ip, lsr r3
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	67610002 	strbvs	r0, [r1, -r2]!
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	696c0002 	stmdbvs	ip!, {r1}^
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
 15c:	00000a44 	andeq	r0, r0, r4, asr #20
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	88ae0002 	stmiahi	lr!, {r1}
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08005b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, lr}
 17c:	00000342 	andeq	r0, r0, r2, asr #6
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	92da0002 	sbcsls	r0, sl, #2
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08005e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, lr}
 19c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	933f0002 	teqls	pc, #2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000332c 	andeq	r3, r0, ip, lsr #6
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000850 	andeq	r0, r0, r0, asr r8
      10:	0003e801 	andeq	lr, r3, r1, lsl #16
      14:	0000fa00 	andeq	pc, r0, r0, lsl #20
      18:	00005800 	andeq	r5, r0, r0, lsl #16
	...
      24:	33730200 	cmncc	r3, #0, 4
      28:	17020032 	smladxne	r2, r2, r0, r0
      2c:	00000030 	andeq	r0, r0, r0, lsr r0
      30:	d0050403 	andle	r0, r5, r3, lsl #8
      34:	03000009 	movweq	r0, #9
      38:	09940502 	ldmibeq	r4, {r1, r8, sl}
      3c:	01030000 	mrseq	r0, (UNDEF: 3)
      40:	000b6506 	andeq	r6, fp, r6, lsl #10
      44:	33750200 	cmncc	r5, #0, 4
      48:	27020032 	smladxcs	r2, r2, r0, r0
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	07070403 	streq	r0, [r7, -r3, lsl #8]
      54:	0200000b 	andeq	r0, r0, #11
      58:	00363175 	eorseq	r3, r6, r5, ror r1
      5c:	00622802 	rsbeq	r2, r2, r2, lsl #16
      60:	02030000 	andeq	r0, r3, #0
      64:	000d2707 	andeq	r2, sp, r7, lsl #14
      68:	38750200 	ldmdacc	r5!, {r9}^
      6c:	73290200 			; <UNDEFINED> instruction: 0x73290200
      70:	03000000 	movweq	r0, #0
      74:	0b630801 	bleq	18c2080 <__Stack_Size+0x18c1c80>
      78:	ec040000 	stc	0, cr0, [r4], {-0}
      7c:	02000004 	andeq	r0, r0, #4
      80:	0000852f 	andeq	r8, r0, pc, lsr #10
      84:	00500500 	subseq	r0, r0, r0, lsl #10
      88:	47040000 	strmi	r0, [r4, -r0]
      8c:	02000003 	andeq	r0, r0, #3
      90:	00009530 	andeq	r9, r0, r0, lsr r5
      94:	00620500 	rsbeq	r0, r2, r0, lsl #10
      98:	01060000 	mrseq	r0, (UNDEF: 6)
      9c:	00af3902 	adceq	r3, pc, r2, lsl #18
      a0:	6d070000 	stcvs	0, cr0, [r7, #-0]
      a4:	00000019 	andeq	r0, r0, r9, lsl r0
      a8:	54455308 	strbpl	r5, [r5], #-776	; 0x308
      ac:	04000100 	streq	r0, [r0], #-256	; 0x100
      b0:	000008f3 	strdeq	r0, [r0], -r3
      b4:	009a3902 	addseq	r3, sl, r2, lsl #18
      b8:	f5040000 			; <UNDEFINED> instruction: 0xf5040000
      bc:	02000020 	andeq	r0, r0, #32
      c0:	00009a39 	andeq	r9, r0, r9, lsr sl
      c4:	02010600 	andeq	r0, r1, #0, 12
      c8:	0000da3b 	andeq	sp, r0, fp, lsr sl
      cc:	05f10700 	ldrbeq	r0, [r1, #1792]!	; 0x700
      d0:	07000000 	streq	r0, [r0, -r0]
      d4:	00000ae0 	andeq	r0, r0, r0, ror #21
      d8:	14040001 	strne	r0, [r4], #-1
      dc:	02000001 	andeq	r0, r0, #1
      e0:	0000c53b 	andeq	ip, r0, fp, lsr r5
      e4:	02010600 	andeq	r0, r1, #0, 12
      e8:	0000fa3e 	andeq	pc, r0, lr, lsr sl	; <UNPREDICTABLE>
      ec:	00110700 	andseq	r0, r1, r0, lsl #14
      f0:	07000000 	streq	r0, [r0, -r0]
      f4:	000005d6 	ldrdeq	r0, [r0], -r6
      f8:	4c040001 	stcmi	0, cr0, [r4], {1}
      fc:	02000001 	andeq	r0, r0, #1
     100:	0000e53e 	andeq	lr, r0, lr, lsr r5
     104:	07040300 	streq	r0, [r4, -r0, lsl #6]
     108:	00000afe 	strdeq	r0, [r0], -lr
     10c:	4e031c09 	cdpmi	12, 0, cr1, cr3, cr9, {0}
     110:	00017101 	andeq	r7, r1, r1, lsl #2
     114:	52430a00 	subpl	r0, r3, #0, 20
     118:	5003004c 	andpl	r0, r3, ip, asr #32
     11c:	00007a01 	andeq	r7, r0, r1, lsl #20
     120:	430a0000 	movwmi	r0, #40960	; 0xa000
     124:	03004852 	movweq	r4, #2130	; 0x852
     128:	007a0151 	rsbseq	r0, sl, r1, asr r1
     12c:	0a040000 	beq	100134 <__Stack_Size+0xffd34>
     130:	00524449 	subseq	r4, r2, r9, asr #8
     134:	7a015203 	bvc	54948 <__Stack_Size+0x54548>
     138:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     13c:	52444f0a 	subpl	r4, r4, #10, 30	; 0x28
     140:	01530300 	cmpeq	r3, r0, lsl #6
     144:	0000007a 	andeq	r0, r0, sl, ror r0
     148:	00760b0c 	rsbseq	r0, r6, ip, lsl #22
     14c:	54030000 	strpl	r0, [r3], #-0
     150:	00007a01 	andeq	r7, r0, r1, lsl #20
     154:	420a1000 	andmi	r1, sl, #0
     158:	03005252 	movweq	r5, #594	; 0x252
     15c:	007a0155 	rsbseq	r0, sl, r5, asr r1
     160:	0b140000 	bleq	500168 <__Stack_Size+0x4ffd68>
     164:	00000e0f 	andeq	r0, r0, pc, lsl #28
     168:	7a015603 	bvc	5597c <__Stack_Size+0x5557c>
     16c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     170:	0a840c00 	beq	fe103178 <SCS_BASE+0x1e0f5178>
     174:	57030000 	strpl	r0, [r3, -r0]
     178:	00010c01 	andeq	r0, r1, r1, lsl #24
     17c:	03500900 	cmpeq	r0, #0, 18
     180:	038e020b 	orreq	r0, lr, #-1342177280	; 0xb0000000
     184:	430a0000 	movwmi	r0, #40960	; 0xa000
     188:	03003152 	movweq	r3, #338	; 0x152
     18c:	008a020d 	addeq	r0, sl, sp, lsl #4
     190:	0b000000 	bleq	198 <_Minimum_Stack_Size+0x98>
     194:	0000094e 	andeq	r0, r0, lr, asr #18
     198:	57020e03 	strpl	r0, [r2, -r3, lsl #28]
     19c:	02000000 	andeq	r0, r0, #0
     1a0:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
     1a4:	020f0300 	andeq	r0, pc, #0, 6
     1a8:	0000008a 	andeq	r0, r0, sl, lsl #1
     1ac:	09580b04 	ldmdbeq	r8, {r2, r8, r9, fp}^
     1b0:	10030000 	andne	r0, r3, r0
     1b4:	00005702 	andeq	r5, r0, r2, lsl #14
     1b8:	890b0600 	stmdbhi	fp, {r9, sl}
     1bc:	03000006 	movweq	r0, #6
     1c0:	008a0211 	addeq	r0, sl, r1, lsl r2
     1c4:	0b080000 	bleq	2001cc <__Stack_Size+0x1ffdcc>
     1c8:	00000962 	andeq	r0, r0, r2, ror #18
     1cc:	57021203 	strpl	r1, [r2, -r3, lsl #4]
     1d0:	0a000000 	beq	1d8 <_Minimum_Stack_Size+0xd8>
     1d4:	00051b0b 	andeq	r1, r5, fp, lsl #22
     1d8:	02130300 	andseq	r0, r3, #0, 6
     1dc:	0000008a 	andeq	r0, r0, sl, lsl #1
     1e0:	096c0b0c 	stmdbeq	ip!, {r2, r3, r8, r9, fp}^
     1e4:	14030000 	strne	r0, [r3], #-0
     1e8:	00005702 	andeq	r5, r0, r2, lsl #14
     1ec:	530a0e00 	movwpl	r0, #44544	; 0xae00
     1f0:	15030052 	strne	r0, [r3, #-82]	; 0x52
     1f4:	00008a02 	andeq	r8, r0, r2, lsl #20
     1f8:	760b1000 	strvc	r1, [fp], -r0
     1fc:	03000009 	movweq	r0, #9
     200:	00570216 	subseq	r0, r7, r6, lsl r2
     204:	0a120000 	beq	48020c <__Stack_Size+0x47fe0c>
     208:	00524745 	subseq	r4, r2, r5, asr #14
     20c:	8a021703 	bhi	85e20 <__Stack_Size+0x85a20>
     210:	14000000 	strne	r0, [r0], #-0
     214:	0009800b 	andeq	r8, r9, fp
     218:	02180300 	andseq	r0, r8, #0, 6
     21c:	00000057 	andeq	r0, r0, r7, asr r0
     220:	039f0b16 	orrseq	r0, pc, #22528	; 0x5800
     224:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     228:	00008a02 	andeq	r8, r0, r2, lsl #20
     22c:	8a0b1800 	bhi	2c6234 <__Stack_Size+0x2c5e34>
     230:	03000009 	movweq	r0, #9
     234:	0057021a 	subseq	r0, r7, sl, lsl r2
     238:	0b1a0000 	bleq	680240 <__Stack_Size+0x67fe40>
     23c:	000003a5 	andeq	r0, r0, r5, lsr #7
     240:	8a021b03 	bhi	86e54 <__Stack_Size+0x86a54>
     244:	1c000000 	stcne	0, cr0, [r0], {-0}
     248:	000dcb0b 	andeq	ip, sp, fp, lsl #22
     24c:	021c0300 	andseq	r0, ip, #0, 6
     250:	00000057 	andeq	r0, r0, r7, asr r0
     254:	05bc0b1e 	ldreq	r0, [ip, #2846]!	; 0xb1e
     258:	1d030000 	stcne	0, cr0, [r3, #-0]
     25c:	00008a02 	andeq	r8, r0, r2, lsl #20
     260:	9e0b2000 	cdpls	0, 0, cr2, cr11, cr0, {0}
     264:	03000009 	movweq	r0, #9
     268:	0057021e 	subseq	r0, r7, lr, lsl r2
     26c:	0a220000 	beq	880274 <__Stack_Size+0x87fe74>
     270:	00544e43 	subseq	r4, r4, r3, asr #28
     274:	8a021f03 	bhi	87e88 <__Stack_Size+0x87a88>
     278:	24000000 	strcs	r0, [r0], #-0
     27c:	0009a80b 	andeq	sl, r9, fp, lsl #16
     280:	02200300 	eoreq	r0, r0, #0, 6
     284:	00000057 	andeq	r0, r0, r7, asr r0
     288:	53500a26 	cmppl	r0, #155648	; 0x26000
     28c:	21030043 	tstcs	r3, r3, asr #32
     290:	00008a02 	andeq	r8, r0, r2, lsl #20
     294:	df0b2800 	svcle	0x000b2800
     298:	0300000b 	movweq	r0, #11
     29c:	00570222 	subseq	r0, r7, r2, lsr #4
     2a0:	0a2a0000 	beq	a802a8 <__Stack_Size+0xa7fea8>
     2a4:	00525241 	subseq	r5, r2, r1, asr #4
     2a8:	8a022303 	bhi	88ebc <__Stack_Size+0x88abc>
     2ac:	2c000000 	stccs	0, cr0, [r0], {-0}
     2b0:	000bea0b 	andeq	lr, fp, fp, lsl #20
     2b4:	02240300 	eoreq	r0, r4, #0, 6
     2b8:	00000057 	andeq	r0, r0, r7, asr r0
     2bc:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
     2c0:	25030052 	strcs	r0, [r3, #-82]	; 0x52
     2c4:	00008a02 	andeq	r8, r0, r2, lsl #20
     2c8:	f50b3000 			; <UNDEFINED> instruction: 0xf50b3000
     2cc:	0300000b 	movweq	r0, #11
     2d0:	00570226 	subseq	r0, r7, r6, lsr #4
     2d4:	0b320000 	bleq	c802dc <__Stack_Size+0xc7fedc>
     2d8:	0000038b 	andeq	r0, r0, fp, lsl #7
     2dc:	8a022703 	bhi	89ef0 <__Stack_Size+0x89af0>
     2e0:	34000000 	strcc	r0, [r0], #-0
     2e4:	000c000b 	andeq	r0, ip, fp
     2e8:	02280300 	eoreq	r0, r8, #0, 6
     2ec:	00000057 	andeq	r0, r0, r7, asr r0
     2f0:	03900b36 	orrseq	r0, r0, #55296	; 0xd800
     2f4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     2f8:	00008a02 	andeq	r8, r0, r2, lsl #20
     2fc:	0b0b3800 	bleq	2ce304 <__Stack_Size+0x2cdf04>
     300:	0300000c 	movweq	r0, #12
     304:	0057022a 	subseq	r0, r7, sl, lsr #4
     308:	0b3a0000 	bleq	e80310 <__Stack_Size+0xe7ff10>
     30c:	00000395 	muleq	r0, r5, r3
     310:	8a022b03 	bhi	8af24 <__Stack_Size+0x8ab24>
     314:	3c000000 	stccc	0, cr0, [r0], {-0}
     318:	000c160b 	andeq	r1, ip, fp, lsl #12
     31c:	022c0300 	eoreq	r0, ip, #0, 6
     320:	00000057 	andeq	r0, r0, r7, asr r0
     324:	039a0b3e 	orrseq	r0, sl, #63488	; 0xf800
     328:	2d030000 	stccs	0, cr0, [r3, #-0]
     32c:	00008a02 	andeq	r8, r0, r2, lsl #20
     330:	210b4000 	mrscs	r4, (UNDEF: 11)
     334:	0300000c 	movweq	r0, #12
     338:	0057022e 	subseq	r0, r7, lr, lsr #4
     33c:	0b420000 	bleq	1080344 <__Stack_Size+0x107ff44>
     340:	0000033c 	andeq	r0, r0, ip, lsr r3
     344:	8a022f03 	bhi	8bf58 <__Stack_Size+0x8bb58>
     348:	44000000 	strmi	r0, [r0], #-0
     34c:	000c2c0b 	andeq	r2, ip, fp, lsl #24
     350:	02300300 	eorseq	r0, r0, #0, 6
     354:	00000057 	andeq	r0, r0, r7, asr r0
     358:	43440a46 	movtmi	r0, #19014	; 0x4a46
     35c:	31030052 	qaddcc	r0, r2, r3
     360:	00008a02 	andeq	r8, r0, r2, lsl #20
     364:	370b4800 	strcc	r4, [fp, -r0, lsl #16]
     368:	0300000c 	movweq	r0, #12
     36c:	00570232 	subseq	r0, r7, r2, lsr r2
     370:	0b4a0000 	bleq	1280378 <__Stack_Size+0x127ff78>
     374:	000009d9 	ldrdeq	r0, [r0], -r9
     378:	8a023303 	bhi	8cf8c <__Stack_Size+0x8cb8c>
     37c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     380:	000c420b 	andeq	r4, ip, fp, lsl #4
     384:	02340300 	eorseq	r0, r4, #0, 6
     388:	00000057 	andeq	r0, r0, r7, asr r0
     38c:	d30c004e 	movwle	r0, #49230	; 0xc04e
     390:	03000002 	movweq	r0, #2
     394:	017d0235 	cmneq	sp, r5, lsr r2
     398:	1c090000 	stcne	0, cr0, [r9], {-0}
     39c:	58023803 	stmdapl	r2, {r0, r1, fp, ip, sp}
     3a0:	0a000004 	beq	3b8 <_Minimum_Stack_Size+0x2b8>
     3a4:	03005253 	movweq	r5, #595	; 0x253
     3a8:	008a023a 	addeq	r0, sl, sl, lsr r2
     3ac:	0b000000 	bleq	3b4 <_Minimum_Stack_Size+0x2b4>
     3b0:	0000094e 	andeq	r0, r0, lr, asr #18
     3b4:	57023b03 	strpl	r3, [r2, -r3, lsl #22]
     3b8:	02000000 	andeq	r0, r0, #0
     3bc:	0052440a 	subseq	r4, r2, sl, lsl #8
     3c0:	8a023c03 	bhi	8f3d4 <__Stack_Size+0x8efd4>
     3c4:	04000000 	streq	r0, [r0], #-0
     3c8:	0009580b 	andeq	r5, r9, fp, lsl #16
     3cc:	023d0300 	eorseq	r0, sp, #0, 6
     3d0:	00000057 	andeq	r0, r0, r7, asr r0
     3d4:	52420a06 	subpl	r0, r2, #24576	; 0x6000
     3d8:	3e030052 	mcrcc	0, 0, r0, cr3, cr2, {2}
     3dc:	00008a02 	andeq	r8, r0, r2, lsl #20
     3e0:	620b0800 	andvs	r0, fp, #0, 16
     3e4:	03000009 	movweq	r0, #9
     3e8:	0057023f 	subseq	r0, r7, pc, lsr r2
     3ec:	0a0a0000 	beq	2803f4 <__Stack_Size+0x27fff4>
     3f0:	00315243 	eorseq	r5, r1, r3, asr #4
     3f4:	8a024003 	bhi	90408 <__Stack_Size+0x90008>
     3f8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3fc:	00096c0b 	andeq	r6, r9, fp, lsl #24
     400:	02410300 	subeq	r0, r1, #0, 6
     404:	00000057 	andeq	r0, r0, r7, asr r0
     408:	52430a0e 	subpl	r0, r3, #57344	; 0xe000
     40c:	42030032 	andmi	r0, r3, #50	; 0x32
     410:	00008a02 	andeq	r8, r0, r2, lsl #20
     414:	760b1000 	strvc	r1, [fp], -r0
     418:	03000009 	movweq	r0, #9
     41c:	00570243 	subseq	r0, r7, r3, asr #4
     420:	0a120000 	beq	480428 <__Stack_Size+0x480028>
     424:	00335243 	eorseq	r5, r3, r3, asr #4
     428:	8a024403 	bhi	9143c <__Stack_Size+0x9103c>
     42c:	14000000 	strne	r0, [r0], #-0
     430:	0009800b 	andeq	r8, r9, fp
     434:	02450300 	subeq	r0, r5, #0, 6
     438:	00000057 	andeq	r0, r0, r7, asr r0
     43c:	02ae0b16 	adceq	r0, lr, #22528	; 0x5800
     440:	46030000 	strmi	r0, [r3], -r0
     444:	00008a02 	andeq	r8, r0, r2, lsl #20
     448:	8a0b1800 	bhi	2c6450 <__Stack_Size+0x2c6050>
     44c:	03000009 	movweq	r0, #9
     450:	00570247 	subseq	r0, r7, r7, asr #4
     454:	001a0000 	andseq	r0, sl, r0
     458:	00053d0c 	andeq	r3, r5, ip, lsl #26
     45c:	02480300 	subeq	r0, r8, #0, 6
     460:	0000039a 	muleq	r0, sl, r3
     464:	23040106 	movwcs	r0, #16646	; 0x4106
     468:	0000047f 	andeq	r0, r0, pc, ror r4
     46c:	0003ab07 	andeq	sl, r3, r7, lsl #22
     470:	91070100 	mrsls	r0, (UNDEF: 23)
     474:	02000002 	andeq	r0, r0, #2
     478:	000b8c07 	andeq	r8, fp, r7, lsl #24
     47c:	04000300 	streq	r0, [r0], #-768	; 0x300
     480:	000008fe 	strdeq	r0, [r0], -lr
     484:	04642704 	strbteq	r2, [r4], #-1796	; 0x704
     488:	01060000 	mrseq	r0, (UNDEF: 6)
     48c:	04c42e04 	strbeq	r2, [r4], #3588	; 0xe04
     490:	1b070000 	blne	1c0498 <__Stack_Size+0x1c0098>
     494:	00000009 	andeq	r0, r0, r9
     498:	000db507 	andeq	fp, sp, r7, lsl #10
     49c:	6e070400 	cfcpysvs	mvf0, mvf7
     4a0:	28000004 	stmdacs	r0, {r2}
     4a4:	00049007 	andeq	r9, r4, r7
     4a8:	0700c800 	streq	ip, [r0, -r0, lsl #16]
     4ac:	000004c4 	andeq	r0, r0, r4, asr #9
     4b0:	00000714 	andeq	r0, r0, r4, lsl r7
     4b4:	07100000 	ldreq	r0, [r0, -r0]
     4b8:	00000802 	andeq	r0, r0, r2, lsl #16
     4bc:	09c0071c 	stmibeq	r0, {r2, r3, r4, r8, r9, sl}^
     4c0:	00180000 	andseq	r0, r8, r0
     4c4:	000aa004 	andeq	sl, sl, r4
     4c8:	8a360400 	bhi	d814d0 <__Stack_Size+0xd810d0>
     4cc:	0d000004 	stceq	0, cr0, [r0, #-16]
     4d0:	fc3e0404 	ldc2	4, cr0, [lr], #-16
     4d4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4d8:	000000d6 	ldrdeq	r0, [r0], -r6
     4dc:	00574004 	subseq	r4, r7, r4
     4e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4e4:	000009de 	ldrdeq	r0, [r0], -lr
     4e8:	047f4104 	ldrbteq	r4, [pc], #-260	; 4f0 <__Stack_Size+0xf0>
     4ec:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     4f0:	000000bd 	strheq	r0, [r0], -sp
     4f4:	04c44204 	strbeq	r4, [r4], #516	; 0x204
     4f8:	00030000 	andeq	r0, r3, r0
     4fc:	000b5204 	andeq	r5, fp, r4, lsl #4
     500:	cf430400 	svcgt	0x00430400
     504:	0d000004 	stceq	0, cr0, [r0, #-16]
     508:	401a0504 	andsmi	r0, sl, r4, lsl #10
     50c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     510:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     514:	00691c05 	rsbeq	r1, r9, r5, lsl #24
     518:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     51c:	00000d84 	andeq	r0, r0, r4, lsl #27
     520:	00691d05 	rsbeq	r1, r9, r5, lsl #26
     524:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     528:	00000c80 	andeq	r0, r0, r0, lsl #25
     52c:	00691e05 	rsbeq	r1, r9, r5, lsl #28
     530:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     534:	00000508 	andeq	r0, r0, r8, lsl #10
     538:	00da1f05 	sbcseq	r1, sl, r5, lsl #30
     53c:	00030000 	andeq	r0, r3, r0
     540:	00035a04 	andeq	r5, r3, r4, lsl #20
     544:	07200500 	streq	r0, [r0, -r0, lsl #10]!
     548:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     54c:	901b060a 	andsls	r0, fp, sl, lsl #12
     550:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     554:	00000068 	andeq	r0, r0, r8, rrx
     558:	00571d06 	subseq	r1, r7, r6, lsl #26
     55c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     560:	00000645 	andeq	r0, r0, r5, asr #12
     564:	00571e06 	subseq	r1, r7, r6, lsl #28
     568:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     56c:	000007c0 	andeq	r0, r0, r0, asr #15
     570:	00571f06 	subseq	r1, r7, r6, lsl #30
     574:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     578:	00000308 	andeq	r0, r0, r8, lsl #6
     57c:	00572006 	subseq	r2, r7, r6
     580:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     584:	0000056b 	andeq	r0, r0, fp, ror #10
     588:	00692106 	rsbeq	r2, r9, r6, lsl #2
     58c:	00080000 	andeq	r0, r8, r0
     590:	000cd004 	andeq	sp, ip, r4
     594:	4b220600 	blmi	881d9c <__Stack_Size+0x88199c>
     598:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     59c:	04250610 	strteq	r0, [r5], #-1552	; 0x610
     5a0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     5a4:	00000910 	andeq	r0, r0, r0, lsl r9
     5a8:	00572706 	subseq	r2, r7, r6, lsl #14
     5ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     5b0:	0000031a 	andeq	r0, r0, sl, lsl r3
     5b4:	00572806 	subseq	r2, r7, r6, lsl #16
     5b8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     5bc:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
     5c0:	00572906 	subseq	r2, r7, r6, lsl #18
     5c4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     5c8:	000002ef 	andeq	r0, r0, pc, ror #5
     5cc:	00572a06 	subseq	r2, r7, r6, lsl #20
     5d0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     5d4:	000000c7 	andeq	r0, r0, r7, asr #1
     5d8:	00572b06 	subseq	r2, r7, r6, lsl #22
     5dc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     5e0:	00000588 	andeq	r0, r0, r8, lsl #11
     5e4:	00572c06 	subseq	r2, r7, r6, lsl #24
     5e8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     5ec:	00000212 	andeq	r0, r0, r2, lsl r2
     5f0:	00572d06 	subseq	r2, r7, r6, lsl #26
     5f4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     5f8:	0000072e 	andeq	r0, r0, lr, lsr #14
     5fc:	00572e06 	subseq	r2, r7, r6, lsl #28
     600:	000e0000 	andeq	r0, lr, r0
     604:	00009404 	andeq	r9, r0, r4, lsl #8
     608:	9b2f0600 	blls	bc1e10 <__Stack_Size+0xbc1a10>
     60c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     610:	601a0710 	andsvs	r0, sl, r0, lsl r7
     614:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     618:	000002f9 	strdeq	r0, [r0], -r9
     61c:	00451c07 	subeq	r1, r5, r7, lsl #24
     620:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     624:	00000199 	muleq	r0, r9, r1
     628:	00571d07 	subseq	r1, r7, r7, lsl #26
     62c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     630:	000001e9 	andeq	r0, r0, r9, ror #3
     634:	00571e07 	subseq	r1, r7, r7, lsl #28
     638:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     63c:	00000c9b 	muleq	r0, fp, ip
     640:	00571f07 	subseq	r1, r7, r7, lsl #30
     644:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     648:	00000655 	andeq	r0, r0, r5, asr r6
     64c:	00572007 	subseq	r2, r7, r7
     650:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     654:	0000069c 	muleq	r0, ip, r6
     658:	00572107 	subseq	r2, r7, r7, lsl #2
     65c:	000c0000 	andeq	r0, ip, r0
     660:	000c6e04 	andeq	r6, ip, r4, lsl #28
     664:	0f220700 	svceq	0x00220700
     668:	0f000006 	svceq	0x00000006
     66c:	0000061f 	andeq	r0, r0, pc, lsl r6
     670:	01031101 	tsteq	r3, r1, lsl #2
     674:	00000691 	muleq	r0, r1, r6
     678:	000b1910 	andeq	r1, fp, r0, lsl r9
     67c:	03110100 	tsteq	r1, #0, 2
     680:	00000691 	muleq	r0, r1, r6
     684:	00017610 	andeq	r7, r1, r0, lsl r6
     688:	03110100 	tsteq	r1, #0, 2
     68c:	00000698 	muleq	r0, r8, r6
     690:	05041100 	streq	r1, [r4, #-256]	; 0x100
     694:	00746e69 	rsbseq	r6, r4, r9, ror #28
     698:	00730412 	rsbseq	r0, r3, r2, lsl r4
     69c:	f80f0000 			; <UNDEFINED> instruction: 0xf80f0000
     6a0:	01000006 	tsteq	r0, r6
     6a4:	d0010307 	andle	r0, r1, r7, lsl #6
     6a8:	10000006 	andne	r0, r0, r6
     6ac:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     6b0:	d0030701 	andle	r0, r3, r1, lsl #14
     6b4:	10000006 	andne	r0, r0, r6
     6b8:	00000234 	andeq	r0, r0, r4, lsr r2
     6bc:	91030701 	tstls	r3, r1, lsl #14
     6c0:	10000006 	andne	r0, r0, r6
     6c4:	0000023f 	andeq	r0, r0, pc, lsr r2
     6c8:	91030701 	tstls	r3, r1, lsl #14
     6cc:	00000006 	andeq	r0, r0, r6
     6d0:	06910412 			; <UNDEFINED> instruction: 0x06910412
     6d4:	1c130000 	ldcne	0, cr0, [r3], {-0}
     6d8:	01000007 	tsteq	r0, r7
     6dc:	31340330 	teqcc	r4, r0, lsr r3
     6e0:	00840800 	addeq	r0, r4, r0, lsl #16
     6e4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6e8:	0000082e 	andeq	r0, r0, lr, lsr #16
     6ec:	000dfe14 	andeq	pc, sp, r4, lsl lr	; <UNPREDICTABLE>
     6f0:	03320100 	teqeq	r2, #0, 2
     6f4:	000000fa 	strdeq	r0, [r0], -sl
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	00313a15 	eorseq	r3, r1, r5, lsl sl
     700:	002e8108 	eoreq	r8, lr, r8, lsl #2
     704:	31421600 	cmpcc	r2, r0, lsl #12
     708:	2e880800 	cdpcs	8, 8, cr0, cr8, cr0, {0}
     70c:	071a0000 	ldreq	r0, [sl, -r0]
     710:	01170000 	tsteq	r7, r0
     714:	3c400350 	mcrrcc	3, 5, r0, r0, cr0
     718:	46150024 	ldrmi	r0, [r5], -r4, lsr #32
     71c:	99080031 	stmdbls	r8, {r0, r4, r5}
     720:	1600002e 	strne	r0, [r0], -lr, lsr #32
     724:	08003156 	stmdaeq	r0, {r1, r2, r4, r6, r8, ip, sp}
     728:	00002ea4 	andeq	r2, r0, r4, lsr #29
     72c:	0000073d 	andeq	r0, r0, sp, lsr r7
     730:	01510117 	cmpeq	r1, r7, lsl r1
     734:	50011731 	andpl	r1, r1, r1, lsr r7
     738:	40080a03 	andmi	r0, r8, r3, lsl #20
     73c:	315e1600 	cmpcc	lr, r0, lsl #12
     740:	2ebb0800 	cdpcs	8, 11, cr0, cr11, cr0, {0}
     744:	07590000 	ldrbeq	r0, [r9, -r0]
     748:	01170000 	tsteq	r7, r0
     74c:	17310151 			; <UNDEFINED> instruction: 0x17310151
     750:	0c055001 	stceq	0, cr5, [r5], {1}
     754:	00040001 	andeq	r0, r4, r1
     758:	31681800 	cmncc	r8, r0, lsl #16
     75c:	2ed20800 	cdpcs	8, 13, cr0, cr2, cr0, {0}
     760:	076c0000 	strbeq	r0, [ip, -r0]!
     764:	01170000 	tsteq	r7, r0
     768:	00310150 	eorseq	r0, r1, r0, asr r1
     76c:	00316e16 	eorseq	r6, r1, r6, lsl lr
     770:	002ee308 	eoreq	lr, lr, r8, lsl #6
     774:	00077f00 	andeq	r7, r7, r0, lsl #30
     778:	50011700 	andpl	r1, r1, r0, lsl #14
     77c:	16004001 	strne	r4, [r0], -r1
     780:	08003174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, sp}
     784:	00002ef4 	strdeq	r2, [r0], -r4
     788:	00000792 	muleq	r0, r2, r7
     78c:	01500117 	cmpeq	r0, r7, lsl r1
     790:	7a160032 	bvc	580860 <__Stack_Size+0x580460>
     794:	05080031 	streq	r0, [r8, #-49]	; 0x31
     798:	a500002f 	strge	r0, [r0, #-47]	; 0x2f
     79c:	17000007 	strne	r0, [r0, -r7]
     7a0:	30015001 	andcc	r5, r1, r1
     7a4:	31801600 	orrcc	r1, r0, r0, lsl #12
     7a8:	2f170800 	svccs	0x00170800
     7ac:	07b80000 	ldreq	r0, [r8, r0]!
     7b0:	01170000 	tsteq	r7, r0
     7b4:	00300150 	eorseq	r0, r0, r0, asr r1
     7b8:	00318816 	eorseq	r8, r1, r6, lsl r8
     7bc:	002f2908 	eoreq	r2, pc, r8, lsl #18
     7c0:	0007cd00 	andeq	ip, r7, r0, lsl #26
     7c4:	50011700 	andpl	r1, r1, r0, lsl #14
     7c8:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
     7cc:	31941600 	orrscc	r1, r4, r0, lsl #12
     7d0:	2f3b0800 	svccs	0x003b0800
     7d4:	07e90000 	strbeq	r0, [r9, r0]!
     7d8:	01170000 	tsteq	r7, r0
     7dc:	404c0351 	submi	r0, ip, r1, asr r3
     7e0:	50011724 	andpl	r1, r1, r4, lsr #14
     7e4:	243c4003 	ldrtcs	r4, [ip], #-3
     7e8:	319a1600 	orrscc	r1, sl, r0, lsl #12
     7ec:	2f520800 	svccs	0x00520800
     7f0:	07fd0000 	ldrbeq	r0, [sp, r0]!
     7f4:	01170000 	tsteq	r7, r0
     7f8:	00740250 	rsbseq	r0, r4, r0, asr r2
     7fc:	31a01600 	lslcc	r1, r0, #12
     800:	2f640800 	svccs	0x00640800
     804:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
     808:	01170000 	tsteq	r7, r0
     80c:	39080250 	stmdbcc	r8, {r4, r6, r9}
     810:	31aa1600 			; <UNDEFINED> instruction: 0x31aa1600
     814:	2f7a0800 	svccs	0x007a0800
     818:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
     81c:	01170000 	tsteq	r7, r0
     820:	00320150 	eorseq	r0, r2, r0, asr r1
     824:	0031ae15 	eorseq	sl, r1, r5, lsl lr
     828:	002f8c08 	eoreq	r8, pc, r8, lsl #24
     82c:	cc130000 	ldcgt	0, cr0, [r3], {-0}
     830:	0100000b 	tsteq	r0, fp
     834:	31b80373 			; <UNDEFINED> instruction: 0x31b80373
     838:	004e0800 	subeq	r0, lr, r0, lsl #16
     83c:	9c010000 	stcls	0, cr0, [r1], {-0}
     840:	000008a9 	andeq	r0, r0, r9, lsr #17
     844:	0005de19 	andeq	sp, r5, r9, lsl lr
     848:	03750100 	cmneq	r5, #0, 2
     84c:	00000540 	andeq	r0, r0, r0, asr #10
     850:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
     854:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
     858:	00002f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     85c:	0000086f 	andeq	r0, r0, pc, ror #16
     860:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
     864:	1730000a 	ldrne	r0, [r0, -sl]!
     868:	40035001 	andmi	r5, r3, r1
     86c:	16002447 	strne	r2, [r0], -r7, asr #8
     870:	080031ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip, sp}
     874:	00002faf 	andeq	r2, r0, pc, lsr #31
     878:	00000884 	andeq	r0, r0, r4, lsl #17
     87c:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
     880:	0005000a 	andeq	r0, r5, sl
     884:	0031ea16 	eorseq	lr, r1, r6, lsl sl
     888:	002fc008 	eoreq	ip, pc, r8
     88c:	00089800 	andeq	r9, r8, r0, lsl #16
     890:	50011700 	andpl	r1, r1, r0, lsl #14
     894:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     898:	0032021a 	eorseq	r0, r2, sl, lsl r2
     89c:	002fc008 	eoreq	ip, pc, r8
     8a0:	50011700 	andpl	r1, r1, r0, lsl #14
     8a4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     8a8:	0c4d1300 	mcrreq	3, 0, r1, sp, cr0
     8ac:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     8b0:	00320603 	eorseq	r0, r2, r3, lsl #12
     8b4:	00008608 	andeq	r8, r0, r8, lsl #12
     8b8:	a29c0100 	addsge	r0, ip, #0, 2
     8bc:	19000009 	stmdbne	r0, {r0, r3}
     8c0:	00000760 	andeq	r0, r0, r0, ror #14
     8c4:	fc039a01 	stc2	10, cr9, [r3], {1}
     8c8:	02000004 	andeq	r0, r0, #4
     8cc:	10166491 	mulsne	r6, r1, r4
     8d0:	d8080032 	stmdale	r8, {r1, r4, r5}
     8d4:	e200002f 	and	r0, r0, #47	; 0x2f
     8d8:	17000008 	strne	r0, [r0, -r8]
     8dc:	91025001 	tstls	r2, r1
     8e0:	2c160064 	ldccs	0, cr0, [r6], {100}	; 0x64
     8e4:	ef080032 	svc	0x00080032
     8e8:	fc00002f 	stc2	0, cr0, [r0], {47}	; 0x2f
     8ec:	17000008 	strne	r0, [r0, -r8]
     8f0:	91025101 	tstls	r2, r1, lsl #2
     8f4:	50011764 	andpl	r1, r1, r4, ror #14
     8f8:	00007402 	andeq	r7, r0, r2, lsl #8
     8fc:	00324216 	eorseq	r4, r2, r6, lsl r2
     900:	002fef08 	eoreq	lr, pc, r8, lsl #30
     904:	00091c00 	andeq	r1, r9, r0, lsl #24
     908:	51011700 	tstpl	r1, r0, lsl #14
     90c:	76009108 	strvc	r9, [r0], -r8, lsl #2
     910:	20082200 	andcs	r2, r8, r0, lsl #4
     914:	5001171c 	andpl	r1, r1, ip, lsl r7
     918:	00007402 	andeq	r7, r0, r2, lsl #8
     91c:	00325e16 	eorseq	r5, r2, r6, lsl lr
     920:	002fef08 	eoreq	lr, pc, r8, lsl #30
     924:	00093c00 	andeq	r3, r9, r0, lsl #24
     928:	51011700 	tstpl	r1, r0, lsl #14
     92c:	76009108 	strvc	r9, [r0], -r8, lsl #2
     930:	20082200 	andcs	r2, r8, r0, lsl #4
     934:	5001171c 	andpl	r1, r1, ip, lsl r7
     938:	00007402 	andeq	r7, r0, r2, lsl #8
     93c:	00326616 	eorseq	r6, r2, r6, lsl r6
     940:	00300b08 	eorseq	r0, r0, r8, lsl #22
     944:	00095500 	andeq	r5, r9, r0, lsl #10
     948:	51011700 	tstpl	r1, r0, lsl #14
     94c:	01173101 	tsteq	r7, r1, lsl #2
     950:	00760250 	rsbseq	r0, r6, r0, asr r2
     954:	326e1600 	rsbcc	r1, lr, #0, 12
     958:	300b0800 	andcc	r0, fp, r0, lsl #16
     95c:	09710000 	ldmdbeq	r1!, {}^	; <UNPREDICTABLE>
     960:	01170000 	tsteq	r7, r0
     964:	17310151 			; <UNDEFINED> instruction: 0x17310151
     968:	0c055001 	stceq	0, cr5, [r5], {1}
     96c:	00300400 	eorseq	r0, r0, r0, lsl #8
     970:	32761600 	rsbscc	r1, r6, #0, 12
     974:	30210800 	eorcc	r0, r1, r0, lsl #16
     978:	098b0000 	stmibeq	fp, {}	; <UNPREDICTABLE>
     97c:	01170000 	tsteq	r7, r0
     980:	00750251 	rsbseq	r0, r5, r1, asr r2
     984:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     988:	1a000074 	bne	b60 <__Stack_Size+0x760>
     98c:	0800327e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip, sp}
     990:	00003037 	andeq	r3, r0, r7, lsr r0
     994:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     998:	01172008 	tsteq	r7, r8
     99c:	00740250 	rsbseq	r0, r4, r0, asr r2
     9a0:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
     9a4:	0100000a 	tsteq	r0, sl
     9a8:	328c03e7 	addcc	r0, ip, #-1677721597	; 0x9c000003
     9ac:	000c0800 	andeq	r0, ip, r0, lsl #16
     9b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b4:	000009d1 	ldrdeq	r0, [r0], -r1
     9b8:	0032941b 	eorseq	r9, r2, fp, lsl r4
     9bc:	00304d08 	eorseq	r4, r0, r8, lsl #26
     9c0:	51011700 	tstpl	r1, r0, lsl #14
     9c4:	01173001 	tsteq	r7, r1
     9c8:	000c0550 	andeq	r0, ip, r0, asr r5
     9cc:	00400138 	subeq	r0, r0, r8, lsr r1
     9d0:	00851c00 	addeq	r1, r5, r0, lsl #24
     9d4:	ec010000 	stc	0, cr0, [r1], {-0}
     9d8:	00329803 	eorseq	r9, r2, r3, lsl #16
     9dc:	00001008 	andeq	r1, r0, r8
     9e0:	1d9c0100 	ldfnes	f0, [ip]
     9e4:	00000610 	andeq	r0, r0, r0, lsl r6
     9e8:	6903f101 	stmdbvs	r3, {r0, r8, ip, sp, lr, pc}
     9ec:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     9f0:	14080032 	strne	r0, [r8], #-50	; 0x32
     9f4:	01000000 	mrseq	r0, (UNDEF: 0)
     9f8:	04b8139c 	ldrteq	r1, [r8], #924	; 0x39c
     9fc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
     a00:	0032bc03 	eorseq	fp, r2, r3, lsl #24
     a04:	00004408 	andeq	r4, r0, r8, lsl #8
     a08:	c89c0100 	ldmgt	ip, {r8}
     a0c:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     a10:	0000016d 	andeq	r0, r0, sp, ror #2
     a14:	6903f901 	stmdbvs	r3, {r0, r8, fp, ip, sp, lr, pc}
     a18:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     a1c:	16000000 	strne	r0, [r0], -r0
     a20:	080032c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp}
     a24:	00003021 	andeq	r3, r0, r1, lsr #32
     a28:	00000a3c 	andeq	r0, r0, ip, lsr sl
     a2c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     a30:	01172008 	tsteq	r7, r8
     a34:	000c0550 	andeq	r0, ip, r0, asr r5
     a38:	0040010c 	subeq	r0, r0, ip, lsl #2
     a3c:	0032d016 	eorseq	sp, r2, r6, lsl r0
     a40:	00303708 	eorseq	r3, r0, r8, lsl #14
     a44:	000a5800 	andeq	r5, sl, r0, lsl #16
     a48:	51011700 	tstpl	r1, r0, lsl #14
     a4c:	01174001 	tsteq	r7, r1
     a50:	000c0550 	andeq	r0, ip, r0, asr r5
     a54:	0040010c 	subeq	r0, r0, ip, lsl #2
     a58:	0032d816 	eorseq	sp, r2, r6, lsl r8
     a5c:	00306908 	eorseq	r6, r0, r8, lsl #18
     a60:	000a7500 	andeq	r7, sl, r0, lsl #10
     a64:	51011700 	tstpl	r1, r0, lsl #14
     a68:	17007402 	strne	r7, [r0, -r2, lsl #8]
     a6c:	0c055001 	stceq	0, cr5, [r5], {1}
     a70:	40013800 	andmi	r3, r1, r0, lsl #16
     a74:	32e01600 	rsccc	r1, r0, #0, 12
     a78:	307f0800 	rsbscc	r0, pc, r0, lsl #16
     a7c:	0a920000 	beq	fe480a84 <SCS_BASE+0x1e472a84>
     a80:	01170000 	tsteq	r7, r0
     a84:	40080251 	andmi	r0, r8, r1, asr r2
     a88:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     a8c:	0138000c 	teqeq	r8, ip
     a90:	ec160040 	ldc	0, cr0, [r6], {64}	; 0x40
     a94:	21080032 	tstcs	r8, r2, lsr r0
     a98:	ae000030 	mcrge	0, 0, r0, cr0, cr0, {1}
     a9c:	1700000a 	strne	r0, [r0, -sl]
     aa0:	40015101 	andmi	r5, r1, r1, lsl #2
     aa4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     aa8:	010c000c 	tsteq	ip, ip
     aac:	f81b0040 			; <UNDEFINED> instruction: 0xf81b0040
     ab0:	37080032 	smladxcc	r8, r2, r0, r0
     ab4:	17000030 	smladxne	r0, r0, r0, r0
     ab8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     abc:	50011720 	andpl	r1, r1, r0, lsr #14
     ac0:	0c000c05 	stceq	12, cr0, [r0], {5}
     ac4:	00004001 	andeq	r4, r0, r1
     ac8:	000a021f 	andeq	r0, sl, pc, lsl r2
     acc:	04050100 	streq	r0, [r5], #-256	; 0x100
     ad0:	00000069 	andeq	r0, r0, r9, rrx
     ad4:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
     ad8:	00000020 	andeq	r0, r0, r0, lsr #32
     adc:	0af19c01 	beq	ffc67ae8 <SCS_BASE+0x1fc59ae8>
     ae0:	aa190000 	bge	640ae8 <__Stack_Size+0x6406e8>
     ae4:	01000007 	tsteq	r0, r7
     ae8:	00690407 	rsbeq	r0, r9, r7, lsl #8
     aec:	50010000 	andpl	r0, r1, r0
     af0:	03bc1300 			; <UNDEFINED> instruction: 0x03bc1300
     af4:	6b010000 	blvs	40afc <__Stack_Size+0x406fc>
     af8:	00332004 	eorseq	r2, r3, r4
     afc:	00001c08 	andeq	r1, r0, r8, lsl #24
     b00:	489c0100 	ldmmi	ip, {r8}
     b04:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
     b08:	0000016d 	andeq	r0, r0, sp, ror #2
     b0c:	69046b01 	stmdbvs	r4, {r0, r8, r9, fp, sp, lr}
     b10:	3f000000 	svccc	0x00000000
     b14:	16000000 	strne	r0, [r0], -r0
     b18:	0800332a 	stmdaeq	r0, {r1, r3, r5, r8, r9, ip, sp}
     b1c:	00003069 	andeq	r3, r0, r9, rrx
     b20:	00000b2e 	andeq	r0, r0, lr, lsr #22
     b24:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     b28:	0048000c 	subeq	r0, r8, ip
     b2c:	321a0040 	andscc	r0, sl, #64	; 0x40
     b30:	7f080033 	svcvc	0x00080033
     b34:	17000030 	smladxne	r0, r0, r0, r0
     b38:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     b3c:	50011740 	andpl	r1, r1, r0, asr #14
     b40:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
     b44:	00004000 	andeq	r4, r0, r0
     b48:	0002b313 	andeq	fp, r2, r3, lsl r3
     b4c:	04510100 	ldrbeq	r0, [r1], #-256	; 0x100
     b50:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
     b54:	00000012 	andeq	r0, r0, r2, lsl r0
     b58:	0b789c01 	bleq	1e27b64 <__Stack_Size+0x1e27764>
     b5c:	411e0000 	tstmi	lr, r0
     b60:	01000003 	tsteq	r0, r3
     b64:	0b780451 	bleq	1e01cb0 <__Stack_Size+0x1e018b0>
     b68:	00600000 	rsbeq	r0, r0, r0
     b6c:	4a150000 	bmi	540b74 <__Stack_Size+0x540774>
     b70:	f1080033 			; <UNDEFINED> instruction: 0xf1080033
     b74:	0000000a 	andeq	r0, r0, sl
     b78:	00690412 	rsbeq	r0, r9, r2, lsl r4
     b7c:	0c200000 	stceq	0, cr0, [r0], #-0
     b80:	01000004 	tsteq	r0, r4
     b84:	00334e9b 	mlaseq	r3, fp, lr, r4
     b88:	00002e08 	andeq	r2, r0, r8, lsl #28
     b8c:	0e9c0100 	fmleqe	f0, f4, f0
     b90:	2100000c 	tstcs	r0, ip
     b94:	01006469 	tsteq	r0, r9, ror #8
     b98:	0000739b 	muleq	r0, fp, r3
     b9c:	0000a300 	andeq	sl, r0, r0, lsl #6
     ba0:	07a32200 	streq	r2, [r3, r0, lsl #4]!
     ba4:	9d010000 	stcls	0, cr0, [r1, #-0]
     ba8:	00000691 	muleq	r0, r1, r6
     bac:	00335a16 	eorseq	r5, r3, r6, lsl sl
     bb0:	00309908 	eorseq	r9, r0, r8, lsl #18
     bb4:	000bca00 	andeq	ip, fp, r0, lsl #20
     bb8:	52011700 	andpl	r1, r1, #0, 14
     bbc:	01173001 	tsteq	r7, r1
     bc0:	17360151 			; <UNDEFINED> instruction: 0x17360151
     bc4:	74025001 	strvc	r5, [r2], #-1
     bc8:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
     bcc:	b4080033 	strlt	r0, [r8], #-51	; 0x33
     bd0:	16000030 			; <UNDEFINED> instruction: 0x16000030
     bd4:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     bd8:	00003099 	muleq	r0, r9, r0
     bdc:	00000bf1 	strdeq	r0, [r0], -r1
     be0:	01520117 	cmpeq	r2, r7, lsl r1
     be4:	51011730 	tstpl	r1, r0, lsr r7
     be8:	01173801 	tsteq	r7, r1, lsl #16
     bec:	00740250 	rsbseq	r0, r4, r0, asr r2
     bf0:	336c1500 	cmncc	ip, #0, 10
     bf4:	30b40800 	adcscc	r0, r4, r0, lsl #16
     bf8:	761b0000 	ldrvc	r0, [fp], -r0
     bfc:	48080033 	stmdami	r8, {r0, r1, r4, r5}
     c00:	1700000b 	strne	r0, [r0, -fp]
     c04:	03055001 	movweq	r5, #20481	; 0x5001
     c08:	080060b0 	stmdaeq	r0, {r4, r5, r7, sp, lr}
     c0c:	81200000 			; <UNDEFINED> instruction: 0x81200000
     c10:	0100000b 	tsteq	r0, fp
     c14:	00337ca6 	eorseq	r7, r3, r6, lsr #25
     c18:	00003008 	andeq	r3, r0, r8
     c1c:	a09c0100 	addsge	r0, ip, r0, lsl #2
     c20:	2100000c 	tstcs	r0, ip
     c24:	01006469 	tsteq	r0, r9, ror #8
     c28:	000073a6 	andeq	r7, r0, r6, lsr #7
     c2c:	0000c400 	andeq	ip, r0, r0, lsl #8
     c30:	07a32200 	streq	r2, [r3, r0, lsl #4]!
     c34:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
     c38:	00000691 	muleq	r0, r1, r6
     c3c:	00338816 	eorseq	r8, r3, r6, lsl r8
     c40:	00309908 	eorseq	r9, r0, r8, lsl #18
     c44:	000c5a00 	andeq	r5, ip, r0, lsl #20
     c48:	52011700 	andpl	r1, r1, #0, 14
     c4c:	01173001 	tsteq	r7, r1
     c50:	17360151 			; <UNDEFINED> instruction: 0x17360151
     c54:	74025001 	strvc	r5, [r2], #-1
     c58:	8c150000 	ldchi	0, cr0, [r5], {-0}
     c5c:	b4080033 	strlt	r0, [r8], #-51	; 0x33
     c60:	16000030 			; <UNDEFINED> instruction: 0x16000030
     c64:	08003398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, sp}
     c68:	00003099 	muleq	r0, r9, r0
     c6c:	00000c83 	andeq	r0, r0, r3, lsl #25
     c70:	03520117 	cmpeq	r2, #-1073741819	; 0xc0000005
     c74:	1703ff0a 	strne	pc, [r3, -sl, lsl #30]
     c78:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
     c7c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     c80:	15000074 	strne	r0, [r0, #-116]	; 0x74
     c84:	0800339c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, sp}
     c88:	000030b4 	strheq	r3, [r0], -r4
     c8c:	0033a61b 	eorseq	sl, r3, fp, lsl r6
     c90:	000b4808 	andeq	r4, fp, r8, lsl #16
     c94:	50011700 	andpl	r1, r1, r0, lsl #14
     c98:	60d10305 	sbcsvs	r0, r1, r5, lsl #6
     c9c:	00000800 	andeq	r0, r0, r0, lsl #16
     ca0:	00045e13 	andeq	r5, r4, r3, lsl lr
     ca4:	04160100 	ldreq	r0, [r6], #-256	; 0x100
     ca8:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     cac:	0000004c 	andeq	r0, r0, ip, asr #32
     cb0:	0cd09c01 	ldcleq	12, cr9, [r0], {1}
     cb4:	231e0000 	tstcs	lr, #0
     cb8:	01000014 	tsteq	r0, r4, lsl r0
     cbc:	06910416 			; <UNDEFINED> instruction: 0x06910416
     cc0:	00e50000 	rsceq	r0, r5, r0
     cc4:	da230000 	ble	8c0ccc <__Stack_Size+0x8c08cc>
     cc8:	48080033 	stmdami	r8, {r0, r1, r4, r5}
     ccc:	0000000b 	andeq	r0, r0, fp
     cd0:	000def13 	andeq	lr, sp, r3, lsl pc
     cd4:	04390100 	ldrteq	r0, [r9], #-256	; 0x100
     cd8:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     cdc:	00000094 	muleq	r0, r4, r0
     ce0:	0e0b9c01 	cdpeq	12, 0, cr9, cr11, cr1, {0}
     ce4:	00160000 	andseq	r0, r6, r0
     ce8:	bf080034 	svclt	0x00080034
     cec:	f9000030 			; <UNDEFINED> instruction: 0xf9000030
     cf0:	1700000c 	strne	r0, [r0, -ip]
     cf4:	31015001 	tstcc	r1, r1
     cf8:	340a1600 	strcc	r1, [sl], #-1536	; 0x600
     cfc:	0b480800 	bleq	1202d04 <__Stack_Size+0x1202904>
     d00:	0d100000 	ldceq	0, cr0, [r0, #-0]
     d04:	01170000 	tsteq	r7, r0
     d08:	24030550 	strcs	r0, [r3], #-1360	; 0x550
     d0c:	00080062 	andeq	r0, r8, r2, rrx
     d10:	00341016 	eorseq	r1, r4, r6, lsl r0
     d14:	0030bf08 	eorseq	fp, r0, r8, lsl #30
     d18:	000d2300 	andeq	r2, sp, r0, lsl #6
     d1c:	50011700 	andpl	r1, r1, r0, lsl #14
     d20:	16003201 	strne	r3, [r0], -r1, lsl #4
     d24:	0800341a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp}
     d28:	00000b48 	andeq	r0, r0, r8, asr #22
     d2c:	00000d3a 	andeq	r0, r0, sl, lsr sp
     d30:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     d34:	00623a03 	rsbeq	r3, r2, r3, lsl #20
     d38:	20160008 	andscs	r0, r6, r8
     d3c:	bf080034 	svclt	0x00080034
     d40:	4d000030 	stcmi	0, cr0, [r0, #-192]	; 0xffffff40
     d44:	1700000d 	strne	r0, [r0, -sp]
     d48:	34015001 	strcc	r5, [r1], #-1
     d4c:	342a1600 	strtcc	r1, [sl], #-1536	; 0x600
     d50:	0b480800 	bleq	1202d58 <__Stack_Size+0x1202958>
     d54:	0d640000 	stcleq	0, cr0, [r4, #-0]
     d58:	01170000 	tsteq	r7, r0
     d5c:	4e030550 	cfrshl32mi	mvfx3, mvfx0, r0
     d60:	00080062 	andeq	r0, r8, r2, rrx
     d64:	00343016 	eorseq	r3, r4, r6, lsl r0
     d68:	0030bf08 	eorseq	fp, r0, r8, lsl #30
     d6c:	000d7700 	andeq	r7, sp, r0, lsl #14
     d70:	50011700 	andpl	r1, r1, r0, lsl #14
     d74:	16003801 	strne	r3, [r0], -r1, lsl #16
     d78:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
     d7c:	00000b48 	andeq	r0, r0, r8, asr #22
     d80:	00000d8e 	andeq	r0, r0, lr, lsl #27
     d84:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     d88:	00625f03 	rsbeq	r5, r2, r3, lsl #30
     d8c:	40160008 	andsmi	r0, r6, r8
     d90:	bf080034 	svclt	0x00080034
     d94:	a1000030 	tstge	r0, r0, lsr r0
     d98:	1700000d 	strne	r0, [r0, -sp]
     d9c:	40015001 	andmi	r5, r1, r1
     da0:	344a1600 	strbcc	r1, [sl], #-1536	; 0x600
     da4:	0b480800 	bleq	1202dac <__Stack_Size+0x12029ac>
     da8:	0db80000 	ldceq	0, cr0, [r8]
     dac:	01170000 	tsteq	r7, r0
     db0:	74030550 	strvc	r0, [r3], #-1360	; 0x550
     db4:	00080062 	andeq	r0, r8, r2, rrx
     db8:	00345016 	eorseq	r5, r4, r6, lsl r0
     dbc:	0030bf08 	eorseq	fp, r0, r8, lsl #30
     dc0:	000dcc00 	andeq	ip, sp, r0, lsl #24
     dc4:	50011700 	andpl	r1, r1, r0, lsl #14
     dc8:	00200802 	eoreq	r0, r0, r2, lsl #16
     dcc:	00345a16 	eorseq	r5, r4, r6, lsl sl
     dd0:	000b4808 	andeq	r4, fp, r8, lsl #16
     dd4:	000de300 	andeq	lr, sp, r0, lsl #6
     dd8:	50011700 	andpl	r1, r1, r0, lsl #14
     ddc:	62850305 	addvs	r0, r5, #335544320	; 0x14000000
     de0:	16000800 	strne	r0, [r0], -r0, lsl #16
     de4:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
     de8:	000030bf 	strheq	r3, [r0], -pc	; <UNPREDICTABLE>
     dec:	00000df7 	strdeq	r0, [r0], -r7
     df0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     df4:	1b004008 	blne	10e1c <__Stack_Size+0x10a1c>
     df8:	0800346e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp}
     dfc:	00000b48 	andeq	r0, r0, r8, asr #22
     e00:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     e04:	00629603 	rsbeq	r9, r2, r3, lsl #12
     e08:	13000008 	movwne	r0, #8
     e0c:	00000846 	andeq	r0, r0, r6, asr #16
     e10:	8c045d01 	stchi	13, cr5, [r4], {1}
     e14:	2e080034 	mcrcs	0, 0, r0, cr8, cr4, {1}
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
     e1c:	000e549c 	muleq	lr, ip, r4
     e20:	036b1e00 	cmneq	fp, #0, 28
     e24:	5d010000 	stcpl	0, cr0, [r1, #-0]
     e28:	00006904 	andeq	r6, r0, r4, lsl #18
     e2c:	00011300 	andeq	r1, r1, r0, lsl #6
     e30:	0b711400 	bleq	1c45e38 <__Stack_Size+0x1c45a38>
     e34:	5f010000 	svcpl	0x00010000
     e38:	00006904 	andeq	r6, r0, r4, lsl #18
     e3c:	00013400 	andeq	r3, r1, r0, lsl #8
     e40:	34a61500 	strtcc	r1, [r6], #1280	; 0x500
     e44:	0af10800 	beq	ffc42e4c <SCS_BASE+0x1fc34e4c>
     e48:	ba230000 	blt	8c0e50 <__Stack_Size+0x8c0a50>
     e4c:	f1080034 			; <UNDEFINED> instruction: 0xf1080034
     e50:	0000000a 	andeq	r0, r0, sl
     e54:	0004d513 	andeq	sp, r4, r3, lsl r5
     e58:	04570100 	ldrbeq	r0, [r7], #-256	; 0x100
     e5c:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     e60:	00000014 	andeq	r0, r0, r4, lsl r0
     e64:	0e9a9c01 	cdpeq	12, 9, cr9, cr10, cr1, {0}
     e68:	de1e0000 	cdple	0, 1, cr0, cr14, cr0, {0}
     e6c:	01000003 	tsteq	r0, r3
     e70:	00570457 	subseq	r0, r7, r7, asr r4
     e74:	01520000 	cmpeq	r2, r0
     e78:	c4160000 	ldrgt	r0, [r6], #-0
     e7c:	0b080034 	bleq	200f54 <__Stack_Size+0x200b54>
     e80:	9000000e 	andls	r0, r0, lr
     e84:	1700000e 	strne	r0, [r0, -lr]
     e88:	74045001 	strvc	r5, [r4], #-1
     e8c:	00253800 	eoreq	r3, r5, r0, lsl #16
     e90:	0034ce23 	eorseq	ip, r4, r3, lsr #28
     e94:	000e0b08 	andeq	r0, lr, r8, lsl #22
     e98:	d5200000 	strle	r0, [r0, #-0]!
     e9c:	01000008 	tsteq	r0, r8
     ea0:	0034ceb4 	ldrhteq	ip, [r4], -r4
     ea4:	00003a08 	andeq	r3, r0, r8, lsl #20
     ea8:	5e9c0100 	fmlple	f0, f4, f0
     eac:	2100000f 	tstcs	r0, pc
     eb0:	01006469 	tsteq	r0, r9, ror #8
     eb4:	000073b4 			; <UNDEFINED> instruction: 0x000073b4
     eb8:	00017300 	andeq	r7, r1, r0, lsl #6
     ebc:	026d2400 	rsbeq	r2, sp, #0, 8
     ec0:	b4010000 	strlt	r0, [r1], #-0
     ec4:	00000691 	muleq	r0, r1, r6
     ec8:	00000194 	muleq	r0, r4, r1
     ecc:	00062825 	andeq	r2, r6, r5, lsr #16
     ed0:	91b50100 			; <UNDEFINED> instruction: 0x91b50100
     ed4:	b5000006 	strlt	r0, [r0, #-6]
     ed8:	25000001 	strcs	r0, [r0, #-1]
     edc:	000007a3 	andeq	r0, r0, r3, lsr #15
     ee0:	0691bb01 	ldreq	fp, [r1], r1, lsl #22
     ee4:	01e70000 	mvneq	r0, r0
     ee8:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
     eec:	99080034 	stmdbls	r8, {r2, r4, r5}
     ef0:	16000030 			; <UNDEFINED> instruction: 0x16000030
     ef4:	1700000f 	strne	r0, [r0, -pc]
     ef8:	0a145201 	beq	515704 <__Stack_Size+0x515304>
     efc:	01f30400 	mvnseq	r0, r0, lsl #8
     f00:	01f31c51 	mvnseq	r1, r1, asr ip
     f04:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
     f08:	01282d30 			; <UNDEFINED> instruction: 0x01282d30
     f0c:	17131600 	ldrne	r1, [r3, -r0, lsl #12]
     f10:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     f14:	e2150020 	ands	r0, r5, #32
     f18:	b4080034 	strlt	r0, [r8], #-52	; 0x34
     f1c:	16000030 			; <UNDEFINED> instruction: 0x16000030
     f20:	080034ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, sp}
     f24:	00000b48 	andeq	r0, r0, r8, asr #22
     f28:	00000f36 	andeq	r0, r0, r6, lsr pc
     f2c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     f30:	0062c603 	rsbeq	ip, r2, r3, lsl #12
     f34:	f4160008 			; <UNDEFINED> instruction: 0xf4160008
     f38:	54080034 	strpl	r0, [r8], #-52	; 0x34
     f3c:	4a00000e 	bmi	f7c <__Stack_Size+0xb7c>
     f40:	1700000f 	strne	r0, [r0, -pc]
     f44:	74025001 	strvc	r5, [r2], #-1
     f48:	fe1b0000 	cdp2	0, 1, cr0, cr11, cr0, {0}
     f4c:	48080034 	stmdami	r8, {r2, r4, r5}
     f50:	1700000b 	strne	r0, [r0, -fp]
     f54:	03055001 	movweq	r5, #20481	; 0x5001
     f58:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}
     f5c:	41130000 	tstmi	r3, r0
     f60:	01000009 	tsteq	r0, r9
     f64:	350802d1 	strcc	r0, [r8, #-721]	; 0x2d1
     f68:	00180800 	andseq	r0, r8, r0, lsl #16
     f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f70:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
     f74:	00026d1e 	andeq	r6, r2, lr, lsl sp
     f78:	02d10100 	sbcseq	r0, r1, #0, 2
     f7c:	00000691 	muleq	r0, r1, r6
     f80:	00000210 	andeq	r0, r0, r0, lsl r2
     f84:	00351416 	eorseq	r1, r5, r6, lsl r4
     f88:	000e9a08 	andeq	r9, lr, r8, lsl #20
     f8c:	000f9d00 	andeq	r9, pc, r0, lsl #26
     f90:	51011700 	tstpl	r1, r0, lsl #14
     f94:	17007402 	strne	r7, [r0, -r2, lsl #8]
     f98:	34015001 	strcc	r5, [r1], #-1
     f9c:	35201b00 	strcc	r1, [r0, #-2816]!	; 0xb00
     fa0:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
     fa4:	01170000 	tsteq	r7, r0
     fa8:	01f30451 	mvnseq	r0, r1, asr r4
     fac:	01171f50 	tsteq	r7, r0, asr pc
     fb0:	00330150 	eorseq	r0, r3, r0, asr r1
     fb4:	01f82600 	mvnseq	r2, r0, lsl #12
     fb8:	d6010000 	strle	r0, [r1], -r0
     fbc:	00352002 	eorseq	r2, r5, r2
     fc0:	00001a08 	andeq	r1, r0, r8, lsl #20
     fc4:	fc9c0100 	ldc2	1, cr0, [ip], {0}
     fc8:	1600000f 	strne	r0, [r0], -pc
     fcc:	0800352c 	stmdaeq	r0, {r2, r3, r5, r8, sl, ip, sp}
     fd0:	00000e9a 	muleq	r0, sl, lr
     fd4:	00000fe5 	andeq	r0, r0, r5, ror #31
     fd8:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
     fdc:	17015e0a 	strne	r5, [r1, -sl, lsl #28]
     fe0:	34015001 	strcc	r5, [r1], #-1
     fe4:	353a1b00 	ldrcc	r1, [sl, #-2816]!	; 0xb00
     fe8:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
     fec:	01170000 	tsteq	r7, r0
     ff0:	5e0a0351 	mcrpl	3, 0, r0, cr10, cr1, {2}
     ff4:	50011701 	andpl	r1, r1, r1, lsl #14
     ff8:	00003301 	andeq	r3, r0, r1, lsl #6
     ffc:	00007b26 	andeq	r7, r0, r6, lsr #22
    1000:	02db0100 	sbcseq	r0, fp, #0, 2
    1004:	0800353a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip, sp}
    1008:	0000001a 	andeq	r0, r0, sl, lsl r0
    100c:	10439c01 	subne	r9, r3, r1, lsl #24
    1010:	46160000 	ldrmi	r0, [r6], -r0
    1014:	9a080035 	bls	2010f0 <__Stack_Size+0x200cf0>
    1018:	2c00000e 	stccs	0, cr0, [r0], {14}
    101c:	17000010 	smladne	r0, r0, r0, r0
    1020:	0a035101 	beq	d542c <__Stack_Size+0xd502c>
    1024:	0117015e 	tsteq	r7, lr, asr r1
    1028:	00340150 	eorseq	r0, r4, r0, asr r1
    102c:	0035541b 	eorseq	r5, r5, fp, lsl r4
    1030:	000e9a08 	andeq	r9, lr, r8, lsl #20
    1034:	51011700 	tstpl	r1, r0, lsl #14
    1038:	015e0a03 	cmpeq	lr, r3, lsl #20
    103c:	01500117 	cmpeq	r0, r7, lsl r1
    1040:	20000033 	andcs	r0, r0, r3, lsr r0
    1044:	000007ef 	andeq	r0, r0, pc, ror #15
    1048:	3554c801 	ldrbcc	ip, [r4, #-2049]	; 0x801
    104c:	00480800 	subeq	r0, r8, r0, lsl #16
    1050:	9c010000 	stcls	0, cr0, [r1], {-0}
    1054:	00001124 	andeq	r1, r0, r4, lsr #2
    1058:	00646921 	rsbeq	r6, r4, r1, lsr #18
    105c:	0073c801 	rsbseq	ip, r3, r1, lsl #16
    1060:	024a0000 	subeq	r0, sl, #0
    1064:	e6240000 	strt	r0, [r4], -r0
    1068:	01000008 	tsteq	r0, r8
    106c:	000691c8 	andeq	r9, r6, r8, asr #3
    1070:	00026b00 	andeq	r6, r2, r0, lsl #22
    1074:	026d2400 	rsbeq	r2, sp, #0, 8
    1078:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    107c:	00000691 	muleq	r0, r1, r6
    1080:	00000297 	muleq	r0, r7, r2
    1084:	0006b625 	andeq	fp, r6, r5, lsr #12
    1088:	91ca0100 	bicls	r0, sl, r0, lsl #2
    108c:	b8000006 	stmdalt	r0, {r1, r2}
    1090:	25000002 	strcs	r0, [r0, #-2]
    1094:	000007a3 	andeq	r0, r0, r3, lsr #15
    1098:	0691d301 	ldreq	sp, [r1], r1, lsl #6
    109c:	02e90000 	rsceq	r0, r9, #0
    10a0:	60160000 	andsvs	r0, r6, r0
    10a4:	9a080035 	bls	201180 <__Stack_Size+0x200d80>
    10a8:	bd00000e 	stclt	0, cr0, [r0, #-56]	; 0xffffffc8
    10ac:	17000010 	smladne	r0, r0, r0, r0
    10b0:	f3035101 	vrhadd.u8	d5, d3, d1
    10b4:	01175201 	tsteq	r7, r1, lsl #4
    10b8:	00750250 	rsbseq	r0, r5, r0, asr r2
    10bc:	35721600 	ldrbcc	r1, [r2, #-1536]!	; 0x600
    10c0:	30990800 	addscc	r0, r9, r0, lsl #16
    10c4:	10dc0000 	sbcsne	r0, ip, r0
    10c8:	01170000 	tsteq	r7, r0
    10cc:	00740252 	rsbseq	r0, r4, r2, asr r2
    10d0:	01510117 	cmpeq	r1, r7, lsl r1
    10d4:	5001174e 	andpl	r1, r1, lr, asr #14
    10d8:	00007502 	andeq	r7, r0, r2, lsl #10
    10dc:	00357615 	eorseq	r7, r5, r5, lsl r6
    10e0:	0030b408 	eorseq	fp, r0, r8, lsl #8
    10e4:	35821600 	strcc	r1, [r2, #1536]	; 0x600
    10e8:	0b480800 	bleq	12030f0 <__Stack_Size+0x1202cf0>
    10ec:	10fc0000 	rscsne	r0, ip, r0
    10f0:	01170000 	tsteq	r7, r0
    10f4:	b4030550 	strlt	r0, [r3], #-1360	; 0x550
    10f8:	00080062 	andeq	r0, r8, r2, rrx
    10fc:	00358816 	eorseq	r8, r5, r6, lsl r8
    1100:	000e5408 	andeq	r5, lr, r8, lsl #8
    1104:	00111000 	andseq	r1, r1, r0
    1108:	50011700 	andpl	r1, r1, r0, lsl #14
    110c:	00007402 	andeq	r7, r0, r2, lsl #8
    1110:	0035921b 	eorseq	r9, r5, fp, lsl r2
    1114:	000b4808 	andeq	r4, fp, r8, lsl #16
    1118:	50011700 	andpl	r1, r1, r0, lsl #14
    111c:	62af0305 	adcvs	r0, pc, #335544320	; 0x14000000
    1120:	00000800 	andeq	r0, r0, r0, lsl #16
    1124:	00077f13 	andeq	r7, r7, r3, lsl pc
    1128:	02e80100 	rsceq	r0, r8, #0, 2
    112c:	0800359c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp}
    1130:	0000001e 	andeq	r0, r0, lr, lsl r0
    1134:	11979c01 	orrsne	r9, r7, r1, lsl #24
    1138:	341e0000 	ldrcc	r0, [lr], #-0
    113c:	01000002 	tsteq	r0, r2
    1140:	069102e8 	ldreq	r0, [r1], r8, ror #5
    1144:	03120000 	tsteq	r2, #0
    1148:	3f1e0000 	svccc	0x001e0000
    114c:	01000002 	tsteq	r0, r2
    1150:	069102e8 	ldreq	r0, [r1], r8, ror #5
    1154:	033e0000 	teqeq	lr, #0
    1158:	ac160000 	ldcge	0, cr0, [r6], {-0}
    115c:	43080035 	movwmi	r0, #32821	; 0x8035
    1160:	7a000010 	bvc	11a8 <__Stack_Size+0xda8>
    1164:	17000011 	smladne	r0, r1, r0, r0
    1168:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    116c:	51011764 	tstpl	r1, r4, ror #14
    1170:	5001f303 	andpl	pc, r1, r3, lsl #6
    1174:	01500117 	cmpeq	r0, r7, lsl r1
    1178:	ba1b0032 	blt	6c1248 <__Stack_Size+0x6c0e48>
    117c:	43080035 	movwmi	r0, #32821	; 0x8035
    1180:	17000010 	smladne	r0, r0, r0, r0
    1184:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1188:	51011764 	tstpl	r1, r4, ror #14
    118c:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
    1190:	01500117 	cmpeq	r0, r7, lsl r1
    1194:	27000031 	smladxcs	r0, r1, r0, r0
    1198:	0000069e 	muleq	r0, lr, r6
    119c:	080035ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip, sp}
    11a0:	00000012 	andeq	r0, r0, r2, lsl r0
    11a4:	11de9c01 	bicsne	r9, lr, r1, lsl #24
    11a8:	ab280000 	blge	a011b0 <__Stack_Size+0xa00db0>
    11ac:	75000006 	strvc	r0, [r0, #-6]
    11b0:	28000003 	stmdacs	r0, {r0, r1}
    11b4:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    11b8:	00000393 	muleq	r0, r3, r3
    11bc:	0006c328 	andeq	ip, r6, r8, lsr #6
    11c0:	0003bf00 	andeq	fp, r3, r0, lsl #30
    11c4:	35c61a00 	strbcc	r1, [r6, #2560]	; 0xa00
    11c8:	11240800 			; <UNDEFINED> instruction: 0x11240800
    11cc:	01170000 	tsteq	r7, r0
    11d0:	01f30351 	mvnseq	r0, r1, asr r3
    11d4:	50011752 	andpl	r1, r1, r2, asr r7
    11d8:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
    11dc:	de200000 	cdple	0, 2, cr0, cr0, cr0, {0}
    11e0:	01000008 	tsteq	r0, r8
    11e4:	0035ccdf 	ldrsbteq	ip, [r5], -pc
    11e8:	00003408 	andeq	r3, r0, r8, lsl #8
    11ec:	709c0100 	addsvc	r0, ip, r0, lsl #2
    11f0:	21000012 	tstcs	r0, r2, lsl r0
    11f4:	01006469 	tsteq	r0, r9, ror #8
    11f8:	000073df 	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
    11fc:	0003e000 	andeq	lr, r3, r0
    1200:	07a32500 	streq	r2, [r3, r0, lsl #10]!
    1204:	e1010000 	mrs	r0, (UNDEF: 1)
    1208:	00000691 	muleq	r0, r1, r6
    120c:	00000401 	andeq	r0, r0, r1, lsl #8
    1210:	0035d616 	eorseq	sp, r5, r6, lsl r6
    1214:	0030d408 	eorseq	sp, r0, r8, lsl #8
    1218:	00122800 	andseq	r2, r2, r0, lsl #16
    121c:	52011700 	andpl	r1, r1, #0, 14
    1220:	01173101 	tsteq	r7, r1, lsl #2
    1224:	00490151 	subeq	r0, r9, r1, asr r1
    1228:	0035da15 	eorseq	sp, r5, r5, lsl sl
    122c:	0030b408 	eorseq	fp, r0, r8, lsl #8
    1230:	35e61600 	strbcc	r1, [r6, #1536]!	; 0x600
    1234:	0b480800 	bleq	120323c <__Stack_Size+0x1202e3c>
    1238:	12480000 	subne	r0, r8, #0
    123c:	01170000 	tsteq	r7, r0
    1240:	b4030550 	strlt	r0, [r3], #-1360	; 0x550
    1244:	00080062 	andeq	r0, r8, r2, rrx
    1248:	0035ec16 	eorseq	lr, r5, r6, lsl ip
    124c:	000e5408 	andeq	r5, lr, r8, lsl #8
    1250:	00125c00 	andseq	r5, r2, r0, lsl #24
    1254:	50011700 	andpl	r1, r1, r0, lsl #14
    1258:	00007402 	andeq	r7, r0, r2, lsl #8
    125c:	0035f61b 	eorseq	pc, r5, fp, lsl r6	; <UNPREDICTABLE>
    1260:	000b4808 	andeq	r4, fp, r8, lsl #16
    1264:	50011700 	andpl	r1, r1, r0, lsl #14
    1268:	62af0305 	adcvs	r0, pc, #335544320	; 0x14000000
    126c:	00000800 	andeq	r0, r0, r0, lsl #16
    1270:	0005b320 	andeq	fp, r5, r0, lsr #6
    1274:	00ec0100 	rsceq	r0, ip, r0, lsl #2
    1278:	34080036 	strcc	r0, [r8], #-54	; 0x36
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
    1280:	0013029c 	mulseq	r3, ip, r2
    1284:	64692100 	strbtvs	r2, [r9], #-256	; 0x100
    1288:	73ec0100 	mvnvc	r0, #0, 2
    128c:	2a000000 	bcs	1294 <__Stack_Size+0xe94>
    1290:	25000004 	strcs	r0, [r0, #-4]
    1294:	000007a3 	andeq	r0, r0, r3, lsr #15
    1298:	0691ee01 	ldreq	lr, [r1], r1, lsl #28
    129c:	044b0000 	strbeq	r0, [fp], #-0
    12a0:	0a160000 	beq	5812a8 <__Stack_Size+0x580ea8>
    12a4:	d4080036 	strle	r0, [r8], #-54	; 0x36
    12a8:	ba000030 	blt	1370 <__Stack_Size+0xf70>
    12ac:	17000012 	smladne	r0, r2, r0, r0
    12b0:	30015201 	andcc	r5, r1, r1, lsl #4
    12b4:	01510117 	cmpeq	r1, r7, lsl r1
    12b8:	0e150049 	cdpeq	0, 1, cr0, cr5, cr9, {2}
    12bc:	b4080036 	strlt	r0, [r8], #-54	; 0x36
    12c0:	16000030 			; <UNDEFINED> instruction: 0x16000030
    12c4:	0800361a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, sp}
    12c8:	00000b48 	andeq	r0, r0, r8, asr #22
    12cc:	000012da 	ldrdeq	r1, [r0], -sl
    12d0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    12d4:	0062b403 	rsbeq	fp, r2, r3, lsl #8
    12d8:	20160008 	andscs	r0, r6, r8
    12dc:	54080036 	strpl	r0, [r8], #-54	; 0x36
    12e0:	ee00000e 	cdp	0, 0, cr0, cr0, cr14, {0}
    12e4:	17000012 	smladne	r0, r2, r0, r0
    12e8:	74025001 	strvc	r5, [r2], #-1
    12ec:	2a1b0000 	bcs	6c12f4 <__Stack_Size+0x6c0ef4>
    12f0:	48080036 	stmdami	r8, {r1, r2, r4, r5}
    12f4:	1700000b 	strne	r0, [r0, -fp]
    12f8:	03055001 	movweq	r5, #20481	; 0x5001
    12fc:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}
    1300:	7b200000 	blvc	801308 <__Stack_Size+0x800f08>
    1304:	0100000d 	tsteq	r0, sp
    1308:	003634fb 	ldrshteq	r3, [r6], -fp
    130c:	00003808 	andeq	r3, r0, r8, lsl #16
    1310:	9f9c0100 	svcls	0x009c0100
    1314:	21000013 	tstcs	r0, r3, lsl r0
    1318:	01006469 	tsteq	r0, r9, ror #8
    131c:	000073fb 	strdeq	r7, [r0], -fp
    1320:	00047400 	andeq	r7, r4, r0, lsl #8
    1324:	0a7b2400 	beq	1eca32c <__Stack_Size+0x1ec9f2c>
    1328:	fb010000 	blx	41332 <__Stack_Size+0x40f32>
    132c:	0000139f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    1330:	00000495 	muleq	r0, r5, r4
    1334:	0007a325 	andeq	sl, r7, r5, lsr #6
    1338:	91fd0100 	mvnsls	r0, r0, lsl #2
    133c:	c1000006 	tstgt	r0, r6
    1340:	16000004 	strne	r0, [r0], -r4
    1344:	0800363e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, ip, sp}
    1348:	000030ef 	andeq	r3, r0, pc, ror #1
    134c:	00001357 	andeq	r1, r0, r7, asr r3
    1350:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1354:	15002008 	strne	r2, [r0, #-8]
    1358:	08003644 	stmdaeq	r0, {r2, r6, r9, sl, ip, sp}
    135c:	000030b4 	strheq	r3, [r0], -r4
    1360:	00365016 	eorseq	r5, r6, r6, lsl r0
    1364:	000b4808 	andeq	r4, fp, r8, lsl #16
    1368:	00137700 	andseq	r7, r3, r0, lsl #14
    136c:	50011700 	andpl	r1, r1, r0, lsl #14
    1370:	62c50305 	sbcvs	r0, r5, #335544320	; 0x14000000
    1374:	16000800 	strne	r0, [r0], -r0, lsl #16
    1378:	08003656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, sp}
    137c:	00000e54 	andeq	r0, r0, r4, asr lr
    1380:	0000138b 	andeq	r1, r0, fp, lsl #7
    1384:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1388:	1b000074 	blne	1560 <__Stack_Size+0x1160>
    138c:	08003660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp}
    1390:	00000b48 	andeq	r0, r0, r8, asr #22
    1394:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1398:	0062af03 	rsbeq	sl, r2, r3, lsl #30
    139c:	12000008 	andne	r0, r0, #8
    13a0:	0013a504 	andseq	sl, r3, r4, lsl #10
    13a4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    13a8:	00000b0c 	andeq	r0, r0, ip, lsl #22
    13ac:	0004af13 	andeq	sl, r4, r3, lsl pc
    13b0:	010b0100 	mrseq	r0, (UNDEF: 27)
    13b4:	0800366c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, sp}
    13b8:	00000038 	andeq	r0, r0, r8, lsr r0
    13bc:	144d9c01 	strbne	r9, [sp], #-3073	; 0xc01
    13c0:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    13c4:	0b010064 	bleq	4155c <__Stack_Size+0x4115c>
    13c8:	00007301 	andeq	r7, r0, r1, lsl #6
    13cc:	0004ea00 	andeq	lr, r4, r0, lsl #20
    13d0:	01aa1e00 			; <UNDEFINED> instruction: 0x01aa1e00
    13d4:	0b010000 	bleq	413dc <__Stack_Size+0x40fdc>
    13d8:	00139f01 	andseq	r9, r3, r1, lsl #30
    13dc:	00050b00 	andeq	r0, r5, r0, lsl #22
    13e0:	07a31400 	streq	r1, [r3, r0, lsl #8]!
    13e4:	0d010000 	stceq	0, cr0, [r1, #-0]
    13e8:	00069101 	andeq	r9, r6, r1, lsl #2
    13ec:	00053700 	andeq	r3, r5, r0, lsl #14
    13f0:	36761600 	ldrbtcc	r1, [r6], -r0, lsl #12
    13f4:	30ef0800 	rsccc	r0, pc, r0, lsl #16
    13f8:	14050000 	strne	r0, [r5], #-0
    13fc:	01170000 	tsteq	r7, r0
    1400:	24080251 	strcs	r0, [r8], #-593	; 0x251
    1404:	367c1500 	ldrbtcc	r1, [ip], -r0, lsl #10
    1408:	30b40800 	adcscc	r0, r4, r0, lsl #16
    140c:	88160000 	ldmdahi	r6, {}	; <UNPREDICTABLE>
    1410:	48080036 	stmdami	r8, {r1, r2, r4, r5}
    1414:	2500000b 	strcs	r0, [r0, #-11]
    1418:	17000014 	smladne	r0, r4, r0, r0
    141c:	03055001 	movweq	r5, #20481	; 0x5001
    1420:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
    1424:	368e1600 	strcc	r1, [lr], r0, lsl #12
    1428:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    142c:	14390000 	ldrtne	r0, [r9], #-0
    1430:	01170000 	tsteq	r7, r0
    1434:	00740250 	rsbseq	r0, r4, r0, asr r2
    1438:	36981b00 	ldrcc	r1, [r8], r0, lsl #22
    143c:	0b480800 	bleq	1203444 <__Stack_Size+0x1203044>
    1440:	01170000 	tsteq	r7, r0
    1444:	af030550 	svcge	0x00030550
    1448:	00080062 	andeq	r0, r8, r2, rrx
    144c:	062e1300 	strteq	r1, [lr], -r0, lsl #6
    1450:	ed010000 	stc	0, cr0, [r1, #-0]
    1454:	0036a402 	eorseq	sl, r6, r2, lsl #8
    1458:	00003408 	andeq	r3, r0, r8, lsl #8
    145c:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    1460:	1e000014 	mcrne	0, 0, r0, cr0, cr4, {0}
    1464:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1468:	d002ed01 	andle	lr, r2, r1, lsl #26
    146c:	60000006 	andvs	r0, r0, r6
    1470:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1474:	00000234 	andeq	r0, r0, r4, lsr r2
    1478:	9102ed01 	tstls	r2, r1, lsl #26
    147c:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
    1480:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1484:	0000023f 	andeq	r0, r0, pc, lsr r2
    1488:	9102ed01 	tstls	r2, r1, lsl #26
    148c:	9c000006 	stcls	0, cr0, [r0], {6}
    1490:	19000005 	stmdbne	r0, {r0, r2}
    1494:	00000273 	andeq	r0, r0, r3, ror r2
    1498:	9102ee01 	tstls	r2, r1, lsl #28
    149c:	02000006 	andeq	r0, r0, #6
    14a0:	82196891 	andshi	r6, r9, #9502720	; 0x910000
    14a4:	01000002 	tsteq	r0, r2
    14a8:	069102ef 	ldreq	r0, [r1], pc, ror #5
    14ac:	91020000 	mrsls	r0, (UNDEF: 2)
    14b0:	62612a6c 	rsbvs	r2, r1, #108, 20	; 0x6c000
    14b4:	00080073 	andeq	r0, r8, r3, ror r0
    14b8:	00000691 	muleq	r0, r1, r6
    14bc:	000014c2 	andeq	r1, r0, r2, asr #9
    14c0:	b416002b 	ldrlt	r0, [r6], #-43	; 0x2b
    14c4:	ac080036 	stcge	0, cr0, [r8], {54}	; 0x36
    14c8:	db000013 	blle	151c <__Stack_Size+0x111c>
    14cc:	17000014 	smladne	r0, r4, r0, r0
    14d0:	91025101 	tstls	r2, r1, lsl #2
    14d4:	5001176c 	andpl	r1, r1, ip, ror #14
    14d8:	1a003101 	bne	d8e4 <__Stack_Size+0xd4e4>
    14dc:	080036bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip, sp}
    14e0:	000013ac 	andeq	r1, r0, ip, lsr #7
    14e4:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    14e8:	0117007d 	tsteq	r7, sp, ror r0
    14ec:	00320150 	eorseq	r0, r2, r0, asr r1
    14f0:	073f1300 	ldreq	r1, [pc, -r0, lsl #6]!
    14f4:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    14f8:	0036d802 	eorseq	sp, r6, r2, lsl #16
    14fc:	00003c08 	andeq	r3, r0, r8, lsl #24
    1500:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    1504:	1e000015 	mcrne	0, 0, r0, cr0, cr5, {0}
    1508:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    150c:	d002fe01 	andle	pc, r2, r1, lsl #28
    1510:	ba000006 	blt	1530 <__Stack_Size+0x1130>
    1514:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1518:	00000d53 	andeq	r0, r0, r3, asr sp
    151c:	a502fe01 	strge	pc, [r2, #-3585]	; 0xe01
    1520:	d8000013 	stmdale	r0, {r0, r1, r4}
    1524:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1528:	00000d5f 	andeq	r0, r0, pc, asr sp
    152c:	a502fe01 	strge	pc, [r2, #-3585]	; 0xe01
    1530:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
    1534:	19000005 	stmdbne	r0, {r0, r2}
    1538:	00000273 	andeq	r0, r0, r3, ror r2
    153c:	9102ff01 	tstls	r2, r1, lsl #30	; <UNPREDICTABLE>
    1540:	02000006 	andeq	r0, r0, #6
    1544:	82196891 	andshi	r6, r9, #9502720	; 0x910000
    1548:	01000002 	tsteq	r0, r2
    154c:	06910300 	ldreq	r0, [r1], r0, lsl #6
    1550:	91020000 	mrsls	r0, (UNDEF: 2)
    1554:	62612a6c 	rsbvs	r2, r1, #108, 20	; 0x6c000
    1558:	00080073 	andeq	r0, r8, r3, ror r0
    155c:	00000691 	muleq	r0, r1, r6
    1560:	00001566 	andeq	r1, r0, r6, ror #10
    1564:	e816002b 	ldmda	r6, {r0, r1, r3, r5}
    1568:	ac080036 	stcge	0, cr0, [r8], {54}	; 0x36
    156c:	7f000013 	svcvc	0x00000013
    1570:	17000015 	smladne	r0, r5, r0, r0
    1574:	91025101 	tstls	r2, r1, lsl #2
    1578:	5001176c 	andpl	r1, r1, ip, ror #14
    157c:	1a003101 	bne	d988 <__Stack_Size+0xd588>
    1580:	080036f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, ip, sp}
    1584:	000013ac 	andeq	r1, r0, ip, lsr #7
    1588:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    158c:	0117007d 	tsteq	r7, sp, ror r0
    1590:	00320150 	eorseq	r0, r2, r0, asr r1
    1594:	067b1300 	ldrbteq	r1, [fp], -r0, lsl #6
    1598:	1d010000 	stcne	0, cr0, [r1, #-0]
    159c:	00371401 	eorseq	r1, r7, r1, lsl #8
    15a0:	00003808 	andeq	r3, r0, r8, lsl #16
    15a4:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    15a8:	1e000016 	mcrne	0, 0, r0, cr0, cr6, {0}
    15ac:	00000581 	andeq	r0, r0, r1, lsl #11
    15b0:	73011d01 	movwvc	r1, #7425	; 0x1d01
    15b4:	14000000 	strne	r0, [r0], #-0
    15b8:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    15bc:	00000164 	andeq	r0, r0, r4, ror #2
    15c0:	98011d01 	stmdals	r1, {r0, r8, sl, fp, ip}
    15c4:	35000006 	strcc	r0, [r0, #-6]
    15c8:	14000006 	strne	r0, [r0], #-6
    15cc:	000007a3 	andeq	r0, r0, r3, lsr #15
    15d0:	91011f01 	tstls	r1, r1, lsl #30
    15d4:	61000006 	tstvs	r0, r6
    15d8:	16000006 	strne	r0, [r0], -r6
    15dc:	0800371e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, ip, sp}
    15e0:	00003109 	andeq	r3, r0, r9, lsl #2
    15e4:	000015ef 	andeq	r1, r0, pc, ror #11
    15e8:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    15ec:	15002008 	strne	r2, [r0, #-8]
    15f0:	08003724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp}
    15f4:	000030b4 	strheq	r3, [r0], -r4
    15f8:	00373016 	eorseq	r3, r7, r6, lsl r0
    15fc:	000b4808 	andeq	r4, fp, r8, lsl #16
    1600:	00160f00 	andseq	r0, r6, r0, lsl #30
    1604:	50011700 	andpl	r1, r1, r0, lsl #14
    1608:	62c50305 	sbcvs	r0, r5, #335544320	; 0x14000000
    160c:	16000800 	strne	r0, [r0], -r0, lsl #16
    1610:	08003736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip, sp}
    1614:	00000e54 	andeq	r0, r0, r4, asr lr
    1618:	00001623 	andeq	r1, r0, r3, lsr #12
    161c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1620:	1b000074 	blne	17f8 <__Stack_Size+0x13f8>
    1624:	08003740 	stmdaeq	r0, {r6, r8, r9, sl, ip, sp}
    1628:	00000b48 	andeq	r0, r0, r8, asr #22
    162c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1630:	0062af03 	rsbeq	sl, r2, r3, lsl #30
    1634:	13000008 	movwne	r0, #8
    1638:	00000a3d 	andeq	r0, r0, sp, lsr sl
    163c:	4c012d01 	stcmi	13, cr2, [r1], {1}
    1640:	38080037 	stmdacc	r8, {r0, r1, r2, r4, r5}
    1644:	01000000 	mrseq	r0, (UNDEF: 0)
    1648:	0016d99c 	mulseq	r6, ip, r9
    164c:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    1650:	2d010000 	stccs	0, cr0, [r1, #-0]
    1654:	00007301 	andeq	r7, r0, r1, lsl #6
    1658:	00068a00 	andeq	r8, r6, r0, lsl #20
    165c:	07871e00 	streq	r1, [r7, r0, lsl #28]
    1660:	2d010000 	stccs	0, cr0, [r1, #-0]
    1664:	00069801 	andeq	r9, r6, r1, lsl #16
    1668:	0006ab00 	andeq	sl, r6, r0, lsl #22
    166c:	07a31400 	streq	r1, [r3, r0, lsl #8]!
    1670:	2f010000 	svccs	0x00010000
    1674:	00069101 	andeq	r9, r6, r1, lsl #2
    1678:	0006d700 	andeq	sp, r6, r0, lsl #14
    167c:	37561600 	ldrbcc	r1, [r6, -r0, lsl #12]
    1680:	31090800 	tstcc	r9, r0, lsl #16
    1684:	16910000 	ldrne	r0, [r1], r0
    1688:	01170000 	tsteq	r7, r0
    168c:	21080251 	tstcs	r8, r1, asr r2
    1690:	375c1500 	ldrbcc	r1, [ip, -r0, lsl #10]
    1694:	30b40800 	adcscc	r0, r4, r0, lsl #16
    1698:	68160000 	ldmdavs	r6, {}	; <UNPREDICTABLE>
    169c:	48080037 	stmdami	r8, {r0, r1, r2, r4, r5}
    16a0:	b100000b 	tstlt	r0, fp
    16a4:	17000016 	smladne	r0, r6, r0, r0
    16a8:	03055001 	movweq	r5, #20481	; 0x5001
    16ac:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
    16b0:	376e1600 	strbcc	r1, [lr, -r0, lsl #12]!
    16b4:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    16b8:	16c50000 	strbne	r0, [r5], r0
    16bc:	01170000 	tsteq	r7, r0
    16c0:	00740250 	rsbseq	r0, r4, r0, asr r2
    16c4:	37781b00 	ldrbcc	r1, [r8, -r0, lsl #22]!
    16c8:	0b480800 	bleq	12036d0 <__Stack_Size+0x12032d0>
    16cc:	01170000 	tsteq	r7, r0
    16d0:	af030550 	svcge	0x00030550
    16d4:	00080062 	andeq	r0, r8, r2, rrx
    16d8:	02a11300 	adceq	r1, r1, #0, 6
    16dc:	3b010000 	blcc	416e4 <__Stack_Size+0x412e4>
    16e0:	00378401 	eorseq	r8, r7, r1, lsl #8
    16e4:	00003808 	andeq	r3, r0, r8, lsl #16
    16e8:	7a9c0100 	bvc	fe701af0 <SCS_BASE+0x1e6f3af0>
    16ec:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    16f0:	00000581 	andeq	r0, r0, r1, lsl #11
    16f4:	73013b01 	movwvc	r3, #6913	; 0x1b01
    16f8:	00000000 	andeq	r0, r0, r0
    16fc:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    1700:	00000787 	andeq	r0, r0, r7, lsl #15
    1704:	98013b01 	stmdals	r1, {r0, r8, r9, fp, ip, sp}
    1708:	21000006 	tstcs	r0, r6
    170c:	14000007 	strne	r0, [r0], #-7
    1710:	000007a3 	andeq	r0, r0, r3, lsr #15
    1714:	91013d01 	tstls	r1, r1, lsl #26
    1718:	4d000006 	stcmi	0, cr0, [r0, #-24]	; 0xffffffe8
    171c:	16000007 	strne	r0, [r0], -r7
    1720:	0800378e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, ip, sp}
    1724:	00003109 	andeq	r3, r0, r9, lsl #2
    1728:	00001732 	andeq	r1, r0, r2, lsr r7
    172c:	01510117 	cmpeq	r1, r7, lsl r1
    1730:	9415004a 	ldrls	r0, [r5], #-74	; 0x4a
    1734:	b4080037 	strlt	r0, [r8], #-55	; 0x37
    1738:	16000030 			; <UNDEFINED> instruction: 0x16000030
    173c:	080037a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, ip, sp}
    1740:	00000b48 	andeq	r0, r0, r8, asr #22
    1744:	00001752 	andeq	r1, r0, r2, asr r7
    1748:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    174c:	0062c503 	rsbeq	ip, r2, r3, lsl #10
    1750:	a6160008 	ldrge	r0, [r6], -r8
    1754:	54080037 	strpl	r0, [r8], #-55	; 0x37
    1758:	6600000e 	strvs	r0, [r0], -lr
    175c:	17000017 	smladne	r0, r7, r0, r0
    1760:	74025001 	strvc	r5, [r2], #-1
    1764:	b01b0000 	andslt	r0, fp, r0
    1768:	48080037 	stmdami	r8, {r0, r1, r2, r4, r5}
    176c:	1700000b 	strne	r0, [r0, -fp]
    1770:	03055001 	movweq	r5, #20481	; 0x5001
    1774:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}
    1778:	91130000 	tstls	r3, r0
    177c:	0100000a 	tsteq	r0, sl
    1780:	37bc0149 	ldrcc	r0, [ip, r9, asr #2]!
    1784:	00380800 	eorseq	r0, r8, r0, lsl #16
    1788:	9c010000 	stcls	0, cr0, [r1], {-0}
    178c:	0000181b 	andeq	r1, r0, fp, lsl r8
    1790:	0005811e 	andeq	r8, r5, lr, lsl r1
    1794:	01490100 	mrseq	r0, (UNDEF: 89)
    1798:	00000073 	andeq	r0, r0, r3, ror r0
    179c:	00000776 	andeq	r0, r0, r6, ror r7
    17a0:	0007871e 	andeq	r8, r7, lr, lsl r7
    17a4:	01490100 	mrseq	r0, (UNDEF: 89)
    17a8:	00000698 	muleq	r0, r8, r6
    17ac:	00000797 	muleq	r0, r7, r7
    17b0:	0007a314 	andeq	sl, r7, r4, lsl r3
    17b4:	014b0100 	mrseq	r0, (UNDEF: 91)
    17b8:	00000691 	muleq	r0, r1, r6
    17bc:	000007c3 	andeq	r0, r0, r3, asr #15
    17c0:	0037c616 	eorseq	ip, r7, r6, lsl r6
    17c4:	00310908 	eorseq	r0, r1, r8, lsl #18
    17c8:	0017d300 	andseq	sp, r7, r0, lsl #6
    17cc:	51011700 	tstpl	r1, r0, lsl #14
    17d0:	15004b01 	strne	r4, [r0, #-2817]	; 0xb01
    17d4:	080037cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip, sp}
    17d8:	000030b4 	strheq	r3, [r0], -r4
    17dc:	0037d816 	eorseq	sp, r7, r6, lsl r8
    17e0:	000b4808 	andeq	r4, fp, r8, lsl #16
    17e4:	0017f300 	andseq	pc, r7, r0, lsl #6
    17e8:	50011700 	andpl	r1, r1, r0, lsl #14
    17ec:	62c50305 	sbcvs	r0, r5, #335544320	; 0x14000000
    17f0:	16000800 	strne	r0, [r0], -r0, lsl #16
    17f4:	080037de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, sp}
    17f8:	00000e54 	andeq	r0, r0, r4, asr lr
    17fc:	00001807 	andeq	r1, r0, r7, lsl #16
    1800:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1804:	1b000074 	blne	19dc <__Stack_Size+0x15dc>
    1808:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
    180c:	00000b48 	andeq	r0, r0, r8, asr #22
    1810:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1814:	0062af03 	rsbeq	sl, r2, r3, lsl #30
    1818:	13000008 	movwne	r0, #8
    181c:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    1820:	f4015701 	vst1.8	{d5}, [r1], r1
    1824:	38080037 	stmdacc	r8, {r0, r1, r2, r4, r5}
    1828:	01000000 	mrseq	r0, (UNDEF: 0)
    182c:	0018bc9c 	mulseq	r8, ip, ip
    1830:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    1834:	57010000 	strpl	r0, [r1, -r0]
    1838:	00007301 	andeq	r7, r0, r1, lsl #6
    183c:	0007ec00 	andeq	lr, r7, r0, lsl #24
    1840:	07871e00 	streq	r1, [r7, r0, lsl #28]
    1844:	57010000 	strpl	r0, [r1, -r0]
    1848:	00069801 	andeq	r9, r6, r1, lsl #16
    184c:	00080d00 	andeq	r0, r8, r0, lsl #26
    1850:	07a31400 	streq	r1, [r3, r0, lsl #8]!
    1854:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    1858:	00069101 	andeq	r9, r6, r1, lsl #2
    185c:	00083900 	andeq	r3, r8, r0, lsl #18
    1860:	37fe1600 	ldrbcc	r1, [lr, r0, lsl #12]!
    1864:	31090800 	tstcc	r9, r0, lsl #16
    1868:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    186c:	01170000 	tsteq	r7, r0
    1870:	004c0151 	subeq	r0, ip, r1, asr r1
    1874:	00380415 	eorseq	r0, r8, r5, lsl r4
    1878:	0030b408 	eorseq	fp, r0, r8, lsl #8
    187c:	38101600 	ldmdacc	r0, {r9, sl, ip}
    1880:	0b480800 	bleq	1203888 <__Stack_Size+0x1203488>
    1884:	18940000 	ldmne	r4, {}	; <UNPREDICTABLE>
    1888:	01170000 	tsteq	r7, r0
    188c:	c5030550 	strgt	r0, [r3, #-1360]	; 0x550
    1890:	00080062 	andeq	r0, r8, r2, rrx
    1894:	00381616 	eorseq	r1, r8, r6, lsl r6
    1898:	000e5408 	andeq	r5, lr, r8, lsl #8
    189c:	0018a800 	andseq	sl, r8, r0, lsl #16
    18a0:	50011700 	andpl	r1, r1, r0, lsl #14
    18a4:	00007402 	andeq	r7, r0, r2, lsl #8
    18a8:	0038201b 	eorseq	r2, r8, fp, lsl r0
    18ac:	000b4808 	andeq	r4, fp, r8, lsl #16
    18b0:	50011700 	andpl	r1, r1, r0, lsl #14
    18b4:	62af0305 	adcvs	r0, pc, #335544320	; 0x14000000
    18b8:	00000800 	andeq	r0, r0, r0, lsl #16
    18bc:	00052013 	andeq	r2, r5, r3, lsl r0
    18c0:	01660100 	cmneq	r6, r0, lsl #2
    18c4:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
    18c8:	00000038 	andeq	r0, r0, r8, lsr r0
    18cc:	195d9c01 	ldmdbne	sp, {r0, sl, fp, ip, pc}^
    18d0:	811e0000 	tsthi	lr, r0
    18d4:	01000005 	tsteq	r0, r5
    18d8:	00730166 	rsbseq	r0, r3, r6, ror #2
    18dc:	08620000 	stmdaeq	r2!, {}^	; <UNPREDICTABLE>
    18e0:	871e0000 	ldrhi	r0, [lr, -r0]
    18e4:	01000007 	tsteq	r0, r7
    18e8:	06980166 	ldreq	r0, [r8], r6, ror #2
    18ec:	08830000 	stmeq	r3, {}	; <UNPREDICTABLE>
    18f0:	a3140000 	tstge	r4, #0
    18f4:	01000007 	tsteq	r0, r7
    18f8:	06910168 	ldreq	r0, [r1], r8, ror #2
    18fc:	08af0000 	stmiaeq	pc!, {}	; <UNPREDICTABLE>
    1900:	36160000 	ldrcc	r0, [r6], -r0
    1904:	09080038 	stmdbeq	r8, {r3, r4, r5}
    1908:	15000031 	strne	r0, [r0, #-49]	; 0x31
    190c:	17000019 	smladne	r0, r9, r0, r0
    1910:	4d015101 	stfmis	f5, [r1, #-4]
    1914:	383c1500 	ldmdacc	ip!, {r8, sl, ip}
    1918:	30b40800 	adcscc	r0, r4, r0, lsl #16
    191c:	48160000 	ldmdami	r6, {}	; <UNPREDICTABLE>
    1920:	48080038 	stmdami	r8, {r3, r4, r5}
    1924:	3500000b 	strcc	r0, [r0, #-11]
    1928:	17000019 	smladne	r0, r9, r0, r0
    192c:	03055001 	movweq	r5, #20481	; 0x5001
    1930:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
    1934:	384e1600 	stmdacc	lr, {r9, sl, ip}^
    1938:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    193c:	19490000 	stmdbne	r9, {}^	; <UNPREDICTABLE>
    1940:	01170000 	tsteq	r7, r0
    1944:	00740250 	rsbseq	r0, r4, r0, asr r2
    1948:	38581b00 	ldmdacc	r8, {r8, r9, fp, ip}^
    194c:	0b480800 	bleq	1203954 <__Stack_Size+0x1203554>
    1950:	01170000 	tsteq	r7, r0
    1954:	af030550 	svcge	0x00030550
    1958:	00080062 	andeq	r0, r8, r2, rrx
    195c:	00571300 	subseq	r1, r7, r0, lsl #6
    1960:	74010000 	strvc	r0, [r1], #-0
    1964:	00386401 	eorseq	r6, r8, r1, lsl #8
    1968:	00003808 	andeq	r3, r0, r8, lsl #16
    196c:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    1970:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    1974:	00000581 	andeq	r0, r0, r1, lsl #11
    1978:	73017401 	movwvc	r7, #5121	; 0x1401
    197c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1980:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1984:	00000787 	andeq	r0, r0, r7, lsl #15
    1988:	98017401 	stmdals	r1, {r0, sl, ip, sp, lr}
    198c:	f9000006 			; <UNDEFINED> instruction: 0xf9000006
    1990:	14000008 	strne	r0, [r0], #-8
    1994:	000007a3 	andeq	r0, r0, r3, lsr #15
    1998:	91017601 	tstls	r1, r1, lsl #12
    199c:	25000006 	strcs	r0, [r0, #-6]
    19a0:	16000009 	strne	r0, [r0], -r9
    19a4:	0800386e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, sp}
    19a8:	00003109 	andeq	r3, r0, r9, lsl #2
    19ac:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
    19b0:	01510117 	cmpeq	r1, r7, lsl r1
    19b4:	7415004e 	ldrvc	r0, [r5], #-78	; 0x4e
    19b8:	b4080038 	strlt	r0, [r8], #-56	; 0x38
    19bc:	16000030 			; <UNDEFINED> instruction: 0x16000030
    19c0:	08003880 	stmdaeq	r0, {r7, fp, ip, sp}
    19c4:	00000b48 	andeq	r0, r0, r8, asr #22
    19c8:	000019d6 	ldrdeq	r1, [r0], -r6
    19cc:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    19d0:	0062c503 	rsbeq	ip, r2, r3, lsl #10
    19d4:	86160008 	ldrhi	r0, [r6], -r8
    19d8:	54080038 	strpl	r0, [r8], #-56	; 0x38
    19dc:	ea00000e 	b	1a1c <__Stack_Size+0x161c>
    19e0:	17000019 	smladne	r0, r9, r0, r0
    19e4:	74025001 	strvc	r5, [r2], #-1
    19e8:	901b0000 	andsls	r0, fp, r0
    19ec:	48080038 	stmdami	r8, {r3, r4, r5}
    19f0:	1700000b 	strne	r0, [r0, -fp]
    19f4:	03055001 	movweq	r5, #20481	; 0x5001
    19f8:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}
    19fc:	31130000 	tstcc	r3, r0
    1a00:	01000001 	tsteq	r0, r1
    1a04:	389c0182 	ldmcc	ip, {r1, r7, r8}
    1a08:	00380800 	eorseq	r0, r8, r0, lsl #16
    1a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a10:	00001a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1a14:	0005811e 	andeq	r8, r5, lr, lsl r1
    1a18:	01820100 	orreq	r0, r2, r0, lsl #2
    1a1c:	00000073 	andeq	r0, r0, r3, ror r0
    1a20:	0000094e 	andeq	r0, r0, lr, asr #18
    1a24:	0007871e 	andeq	r8, r7, lr, lsl r7
    1a28:	01820100 	orreq	r0, r2, r0, lsl #2
    1a2c:	00000698 	muleq	r0, r8, r6
    1a30:	0000096f 	andeq	r0, r0, pc, ror #18
    1a34:	0007a314 	andeq	sl, r7, r4, lsl r3
    1a38:	01840100 	orreq	r0, r4, r0, lsl #2
    1a3c:	00000691 	muleq	r0, r1, r6
    1a40:	0000099b 	muleq	r0, fp, r9
    1a44:	0038a616 	eorseq	sl, r8, r6, lsl r6
    1a48:	00310908 	eorseq	r0, r1, r8, lsl #18
    1a4c:	001a5700 	andseq	r5, sl, r0, lsl #14
    1a50:	51011700 	tstpl	r1, r0, lsl #14
    1a54:	15004f01 	strne	r4, [r0, #-3841]	; 0xf01
    1a58:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
    1a5c:	000030b4 	strheq	r3, [r0], -r4
    1a60:	0038b816 	eorseq	fp, r8, r6, lsl r8
    1a64:	000b4808 	andeq	r4, fp, r8, lsl #16
    1a68:	001a7700 	andseq	r7, sl, r0, lsl #14
    1a6c:	50011700 	andpl	r1, r1, r0, lsl #14
    1a70:	62c50305 	sbcvs	r0, r5, #335544320	; 0x14000000
    1a74:	16000800 	strne	r0, [r0], -r0, lsl #16
    1a78:	080038be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, ip, sp}
    1a7c:	00000e54 	andeq	r0, r0, r4, asr lr
    1a80:	00001a8b 	andeq	r1, r0, fp, lsl #21
    1a84:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1a88:	1b000074 	blne	1c60 <__Stack_Size+0x1860>
    1a8c:	080038c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp}
    1a90:	00000b48 	andeq	r0, r0, r8, asr #22
    1a94:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1a98:	0062af03 	rsbeq	sl, r2, r3, lsl #30
    1a9c:	13000008 	movwne	r0, #8
    1aa0:	0000063b 	andeq	r0, r0, fp, lsr r6
    1aa4:	d4019001 	strle	r9, [r1], #-1
    1aa8:	38080038 	stmdacc	r8, {r3, r4, r5}
    1aac:	01000000 	mrseq	r0, (UNDEF: 0)
    1ab0:	001b419c 	mulseq	fp, ip, r1
    1ab4:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    1ab8:	90010000 	andls	r0, r1, r0
    1abc:	00007301 	andeq	r7, r0, r1, lsl #6
    1ac0:	0009c400 	andeq	ip, r9, r0, lsl #8
    1ac4:	07871e00 	streq	r1, [r7, r0, lsl #28]
    1ac8:	90010000 	andls	r0, r1, r0
    1acc:	00139f01 	andseq	r9, r3, r1, lsl #30
    1ad0:	0009e500 	andeq	lr, r9, r0, lsl #10
    1ad4:	07a31400 	streq	r1, [r3, r0, lsl #8]!
    1ad8:	92010000 	andls	r0, r1, #0
    1adc:	00069101 	andeq	r9, r6, r1, lsl #2
    1ae0:	000a1100 	andeq	r1, sl, r0, lsl #2
    1ae4:	38de1600 	ldmcc	lr, {r9, sl, ip}^
    1ae8:	30ef0800 	rsccc	r0, pc, r0, lsl #16
    1aec:	1af90000 	bne	ffe41af4 <SCS_BASE+0x1fe33af4>
    1af0:	01170000 	tsteq	r7, r0
    1af4:	23080251 	movwcs	r0, #33361	; 0x8251
    1af8:	38e41500 	stmiacc	r4!, {r8, sl, ip}^
    1afc:	30b40800 	adcscc	r0, r4, r0, lsl #16
    1b00:	f0160000 			; <UNDEFINED> instruction: 0xf0160000
    1b04:	48080038 	stmdami	r8, {r3, r4, r5}
    1b08:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1b0c:	1700001b 	smladne	r0, fp, r0, r0
    1b10:	03055001 	movweq	r5, #20481	; 0x5001
    1b14:	080062c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr}
    1b18:	38f61600 	ldmcc	r6!, {r9, sl, ip}^
    1b1c:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    1b20:	1b2d0000 	blne	b41b28 <__Stack_Size+0xb41728>
    1b24:	01170000 	tsteq	r7, r0
    1b28:	00740250 	rsbseq	r0, r4, r0, asr r2
    1b2c:	39001b00 	stmdbcc	r0, {r8, r9, fp, ip}
    1b30:	0b480800 	bleq	1203b38 <__Stack_Size+0x1203738>
    1b34:	01170000 	tsteq	r7, r0
    1b38:	af030550 	svcge	0x00030550
    1b3c:	00080062 	andeq	r0, r8, r2, rrx
    1b40:	0d3a1300 	ldceq	3, cr1, [sl, #-0]
    1b44:	9d010000 	stcls	0, cr0, [r1, #-0]
    1b48:	00390c01 	eorseq	r0, r9, r1, lsl #24
    1b4c:	00003408 	andeq	r3, r0, r8, lsl #8
    1b50:	ea9c0100 	b	fe701f58 <SCS_BASE+0x1e6f3f58>
    1b54:	1e00001b 	mcrne	0, 0, r0, cr0, cr11, {0}
    1b58:	00000581 	andeq	r0, r0, r1, lsl #11
    1b5c:	73019d01 	movwvc	r9, #7425	; 0x1d01
    1b60:	3a000000 	bcc	1b68 <__Stack_Size+0x1768>
    1b64:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    1b68:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    1b6c:	91019d01 	tstls	r1, r1, lsl #26
    1b70:	5b000006 	blpl	1b90 <__Stack_Size+0x1790>
    1b74:	1400000a 	strne	r0, [r0], #-10
    1b78:	000007a3 	andeq	r0, r0, r3, lsr #15
    1b7c:	91019f01 	tstls	r1, r1, lsl #30
    1b80:	87000006 	strhi	r0, [r0, -r6]
    1b84:	1600000a 	strne	r0, [r0], -sl
    1b88:	08003916 	stmdaeq	r0, {r1, r2, r4, r8, fp, ip, sp}
    1b8c:	000030d4 	ldrdeq	r3, [r0], -r4
    1b90:	00001ba2 	andeq	r1, r0, r2, lsr #23
    1b94:	03520117 	cmpeq	r2, #-1073741819	; 0xc0000005
    1b98:	175101f3 	smmlsrne	r1, r3, r1, r0
    1b9c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    1ba0:	1a150028 	bne	541c48 <__Stack_Size+0x541848>
    1ba4:	b4080039 	strlt	r0, [r8], #-57	; 0x39
    1ba8:	16000030 			; <UNDEFINED> instruction: 0x16000030
    1bac:	08003926 	stmdaeq	r0, {r1, r2, r5, r8, fp, ip, sp}
    1bb0:	00000b48 	andeq	r0, r0, r8, asr #22
    1bb4:	00001bc2 	andeq	r1, r0, r2, asr #23
    1bb8:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1bbc:	0062c503 	rsbeq	ip, r2, r3, lsl #10
    1bc0:	2c160008 	ldccs	0, cr0, [r6], {8}
    1bc4:	54080039 	strpl	r0, [r8], #-57	; 0x39
    1bc8:	d600000e 	strle	r0, [r0], -lr
    1bcc:	1700001b 	smladne	r0, fp, r0, r0
    1bd0:	74025001 	strvc	r5, [r2], #-1
    1bd4:	361b0000 	ldrcc	r0, [fp], -r0
    1bd8:	48080039 	stmdami	r8, {r0, r3, r4, r5}
    1bdc:	1700000b 	strne	r0, [r0, -fp]
    1be0:	03055001 	movweq	r5, #20481	; 0x5001
    1be4:	080062af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sp, lr}
    1be8:	ef130000 	svc	0x00130000
    1bec:	01000006 	tsteq	r0, r6
    1bf0:	394001a9 	stmdbcc	r0, {r0, r3, r5, r7, r8}^
    1bf4:	001a0800 	andseq	r0, sl, r0, lsl #16
    1bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bfc:	00001c5a 	andeq	r1, r0, sl, asr ip
    1c00:	0005811e 	andeq	r8, r5, lr, lsl r1
    1c04:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    1c08:	00000073 	andeq	r0, r0, r3, ror r0
    1c0c:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    1c10:	00047c1e 	andeq	r7, r4, lr, lsl ip
    1c14:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    1c18:	00000691 	muleq	r0, r1, r6
    1c1c:	00000ad1 	ldrdeq	r0, [r0], -r1
    1c20:	0007a314 	andeq	sl, r7, r4, lsl r3
    1c24:	01aa0100 			; <UNDEFINED> instruction: 0x01aa0100
    1c28:	00000691 	muleq	r0, r1, r6
    1c2c:	00000aef 	andeq	r0, r0, pc, ror #21
    1c30:	00395016 	eorseq	r5, r9, r6, lsl r0
    1c34:	0030d408 	eorseq	sp, r0, r8, lsl #8
    1c38:	001c5000 	andseq	r5, ip, r0
    1c3c:	52011700 	andpl	r1, r1, #0, 14
    1c40:	17007402 	strne	r7, [r0, -r2, lsl #8]
    1c44:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    1c48:	50011729 	andpl	r1, r1, r9, lsr #14
    1c4c:	00007502 	andeq	r7, r0, r2, lsl #10
    1c50:	00395415 	eorseq	r5, r9, r5, lsl r4
    1c54:	0030b408 	eorseq	fp, r0, r8, lsl #8
    1c58:	12130000 	andsne	r0, r3, #0
    1c5c:	01000008 	tsteq	r0, r8
    1c60:	395a0471 	ldmdbcc	sl, {r0, r4, r5, r6, sl}^
    1c64:	008e0800 	addeq	r0, lr, r0, lsl #16
    1c68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c6c:	00001d73 	andeq	r1, r0, r3, ror sp
    1c70:	000b2819 	andeq	r2, fp, r9, lsl r8
    1c74:	04730100 	ldrbteq	r0, [r3], #-256	; 0x100
    1c78:	00000590 	muleq	r0, r0, r5
    1c7c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    1c80:	0000054b 	andeq	r0, r0, fp, asr #10
    1c84:	04047401 	streq	r7, [r4], #-1025	; 0x401
    1c88:	02000006 	andeq	r0, r0, #6
    1c8c:	64166891 	ldrvs	r6, [r6], #-2193	; 0x891
    1c90:	23080039 	movwcs	r0, #32825	; 0x8039
    1c94:	a2000031 	andge	r0, r0, #49	; 0x31
    1c98:	1700001c 	smladne	r0, ip, r0, r0
    1c9c:	91025001 	tstls	r2, r1
    1ca0:	6a16005c 	bvs	581e18 <__Stack_Size+0x581a18>
    1ca4:	3b080039 	blcc	201d90 <__Stack_Size+0x201990>
    1ca8:	b6000031 			; <UNDEFINED> instruction: 0xb6000031
    1cac:	1700001c 	smladne	r0, ip, r0, r0
    1cb0:	91025001 	tstls	r2, r1
    1cb4:	72160068 	andsvc	r0, r6, #104	; 0x68
    1cb8:	53080039 	movwpl	r0, #32825	; 0x8039
    1cbc:	cb000031 	blgt	1d88 <__Stack_Size+0x1988>
    1cc0:	1700001c 	smladne	r0, ip, r0, r0
    1cc4:	40035001 	andmi	r5, r3, r1
    1cc8:	1600244a 	strne	r2, [r0], -sl, asr #8
    1ccc:	08003992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, sp}
    1cd0:	0000316b 	andeq	r3, r0, fp, ror #2
    1cd4:	00001ce6 	andeq	r1, r0, r6, ror #25
    1cd8:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1cdc:	01175c91 			; <UNDEFINED> instruction: 0x01175c91
    1ce0:	4a400350 	bmi	1002a28 <__Stack_Size+0x1002628>
    1ce4:	a0160024 	andsge	r0, r6, r4, lsr #32
    1ce8:	82080039 	andhi	r0, r8, #57	; 0x39
    1cec:	07000031 	smladxeq	r0, r1, r0, r0
    1cf0:	1700001d 	smladne	r0, sp, r0, r0
    1cf4:	31015201 	tstcc	r1, r1, lsl #4
    1cf8:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    1cfc:	1702d20a 	strne	sp, [r2, -sl, lsl #4]
    1d00:	40035001 	andmi	r5, r3, r1
    1d04:	1600244a 	strne	r2, [r0], -sl, asr #8
    1d08:	080039be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, sp}
    1d0c:	0000319e 	muleq	r0, lr, r1
    1d10:	00001d22 	andeq	r1, r0, r2, lsr #26
    1d14:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1d18:	01176891 			; <UNDEFINED> instruction: 0x01176891
    1d1c:	4a400350 	bmi	1002a64 <__Stack_Size+0x1002664>
    1d20:	c8160024 	ldmdagt	r6, {r2, r5}
    1d24:	b5080039 	strlt	r0, [r8, #-57]	; 0x39
    1d28:	3d000031 	stccc	0, cr0, [r0, #-196]	; 0xffffff3c
    1d2c:	1700001d 	smladne	r0, sp, r0, r0
    1d30:	74025101 	strvc	r5, [r2], #-257	; 0x101
    1d34:	50011700 	andpl	r1, r1, r0, lsl #14
    1d38:	244a4003 	strbcs	r4, [sl], #-3
    1d3c:	39d41600 	ldmibcc	r4, {r9, sl, ip}^
    1d40:	31cc0800 	biccc	r0, ip, r0, lsl #16
    1d44:	1d5c0000 	ldclne	0, cr0, [ip, #-0]
    1d48:	01170000 	tsteq	r7, r0
    1d4c:	17310152 			; <UNDEFINED> instruction: 0x17310152
    1d50:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    1d54:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1d58:	00244a40 	eoreq	r4, r4, r0, asr #20
    1d5c:	0039de1a 	eorseq	sp, r9, sl, lsl lr
    1d60:	0031e808 	eorseq	lr, r1, r8, lsl #16
    1d64:	51011700 	tstpl	r1, r0, lsl #14
    1d68:	01173101 	tsteq	r7, r1, lsl #2
    1d6c:	4a400350 	bmi	1002ab4 <__Stack_Size+0x10026b4>
    1d70:	13000024 	movwne	r0, #36	; 0x24
    1d74:	000006c1 	andeq	r0, r0, r1, asr #13
    1d78:	e8049601 	stmda	r4, {r0, r9, sl, ip, pc}
    1d7c:	54080039 	strpl	r0, [r8], #-57	; 0x39
    1d80:	01000000 	mrseq	r0, (UNDEF: 0)
    1d84:	001de49c 	mulseq	sp, ip, r4
    1d88:	39f41600 	ldmibcc	r4!, {r9, sl, ip}^
    1d8c:	31ff0800 	mvnscc	r0, r0, lsl #16
    1d90:	1da30000 	stcne	0, cr0, [r3]
    1d94:	01170000 	tsteq	r7, r0
    1d98:	17320151 			; <UNDEFINED> instruction: 0x17320151
    1d9c:	40035001 	andmi	r5, r3, r1
    1da0:	1600244a 	strne	r2, [r0], -sl, asr #8
    1da4:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
    1da8:	0000321a 	andeq	r3, r0, sl, lsl r2
    1dac:	00001dbd 			; <UNDEFINED> instruction: 0x00001dbd
    1db0:	01510117 	cmpeq	r1, r7, lsl r1
    1db4:	50011732 	andpl	r1, r1, r2, lsr r7
    1db8:	244a4003 	strbcs	r4, [sl], #-3
    1dbc:	3a081600 	bcc	2075c4 <__Stack_Size+0x2071c4>
    1dc0:	32310800 	eorscc	r0, r1, #0, 16
    1dc4:	1dd20000 	ldclne	0, cr0, [r2]
    1dc8:	01170000 	tsteq	r7, r0
    1dcc:	4a400350 	bmi	1002b14 <__Stack_Size+0x1002714>
    1dd0:	221a0024 	andscs	r0, sl, #36	; 0x24
    1dd4:	4708003a 	smladxmi	r8, sl, r0, r0
    1dd8:	17000032 	smladxne	r0, r2, r0, r0
    1ddc:	40035001 	andmi	r5, r3, r1
    1de0:	0000244a 	andeq	r2, r0, sl, asr #8
    1de4:	00043c13 	andeq	r3, r4, r3, lsl ip
    1de8:	04a50100 	strteq	r0, [r5], #256	; 0x100
    1dec:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
    1df0:	00000030 	andeq	r0, r0, r0, lsr r0
    1df4:	1e2c9c01 	cdpne	12, 2, cr9, cr12, cr1, {0}
    1df8:	48160000 	ldmdami	r6, {}	; <UNPREDICTABLE>
    1dfc:	5e08003a 	mcrpl	0, 0, r0, cr8, cr10, {1}
    1e00:	18000032 	stmdane	r0, {r1, r4, r5}
    1e04:	1700001e 	smladne	r0, lr, r0, r0
    1e08:	0a035101 	beq	d6214 <__Stack_Size+0xd5e14>
    1e0c:	01170525 	tsteq	r7, r5, lsr #10
    1e10:	000c0550 	andeq	r0, ip, r0, asr r5
    1e14:	00400138 	subeq	r0, r0, r8, lsr r1
    1e18:	003a5c1a 	eorseq	r5, sl, sl, lsl ip
    1e1c:	00327808 	eorseq	r7, r2, r8, lsl #16
    1e20:	50011700 	andpl	r1, r1, r0, lsl #14
    1e24:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    1e28:	00004001 	andeq	r4, r0, r1
    1e2c:	0006d413 	andeq	sp, r6, r3, lsl r4
    1e30:	04ab0100 	strteq	r0, [fp], #256	; 0x100
    1e34:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
    1e38:	00000014 	andeq	r0, r0, r4, lsl r0
    1e3c:	1e679c01 	cdpne	12, 6, cr9, cr7, cr1, {0}
    1e40:	76160000 	ldrvc	r0, [r6], -r0
    1e44:	8d08003a 	stchi	0, cr0, [r8, #-232]	; 0xffffff18
    1e48:	57000032 	smladxpl	r0, r2, r0, r0
    1e4c:	1700001e 	smladne	r0, lr, r0, r0
    1e50:	0a035001 	beq	d5e5c <__Stack_Size+0xd5a5c>
    1e54:	1b002328 	blne	aafc <__Stack_Size+0xa6fc>
    1e58:	08003a80 	stmdaeq	r0, {r7, r9, fp, ip, sp}
    1e5c:	0000329e 	muleq	r0, lr, r2
    1e60:	01500117 	cmpeq	r0, r7, lsl r1
    1e64:	1c000031 	stcne	0, cr0, [r0], {49}	; 0x31
    1e68:	00000ca8 	andeq	r0, r0, r8, lsr #25
    1e6c:	8004b401 	andhi	fp, r4, r1, lsl #8
    1e70:	1808003a 	stmdane	r8, {r1, r3, r4, r5}
    1e74:	01000000 	mrseq	r0, (UNDEF: 0)
    1e78:	0598139c 	ldreq	r1, [r8, #924]	; 0x39c
    1e7c:	ba010000 	blt	41e84 <__Stack_Size+0x41a84>
    1e80:	003a9804 	eorseq	r9, sl, r4, lsl #16
    1e84:	00003008 	andeq	r3, r0, r8
    1e88:	d09c0100 	addsle	r0, ip, r0, lsl #2
    1e8c:	1e00001e 	mcrne	0, 0, r0, cr0, cr14, {0}
    1e90:	00000de9 	andeq	r0, r0, r9, ror #27
    1e94:	4504ba01 	strmi	fp, [r4, #-2561]	; 0xa01
    1e98:	0f000000 	svceq	0x00000000
    1e9c:	1600000b 	strne	r0, [r0], -fp
    1ea0:	08003aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, ip, sp}
    1ea4:	000032af 	andeq	r3, r0, pc, lsr #5
    1ea8:	00001eb2 			; <UNDEFINED> instruction: 0x00001eb2
    1eac:	01500117 	cmpeq	r0, r7, lsl r1
    1eb0:	b8160031 	ldmdalt	r6, {r0, r4, r5}
    1eb4:	af08003a 	svcge	0x0008003a
    1eb8:	c6000032 			; <UNDEFINED> instruction: 0xc6000032
    1ebc:	1700001e 	smladne	r0, lr, r0, r0
    1ec0:	09025001 	stmdbeq	r2, {r0, ip, lr}
    1ec4:	c22300fe 	eorgt	r0, r3, #254	; 0xfe
    1ec8:	af08003a 	svcge	0x0008003a
    1ecc:	00000032 	andeq	r0, r0, r2, lsr r0
    1ed0:	00034c13 	andeq	r4, r3, r3, lsl ip
    1ed4:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    1ed8:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
    1edc:	00000032 	andeq	r0, r0, r2, lsr r0
    1ee0:	1f7b9c01 	svcne	0x007b9c01
    1ee4:	811e0000 	tsthi	lr, r0
    1ee8:	01000005 	tsteq	r0, r5
    1eec:	007301ba 	ldrhteq	r0, [r3], #-26	; 0xffffffe6
    1ef0:	0b4a0000 	bleq	1281ef8 <__Stack_Size+0x1281af8>
    1ef4:	b11e0000 	tstlt	lr, r0
    1ef8:	0100000a 	tsteq	r0, sl
    1efc:	069101ba 			; <UNDEFINED> instruction: 0x069101ba
    1f00:	0b6b0000 	bleq	1ac1f08 <__Stack_Size+0x1ac1b08>
    1f04:	7c1e0000 	ldcvc	0, cr0, [lr], {-0}
    1f08:	01000004 	tsteq	r0, r4
    1f0c:	069101ba 			; <UNDEFINED> instruction: 0x069101ba
    1f10:	0b970000 	bleq	fe5c1f18 <SCS_BASE+0x1e5b3f18>
    1f14:	6b2c0000 	blvs	b01f1c <__Stack_Size+0xb01b1c>
    1f18:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    1f1c:	00000691 	muleq	r0, r1, r6
    1f20:	00000bc3 	andeq	r0, r0, r3, asr #23
    1f24:	003ad616 	eorseq	sp, sl, r6, lsl r6
    1f28:	001bea08 	andseq	lr, fp, r8, lsl #20
    1f2c:	001f3e00 	andseq	r3, pc, r0, lsl #28
    1f30:	51011700 	tstpl	r1, r0, lsl #14
    1f34:	17fe0802 	ldrbne	r0, [lr, r2, lsl #16]!
    1f38:	75025001 	strvc	r5, [r2, #-1]
    1f3c:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
    1f40:	4108003a 	tstmi	r8, sl, lsr r0
    1f44:	5800001b 	stmdapl	r0, {r0, r1, r3, r4}
    1f48:	1700001f 	smladne	r0, pc, r0, r0	; <UNPREDICTABLE>
    1f4c:	74025101 	strvc	r5, [r2], #-257	; 0x101
    1f50:	50011700 	andpl	r1, r1, r0, lsl #14
    1f54:	00007502 	andeq	r7, r0, r2, lsl #10
    1f58:	003aea16 	eorseq	lr, sl, r6, lsl sl
    1f5c:	001e7908 	andseq	r7, lr, r8, lsl #18
    1f60:	001f6b00 	andseq	r6, pc, r0, lsl #22
    1f64:	50011700 	andpl	r1, r1, r0, lsl #14
    1f68:	1b003101 	blne	e374 <__Stack_Size+0xdf74>
    1f6c:	08003afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, ip, sp}
    1f70:	00001bea 	andeq	r1, r0, sl, ror #23
    1f74:	01510117 	cmpeq	r1, r7, lsl r1
    1f78:	26000030 			; <UNDEFINED> instruction: 0x26000030
    1f7c:	00000180 	andeq	r0, r0, r0, lsl #3
    1f80:	fa027c01 	blx	a0f8c <__Stack_Size+0xa0b8c>
    1f84:	4a08003a 	bmi	202074 <__Stack_Size+0x201c74>
    1f88:	01000000 	mrseq	r0, (UNDEF: 0)
    1f8c:	00205d9c 	mlaeq	r0, ip, sp, r5
    1f90:	3b061600 	blcc	187798 <__Stack_Size+0x187398>
    1f94:	1ed00800 	cdpne	8, 13, cr0, cr0, cr0, {0}
    1f98:	1fb00000 	svcne	0x00b00000
    1f9c:	01170000 	tsteq	r7, r0
    1fa0:	7d080252 	sfmvc	f0, 4, [r8, #-328]	; 0xfffffeb8
    1fa4:	01510117 	cmpeq	r1, r7, lsl r1
    1fa8:	50011743 	andpl	r1, r1, r3, asr #14
    1fac:	00640802 	rsbeq	r0, r4, r2, lsl #16
    1fb0:	003b1016 	eorseq	r1, fp, r6, lsl r0
    1fb4:	001ed008 	andseq	sp, lr, r8
    1fb8:	001fcf00 	andseq	ip, pc, r0, lsl #30
    1fbc:	52011700 	andpl	r1, r1, #0, 14
    1fc0:	177d0802 	ldrbne	r0, [sp, -r2, lsl #16]!
    1fc4:	40015101 	andmi	r5, r1, r1, lsl #2
    1fc8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1fcc:	16006408 	strne	r6, [r0], -r8, lsl #8
    1fd0:	08003b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip, sp}
    1fd4:	00001ed0 	ldrdeq	r1, [r0], -r0
    1fd8:	00001fee 	andeq	r1, r0, lr, ror #31
    1fdc:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    1fe0:	0117fa08 	tsteq	r7, r8, lsl #20	; <UNPREDICTABLE>
    1fe4:	17400151 	smlsldne	r0, r0, r1, r1	; <UNPREDICTABLE>
    1fe8:	08025001 	stmdaeq	r2, {r0, ip, lr}
    1fec:	22160064 	andscs	r0, r6, #100	; 0x64
    1ff0:	7908003b 	stmdbvc	r8, {r0, r1, r3, r4, r5}
    1ff4:	0300001e 	movweq	r0, #30
    1ff8:	17000020 	strne	r0, [r0, -r0, lsr #32]
    1ffc:	0a035001 	beq	d6008 <__Stack_Size+0xd5c08>
    2000:	160001f4 			; <UNDEFINED> instruction: 0x160001f4
    2004:	08003b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, sp}
    2008:	00001ed0 	ldrdeq	r1, [r0], -r0
    200c:	00002022 	andeq	r2, r0, r2, lsr #32
    2010:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2014:	01177d08 	tsteq	r7, r8, lsl #26
    2018:	173e0151 			; <UNDEFINED> instruction: 0x173e0151
    201c:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2020:	36160064 	ldrcc	r0, [r6], -r4, rrx
    2024:	d008003b 	andle	r0, r8, fp, lsr r0
    2028:	4100001e 	tstmi	r0, lr, lsl r0
    202c:	17000020 	strne	r0, [r0, -r0, lsr #32]
    2030:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2034:	5101177d 	tstpl	r1, sp, ror r7
    2038:	01174001 	tsteq	r7, r1
    203c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2040:	3b441b00 	blcc	1108c48 <__Stack_Size+0x1108848>
    2044:	1ed00800 	cdpne	8, 13, cr0, cr0, cr0, {0}
    2048:	01170000 	tsteq	r7, r0
    204c:	fa080252 	blx	20299c <__Stack_Size+0x20259c>
    2050:	01510117 	cmpeq	r1, r7, lsl r1
    2054:	50011743 	andpl	r1, r1, r3, asr #14
    2058:	00640802 	rsbeq	r0, r4, r2, lsl #16
    205c:	09e92600 	stmibeq	r9!, {r9, sl, sp}^
    2060:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    2064:	003b4402 	eorseq	r4, fp, r2, lsl #8
    2068:	00007e08 	andeq	r7, r0, r8, lsl #28
    206c:	e29c0100 	adds	r0, ip, #0, 2
    2070:	16000021 	strne	r0, [r0], -r1, lsr #32
    2074:	08003b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, sp}
    2078:	00001ed0 	ldrdeq	r1, [r0], -r0
    207c:	00002092 	muleq	r0, r2, r0
    2080:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2084:	01177d08 	tsteq	r7, r8, lsl #26
    2088:	17460151 	smlsldne	r0, r6, r1, r1
    208c:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2090:	56160064 	ldrpl	r0, [r6], -r4, rrx
    2094:	7908003b 	stmdbvc	r8, {r0, r1, r3, r4, r5}
    2098:	a600001e 			; <UNDEFINED> instruction: 0xa600001e
    209c:	17000020 	strne	r0, [r0, -r0, lsr #32]
    20a0:	08025001 	stmdaeq	r2, {r0, ip, lr}
    20a4:	6016007d 	andsvs	r0, r6, sp, ror r0
    20a8:	d008003b 	andle	r0, r8, fp, lsr r0
    20ac:	c500001e 	strgt	r0, [r0, #-30]
    20b0:	17000020 	strne	r0, [r0, -r0, lsr #32]
    20b4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    20b8:	5101177d 	tstpl	r1, sp, ror r7
    20bc:	01174801 	tsteq	r7, r1, lsl #16
    20c0:	64080250 	strvs	r0, [r8], #-592	; 0x250
    20c4:	3b6a1600 	blcc	1a878cc <__Stack_Size+0x1a874cc>
    20c8:	1ed00800 	cdpne	8, 13, cr0, cr0, cr0, {0}
    20cc:	20e40000 	rsccs	r0, r4, r0
    20d0:	01170000 	tsteq	r7, r0
    20d4:	7d080252 	sfmvc	f0, 4, [r8, #-328]	; 0xfffffeb8
    20d8:	01510117 	cmpeq	r1, r7, lsl r1
    20dc:	50011744 	andpl	r1, r1, r4, asr #14
    20e0:	00640802 	rsbeq	r0, r4, r2, lsl #16
    20e4:	003b7016 	eorseq	r7, fp, r6, lsl r0
    20e8:	001e7908 	andseq	r7, lr, r8, lsl #18
    20ec:	0020f800 	eoreq	pc, r0, r0, lsl #16
    20f0:	50011700 	andpl	r1, r1, r0, lsl #14
    20f4:	007d0802 	rsbseq	r0, sp, r2, lsl #16
    20f8:	003b7c16 	eorseq	r7, fp, r6, lsl ip
    20fc:	001ed008 	andseq	sp, lr, r8
    2100:	00211800 	eoreq	r1, r1, r0, lsl #16
    2104:	52011700 	andpl	r1, r1, #0, 14
    2108:	01f40a03 	mvnseq	r0, r3, lsl #20
    210c:	01510117 	cmpeq	r1, r7, lsl r1
    2110:	50011746 	andpl	r1, r1, r6, asr #14
    2114:	00640802 	rsbeq	r0, r4, r2, lsl #16
    2118:	003b8216 	eorseq	r8, fp, r6, lsl r2
    211c:	001e7908 	andseq	r7, lr, r8, lsl #18
    2120:	00212c00 	eoreq	r2, r1, r0, lsl #24
    2124:	50011700 	andpl	r1, r1, r0, lsl #14
    2128:	007d0802 	rsbseq	r0, sp, r2, lsl #16
    212c:	003b8c16 	eorseq	r8, fp, r6, lsl ip
    2130:	001ed008 	andseq	sp, lr, r8
    2134:	00214b00 	eoreq	r4, r1, r0, lsl #22
    2138:	52011700 	andpl	r1, r1, #0, 14
    213c:	177d0802 	ldrbne	r0, [sp, -r2, lsl #16]!
    2140:	49015101 	stmdbmi	r1, {r0, r8, ip, lr}
    2144:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2148:	16006408 	strne	r6, [r0], -r8, lsl #8
    214c:	08003b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, sp}
    2150:	00001e79 	andeq	r1, r0, r9, ror lr
    2154:	0000215f 	andeq	r2, r0, pc, asr r1
    2158:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    215c:	16007d08 	strne	r7, [r0], -r8, lsl #26
    2160:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
    2164:	00001ed0 	ldrdeq	r1, [r0], -r0
    2168:	0000217e 	andeq	r2, r0, lr, ror r1
    216c:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2170:	01177d08 	tsteq	r7, r8, lsl #26
    2174:	17480151 	smlsldne	r0, r8, r1, r1
    2178:	08025001 	stmdaeq	r2, {r0, ip, lr}
    217c:	a6160064 	ldrge	r0, [r6], -r4, rrx
    2180:	d008003b 	andle	r0, r8, fp, lsr r0
    2184:	9d00001e 	stcls	0, cr0, [r0, #-120]	; 0xffffff88
    2188:	17000021 	strne	r0, [r0, -r1, lsr #32]
    218c:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2190:	5101177d 	tstpl	r1, sp, ror r7
    2194:	01174401 	tsteq	r7, r1, lsl #8
    2198:	64080250 	strvs	r0, [r8], #-592	; 0x250
    219c:	3bac1600 	blcc	feb079a4 <SCS_BASE+0x1eaf99a4>
    21a0:	1e790800 	cdpne	8, 7, cr0, cr9, cr0, {0}
    21a4:	21b10000 			; <UNDEFINED> instruction: 0x21b10000
    21a8:	01170000 	tsteq	r7, r0
    21ac:	7d080250 	sfmvc	f0, 4, [r8, #-320]	; 0xfffffec0
    21b0:	3bb81600 	blcc	fee079b8 <SCS_BASE+0x1edf99b8>
    21b4:	1ed00800 	cdpne	8, 13, cr0, cr0, cr0, {0}
    21b8:	21d10000 	bicscs	r0, r1, r0
    21bc:	01170000 	tsteq	r7, r0
    21c0:	f40a0352 	vst2.16	{d0-d3}, [sl :64], r2
    21c4:	51011701 	tstpl	r1, r1, lsl #14
    21c8:	01174601 	tsteq	r7, r1, lsl #12
    21cc:	64080250 	strvs	r0, [r8], #-592	; 0x250
    21d0:	3bc21b00 	blcc	ff088dd8 <SCS_BASE+0x1f07add8>
    21d4:	1e790800 	cdpne	8, 7, cr0, cr9, cr0, {0}
    21d8:	01170000 	tsteq	r7, r0
    21dc:	7d080250 	sfmvc	f0, 4, [r8, #-320]	; 0xfffffec0
    21e0:	5f260000 	svcpl	0x00260000
    21e4:	01000005 	tsteq	r0, r5
    21e8:	3bc2029e 	blcc	ff082c68 <SCS_BASE+0x1f074c68>
    21ec:	01020800 	tsteq	r2, r0, lsl #16
    21f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    21f4:	000024c4 	andeq	r2, r0, r4, asr #9
    21f8:	01007a2c 	tsteq	r0, ip, lsr #20
    21fc:	0691029f 			; <UNDEFINED> instruction: 0x0691029f
    2200:	0be20000 	bleq	ff882208 <SCS_BASE+0x1f874208>
    2204:	cc160000 	ldcgt	0, cr0, [r6], {-0}
    2208:	4808003b 	stmdami	r8, {r0, r1, r3, r4, r5}
    220c:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2210:	17000022 	strne	r0, [r0, -r2, lsr #32]
    2214:	03055001 	movweq	r5, #20481	; 0x5001
    2218:	080062d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sp, lr}
    221c:	3bd21600 	blcc	ff487a24 <SCS_BASE+0x1f479a24>
    2220:	11de0800 	bicsne	r0, lr, r0, lsl #16
    2224:	22300000 	eorscs	r0, r0, #0
    2228:	01170000 	tsteq	r7, r0
    222c:	00340150 	eorseq	r0, r4, r0, asr r1
    2230:	003bd816 	eorseq	sp, fp, r6, lsl r8
    2234:	0011de08 	andseq	sp, r1, r8, lsl #28
    2238:	00224300 	eoreq	r4, r2, r0, lsl #6
    223c:	50011700 	andpl	r1, r1, r0, lsl #14
    2240:	16003301 	strne	r3, [r0], -r1, lsl #6
    2244:	08003bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp}
    2248:	00000b48 	andeq	r0, r0, r8, asr #22
    224c:	0000225a 	andeq	r2, r0, sl, asr r2
    2250:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2254:	0062e903 	rsbeq	lr, r2, r3, lsl #18
    2258:	e8160008 	ldmda	r6, {r3}
    225c:	3708003b 	smladxcc	r8, fp, r0, r0
    2260:	78000030 	stmdavc	r0, {r4, r5}
    2264:	17000022 	strne	r0, [r0, -r2, lsr #32]
    2268:	0a035101 	beq	d6674 <__Stack_Size+0xd6274>
    226c:	01172000 	tsteq	r7, r0
    2270:	000c0550 	andeq	r0, ip, r0, asr r5
    2274:	00400110 	subeq	r0, r0, r0, lsl r1
    2278:	003bf216 	eorseq	pc, fp, r6, lsl r2	; <UNPREDICTABLE>
    227c:	00302108 	eorseq	r2, r0, r8, lsl #2
    2280:	00229600 	eoreq	r9, r2, r0, lsl #12
    2284:	51011700 	tstpl	r1, r0, lsl #14
    2288:	20000a03 	andcs	r0, r0, r3, lsl #20
    228c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2290:	010c000c 	tsteq	ip, ip
    2294:	f8160040 			; <UNDEFINED> instruction: 0xf8160040
    2298:	7908003b 	stmdbvc	r8, {r0, r1, r3, r4, r5}
    229c:	aa00001e 	bge	231c <__Stack_Size+0x1f1c>
    22a0:	17000022 	strne	r0, [r0, -r2, lsr #32]
    22a4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    22a8:	02160064 	andseq	r0, r6, #100	; 0x64
    22ac:	3708003c 	smladxcc	r8, ip, r0, r0
    22b0:	c8000030 	stmdagt	r0, {r4, r5}
    22b4:	17000022 	strne	r0, [r0, -r2, lsr #32]
    22b8:	0a035101 	beq	d66c4 <__Stack_Size+0xd62c4>
    22bc:	01172000 	tsteq	r7, r0
    22c0:	000c0550 	andeq	r0, ip, r0, asr r5
    22c4:	0040010c 	subeq	r0, r0, ip, lsl #2
    22c8:	003c0c16 	eorseq	r0, ip, r6, lsl ip
    22cc:	00302108 	eorseq	r2, r0, r8, lsl #2
    22d0:	0022e600 	eoreq	lr, r2, r0, lsl #12
    22d4:	51011700 	tstpl	r1, r0, lsl #14
    22d8:	40000a03 	andmi	r0, r0, r3, lsl #20
    22dc:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    22e0:	010c000c 	tsteq	ip, ip
    22e4:	12160040 	andsne	r0, r6, #64	; 0x40
    22e8:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    22ec:	fa00001e 	blx	236c <__Stack_Size+0x1f6c>
    22f0:	17000022 	strne	r0, [r0, -r2, lsr #32]
    22f4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    22f8:	1c160064 	ldcne	0, cr0, [r6], {100}	; 0x64
    22fc:	3708003c 	smladxcc	r8, ip, r0, r0
    2300:	18000030 	stmdane	r0, {r4, r5}
    2304:	17000023 	strne	r0, [r0, -r3, lsr #32]
    2308:	0a035101 	beq	d6714 <__Stack_Size+0xd6314>
    230c:	01174000 	tsteq	r7, r0
    2310:	000c0550 	andeq	r0, ip, r0, asr r5
    2314:	0040010c 	subeq	r0, r0, ip, lsl #2
    2318:	003c2616 	eorseq	r2, ip, r6, lsl r6
    231c:	00302108 	eorseq	r2, r0, r8, lsl #2
    2320:	00233600 	eoreq	r3, r3, r0, lsl #12
    2324:	51011700 	tstpl	r1, r0, lsl #14
    2328:	80000b03 	andhi	r0, r0, r3, lsl #22
    232c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2330:	010c000c 	tsteq	ip, ip
    2334:	2c160040 	ldccs	0, cr0, [r6], {64}	; 0x40
    2338:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    233c:	4a00001e 	bmi	23bc <__Stack_Size+0x1fbc>
    2340:	17000023 	strne	r0, [r0, -r3, lsr #32]
    2344:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2348:	36160064 	ldrcc	r0, [r6], -r4, rrx
    234c:	3708003c 	smladxcc	r8, ip, r0, r0
    2350:	68000030 	stmdavs	r0, {r4, r5}
    2354:	17000023 	strne	r0, [r0, -r3, lsr #32]
    2358:	0b035101 	bleq	d6764 <__Stack_Size+0xd6364>
    235c:	01178000 	tsteq	r7, r0
    2360:	000c0550 	andeq	r0, ip, r0, asr r5
    2364:	0040010c 	subeq	r0, r0, ip, lsl #2
    2368:	003c4016 	eorseq	r4, ip, r6, lsl r0
    236c:	00302108 	eorseq	r2, r0, r8, lsl #2
    2370:	00238600 	eoreq	r8, r3, r0, lsl #12
    2374:	51011700 	tstpl	r1, r0, lsl #14
    2378:	40000a03 	andmi	r0, r0, r3, lsl #20
    237c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2380:	0110000c 	tsteq	r0, ip
    2384:	46160040 	ldrmi	r0, [r6], -r0, asr #32
    2388:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    238c:	9a00001e 	bls	240c <__Stack_Size+0x200c>
    2390:	17000023 	strne	r0, [r0, -r3, lsr #32]
    2394:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2398:	50160064 	andspl	r0, r6, r4, rrx
    239c:	3708003c 	smladxcc	r8, ip, r0, r0
    23a0:	b8000030 	stmdalt	r0, {r4, r5}
    23a4:	17000023 	strne	r0, [r0, -r3, lsr #32]
    23a8:	0a035101 	beq	d67b4 <__Stack_Size+0xd63b4>
    23ac:	01174000 	tsteq	r7, r0
    23b0:	000c0550 	andeq	r0, ip, r0, asr r5
    23b4:	00400110 	subeq	r0, r0, r0, lsl r1
    23b8:	003c5a16 	eorseq	r5, ip, r6, lsl sl
    23bc:	00302108 	eorseq	r2, r0, r8, lsl #2
    23c0:	0023d600 	eoreq	sp, r3, r0, lsl #12
    23c4:	51011700 	tstpl	r1, r0, lsl #14
    23c8:	80000b03 	andhi	r0, r0, r3, lsl #22
    23cc:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    23d0:	0110000c 	tsteq	r0, ip
    23d4:	60160040 	andsvs	r0, r6, r0, asr #32
    23d8:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    23dc:	ea00001e 	b	245c <__Stack_Size+0x205c>
    23e0:	17000023 	strne	r0, [r0, -r3, lsr #32]
    23e4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    23e8:	6a160064 	bvs	582580 <__Stack_Size+0x582180>
    23ec:	3708003c 	smladxcc	r8, ip, r0, r0
    23f0:	08000030 	stmdaeq	r0, {r4, r5}
    23f4:	17000024 	strne	r0, [r0, -r4, lsr #32]
    23f8:	0b035101 	bleq	d6804 <__Stack_Size+0xd6404>
    23fc:	01178000 	tsteq	r7, r0
    2400:	000c0550 	andeq	r0, ip, r0, asr r5
    2404:	00400110 	subeq	r0, r0, r0, lsl r1
    2408:	003c7416 	eorseq	r7, ip, r6, lsl r4
    240c:	00302108 	eorseq	r2, r0, r8, lsl #2
    2410:	00242600 	eoreq	r2, r4, r0, lsl #12
    2414:	51011700 	tstpl	r1, r0, lsl #14
    2418:	10000a03 	andne	r0, r0, r3, lsl #20
    241c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2420:	010c000c 	tsteq	ip, ip
    2424:	7a160040 	bvc	58252c <__Stack_Size+0x58212c>
    2428:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    242c:	3a00001e 	bcc	24ac <__Stack_Size+0x20ac>
    2430:	17000024 	strne	r0, [r0, -r4, lsr #32]
    2434:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2438:	84160064 	ldrhi	r0, [r6], #-100	; 0x64
    243c:	3708003c 	smladxcc	r8, ip, r0, r0
    2440:	58000030 	stmdapl	r0, {r4, r5}
    2444:	17000024 	strne	r0, [r0, -r4, lsr #32]
    2448:	0a035101 	beq	d6854 <__Stack_Size+0xd6454>
    244c:	01171000 	tsteq	r7, r0
    2450:	000c0550 	andeq	r0, ip, r0, asr r5
    2454:	0040010c 	subeq	r0, r0, ip, lsl #2
    2458:	003c8e16 	eorseq	r8, ip, r6, lsl lr
    245c:	00302108 	eorseq	r2, r0, r8, lsl #2
    2460:	00247600 	eoreq	r7, r4, r0, lsl #12
    2464:	51011700 	tstpl	r1, r0, lsl #14
    2468:	20000a03 	andcs	r0, r0, r3, lsl #20
    246c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2470:	0110000c 	tsteq	r0, ip
    2474:	94160040 	ldrls	r0, [r6], #-64	; 0x40
    2478:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    247c:	8a00001e 	bhi	24fc <__Stack_Size+0x20fc>
    2480:	17000024 	strne	r0, [r0, -r4, lsr #32]
    2484:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2488:	9a160064 	bls	582620 <__Stack_Size+0x582220>
    248c:	4808003c 	stmdami	r8, {r2, r3, r4, r5}
    2490:	a100000b 	tstge	r0, fp
    2494:	17000024 	strne	r0, [r0, -r4, lsr #32]
    2498:	03055001 	movweq	r5, #20481	; 0x5001
    249c:	080062f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sp, lr}
    24a0:	3ca01600 	stccc	6, cr1, [r0]
    24a4:	12700800 	rsbsne	r0, r0, #0, 16
    24a8:	24b40000 	ldrtcs	r0, [r4], #0
    24ac:	01170000 	tsteq	r7, r0
    24b0:	00340150 	eorseq	r0, r4, r0, asr r1
    24b4:	003ca61a 	eorseq	sl, ip, sl, lsl r6
    24b8:	00127008 	andseq	r7, r2, r8
    24bc:	50011700 	andpl	r1, r1, r0, lsl #14
    24c0:	00003301 	andeq	r3, r0, r1, lsl #6
    24c4:	00020313 	andeq	r0, r2, r3, lsl r3
    24c8:	02f60100 	rscseq	r0, r6, #0, 2
    24cc:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
    24d0:	00000034 	andeq	r0, r0, r4, lsr r0
    24d4:	256a9c01 	strbcs	r9, [sl, #-3073]!	; 0xc01
    24d8:	bb1e0000 	bllt	7824e0 <__Stack_Size+0x7820e0>
    24dc:	01000001 	tsteq	r0, r1
    24e0:	06d002f6 			; <UNDEFINED> instruction: 0x06d002f6
    24e4:	0c230000 	stceq	0, cr0, [r3], #-0
    24e8:	531e0000 	tstpl	lr, #0
    24ec:	0100000d 	tsteq	r0, sp
    24f0:	13a502f6 			; <UNDEFINED> instruction: 0x13a502f6
    24f4:	0c4f0000 	mareq	acc0, r0, pc
    24f8:	5f1e0000 	svcpl	0x001e0000
    24fc:	0100000d 	tsteq	r0, sp
    2500:	13a502f6 			; <UNDEFINED> instruction: 0x13a502f6
    2504:	0c7b0000 	ldcleq	0, cr0, [fp], #-0
    2508:	d6160000 	ldrle	r0, [r6], -r0
    250c:	9a08003c 	bls	202604 <__Stack_Size+0x202204>
    2510:	2400000e 	strcs	r0, [r0], #-14
    2514:	17000025 	strne	r0, [r0, -r5, lsr #32]
    2518:	0a035101 	beq	d6924 <__Stack_Size+0xd6524>
    251c:	011702bc 			; <UNDEFINED> instruction: 0x011702bc
    2520:	00340150 	eorseq	r0, r4, r0, asr r1
    2524:	003cde16 	eorseq	sp, ip, r6, lsl lr
    2528:	000e9a08 	andeq	r9, lr, r8, lsl #20
    252c:	00253e00 	eoreq	r3, r5, r0, lsl #28
    2530:	51011700 	tstpl	r1, r0, lsl #14
    2534:	fd440b03 	stc2l	11, cr0, [r4, #-12]
    2538:	01500117 	cmpeq	r0, r7, lsl r1
    253c:	e6160033 			; <UNDEFINED> instruction: 0xe6160033
    2540:	7908003c 	stmdbvc	r8, {r2, r3, r4, r5}
    2544:	5300001e 	movwpl	r0, #30
    2548:	17000025 	strne	r0, [r0, -r5, lsr #32]
    254c:	0a035001 	beq	d6558 <__Stack_Size+0xd6158>
    2550:	1a0003e8 	bne	34f8 <__Stack_Size+0x30f8>
    2554:	08003cee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp, ip, sp}
    2558:	00001124 	andeq	r1, r0, r4, lsr #2
    255c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2560:	01170075 	tsteq	r7, r5, ror r0
    2564:	00760250 	rsbseq	r0, r6, r0, asr r2
    2568:	6b270000 	blvs	9c2570 <__Stack_Size+0x9c2170>
    256c:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
    2570:	3208003c 	andcc	r0, r8, #60	; 0x3c
    2574:	01000000 	mrseq	r0, (UNDEF: 0)
    2578:	0026079c 	mlaeq	r6, ip, r7, r0
    257c:	06782800 	ldrbteq	r2, [r8], -r0, lsl #16
    2580:	0ca70000 	stceq	0, cr0, [r7]
    2584:	84280000 	strthi	r0, [r8], #-0
    2588:	de000006 	cdple	0, 0, cr0, cr0, cr6, {0}
    258c:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    2590:	00000000 	andeq	r0, r0, r0
    2594:	000025f0 	strdeq	r2, [r0], -r0
    2598:	00067828 	andeq	r7, r6, r8, lsr #16
    259c:	000d1500 	andeq	r1, sp, r0, lsl #10
    25a0:	06842800 	streq	r2, [r4], r0, lsl #16
    25a4:	0d360000 	ldceq	0, cr0, [r6, #-0]
    25a8:	12160000 	andsne	r0, r6, #0
    25ac:	9a08003d 	bls	2026a8 <__Stack_Size+0x2022a8>
    25b0:	c400000e 	strgt	r0, [r0], #-14
    25b4:	17000025 	strne	r0, [r0, -r5, lsr #32]
    25b8:	0a035101 	beq	d69c4 <__Stack_Size+0xd65c4>
    25bc:	011703ff 			; <UNDEFINED> instruction: 0x011703ff
    25c0:	00340150 	eorseq	r0, r4, r0, asr r1
    25c4:	003d1c16 	eorseq	r1, sp, r6, lsl ip
    25c8:	000e9a08 	andeq	r9, lr, r8, lsl #20
    25cc:	0025de00 	eoreq	sp, r5, r0, lsl #28
    25d0:	51011700 	tstpl	r1, r0, lsl #14
    25d4:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
    25d8:	01500117 	cmpeq	r0, r7, lsl r1
    25dc:	281b0033 	ldmdacs	fp, {r0, r1, r4, r5}
    25e0:	7908003d 	stmdbvc	r8, {r0, r2, r3, r4, r5}
    25e4:	1700001e 	smladne	r0, lr, r0, r0
    25e8:	0a035001 	beq	d65f4 <__Stack_Size+0xd61f4>
    25ec:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    25f0:	003d041a 	eorseq	r0, sp, sl, lsl r4
    25f4:	0016d908 	andseq	sp, r6, r8, lsl #18
    25f8:	51011700 	tstpl	r1, r0, lsl #14
    25fc:	17007502 	strne	r7, [r0, -r2, lsl #10]
    2600:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2604:	13000064 	movwne	r0, #100	; 0x64
    2608:	00000b9d 	muleq	r0, sp, fp
    260c:	2a03b801 	bcs	f0618 <__Stack_Size+0xf0218>
    2610:	7a08003d 	bvc	20270c <__Stack_Size+0x20230c>
    2614:	01000000 	mrseq	r0, (UNDEF: 0)
    2618:	0027219c 	mlaeq	r7, ip, r1, r2
    261c:	06ea1e00 	strbteq	r1, [sl], r0, lsl #28
    2620:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2624:	00006903 	andeq	r6, r0, r3, lsl #18
    2628:	000d5700 	andeq	r5, sp, r0, lsl #14
    262c:	00df1e00 	sbcseq	r1, pc, r0, lsl #28
    2630:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2634:	00004503 	andeq	r4, r0, r3, lsl #10
    2638:	000d7800 	andeq	r7, sp, r0, lsl #16
    263c:	059f1900 	ldreq	r1, [pc, #2304]	; 2f44 <__Stack_Size+0x2b44>
    2640:	bb010000 	bllt	42648 <__Stack_Size+0x42248>
    2644:	00066003 	andeq	r6, r6, r3
    2648:	60910200 	addsvs	r0, r1, r0, lsl #4
    264c:	003d3816 	eorseq	r3, sp, r6, lsl r8
    2650:	0032c008 	eorseq	ip, r2, r8
    2654:	00266000 	eoreq	r6, r6, r0
    2658:	50011700 	andpl	r1, r1, r0, lsl #14
    265c:	00007d02 	andeq	r7, r0, r2, lsl #26
    2660:	003d5a16 	eorseq	r5, sp, r6, lsl sl
    2664:	0032d708 	eorseq	sp, r2, r8, lsl #14
    2668:	00267700 	eoreq	r7, r6, r0, lsl #14
    266c:	50011700 	andpl	r1, r1, r0, lsl #14
    2670:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    2674:	16004001 	strne	r4, [r0], -r1
    2678:	08003d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, sp}
    267c:	00001e79 	andeq	r1, r0, r9, ror lr
    2680:	0000268a 	andeq	r2, r0, sl, lsl #13
    2684:	01500117 	cmpeq	r0, r7, lsl r1
    2688:	6816003a 	ldmdavs	r6, {r1, r3, r4, r5}
    268c:	e808003d 	stmda	r8, {r0, r2, r3, r4, r5}
    2690:	a7000032 	smladxge	r0, r2, r0, r0
    2694:	17000026 	strne	r0, [r0, -r6, lsr #32]
    2698:	7d025101 	stfvcs	f5, [r2, #-4]
    269c:	50011700 	andpl	r1, r1, r0, lsl #14
    26a0:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    26a4:	16004001 	strne	r4, [r0], -r1
    26a8:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
    26ac:	000032fe 	strdeq	r3, [r0], -lr
    26b0:	000026ca 	andeq	r2, r0, sl, asr #13
    26b4:	01520117 	cmpeq	r2, r7, lsl r1
    26b8:	51011731 	tstpl	r1, r1, lsr r7
    26bc:	05250a03 	streq	r0, [r5, #-2563]!	; 0xa03
    26c0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    26c4:	0138000c 	teqeq	r8, ip
    26c8:	82160040 	andshi	r0, r6, #64	; 0x40
    26cc:	d708003d 	smladxle	r8, sp, r0, r0
    26d0:	e1000032 	tst	r0, r2, lsr r0
    26d4:	17000026 	strne	r0, [r0, -r6, lsr #32]
    26d8:	0c055001 	stceq	0, cr5, [r5], {1}
    26dc:	40004800 	andmi	r4, r0, r0, lsl #16
    26e0:	3d881600 	stccc	6, cr1, [r8]
    26e4:	1e790800 	cdpne	8, 7, cr0, cr9, cr0, {0}
    26e8:	26f40000 	ldrbtcs	r0, [r4], r0
    26ec:	01170000 	tsteq	r7, r0
    26f0:	003a0150 	eorseq	r0, sl, r0, asr r1
    26f4:	003d9016 	eorseq	r9, sp, r6, lsl r0
    26f8:	0032e808 	eorseq	lr, r2, r8, lsl #16
    26fc:	00271100 	eoreq	r1, r7, r0, lsl #2
    2700:	51011700 	tstpl	r1, r0, lsl #14
    2704:	17007d02 	strne	r7, [r0, -r2, lsl #26]
    2708:	0c055001 	stceq	0, cr5, [r5], {1}
    270c:	40004800 	andmi	r4, r0, r0, lsl #16
    2710:	3d981a00 	vldrcc	s2, [r8]
    2714:	304d0800 	subcc	r0, sp, r0, lsl #16
    2718:	01170000 	tsteq	r7, r0
    271c:	00310151 	eorseq	r0, r1, r1, asr r1
    2720:	01582600 	cmpeq	r8, r0, lsl #12
    2724:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    2728:	003da402 	eorseq	sl, sp, r2, lsl #8
    272c:	00003008 	andeq	r3, r0, r8
    2730:	8c9c0100 	ldfhis	f0, [ip], {0}
    2734:	15000027 	strne	r0, [r0, #-39]	; 0x27
    2738:	08003daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, ip, sp}
    273c:	000006d6 	ldrdeq	r0, [r0], -r6
    2740:	003dae15 	eorseq	sl, sp, r5, lsl lr
    2744:	00082e08 	andeq	r2, r8, r8, lsl #28
    2748:	3db21500 	cfldr32cc	mvfx1, [r2]
    274c:	08a90800 	stmiaeq	r9!, {fp}
    2750:	b6150000 	ldrlt	r0, [r5], -r0
    2754:	2c08003d 	stccs	0, cr0, [r8], {61}	; 0x3d
    2758:	1500001e 	strne	r0, [r0, #-30]
    275c:	08003dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp}
    2760:	00001c5a 	andeq	r1, r0, sl, asr ip
    2764:	003dc216 	eorseq	ip, sp, r6, lsl r2
    2768:	00331908 	eorseq	r1, r3, r8, lsl #18
    276c:	00277c00 	eoreq	r7, r7, r0, lsl #24
    2770:	51011700 	tstpl	r1, r0, lsl #14
    2774:	01173101 	tsteq	r7, r1, lsl #2
    2778:	00300150 	eorseq	r0, r0, r0, asr r1
    277c:	003dd01b 	eorseq	sp, sp, fp, lsl r0
    2780:	00260708 	eoreq	r0, r6, r8, lsl #14
    2784:	50011700 	andpl	r1, r1, r0, lsl #14
    2788:	00003201 	andeq	r3, r0, r1, lsl #4
    278c:	00066013 	andeq	r6, r6, r3, lsl r0
    2790:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    2794:	08003dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp}
    2798:	00000008 	andeq	r0, r0, r8
    279c:	27c99c01 	strbcs	r9, [r9, r1, lsl #24]
    27a0:	df1e0000 	svcle	0x001e0000
    27a4:	01000000 	mrseq	r0, (UNDEF: 0)
    27a8:	004503b3 	strheq	r0, [r5], #-51	; 0xffffffcd
    27ac:	0da40000 	stceq	0, cr0, [r4]
    27b0:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
    27b4:	0708003d 	smladxeq	r8, sp, r0, r0
    27b8:	17000026 	strne	r0, [r0, -r6, lsr #32]
    27bc:	f3035101 	vrhadd.u8	d5, d3, d1
    27c0:	01175001 	tsteq	r7, r1
    27c4:	00300150 	eorseq	r0, r0, r0, asr r1
    27c8:	0adb1f00 	beq	ff6ca3d0 <SCS_BASE+0x1f6bc3d0>
    27cc:	cf010000 	svcgt	0x00010000
    27d0:	00069101 	andeq	r9, r6, r1, lsl #2
    27d4:	005f3000 	subseq	r3, pc, r0
    27d8:	00016c08 	andeq	r6, r1, r8, lsl #24
    27dc:	fc9c0100 	ldc2	1, cr0, [ip], {0}
    27e0:	2e00002c 	cdpcs	0, 0, cr0, cr0, cr12, {1}
    27e4:	00000158 	andeq	r0, r0, r8, asr r1
    27e8:	9101d401 	tstls	r1, r1, lsl #8
    27ec:	f5000006 			; <UNDEFINED> instruction: 0xf5000006
    27f0:	2b000027 	blcs	2894 <__Stack_Size+0x2494>
    27f4:	0a2b2f00 	beq	ace3fc <__Stack_Size+0xacdffc>
    27f8:	da010000 	ble	42800 <__Stack_Size+0x42400>
    27fc:	00069101 	andeq	r9, r6, r1, lsl #2
    2800:	192f3200 	stmdbne	pc!, {r9, ip, sp}	; <UNPREDICTABLE>
    2804:	0100000b 	tsteq	r0, fp
    2808:	069101db 			; <UNDEFINED> instruction: 0x069101db
    280c:	14320000 	ldrtne	r0, [r2], #-0
    2810:	000001c2 	andeq	r0, r0, r2, asr #3
    2814:	9101df01 	tstls	r1, r1, lsl #30
    2818:	d0000006 	andle	r0, r0, r6
    281c:	1900000d 	stmdbne	r0, {r0, r2, r3}
    2820:	0000017a 	andeq	r0, r0, sl, ror r1
    2824:	7301e701 	movwvc	lr, #5889	; 0x1701
    2828:	02000000 	andeq	r0, r0, #0
    282c:	76195a91 			; <UNDEFINED> instruction: 0x76195a91
    2830:	01000001 	tsteq	r0, r1
    2834:	007301e8 	rsbseq	r0, r3, r8, ror #3
    2838:	91020000 	mrsls	r0, (UNDEF: 2)
    283c:	01bb195b 			; <UNDEFINED> instruction: 0x01bb195b
    2840:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    2844:	00069101 	andeq	r9, r6, r1, lsl #2
    2848:	5c910200 	lfmpl	f0, 4, [r1], {0}
    284c:	000d5319 	andeq	r5, sp, r9, lsl r3
    2850:	01ef0100 	mvneq	r0, r0, lsl #2
    2854:	000013a5 	andeq	r1, r0, r5, lsr #7
    2858:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
    285c:	00000d5f 	andeq	r0, r0, pc, asr sp
    2860:	a501f001 	strge	pc, [r1, #-1]
    2864:	02000013 	andeq	r0, r0, #19
    2868:	34146491 	ldrcc	r6, [r4], #-1169	; 0x491
    286c:	01000002 	tsteq	r0, r2
    2870:	069101f3 			; <UNDEFINED> instruction: 0x069101f3
    2874:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
    2878:	3f140000 	svccc	0x00140000
    287c:	01000002 	tsteq	r0, r2
    2880:	069101f4 			; <UNDEFINED> instruction: 0x069101f4
    2884:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    2888:	182d0000 	stmdane	sp!, {}	; <UNPREDICTABLE>
    288c:	16000000 	strne	r0, [r0], -r0
    2890:	2e000029 	cdpcs	0, 0, cr0, cr0, cr9, {1}
    2894:	00000180 	andeq	r0, r0, r0, lsl #3
    2898:	9101fc01 	tstls	r1, r1, lsl #24	; <UNPREDICTABLE>
    289c:	a5000006 	strge	r0, [r0, #-6]
    28a0:	2b000028 	blcs	2948 <__Stack_Size+0x2548>
    28a4:	055f2e00 	ldrbeq	r2, [pc, #-3584]	; 1aac <__Stack_Size+0x16ac>
    28a8:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    28ac:	00069101 	andeq	r9, r6, r1, lsl #2
    28b0:	0028b700 	eoreq	fp, r8, r0, lsl #14
    28b4:	19002b00 	stmdbne	r0, {r8, r9, fp, sp}
    28b8:	00000d53 	andeq	r0, r0, r3, asr sp
    28bc:	a5020001 	strge	r0, [r2, #-1]
    28c0:	02000013 	andeq	r0, r0, #19
    28c4:	5f196891 	svcpl	0x00196891
    28c8:	0100000d 	tsteq	r0, sp
    28cc:	13a50201 			; <UNDEFINED> instruction: 0x13a50201
    28d0:	91020000 	mrsls	r0, (UNDEF: 2)
    28d4:	5f80156c 	svcpl	0x0080156c
    28d8:	1f7b0800 	svcne	0x007b0800
    28dc:	84150000 	ldrhi	r0, [r5], #-0
    28e0:	e208005f 	and	r0, r8, #95	; 0x5f
    28e4:	16000021 	strne	r0, [r0], -r1, lsr #32
    28e8:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
    28ec:	000013ac 	andeq	r1, r0, ip, lsr #7
    28f0:	00002900 	andeq	r2, r0, r0, lsl #18
    28f4:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    28f8:	01176891 			; <UNDEFINED> instruction: 0x01176891
    28fc:	00320150 	eorseq	r0, r2, r0, asr r1
    2900:	005f941a 	subseq	r9, pc, sl, lsl r4	; <UNPREDICTABLE>
    2904:	0013ac08 	andseq	sl, r3, r8, lsl #24
    2908:	51011700 	tstpl	r1, r0, lsl #14
    290c:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    2910:	31015001 	tstcc	r1, r1
    2914:	382d0000 	stmdacc	sp!, {}	; <UNPREDICTABLE>
    2918:	94000000 	strls	r0, [r0], #-0
    291c:	2e000029 	cdpcs	0, 0, cr0, cr0, cr9, {1}
    2920:	00000941 	andeq	r0, r0, r1, asr #18
    2924:	91020f01 	tstls	r2, r1, lsl #30
    2928:	31000006 	tstcc	r0, r6
    292c:	2b000029 	blcs	29d8 <__Stack_Size+0x25d8>
    2930:	5fa21600 	svcpl	0x00a21600
    2934:	30370800 	eorscc	r0, r7, r0, lsl #16
    2938:	294f0000 	stmdbcs	pc, {}^	; <UNPREDICTABLE>
    293c:	01170000 	tsteq	r7, r0
    2940:	000a0351 	andeq	r0, sl, r1, asr r3
    2944:	50011720 	andpl	r1, r1, r0, lsr #14
    2948:	10000c05 	andne	r0, r0, r5, lsl #24
    294c:	16004001 	strne	r4, [r0], -r1
    2950:	08005fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    2954:	00003021 	andeq	r3, r0, r1, lsr #32
    2958:	0000296d 	andeq	r2, r0, sp, ror #18
    295c:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2960:	1720000a 	strne	r0, [r0, -sl]!
    2964:	0c055001 	stceq	0, cr5, [r5], {1}
    2968:	40010c00 	andmi	r0, r1, r0, lsl #24
    296c:	5fb41600 	svcpl	0x00b41600
    2970:	0f5e0800 	svceq	0x005e0800
    2974:	29820000 	stmibcs	r2, {}	; <UNPREDICTABLE>
    2978:	01170000 	tsteq	r7, r0
    297c:	bc0a0350 	stclt	3, cr0, [sl], {80}	; 0x50
    2980:	c01a0002 	andsgt	r0, sl, r2
    2984:	7908005f 	stmdbvc	r8, {r0, r1, r2, r3, r4, r6}
    2988:	1700001e 	smladne	r0, lr, r0, r0
    298c:	0a035001 	beq	d6998 <__Stack_Size+0xd6598>
    2990:	000005dc 	ldrdeq	r0, [r0], -ip
    2994:	005fc030 	subseq	ip, pc, r0, lsr r0	; <UNPREDICTABLE>
    2998:	00005008 	andeq	r5, r0, r8
    299c:	002a8900 	eoreq	r8, sl, r0, lsl #18
    29a0:	01f82e00 	mvnseq	r2, r0, lsl #28
    29a4:	22010000 	andcs	r0, r1, #0
    29a8:	00069102 	andeq	r9, r6, r2, lsl #2
    29ac:	0029b300 	eoreq	fp, r9, r0, lsl #6
    29b0:	2e002b00 	vmlacs.f64	d2, d0, d0
    29b4:	0000061f 	andeq	r0, r0, pc, lsl r6
    29b8:	91022601 	tstls	r2, r1, lsl #12
    29bc:	c5000006 	strgt	r0, [r0, #-6]
    29c0:	2b000029 	blcs	2a6c <__Stack_Size+0x266c>
    29c4:	5fc83000 	svcpl	0x00c83000
    29c8:	000a0800 	andeq	r0, sl, r0, lsl #16
    29cc:	29f50000 	ldmibcs	r5!, {}^	; <UNPREDICTABLE>
    29d0:	032e0000 			; <UNDEFINED> instruction: 0x032e0000
    29d4:	01000002 	tsteq	r0, r2
    29d8:	0691021b 			; <UNDEFINED> instruction: 0x0691021b
    29dc:	29e40000 	stmibcs	r4!, {}^	; <UNPREDICTABLE>
    29e0:	002b0000 	eoreq	r0, fp, r0
    29e4:	005fd21a 	subseq	sp, pc, sl, lsl r2	; <UNPREDICTABLE>
    29e8:	0024c408 	eoreq	ip, r4, r8, lsl #8
    29ec:	50011700 	andpl	r1, r1, r0, lsl #14
    29f0:	005c9102 	subseq	r9, ip, r2, lsl #2
    29f4:	5fdc1600 	svcpl	0x00dc1600
    29f8:	30370800 	eorscc	r0, r7, r0, lsl #16
    29fc:	2a130000 	bcs	4c2a04 <__Stack_Size+0x4c2604>
    2a00:	01170000 	tsteq	r7, r0
    2a04:	000a0351 	andeq	r0, sl, r1, asr r3
    2a08:	50011720 	andpl	r1, r1, r0, lsr #14
    2a0c:	0c000c05 	stceq	12, cr0, [r0], {5}
    2a10:	16004001 	strne	r4, [r0], -r1
    2a14:	08005fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a18:	00003037 	andeq	r3, r0, r7, lsr r0
    2a1c:	00002a31 	andeq	r2, r0, r1, lsr sl
    2a20:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2a24:	1780000b 	strne	r0, [r0, fp]
    2a28:	0c055001 	stceq	0, cr5, [r5], {1}
    2a2c:	40010c00 	andmi	r0, r1, r0, lsl #24
    2a30:	5ff01600 	svcpl	0x00f01600
    2a34:	30210800 	eorcc	r0, r1, r0, lsl #16
    2a38:	2a4f0000 	bcs	13c2a40 <__Stack_Size+0x13c2640>
    2a3c:	01170000 	tsteq	r7, r0
    2a40:	000a0351 	andeq	r0, sl, r1, asr r3
    2a44:	50011740 	andpl	r1, r1, r0, asr #14
    2a48:	0c000c05 	stceq	12, cr0, [r0], {5}
    2a4c:	15004001 	strne	r4, [r0, #-1]
    2a50:	08005ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a54:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    2a58:	005ffe16 	subseq	pc, pc, r6, lsl lr	; <UNPREDICTABLE>
    2a5c:	00177a08 	andseq	r7, r7, r8, lsl #20
    2a60:	002a7200 	eoreq	r7, sl, r0, lsl #4
    2a64:	51011700 	tstpl	r1, r0, lsl #14
    2a68:	175a9102 	ldrbne	r9, [sl, -r2, lsl #2]
    2a6c:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2a70:	081a0064 	ldmdaeq	sl, {r2, r5, r6}
    2a74:	6b080060 	blvs	202bfc <__Stack_Size+0x2027fc>
    2a78:	17000006 	strne	r0, [r0, -r6]
    2a7c:	91025101 	tstls	r2, r1, lsl #2
    2a80:	5001175b 	andpl	r1, r1, fp, asr r7
    2a84:	00320802 	eorseq	r0, r2, r2, lsl #16
    2a88:	60103000 	andsvs	r3, r0, r0
    2a8c:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    2a90:	2c3a0000 	ldccs	0, cr0, [sl], #-0
    2a94:	412e0000 			; <UNDEFINED> instruction: 0x412e0000
    2a98:	01000009 	tsteq	r0, r9
    2a9c:	0691020f 	ldreq	r0, [r1], pc, lsl #4
    2aa0:	2aa80000 	bcs	fea02aa8 <SCS_BASE+0x1e9f4aa8>
    2aa4:	002b0000 	eoreq	r0, fp, r0
    2aa8:	00061f2e 	andeq	r1, r6, lr, lsr #30
    2aac:	02260100 	eoreq	r0, r6, #0, 2
    2ab0:	00000691 	muleq	r0, r1, r6
    2ab4:	00002aba 			; <UNDEFINED> instruction: 0x00002aba
    2ab8:	3a30002b 	bcc	c02b6c <__Stack_Size+0xc0276c>
    2abc:	0c080060 	stceq	0, cr0, [r8], {96}	; 0x60
    2ac0:	1c000000 	stcne	0, cr0, [r0], {-0}
    2ac4:	2e00002b 	cdpcs	0, 0, cr0, cr0, cr11, {1}
    2ac8:	000006f8 	strdeq	r0, [r0], -r8
    2acc:	91023701 	tstls	r2, r1, lsl #14
    2ad0:	d9000006 	stmdble	r0, {r1, r2}
    2ad4:	2b00002a 	blcs	2b84 <__Stack_Size+0x2784>
    2ad8:	069e3100 	ldreq	r3, [lr], r0, lsl #2
    2adc:	603a0000 	eorsvs	r0, sl, r0
    2ae0:	000c0800 	andeq	r0, ip, r0, lsl #16
    2ae4:	37010000 	strcc	r0, [r1, -r0]
    2ae8:	06c32802 	strbeq	r2, [r3], r2, lsl #16
    2aec:	0e550000 	cdpeq	0, 5, cr0, cr5, cr0, {0}
    2af0:	b7280000 	strlt	r0, [r8, -r0]!
    2af4:	68000006 	stmdavs	r0, {r1, r2}
    2af8:	2800000e 	stmdacs	r0, {r1, r2, r3}
    2afc:	000006ab 	andeq	r0, r0, fp, lsr #13
    2b00:	00000e7b 	andeq	r0, r0, fp, ror lr
    2b04:	0060421a 	rsbeq	r4, r0, sl, lsl r2
    2b08:	00112408 	andseq	r2, r1, r8, lsl #8
    2b0c:	51011700 	tstpl	r1, r0, lsl #14
    2b10:	17007502 	strne	r7, [r0, -r2, lsl #10]
    2b14:	74025001 	strvc	r5, [r2], #-1
    2b18:	00000000 	andeq	r0, r0, r0
    2b1c:	00604c30 	rsbeq	r4, r0, r0, lsr ip
    2b20:	00000a08 	andeq	r0, r0, r8, lsl #20
    2b24:	002b5800 	eoreq	r5, fp, r0, lsl #16
    2b28:	062e2e00 	strteq	r2, [lr], -r0, lsl #28
    2b2c:	3b010000 	blcc	42b34 <__Stack_Size+0x42734>
    2b30:	00069102 	andeq	r9, r6, r2, lsl #2
    2b34:	002b3b00 	eoreq	r3, fp, r0, lsl #22
    2b38:	1a002b00 	bne	d740 <__Stack_Size+0xd340>
    2b3c:	08006056 	stmdaeq	r0, {r1, r2, r4, r6, sp, lr}
    2b40:	0000144d 	andeq	r1, r0, sp, asr #8
    2b44:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2b48:	01170075 	tsteq	r7, r5, ror r0
    2b4c:	00740251 	rsbseq	r0, r4, r1, asr r2
    2b50:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2b54:	00005c91 	muleq	r0, r1, ip
    2b58:	00605c30 	rsbeq	r5, r0, r0, lsr ip
    2b5c:	00000a08 	andeq	r0, r0, r8, lsl #20
    2b60:	002b8800 	eoreq	r8, fp, r0, lsl #16
    2b64:	02032e00 	andeq	r2, r3, #0, 28
    2b68:	1b010000 	blne	42b70 <__Stack_Size+0x42770>
    2b6c:	00069102 	andeq	r9, r6, r2, lsl #2
    2b70:	002b7700 	eoreq	r7, fp, r0, lsl #14
    2b74:	1a002b00 	bne	d77c <__Stack_Size+0xd37c>
    2b78:	08006066 	stmdaeq	r0, {r1, r2, r5, r6, sp, lr}
    2b7c:	000024c4 	andeq	r2, r0, r4, asr #9
    2b80:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2b84:	00005c91 	muleq	r0, r1, ip
    2b88:	00606c30 	rsbeq	r6, r0, r0, lsr ip
    2b8c:	00000a08 	andeq	r0, r0, r8, lsl #20
    2b90:	002bb800 	eoreq	fp, fp, r0, lsl #16
    2b94:	073f2e00 	ldreq	r2, [pc, -r0, lsl #28]!
    2b98:	44010000 	strmi	r0, [r1], #-0
    2b9c:	00069102 	andeq	r9, r6, r2, lsl #2
    2ba0:	002ba700 	eoreq	sl, fp, r0, lsl #14
    2ba4:	1a002b00 	bne	d7ac <__Stack_Size+0xd3ac>
    2ba8:	08006076 	stmdaeq	r0, {r1, r2, r4, r5, r6, sp, lr}
    2bac:	000014f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2bb0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2bb4:	00005c91 	muleq	r0, r1, ip
    2bb8:	00601a16 	rsbeq	r1, r0, r6, lsl sl
    2bbc:	00303708 	eorseq	r3, r0, r8, lsl #14
    2bc0:	002bd600 	eoreq	sp, fp, r0, lsl #12
    2bc4:	51011700 	tstpl	r1, r0, lsl #14
    2bc8:	40000a03 	andmi	r0, r0, r3, lsl #20
    2bcc:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2bd0:	010c000c 	tsteq	ip, ip
    2bd4:	24160040 	ldrcs	r0, [r6], #-64	; 0x40
    2bd8:	21080060 	tstcs	r8, r0, rrx
    2bdc:	f4000030 	vst4.8	{d0-d3}, [r0 :256], r0
    2be0:	1700002b 	strne	r0, [r0, -fp, lsr #32]
    2be4:	0b035101 	bleq	d6ff0 <__Stack_Size+0xd6bf0>
    2be8:	01178000 	tsteq	r7, r0
    2bec:	000c0550 	andeq	r0, ip, r0, asr r5
    2bf0:	0040010c 	subeq	r0, r0, ip, lsl #2
    2bf4:	00602c16 	rsbeq	r2, r0, r6, lsl ip
    2bf8:	000f5e08 	andeq	r5, pc, r8, lsl #28
    2bfc:	002c0900 	eoreq	r0, ip, r0, lsl #18
    2c00:	50011700 	andpl	r1, r1, r0, lsl #14
    2c04:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
    2c08:	60361600 	eorsvs	r1, r6, r0, lsl #12
    2c0c:	177a0800 	ldrbne	r0, [sl, -r0, lsl #16]!
    2c10:	2c230000 	stccs	0, cr0, [r3], #-0
    2c14:	01170000 	tsteq	r7, r0
    2c18:	5a910251 	bpl	fe443564 <SCS_BASE+0x1e435564>
    2c1c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2c20:	1a006408 	bne	1bc48 <__Stack_Size+0x1b848>
    2c24:	08006080 	stmdaeq	r0, {r7, sp, lr}
    2c28:	0000066b 	andeq	r0, r0, fp, ror #12
    2c2c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2c30:	01175b91 			; <UNDEFINED> instruction: 0x01175b91
    2c34:	32080250 	andcc	r0, r8, #80, 4
    2c38:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    2c3c:	2108005f 	qaddcs	r0, pc, r8	; <UNPREDICTABLE>
    2c40:	16000027 	strne	r0, [r0], -r7, lsr #32
    2c44:	08005f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    2c48:	00000b7e 	andeq	r0, r0, lr, ror fp
    2c4c:	00002c56 	andeq	r2, r0, r6, asr ip
    2c50:	01500117 	cmpeq	r0, r7, lsl r1
    2c54:	44160034 	ldrmi	r0, [r6], #-52	; 0x34
    2c58:	7e08005f 	mcrvc	0, 0, r0, cr8, cr15, {2}
    2c5c:	6900000b 	stmdbvs	r0, {r0, r1, r3}
    2c60:	1700002c 	strne	r0, [r0, -ip, lsr #32]
    2c64:	33015001 	movwcc	r5, #4097	; 0x1001
    2c68:	5f4e1600 	svcpl	0x004e1600
    2c6c:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
    2c70:	2c830000 	stccs	0, cr0, [r3], {0}
    2c74:	01170000 	tsteq	r7, r0
    2c78:	bc0a0351 	stclt	3, cr0, [sl], {81}	; 0x51
    2c7c:	50011702 	andpl	r1, r1, r2, lsl #14
    2c80:	16003401 	strne	r3, [r0], -r1, lsl #8
    2c84:	08005f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip, lr}
    2c88:	00000e9a 	muleq	r0, sl, lr
    2c8c:	00002c9d 	muleq	r0, sp, ip
    2c90:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2c94:	1702bc0a 	strne	fp, [r2, -sl, lsl #24]
    2c98:	33015001 	movwcc	r5, #4097	; 0x1001
    2c9c:	5f601600 	svcpl	0x00601600
    2ca0:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
    2ca4:	2cb50000 	ldccs	0, cr0, [r5]
    2ca8:	01170000 	tsteq	r7, r0
    2cac:	17300151 			; <UNDEFINED> instruction: 0x17300151
    2cb0:	34015001 	strcc	r5, [r1], #-1
    2cb4:	5f681600 	svcpl	0x00681600
    2cb8:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
    2cbc:	2ccd0000 	stclcs	0, cr0, [sp], {0}
    2cc0:	01170000 	tsteq	r7, r0
    2cc4:	17300151 			; <UNDEFINED> instruction: 0x17300151
    2cc8:	33015001 	movwcc	r5, #4097	; 0x1001
    2ccc:	5f741600 	svcpl	0x00741600
    2cd0:	13ac0800 			; <UNDEFINED> instruction: 0x13ac0800
    2cd4:	2ce60000 	stclcs	0, cr0, [r6]
    2cd8:	01170000 	tsteq	r7, r0
    2cdc:	60910251 	addsvs	r0, r1, r1, asr r2
    2ce0:	01500117 	cmpeq	r0, r7, lsl r1
    2ce4:	7c1a0032 	ldcvc	0, cr0, [sl], {50}	; 0x32
    2ce8:	ac08005f 	stcge	0, cr0, [r8], {95}	; 0x5f
    2cec:	17000013 	smladne	r0, r3, r0, r0
    2cf0:	91025101 	tstls	r2, r1, lsl #2
    2cf4:	50011764 	andpl	r1, r1, r4, ror #14
    2cf8:	00003101 	andeq	r3, r0, r1, lsl #2
    2cfc:	000a6d13 	andeq	r6, sl, r3, lsl sp
    2d00:	04c90100 	strbeq	r0, [r9], #256	; 0x100
    2d04:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
    2d08:	0000000c 	andeq	r0, r0, ip
    2d0c:	2d219c01 	stccs	12, cr9, [r1, #-4]!
    2d10:	28320000 	ldmdacs	r2!, {}	; <UNPREDICTABLE>
    2d14:	01000000 	mrseq	r0, (UNDEF: 0)
    2d18:	002504c9 	eoreq	r0, r5, r9, asr #9
    2d1c:	50010000 	andpl	r0, r1, r0
    2d20:	09f51d00 	ldmibeq	r5!, {r8, sl, fp, ip}^
    2d24:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    2d28:	00006904 	andeq	r6, r0, r4, lsl #18
    2d2c:	003de800 	eorseq	lr, sp, r0, lsl #16
    2d30:	00001408 	andeq	r1, r0, r8, lsl #8
    2d34:	339c0100 	orrscc	r0, ip, #0, 2
    2d38:	00000069 	andeq	r0, r0, r9, rrx
    2d3c:	00002d47 	andeq	r2, r0, r7, asr #26
    2d40:	00010534 	andeq	r0, r1, r4, lsr r5
    2d44:	3500ff00 	strcc	pc, [r0, #-3840]	; 0xf00
    2d48:	00000707 	andeq	r0, r0, r7, lsl #14
    2d4c:	2d584201 	lfmcs	f4, 2, [r8, #-4]
    2d50:	03050000 	movweq	r0, #20480	; 0x5000
    2d54:	2000001a 	andcs	r0, r0, sl, lsl r0
    2d58:	002d3705 	eoreq	r3, sp, r5, lsl #14
    2d5c:	00a63500 	adceq	r3, r6, r0, lsl #10
    2d60:	43010000 	movwmi	r0, #4096	; 0x1000
    2d64:	00002d6e 	andeq	r2, r0, lr, ror #26
    2d68:	00180305 	andseq	r0, r8, r5, lsl #6
    2d6c:	69052000 	stmdbvs	r5, {sp}
    2d70:	35000000 	strcc	r0, [r0, #-0]
    2d74:	00000d01 	andeq	r0, r0, r1, lsl #26
    2d78:	2d6e4301 	stclcs	3, cr4, [lr, #-4]!
    2d7c:	03050000 	movweq	r0, #20480	; 0x5000
    2d80:	20000019 	andcs	r0, r0, r9, lsl r0
    2d84:	00052f35 	andeq	r2, r5, r5, lsr pc
    2d88:	7a440100 	bvc	1103190 <__Stack_Size+0x1102d90>
    2d8c:	05000000 	streq	r0, [r0, #-0]
    2d90:	00012403 	andeq	r2, r1, r3, lsl #8
    2d94:	04df3520 	ldrbeq	r3, [pc], #1312	; 2d9c <__Stack_Size+0x299c>
    2d98:	44010000 	strmi	r0, [r1], #-0
    2d9c:	0000007a 	andeq	r0, r0, sl, ror r0
    2da0:	01200305 			; <UNDEFINED> instruction: 0x01200305
    2da4:	24352000 	ldrtcs	r2, [r5], #-0
    2da8:	01000001 	tsteq	r0, r1
    2dac:	00004545 	andeq	r4, r0, r5, asr #10
    2db0:	10030500 	andne	r0, r3, r0, lsl #10
    2db4:	35200000 	strcc	r0, [r0, #-0]!
    2db8:	000005ca 	andeq	r0, r0, sl, asr #11
    2dbc:	00454601 	subeq	r4, r5, r1, lsl #12
    2dc0:	03050000 	movweq	r0, #20480	; 0x5000
    2dc4:	20000004 	andcs	r0, r0, r4
    2dc8:	00026435 	andeq	r6, r2, r5, lsr r4
    2dcc:	8a470100 	bhi	11c31d4 <__Stack_Size+0x11c2dd4>
    2dd0:	05000000 	streq	r0, [r0, #-0]
    2dd4:	00000003 	andeq	r0, r0, r3
    2dd8:	03c73520 	biceq	r3, r7, #32, 10	; 0x8000000
    2ddc:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    2de0:	0000007a 	andeq	r0, r0, sl, ror r0
    2de4:	011c0305 	tsteq	ip, r5, lsl #6
    2de8:	57332000 	ldrpl	r2, [r3, -r0]!
    2dec:	fa000000 	blx	2df4 <__Stack_Size+0x29f4>
    2df0:	3400002d 	strcc	r0, [r0], #-45	; 0x2d
    2df4:	00000105 	andeq	r0, r0, r5, lsl #2
    2df8:	6b350001 	blvs	d42e04 <__Stack_Size+0xd42a04>
    2dfc:	0100000d 	tsteq	r0, sp
    2e00:	002dea49 	eoreq	lr, sp, r9, asr #20
    2e04:	0a030500 	beq	c420c <__Stack_Size+0xc3e0c>
    2e08:	35200000 	strcc	r0, [r0, #-0]!
    2e0c:	000005c1 	andeq	r0, r0, r1, asr #11
    2e10:	00574b01 	subseq	r4, r7, r1, lsl #22
    2e14:	03050000 	movweq	r0, #20480	; 0x5000
    2e18:	2000012e 	andcs	r0, r0, lr, lsr #2
    2e1c:	00077335 	andeq	r7, r7, r5, lsr r3
    2e20:	574c0100 	strbpl	r0, [ip, -r0, lsl #2]
    2e24:	05000000 	streq	r0, [r0, #-0]
    2e28:	00012c03 	andeq	r2, r1, r3, lsl #24
    2e2c:	06753520 	ldrbteq	r3, [r5], -r0, lsr #10
    2e30:	4d010000 	stcmi	0, cr0, [r1, #-0]
    2e34:	00000069 	andeq	r0, r0, r9, rrx
    2e38:	012b0305 			; <UNDEFINED> instruction: 0x012b0305
    2e3c:	04352000 	ldrteq	r2, [r5], #-0
    2e40:	01000004 	tsteq	r0, r4
    2e44:	0000694e 	andeq	r6, r0, lr, asr #18
    2e48:	2a030500 	bcs	c4250 <__Stack_Size+0xc3e50>
    2e4c:	36200001 	strtcc	r0, [r0], -r1
    2e50:	01006469 	tsteq	r0, r9, ror #8
    2e54:	0000694f 	andeq	r6, r0, pc, asr #18
    2e58:	08030500 	stmdaeq	r3, {r8, sl}
    2e5c:	35200000 	strcc	r0, [r0, #-0]!
    2e60:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    2e64:	00695001 	rsbeq	r5, r9, r1
    2e68:	03050000 	movweq	r0, #20480	; 0x5000
    2e6c:	20000129 	andcs	r0, r0, r9, lsr #2
    2e70:	00142335 	andseq	r2, r4, r5, lsr r3
    2e74:	69500100 	ldmdbvs	r0, {r8}^
    2e78:	05000000 	streq	r0, [r0, #-0]
    2e7c:	00012803 	andeq	r2, r1, r3, lsl #16
    2e80:	003c3720 	eorseq	r3, ip, r0, lsr #14
    2e84:	fd090000 	stc2	0, cr0, [r9, #-0]
    2e88:	00068e38 	andeq	r8, r6, r8, lsr lr
    2e8c:	99fe0900 	ldmibls	lr!, {r8, fp}^
    2e90:	3900002e 	stmdbcc	r0, {r1, r2, r3, r5}
    2e94:	00000045 	andeq	r0, r0, r5, asr #32
    2e98:	02bd3a00 	adcseq	r3, sp, #0, 20
    2e9c:	ff090000 			; <UNDEFINED> instruction: 0xff090000
    2ea0:	000000fa 	strdeq	r0, [r0], -sl
    2ea4:	0004f13b 	andeq	pc, r4, fp, lsr r1	; <UNPREDICTABLE>
    2ea8:	01120900 	tsteq	r2, r0, lsl #18
    2eac:	00002ebb 			; <UNDEFINED> instruction: 0x00002ebb
    2eb0:	00004539 	andeq	r4, r0, r9, lsr r5
    2eb4:	00da3900 	sbcseq	r3, sl, r0, lsl #18
    2eb8:	3b000000 	blcc	2ec0 <__Stack_Size+0x2ac0>
    2ebc:	000005f9 	strdeq	r0, [r0], -r9
    2ec0:	d2011309 	andle	r1, r1, #603979776	; 0x24000000
    2ec4:	3900002e 	stmdbcc	r0, {r1, r2, r3, r5}
    2ec8:	00000045 	andeq	r0, r0, r5, asr #32
    2ecc:	0000da39 	andeq	sp, r0, r9, lsr sl
    2ed0:	4a380000 	bmi	e02ed8 <__Stack_Size+0xe02ad8>
    2ed4:	0a000004 	beq	2eec <__Stack_Size+0x2aec>
    2ed8:	002ee342 	eoreq	lr, lr, r2, asr #6
    2edc:	00da3900 	sbcseq	r3, sl, r0, lsl #18
    2ee0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2ee4:	00000929 	andeq	r0, r0, r9, lsr #18
    2ee8:	2ef4b60b 	cdpcs	6, 15, cr11, cr4, cr11, {0}
    2eec:	45390000 	ldrmi	r0, [r9, #-0]!
    2ef0:	00000000 	andeq	r0, r0, r0
    2ef4:	00083538 	andeq	r3, r8, r8, lsr r5
    2ef8:	05b40b00 	ldreq	r0, [r4, #2816]!	; 0xb00
    2efc:	3900002f 	stmdbcc	r0, {r0, r1, r2, r3, r5}
    2f00:	00000045 	andeq	r0, r0, r5, asr #32
    2f04:	078c3b00 	streq	r3, [ip, r0, lsl #22]
    2f08:	06090000 	streq	r0, [r9], -r0
    2f0c:	002f1701 	eoreq	r1, pc, r1, lsl #14
    2f10:	00453900 	subeq	r3, r5, r0, lsl #18
    2f14:	3b000000 	blcc	2f1c <__Stack_Size+0x2b1c>
    2f18:	00000254 	andeq	r0, r0, r4, asr r2
    2f1c:	29010809 	stmdbcs	r1, {r0, r3, fp}
    2f20:	3900002f 	stmdbcc	r0, {r0, r1, r2, r3, r5}
    2f24:	00000045 	andeq	r0, r0, r5, asr #32
    2f28:	07cb3b00 	strbeq	r3, [fp, r0, lsl #22]
    2f2c:	07090000 	streq	r0, [r9, -r0]
    2f30:	002f3b01 	eoreq	r3, pc, r1, lsl #22
    2f34:	00453900 	subeq	r3, r5, r0, lsl #18
    2f38:	3b000000 	blcc	2f40 <__Stack_Size+0x2b40>
    2f3c:	0000018b 	andeq	r0, r0, fp, lsl #3
    2f40:	52010209 	andpl	r0, r1, #-1879048192	; 0x90000000
    2f44:	3900002f 	stmdbcc	r0, {r0, r1, r2, r3, r5}
    2f48:	00000045 	andeq	r0, r0, r5, asr #32
    2f4c:	00004539 	andeq	r4, r0, r9, lsr r5
    2f50:	b43b0000 	ldrtlt	r0, [fp], #-0
    2f54:	0900000c 	stmdbeq	r0, {r2, r3}
    2f58:	2f640103 	svccs	0x00640103
    2f5c:	da390000 	ble	e42f64 <__Stack_Size+0xe42b64>
    2f60:	00000000 	andeq	r0, r0, r0
    2f64:	0008ec3c 	andeq	lr, r8, ip, lsr ip
    2f68:	01190900 	tsteq	r9, r0, lsl #18
    2f6c:	000000af 	andeq	r0, r0, pc, lsr #1
    2f70:	00002f7a 	andeq	r2, r0, sl, ror pc
    2f74:	00006939 	andeq	r6, r0, r9, lsr r9
    2f78:	173b0000 	ldrne	r0, [fp, -r0]!
    2f7c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2f80:	2f8c0104 	svccs	0x008c0104
    2f84:	45390000 	ldrmi	r0, [r9, #-0]!
    2f88:	00000000 	andeq	r0, r0, r0
    2f8c:	000ac73d 	andeq	ip, sl, sp, lsr r7
    2f90:	01050900 	tsteq	r5, r0, lsl #18
    2f94:	00000069 	andeq	r0, r0, r9, rrx
    2f98:	000b3e3b 	andeq	r3, fp, fp, lsr lr
    2f9c:	010f0500 	tsteq	pc, r0, lsl #10
    2fa0:	00002faf 	andeq	r2, r0, pc, lsr #31
    2fa4:	00004539 	andeq	r4, r0, r9, lsr r5
    2fa8:	00453900 	subeq	r3, r5, r0, lsl #18
    2fac:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2fb0:	00000ce8 	andeq	r0, r0, r8, ror #25
    2fb4:	2fc0ff05 	svccs	0x00c0ff05
    2fb8:	45390000 	ldrmi	r0, [r9, #-0]!
    2fbc:	00000000 	andeq	r0, r0, r0
    2fc0:	0007f83b 	andeq	pc, r7, fp, lsr r8	; <UNPREDICTABLE>
    2fc4:	01000500 	tsteq	r0, r0, lsl #10
    2fc8:	00002fd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2fcc:	002fd239 	eoreq	sp, pc, r9, lsr r2	; <UNPREDICTABLE>
    2fd0:	04120000 	ldreq	r0, [r2], #-0
    2fd4:	00000540 	andeq	r0, r0, r0, asr #10
    2fd8:	00004738 	andeq	r4, r0, r8, lsr r7
    2fdc:	e9dc0400 	ldmib	ip, {sl}^
    2fe0:	3900002f 	stmdbcc	r0, {r0, r1, r2, r3, r5}
    2fe4:	00002fe9 	andeq	r2, r0, r9, ror #31
    2fe8:	fc041200 	stc2	2, cr1, [r4], {-0}
    2fec:	38000004 	stmdacc	r0, {r2}
    2ff0:	0000024a 	andeq	r0, r0, sl, asr #4
    2ff4:	3005db04 	andcc	sp, r5, r4, lsl #22
    2ff8:	05390000 	ldreq	r0, [r9, #-0]!
    2ffc:	39000030 	stmdbcc	r0, {r4, r5}
    3000:	00002fe9 	andeq	r2, r0, r9, ror #31
    3004:	71041200 	mrsvc	r1, R12_usr
    3008:	38000001 	stmdacc	r0, {r0}
    300c:	00000419 	andeq	r0, r0, r9, lsl r4
    3010:	3021e804 	eorcc	lr, r1, r4, lsl #16
    3014:	45390000 	ldrmi	r0, [r9, #-0]!
    3018:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    301c:	000000da 	ldrdeq	r0, [r0], -sl
    3020:	08263800 	stmdaeq	r6!, {fp, ip, sp}
    3024:	e2040000 	and	r0, r4, #0
    3028:	00003037 	andeq	r3, r0, r7, lsr r0
    302c:	00300539 	eorseq	r0, r0, r9, lsr r5
    3030:	00573900 	subseq	r3, r7, r0, lsl #18
    3034:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3038:	000003f7 	strdeq	r0, [r0], -r7
    303c:	304de104 	subcc	lr, sp, r4, lsl #2
    3040:	05390000 	ldreq	r0, [r9, #-0]!
    3044:	39000030 	stmdbcc	r0, {r4, r5}
    3048:	00000057 	andeq	r0, r0, r7, asr r0
    304c:	00323800 	eorseq	r3, r2, r0, lsl #16
    3050:	e4070000 	str	r0, [r7], #-0
    3054:	00003063 	andeq	r3, r0, r3, rrx
    3058:	00306339 	eorseq	r6, r0, r9, lsr r3
    305c:	00da3900 	sbcseq	r3, sl, r0, lsl #18
    3060:	12000000 	andne	r0, r0, #0
    3064:	00045804 	andeq	r5, r4, r4, lsl #16
    3068:	03cf3800 	biceq	r3, pc, #0, 16
    306c:	ec070000 	stc	0, cr0, [r7], {-0}
    3070:	0000307f 	andeq	r3, r0, pc, ror r0
    3074:	00306339 	eorseq	r6, r0, r9, lsr r3
    3078:	00573900 	subseq	r3, r7, r0, lsl #18
    307c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    3080:	000007db 	ldrdeq	r0, [r0], -fp
    3084:	00aff607 	adceq	pc, pc, r7, lsl #12
    3088:	30990000 	addscc	r0, r9, r0
    308c:	63390000 	teqvs	r9, #0
    3090:	39000030 	stmdbcc	r0, {r4, r5}
    3094:	00000057 	andeq	r0, r0, r7, asr r0
    3098:	04813800 	streq	r3, [r1], #2048	; 0x800
    309c:	490c0000 	stmdbmi	ip, {}	; <UNPREDICTABLE>
    30a0:	000030b4 	strheq	r3, [r0], -r4
    30a4:	00069139 	andeq	r9, r6, r9, lsr r1
    30a8:	06913900 	ldreq	r3, [r1], r0, lsl #18
    30ac:	91390000 	teqls	r9, r0
    30b0:	00000006 	andeq	r0, r0, r6
    30b4:	00079b3a 	andeq	r9, r7, sl, lsr fp
    30b8:	91390c00 	teqls	r9, r0, lsl #24
    30bc:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
    30c0:	00000e14 	andeq	r0, r0, r4, lsl lr
    30c4:	0691210c 	ldreq	r2, [r1], ip, lsl #2
    30c8:	30d40000 	sbcscc	r0, r4, r0
    30cc:	91390000 	teqls	r9, r0
    30d0:	00000006 	andeq	r0, r0, r6
    30d4:	00042d38 	andeq	r2, r4, r8, lsr sp
    30d8:	ef470c00 	svc	0x00470c00
    30dc:	39000030 	stmdbcc	r0, {r4, r5}
    30e0:	00000691 	muleq	r0, r1, r6
    30e4:	00069139 	andeq	r9, r6, r9, lsr r1
    30e8:	06913900 	ldreq	r3, [r1], r0, lsl #18
    30ec:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    30f0:	00000c60 	andeq	r0, r0, r0, ror #24
    30f4:	0691480c 	ldreq	r4, [r1], ip, lsl #16
    30f8:	31090000 	mrscc	r0, (UNDEF: 9)
    30fc:	91390000 	teqls	r9, r0
    3100:	39000006 	stmdbcc	r0, {r1, r2}
    3104:	00000691 	muleq	r0, r1, r6
    3108:	0bb13e00 	bleq	fec52910 <SCS_BASE+0x1ec44910>
    310c:	460c0000 	strmi	r0, [ip], -r0
    3110:	00000691 	muleq	r0, r1, r6
    3114:	00003123 	andeq	r3, r0, r3, lsr #2
    3118:	00069139 	andeq	r9, r6, r9, lsr r1
    311c:	06913900 	ldreq	r3, [r1], r0, lsl #18
    3120:	3b000000 	blcc	3128 <__Stack_Size+0x2d28>
    3124:	00000ae7 	andeq	r0, r0, r7, ror #21
    3128:	3502ac06 	strcc	sl, [r2, #-3078]	; 0xc06
    312c:	39000031 	stmdbcc	r0, {r0, r4, r5}
    3130:	00003135 	andeq	r3, r0, r5, lsr r1
    3134:	90041200 	andls	r1, r4, r0, lsl #4
    3138:	3b000005 	blcc	3154 <__Stack_Size+0x2d54>
    313c:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
    3140:	4d02ad06 	stcmi	13, cr10, [r2, #-24]	; 0xffffffe8
    3144:	39000031 	stmdbcc	r0, {r0, r4, r5}
    3148:	0000314d 	andeq	r3, r0, sp, asr #2
    314c:	04041200 	streq	r1, [r4], #-512	; 0x200
    3150:	3b000006 	blcc	3170 <__Stack_Size+0x2d70>
    3154:	00000b76 	andeq	r0, r0, r6, ror fp
    3158:	6502a306 	strvs	sl, [r2, #-774]	; 0x306
    315c:	39000031 	stmdbcc	r0, {r0, r4, r5}
    3160:	00003165 	andeq	r3, r0, r5, ror #2
    3164:	8e041200 	cdphi	2, 0, cr1, cr4, cr0, {0}
    3168:	3b000003 	blcc	317c <__Stack_Size+0x2d7c>
    316c:	0000074f 	andeq	r0, r0, pc, asr #14
    3170:	8202a406 	andhi	sl, r2, #100663296	; 0x6000000
    3174:	39000031 	stmdbcc	r0, {r0, r4, r5}
    3178:	00003165 	andeq	r3, r0, r5, ror #2
    317c:	00313539 	eorseq	r3, r1, r9, lsr r5
    3180:	d53b0000 	ldrle	r0, [fp, #-0]!
    3184:	0600000d 	streq	r0, [r0], -sp
    3188:	319e02c0 	orrscc	r0, lr, r0, asr #5
    318c:	65390000 	ldrvs	r0, [r9, #-0]!
    3190:	39000031 	stmdbcc	r0, {r0, r4, r5}
    3194:	00000057 	andeq	r0, r0, r7, asr r0
    3198:	00005739 	andeq	r5, r0, r9, lsr r7
    319c:	c83b0000 	ldmdagt	fp!, {}	; <UNPREDICTABLE>
    31a0:	06000001 	streq	r0, [r0], -r1
    31a4:	31b502a5 			; <UNDEFINED> instruction: 0x31b502a5
    31a8:	65390000 	ldrvs	r0, [r9, #-0]!
    31ac:	39000031 	stmdbcc	r0, {r0, r4, r5}
    31b0:	0000314d 	andeq	r3, r0, sp, asr #2
    31b4:	01d43b00 	bicseq	r3, r4, r0, lsl #22
    31b8:	cd060000 	stcgt	0, cr0, [r6, #-0]
    31bc:	0031cc02 	eorseq	ip, r1, r2, lsl #24
    31c0:	31653900 	cmncc	r5, r0, lsl #18
    31c4:	57390000 	ldrpl	r0, [r9, -r0]!
    31c8:	00000000 	andeq	r0, r0, r0
    31cc:	000a4d3b 	andeq	r4, sl, fp, lsr sp
    31d0:	02b20600 	adcseq	r0, r2, #0, 12
    31d4:	000031e8 	andeq	r3, r0, r8, ror #3
    31d8:	00316539 	eorseq	r6, r1, r9, lsr r5
    31dc:	00573900 	subseq	r3, r7, r0, lsl #18
    31e0:	da390000 	ble	e431e8 <__Stack_Size+0xe42de8>
    31e4:	00000000 	andeq	r0, r0, r0
    31e8:	000d733b 	andeq	r7, sp, fp, lsr r3
    31ec:	02b00600 	adcseq	r0, r0, #0, 12
    31f0:	000031ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    31f4:	00316539 	eorseq	r6, r1, r9, lsr r5
    31f8:	00da3900 	sbcseq	r3, sl, r0, lsl #18
    31fc:	3c000000 	stccc	0, cr0, [r0], {-0}
    3200:	00000d17 	andeq	r0, r0, r7, lsl sp
    3204:	ba02fd06 	blt	c2624 <__Stack_Size+0xc2224>
    3208:	1a000000 	bne	3210 <__Stack_Size+0x2e10>
    320c:	39000032 	stmdbcc	r0, {r1, r4, r5}
    3210:	00003165 	andeq	r3, r0, r5, ror #2
    3214:	00005739 	andeq	r5, r0, r9, lsr r7
    3218:	753b0000 	ldrvc	r0, [fp, #-0]!
    321c:	06000003 	streq	r0, [r0], -r3
    3220:	323102fe 	eorscc	r0, r1, #-536870897	; 0xe000000f
    3224:	65390000 	ldrvs	r0, [r9, #-0]!
    3228:	39000031 	stmdbcc	r0, {r0, r4, r5}
    322c:	00000057 	andeq	r0, r0, r7, asr r0
    3230:	02df3c00 	sbcseq	r3, pc, #0, 24
    3234:	f5060000 			; <UNDEFINED> instruction: 0xf5060000
    3238:	00005702 	andeq	r5, r0, r2, lsl #14
    323c:	00324700 	eorseq	r4, r2, r0, lsl #14
    3240:	31653900 	cmncc	r5, r0, lsl #18
    3244:	3b000000 	blcc	324c <__Stack_Size+0x2e4c>
    3248:	00000d43 	andeq	r0, r0, r3, asr #26
    324c:	5e02ec06 	cdppl	12, 0, cr14, cr2, cr6, {0}
    3250:	39000032 	stmdbcc	r0, {r1, r4, r5}
    3254:	00003165 	andeq	r3, r0, r5, ror #2
    3258:	00005739 	andeq	r5, r0, r9, lsr r7
    325c:	e83e0000 	ldmda	lr!, {}	; <UNPREDICTABLE>
    3260:	07000000 	streq	r0, [r0, -r0]
    3264:	0000baf8 	strdeq	fp, [r0], -r8
    3268:	00327800 	eorseq	r7, r2, r0, lsl #16
    326c:	30633900 	rsbcc	r3, r3, r0, lsl #18
    3270:	57390000 	ldrpl	r0, [r9, -r0]!
    3274:	00000000 	andeq	r0, r0, r0
    3278:	00032a3e 	andeq	r2, r3, lr, lsr sl
    327c:	57ed0700 	strbpl	r0, [sp, r0, lsl #14]!
    3280:	8d000000 	stchi	0, cr0, [r0, #-0]
    3284:	39000032 	stmdbcc	r0, {r1, r4, r5}
    3288:	00003063 	andeq	r3, r0, r3, rrx
    328c:	02223800 	eoreq	r3, r2, #0, 16
    3290:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    3294:	0000329e 	muleq	r0, lr, r2
    3298:	00004539 	andeq	r4, r0, r9, lsr r5
    329c:	c4380000 	ldrtgt	r0, [r8], #-0
    32a0:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    32a4:	0032af3a 	eorseq	sl, r2, sl, lsr pc
    32a8:	00da3900 	sbcseq	r3, sl, r0, lsl #18
    32ac:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    32b0:	00000a5a 	andeq	r0, r0, sl, asr sl
    32b4:	32c0390d 	sbccc	r3, r0, #212992	; 0x34000
    32b8:	45390000 	ldrmi	r0, [r9, #-0]!
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	00049e38 	andeq	r9, r4, r8, lsr lr
    32c4:	d1e10700 	mvnle	r0, r0, lsl #14
    32c8:	39000032 	stmdbcc	r0, {r1, r4, r5}
    32cc:	000032d1 	ldrdeq	r3, [r0], -r1
    32d0:	60041200 	andvs	r1, r4, r0, lsl #4
    32d4:	38000006 	stmdacc	r0, {r1, r2}
    32d8:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    32dc:	32e8df07 	rsccc	sp, r8, #7, 30
    32e0:	63390000 	teqvs	r9, #0
    32e4:	00000030 	andeq	r0, r0, r0, lsr r0
    32e8:	00014138 	andeq	r4, r1, r8, lsr r1
    32ec:	fee00700 	cdp2	7, 14, cr0, cr0, cr0, {0}
    32f0:	39000032 	stmdbcc	r0, {r1, r4, r5}
    32f4:	00003063 	andeq	r3, r0, r3, rrx
    32f8:	0032d139 	eorseq	sp, r2, r9, lsr r1
    32fc:	1c380000 	ldcne	0, cr0, [r8], #-0
    3300:	0700000a 	streq	r0, [r0, -sl]
    3304:	003319e5 	eorseq	r1, r3, r5, ror #19
    3308:	30633900 	rsbcc	r3, r3, r0, lsl #18
    330c:	57390000 	ldrpl	r0, [r9, -r0]!
    3310:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3314:	000000da 	ldrdeq	r0, [r0], -sl
    3318:	0da63f00 	stceq	15, cr3, [r6]
    331c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    3320:	00000691 	muleq	r0, r1, r6
    3324:	00069139 	andeq	r9, r6, r9, lsr r1
    3328:	06913900 	ldreq	r3, [r1], r0, lsl #18
    332c:	00000000 	andeq	r0, r0, r0
    3330:	00000580 	andeq	r0, r0, r0, lsl #11
    3334:	03bd0004 			; <UNDEFINED> instruction: 0x03bd0004
    3338:	01040000 	mrseq	r0, (UNDEF: 4)
    333c:	00000850 	andeq	r0, r0, r0, asr r8
    3340:	00130f01 	andseq	r0, r3, r1, lsl #30
    3344:	0000fa00 	andeq	pc, r0, r0, lsl #20
    3348:	003dfc00 	eorseq	pc, sp, r0, lsl #24
    334c:	00009008 	andeq	r9, r0, r8
    3350:	0004dd00 	andeq	sp, r4, r0, lsl #26
    3354:	102f0200 	eorne	r0, pc, r0, lsl #4
    3358:	23010000 	movwcs	r0, #4096	; 0x1000
    335c:	08003dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    3360:	00000002 	andeq	r0, r0, r2
    3364:	82029c01 	andhi	r9, r2, #256	; 0x100
    3368:	0100000e 	tsteq	r0, lr
    336c:	003dfe2e 	eorseq	pc, sp, lr, lsr #28
    3370:	00000208 	andeq	r0, r0, r8, lsl #4
    3374:	029c0100 	addseq	r0, ip, #0, 2
    3378:	0000101c 	andeq	r1, r0, ip, lsl r0
    337c:	3e003d01 	cdpcc	13, 0, cr3, cr0, cr1, {0}
    3380:	00020800 	andeq	r0, r2, r0, lsl #16
    3384:	9c010000 	stcls	0, cr0, [r1], {-0}
    3388:	000e2b02 	andeq	r2, lr, r2, lsl #22
    338c:	024c0100 	subeq	r0, ip, #0, 2
    3390:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3394:	01000000 	mrseq	r0, (UNDEF: 0)
    3398:	109c029c 	umullsne	r0, ip, ip, r2
    339c:	5b010000 	blpl	433a4 <__Stack_Size+0x42fa4>
    33a0:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
    33a4:	00000002 	andeq	r0, r0, r2
    33a8:	eb029c01 	bl	aa3b4 <__Stack_Size+0xa9fb4>
    33ac:	0100000e 	tsteq	r0, lr
    33b0:	003e066a 	eorseq	r0, lr, sl, ror #12
    33b4:	00000208 	andeq	r0, r0, r8, lsl #4
    33b8:	029c0100 	addseq	r0, ip, #0, 2
    33bc:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    33c0:	3e087501 	cfsh32cc	mvfx7, mvfx8, #1
    33c4:	00020800 	andeq	r0, r2, r0, lsl #16
    33c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    33cc:	0012f802 	andseq	pc, r2, r2, lsl #16
    33d0:	0a800100 	beq	fe0037d8 <SCS_BASE+0x1dff57d8>
    33d4:	0208003e 	andeq	r0, r8, #62	; 0x3e
    33d8:	01000000 	mrseq	r0, (UNDEF: 0)
    33dc:	1300039c 	movwne	r0, #924	; 0x39c
    33e0:	8b010000 	blhi	433e8 <__Stack_Size+0x42fe8>
    33e4:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
    33e8:	00000004 	andeq	r0, r0, r4
    33ec:	00dd9c01 	sbcseq	r9, sp, r1, lsl #24
    33f0:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    33f4:	0100000c 	tsteq	r0, ip
    33f8:	0000dd8d 	andeq	sp, r0, sp, lsl #27
    33fc:	0000d300 	andeq	sp, r0, r0, lsl #6
    3400:	06000500 	streq	r0, [r0], -r0, lsl #10
    3404:	08003e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, sp}
    3408:	00000552 	andeq	r0, r0, r2, asr r5
    340c:	05040700 	streq	r0, [r4, #-1792]	; 0x700
    3410:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3414:	0012b402 	andseq	fp, r2, r2, lsl #8
    3418:	10970100 	addsne	r0, r7, r0, lsl #2
    341c:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3420:	01000000 	mrseq	r0, (UNDEF: 0)
    3424:	0e73029c 	mrceq	2, 3, r0, cr3, cr12, {4}
    3428:	a2010000 	andge	r0, r1, #0
    342c:	08003e12 	stmdaeq	r0, {r1, r4, r9, sl, fp, ip, sp}
    3430:	00000002 	andeq	r0, r0, r2
    3434:	a7029c01 	strge	r9, [r2, -r1, lsl #24]
    3438:	0100000e 	tsteq	r0, lr
    343c:	003e14ad 	eorseq	r1, lr, sp, lsr #9
    3440:	00000208 	andeq	r0, r0, r8, lsl #4
    3444:	029c0100 	addseq	r0, ip, #0, 2
    3448:	00000fd1 	ldrdeq	r0, [r0], -r1
    344c:	3e16b801 	cdpcc	8, 1, cr11, cr6, cr1, {0}
    3450:	00020800 	andeq	r0, r2, r0, lsl #16
    3454:	9c010000 	stcls	0, cr0, [r1], {-0}
    3458:	00108b02 	andseq	r8, r0, r2, lsl #22
    345c:	18c30100 	stmiane	r3, {r8}^
    3460:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3464:	01000000 	mrseq	r0, (UNDEF: 0)
    3468:	0eb9029c 	mrceq	2, 5, r0, cr9, cr12, {4}
    346c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    3470:	08003e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip, sp}
    3474:	00000002 	andeq	r0, r0, r2
    3478:	62029c01 	andvs	r9, r2, #256	; 0x100
    347c:	0100000e 	tsteq	r0, lr
    3480:	003e1cd9 	ldrsbteq	r1, [lr], -r9
    3484:	00000208 	andeq	r0, r0, r8, lsl #4
    3488:	029c0100 	addseq	r0, ip, #0, 2
    348c:	00001164 	andeq	r1, r0, r4, ror #2
    3490:	3e1ee401 	cfmulscc	mvf14, mvf14, mvf1
    3494:	00020800 	andeq	r0, r2, r0, lsl #16
    3498:	9c010000 	stcls	0, cr0, [r1], {-0}
    349c:	000e3d02 	andeq	r3, lr, r2, lsl #26
    34a0:	20ef0100 	rsccs	r0, pc, r0, lsl #2
    34a4:	0208003e 	andeq	r0, r8, #62	; 0x3e
    34a8:	01000000 	mrseq	r0, (UNDEF: 0)
    34ac:	103c029c 	mlasne	ip, ip, r2, r0
    34b0:	fa010000 	blx	434b8 <__Stack_Size+0x430b8>
    34b4:	08003e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, ip, sp}
    34b8:	00000002 	andeq	r0, r0, r2
    34bc:	d4089c01 	strle	r9, [r8], #-3073	; 0xc01
    34c0:	01000012 	tsteq	r0, r2, lsl r0
    34c4:	3e240105 	sufccs	f0, f4, f5
    34c8:	00020800 	andeq	r0, r2, r0, lsl #16
    34cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    34d0:	000f9b08 	andeq	r9, pc, r8, lsl #22
    34d4:	01100100 	tsteq	r0, r0, lsl #2
    34d8:	08003e26 	stmdaeq	r0, {r1, r2, r5, r9, sl, fp, ip, sp}
    34dc:	00000002 	andeq	r0, r0, r2
    34e0:	27089c01 	strcs	r9, [r8, -r1, lsl #24]
    34e4:	01000012 	tsteq	r0, r2, lsl r0
    34e8:	3e28011b 	mcrcc	1, 1, r0, cr8, cr11, {0}
    34ec:	00020800 	andeq	r0, r2, r0, lsl #16
    34f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    34f4:	000ef808 	andeq	pc, lr, r8, lsl #16
    34f8:	01260100 			; <UNDEFINED> instruction: 0x01260100
    34fc:	08003e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, ip, sp}
    3500:	00000002 	andeq	r0, r0, r2
    3504:	3b089c01 	blcc	22a510 <__Stack_Size+0x22a110>
    3508:	01000011 	tsteq	r0, r1, lsl r0
    350c:	3e2c0131 	mcrcc	1, 1, r0, cr12, cr1, {1}
    3510:	00020800 	andeq	r0, r2, r0, lsl #16
    3514:	9c010000 	stcls	0, cr0, [r1], {-0}
    3518:	00133f08 	andseq	r3, r3, r8, lsl #30
    351c:	013c0100 	teqeq	ip, r0, lsl #2
    3520:	08003e2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, fp, ip, sp}
    3524:	00000002 	andeq	r0, r0, r2
    3528:	ef089c01 	svc	0x00089c01
    352c:	01000010 	tsteq	r0, r0, lsl r0
    3530:	3e300147 	rsfccsm	f0, f0, f7
    3534:	00020800 	andeq	r0, r2, r0, lsl #16
    3538:	9c010000 	stcls	0, cr0, [r1], {-0}
    353c:	00132608 	andseq	r2, r3, r8, lsl #12
    3540:	01520100 	cmpeq	r2, r0, lsl #2
    3544:	08003e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip, sp}
    3548:	00000002 	andeq	r0, r0, r2
    354c:	95089c01 	strls	r9, [r8, #-3073]	; 0xc01
    3550:	0100000e 	tsteq	r0, lr
    3554:	3e34015e 	mrccc	1, 1, r0, cr4, cr14, {2}
    3558:	00020800 	andeq	r0, r2, r0, lsl #16
    355c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3560:	0011d708 	andseq	sp, r1, r8, lsl #14
    3564:	016a0100 	cmneq	sl, r0, lsl #2
    3568:	08003e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, ip, sp}
    356c:	00000002 	andeq	r0, r0, r2
    3570:	bd089c01 	stclt	12, cr9, [r8, #-4]
    3574:	01000011 	tsteq	r0, r1, lsl r0
    3578:	3e380176 	mrccc	1, 1, r0, cr8, cr6, {3}
    357c:	00020800 	andeq	r0, r2, r0, lsl #16
    3580:	9c010000 	stcls	0, cr0, [r1], {-0}
    3584:	000ed808 	andeq	sp, lr, r8, lsl #16
    3588:	01810100 	orreq	r0, r1, r0, lsl #2
    358c:	08003e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, ip, sp}
    3590:	00000002 	andeq	r0, r0, r2
    3594:	28089c01 	stmdacs	r8, {r0, sl, fp, ip, pc}
    3598:	01000011 	tsteq	r0, r1, lsl r0
    359c:	3e3c018c 	rsfcc<illegal precision>	f0, f4, #4.0
    35a0:	00020800 	andeq	r0, r2, r0, lsl #16
    35a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    35a8:	0012e508 	andseq	lr, r2, r8, lsl #10
    35ac:	01970100 	orrseq	r0, r7, r0, lsl #2
    35b0:	08003e3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
    35b4:	00000002 	andeq	r0, r0, r2
    35b8:	4e089c01 	cdpmi	12, 0, cr9, cr8, cr1, {0}
    35bc:	0100000e 	tsteq	r0, lr
    35c0:	3e4001a2 	dvfccdp	f0, f0, f2
    35c4:	00020800 	andeq	r0, r2, r0, lsl #16
    35c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    35cc:	000f1108 	andeq	r1, pc, r8, lsl #2
    35d0:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    35d4:	08003e42 	stmdaeq	r0, {r1, r6, r9, sl, fp, ip, sp}
    35d8:	00000002 	andeq	r0, r0, r2
    35dc:	73089c01 	movwvc	r9, #35841	; 0x8c01
    35e0:	01000012 	tsteq	r0, r2, lsl r0
    35e4:	3e4401ba 	mcrcc	1, 2, r0, cr4, cr10, {5}
    35e8:	00020800 	andeq	r0, r2, r0, lsl #16
    35ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    35f0:	000f3708 	andeq	r3, pc, r8, lsl #14
    35f4:	01c50100 	biceq	r0, r5, r0, lsl #2
    35f8:	08003e46 	stmdaeq	r0, {r1, r2, r6, r9, sl, fp, ip, sp}
    35fc:	00000002 	andeq	r0, r0, r2
    3600:	c8099c01 	stmdagt	r9, {r0, sl, fp, ip, pc}
    3604:	0100000e 	tsteq	r0, lr
    3608:	3e4801d0 	mcrcc	1, 2, r0, cr8, cr0, {6}
    360c:	00040800 	andeq	r0, r4, r0, lsl #16
    3610:	9c010000 	stcls	0, cr0, [r1], {-0}
    3614:	00000304 	andeq	r0, r0, r4, lsl #6
    3618:	0006c10a 	andeq	ip, r6, sl, lsl #2
    361c:	01d20100 	bicseq	r0, r2, r0, lsl #2
    3620:	000000dd 	ldrdeq	r0, [r0], -sp
    3624:	000002fa 	strdeq	r0, [r0], -sl
    3628:	4c060005 	stcmi	0, cr0, [r6], {5}
    362c:	6308003e 	movwvs	r0, #32830	; 0x803e
    3630:	00000005 	andeq	r0, r0, r5
    3634:	00111808 	andseq	r1, r1, r8, lsl #16
    3638:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    363c:	08003e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip, sp}
    3640:	00000002 	andeq	r0, r0, r2
    3644:	63089c01 	movwvs	r9, #35841	; 0x8c01
    3648:	01000012 	tsteq	r0, r2, lsl r0
    364c:	3e4e01e7 	dvfcc<illegal precision>z	f0, f6, f7
    3650:	00020800 	andeq	r0, r2, r0, lsl #16
    3654:	9c010000 	stcls	0, cr0, [r1], {-0}
    3658:	0010b008 	andseq	fp, r0, r8
    365c:	01f20100 	mvnseq	r0, r0, lsl #2
    3660:	08003e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, sp}
    3664:	00000002 	andeq	r0, r0, r2
    3668:	f0089c01 			; <UNDEFINED> instruction: 0xf0089c01
    366c:	01000011 	tsteq	r0, r1, lsl r0
    3670:	3e5201fd 	mrccc	1, 2, r0, cr2, cr13, {7}
    3674:	00020800 	andeq	r0, r2, r0, lsl #16
    3678:	9c010000 	stcls	0, cr0, [r1], {-0}
    367c:	00118508 	andseq	r8, r1, r8, lsl #10
    3680:	02080100 	andeq	r0, r8, #0, 2
    3684:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
    3688:	00000002 	andeq	r0, r0, r2
    368c:	98089c01 	stmdals	r8, {r0, sl, fp, ip, pc}
    3690:	01000011 	tsteq	r0, r1, lsl r0
    3694:	3e560213 	mrccc	2, 2, r0, cr6, cr3, {0}
    3698:	00020800 	andeq	r0, r2, r0, lsl #16
    369c:	9c010000 	stcls	0, cr0, [r1], {-0}
    36a0:	00120308 	andseq	r0, r2, r8, lsl #6
    36a4:	021e0100 	andseq	r0, lr, #0, 2
    36a8:	08003e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, sp}
    36ac:	00000002 	andeq	r0, r0, r2
    36b0:	c4089c01 	strgt	r9, [r8], #-3073	; 0xc01
    36b4:	01000012 	tsteq	r0, r2, lsl r0
    36b8:	3e5a0229 	cdpcc	2, 5, cr0, cr10, cr9, {1}
    36bc:	00020800 	andeq	r0, r2, r0, lsl #16
    36c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36c4:	0011ab09 	andseq	sl, r1, r9, lsl #22
    36c8:	02340100 	eorseq	r0, r4, #0, 2
    36cc:	08003e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp, ip, sp}
    36d0:	00000004 	andeq	r0, r0, r4
    36d4:	03c69c01 	biceq	r9, r6, #256	; 0x100
    36d8:	3c0a0000 	stccc	0, cr0, [sl], {-0}
    36dc:	01000004 	tsteq	r0, r4
    36e0:	00dd0236 	sbcseq	r0, sp, r6, lsr r2
    36e4:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
    36e8:	00050000 	andeq	r0, r5, r0
    36ec:	003e6006 	eorseq	r6, lr, r6
    36f0:	00057508 	andeq	r7, r5, r8, lsl #10
    36f4:	51080000 	mrspl	r0, (UNDEF: 8)
    36f8:	01000012 	tsteq	r0, r2, lsl r0
    36fc:	3e600240 	cdpcc	2, 6, cr0, cr0, cr0, {2}
    3700:	00020800 	andeq	r0, r2, r0, lsl #16
    3704:	9c010000 	stcls	0, cr0, [r1], {-0}
    3708:	000fbf08 	andeq	fp, pc, r8, lsl #30
    370c:	024b0100 	subeq	r0, fp, #0, 2
    3710:	08003e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, ip, sp}
    3714:	00000002 	andeq	r0, r0, r2
    3718:	86089c01 	strhi	r9, [r8], -r1, lsl #24
    371c:	0100000f 	tsteq	r0, pc
    3720:	3e640256 	mcrcc	2, 3, r0, cr4, cr6, {2}
    3724:	00020800 	andeq	r0, r2, r0, lsl #16
    3728:	9c010000 	stcls	0, cr0, [r1], {-0}
    372c:	0010db08 	andseq	sp, r0, r8, lsl #22
    3730:	02610100 	rsbeq	r0, r1, #0, 2
    3734:	08003e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip, sp}
    3738:	00000002 	andeq	r0, r0, r2
    373c:	66089c01 	strvs	r9, [r8], -r1, lsl #24
    3740:	01000010 	tsteq	r0, r0, lsl r0
    3744:	3e68026c 	cdpcc	2, 6, cr0, cr8, cr12, {3}
    3748:	00020800 	andeq	r0, r2, r0, lsl #16
    374c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3750:	00121308 	andseq	r1, r2, r8, lsl #6
    3754:	02770100 	rsbseq	r0, r7, #0, 2
    3758:	08003e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, ip, sp}
    375c:	00000002 	andeq	r0, r0, r2
    3760:	24089c01 	strcs	r9, [r8], #-3073	; 0xc01
    3764:	0100000f 	tsteq	r0, pc
    3768:	3e6c0283 	cdpcc	2, 6, cr0, cr12, cr3, {4}
    376c:	00020800 	andeq	r0, r2, r0, lsl #16
    3770:	9c010000 	stcls	0, cr0, [r1], {-0}
    3774:	0010c308 	andseq	ip, r0, r8, lsl #6
    3778:	028f0100 	addeq	r0, pc, #0, 2
    377c:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
    3780:	00000002 	andeq	r0, r0, r2
    3784:	4a089c01 	bmi	22a790 <__Stack_Size+0x22a390>
    3788:	0100000f 	tsteq	r0, pc
    378c:	3e70029a 	mrccc	2, 3, r0, cr0, cr10, {4}
    3790:	00020800 	andeq	r0, r2, r0, lsl #16
    3794:	9c010000 	stcls	0, cr0, [r1], {-0}
    3798:	00117508 	andseq	r7, r1, r8, lsl #10
    379c:	02a50100 	adceq	r0, r5, #0, 2
    37a0:	08003e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
    37a4:	00000002 	andeq	r0, r0, r2
    37a8:	54089c01 	strpl	r9, [r8], #-3073	; 0xc01
    37ac:	01000011 	tsteq	r0, r1, lsl r0
    37b0:	3e7402b0 	mrccc	2, 3, r0, cr4, cr0, {5}
    37b4:	00020800 	andeq	r0, r2, r0, lsl #16
    37b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    37bc:	00107b08 	andseq	r7, r0, r8, lsl #22
    37c0:	02bb0100 	adcseq	r0, fp, #0, 2
    37c4:	08003e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp}
    37c8:	00000002 	andeq	r0, r0, r2
    37cc:	f1089c01 			; <UNDEFINED> instruction: 0xf1089c01
    37d0:	0100000f 	tsteq	r0, pc
    37d4:	3e7802c6 	cdpcc	2, 7, cr0, cr8, cr6, {6}
    37d8:	00020800 	andeq	r0, r2, r0, lsl #16
    37dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    37e0:	00110808 	andseq	r0, r1, r8, lsl #16
    37e4:	02d10100 	sbcseq	r0, r1, #0, 2
    37e8:	08003e7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}
    37ec:	00000002 	andeq	r0, r0, r2
    37f0:	40089c01 	andmi	r9, r8, r1, lsl #24
    37f4:	01000012 	tsteq	r0, r2, lsl r0
    37f8:	3e7c02dc 	mrccc	2, 3, r0, cr12, cr12, {6}
    37fc:	00020800 	andeq	r0, r2, r0, lsl #16
    3800:	9c010000 	stcls	0, cr0, [r1], {-0}
    3804:	000fe008 	andeq	lr, pc, r8
    3808:	02e70100 	rsceq	r0, r7, #0, 2
    380c:	08003e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
    3810:	00000002 	andeq	r0, r0, r2
    3814:	76089c01 	strvc	r9, [r8], -r1, lsl #24
    3818:	0100000f 	tsteq	r0, pc
    381c:	3e8002f2 	mcrcc	2, 4, r0, cr0, cr2, {7}
    3820:	00020800 	andeq	r0, r2, r0, lsl #16
    3824:	9c010000 	stcls	0, cr0, [r1], {-0}
    3828:	0012a408 	andseq	sl, r2, r8, lsl #8
    382c:	02fd0100 	rscseq	r0, sp, #0, 2
    3830:	08003e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip, sp}
    3834:	00000002 	andeq	r0, r0, r2
    3838:	8b089c01 	blhi	22a844 <__Stack_Size+0x22a444>
    383c:	01000012 	tsteq	r0, r2, lsl r0
    3840:	3e840308 	cdpcc	3, 8, cr0, cr4, cr8, {0}
    3844:	00020800 	andeq	r0, r2, r0, lsl #16
    3848:	9c010000 	stcls	0, cr0, [r1], {-0}
    384c:	000f5d08 	andeq	r5, pc, r8, lsl #26
    3850:	03130100 	tsteq	r3, #0, 2
    3854:	08003e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp, ip, sp}
    3858:	00000002 	andeq	r0, r0, r2
    385c:	4d089c01 	stcmi	12, cr9, [r8, #-4]
    3860:	01000010 	tsteq	r0, r0, lsl r0
    3864:	3e88031e 	mcrcc	3, 4, r0, cr8, cr14, {0}
    3868:	00020800 	andeq	r0, r2, r0, lsl #16
    386c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3870:	00100108 	andseq	r0, r0, r8, lsl #2
    3874:	032a0100 			; <UNDEFINED> instruction: 0x032a0100
    3878:	08003e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, ip, sp}
    387c:	00000002 	andeq	r0, r0, r2
    3880:	a8049c01 	stmdage	r4, {r0, sl, fp, ip, pc}
    3884:	0100000c 	tsteq	r0, ip
    3888:	0000dd8d 	andeq	sp, r0, sp, lsl #27
    388c:	00056300 	andeq	r6, r5, r0, lsl #6
    3890:	0a000500 	beq	4c98 <__Stack_Size+0x4898>
    3894:	000006c1 	andeq	r0, r0, r1, asr #13
    3898:	dd01d201 	sfmle	f5, 1, [r1, #-4]
    389c:	75000000 	strvc	r0, [r0, #-0]
    38a0:	05000005 	streq	r0, [r0, #-5]
    38a4:	043c0b00 	ldrteq	r0, [ip], #-2816	; 0xb00
    38a8:	36010000 	strcc	r0, [r1], -r0
    38ac:	0000dd02 	andeq	sp, r0, r2, lsl #26
    38b0:	00000500 	andeq	r0, r0, r0, lsl #10
    38b4:	000002d4 	ldrdeq	r0, [r0], -r4
    38b8:	048a0004 	streq	r0, [sl], #4
    38bc:	01040000 	mrseq	r0, (UNDEF: 4)
    38c0:	00000850 	andeq	r0, r0, r0, asr r8
    38c4:	00139b01 	andseq	r9, r3, r1, lsl #22
    38c8:	0000fa00 	andeq	pc, r0, r0, lsl #20
    38cc:	003e8c00 	eorseq	r8, lr, r0, lsl #24
    38d0:	00006208 	andeq	r6, r0, r8, lsl #4
    38d4:	00060600 	andeq	r0, r6, r0, lsl #12
    38d8:	13e60200 	mvnne	r0, #0, 4
    38dc:	04010000 	streq	r0, [r1], #-0
    38e0:	0000007f 	andeq	r0, r0, pc, ror r0
    38e4:	08003e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp}
    38e8:	0000000c 	andeq	r0, r0, ip
    38ec:	007f9c01 	rsbseq	r9, pc, r1, lsl #24
    38f0:	68030000 	stmdavs	r3, {}	; <UNPREDICTABLE>
    38f4:	01000013 	tsteq	r0, r3, lsl r0
    38f8:	00007f04 	andeq	r7, r0, r4, lsl #30
    38fc:	000e9000 	andeq	r9, lr, r0
    3900:	00df0300 	sbcseq	r0, pc, r0, lsl #6
    3904:	04010000 	streq	r0, [r1], #-0
    3908:	0000007f 	andeq	r0, r0, pc, ror r0
    390c:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    3910:	00066004 	andeq	r6, r6, r4
    3914:	7f0b0100 	svcvc	0x000b0100
    3918:	6d000000 	stcvs	0, cr0, [r0, #-0]
    391c:	05000000 	streq	r0, [r0, #-0]
    3920:	3e940600 	cdpcc	6, 9, cr0, cr4, cr0, {0}
    3924:	02530800 	subseq	r0, r3, #0, 16
    3928:	01070000 	mrseq	r0, (UNDEF: 7)
    392c:	01f30350 	mvnseq	r0, r0, asr r3
    3930:	08000051 	stmdaeq	r0, {r0, r4, r6}
    3934:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3938:	ad090074 	stcge	0, cr0, [r9, #-464]	; 0xfffffe30
    393c:	01000013 	tsteq	r0, r3, lsl r0
    3940:	003e980f 	eorseq	r9, lr, pc, lsl #16
    3944:	00000408 	andeq	r0, r0, r8, lsl #8
    3948:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    394c:	04000000 	streq	r0, [r0], #-0
    3950:	00000a0e 	andeq	r0, r0, lr, lsl #20
    3954:	007f1401 	rsbseq	r1, pc, r1, lsl #8
    3958:	00ac0000 	adceq	r0, ip, r0
    395c:	00050000 	andeq	r0, r5, r0
    3960:	003e9c0a 	eorseq	r9, lr, sl, lsl #24
    3964:	00026408 	andeq	r6, r2, r8, lsl #8
    3968:	71090000 	mrsvc	r0, (UNDEF: 9)
    396c:	01000013 	tsteq	r0, r3, lsl r0
    3970:	003e9c17 	eorseq	r9, lr, r7, lsl ip
    3974:	00000408 	andeq	r0, r0, r8, lsl #8
    3978:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    397c:	04000000 	streq	r0, [r0], #-0
    3980:	00000085 	andeq	r0, r0, r5, lsl #1
    3984:	007f1b01 	rsbseq	r1, pc, r1, lsl #22
    3988:	00dc0000 	sbcseq	r0, ip, r0
    398c:	00050000 	andeq	r0, r5, r0
    3990:	003ea00a 	eorseq	sl, lr, sl
    3994:	00027508 	andeq	r7, r2, r8, lsl #10
    3998:	c6020000 	strgt	r0, [r2], -r0
    399c:	01000013 	tsteq	r0, r3, lsl r0
    39a0:	00007f1e 	andeq	r7, r0, lr, lsl pc
    39a4:	003ea000 	eorseq	sl, lr, r0
    39a8:	00001e08 	andeq	r1, r0, r8, lsl #28
    39ac:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    39b0:	03000001 	movweq	r0, #1
    39b4:	0000137f 	andeq	r1, r0, pc, ror r3
    39b8:	01451e01 	cmpeq	r5, r1, lsl #28
    39bc:	0ed20000 	cdpeq	0, 13, cr0, cr2, cr0, {0}
    39c0:	d1030000 	mrsle	r0, (UNDEF: 3)
    39c4:	01000013 	tsteq	r0, r3, lsl r0
    39c8:	00007f1e 	andeq	r7, r0, lr, lsl pc
    39cc:	000ef000 	andeq	pc, lr, r0
    39d0:	00690b00 	rsbeq	r0, r9, r0, lsl #22
    39d4:	014b2501 	cmpeq	fp, r1, lsl #10
    39d8:	0f0e0000 	svceq	0x000e0000
    39dc:	b8040000 	stmdalt	r4, {}	; <UNPREDICTABLE>
    39e0:	01000004 	tsteq	r0, r4
    39e4:	00007f27 	andeq	r7, r0, r7, lsr #30
    39e8:	00013b00 	andeq	r3, r1, r0, lsl #22
    39ec:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    39f0:	08003eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, ip, sp}
    39f4:	00000286 	andeq	r0, r0, r6, lsl #5
    39f8:	4b040d00 	blmi	106e00 <__Stack_Size+0x106a00>
    39fc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3a00:	0b630801 	bleq	18c5a0c <__Stack_Size+0x18c560c>
    3a04:	bb020000 	bllt	83a0c <__Stack_Size+0x8360c>
    3a08:	01000013 	tsteq	r0, r3, lsl r0
    3a0c:	00007f2c 	andeq	r7, r0, ip, lsr #30
    3a10:	003ebe00 	eorseq	fp, lr, r0, lsl #28
    3a14:	00002408 	andeq	r2, r0, r8, lsl #8
    3a18:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    3a1c:	03000001 	movweq	r0, #1
    3a20:	0000137f 	andeq	r1, r0, pc, ror r3
    3a24:	01452c01 	cmpeq	r5, r1, lsl #24
    3a28:	0f430000 	svceq	0x00430000
    3a2c:	d1030000 	mrsle	r0, (UNDEF: 3)
    3a30:	01000013 	tsteq	r0, r3, lsl r0
    3a34:	00007f2c 	andeq	r7, r0, ip, lsr #30
    3a38:	000f6100 	andeq	r6, pc, r0, lsl #2
    3a3c:	00690b00 	rsbeq	r0, r9, r0, lsl #22
    3a40:	014b3301 	cmpeq	fp, r1, lsl #6
    3a44:	0f7f0000 	svceq	0x007f0000
    3a48:	cc0f0000 	stcgt	0, cr0, [pc], {-0}
    3a4c:	1008003e 	andne	r0, r8, lr, lsr r0
    3a50:	04000000 	streq	r0, [r0], #-0
    3a54:	00000610 	andeq	r0, r0, r0, lsl r6
    3a58:	007f3601 	rsbseq	r3, pc, r1, lsl #12
    3a5c:	01b00000 	movseq	r0, r0
    3a60:	00050000 	andeq	r0, r5, r0
    3a64:	000a0204 	andeq	r0, sl, r4, lsl #4
    3a68:	7f370100 	svcvc	0x00370100
    3a6c:	c1000000 	mrsgt	r0, (UNDEF: 0)
    3a70:	05000001 	streq	r0, [r0, #-1]
    3a74:	3ed00c00 	cdpcc	12, 13, cr0, cr0, cr0, {0}
    3a78:	02970800 	addseq	r0, r7, #0, 16
    3a7c:	d80c0000 	stmdale	ip, {}	; <UNPREDICTABLE>
    3a80:	a808003e 	stmdage	r8, {r1, r2, r3, r4, r5}
    3a84:	00000002 	andeq	r0, r0, r2
    3a88:	13870900 	orrne	r0, r7, #0, 18
    3a8c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    3a90:	08003ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    3a94:	00000008 	andeq	r0, r0, r8
    3a98:	021f9c01 	andseq	r9, pc, #256	; 0x100
    3a9c:	db030000 	blle	c3aa4 <__Stack_Size+0xc36a4>
    3aa0:	01000013 	tsteq	r0, r3, lsl r0
    3aa4:	00007f3e 	andeq	r7, r0, lr, lsr pc
    3aa8:	000fbf00 	andeq	fp, pc, r0, lsl #30
    3aac:	0a6d0400 	beq	1b44ab4 <__Stack_Size+0x1b446b4>
    3ab0:	44010000 	strmi	r0, [r1], #-0
    3ab4:	0000007f 	andeq	r0, r0, pc, ror r0
    3ab8:	0000020a 	andeq	r0, r0, sl, lsl #4
    3abc:	ea100005 	b	403ad8 <__Stack_Size+0x4036d8>
    3ac0:	b908003e 	stmdblt	r8, {r1, r2, r3, r4, r5}
    3ac4:	07000002 	streq	r0, [r0, -r2]
    3ac8:	f3065001 	vhadd.u8	d5, d6, d1
    3acc:	64085001 	strvs	r5, [r8], #-1
    3ad0:	0200001e 	andeq	r0, r0, #30
    3ad4:	00001358 	andeq	r1, r0, r8, asr r3
    3ad8:	007f4701 	rsbseq	r4, pc, r1, lsl #14
    3adc:	3eea0000 	cdpcc	0, 14, cr0, cr10, cr0, {0}
    3ae0:	00040800 	andeq	r0, r4, r0, lsl #16
    3ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ae8:	00000253 	andeq	r0, r0, r3, asr r2
    3aec:	0009f504 	andeq	pc, r9, r4, lsl #10
    3af0:	7f4c0100 	svcvc	0x004c0100
    3af4:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    3af8:	05000002 	streq	r0, [r0, #-2]
    3afc:	3eee0a00 	vfmacc.f32	s1, s28, s0
    3b00:	02ca0800 	sbceq	r0, sl, #0, 16
    3b04:	04000000 	streq	r0, [r0], #-0
    3b08:	00000660 	andeq	r0, r0, r0, ror #12
    3b0c:	007f0b01 	rsbseq	r0, pc, r1, lsl #22
    3b10:	02640000 	rsbeq	r0, r4, #0
    3b14:	00050000 	andeq	r0, r5, r0
    3b18:	000a0e04 	andeq	r0, sl, r4, lsl #28
    3b1c:	7f140100 	svcvc	0x00140100
    3b20:	75000000 	strvc	r0, [r0, #-0]
    3b24:	05000002 	streq	r0, [r0, #-2]
    3b28:	00850400 	addeq	r0, r5, r0, lsl #8
    3b2c:	1b010000 	blne	43b34 <__Stack_Size+0x43734>
    3b30:	0000007f 	andeq	r0, r0, pc, ror r0
    3b34:	00000286 	andeq	r0, r0, r6, lsl #5
    3b38:	b8040005 	stmdalt	r4, {r0, r2}
    3b3c:	01000004 	tsteq	r0, r4
    3b40:	00007f27 	andeq	r7, r0, r7, lsr #30
    3b44:	00029700 	andeq	r9, r2, r0, lsl #14
    3b48:	04000500 	streq	r0, [r0], #-1280	; 0x500
    3b4c:	00000610 	andeq	r0, r0, r0, lsl r6
    3b50:	007f3601 	rsbseq	r3, pc, r1, lsl #12
    3b54:	02a80000 	adceq	r0, r8, #0
    3b58:	00050000 	andeq	r0, r5, r0
    3b5c:	000a0204 	andeq	r0, sl, r4, lsl #4
    3b60:	7f370100 	svcvc	0x00370100
    3b64:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    3b68:	05000002 	streq	r0, [r0, #-2]
    3b6c:	0a6d0400 	beq	1b44b74 <__Stack_Size+0x1b44774>
    3b70:	44010000 	strmi	r0, [r1], #-0
    3b74:	0000007f 	andeq	r0, r0, pc, ror r0
    3b78:	000002ca 	andeq	r0, r0, sl, asr #5
    3b7c:	f5110005 			; <UNDEFINED> instruction: 0xf5110005
    3b80:	01000009 	tsteq	r0, r9
    3b84:	00007f4c 	andeq	r7, r0, ip, asr #30
    3b88:	00000500 	andeq	r0, r0, r0, lsl #10
    3b8c:	00000730 	andeq	r0, r0, r0, lsr r7
    3b90:	05810004 	streq	r0, [r1, #4]
    3b94:	01040000 	mrseq	r0, (UNDEF: 4)
    3b98:	00000850 	andeq	r0, r0, r0, asr r8
    3b9c:	00149901 	andseq	r9, r4, r1, lsl #18
    3ba0:	0000fa00 	andeq	pc, r0, r0, lsl #20
    3ba4:	003ef000 	eorseq	pc, lr, r0
    3ba8:	00037c08 	andeq	r7, r3, r8, lsl #24
    3bac:	00066c00 	andeq	r6, r6, r0, lsl #24
    3bb0:	14040200 	strne	r0, [r4], #-512	; 0x200
    3bb4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3bb8:	00005c01 	andeq	r5, r0, r1, lsl #24
    3bbc:	00690300 	rsbeq	r0, r9, r0, lsl #6
    3bc0:	005c2a01 	subseq	r2, ip, r1, lsl #20
    3bc4:	b1040000 	mrslt	r0, (UNDEF: 4)
    3bc8:	01000014 	tsteq	r0, r4, lsl r0
    3bcc:	00005c2b 	andeq	r5, r0, fp, lsr #24
    3bd0:	14ad0400 	strtne	r0, [sp], #1024	; 0x400
    3bd4:	2b010000 	blcs	43bdc <__Stack_Size+0x437dc>
    3bd8:	0000005c 	andeq	r0, r0, ip, asr r0
    3bdc:	00149004 	andseq	r9, r4, r4
    3be0:	5c2c0100 	stfpls	f0, [ip], #-0
    3be4:	00000000 	andeq	r0, r0, r0
    3be8:	63080105 	movwvs	r0, #33029	; 0x8105
    3bec:	0200000b 	andeq	r0, r0, #11
    3bf0:	00001482 	andeq	r1, r0, r2, lsl #9
    3bf4:	98016b01 	stmdals	r1, {r0, r8, r9, fp, sp, lr}
    3bf8:	03000000 	movweq	r0, #0
    3bfc:	6d010069 	stcvs	0, cr0, [r1, #-420]	; 0xfffffe5c
    3c00:	0000005c 	andeq	r0, r0, ip, asr r0
    3c04:	01006a03 	tsteq	r0, r3, lsl #20
    3c08:	00005c6d 	andeq	r5, r0, sp, ror #24
    3c0c:	14120400 	ldrne	r0, [r2], #-1024	; 0x400
    3c10:	6d010000 	stcvs	0, cr0, [r1, #-0]
    3c14:	0000005c 	andeq	r0, r0, ip, asr r0
    3c18:	00149004 	andseq	r9, r4, r4
    3c1c:	5c6e0100 	stfple	f0, [lr], #-0
    3c20:	00000000 	andeq	r0, r0, r0
    3c24:	00150106 	andseq	r0, r5, r6, lsl #2
    3c28:	01d50100 	bicseq	r0, r5, r0, lsl #2
    3c2c:	00151107 	andseq	r1, r5, r7, lsl #2
    3c30:	01110100 	tsteq	r1, r0, lsl #2
    3c34:	000000d6 	ldrdeq	r0, [r0], -r6
    3c38:	0000d601 	andeq	sp, r0, r1, lsl #12
    3c3c:	147a0800 	ldrbtne	r0, [sl], #-2048	; 0x800
    3c40:	11010000 	mrsne	r0, (UNDEF: 1)
    3c44:	0000d601 	andeq	sp, r0, r1, lsl #12
    3c48:	144e0800 	strbne	r0, [lr], #-2048	; 0x800
    3c4c:	11010000 	mrsne	r0, (UNDEF: 1)
    3c50:	0000d601 	andeq	sp, r0, r1, lsl #12
    3c54:	0c690900 	stcleq	9, cr0, [r9], #-0
    3c58:	13010000 	movwne	r0, #4096	; 0x1000
    3c5c:	0000dd01 	andeq	sp, r0, r1, lsl #26
    3c60:	040a0000 	streq	r0, [sl], #-0
    3c64:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    3c68:	07020500 	streq	r0, [r2, -r0, lsl #10]
    3c6c:	00000d27 	andeq	r0, r0, r7, lsr #26
    3c70:	00147207 	andseq	r7, r4, r7, lsl #4
    3c74:	011b0100 	tsteq	fp, r0, lsl #2
    3c78:	000000d6 	ldrdeq	r0, [r0], -r6
    3c7c:	00010e01 	andeq	r0, r1, r1, lsl #28
    3c80:	0c690800 	stcleq	8, cr0, [r9], #-0
    3c84:	1b010000 	blne	43c8c <__Stack_Size+0x4388c>
    3c88:	0000d601 	andeq	sp, r0, r1, lsl #12
    3c8c:	14d30900 	ldrbne	r0, [r3], #2304	; 0x900
    3c90:	1d010000 	stcne	0, cr0, [r1, #-0]
    3c94:	0000dd01 	andeq	sp, r0, r1, lsl #26
    3c98:	46070000 	strmi	r0, [r7], -r0
    3c9c:	01000014 	tsteq	r0, r4, lsl r0
    3ca0:	00d60123 	sbcseq	r0, r6, r3, lsr #2
    3ca4:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    3ca8:	08000001 	stmdaeq	r0, {r0}
    3cac:	00000c69 	andeq	r0, r0, r9, ror #24
    3cb0:	d6012301 	strle	r2, [r1], -r1, lsl #6
    3cb4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3cb8:	000014d3 	ldrdeq	r1, [r0], -r3
    3cbc:	dd012501 	cfstr32le	mvfx2, [r1, #-4]
    3cc0:	00000000 	andeq	r0, r0, r0
    3cc4:	000da60b 	andeq	sl, sp, fp, lsl #12
    3cc8:	d6130100 	ldrle	r0, [r3], -r0, lsl #2
    3ccc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    3cd0:	2c08003e 	stccs	0, cr0, [r8], {62}	; 0x3e
    3cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3cd8:	00019f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    3cdc:	13680c00 	cmnne	r8, #0, 24
    3ce0:	13010000 	movwne	r0, #4096	; 0x1000
    3ce4:	000000d6 	ldrdeq	r0, [r0], -r6
    3ce8:	00000fe0 	andeq	r0, r0, r0, ror #31
    3cec:	0015900c 	andseq	r9, r5, ip
    3cf0:	d6130100 	ldrle	r0, [r3], -r0, lsl #2
    3cf4:	01000000 	mrseq	r0, (UNDEF: 0)
    3cf8:	0d000010 	stceq	0, cr0, [r0, #-64]	; 0xffffffc0
    3cfc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3d00:	00d61501 	sbcseq	r1, r6, r1, lsl #10
    3d04:	102f0000 	eorne	r0, pc, r0
    3d08:	fe0e0000 	cdp2	0, 0, cr0, cr14, cr0, {0}
    3d0c:	b508003e 	strlt	r0, [r8, #-62]	; 0x3e
    3d10:	0f000006 	svceq	0x00000006
    3d14:	0c0b5101 	stfeqs	f5, [fp], {1}
    3d18:	001e8480 	andseq	r8, lr, r0, lsl #9
    3d1c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    3d20:	010f1b01 	tsteq	pc, r1, lsl #22
    3d24:	01f30350 	mvnseq	r0, r0, asr r3
    3d28:	10000050 	andne	r0, r0, r0, asr r0
    3d2c:	00001598 	muleq	r0, r8, r5
    3d30:	3f1c2301 	svccc	0x001c2301
    3d34:	00040800 	andeq	r0, r4, r0, lsl #16
    3d38:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d3c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    3d40:	003f2011 	eorseq	r2, pc, r1, lsl r0	; <UNPREDICTABLE>
    3d44:	0006cf08 	andeq	ip, r6, r8, lsl #30
    3d48:	25120000 	ldrcs	r0, [r2, #-0]
    3d4c:	20000000 	andcs	r0, r0, r0
    3d50:	9c08003f 	stcls	0, cr0, [r8], {63}	; 0x3f
    3d54:	01000000 	mrseq	r0, (UNDEF: 0)
    3d58:	0002449c 	muleq	r2, ip, r4
    3d5c:	00311300 	eorseq	r1, r1, r0, lsl #6
    3d60:	107e0000 	rsbsne	r0, lr, r0
    3d64:	3a140000 	bcc	503d6c <__Stack_Size+0x50396c>
    3d68:	14000000 	strne	r0, [r0], #-0
    3d6c:	00000045 	andeq	r0, r0, r5, asr #32
    3d70:	00005013 	andeq	r5, r0, r3, lsl r0
    3d74:	0010be00 	andseq	fp, r0, r0, lsl #28
    3d78:	3f7e1500 	svccc	0x007e1500
    3d7c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    3d80:	023a0000 	eorseq	r0, sl, #0
    3d84:	31140000 	tstcc	r4, r0
    3d88:	13000000 	movwne	r0, #0
    3d8c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3d90:	000010e8 	andeq	r1, r0, r8, ror #1
    3d94:	00004513 	andeq	r4, r0, r3, lsl r5
    3d98:	0010fb00 	andseq	pc, r0, r0, lsl #22
    3d9c:	00501400 	subseq	r1, r0, r0, lsl #8
    3da0:	8e160000 	cdphi	0, 1, cr0, cr6, cr0, {0}
    3da4:	d608003f 			; <UNDEFINED> instruction: 0xd608003f
    3da8:	30000006 	andcc	r0, r0, r6
    3dac:	0f000002 	svceq	0x00000002
    3db0:	74025101 	strvc	r5, [r2], #-257	; 0x101
    3db4:	50010f00 	andpl	r0, r1, r0, lsl #30
    3db8:	00047602 	andeq	r7, r4, r2, lsl #12
    3dbc:	003fae17 	eorseq	sl, pc, r7, lsl lr	; <UNPREDICTABLE>
    3dc0:	0006f608 	andeq	pc, r6, r8, lsl #12
    3dc4:	7e170000 	cdpvc	0, 1, cr0, cr7, cr0, {0}
    3dc8:	0708003f 	smladxeq	r8, pc, r0, r0	; <UNPREDICTABLE>
    3dcc:	00000007 	andeq	r0, r0, r7
    3dd0:	00006312 	andeq	r6, r0, r2, lsl r3
    3dd4:	003fbc00 	eorseq	fp, pc, r0, lsl #24
    3dd8:	00015008 	andeq	r5, r1, r8
    3ddc:	ba9c0100 	blt	fe7041e4 <SCS_BASE+0x1e6f61e4>
    3de0:	14000002 	strne	r0, [r0], #-2
    3de4:	0000006f 	andeq	r0, r0, pc, rrx
    3de8:	00007814 	andeq	r7, r0, r4, lsl r8
    3dec:	00811300 	addeq	r1, r1, r0, lsl #6
    3df0:	110e0000 	mrsne	r0, (UNDEF: 14)
    3df4:	8c180000 	ldchi	0, cr0, [r8], {-0}
    3df8:	00000000 	andeq	r0, r0, r0
    3dfc:	00007019 	andeq	r7, r0, r9, lsl r0
    3e00:	0002a700 	andeq	sl, r2, r0, lsl #14
    3e04:	006f1300 	rsbeq	r1, pc, r0, lsl #6
    3e08:	11210000 			; <UNDEFINED> instruction: 0x11210000
    3e0c:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
    3e10:	90000000 	andls	r0, r0, r0
    3e14:	13000011 	movwne	r0, #17
    3e18:	00000081 	andeq	r0, r0, r1, lsl #1
    3e1c:	000011c4 	andeq	r1, r0, r4, asr #3
    3e20:	00008c13 	andeq	r8, r0, r3, lsl ip
    3e24:	0011d700 	andseq	sp, r1, r0, lsl #14
    3e28:	40b81700 	adcsmi	r1, r8, r0, lsl #14
    3e2c:	070e0800 	streq	r0, [lr, -r0, lsl #16]
    3e30:	17000000 	strne	r0, [r0, -r0]
    3e34:	08003ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    3e38:	0000070e 	andeq	r0, r0, lr, lsl #14
    3e3c:	00401017 	subeq	r1, r0, r7, lsl r0
    3e40:	00072808 	andeq	r2, r7, r8, lsl #16
    3e44:	98120000 	ldmdals	r2, {}	; <UNPREDICTABLE>
    3e48:	0c000000 	stceq	0, cr0, [r0], {-0}
    3e4c:	20080041 	andcs	r0, r8, r1, asr #32
    3e50:	01000000 	mrseq	r0, (UNDEF: 0)
    3e54:	0002e09c 	muleq	r2, ip, r0
    3e58:	41121700 	tstmi	r2, r0, lsl #14
    3e5c:	00250800 	eoreq	r0, r5, r0, lsl #16
    3e60:	1e170000 	cdpne	0, 1, cr0, cr7, cr0, {0}
    3e64:	63080041 	movwvs	r0, #32833	; 0x8041
    3e68:	00000000 	andeq	r0, r0, r0
    3e6c:	00079b1a 	andeq	r9, r7, sl, lsl fp
    3e70:	d6e60100 	strbtle	r0, [r6], r0, lsl #2
    3e74:	2c000000 	stccs	0, cr0, [r0], {-0}
    3e78:	0c080041 	stceq	0, cr0, [r8], {65}	; 0x41
    3e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    3e80:	14d8109c 	ldrbne	r1, [r8], #156	; 0x9c
    3e84:	eb010000 	bl	43e8c <__Stack_Size+0x43a8c>
    3e88:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    3e8c:	0000000c 	andeq	r0, r0, ip
    3e90:	03179c01 	tsteq	r7, #256	; 0x100
    3e94:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    3e98:	eb010064 	bl	44030 <__Stack_Size+0x43c30>
    3e9c:	000000d6 	ldrdeq	r0, [r0], -r6
    3ea0:	10005001 	andne	r5, r0, r1
    3ea4:	00001547 	andeq	r1, r0, r7, asr #10
    3ea8:	4144f001 	cmpmi	r4, r1	; <UNPREDICTABLE>
    3eac:	000c0800 	andeq	r0, ip, r0, lsl #16
    3eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3eb4:	0000033a 	andeq	r0, r0, sl, lsr r3
    3eb8:	0015581c 	andseq	r5, r5, ip, lsl r8
    3ebc:	d6f00100 	ldrbtle	r0, [r0], r0, lsl #2
    3ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ec4:	57100050 			; <UNDEFINED> instruction: 0x57100050
    3ec8:	01000014 	tsteq	r0, r4, lsl r0
    3ecc:	004150f5 	strdeq	r5, [r1], #-5
    3ed0:	00000c08 	andeq	r0, r0, r8, lsl #24
    3ed4:	6c9c0100 	ldfvss	f0, [ip], {0}
    3ed8:	0c000003 	stceq	0, cr0, [r0], {3}
    3edc:	00001576 	andeq	r1, r0, r6, ror r5
    3ee0:	00d6f501 	sbcseq	pc, r6, r1, lsl #10
    3ee4:	12030000 	andne	r0, r3, #0
    3ee8:	fb1c0000 	blx	703ef2 <__Stack_Size+0x703af2>
    3eec:	01000014 	tsteq	r0, r4, lsl r0
    3ef0:	0000d6f5 	strdeq	sp, [r0], -r5
    3ef4:	00510100 	subseq	r0, r1, r0, lsl #2
    3ef8:	0014bb10 	andseq	fp, r4, r0, lsl fp
    3efc:	5cfa0100 	ldfple	f0, [sl]
    3f00:	0c080041 	stceq	0, cr0, [r8], {65}	; 0x41
    3f04:	01000000 	mrseq	r0, (UNDEF: 0)
    3f08:	00038f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    3f0c:	143f1c00 	ldrtne	r1, [pc], #-3072	; 3f14 <__Stack_Size+0x3b14>
    3f10:	fa010000 	blx	43f18 <__Stack_Size+0x43b18>
    3f14:	000000d6 	ldrdeq	r0, [r0], -r6
    3f18:	0b005001 	bleq	17f24 <__Stack_Size+0x17b24>
    3f1c:	00000e14 	andeq	r0, r0, r4, lsl lr
    3f20:	00d6ff01 	sbcseq	pc, r6, r1, lsl #30
    3f24:	41680000 	cmnmi	r8, r0
    3f28:	00140800 	andseq	r0, r4, r0, lsl #16
    3f2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f30:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    3f34:	0015640c 	andseq	r6, r5, ip, lsl #8
    3f38:	d6ff0100 	ldrbtle	r0, [pc], r0, lsl #2
    3f3c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3f40:	00000012 	andeq	r0, r0, r2, lsl r0
    3f44:	00142e1d 	andseq	r2, r4, sp, lsl lr
    3f48:	01070100 	mrseq	r0, (UNDEF: 23)
    3f4c:	000000d6 	ldrdeq	r0, [r0], -r6
    3f50:	0800417c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, lr}
    3f54:	0000000c 	andeq	r0, r0, ip
    3f58:	1e1e9c01 	cdpne	12, 1, cr9, cr14, cr1, {0}
    3f5c:	01000015 	tsteq	r0, r5, lsl r0
    3f60:	00d6010c 	sbcseq	r0, r6, ip, lsl #2
    3f64:	41880000 	orrmi	r0, r8, r0
    3f68:	00100800 	andseq	r0, r0, r0, lsl #16
    3f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f70:	000003f9 	strdeq	r0, [r0], -r9
    3f74:	0015761f 	andseq	r7, r5, pc, lsl r6
    3f78:	010c0100 	mrseq	r0, (UNDEF: 28)
    3f7c:	000000d6 	ldrdeq	r0, [r0], -r6
    3f80:	0000124a 	andeq	r1, r0, sl, asr #4
    3f84:	00a01200 	adceq	r1, r0, r0, lsl #4
    3f88:	41980000 	orrsmi	r0, r8, r0
    3f8c:	00080800 	andeq	r0, r8, r0, lsl #16
    3f90:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f94:	00000426 	andeq	r0, r0, r6, lsr #8
    3f98:	0000b120 	andeq	fp, r0, r0, lsr #2
    3f9c:	00127e00 	andseq	r7, r2, r0, lsl #28
    3fa0:	00bd2100 	adcseq	r2, sp, r0, lsl #2
    3fa4:	51010000 	mrspl	r0, (UNDEF: 1)
    3fa8:	0000c913 	andeq	ip, r0, r3, lsl r9
    3fac:	00129f00 	andseq	r9, r2, r0, lsl #30
    3fb0:	e4120000 	ldr	r0, [r2], #-0
    3fb4:	a0000000 	andge	r0, r0, r0
    3fb8:	04080041 	streq	r0, [r8], #-65	; 0x41
    3fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    3fc0:	00044c9c 	muleq	r4, ip, ip
    3fc4:	00f52000 	rscseq	r2, r5, r0
    3fc8:	12d40000 	sbcsne	r0, r4, #0
    3fcc:	01130000 	tsteq	r3, r0
    3fd0:	f5000001 			; <UNDEFINED> instruction: 0xf5000001
    3fd4:	00000012 	andeq	r0, r0, r2, lsl r0
    3fd8:	00010e12 	andeq	r0, r1, r2, lsl lr
    3fdc:	0041a400 	subeq	sl, r1, r0, lsl #8
    3fe0:	00000608 	andeq	r0, r0, r8, lsl #12
    3fe4:	729c0100 	addsvc	r0, ip, #0, 2
    3fe8:	20000004 	andcs	r0, r0, r4
    3fec:	0000011f 	andeq	r0, r0, pc, lsl r1
    3ff0:	0000131e 	andeq	r1, r0, lr, lsl r3
    3ff4:	00012b13 	andeq	r2, r1, r3, lsl fp
    3ff8:	00133f00 	andseq	r3, r3, r0, lsl #30
    3ffc:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    4000:	01000014 	tsteq	r0, r4, lsl r0
    4004:	41aa012c 			; <UNDEFINED> instruction: 0x41aa012c
    4008:	001a0800 	andseq	r0, sl, r0, lsl #16
    400c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4010:	000004a1 	andeq	r0, r0, r1, lsr #9
    4014:	00646923 	rsbeq	r6, r4, r3, lsr #18
    4018:	d6012c01 	strle	r2, [r1], -r1, lsl #24
    401c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    4020:	11000013 	tstne	r0, r3, lsl r0
    4024:	080041c0 	stmdaeq	r0, {r6, r7, r8, lr}
    4028:	00000098 	muleq	r0, r8, r0
    402c:	0bb11e00 	bleq	fec4b834 <SCS_BASE+0x1ec3d834>
    4030:	37010000 	strcc	r0, [r1, -r0]
    4034:	0000d601 	andeq	sp, r0, r1, lsl #12
    4038:	0041c400 	subeq	ip, r1, r0, lsl #8
    403c:	00002808 	andeq	r2, r0, r8, lsl #16
    4040:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    4044:	23000004 	movwcs	r0, #4
    4048:	01006469 	tsteq	r0, r9, ror #8
    404c:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    4050:	138f0000 	orrne	r0, pc, #0
    4054:	cd1f0000 	ldcgt	0, cr0, [pc, #-0]	; 405c <__Stack_Size+0x3c5c>
    4058:	0100001b 	tsteq	r0, fp, lsl r0
    405c:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    4060:	13b00000 	movsne	r0, #0
    4064:	e2170000 	ands	r0, r7, #0
    4068:	98080041 	stmdals	r8, {r0, r6}
    406c:	00000000 	andeq	r0, r0, r0
    4070:	00042d22 	andeq	r2, r4, r2, lsr #26
    4074:	01460100 	mrseq	r0, (UNDEF: 86)
    4078:	080041ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, lr}
    407c:	00000024 	andeq	r0, r0, r4, lsr #32
    4080:	05339c01 	ldreq	r9, [r3, #-3073]!	; 0xc01
    4084:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    4088:	46010064 	strmi	r0, [r1], -r4, rrx
    408c:	0000d601 	andeq	sp, r0, r1, lsl #12
    4090:	0013d100 	andseq	sp, r3, r0, lsl #2
    4094:	1bcd1f00 	blne	ff34bc9c <SCS_BASE+0x1f33dc9c>
    4098:	46010000 	strmi	r0, [r1], -r0
    409c:	0000d601 	andeq	sp, r0, r1, lsl #12
    40a0:	0013f200 	andseq	pc, r3, r0, lsl #4
    40a4:	14fb1f00 	ldrbtne	r1, [fp], #3840	; 0xf00
    40a8:	46010000 	strmi	r0, [r1], -r0
    40ac:	0000d601 	andeq	sp, r0, r1, lsl #12
    40b0:	00141300 	andseq	r1, r4, r0, lsl #6
    40b4:	420c1100 	andmi	r1, ip, #0, 2
    40b8:	00980800 	addseq	r0, r8, r0, lsl #16
    40bc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    40c0:	00000c60 	andeq	r0, r0, r0, ror #24
    40c4:	d6015301 	strle	r5, [r1], -r1, lsl #6
    40c8:	10000000 	andne	r0, r0, r0
    40cc:	30080042 	andcc	r0, r8, r2, asr #32
    40d0:	01000000 	mrseq	r0, (UNDEF: 0)
    40d4:	0005b09c 	muleq	r5, ip, r0
    40d8:	64692300 	strbtvs	r2, [r9], #-768	; 0x300
    40dc:	01530100 	cmpeq	r3, r0, lsl #2
    40e0:	000000d6 	ldrdeq	r0, [r0], -r6
    40e4:	00001434 	andeq	r1, r0, r4, lsr r4
    40e8:	001bcd1f 	andseq	ip, fp, pc, lsl sp
    40ec:	01530100 	cmpeq	r3, r0, lsl #2
    40f0:	000000d6 	ldrdeq	r0, [r0], -r6
    40f4:	00001455 	andeq	r1, r0, r5, asr r4
    40f8:	0000a024 	andeq	sl, r0, r4, lsr #32
    40fc:	00422c00 	subeq	r2, r2, r0, lsl #24
    4100:	00000c08 	andeq	r0, r0, r8, lsl #24
    4104:	01620100 	cmneq	r2, r0, lsl #2
    4108:	000005a6 	andeq	r0, r0, r6, lsr #11
    410c:	0000bd20 	andeq	fp, r0, r0, lsr #26
    4110:	00147600 	andseq	r7, r4, r0, lsl #12
    4114:	00b12000 	adcseq	r2, r1, r0
    4118:	14b30000 	ldrtne	r0, [r3], #0
    411c:	2c250000 	stccs	0, cr0, [r5], #-0
    4120:	0c080042 	stceq	0, cr0, [r8], {66}	; 0x42
    4124:	13000000 	movwne	r0, #0
    4128:	000000c9 	andeq	r0, r0, r9, asr #1
    412c:	000014db 	ldrdeq	r1, [r0], -fp
    4130:	2c170000 	ldccs	0, cr0, [r7], {-0}
    4134:	98080042 	stmdals	r8, {r1, r6}
    4138:	00000000 	andeq	r0, r0, r0
    413c:	00048122 	andeq	r8, r4, r2, lsr #2
    4140:	01650100 	cmneq	r5, r0, lsl #2
    4144:	08004240 	stmdaeq	r0, {r6, r9, lr}
    4148:	0000002c 	andeq	r0, r0, ip, lsr #32
    414c:	06289c01 	strteq	r9, [r8], -r1, lsl #24
    4150:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    4154:	65010064 	strvs	r0, [r1, #-100]	; 0x64
    4158:	0000d601 	andeq	sp, r0, r1, lsl #12
    415c:	00151f00 	andseq	r1, r5, r0, lsl #30
    4160:	1bcd1f00 	blne	ff34bd68 <SCS_BASE+0x1f33dd68>
    4164:	65010000 	strvs	r0, [r1, #-0]
    4168:	0000d601 	andeq	sp, r0, r1, lsl #12
    416c:	00154000 	andseq	r4, r5, r0
    4170:	14fb1f00 	ldrbtne	r1, [fp], #3840	; 0xf00
    4174:	65010000 	strvs	r0, [r1, #-0]
    4178:	0000d601 	andeq	sp, r0, r1, lsl #12
    417c:	00156100 	andseq	r6, r5, r0, lsl #2
    4180:	010e2400 	tsteq	lr, r0, lsl #8
    4184:	424c0000 	submi	r0, ip, #0
    4188:	00040800 	andeq	r0, r4, r0, lsl #16
    418c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    4190:	00061e01 	andeq	r1, r6, r1, lsl #28
    4194:	011f2600 	tsteq	pc, r0, lsl #12
    4198:	4c250000 	stcmi	0, cr0, [r5], #-0
    419c:	04080042 	streq	r0, [r8], #-66	; 0x42
    41a0:	14000000 	strne	r0, [r0], #-0
    41a4:	0000012b 	andeq	r0, r0, fp, lsr #2
    41a8:	66110000 	ldrvs	r0, [r1], -r0
    41ac:	98080042 	stmdals	r8, {r1, r6}
    41b0:	00000000 	andeq	r0, r0, r0
    41b4:	00005c27 	andeq	r5, r0, r7, lsr #24
    41b8:	00063800 	andeq	r3, r6, r0, lsl #16
    41bc:	06382800 	ldrteq	r2, [r8], -r0, lsl #16
    41c0:	009f0000 	addseq	r0, pc, r0
    41c4:	fe070405 	cdp2	4, 0, cr0, cr7, cr5, {0}
    41c8:	2900000a 	stmdbcs	r0, {r1, r3}
    41cc:	0000157c 	andeq	r1, r0, ip, ror r5
    41d0:	06280b01 	strteq	r0, [r8], -r1, lsl #22
    41d4:	03050000 	movweq	r0, #20480	; 0x5000
    41d8:	20000134 	andcs	r0, r0, r4, lsr r1
    41dc:	00005c27 	andeq	r5, r0, r7, lsr #24
    41e0:	00066000 	andeq	r6, r6, r0
    41e4:	06382800 	ldrteq	r2, [r8], -r0, lsl #16
    41e8:	00450000 	subeq	r0, r5, r0
    41ec:	0014ec29 	andseq	lr, r4, r9, lsr #24
    41f0:	500c0100 	andpl	r0, ip, r0, lsl #2
    41f4:	05000006 	streq	r0, [r0, #-6]
    41f8:	0001d603 	andeq	sp, r1, r3, lsl #12
    41fc:	13f32920 	mvnsne	r2, #32, 18	; 0x80000
    4200:	0d010000 	stceq	0, cr0, [r1, #-0]
    4204:	0000005c 	andeq	r0, r0, ip, asr r0
    4208:	01d50305 	bicseq	r0, r5, r5, lsl #6
    420c:	39292000 	stmdbcc	r9!, {sp}
    4210:	01000015 	tsteq	r0, r5, lsl r0
    4214:	00005c0e 	andeq	r5, r0, lr, lsl #24
    4218:	d4030500 	strle	r0, [r3], #-1280	; 0x500
    421c:	29200001 	stmdbcs	r0!, {r0}
    4220:	00001421 	andeq	r1, r0, r1, lsr #8
    4224:	00d60f01 	sbcseq	r0, r6, r1, lsl #30
    4228:	03050000 	movweq	r0, #20480	; 0x5000
    422c:	20000014 	andcs	r0, r0, r4, lsl r0
    4230:	00156b29 	andseq	r6, r5, r9, lsr #22
    4234:	d6100100 	ldrle	r0, [r0], -r0, lsl #2
    4238:	05000000 	streq	r0, [r0, #-0]
    423c:	00013003 	andeq	r3, r1, r3
    4240:	13e62a20 	mvnne	r2, #32, 20	; 0x20000
    4244:	0b020000 	bleq	8424c <__Stack_Size+0x83e4c>
    4248:	000000d6 	ldrdeq	r0, [r0], -r6
    424c:	000006cf 	andeq	r0, r0, pc, asr #13
    4250:	0000d62b 	andeq	sp, r0, fp, lsr #12
    4254:	00d62b00 	sbcseq	r2, r6, r0, lsl #22
    4258:	2c000000 	stccs	0, cr0, [r0], {-0}
    425c:	000013ad 	andeq	r1, r0, sp, lsr #7
    4260:	c62a0c02 	strtgt	r0, [sl], -r2, lsl #24
    4264:	02000013 	andeq	r0, r0, #19
    4268:	0000d60e 	andeq	sp, r0, lr, lsl #12
    426c:	0006f000 	andeq	pc, r6, r0
    4270:	06f02b00 	ldrbteq	r2, [r0], r0, lsl #22
    4274:	d62b0000 	strtle	r0, [fp], -r0
    4278:	00000000 	andeq	r0, r0, r0
    427c:	005c042d 	subseq	r0, ip, sp, lsr #8
    4280:	872e0000 	strhi	r0, [lr, -r0]!
    4284:	02000013 	andeq	r0, r0, #19
    4288:	00070710 	andeq	r0, r7, r0, lsl r7
    428c:	00d62b00 	sbcseq	r2, r6, r0, lsl #22
    4290:	2c000000 	stccs	0, cr0, [r0], {-0}
    4294:	00001371 	andeq	r1, r0, r1, ror r3
    4298:	bb2a0d02 	bllt	a876a8 <__Stack_Size+0xa872a8>
    429c:	02000013 	andeq	r0, r0, #19
    42a0:	0000d60f 	andeq	sp, r0, pc, lsl #12
    42a4:	00072800 	andeq	r2, r7, r0, lsl #16
    42a8:	06f02b00 	ldrbteq	r2, [r0], r0, lsl #22
    42ac:	d62b0000 	strtle	r0, [fp], -r0
    42b0:	00000000 	andeq	r0, r0, r0
    42b4:	0013582f 	andseq	r5, r3, pc, lsr #16
    42b8:	d6110200 	ldrle	r0, [r1], -r0, lsl #4
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    42c4:	08400004 	stmdaeq	r0, {r2}^
    42c8:	01040000 	mrseq	r0, (UNDEF: 4)
    42cc:	00000850 	andeq	r0, r0, r0, asr r8
    42d0:	00173b01 	andseq	r3, r7, r1, lsl #22
    42d4:	0000fa00 	andeq	pc, r0, r0, lsl #20
    42d8:	00426c00 	subeq	r6, r2, r0, lsl #24
    42dc:	00048008 	andeq	r8, r4, r8
    42e0:	0007c400 	andeq	ip, r7, r0, lsl #8
    42e4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    42e8:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    42ec:	94050202 	strls	r0, [r5], #-514	; 0x202
    42f0:	02000009 	andeq	r0, r0, #9
    42f4:	0b650601 	bleq	1945b00 <__Stack_Size+0x1945700>
    42f8:	75030000 	strvc	r0, [r3, #-0]
    42fc:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    4300:	00004527 	andeq	r4, r0, r7, lsr #10
    4304:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4308:	00000b07 	andeq	r0, r0, r7, lsl #22
    430c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    4310:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    4314:	02000000 	andeq	r0, r0, #0
    4318:	0d270702 	stceq	7, cr0, [r7, #-8]!
    431c:	75030000 	strvc	r0, [r3, #-0]
    4320:	29020038 	stmdbcs	r2, {r3, r4, r5}
    4324:	00000068 	andeq	r0, r0, r8, rrx
    4328:	63080102 	movwvs	r0, #33026	; 0x8102
    432c:	0400000b 	streq	r0, [r0], #-11
    4330:	000004ec 	andeq	r0, r0, ip, ror #9
    4334:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    4338:	45050000 	strmi	r0, [r5, #-0]
    433c:	04000000 	streq	r0, [r0], #-0
    4340:	00000347 	andeq	r0, r0, r7, asr #6
    4344:	008a3002 	addeq	r3, sl, r2
    4348:	57050000 	strpl	r0, [r5, -r0]
    434c:	06000000 	streq	r0, [r0], -r0
    4350:	a4390201 	ldrtge	r0, [r9], #-513	; 0x201
    4354:	07000000 	streq	r0, [r0, -r0]
    4358:	0000196d 	andeq	r1, r0, sp, ror #18
    435c:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    4360:	00010054 	andeq	r0, r1, r4, asr r0
    4364:	0008f304 	andeq	pc, r8, r4, lsl #6
    4368:	8f390200 	svchi	0x00390200
    436c:	06000000 	streq	r0, [r0], -r0
    4370:	c43b0201 	ldrtgt	r0, [fp], #-513	; 0x201
    4374:	07000000 	streq	r0, [r0, -r0]
    4378:	000005f1 	strdeq	r0, [r0], -r1
    437c:	0ae00700 	beq	ff805f84 <SCS_BASE+0x1f7f7f84>
    4380:	00010000 	andeq	r0, r1, r0
    4384:	00011404 	andeq	r1, r1, r4, lsl #8
    4388:	af3b0200 	svcge	0x003b0200
    438c:	02000000 	andeq	r0, r0, #0
    4390:	0afe0704 	beq	fff85fa8 <SCS_BASE+0x1ff77fa8>
    4394:	24090000 	strcs	r0, [r9], #-0
    4398:	52010c03 	andpl	r0, r1, #768	; 0x300
    439c:	0a000001 	beq	43a8 <__Stack_Size+0x3fa8>
    43a0:	00524341 	subseq	r4, r2, r1, asr #6
    43a4:	6f010e03 	svcvs	0x00010e03
    43a8:	00000000 	andeq	r0, r0, r0
    43ac:	0016b40b 	andseq	fp, r6, fp, lsl #8
    43b0:	010f0300 	mrseq	r0, SP_hyp
    43b4:	0000006f 	andeq	r0, r0, pc, rrx
    43b8:	16b10b04 	ldrtne	r0, [r1], r4, lsl #22
    43bc:	10030000 	andne	r0, r3, r0
    43c0:	00006f01 	andeq	r6, r0, r1, lsl #30
    43c4:	530a0800 	movwpl	r0, #43008	; 0xa800
    43c8:	11030052 	qaddne	r0, r2, r3
    43cc:	00006f01 	andeq	r6, r0, r1, lsl #30
    43d0:	430a0c00 	movwmi	r0, #44032	; 0xac00
    43d4:	12030052 	andne	r0, r3, #82	; 0x52
    43d8:	00006f01 	andeq	r6, r0, r1, lsl #30
    43dc:	410a1000 	mrsmi	r1, (UNDEF: 10)
    43e0:	13030052 	movwne	r0, #12370	; 0x3052
    43e4:	00006f01 	andeq	r6, r0, r1, lsl #30
    43e8:	e40b1400 	str	r1, [fp], #-1024	; 0x400
    43ec:	03000018 	movweq	r0, #24
    43f0:	006f0114 	rsbeq	r0, pc, r4, lsl r1	; <UNPREDICTABLE>
    43f4:	0a180000 	beq	6043fc <__Stack_Size+0x603ffc>
    43f8:	0052424f 	subseq	r4, r2, pc, asr #4
    43fc:	6f011503 	svcvs	0x00011503
    4400:	1c000000 	stcne	0, cr0, [r0], {-0}
    4404:	00163e0b 	andseq	r3, r6, fp, lsl #28
    4408:	01160300 	tsteq	r6, r0, lsl #6
    440c:	0000006f 	andeq	r0, r0, pc, rrx
    4410:	ed0c0020 	stc	0, cr0, [ip, #-128]	; 0xffffff80
    4414:	03000018 	movweq	r0, #24
    4418:	00d60117 	sbcseq	r0, r6, r7, lsl r1
    441c:	10090000 	andne	r0, r9, r0
    4420:	d0011903 	andle	r1, r1, r3, lsl #18
    4424:	0a000001 	beq	4430 <__Stack_Size+0x4030>
    4428:	00504452 	subseq	r4, r0, r2, asr r4
    442c:	7f011b03 	svcvc	0x00011b03
    4430:	00000000 	andeq	r0, r0, r0
    4434:	0018ac0b 	andseq	sl, r8, fp, lsl #24
    4438:	011c0300 	tsteq	ip, r0, lsl #6
    443c:	0000007f 	andeq	r0, r0, pc, ror r0
    4440:	18b10b02 	ldmne	r1!, {r1, r8, r9, fp}
    4444:	1d030000 	stcne	0, cr0, [r3, #-0]
    4448:	00007f01 	andeq	r7, r0, r1, lsl #30
    444c:	b70b0400 	strlt	r0, [fp, -r0, lsl #8]
    4450:	03000018 	movweq	r0, #24
    4454:	007f011e 	rsbseq	r0, pc, lr, lsl r1	; <UNPREDICTABLE>
    4458:	0b060000 	bleq	184460 <__Stack_Size+0x184060>
    445c:	0000167a 	andeq	r1, r0, sl, ror r6
    4460:	7f011f03 	svcvc	0x00011f03
    4464:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4468:	00167f0b 	andseq	r7, r6, fp, lsl #30
    446c:	01200300 			; <UNDEFINED> instruction: 0x01200300
    4470:	0000007f 	andeq	r0, r0, pc, ror r0
    4474:	16840b0a 	strne	r0, [r4], sl, lsl #22
    4478:	21030000 	mrscs	r0, (UNDEF: 3)
    447c:	00007f01 	andeq	r7, r0, r1, lsl #30
    4480:	890b0c00 	stmdbhi	fp, {sl, fp}
    4484:	03000016 	movweq	r0, #22
    4488:	007f0122 	rsbseq	r0, pc, r2, lsr #2
    448c:	000e0000 	andeq	r0, lr, r0
    4490:	0018170c 	andseq	r1, r8, ip, lsl #14
    4494:	01230300 			; <UNDEFINED> instruction: 0x01230300
    4498:	0000015e 	andeq	r0, r0, lr, asr r1
    449c:	1d040106 	stfnes	f0, [r4, #-24]	; 0xffffffe8
    44a0:	00000203 	andeq	r0, r0, r3, lsl #4
    44a4:	00179207 	andseq	r9, r7, r7, lsl #4
    44a8:	17070100 	strne	r0, [r7, -r0, lsl #2]
    44ac:	02000017 	andeq	r0, r0, #23
    44b0:	0015ec07 	andseq	lr, r5, r7, lsl #24
    44b4:	83070300 	movwhi	r0, #29440	; 0x7300
    44b8:	04000017 	streq	r0, [r0], #-23
    44bc:	0017a707 	andseq	sl, r7, r7, lsl #14
    44c0:	04000500 	streq	r0, [r0], #-1280	; 0x500
    44c4:	00001664 	andeq	r1, r0, r4, ror #12
    44c8:	01dc2304 	bicseq	r2, ip, r4, lsl #6
    44cc:	070d0000 	streq	r0, [sp, -r0]
    44d0:	01000018 	tsteq	r0, r8, lsl r0
    44d4:	0203033f 	andeq	r0, r3, #-67108864	; 0xfc000000
    44d8:	2c010000 	stccs	0, cr0, [r1], {-0}
    44dc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    44e0:	000016f4 	strdeq	r1, [r0], -r4
    44e4:	03034101 	movweq	r4, #12545	; 0x3101
    44e8:	00000002 	andeq	r0, r0, r2
    44ec:	0008350f 	andeq	r3, r8, pc, lsl #10
    44f0:	6c560100 	ldfvse	f0, [r6], {-0}
    44f4:	18080042 	stmdane	r8, {r1, r6}
    44f8:	01000000 	mrseq	r0, (UNDEF: 0)
    44fc:	0002519c 	muleq	r2, ip, r1
    4500:	160c1000 	strne	r1, [ip], -r0
    4504:	56010000 	strpl	r0, [r1], -r0
    4508:	0000003a 	andeq	r0, r0, sl, lsr r0
    450c:	00001582 	andeq	r1, r0, r2, lsl #11
    4510:	18220f00 	stmdane	r2!, {r8, r9, sl, fp}
    4514:	6a010000 	bvs	4451c <__Stack_Size+0x4411c>
    4518:	08004284 	stmdaeq	r0, {r2, r7, r9, lr}
    451c:	00000018 	andeq	r0, r0, r8, lsl r0
    4520:	02769c01 	rsbseq	r9, r6, #256	; 0x100
    4524:	f1100000 			; <UNDEFINED> instruction: 0xf1100000
    4528:	01000017 	tsteq	r0, r7, lsl r0
    452c:	00003a6a 	andeq	r3, r0, sl, ror #20
    4530:	0015a300 	andseq	sl, r5, r0, lsl #6
    4534:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    4538:	01000009 	tsteq	r0, r9
    453c:	00429c7e 	subeq	r9, r2, lr, ror ip
    4540:	00001808 	andeq	r1, r0, r8, lsl #16
    4544:	9b9c0100 	blls	fe70494c <SCS_BASE+0x1e6f694c>
    4548:	10000002 	andne	r0, r0, r2
    454c:	00001916 	andeq	r1, r0, r6, lsl r9
    4550:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    4554:	15c40000 	strbne	r0, [r4]
    4558:	11000000 	mrsne	r0, (UNDEF: 0)
    455c:	00001643 	andeq	r1, r0, r3, asr #12
    4560:	42b49001 	adcsmi	r9, r4, #1
    4564:	00180800 	andseq	r0, r8, r0, lsl #16
    4568:	9c010000 	stcls	0, cr0, [r1], {-0}
    456c:	00172611 	andseq	r2, r7, r1, lsl r6
    4570:	cc9e0100 	ldfgts	f0, [lr], {0}
    4574:	10080042 	andne	r0, r8, r2, asr #32
    4578:	01000000 	mrseq	r0, (UNDEF: 0)
    457c:	1857129c 	ldmdane	r7, {r2, r3, r4, r7, r9, ip}^
    4580:	96010000 	strls	r0, [r1], -r0
    4584:	00003a02 	andeq	r3, r0, r2, lsl #20
    4588:	0042dc00 	subeq	sp, r2, r0, lsl #24
    458c:	00000c08 	andeq	r0, r0, r8, lsl #24
    4590:	129c0100 	addsne	r0, ip, #0, 2
    4594:	0000168e 	andeq	r1, r0, lr, lsl #13
    4598:	3a02a301 	bcc	ad1a4 <__Stack_Size+0xacda4>
    459c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    45a0:	0c080042 	stceq	0, cr0, [r8], {66}	; 0x42
    45a4:	01000000 	mrseq	r0, (UNDEF: 0)
    45a8:	17bd139c 			; <UNDEFINED> instruction: 0x17bd139c
    45ac:	b1010000 	mrslt	r0, (UNDEF: 1)
    45b0:	0000a402 	andeq	sl, r0, r2, lsl #8
    45b4:	0042f400 	subeq	pc, r2, r0, lsl #8
    45b8:	00001008 	andeq	r1, r0, r8
    45bc:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    45c0:	14000003 	strne	r0, [r0], #-3
    45c4:	000015de 	ldrdeq	r1, [r0], -lr
    45c8:	a402b301 	strge	fp, [r2], #-769	; 0x301
    45cc:	e5000000 	str	r0, [r0, #-0]
    45d0:	00000015 	andeq	r0, r0, r5, lsl r0
    45d4:	00161a13 	andseq	r1, r6, r3, lsl sl
    45d8:	02c70100 	sbceq	r0, r7, #0, 2
    45dc:	000000a4 	andeq	r0, r0, r4, lsr #1
    45e0:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
    45e4:	00000010 	andeq	r0, r0, r0, lsl r0
    45e8:	033f9c01 	teqeq	pc, #256	; 0x100
    45ec:	00140000 	andseq	r0, r4, r0
    45f0:	01000017 	tsteq	r0, r7, lsl r0
    45f4:	00a402c9 	adceq	r0, r4, r9, asr #5
    45f8:	160a0000 	strne	r0, [sl], -r0
    45fc:	15000000 	strne	r0, [r0, #-0]
    4600:	000015a6 	andeq	r1, r0, r6, lsr #11
    4604:	1402e201 	strne	lr, [r2], #-513	; 0x201
    4608:	18080043 	stmdane	r8, {r0, r1, r6}
    460c:	01000000 	mrseq	r0, (UNDEF: 0)
    4610:	0003749c 	muleq	r3, ip, r4
    4614:	18c91600 	stmiane	r9, {r9, sl, ip}^
    4618:	e2010000 	and	r0, r1, #0
    461c:	00004c02 	andeq	r4, r0, r2, lsl #24
    4620:	00163000 	andseq	r3, r6, r0
    4624:	16711700 	ldrbtne	r1, [r1], -r0, lsl #14
    4628:	e2010000 	and	r0, r1, #0
    462c:	0000c402 	andeq	ip, r0, r2, lsl #8
    4630:	00510100 	subseq	r0, r1, r0, lsl #2
    4634:	00175f13 	andseq	r5, r7, r3, lsl pc
    4638:	03010100 	movweq	r0, #4352	; 0x1100
    463c:	000000a4 	andeq	r0, r0, r4, lsr #1
    4640:	0800432c 	stmdaeq	r0, {r2, r3, r5, r8, r9, lr}
    4644:	00000020 	andeq	r0, r0, r0, lsr #32
    4648:	03af9c01 			; <UNDEFINED> instruction: 0x03af9c01
    464c:	85160000 	ldrhi	r0, [r6, #-0]
    4650:	01000018 	tsteq	r0, r8, lsl r0
    4654:	004c0301 	subeq	r0, ip, r1, lsl #6
    4658:	166a0000 	strbtne	r0, [sl], -r0
    465c:	00140000 	andseq	r0, r4, r0
    4660:	01000017 	tsteq	r0, r7, lsl r0
    4664:	00a40303 	adceq	r0, r4, r3, lsl #6
    4668:	16a40000 	strtne	r0, [r4], r0
    466c:	15000000 	strne	r0, [r0, #-0]
    4670:	00001773 	andeq	r1, r0, r3, ror r7
    4674:	4c032e01 	stcmi	14, cr2, [r3], {1}
    4678:	0c080043 	stceq	0, cr0, [r8], {67}	; 0x43
    467c:	01000000 	mrseq	r0, (UNDEF: 0)
    4680:	0003d49c 	muleq	r3, ip, r4
    4684:	18851700 	stmne	r5, {r8, r9, sl, ip}
    4688:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    468c:	00004c03 	andeq	r4, r0, r3, lsl #24
    4690:	00500100 	subseq	r0, r0, r0, lsl #2
    4694:	00020e18 	andeq	r0, r2, r8, lsl lr
    4698:	00435800 	subeq	r5, r3, r0, lsl #16
    469c:	00002808 	andeq	r2, r0, r8, lsl #16
    46a0:	009c0100 	addseq	r0, ip, r0, lsl #2
    46a4:	19000004 	stmdbne	r0, {r2}
    46a8:	0000021f 	andeq	r0, r0, pc, lsl r2
    46ac:	000016c3 	andeq	r1, r0, r3, asr #13
    46b0:	0043661a 	subeq	r6, r3, sl, lsl r6
    46b4:	00000e08 	andeq	r0, r0, r8, lsl #28
    46b8:	021f1b00 	andseq	r1, pc, #0, 22
    46bc:	00000000 	andeq	r0, r0, r0
    46c0:	0016381c 	andseq	r3, r6, ip, lsl r8
    46c4:	03850100 	orreq	r0, r5, #0, 2
    46c8:	00041801 	andeq	r1, r4, r1, lsl #16
    46cc:	00691d00 	rsbeq	r1, r9, r0, lsl #26
    46d0:	6f038701 	svcvs	0x00038701
    46d4:	00000000 	andeq	r0, r0, r0
    46d8:	0018fb13 	andseq	pc, r8, r3, lsl fp	; <UNPREDICTABLE>
    46dc:	03660100 	cmneq	r6, #0, 2
    46e0:	00000203 	andeq	r0, r0, r3, lsl #4
    46e4:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
    46e8:	00000036 	andeq	r0, r0, r6, lsr r0
    46ec:	048c9c01 	streq	r9, [ip], #3073	; 0xc01
    46f0:	b5160000 	ldrlt	r0, [r6, #-0]
    46f4:	01000017 	tsteq	r0, r7, lsl r0
    46f8:	003a0366 	eorseq	r0, sl, r6, ror #6
    46fc:	16e20000 	strbtne	r0, [r2], r0
    4700:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
    4704:	01000016 	tsteq	r0, r6, lsl r0
    4708:	02030368 	andeq	r0, r3, #104, 6	; 0xa0000001
    470c:	17000000 	strne	r0, [r0, -r0]
    4710:	001e0000 	andseq	r0, lr, r0
    4714:	8e000004 	cdphi	0, 0, cr0, cr0, cr4, {0}
    4718:	12080043 	andne	r0, r8, #67	; 0x43
    471c:	01000000 	mrseq	r0, (UNDEF: 0)
    4720:	04790370 	ldrbteq	r0, [r9], #-880	; 0x370
    4724:	8e1a0000 	cdphi	0, 1, cr0, cr10, cr0, {0}
    4728:	12080043 	andne	r0, r8, #67	; 0x43
    472c:	1f000000 	svcne	0x00000000
    4730:	0000040d 	andeq	r0, r0, sp, lsl #8
    4734:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4738:	43882000 	orrmi	r2, r8, #0
    473c:	020e0800 	andeq	r0, lr, #0, 16
    4740:	a4200000 	strtge	r0, [r0], #-0
    4744:	0e080043 	cdpeq	0, 0, cr0, cr8, cr3, {2}
    4748:	00000002 	andeq	r0, r0, r2
    474c:	0015fc21 	andseq	pc, r5, r1, lsr #24
    4750:	03ad0100 			; <UNDEFINED> instruction: 0x03ad0100
    4754:	b6000002 	strlt	r0, [r0], -r2
    4758:	42080043 	andmi	r0, r8, #67	; 0x43
    475c:	01000000 	mrseq	r0, (UNDEF: 0)
    4760:	0004ea9c 	muleq	r4, ip, sl
    4764:	170a1000 	strne	r1, [sl, -r0]
    4768:	ad010000 	stcge	0, cr0, [r1, #-0]
    476c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4770:	00001735 	andeq	r1, r0, r5, lsr r7
    4774:	0016f922 	andseq	pc, r6, r2, lsr #18
    4778:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    477c:	61000002 	tstvs	r0, r2
    4780:	23000017 	movwcs	r0, #23
    4784:	080043c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, lr}
    4788:	00000418 	andeq	r0, r0, r8, lsl r4
    478c:	000004d8 	ldrdeq	r0, [r0], -r8
    4790:	03500124 	cmpeq	r0, #36, 2
    4794:	000fff0a 	andeq	pc, pc, sl, lsl #30
    4798:	0043e225 	subeq	lr, r3, r5, lsr #4
    479c:	00041808 	andeq	r1, r4, r8, lsl #16
    47a0:	50012400 	andpl	r2, r1, r0, lsl #8
    47a4:	0fff0a03 	svceq	0x00ff0a03
    47a8:	50210000 	eorpl	r0, r1, r0
    47ac:	01000016 	tsteq	r0, r6, lsl r0
    47b0:	000203d4 	ldrdeq	r0, [r2], -r4
    47b4:	0043f800 	subeq	pc, r3, r0, lsl #16
    47b8:	00003c08 	andeq	r3, r0, r8, lsl #24
    47bc:	399c0100 	ldmibcc	ip, {r8}
    47c0:	22000005 	andcs	r0, r0, #5
    47c4:	000016f9 	strdeq	r1, [r0], -r9
    47c8:	0203d601 	andeq	sp, r3, #1048576	; 0x100000
    47cc:	178b0000 	strne	r0, [fp, r0]
    47d0:	02230000 	eoreq	r0, r3, #0
    47d4:	18080044 	stmdane	r8, {r2, r6}
    47d8:	27000004 	strcs	r0, [r0, -r4]
    47dc:	24000005 	strcs	r0, [r0], #-5
    47e0:	0a035001 	beq	d87ec <__Stack_Size+0xd83ec>
    47e4:	25000fff 	strcs	r0, [r0, #-4095]	; 0xfff
    47e8:	08004420 	stmdaeq	r0, {r5, sl, lr}
    47ec:	00000418 	andeq	r0, r0, r8, lsl r4
    47f0:	03500124 	cmpeq	r0, #36, 2
    47f4:	000fff0a 	andeq	pc, pc, sl, lsl #30
    47f8:	15c72100 	strbne	r2, [r7, #256]	; 0x100
    47fc:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    4800:	00000203 	andeq	r0, r0, r3, lsl #4
    4804:	08004434 	stmdaeq	r0, {r2, r4, r5, sl, lr}
    4808:	00000070 	andeq	r0, r0, r0, ror r0
    480c:	059b9c01 	ldreq	r9, [fp, #3073]	; 0xc01
    4810:	f9220000 			; <UNDEFINED> instruction: 0xf9220000
    4814:	01000016 	tsteq	r0, r6, lsl r0
    4818:	000203f9 	strdeq	r0, [r2], -r9
    481c:	0017b500 	andseq	fp, r7, r0, lsl #10
    4820:	443e2300 	ldrtmi	r2, [lr], #-768	; 0x300
    4824:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4828:	05760000 	ldrbeq	r0, [r6, #-0]!
    482c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4830:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    4834:	6623000f 	strtvs	r0, [r3], -pc
    4838:	18080044 	stmdane	r8, {r2, r6}
    483c:	8b000004 	blhi	4854 <__Stack_Size+0x4454>
    4840:	24000005 	strcs	r0, [r0], #-5
    4844:	0a035001 	beq	d8850 <__Stack_Size+0xd8450>
    4848:	25000fff 	strcs	r0, [r0, #-4095]	; 0xfff
    484c:	08004488 	stmdaeq	r0, {r3, r7, sl, lr}
    4850:	00000418 	andeq	r0, r0, r8, lsl r4
    4854:	01500124 	cmpeq	r0, r4, lsr #2
    4858:	1300003f 	movwne	r0, #63	; 0x3f
    485c:	000018d2 	ldrdeq	r1, [r0], -r2
    4860:	03013601 	movweq	r3, #5633	; 0x1601
    4864:	a4000002 	strge	r0, [r0], #-2
    4868:	48080044 	stmdami	r8, {r2, r6}
    486c:	01000000 	mrseq	r0, (UNDEF: 0)
    4870:	00061b9c 	muleq	r6, ip, fp
    4874:	2ef31600 	cdpcs	6, 15, cr1, cr3, cr0, {0}
    4878:	36010000 	strcc	r0, [r1], -r0
    487c:	00003a01 	andeq	r3, r0, r1, lsl #20
    4880:	0017ea00 	andseq	lr, r7, r0, lsl #20
    4884:	17ec1600 	strbne	r1, [ip, r0, lsl #12]!
    4888:	36010000 	strcc	r0, [r1], -r0
    488c:	00003a01 	andeq	r3, r0, r1, lsl #20
    4890:	00181600 	andseq	r1, r8, r0, lsl #12
    4894:	16f91400 	ldrbtne	r1, [r9], r0, lsl #8
    4898:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    489c:	00020301 	andeq	r0, r2, r1, lsl #6
    48a0:	00184200 	andseq	r4, r8, r0, lsl #4
    48a4:	44b02300 	ldrtmi	r2, [r0], #768	; 0x300
    48a8:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    48ac:	05f80000 	ldrbeq	r0, [r8, #0]!
    48b0:	01240000 			; <UNDEFINED> instruction: 0x01240000
    48b4:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    48b8:	0044c823 	subeq	ip, r4, r3, lsr #16
    48bc:	00041808 	andeq	r1, r4, r8, lsl #16
    48c0:	00060b00 	andeq	r0, r6, r0, lsl #22
    48c4:	50012400 	andpl	r2, r1, r0, lsl #8
    48c8:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    48cc:	080044d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, lr}
    48d0:	00000418 	andeq	r0, r0, r8, lsl r4
    48d4:	01500124 	cmpeq	r0, r4, lsr #2
    48d8:	1300003f 	movwne	r0, #63	; 0x3f
    48dc:	0000186f 	andeq	r1, r0, pc, ror #16
    48e0:	03017101 	movweq	r7, #4353	; 0x1101
    48e4:	ec000002 	stc	0, cr0, [r0], {2}
    48e8:	38080044 	stmdacc	r8, {r2, r6}
    48ec:	01000000 	mrseq	r0, (UNDEF: 0)
    48f0:	0006889c 	muleq	r6, ip, r8
    48f4:	2ef31600 	cdpcs	6, 15, cr1, cr3, cr0, {0}
    48f8:	71010000 	mrsvc	r0, (UNDEF: 1)
    48fc:	00003a01 	andeq	r3, r0, r1, lsl #20
    4900:	00187700 	andseq	r7, r8, r0, lsl #14
    4904:	17ec1600 	strbne	r1, [ip, r0, lsl #12]!
    4908:	71010000 	mrsvc	r0, (UNDEF: 1)
    490c:	00004c01 	andeq	r4, r0, r1, lsl #24
    4910:	0018a300 	andseq	sl, r8, r0, lsl #6
    4914:	16f91400 	ldrbtne	r1, [r9], r0, lsl #8
    4918:	73010000 	movwvc	r0, #4096	; 0x1000
    491c:	00020301 	andeq	r0, r2, r1, lsl #6
    4920:	0018c400 	andseq	ip, r8, r0, lsl #8
    4924:	44f82300 	ldrbtmi	r2, [r8], #768	; 0x300
    4928:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    492c:	06780000 	ldrbteq	r0, [r8], -r0
    4930:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4934:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4938:	00450e25 	subeq	r0, r5, r5, lsr #28
    493c:	00041808 	andeq	r1, r4, r8, lsl #16
    4940:	50012400 	andpl	r2, r1, r0, lsl #8
    4944:	00003f01 	andeq	r3, r0, r1, lsl #30
    4948:	00183b13 	andseq	r3, r8, r3, lsl fp
    494c:	01990100 	orrseq	r0, r9, r0, lsl #2
    4950:	00000203 	andeq	r0, r0, r3, lsl #4
    4954:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
    4958:	00000048 	andeq	r0, r0, r8, asr #32
    495c:	06f59c01 	ldrbteq	r9, [r5], r1, lsl #24
    4960:	f3160000 	vhadd.u16	d0, d6, d0
    4964:	0100002e 	tsteq	r0, lr, lsr #32
    4968:	003a0199 	mlaseq	sl, r9, r1, r0
    496c:	18ee0000 	stmiane	lr!, {}^	; <UNPREDICTABLE>
    4970:	ec160000 	ldc	0, cr0, [r6], {-0}
    4974:	01000017 	tsteq	r0, r7, lsl r0
    4978:	005e0199 			; <UNDEFINED> instruction: 0x005e0199
    497c:	191a0000 	ldmdbne	sl, {}	; <UNPREDICTABLE>
    4980:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
    4984:	01000016 	tsteq	r0, r6, lsl r0
    4988:	0203019b 	andeq	r0, r3, #-1073741786	; 0xc0000026
    498c:	193b0000 	ldmdbne	fp!, {}	; <UNPREDICTABLE>
    4990:	30230000 	eorcc	r0, r3, r0
    4994:	18080045 	stmdane	r8, {r0, r2, r6}
    4998:	e5000004 	str	r0, [r0, #-4]
    499c:	24000006 	strcs	r0, [r0], #-6
    49a0:	3f015001 	svccc	0x00015001
    49a4:	45522500 	ldrbmi	r2, [r2, #-1280]	; 0x500
    49a8:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    49ac:	01240000 			; <UNDEFINED> instruction: 0x01240000
    49b0:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    49b4:	18901300 	ldmne	r0, {r8, r9, ip}
    49b8:	ca010000 	bgt	449c0 <__Stack_Size+0x445c0>
    49bc:	00020301 	andeq	r0, r2, r1, lsl #6
    49c0:	00456c00 	subeq	r6, r5, r0, lsl #24
    49c4:	0000a008 	andeq	sl, r0, r8
    49c8:	cb9c0100 	blgt	fe704dd0 <SCS_BASE+0x1e6f6dd0>
    49cc:	16000007 	strne	r0, [r0], -r7
    49d0:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    49d4:	3a01ca01 	bcc	771e0 <__Stack_Size+0x76de0>
    49d8:	65000000 	strvs	r0, [r0, #-0]
    49dc:	14000019 	strne	r0, [r0], #-25
    49e0:	000017e7 	andeq	r1, r0, r7, ror #15
    49e4:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    49e8:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    49ec:	14000019 	strne	r0, [r0], #-25
    49f0:	0000179d 	muleq	r0, sp, r7
    49f4:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    49f8:	fa000000 	blx	4a00 <__Stack_Size+0x4600>
    49fc:	14000019 	strne	r0, [r0], #-25
    4a00:	000015b5 			; <UNDEFINED> instruction: 0x000015b5
    4a04:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    4a08:	52000000 	andpl	r0, r0, #0
    4a0c:	1400001a 	strne	r0, [r0], #-26
    4a10:	00001731 	andeq	r1, r0, r1, lsr r7
    4a14:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    4a18:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4a1c:	1400001a 	strne	r0, [r0], #-26
    4a20:	000016f9 	strdeq	r1, [r0], -r9
    4a24:	0301ce01 	movweq	ip, #7681	; 0x1e01
    4a28:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    4a2c:	2300001a 	movwcs	r0, #26
    4a30:	08004576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, lr}
    4a34:	00000418 	andeq	r0, r0, r8, lsl r4
    4a38:	00000782 	andeq	r0, r0, r2, lsl #15
    4a3c:	01500124 	cmpeq	r0, r4, lsr #2
    4a40:	aa23003f 	bge	8c4b44 <__Stack_Size+0x8c4744>
    4a44:	18080045 	stmdane	r8, {r0, r2, r6}
    4a48:	95000004 	strls	r0, [r0, #-4]
    4a4c:	24000007 	strcs	r0, [r0], #-7
    4a50:	3f015001 	svccc	0x00015001
    4a54:	45bc2300 	ldrmi	r2, [ip, #768]!	; 0x300
    4a58:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4a5c:	07a80000 	streq	r0, [r8, r0]!
    4a60:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4a64:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4a68:	0045d423 	subeq	sp, r5, r3, lsr #8
    4a6c:	00041808 	andeq	r1, r4, r8, lsl #16
    4a70:	0007bb00 	andeq	fp, r7, r0, lsl #22
    4a74:	50012400 	andpl	r2, r1, r0, lsl #8
    4a78:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    4a7c:	080045ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, lr}
    4a80:	00000418 	andeq	r0, r0, r8, lsl r4
    4a84:	01500124 	cmpeq	r0, r4, lsr #2
    4a88:	1300003f 	movwne	r0, #63	; 0x3f
    4a8c:	000016dc 	ldrdeq	r1, [r0], -ip
    4a90:	03021901 	movweq	r1, #10497	; 0x2901
    4a94:	0c000002 	stceq	0, cr0, [r0], {2}
    4a98:	8c080046 	stchi	0, cr0, [r8], {70}	; 0x46
    4a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa0:	0008419c 	muleq	r8, ip, r1
    4aa4:	16711600 	ldrbtne	r1, [r1], -r0, lsl #12
    4aa8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    4aac:	0000c402 	andeq	ip, r0, r2, lsl #8
    4ab0:	001b4c00 	andseq	r4, fp, r0, lsl #24
    4ab4:	16f91400 	ldrbtne	r1, [r9], r0, lsl #8
    4ab8:	1b010000 	blne	44ac0 <__Stack_Size+0x446c0>
    4abc:	00020302 	andeq	r0, r2, r2, lsl #6
    4ac0:	001b6d00 	andseq	r6, fp, r0, lsl #26
    4ac4:	46182300 	ldrmi	r2, [r8], -r0, lsl #6
    4ac8:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4acc:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
    4ad0:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4ad4:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    4ad8:	4023000f 	eormi	r0, r3, pc
    4adc:	18080046 	stmdane	r8, {r1, r2, r6}
    4ae0:	2f000004 	svccs	0x00000004
    4ae4:	24000008 	strcs	r0, [r0], #-8
    4ae8:	0a035001 	beq	d8af4 <__Stack_Size+0xd86f4>
    4aec:	25000fff 	strcs	r0, [r0, #-4095]	; 0xfff
    4af0:	0800466a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, lr}
    4af4:	00000418 	andeq	r0, r0, r8, lsl r4
    4af8:	03500124 	cmpeq	r0, #36, 2
    4afc:	000fff0a 	andeq	pc, pc, sl, lsl #30
    4b00:	16b92600 	ldrtne	r2, [r9], r0, lsl #12
    4b04:	6a010000 	bvs	44b0c <__Stack_Size+0x4470c>
    4b08:	00020302 	andeq	r0, r2, r2, lsl #6
    4b0c:	00469800 	subeq	r9, r6, r0, lsl #16
    4b10:	00005408 	andeq	r5, r0, r8, lsl #8
    4b14:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    4b18:	000016d4 	ldrdeq	r1, [r0], -r4
    4b1c:	4c026a01 	stcmi	10, cr6, [r2], {1}
    4b20:	a2000000 	andge	r0, r0, #0
    4b24:	1600001b 			; <UNDEFINED> instruction: 0x1600001b
    4b28:	000015bf 			; <UNDEFINED> instruction: 0x000015bf
    4b2c:	4c026a01 	stcmi	10, cr6, [r2], {1}
    4b30:	c3000000 	movwgt	r0, #0
    4b34:	1600001b 			; <UNDEFINED> instruction: 0x1600001b
    4b38:	000017de 	ldrdeq	r1, [r0], -lr
    4b3c:	4c026a01 	stcmi	10, cr6, [r2], {1}
    4b40:	e4000000 	str	r0, [r0], #-0
    4b44:	1400001b 	strne	r0, [r0], #-27
    4b48:	000016f9 	strdeq	r1, [r0], -r9
    4b4c:	03026c01 	movweq	r6, #11265	; 0x2c01
    4b50:	05000002 	streq	r0, [r0, #-2]
    4b54:	2300001c 	movwcs	r0, #28
    4b58:	080046b2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, lr}
    4b5c:	00000418 	andeq	r0, r0, r8, lsl r4
    4b60:	000008aa 	andeq	r0, r0, sl, lsr #17
    4b64:	01500124 	cmpeq	r0, r4, lsr #2
    4b68:	d025003f 	eorle	r0, r5, pc, lsr r0
    4b6c:	18080046 	stmdane	r8, {r1, r2, r6}
    4b70:	24000004 	strcs	r0, [r0], #-4
    4b74:	3f015001 	svccc	0x00015001
    4b78:	43000000 	movwmi	r0, #0
    4b7c:	04000007 	streq	r0, [r0], #-7
    4b80:	000a8e00 	andeq	r8, sl, r0, lsl #28
    4b84:	50010400 	andpl	r0, r1, r0, lsl #8
    4b88:	01000008 	tsteq	r0, r8
    4b8c:	00001988 	andeq	r1, r0, r8, lsl #19
    4b90:	000000fa 	strdeq	r0, [r0], -sl
    4b94:	080046ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, lr}
    4b98:	00000256 	andeq	r0, r0, r6, asr r2
    4b9c:	000009ce 	andeq	r0, r0, lr, asr #19
    4ba0:	d0050402 	andle	r0, r5, r2, lsl #8
    4ba4:	02000009 	andeq	r0, r0, #9
    4ba8:	09940502 	ldmibeq	r4, {r1, r8, sl}
    4bac:	01020000 	mrseq	r0, (UNDEF: 2)
    4bb0:	000b6506 	andeq	r6, fp, r6, lsl #10
    4bb4:	33750300 	cmncc	r5, #0, 6
    4bb8:	27020032 	smladxcs	r2, r2, r0, r0
    4bbc:	00000045 	andeq	r0, r0, r5, asr #32
    4bc0:	07070402 	streq	r0, [r7, -r2, lsl #8]
    4bc4:	0300000b 	movweq	r0, #11
    4bc8:	00363175 	eorseq	r3, r6, r5, ror r1
    4bcc:	00572802 	subseq	r2, r7, r2, lsl #16
    4bd0:	02020000 	andeq	r0, r2, #0
    4bd4:	000d2707 	andeq	r2, sp, r7, lsl #14
    4bd8:	38750300 	ldmdacc	r5!, {r8, r9}^
    4bdc:	68290200 	stmdavs	r9!, {r9}
    4be0:	02000000 	andeq	r0, r0, #0
    4be4:	0b630801 	bleq	18c6bf0 <__Stack_Size+0x18c67f0>
    4be8:	ec040000 	stc	0, cr0, [r4], {-0}
    4bec:	02000004 	andeq	r0, r0, #4
    4bf0:	00007a2f 	andeq	r7, r0, pc, lsr #20
    4bf4:	00450500 	subeq	r0, r5, r0, lsl #10
    4bf8:	01060000 	mrseq	r0, (UNDEF: 6)
    4bfc:	00943b02 	addseq	r3, r4, r2, lsl #22
    4c00:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    4c04:	00000005 	andeq	r0, r0, r5
    4c08:	000ae007 	andeq	lr, sl, r7
    4c0c:	04000100 	streq	r0, [r0], #-256	; 0x100
    4c10:	00000114 	andeq	r0, r0, r4, lsl r1
    4c14:	007f3b02 	rsbseq	r3, pc, r2, lsl #22
    4c18:	04020000 	streq	r0, [r2], #-0
    4c1c:	000afe07 	andeq	pc, sl, r7, lsl #28
    4c20:	031c0800 	tsteq	ip, #0, 16
    4c24:	010b014e 	tsteq	fp, lr, asr #2
    4c28:	43090000 	movwmi	r0, #36864	; 0x9000
    4c2c:	03004c52 	movweq	r4, #3154	; 0xc52
    4c30:	006f0150 	rsbeq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4c34:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4c38:	00485243 	subeq	r5, r8, r3, asr #4
    4c3c:	6f015103 	svcvs	0x00015103
    4c40:	04000000 	streq	r0, [r0], #-0
    4c44:	52444909 	subpl	r4, r4, #147456	; 0x24000
    4c48:	01520300 	cmpeq	r2, r0, lsl #6
    4c4c:	0000006f 	andeq	r0, r0, pc, rrx
    4c50:	444f0908 	strbmi	r0, [pc], #-2312	; 4c58 <__Stack_Size+0x4858>
    4c54:	53030052 	movwpl	r0, #12370	; 0x3052
    4c58:	00006f01 	andeq	r6, r0, r1, lsl #30
    4c5c:	760a0c00 	strvc	r0, [sl], -r0, lsl #24
    4c60:	03000000 	movweq	r0, #0
    4c64:	006f0154 	rsbeq	r0, pc, r4, asr r1	; <UNPREDICTABLE>
    4c68:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    4c6c:	00525242 	subseq	r5, r2, r2, asr #4
    4c70:	6f015503 	svcvs	0x00015503
    4c74:	14000000 	strne	r0, [r0], #-0
    4c78:	000e0f0a 	andeq	r0, lr, sl, lsl #30
    4c7c:	01560300 	cmpeq	r6, r0, lsl #6
    4c80:	0000006f 	andeq	r0, r0, pc, rrx
    4c84:	840b0018 	strhi	r0, [fp], #-24
    4c88:	0300000a 	movweq	r0, #10
    4c8c:	00a60157 	adceq	r0, r6, r7, asr r1
    4c90:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    4c94:	48015903 	stmdami	r1, {r0, r1, r8, fp, ip, lr}
    4c98:	0a000001 	beq	4ca4 <__Stack_Size+0x48a4>
    4c9c:	00001ad7 	ldrdeq	r1, [r0], -r7
    4ca0:	6f015b03 	svcvs	0x00015b03
    4ca4:	00000000 	andeq	r0, r0, r0
    4ca8:	001abc0a 	andseq	fp, sl, sl, lsl #24
    4cac:	015c0300 	cmpeq	ip, r0, lsl #6
    4cb0:	0000006f 	andeq	r0, r0, pc, rrx
    4cb4:	19810a04 	stmibne	r1, {r2, r9, fp}
    4cb8:	5d030000 	stcpl	0, cr0, [r3, #-0]
    4cbc:	00015801 	andeq	r5, r1, r1, lsl #16
    4cc0:	0c000800 	stceq	8, cr0, [r0], {-0}
    4cc4:	0000006f 	andeq	r0, r0, pc, rrx
    4cc8:	00000158 	andeq	r0, r0, r8, asr r1
    4ccc:	00009f0d 	andeq	r9, r0, sp, lsl #30
    4cd0:	05000300 	streq	r0, [r0, #-768]	; 0x300
    4cd4:	00000148 	andeq	r0, r0, r8, asr #2
    4cd8:	001aa50b 	andseq	sl, sl, fp, lsl #10
    4cdc:	015e0300 	cmpeq	lr, r0, lsl #6
    4ce0:	00000117 	andeq	r0, r0, r7, lsl r1
    4ce4:	23040106 	movwcs	r0, #16646	; 0x4106
    4ce8:	00000184 	andeq	r0, r0, r4, lsl #3
    4cec:	0003ab07 	andeq	sl, r3, r7, lsl #22
    4cf0:	91070100 	mrsls	r0, (UNDEF: 23)
    4cf4:	02000002 	andeq	r0, r0, #2
    4cf8:	000b8c07 	andeq	r8, fp, r7, lsl #24
    4cfc:	04000300 	streq	r0, [r0], #-768	; 0x300
    4d00:	000008fe 	strdeq	r0, [r0], -lr
    4d04:	01692704 	cmneq	r9, r4, lsl #14
    4d08:	01060000 	mrseq	r0, (UNDEF: 6)
    4d0c:	01c92e04 	biceq	r2, r9, r4, lsl #28
    4d10:	1b070000 	blne	1c4d18 <__Stack_Size+0x1c4918>
    4d14:	00000009 	andeq	r0, r0, r9
    4d18:	000db507 	andeq	fp, sp, r7, lsl #10
    4d1c:	6e070400 	cfcpysvs	mvf0, mvf7
    4d20:	28000004 	stmdacs	r0, {r2}
    4d24:	00049007 	andeq	r9, r4, r7
    4d28:	0700c800 	streq	ip, [r0, -r0, lsl #16]
    4d2c:	000004c4 	andeq	r0, r0, r4, asr #9
    4d30:	00000714 	andeq	r0, r0, r4, lsl r7
    4d34:	07100000 	ldreq	r0, [r0, -r0]
    4d38:	00000802 	andeq	r0, r0, r2, lsl #16
    4d3c:	09c0071c 	stmibeq	r0, {r2, r3, r4, r8, r9, sl}^
    4d40:	00180000 	andseq	r0, r8, r0
    4d44:	000aa004 	andeq	sl, sl, r4
    4d48:	8f360400 	svchi	0x00360400
    4d4c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4d50:	013e0404 	teqeq	lr, r4, lsl #8
    4d54:	0f000002 	svceq	0x00000002
    4d58:	000000d6 	ldrdeq	r0, [r0], -r6
    4d5c:	004c4004 	subeq	r4, ip, r4
    4d60:	0f000000 	svceq	0x00000000
    4d64:	000009de 	ldrdeq	r0, [r0], -lr
    4d68:	01844104 	orreq	r4, r4, r4, lsl #2
    4d6c:	0f020000 	svceq	0x00020000
    4d70:	000000bd 	strheq	r0, [r0], -sp
    4d74:	01c94204 	biceq	r4, r9, r4, lsl #4
    4d78:	00030000 	andeq	r0, r3, r0
    4d7c:	000b5204 	andeq	r5, fp, r4, lsl #4
    4d80:	d4430400 	strble	r0, [r3], #-1024	; 0x400
    4d84:	06000001 	streq	r0, [r0], -r1
    4d88:	21470401 	cmpcs	r7, r1, lsl #8
    4d8c:	07000002 	streq	r0, [r0, -r2]
    4d90:	00001969 	andeq	r1, r0, r9, ror #18
    4d94:	19320700 	ldmdbne	r2!, {r8, r9, sl}
    4d98:	00010000 	andeq	r0, r1, r0
    4d9c:	001ab204 	andseq	fp, sl, r4, lsl #4
    4da0:	0c490400 	cfstrdeq	mvd0, [r9], {-0}
    4da4:	10000002 	andne	r0, r0, r2
    4da8:	000019c3 	andeq	r1, r0, r3, asr #19
    4dac:	46ec3301 	strbtmi	r3, [ip], r1, lsl #6
    4db0:	00a40800 	adceq	r0, r4, r0, lsl #16
    4db4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4db8:	0000030d 	andeq	r0, r0, sp, lsl #6
    4dbc:	001ac111 	andseq	ip, sl, r1, lsl r1
    4dc0:	0d330100 	ldfeqs	f0, [r3, #-0]
    4dc4:	2f000003 	svccs	0x00000003
    4dc8:	1200001c 	andne	r0, r0, #28
    4dcc:	08004716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, lr}
    4dd0:	00000733 	andeq	r0, r0, r3, lsr r7
    4dd4:	00000268 	andeq	r0, r0, r8, ror #4
    4dd8:	01510113 	cmpeq	r1, r3, lsl r1
    4ddc:	50011331 	andpl	r1, r1, r1, lsr r3
    4de0:	12003401 	andne	r3, r0, #16777216	; 0x1000000
    4de4:	08004738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, lr}
    4de8:	00000733 	andeq	r0, r0, r3, lsr r7
    4dec:	00000281 	andeq	r0, r0, r1, lsl #5
    4df0:	01510113 	cmpeq	r1, r3, lsl r1
    4df4:	50011331 	andpl	r1, r1, r1, lsr r3
    4df8:	00400802 	subeq	r0, r0, r2, lsl #16
    4dfc:	00474412 	subeq	r4, r7, r2, lsl r4
    4e00:	00073308 	andeq	r3, r7, r8, lsl #6
    4e04:	00029900 	andeq	r9, r2, r0, lsl #18
    4e08:	51011300 	mrspl	r1, SP_irq
    4e0c:	01133101 	tsteq	r3, r1, lsl #2
    4e10:	00380150 	eorseq	r0, r8, r0, asr r1
    4e14:	00475012 	subeq	r5, r7, r2, lsl r0
    4e18:	00073308 	andeq	r3, r7, r8, lsl #6
    4e1c:	0002b100 	andeq	fp, r2, r0, lsl #2
    4e20:	51011300 	mrspl	r1, SP_irq
    4e24:	01133101 	tsteq	r3, r1, lsl #2
    4e28:	00400150 	subeq	r0, r0, r0, asr r1
    4e2c:	00475c12 	subeq	r5, r7, r2, lsl ip
    4e30:	00073308 	andeq	r3, r7, r8, lsl #6
    4e34:	0002ca00 	andeq	ip, r2, r0, lsl #20
    4e38:	51011300 	mrspl	r1, SP_irq
    4e3c:	01133101 	tsteq	r3, r1, lsl #2
    4e40:	20080250 	andcs	r0, r8, r0, asr r2
    4e44:	47681200 	strbmi	r1, [r8, -r0, lsl #4]!
    4e48:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    4e4c:	02e30000 	rsceq	r0, r3, #0
    4e50:	01130000 	tsteq	r3, r0
    4e54:	13310151 	teqne	r1, #1073741844	; 0x40000014
    4e58:	08025001 	stmdaeq	r2, {r0, ip, lr}
    4e5c:	76120080 	ldrvc	r0, [r2], -r0, lsl #1
    4e60:	33080047 	movwcc	r0, #32839	; 0x8047
    4e64:	fd000007 	stc2	0, cr0, [r0, #-28]	; 0xffffffe4
    4e68:	13000002 	movwne	r0, #2
    4e6c:	31015101 	tstcc	r1, r1, lsl #2
    4e70:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    4e74:	0001000a 	andeq	r0, r1, sl
    4e78:	00478414 	subeq	r8, r7, r4, lsl r4
    4e7c:	00073308 	andeq	r3, r7, r8, lsl #6
    4e80:	51011300 	mrspl	r1, SP_irq
    4e84:	00003001 	andeq	r3, r0, r1
    4e88:	010b0415 	tsteq	fp, r5, lsl r4
    4e8c:	f3100000 	vhadd.u16	d0, d0, d0
    4e90:	0100001a 	tsteq	r0, sl, lsl r0
    4e94:	0047906b 	subeq	r9, r7, fp, rrx
    4e98:	00001608 	andeq	r1, r0, r8, lsl #12
    4e9c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    4ea0:	12000003 	andne	r0, r0, #3
    4ea4:	0800479a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, lr}
    4ea8:	00000733 	andeq	r0, r0, r3, lsr r7
    4eac:	00000340 	andeq	r0, r0, r0, asr #6
    4eb0:	01510113 	cmpeq	r1, r3, lsl r1
    4eb4:	50011331 	andpl	r1, r1, r1, lsr r3
    4eb8:	14003101 	strne	r3, [r0], #-257	; 0x101
    4ebc:	080047a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, lr}
    4ec0:	00000733 	andeq	r0, r0, r3, lsr r7
    4ec4:	01510113 	cmpeq	r1, r3, lsl r1
    4ec8:	50011330 	andpl	r1, r1, r0, lsr r3
    4ecc:	00003101 	andeq	r3, r0, r1, lsl #2
    4ed0:	00024a10 	andeq	r4, r2, r0, lsl sl
    4ed4:	a67c0100 	ldrbtge	r0, [ip], -r0, lsl #2
    4ed8:	9c080047 	stcls	0, cr0, [r8], {71}	; 0x47
    4edc:	01000000 	mrseq	r0, (UNDEF: 0)
    4ee0:	0003e19c 	muleq	r3, ip, r1
    4ee4:	1ac11600 	bne	ff04a6ec <SCS_BASE+0x1f03c6ec>
    4ee8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4eec:	0000030d 	andeq	r0, r0, sp, lsl #6
    4ef0:	c7115001 	ldrgt	r5, [r1, -r1]
    4ef4:	0100001a 	tsteq	r0, sl, lsl r0
    4ef8:	0003e17c 	andeq	lr, r3, ip, ror r1
    4efc:	001cf100 	andseq	pc, ip, r0, lsl #2
    4f00:	1a161700 	bne	58ab08 <__Stack_Size+0x58a708>
    4f04:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    4f08:	0000003a 	andeq	r0, r0, sl, lsr r0
    4f0c:	00001d12 	andeq	r1, r0, r2, lsl sp
    4f10:	001a7617 	andseq	r7, sl, r7, lsl r6
    4f14:	3a7e0100 	bcc	1f8531c <__Stack_Size+0x1f84f1c>
    4f18:	41000000 	mrsmi	r0, (UNDEF: 0)
    4f1c:	1700001d 	smladne	r0, sp, r0, r0
    4f20:	0000192b 	andeq	r1, r0, fp, lsr #18
    4f24:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    4f28:	1d6b0000 	stclne	0, cr0, [fp, #-0]
    4f2c:	70180000 	andsvc	r0, r8, r0
    4f30:	0100736f 	tsteq	r0, pc, ror #6
    4f34:	00003a7e 	andeq	r3, r0, lr, ror sl
    4f38:	001da100 	andseq	sl, sp, r0, lsl #2
    4f3c:	1a071700 	bne	1cab44 <__Stack_Size+0x1ca744>
    4f40:	7f010000 	svcvc	0x00010000
    4f44:	0000003a 	andeq	r0, r0, sl, lsr r0
    4f48:	00001dff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4f4c:	0019ab17 	andseq	sl, r9, r7, lsl fp
    4f50:	3a7f0100 	bcc	1fc5358 <__Stack_Size+0x1fc4f58>
    4f54:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4f58:	0000001e 	andeq	r0, r0, lr, lsl r0
    4f5c:	02010415 	andeq	r0, r1, #352321536	; 0x15000000
    4f60:	47100000 	ldrmi	r0, [r0, -r0]
    4f64:	01000000 	mrseq	r0, (UNDEF: 0)
    4f68:	004842e5 	subeq	r4, r8, r5, ror #5
    4f6c:	00001008 	andeq	r1, r0, r8
    4f70:	0a9c0100 	beq	fe705378 <SCS_BASE+0x1e6f7378>
    4f74:	16000004 	strne	r0, [r0], -r4
    4f78:	00001ac7 	andeq	r1, r0, r7, asr #21
    4f7c:	03e1e501 	mvneq	lr, #4194304	; 0x400000
    4f80:	50010000 	andpl	r0, r1, r0
    4f84:	19f11900 	ldmibne	r1!, {r8, fp, ip}^
    4f88:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    4f8c:	0000005e 	andeq	r0, r0, lr, asr r0
    4f90:	08004852 	stmdaeq	r0, {r1, r4, r6, fp, lr}
    4f94:	0000000c 	andeq	r0, r0, ip
    4f98:	044f9c01 	strbeq	r9, [pc], #-3073	; 4fa0 <__Stack_Size+0x4ba0>
    4f9c:	c1110000 	tstgt	r1, r0
    4fa0:	0100001a 	tsteq	r0, sl, lsl r0
    4fa4:	00030df6 	strdeq	r0, [r3], -r6
    4fa8:	001e8f00 	andseq	r8, lr, r0, lsl #30
    4fac:	00d61600 	sbcseq	r1, r6, r0, lsl #12
    4fb0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    4fb4:	0000004c 	andeq	r0, r0, ip, asr #32
    4fb8:	00175101 	andseq	r5, r7, r1, lsl #2
    4fbc:	01000017 	tsteq	r0, r7, lsl r0
    4fc0:	00005ef8 	strdeq	r5, [r0], -r8
    4fc4:	001eb000 	andseq	fp, lr, r0
    4fc8:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    4fcc:	0100001a 	tsteq	r0, sl, lsl r0
    4fd0:	004c0110 	subeq	r0, ip, r0, lsl r1
    4fd4:	485e0000 	ldmdami	lr, {}^	; <UNPREDICTABLE>
    4fd8:	00060800 	andeq	r0, r6, r0, lsl #16
    4fdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fe0:	0000047a 	andeq	r0, r0, sl, ror r4
    4fe4:	001ac11b 	andseq	ip, sl, fp, lsl r1
    4fe8:	01100100 	tsteq	r0, r0, lsl #2
    4fec:	0000030d 	andeq	r0, r0, sp, lsl #6
    4ff0:	00001eda 	ldrdeq	r1, [r0], -sl
    4ff4:	1adc1a00 	bne	ff70b7fc <SCS_BASE+0x1f6fd7fc>
    4ff8:	21010000 	mrscs	r0, (UNDEF: 1)
    4ffc:	00005e01 	andeq	r5, r0, r1, lsl #28
    5000:	00486400 	subeq	r6, r8, r0, lsl #8
    5004:	00000c08 	andeq	r0, r0, r8, lsl #24
    5008:	c39c0100 	orrsgt	r0, ip, #0, 2
    500c:	1b000004 	blne	5024 <__Stack_Size+0x4c24>
    5010:	00001ac1 	andeq	r1, r0, r1, asr #21
    5014:	0d012101 	stfeqs	f2, [r1, #-4]
    5018:	fb000003 	blx	502e <__Stack_Size+0x4c2e>
    501c:	1c00001e 	stcne	0, cr0, [r0], {30}
    5020:	000000d6 	ldrdeq	r0, [r0], -r6
    5024:	4c012101 	stfmis	f2, [r1], {1}
    5028:	01000000 	mrseq	r0, (UNDEF: 0)
    502c:	17001d51 	smlsdne	r0, r1, sp, r1
    5030:	23010000 	movwcs	r0, #4096	; 0x1000
    5034:	00005e01 	andeq	r5, r0, r1, lsl #28
    5038:	001f1c00 	andseq	r1, pc, r0, lsl #24
    503c:	3a1a0000 	bcc	685044 <__Stack_Size+0x684c44>
    5040:	01000019 	tsteq	r0, r9, lsl r0
    5044:	004c013b 	subeq	r0, ip, fp, lsr r1
    5048:	48700000 	ldmdami	r0!, {}^	; <UNPREDICTABLE>
    504c:	00060800 	andeq	r0, r6, r0, lsl #16
    5050:	9c010000 	stcls	0, cr0, [r1], {-0}
    5054:	000004ee 	andeq	r0, r0, lr, ror #9
    5058:	001ac11b 	andseq	ip, sl, fp, lsl r1
    505c:	013b0100 	teqeq	fp, r0, lsl #2
    5060:	0000030d 	andeq	r0, r0, sp, lsl #6
    5064:	00001f46 	andeq	r1, r0, r6, asr #30
    5068:	03f71e00 	mvnseq	r1, #0, 28
    506c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    5070:	00487601 	subeq	r7, r8, r1, lsl #12
    5074:	00000408 	andeq	r0, r0, r8, lsl #8
    5078:	219c0100 	orrscs	r0, ip, r0, lsl #2
    507c:	1c000005 	stcne	0, cr0, [r0], {5}
    5080:	00001ac1 	andeq	r1, r0, r1, asr #21
    5084:	0d014d01 	stceq	13, cr4, [r1, #-4]
    5088:	01000003 	tsteq	r0, r3
    508c:	00d61c50 	sbcseq	r1, r6, r0, asr ip
    5090:	4d010000 	stcmi	0, cr0, [r1, #-0]
    5094:	00004c01 	andeq	r4, r0, r1, lsl #24
    5098:	00510100 	subseq	r0, r1, r0, lsl #2
    509c:	0008261e 	andeq	r2, r8, lr, lsl r6
    50a0:	01600100 	cmneq	r0, r0, lsl #2
    50a4:	0800487a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, lr}
    50a8:	00000004 	andeq	r0, r0, r4
    50ac:	05549c01 	ldrbeq	r9, [r4, #-3073]	; 0xc01
    50b0:	c11c0000 	tstgt	ip, r0
    50b4:	0100001a 	tsteq	r0, sl, lsl r0
    50b8:	030d0160 	movweq	r0, #53600	; 0xd160
    50bc:	50010000 	andpl	r0, r1, r0
    50c0:	0000d61c 	andeq	sp, r0, ip, lsl r6
    50c4:	01600100 	cmneq	r0, r0, lsl #2
    50c8:	0000004c 	andeq	r0, r0, ip, asr #32
    50cc:	1e005101 	adfnes	f5, f0, f1
    50d0:	00001973 	andeq	r1, r0, r3, ror r9
    50d4:	7e017601 	cfmadd32vc	mvax0, mvfx7, mvfx1, mvfx1
    50d8:	0a080048 	beq	205200 <__Stack_Size+0x204e00>
    50dc:	01000000 	mrseq	r0, (UNDEF: 0)
    50e0:	0005959c 	muleq	r5, ip, r5
    50e4:	1ac11c00 	bne	ff04c0ec <SCS_BASE+0x1f03e0ec>
    50e8:	76010000 	strvc	r0, [r1], -r0
    50ec:	00030d01 	andeq	r0, r3, r1, lsl #26
    50f0:	1c500100 	ldfnee	f0, [r0], {-0}
    50f4:	000000d6 	ldrdeq	r0, [r0], -r6
    50f8:	4c017601 	stcmi	6, cr7, [r1], {1}
    50fc:	01000000 	mrseq	r0, (UNDEF: 0)
    5100:	19621c51 	stmdbne	r2!, {r0, r4, r6, sl, fp, ip}^
    5104:	76010000 	strvc	r0, [r1], -r0
    5108:	00022101 	andeq	r2, r2, r1, lsl #2
    510c:	00520100 	subseq	r0, r2, r0, lsl #2
    5110:	001a811e 	andseq	r8, sl, lr, lsl r1
    5114:	01900100 	orrseq	r0, r0, r0, lsl #2
    5118:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    511c:	00000004 	andeq	r0, r0, r4
    5120:	05c89c01 	strbeq	r9, [r8, #3073]	; 0xc01
    5124:	c11c0000 	tstgt	ip, r0
    5128:	0100001a 	tsteq	r0, sl, lsl r0
    512c:	030d0190 	movweq	r0, #53648	; 0xd190
    5130:	50010000 	andpl	r0, r1, r0
    5134:	001a0e1c 	andseq	r0, sl, ip, lsl lr
    5138:	01900100 	orrseq	r0, r0, r0, lsl #2
    513c:	0000004c 	andeq	r0, r0, ip, asr #32
    5140:	1e005101 	adfnes	f5, f0, f1
    5144:	00001a63 	andeq	r1, r0, r3, ror #20
    5148:	8c01a201 	sfmhi	f2, 1, [r1], {1}
    514c:	10080048 	andne	r0, r8, r8, asr #32
    5150:	01000000 	mrseq	r0, (UNDEF: 0)
    5154:	00060b9c 	muleq	r6, ip, fp
    5158:	1ac11c00 	bne	ff04c160 <SCS_BASE+0x1f03e160>
    515c:	a2010000 	andge	r0, r1, #0
    5160:	00030d01 	andeq	r0, r3, r1, lsl #26
    5164:	1c500100 	ldfnee	f0, [r0], {-0}
    5168:	000000d6 	ldrdeq	r0, [r0], -r6
    516c:	4c01a201 	sfmmi	f2, 1, [r1], {1}
    5170:	01000000 	mrseq	r0, (UNDEF: 0)
    5174:	6d741f51 	ldclvs	15, cr1, [r4, #-324]!	; 0xfffffebc
    5178:	a4010070 	strge	r0, [r1], #-112	; 0x70
    517c:	00003a01 	andeq	r3, r0, r1, lsl #20
    5180:	001f6700 	andseq	r6, pc, r0, lsl #14
    5184:	cf1e0000 	svcgt	0x001e0000
    5188:	01000019 	tsteq	r0, r9, lsl r0
    518c:	489c01c3 	ldmmi	ip, {r0, r1, r6, r7, r8}
    5190:	001c0800 	andseq	r0, ip, r0, lsl #16
    5194:	9c010000 	stcls	0, cr0, [r1], {-0}
    5198:	00000652 	andeq	r0, r0, r2, asr r6
    519c:	0019b31b 	andseq	fp, r9, fp, lsl r3
    51a0:	01c30100 	biceq	r0, r3, r0, lsl #2
    51a4:	0000005e 	andeq	r0, r0, lr, asr r0
    51a8:	00001f88 	andeq	r1, r0, r8, lsl #31
    51ac:	001a221b 	andseq	r2, sl, fp, lsl r2
    51b0:	01c30100 	biceq	r0, r3, r0, lsl #2
    51b4:	0000005e 	andeq	r0, r0, lr, asr r0
    51b8:	00001fa9 	andeq	r1, r0, r9, lsr #31
    51bc:	001a071d 	andseq	r0, sl, sp, lsl r7
    51c0:	01c50100 	biceq	r0, r5, r0, lsl #2
    51c4:	0000003a 	andeq	r0, r0, sl, lsr r0
    51c8:	00001fca 	andeq	r1, r0, sl, asr #31
    51cc:	194e1e00 	stmdbne	lr, {r9, sl, fp, ip}^
    51d0:	dc010000 	stcle	0, cr0, [r1], {-0}
    51d4:	0048b801 	subeq	fp, r8, r1, lsl #16
    51d8:	00000c08 	andeq	r0, r0, r8, lsl #24
    51dc:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    51e0:	1c000006 	stcne	0, cr0, [r0], {6}
    51e4:	00001671 	andeq	r1, r0, r1, ror r6
    51e8:	9401dc01 	strls	sp, [r1], #-3073	; 0xc01
    51ec:	01000000 	mrseq	r0, (UNDEF: 0)
    51f0:	191e0050 	ldmdbne	lr, {r4, r6}
    51f4:	01000004 	tsteq	r0, r4
    51f8:	48c40207 	stmiami	r4, {r0, r1, r2, r9}^
    51fc:	00540800 	subseq	r0, r4, r0, lsl #16
    5200:	9c010000 	stcls	0, cr0, [r1], {-0}
    5204:	000006ec 	andeq	r0, r0, ip, ror #13
    5208:	0019e61b 	andseq	lr, r9, fp, lsl r6
    520c:	02070100 	andeq	r0, r7, #0, 2
    5210:	0000003a 	andeq	r0, r0, sl, lsr r0
    5214:	00002002 	andeq	r2, r0, r2
    5218:	0016711c 	andseq	r7, r6, ip, lsl r1
    521c:	02070100 	andeq	r0, r7, #0, 2
    5220:	00000094 	muleq	r0, r4, r0
    5224:	741f5101 	ldrvc	r5, [pc], #-257	; 522c <__Stack_Size+0x4e2c>
    5228:	0100706d 	tsteq	r0, sp, rrx
    522c:	003a0209 	eorseq	r0, sl, r9, lsl #4
    5230:	20230000 	eorcs	r0, r3, r0
    5234:	8c1d0000 	ldchi	0, cr0, [sp], {-0}
    5238:	0100001a 	tsteq	r0, sl, lsl r0
    523c:	003a0209 	eorseq	r0, sl, r9, lsl #4
    5240:	20540000 	subscs	r0, r4, r0
    5244:	071d0000 	ldreq	r0, [sp, -r0]
    5248:	0100001a 	tsteq	r0, sl, lsl r0
    524c:	003a0209 	eorseq	r0, sl, r9, lsl #4
    5250:	207d0000 	rsbscs	r0, sp, r0
    5254:	5b1d0000 	blpl	74525c <__Stack_Size+0x744e5c>
    5258:	0100001a 	tsteq	r0, sl, lsl r0
    525c:	003a0209 	eorseq	r0, sl, r9, lsl #4
    5260:	209c0000 	addscs	r0, ip, r0
    5264:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5268:	00001a91 	muleq	r0, r1, sl
    526c:	18023901 	stmdane	r2, {r0, r8, fp, ip, sp}
    5270:	2a080049 	bcs	20539c <__Stack_Size+0x204f9c>
    5274:	01000000 	mrseq	r0, (UNDEF: 0)
    5278:	0007339c 	muleq	r7, ip, r3
    527c:	19b31b00 	ldmibne	r3!, {r8, r9, fp, ip}
    5280:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    5284:	00005e02 	andeq	r5, r0, r2, lsl #28
    5288:	0020d700 	eoreq	sp, r0, r0, lsl #14
    528c:	1a221b00 	bne	88be94 <__Stack_Size+0x88ba94>
    5290:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    5294:	00005e02 	andeq	r5, r0, r2, lsl #28
    5298:	0020f800 	eoreq	pc, r0, r0, lsl #16
    529c:	6d741f00 	ldclvs	15, cr1, [r4, #-0]
    52a0:	3b010070 	blcc	45468 <__Stack_Size+0x45068>
    52a4:	00003a02 	andeq	r3, r0, r2, lsl #20
    52a8:	00211900 	eoreq	r1, r1, r0, lsl #18
    52ac:	31200000 			; <UNDEFINED> instruction: 0x31200000
    52b0:	0500001a 	streq	r0, [r0, #-26]
    52b4:	3a210114 	bcc	84570c <__Stack_Size+0x84530c>
    52b8:	21000000 	mrscs	r0, (UNDEF: 0)
    52bc:	00000094 	muleq	r0, r4, r0
    52c0:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    52c4:	00040000 	andeq	r0, r4, r0
    52c8:	00000c76 	andeq	r0, r0, r6, ror ip
    52cc:	08500104 	ldmdaeq	r0, {r2, r8}^
    52d0:	03010000 	movweq	r0, #4096	; 0x1000
    52d4:	fa00001c 	blx	534c <__Stack_Size+0x4f4c>
    52d8:	44000000 	strmi	r0, [r0], #-0
    52dc:	14080049 	strne	r0, [r8], #-73	; 0x49
    52e0:	50000003 	andpl	r0, r0, r3
    52e4:	0200000b 	andeq	r0, r0, #11
    52e8:	09d00504 	ldmibeq	r0, {r2, r8, sl}^
    52ec:	02020000 	andeq	r0, r2, #0
    52f0:	00099405 	andeq	r9, r9, r5, lsl #8
    52f4:	06010200 	streq	r0, [r1], -r0, lsl #4
    52f8:	00000b65 	andeq	r0, r0, r5, ror #22
    52fc:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    5300:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    5304:	02000000 	andeq	r0, r0, #0
    5308:	0b070704 	bleq	1c6f20 <__Stack_Size+0x1c6b20>
    530c:	75030000 	strvc	r0, [r3, #-0]
    5310:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    5314:	00005728 	andeq	r5, r0, r8, lsr #14
    5318:	07020200 	streq	r0, [r2, -r0, lsl #4]
    531c:	00000d27 	andeq	r0, r0, r7, lsr #26
    5320:	00387503 	eorseq	r7, r8, r3, lsl #10
    5324:	00682902 	rsbeq	r2, r8, r2, lsl #18
    5328:	01020000 	mrseq	r0, (UNDEF: 2)
    532c:	000b6308 	andeq	r6, fp, r8, lsl #6
    5330:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    5334:	2f020000 	svccs	0x00020000
    5338:	0000007a 	andeq	r0, r0, sl, ror r0
    533c:	00004505 	andeq	r4, r0, r5, lsl #10
    5340:	1e9b0400 	cdpne	4, 9, cr0, cr11, cr0, {0}
    5344:	33020000 	movwcc	r0, #8192	; 0x2000
    5348:	0000008a 	andeq	r0, r0, sl, lsl #1
    534c:	00007a06 	andeq	r7, r0, r6, lsl #20
    5350:	02010700 	andeq	r0, r1, #0, 14
    5354:	0000a439 	andeq	sl, r0, r9, lsr r4
    5358:	196d0800 	stmdbne	sp!, {fp}^
    535c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5360:	00544553 	subseq	r4, r4, r3, asr r5
    5364:	f5040001 			; <UNDEFINED> instruction: 0xf5040001
    5368:	02000020 	andeq	r0, r0, #32
    536c:	00008f39 	andeq	r8, r0, r9, lsr pc
    5370:	02010700 	andeq	r0, r1, #0, 14
    5374:	0000c43b 	andeq	ip, r0, fp, lsr r4
    5378:	05f10800 	ldrbeq	r0, [r1, #2048]!	; 0x800
    537c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5380:	00000ae0 	andeq	r0, r0, r0, ror #21
    5384:	14040001 	strne	r0, [r4], #-1
    5388:	02000001 	andeq	r0, r0, #1
    538c:	0000af3b 	andeq	sl, r0, fp, lsr pc
    5390:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5394:	00000afe 	strdeq	r0, [r0], -lr
    5398:	03033c0a 	movweq	r3, #15370	; 0x3c0a
    539c:	01770181 	cmneq	r7, r1, lsl #3
    53a0:	210b0000 	mrscs	r0, (UNDEF: 11)
    53a4:	0300001e 	movweq	r0, #30
    53a8:	01870183 	orreq	r0, r7, r3, lsl #3
    53ac:	0b000000 	bleq	53b4 <__Stack_Size+0x4fb4>
    53b0:	0000094e 	andeq	r0, r0, lr, asr #18
    53b4:	8c018403 	cfstrshi	mvf8, [r1], {3}
    53b8:	08000001 	stmdaeq	r0, {r0}
    53bc:	001de50b 	andseq	lr, sp, fp, lsl #10
    53c0:	01850300 	orreq	r0, r5, r0, lsl #6
    53c4:	0000019c 	muleq	r0, ip, r1
    53c8:	1d7a0b80 	vldmdbne	sl!, {d16-d15}
    53cc:	86030000 	strhi	r0, [r3], -r0
    53d0:	00018c01 	andeq	r8, r1, r1, lsl #24
    53d4:	fb0c8800 	blx	3273de <__Stack_Size+0x326fde>
    53d8:	0300001d 	movweq	r0, #29
    53dc:	01a10187 			; <UNDEFINED> instruction: 0x01a10187
    53e0:	01000000 	mrseq	r0, (UNDEF: 0)
    53e4:	0009620c 	andeq	r6, r9, ip, lsl #4
    53e8:	01880300 	orreq	r0, r8, r0, lsl #6
    53ec:	0000018c 	andeq	r0, r0, ip, lsl #3
    53f0:	3d0c0108 	stfccs	f0, [ip, #-32]	; 0xffffffe0
    53f4:	0300001d 	movweq	r0, #29
    53f8:	01a60189 			; <UNDEFINED> instruction: 0x01a60189
    53fc:	01800000 	orreq	r0, r0, r0
    5400:	00096c0c 	andeq	r6, r9, ip, lsl #24
    5404:	018a0300 	orreq	r0, sl, r0, lsl #6
    5408:	0000018c 	andeq	r0, r0, ip, lsl #3
    540c:	030c0188 	movweq	r0, #49544	; 0xc188
    5410:	0300001b 	movweq	r0, #27
    5414:	01ab018b 			; <UNDEFINED> instruction: 0x01ab018b
    5418:	02000000 	andeq	r0, r0, #0
    541c:	0009760c 	andeq	r7, r9, ip, lsl #12
    5420:	018c0300 	orreq	r0, ip, r0, lsl #6
    5424:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    5428:	490d0208 	stmdbmi	sp, {r3, r9}
    542c:	03005250 	movweq	r5, #592	; 0x250
    5430:	01d0018d 	bicseq	r0, r0, sp, lsl #3
    5434:	03000000 	movweq	r0, #0
    5438:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
    543c:	01870000 	orreq	r0, r7, r0
    5440:	cf0f0000 	svcgt	0x000f0000
    5444:	01000000 	mrseq	r0, (UNDEF: 0)
    5448:	01770500 	cmneq	r7, r0, lsl #10
    544c:	3a0e0000 	bcc	385454 <__Stack_Size+0x385054>
    5450:	9c000000 	stcls	0, cr0, [r0], {-0}
    5454:	0f000001 	svceq	0x00000001
    5458:	000000cf 	andeq	r0, r0, pc, asr #1
    545c:	7705001d 	smladvc	r5, sp, r0, r0
    5460:	05000001 	streq	r0, [r0, #-1]
    5464:	00000177 	andeq	r0, r0, r7, ror r1
    5468:	00017705 	andeq	r7, r1, r5, lsl #14
    546c:	01770500 	cmneq	r7, r0, lsl #10
    5470:	3a0e0000 	bcc	385478 <__Stack_Size+0x385078>
    5474:	c0000000 	andgt	r0, r0, r0
    5478:	0f000001 	svceq	0x00000001
    547c:	000000cf 	andeq	r0, r0, pc, asr #1
    5480:	6f0e003d 	svcvs	0x000e003d
    5484:	d0000000 	andle	r0, r0, r0
    5488:	0f000001 	svceq	0x00000001
    548c:	000000cf 	andeq	r0, r0, pc, asr #1
    5490:	c005000e 	andgt	r0, r5, lr
    5494:	10000001 	andne	r0, r0, r1
    5498:	00001d5d 	andeq	r1, r0, sp, asr sp
    549c:	d6018e03 	strle	r8, [r1], -r3, lsl #28
    54a0:	11000000 	mrsne	r0, (UNDEF: 0)
    54a4:	01900340 	orrseq	r0, r0, r0, asr #6
    54a8:	000002a1 	andeq	r0, r0, r1, lsr #5
    54ac:	001c2e0b 	andseq	r2, ip, fp, lsl #28
    54b0:	01920300 	orrseq	r0, r2, r0, lsl #6
    54b4:	0000007f 	andeq	r0, r0, pc, ror r0
    54b8:	1c860b00 	vstmiane	r6, {d0-d-1}
    54bc:	93030000 	movwls	r0, #12288	; 0x3000
    54c0:	00006f01 	andeq	r6, r0, r1, lsl #30
    54c4:	f60b0400 			; <UNDEFINED> instruction: 0xf60b0400
    54c8:	0300001d 	movweq	r0, #29
    54cc:	006f0194 	mlseq	pc, r4, r1, r0	; <UNPREDICTABLE>
    54d0:	0b080000 	bleq	2054d8 <__Stack_Size+0x2050d8>
    54d4:	00001d37 	andeq	r1, r0, r7, lsr sp
    54d8:	6f019503 	svcvs	0x00019503
    54dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    54e0:	52435312 	subpl	r5, r3, #1207959552	; 0x48000000
    54e4:	01960300 	orrseq	r0, r6, r0, lsl #6
    54e8:	0000006f 	andeq	r0, r0, pc, rrx
    54ec:	43431210 	movtmi	r1, #12816	; 0x3210
    54f0:	97030052 	smlsdls	r3, r2, r0, r0
    54f4:	00006f01 	andeq	r6, r0, r1, lsl #30
    54f8:	520b1400 	andpl	r1, fp, #0, 8
    54fc:	0300001d 	movweq	r0, #29
    5500:	02b10198 	adcseq	r0, r1, #152, 2	; 0x26
    5504:	0b180000 	bleq	60550c <__Stack_Size+0x60510c>
    5508:	00001d57 	andeq	r1, r0, r7, asr sp
    550c:	6f019903 	svcvs	0x00019903
    5510:	24000000 	strcs	r0, [r0], #-0
    5514:	001d120b 	andseq	r1, sp, fp, lsl #4
    5518:	019a0300 	orrseq	r0, sl, r0, lsl #6
    551c:	0000006f 	andeq	r0, r0, pc, rrx
    5520:	1e050b28 	vmlane.f64	d0, d5, d24
    5524:	9b030000 	blls	c552c <__Stack_Size+0xc512c>
    5528:	00006f01 	andeq	r6, r0, r1, lsl #30
    552c:	000b2c00 	andeq	r2, fp, r0, lsl #24
    5530:	0300001e 	movweq	r0, #30
    5534:	006f019c 	mlseq	pc, ip, r1, r0	; <UNPREDICTABLE>
    5538:	0b300000 	bleq	c05540 <__Stack_Size+0xc05140>
    553c:	00001d94 	muleq	r0, r4, sp
    5540:	6f019d03 	svcvs	0x00019d03
    5544:	34000000 	strcc	r0, [r0], #-0
    5548:	001ce90b 	andseq	lr, ip, fp, lsl #18
    554c:	019e0300 	orrseq	r0, lr, r0, lsl #6
    5550:	0000006f 	andeq	r0, r0, pc, rrx
    5554:	1e1c0b38 	vmovne.s16	r0, d12[0]
    5558:	9f030000 	svcls	0x00030000
    555c:	00006f01 	andeq	r6, r0, r1, lsl #30
    5560:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
    5564:	0000006f 	andeq	r0, r0, pc, rrx
    5568:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    556c:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    5570:	05000200 	streq	r0, [r0, #-512]	; 0x200
    5574:	000002a1 	andeq	r0, r0, r1, lsr #5
    5578:	001e4210 	andseq	r4, lr, r0, lsl r2
    557c:	01a00300 	lsleq	r0, r0, #6
    5580:	000001e1 	andeq	r0, r0, r1, ror #3
    5584:	1a040413 	bne	1065d8 <__Stack_Size+0x1061d8>
    5588:	000002fb 	strdeq	r0, [r0], -fp
    558c:	0007b014 	andeq	fp, r7, r4, lsl r0
    5590:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    5594:	00000000 	andeq	r0, r0, r0
    5598:	000d8414 	andeq	r8, sp, r4, lsl r4
    559c:	5e1d0400 	cfmulspl	mvf0, mvf13, mvf0
    55a0:	01000000 	mrseq	r0, (UNDEF: 0)
    55a4:	000c8014 	andeq	r8, ip, r4, lsl r0
    55a8:	5e1e0400 	cfmulspl	mvf0, mvf14, mvf0
    55ac:	02000000 	andeq	r0, r0, #0
    55b0:	00050814 	andeq	r0, r5, r4, lsl r8
    55b4:	c41f0400 	ldrgt	r0, [pc], #-1024	; 55bc <__Stack_Size+0x51bc>
    55b8:	03000000 	movweq	r0, #0
    55bc:	035a0400 	cmpeq	sl, #0, 8
    55c0:	20040000 	andcs	r0, r4, r0
    55c4:	000002c2 	andeq	r0, r0, r2, asr #5
    55c8:	001f8015 	andseq	r8, pc, r5, lsl r0	; <UNPREDICTABLE>
    55cc:	44240100 	strtmi	r0, [r4], #-256	; 0x100
    55d0:	34080049 	strcc	r0, [r8], #-73	; 0x49
    55d4:	01000000 	mrseq	r0, (UNDEF: 0)
    55d8:	00032b9c 	muleq	r3, ip, fp
    55dc:	15761600 	ldrbne	r1, [r6, #-1536]!	; 0x600
    55e0:	26010000 	strcs	r0, [r1], -r0
    55e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    55e8:	00002156 	andeq	r2, r0, r6, asr r1
    55ec:	1ef11500 	cdpne	5, 15, cr1, cr1, cr0, {0}
    55f0:	3b010000 	blcc	455f8 <__Stack_Size+0x451f8>
    55f4:	08004978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, lr}
    55f8:	00000030 	andeq	r0, r0, r0, lsr r0
    55fc:	03509c01 	cmpeq	r0, #256	; 0x100
    5600:	76160000 	ldrvc	r0, [r6], -r0
    5604:	01000015 	tsteq	r0, r5, lsl r0
    5608:	00003a3d 	andeq	r3, r0, sp, lsr sl
    560c:	00217500 	eoreq	r7, r1, r0, lsl #10
    5610:	e8150000 	ldmda	r5, {}	; <UNPREDICTABLE>
    5614:	0100000c 	tsteq	r0, ip
    5618:	0049a861 	subeq	sl, r9, r1, ror #16
    561c:	00001408 	andeq	r1, r0, r8, lsl #8
    5620:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    5624:	17000003 	strne	r0, [r0, -r3]
    5628:	00001c34 	andeq	r1, r0, r4, lsr ip
    562c:	003a6101 	eorseq	r6, sl, r1, lsl #2
    5630:	21ad0000 			; <UNDEFINED> instruction: 0x21ad0000
    5634:	15000000 	strne	r0, [r0, #-0]
    5638:	000007f8 	strdeq	r0, [r0], -r8
    563c:	49bc7401 	ldmibmi	ip!, {r0, sl, ip, sp, lr}
    5640:	00840800 	addeq	r0, r4, r0, lsl #16
    5644:	9c010000 	stcls	0, cr0, [r1], {-0}
    5648:	000003e3 	andeq	r0, r0, r3, ror #7
    564c:	001b2718 	andseq	r2, fp, r8, lsl r7
    5650:	e3740100 	cmn	r4, #0, 2
    5654:	01000003 	tsteq	r0, r3
    5658:	1dea1650 	stclne	6, cr1, [sl, #320]!	; 0x140
    565c:	76010000 	strvc	r0, [r1], -r0
    5660:	0000003a 	andeq	r0, r0, sl, lsr r0
    5664:	000021ce 	andeq	r2, r0, lr, asr #3
    5668:	001a0716 	andseq	r0, sl, r6, lsl r7
    566c:	3a760100 	bcc	1d85a74 <__Stack_Size+0x1d85674>
    5670:	2a000000 	bcs	5678 <__Stack_Size+0x5278>
    5674:	16000022 	strne	r0, [r0], -r2, lsr #32
    5678:	00001a5b 	andeq	r1, r0, fp, asr sl
    567c:	003a7601 	eorseq	r7, sl, r1, lsl #12
    5680:	22600000 	rsbcs	r0, r0, #0
    5684:	af160000 	svcge	0x00160000
    5688:	0100001b 	tsteq	r0, fp, lsl r0
    568c:	00003a77 	andeq	r3, r0, r7, ror sl
    5690:	00229b00 	eoreq	r9, r2, r0, lsl #22
    5694:	1d9a1600 	ldcne	6, cr1, [sl]
    5698:	77010000 	strvc	r0, [r1, -r0]
    569c:	0000003a 	andeq	r0, r0, sl, lsr r0
    56a0:	000022e4 	andeq	r2, r0, r4, ror #5
    56a4:	fb041900 	blx	10baae <__Stack_Size+0x10b6ae>
    56a8:	15000002 	strne	r0, [r0, #-2]
    56ac:	00001dd5 	ldrdeq	r1, [r0], -r5
    56b0:	4a40a801 	bmi	102f6bc <__Stack_Size+0x102f2bc>
    56b4:	000c0800 	andeq	r0, ip, r0, lsl #16
    56b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    56bc:	0000040c 	andeq	r0, r0, ip, lsl #8
    56c0:	001b2718 	andseq	r2, fp, r8, lsl r7
    56c4:	e3a80100 			; <UNDEFINED> instruction: 0xe3a80100
    56c8:	01000003 	tsteq	r0, r3
    56cc:	86150050 			; <UNDEFINED> instruction: 0x86150050
    56d0:	0100001b 	tsteq	r0, fp, lsl r0
    56d4:	004a4cb8 	strheq	r4, [sl], #-200	; 0xffffff38
    56d8:	00000408 	andeq	r0, r0, r8, lsl #8
    56dc:	2b9c0100 	blcs	fe705ae4 <SCS_BASE+0x1e6f7ae4>
    56e0:	1a000004 	bne	56f8 <__Stack_Size+0x52f8>
    56e4:	08004a50 	stmdaeq	r0, {r4, r6, r9, fp, lr}
    56e8:	0000092f 	andeq	r0, r0, pc, lsr #18
    56ec:	1bb61500 	blne	fed8aaf4 <SCS_BASE+0x1ed7caf4>
    56f0:	c4010000 	strgt	r0, [r1], #-0
    56f4:	08004a50 	stmdaeq	r0, {r4, r6, r9, fp, lr}
    56f8:	00000004 	andeq	r0, r0, r4
    56fc:	044a9c01 	strbeq	r9, [sl], #-3073	; 0xc01
    5700:	541a0000 	ldrpl	r0, [sl], #-0
    5704:	3608004a 	strcc	r0, [r8], -sl, asr #32
    5708:	00000009 	andeq	r0, r0, r9
    570c:	001e0a15 	andseq	r0, lr, r5, lsl sl
    5710:	54d00100 	ldrbpl	r0, [r0], #256	; 0x100
    5714:	0408004a 	streq	r0, [r8], #-74	; 0x4a
    5718:	01000000 	mrseq	r0, (UNDEF: 0)
    571c:	0004699c 	muleq	r4, ip, r9
    5720:	4a581a00 	bmi	160bf28 <__Stack_Size+0x160bb28>
    5724:	093d0800 	ldmdbeq	sp!, {fp}
    5728:	15000000 	strne	r0, [r0, #-0]
    572c:	00001c47 	andeq	r1, r0, r7, asr #24
    5730:	4a58dc01 	bmi	163c73c <__Stack_Size+0x163c33c>
    5734:	00040800 	andeq	r0, r4, r0, lsl #16
    5738:	9c010000 	stcls	0, cr0, [r1], {-0}
    573c:	00000488 	andeq	r0, r0, r8, lsl #9
    5740:	004a5c1a 	subeq	r5, sl, sl, lsl ip
    5744:	00094408 	andeq	r4, r9, r8, lsl #8
    5748:	d6150000 	ldrle	r0, [r5], -r0
    574c:	0100001c 	tsteq	r0, ip, lsl r0
    5750:	004a5cea 	subeq	r5, sl, sl, ror #25
    5754:	00000608 	andeq	r0, r0, r8, lsl #12
    5758:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    575c:	17000004 	strne	r0, [r0, -r4]
    5760:	00001f00 	andeq	r1, r0, r0, lsl #30
    5764:	003aea01 	eorseq	lr, sl, r1, lsl #20
    5768:	231e0000 	tstcs	lr, #0
    576c:	621b0000 	andsvs	r0, fp, #0
    5770:	4b08004a 	blmi	2058a0 <__Stack_Size+0x2054a0>
    5774:	1c000009 	stcne	0, cr0, [r0], {9}
    5778:	f3055001 	vhadd.u8	d5, d5, d1
    577c:	24345001 	ldrtcs	r5, [r4], #-1
    5780:	6a1d0000 	bvs	745788 <__Stack_Size+0x745388>
    5784:	0100001d 	tsteq	r0, sp, lsl r0
    5788:	00003af9 	strdeq	r3, [r0], -r9
    578c:	004a6200 	subeq	r6, sl, r0, lsl #4
    5790:	00000408 	andeq	r0, r0, r8, lsl #8
    5794:	e39c0100 	orrs	r0, ip, #0, 2
    5798:	1a000004 	bne	57b0 <__Stack_Size+0x53b0>
    579c:	08004a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, lr}
    57a0:	0000095c 	andeq	r0, r0, ip, asr r9
    57a4:	1b371e00 	blne	dccfac <__Stack_Size+0xdccbac>
    57a8:	05010000 	streq	r0, [r1, #-0]
    57ac:	00004c01 	andeq	r4, r0, r1, lsl #24
    57b0:	004a6600 	subeq	r6, sl, r0, lsl #12
    57b4:	00000e08 	andeq	r0, r0, r8, lsl #28
    57b8:	1f9c0100 	svcne	0x009c0100
    57bc:	00001ece 	andeq	r1, r0, lr, asr #29
    57c0:	a4011201 	strge	r1, [r1], #-513	; 0x201
    57c4:	74000000 	strvc	r0, [r0], #-0
    57c8:	2008004a 	andcs	r0, r8, sl, asr #32
    57cc:	01000000 	mrseq	r0, (UNDEF: 0)
    57d0:	0005449c 	muleq	r5, ip, r4
    57d4:	07b02000 	ldreq	r2, [r0, r0]!
    57d8:	12010000 	andne	r0, r1, #0
    57dc:	00005e01 	andeq	r5, r0, r1, lsl #28
    57e0:	00233f00 	eoreq	r3, r3, r0, lsl #30
    57e4:	1f8c2100 	svcne	0x008c2100
    57e8:	14010000 	strne	r0, [r1], #-0
    57ec:	0000a401 	andeq	sl, r0, r1, lsl #8
    57f0:	00236000 	eoreq	r6, r3, r0
    57f4:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    57f8:	15010070 	strne	r0, [r1, #-112]	; 0x70
    57fc:	00003a01 	andeq	r3, r0, r1, lsl #20
    5800:	00238700 	eoreq	r8, r3, r0, lsl #14
    5804:	ee230000 	cdp	0, 2, cr0, cr3, cr0, {0}
    5808:	0100001c 	tsteq	r0, ip, lsl r0
    580c:	4a94012e 	bmi	fe505ccc <SCS_BASE+0x1e4f7ccc>
    5810:	000c0800 	andeq	r0, ip, r0, lsl #16
    5814:	9c010000 	stcls	0, cr0, [r1], {-0}
    5818:	00000569 	andeq	r0, r0, r9, ror #10
    581c:	0007b024 	andeq	fp, r7, r4, lsr #32
    5820:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    5824:	0000005e 	andeq	r0, r0, lr, asr r0
    5828:	23005001 	movwcs	r5, #1
    582c:	00001b08 	andeq	r1, r0, r8, lsl #22
    5830:	a0013d01 	andge	r3, r1, r1, lsl #26
    5834:	1808004a 	stmdane	r8, {r1, r3, r6}
    5838:	01000000 	mrseq	r0, (UNDEF: 0)
    583c:	0005909c 	muleq	r5, ip, r0
    5840:	07b02000 	ldreq	r2, [r0, r0]!
    5844:	3d010000 	stccc	0, cr0, [r1, #-0]
    5848:	00005e01 	andeq	r5, r0, r1, lsl #28
    584c:	0023a600 	eoreq	sl, r3, r0, lsl #12
    5850:	5b1e0000 	blpl	785858 <__Stack_Size+0x785458>
    5854:	0100001c 	tsteq	r0, ip, lsl r0
    5858:	004c014d 	subeq	r0, ip, sp, asr #2
    585c:	4ab80000 	bmi	fee05864 <SCS_BASE+0x1edf7864>
    5860:	00100800 	andseq	r0, r0, r0, lsl #16
    5864:	9c010000 	stcls	0, cr0, [r1], {-0}
    5868:	001f5e1f 	andseq	r5, pc, pc, lsl lr	; <UNPREDICTABLE>
    586c:	015a0100 	cmpeq	sl, r0, lsl #2
    5870:	000000a4 	andeq	r0, r0, r4, lsr #1
    5874:	08004ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, lr}
    5878:	00000020 	andeq	r0, r0, r0, lsr #32
    587c:	05f19c01 	ldrbeq	r9, [r1, #3073]!	; 0xc01
    5880:	b0200000 	eorlt	r0, r0, r0
    5884:	01000007 	tsteq	r0, r7
    5888:	005e015a 	subseq	r0, lr, sl, asr r1
    588c:	23c70000 	biccs	r0, r7, #0
    5890:	19210000 	stmdbne	r1!, {}	; <UNPREDICTABLE>
    5894:	0100001f 	tsteq	r0, pc, lsl r0
    5898:	00a4015c 	adceq	r0, r4, ip, asr r1
    589c:	23e80000 	mvncs	r0, #0
    58a0:	74220000 	strtvc	r0, [r2], #-0
    58a4:	0100706d 	tsteq	r0, sp, rrx
    58a8:	003a015d 	eorseq	r0, sl, sp, asr r1
    58ac:	240f0000 	strcs	r0, [pc], #-0	; 58b4 <__Stack_Size+0x54b4>
    58b0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    58b4:	00001c26 	andeq	r1, r0, r6, lsr #24
    58b8:	3a017701 	bcc	634c4 <__Stack_Size+0x630c4>
    58bc:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    58c0:	0c08004a 	stceq	0, cr0, [r8], {74}	; 0x4a
    58c4:	01000000 	mrseq	r0, (UNDEF: 0)
    58c8:	0b3e239c 	bleq	f8e740 <__Stack_Size+0xf8e340>
    58cc:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    58d0:	004af401 	subeq	pc, sl, r1, lsl #8
    58d4:	00001408 	andeq	r1, r0, r8, lsl #8
    58d8:	3e9c0100 	fmlcce	f0, f4, f0
    58dc:	20000006 	andcs	r0, r0, r6
    58e0:	00001f0c 	andeq	r1, r0, ip, lsl #30
    58e4:	3a018901 	bcc	67cf0 <__Stack_Size+0x678f0>
    58e8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    58ec:	20000024 	andcs	r0, r0, r4, lsr #32
    58f0:	00001dce 	andeq	r1, r0, lr, asr #27
    58f4:	3a018901 	bcc	67d00 <__Stack_Size+0x67900>
    58f8:	4f000000 	svcmi	0x00000000
    58fc:	00000024 	andeq	r0, r0, r4, lsr #32
    5900:	001b9625 	andseq	r9, fp, r5, lsr #12
    5904:	01990100 	orrseq	r0, r9, r0, lsl #2
    5908:	08004b08 	stmdaeq	r0, {r3, r8, r9, fp, lr}
    590c:	00000010 	andeq	r0, r0, r0, lsl r0
    5910:	9a259c01 	bls	96c91c <__Stack_Size+0x96c51c>
    5914:	0100001c 	tsteq	r0, ip, lsl r0
    5918:	4b1801a5 	blmi	605fb4 <__Stack_Size+0x605bb4>
    591c:	00100800 	andseq	r0, r0, r0, lsl #16
    5920:	9c010000 	stcls	0, cr0, [r1], {-0}
    5924:	001dba23 	andseq	fp, sp, r3, lsr #20
    5928:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    592c:	08004b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, lr}
    5930:	00000018 	andeq	r0, r0, r8, lsl r0
    5934:	06979c01 	ldreq	r9, [r7], r1, lsl #24
    5938:	51200000 			; <UNDEFINED> instruction: 0x51200000
    593c:	0100001f 	tsteq	r0, pc, lsl r0
    5940:	005e01b8 	ldrheq	r0, [lr], #-24	; 0xffffffe8
    5944:	24700000 	ldrbtcs	r0, [r0], #-0
    5948:	71240000 			; <UNDEFINED> instruction: 0x71240000
    594c:	01000016 	tsteq	r0, r6, lsl r0
    5950:	00c401b8 	strheq	r0, [r4], #24
    5954:	51010000 	mrspl	r0, (UNDEF: 1)
    5958:	1da12300 	stcne	3, cr2, [r1]
    595c:	d6010000 	strle	r0, [r1], -r0
    5960:	004b4001 	subeq	r4, fp, r1
    5964:	00002008 	andeq	r2, r0, r8
    5968:	de9c0100 	fmllee	f0, f4, f0
    596c:	20000006 	andcs	r0, r0, r6
    5970:	00001c78 	andeq	r1, r0, r8, ror ip
    5974:	3a01d601 	bcc	7b180 <__Stack_Size+0x7ad80>
    5978:	aa000000 	bge	5980 <__Stack_Size+0x5580>
    597c:	20000024 	andcs	r0, r0, r4, lsr #32
    5980:	00001671 	andeq	r1, r0, r1, ror r6
    5984:	c401d601 	strgt	sp, [r1], #-1537	; 0x601
    5988:	cb000000 	blgt	5990 <__Stack_Size+0x5590>
    598c:	21000024 	tstcs	r0, r4, lsr #32
    5990:	00001a07 	andeq	r1, r0, r7, lsl #20
    5994:	3a01d801 	bcc	7b9a0 <__Stack_Size+0x7b5a0>
    5998:	05000000 	streq	r0, [r0, #-0]
    599c:	00000025 	andeq	r0, r0, r5, lsr #32
    59a0:	001bd523 	andseq	sp, fp, r3, lsr #10
    59a4:	01fe0100 	mvnseq	r0, r0, lsl #2
    59a8:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    59ac:	0000004c 	andeq	r0, r0, ip, asr #32
    59b0:	07659c01 	strbeq	r9, [r5, -r1, lsl #24]!
    59b4:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
    59b8:	0100001c 	tsteq	r0, ip, lsl r0
    59bc:	003a01fe 	ldrshteq	r0, [sl], -lr
    59c0:	254d0000 	strbcs	r0, [sp, #-0]
    59c4:	ae200000 	cdpge	0, 2, cr0, cr0, cr0, {0}
    59c8:	0100001e 	tsteq	r0, lr, lsl r0
    59cc:	005e01fe 	ldrsheq	r0, [lr], #-30	; 0xffffffe2
    59d0:	256e0000 	strbcs	r0, [lr, #-0]!
    59d4:	6d200000 	stcvs	0, cr0, [r0, #-0]
    59d8:	0100001b 	tsteq	r0, fp, lsl r0
    59dc:	005e01ff 	ldrsheq	r0, [lr], #-31	; 0xffffffe1
    59e0:	258f0000 	strcs	r0, [pc]	; 59e8 <__Stack_Size+0x55e8>
    59e4:	8c210000 	stchi	0, cr0, [r1], #-0
    59e8:	0100001a 	tsteq	r0, sl, lsl r0
    59ec:	003a0201 	eorseq	r0, sl, r1, lsl #4
    59f0:	25b00000 	ldrcs	r0, [r0, #0]!
    59f4:	4e210000 	cdpmi	0, 2, cr0, cr1, cr0, {0}
    59f8:	0100001e 	tsteq	r0, lr, lsl r0
    59fc:	003a0201 	eorseq	r0, sl, r1, lsl #4
    5a00:	25ed0000 	strbcs	r0, [sp, #0]!
    5a04:	36210000 	strtcc	r0, [r1], -r0
    5a08:	0100001f 	tsteq	r0, pc, lsl r0
    5a0c:	003a0201 	eorseq	r0, sl, r1, lsl #4
    5a10:	261d0000 	ldrcs	r0, [sp], -r0
    5a14:	ea210000 	b	845a1c <__Stack_Size+0x84561c>
    5a18:	0100001d 	tsteq	r0, sp, lsl r0
    5a1c:	003a0202 	eorseq	r0, sl, r2, lsl #4
    5a20:	26410000 	strbcs	r0, [r1], -r0
    5a24:	1f000000 	svcne	0x00000000
    5a28:	00001e53 	andeq	r1, r0, r3, asr lr
    5a2c:	a4022801 	strge	r2, [r2], #-2049	; 0x801
    5a30:	ac000000 	stcge	0, cr0, [r0], {-0}
    5a34:	1c08004b 	stcne	0, cr0, [r8], {75}	; 0x4b
    5a38:	01000000 	mrseq	r0, (UNDEF: 0)
    5a3c:	0007c09c 	muleq	r7, ip, r0
    5a40:	1c782000 	ldclne	0, cr2, [r8], #-0
    5a44:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    5a48:	00003a02 	andeq	r3, r0, r2, lsl #20
    5a4c:	00268600 	eoreq	r8, r6, r0, lsl #12
    5a50:	17002100 	strne	r2, [r0, -r0, lsl #2]
    5a54:	2a010000 	bcs	45a5c <__Stack_Size+0x4565c>
    5a58:	0000a402 	andeq	sl, r0, r2, lsl #8
    5a5c:	0026a700 	eoreq	sl, r6, r0, lsl #14
    5a60:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    5a64:	2b010070 	blcs	45c2c <__Stack_Size+0x4582c>
    5a68:	00003a02 	andeq	r3, r0, r2, lsl #20
    5a6c:	0026ce00 	eoreq	ip, r6, r0, lsl #28
    5a70:	1d0b2100 	stfnes	f2, [fp, #-0]
    5a74:	2b010000 	blcs	45a7c <__Stack_Size+0x4567c>
    5a78:	00003a02 	andeq	r3, r0, r2, lsl #20
    5a7c:	0026fd00 	eoreq	pc, r6, r0, lsl #26
    5a80:	17230000 	strne	r0, [r3, -r0]!
    5a84:	0100001d 	tsteq	r0, sp, lsl r0
    5a88:	4bc8024e 	blmi	ff2063c8 <SCS_BASE+0x1f1f83c8>
    5a8c:	00180800 	andseq	r0, r8, r0, lsl #16
    5a90:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a94:	000007f7 	strdeq	r0, [r0], -r7
    5a98:	001c7820 	andseq	r7, ip, r0, lsr #16
    5a9c:	024e0100 	subeq	r0, lr, #0, 2
    5aa0:	0000003a 	andeq	r0, r0, sl, lsr r0
    5aa4:	00002746 	andeq	r2, r0, r6, asr #14
    5aa8:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    5aac:	02500100 	subseq	r0, r0, #0, 2
    5ab0:	0000003a 	andeq	r0, r0, sl, lsr r0
    5ab4:	00002767 	andeq	r2, r0, r7, ror #14
    5ab8:	1e792300 	cdpne	3, 7, cr2, cr9, cr0, {0}
    5abc:	66010000 	strvs	r0, [r1], -r0
    5ac0:	004be002 	subeq	lr, fp, r2
    5ac4:	00001808 	andeq	r1, r0, r8, lsl #16
    5ac8:	2e9c0100 	fmlcse	f0, f4, f0
    5acc:	20000008 	andcs	r0, r0, r8
    5ad0:	00001c78 	andeq	r1, r0, r8, ror ip
    5ad4:	3a026601 	bcc	9f2e0 <__Stack_Size+0x9eee0>
    5ad8:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    5adc:	22000027 	andcs	r0, r0, #39	; 0x27
    5ae0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    5ae4:	3a026801 	bcc	9faf0 <__Stack_Size+0x9f6f0>
    5ae8:	aa000000 	bge	5af0 <__Stack_Size+0x56f0>
    5aec:	00000027 	andeq	r0, r0, r7, lsr #32
    5af0:	001cb11f 	andseq	fp, ip, pc, lsl r1
    5af4:	02840100 	addeq	r0, r4, #0, 2
    5af8:	000000a4 	andeq	r0, r0, r4, lsr #1
    5afc:	08004bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, lr}
    5b00:	0000001c 	andeq	r0, r0, ip, lsl r0
    5b04:	08899c01 	stmeq	r9, {r0, sl, fp, ip, pc}
    5b08:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
    5b0c:	0100001c 	tsteq	r0, ip, lsl r0
    5b10:	003a0284 	eorseq	r0, sl, r4, lsl #5
    5b14:	27d90000 	ldrbcs	r0, [r9, r0]
    5b18:	00210000 	eoreq	r0, r1, r0
    5b1c:	01000017 	tsteq	r0, r7, lsl r0
    5b20:	00a40286 	adceq	r0, r4, r6, lsl #5
    5b24:	27fa0000 	ldrbcs	r0, [sl, r0]!
    5b28:	74220000 	strtvc	r0, [r2], #-0
    5b2c:	0100706d 	tsteq	r0, sp, rrx
    5b30:	003a0288 	eorseq	r0, sl, r8, lsl #5
    5b34:	28210000 	stmdacs	r1!, {}	; <UNPREDICTABLE>
    5b38:	0b210000 	bleq	845b40 <__Stack_Size+0x845740>
    5b3c:	0100001d 	tsteq	r0, sp, lsl r0
    5b40:	003a0288 	eorseq	r0, sl, r8, lsl #5
    5b44:	28500000 	ldmdacs	r0, {}^	; <UNPREDICTABLE>
    5b48:	1f000000 	svcne	0x00000000
    5b4c:	00001e26 	andeq	r1, r0, r6, lsr #28
    5b50:	3a02ac01 	bcc	b0b5c <__Stack_Size+0xb075c>
    5b54:	14000000 	strne	r0, [r0], #-0
    5b58:	3008004c 	andcc	r0, r8, ip, asr #32
    5b5c:	01000000 	mrseq	r0, (UNDEF: 0)
    5b60:	0008e49c 	muleq	r8, ip, r4
    5b64:	1c782000 	ldclne	0, cr2, [r8], #-0
    5b68:	ac010000 	stcge	0, cr0, [r1], {-0}
    5b6c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5b70:	00289900 	eoreq	r9, r8, r0, lsl #18
    5b74:	1ea12100 	fdvnes	f2, f1, f0
    5b78:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    5b7c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5b80:	0028ec00 	eoreq	lr, r8, r0, lsl #24
    5b84:	1a072100 	bne	1cdf8c <__Stack_Size+0x1cdb8c>
    5b88:	af010000 	svcge	0x00010000
    5b8c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5b90:	00293900 	eoreq	r3, r9, r0, lsl #18
    5b94:	1d0b2100 	stfnes	f2, [fp, #-0]
    5b98:	af010000 	svcge	0x00010000
    5b9c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5ba0:	00298800 	eoreq	r8, r9, r0, lsl #16
    5ba4:	581f0000 	ldmdapl	pc, {}	; <UNPREDICTABLE>
    5ba8:	0100001b 	tsteq	r0, fp, lsl r0
    5bac:	003a02da 	ldrsbteq	r0, [sl], -sl
    5bb0:	4c440000 	marmi	acc0, r0, r4
    5bb4:	00140800 	andseq	r0, r4, r0, lsl #16
    5bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5bbc:	0000092f 	andeq	r0, r0, pc, lsr #18
    5bc0:	001c7820 	andseq	r7, ip, r0, lsr #16
    5bc4:	02da0100 	sbcseq	r0, sl, #0, 2
    5bc8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5bcc:	00002a05 	andeq	r2, r0, r5, lsl #20
    5bd0:	001bc821 	andseq	ip, fp, r1, lsr #16
    5bd4:	02dc0100 	sbcseq	r0, ip, #0, 2
    5bd8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5bdc:	00002a26 	andeq	r2, r0, r6, lsr #20
    5be0:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    5be4:	02dd0100 	sbcseq	r0, sp, #0, 2
    5be8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5bec:	00002a45 	andeq	r2, r0, r5, asr #20
    5bf0:	1f292600 	svcne	0x00292600
    5bf4:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    5bf8:	001f4226 	andseq	r4, pc, r6, lsr #4
    5bfc:	26280500 	strtcs	r0, [r8], -r0, lsl #10
    5c00:	00001c8b 	andeq	r1, r0, fp, lsl #25
    5c04:	83262c05 			; <UNDEFINED> instruction: 0x83262c05
    5c08:	0500001d 	streq	r0, [r0, #-29]
    5c0c:	1d42272b 	stclne	7, cr2, [r2, #-172]	; 0xffffff54
    5c10:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5c14:	0000095c 	andeq	r0, r0, ip, asr r9
    5c18:	00003a28 	andeq	r3, r0, r8, lsr #20
    5c1c:	f6290000 			; <UNDEFINED> instruction: 0xf6290000
    5c20:	0500001b 	streq	r0, [r0, #-27]
    5c24:	00003a2f 	andeq	r3, r0, pc, lsr #20
    5c28:	02c20000 	sbceq	r0, r2, #0
    5c2c:	00040000 	andeq	r0, r4, r0
    5c30:	00000ee3 	andeq	r0, r0, r3, ror #29
    5c34:	08500104 	ldmdaeq	r0, {r2, r8}^
    5c38:	06010000 	streq	r0, [r1], -r0
    5c3c:	fa000020 	blx	5cc4 <__Stack_Size+0x58c4>
    5c40:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    5c44:	c808004c 	stmdagt	r8, {r2, r3, r6}
    5c48:	22000000 	andcs	r0, r0, #0
    5c4c:	0200000d 	andeq	r0, r0, #13
    5c50:	09d00504 	ldmibeq	r0, {r2, r8, sl}^
    5c54:	02020000 	andeq	r0, r2, #0
    5c58:	00099405 	andeq	r9, r9, r5, lsl #8
    5c5c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5c60:	00000b65 	andeq	r0, r0, r5, ror #22
    5c64:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    5c68:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    5c6c:	02000000 	andeq	r0, r0, #0
    5c70:	0b070704 	bleq	1c7888 <__Stack_Size+0x1c7488>
    5c74:	02020000 	andeq	r0, r2, #0
    5c78:	000d2707 	andeq	r2, sp, r7, lsl #14
    5c7c:	38750300 	ldmdacc	r5!, {r8, r9}^
    5c80:	5d290200 	sfmpl	f0, 4, [r9, #-0]
    5c84:	02000000 	andeq	r0, r0, #0
    5c88:	0b630801 	bleq	18c7c94 <__Stack_Size+0x18c7894>
    5c8c:	ec040000 	stc	0, cr0, [r4], {-0}
    5c90:	02000004 	andeq	r0, r0, #4
    5c94:	00006f2f 	andeq	r6, r0, pc, lsr #30
    5c98:	00450500 	subeq	r0, r5, r0, lsl #10
    5c9c:	01060000 	mrseq	r0, (UNDEF: 6)
    5ca0:	00893902 	addeq	r3, r9, r2, lsl #18
    5ca4:	6d070000 	stcvs	0, cr0, [r7, #-0]
    5ca8:	00000019 	andeq	r0, r0, r9, lsl r0
    5cac:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    5cb0:	04000100 	streq	r0, [r0], #-256	; 0x100
    5cb4:	000008f3 	strdeq	r0, [r0], -r3
    5cb8:	00743902 	rsbseq	r3, r4, r2, lsl #18
    5cbc:	01060000 	mrseq	r0, (UNDEF: 6)
    5cc0:	00a93b02 	adceq	r3, r9, r2, lsl #22
    5cc4:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    5cc8:	00000005 	andeq	r0, r0, r5
    5ccc:	000ae007 	andeq	lr, sl, r7
    5cd0:	04000100 	streq	r0, [r0], #-256	; 0x100
    5cd4:	00000114 	andeq	r0, r0, r4, lsl r1
    5cd8:	00943b02 	addseq	r3, r4, r2, lsl #22
    5cdc:	04020000 	streq	r0, [r2], #-0
    5ce0:	000afe07 	andeq	pc, sl, r7, lsl #28
    5ce4:	03080900 	movweq	r0, #35072	; 0x8900
    5ce8:	00de01a3 	sbcseq	r0, lr, r3, lsr #3
    5cec:	430a0000 	movwmi	r0, #40960	; 0xa000
    5cf0:	a5030052 	strge	r0, [r3, #-82]	; 0x52
    5cf4:	00006401 	andeq	r6, r0, r1, lsl #8
    5cf8:	430a0000 	movwmi	r0, #40960	; 0xa000
    5cfc:	03005253 	movweq	r5, #595	; 0x253
    5d00:	006401a6 	rsbeq	r0, r4, r6, lsr #3
    5d04:	00040000 	andeq	r0, r4, r0
    5d08:	001fef0b 	andseq	lr, pc, fp, lsl #30
    5d0c:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    5d10:	000000bb 	strheq	r0, [r0], -fp
    5d14:	001fc00c 	andseq	ip, pc, ip
    5d18:	58430100 	stmdapl	r3, {r8}^
    5d1c:	1a08004c 	bne	205e54 <__Stack_Size+0x205a54>
    5d20:	01000000 	mrseq	r0, (UNDEF: 0)
    5d24:	0001309c 	muleq	r1, ip, r0
    5d28:	4c640d00 	stclmi	13, cr0, [r4], #-0
    5d2c:	02a00800 	adceq	r0, r0, #0, 16
    5d30:	01190000 	tsteq	r9, r0
    5d34:	010e0000 	mrseq	r0, (UNDEF: 14)
    5d38:	0e310151 	mrceq	1, 1, r0, cr1, cr1, {2}
    5d3c:	40035001 	andmi	r5, r3, r1
    5d40:	0f002448 	svceq	0x00002448
    5d44:	08004c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, lr}
    5d48:	000002a0 	andeq	r0, r0, r0, lsr #5
    5d4c:	0151010e 	cmpeq	r1, lr, lsl #2
    5d50:	50010e30 	andpl	r0, r1, r0, lsr lr
    5d54:	24484003 	strbcs	r4, [r8], #-3
    5d58:	4a0c0000 	bmi	305d60 <__Stack_Size+0x305960>
    5d5c:	01000004 	tsteq	r0, r4
    5d60:	004c7251 	subeq	r7, ip, r1, asr r2
    5d64:	00000a08 	andeq	r0, r0, r8, lsl #20
    5d68:	539c0100 	orrspl	r0, ip, #0, 2
    5d6c:	10000001 	andne	r0, r0, r1
    5d70:	00001671 	andeq	r1, r0, r1, ror r6
    5d74:	00a95101 	adceq	r5, r9, r1, lsl #2
    5d78:	50010000 	andpl	r0, r1, r0
    5d7c:	1ffb0c00 	svcne	0x00fb0c00
    5d80:	61010000 	mrsvs	r0, (UNDEF: 1)
    5d84:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
    5d88:	0000000c 	andeq	r0, r0, ip
    5d8c:	01769c01 	cmneq	r6, r1, lsl #24
    5d90:	71100000 	tstvc	r0, r0
    5d94:	01000016 	tsteq	r0, r6, lsl r0
    5d98:	0000a961 	andeq	sl, r0, r1, ror #18
    5d9c:	00500100 	subseq	r0, r0, r0, lsl #2
    5da0:	0020280c 	eoreq	r2, r0, ip, lsl #16
    5da4:	887a0100 	ldmdahi	sl!, {r8}^
    5da8:	1408004c 	strne	r0, [r8], #-76	; 0x4c
    5dac:	01000000 	mrseq	r0, (UNDEF: 0)
    5db0:	0001aa9c 	muleq	r1, ip, sl
    5db4:	1fd91100 	svcne	0x00d91100
    5db8:	7a010000 	bvc	45dc0 <__Stack_Size+0x459c0>
    5dbc:	0000003a 	andeq	r0, r0, sl, lsr r0
    5dc0:	00002a70 	andeq	r2, r0, r0, ror sl
    5dc4:	001a0712 	andseq	r0, sl, r2, lsl r7
    5dc8:	3a7c0100 	bcc	1f061d0 <__Stack_Size+0x1f05dd0>
    5dcc:	91000000 	mrsls	r0, (UNDEF: 0)
    5dd0:	0000002a 	andeq	r0, r0, sl, lsr #32
    5dd4:	0020900c 	eoreq	r9, r0, ip
    5dd8:	9c950100 	ldflss	f0, [r5], {0}
    5ddc:	0c08004c 	stceq	0, cr0, [r8], {76}	; 0x4c
    5de0:	01000000 	mrseq	r0, (UNDEF: 0)
    5de4:	0001cd9c 	muleq	r1, ip, sp
    5de8:	16711000 	ldrbtne	r1, [r1], -r0
    5dec:	95010000 	strls	r0, [r1, #-0]
    5df0:	000000a9 	andeq	r0, r0, r9, lsr #1
    5df4:	0c005001 	stceq	0, cr5, [r0], {1}
    5df8:	00002059 	andeq	r2, r0, r9, asr r0
    5dfc:	4ca8ad01 	stcmi	13, cr10, [r8], #4
    5e00:	002c0800 	eoreq	r0, ip, r0, lsl #16
    5e04:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e08:	00000222 	andeq	r0, r0, r2, lsr #4
    5e0c:	001fcb11 	andseq	ip, pc, r1, lsl fp	; <UNPREDICTABLE>
    5e10:	3aad0100 	bcc	feb46218 <SCS_BASE+0x1eb38218>
    5e14:	bb000000 	bllt	5e1c <__Stack_Size+0x5a1c>
    5e18:	1100002a 	tstne	r0, sl, lsr #32
    5e1c:	00002082 	andeq	r2, r0, r2, lsl #1
    5e20:	0053ad01 	subseq	sl, r3, r1, lsl #26
    5e24:	2adc0000 	bcs	ff705e2c <SCS_BASE+0x1f6f7e2c>
    5e28:	07120000 	ldreq	r0, [r2, -r0]
    5e2c:	0100001a 	tsteq	r0, sl, lsl r0
    5e30:	00003aaf 	andeq	r3, r0, pc, lsr #21
    5e34:	002b1600 	eoreq	r1, fp, r0, lsl #12
    5e38:	4cc81300 	stclmi	3, cr1, [r8], {0}
    5e3c:	02b70800 	adcseq	r0, r7, #0, 16
    5e40:	cc130000 	ldcgt	0, cr0, [r3], {-0}
    5e44:	be08004c 	cdplt	0, 0, cr0, cr8, cr12, {2}
    5e48:	00000002 	andeq	r0, r0, r2
    5e4c:	001f9d0c 	andseq	r9, pc, ip, lsl #26
    5e50:	d4d80100 	ldrble	r0, [r8], #256	; 0x100
    5e54:	2808004c 	stmdacs	r8, {r2, r3, r6}
    5e58:	01000000 	mrseq	r0, (UNDEF: 0)
    5e5c:	0002419c 	muleq	r2, ip, r1
    5e60:	4cf41300 	ldclmi	3, cr1, [r4]
    5e64:	02b70800 	adcseq	r0, r7, #0, 16
    5e68:	14000000 	strne	r0, [r0], #-0
    5e6c:	0000203b 	andeq	r2, r0, fp, lsr r0
    5e70:	0089f201 	addeq	pc, r9, r1, lsl #4
    5e74:	4cfc0000 	ldclmi	0, cr0, [ip]
    5e78:	00140800 	andseq	r0, r4, r0, lsl #16
    5e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e80:	00000279 	andeq	r0, r0, r9, ror r2
    5e84:	001fe611 	andseq	lr, pc, r1, lsl r6	; <UNPREDICTABLE>
    5e88:	3af20100 	bcc	ffc86290 <SCS_BASE+0x1fc78290>
    5e8c:	4b000000 	blmi	5e94 <__Stack_Size+0x5a94>
    5e90:	1200002b 	andne	r0, r0, #43	; 0x2b
    5e94:	00001700 	andeq	r1, r0, r0, lsl #14
    5e98:	0089f401 	addeq	pc, r9, r1, lsl #8
    5e9c:	2b6c0000 	blcs	1b05ea4 <__Stack_Size+0x1b05aa4>
    5ea0:	15000000 	strne	r0, [r0, #-0]
    5ea4:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
    5ea8:	10011001 	andne	r1, r1, r1
    5eac:	1008004d 	andne	r0, r8, sp, asr #32
    5eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    5eb4:	0002a09c 	muleq	r2, ip, r0
    5eb8:	1fe61600 	svcne	0x00e61600
    5ebc:	10010000 	andne	r0, r1, r0
    5ec0:	00003a01 	andeq	r3, r0, r1, lsl #20
    5ec4:	002ba500 	eoreq	sl, fp, r0, lsl #10
    5ec8:	6b170000 	blvs	5c5ed0 <__Stack_Size+0x5c5ad0>
    5ecc:	05000020 	streq	r0, [r0, #-32]
    5ed0:	02b70115 	adcseq	r0, r7, #1073741829	; 0x40000005
    5ed4:	3a180000 	bcc	605edc <__Stack_Size+0x605adc>
    5ed8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5edc:	000000a9 	andeq	r0, r0, r9, lsr #1
    5ee0:	20531900 	subscs	r1, r3, r0, lsl #18
    5ee4:	1b040000 	blne	105eec <__Stack_Size+0x105aec>
    5ee8:	00204d19 	eoreq	r4, r0, r9, lsl sp
    5eec:	001c0400 	andseq	r0, ip, r0, lsl #8
    5ef0:	0000086d 	andeq	r0, r0, sp, ror #16
    5ef4:	10570004 	subsne	r0, r7, r4
    5ef8:	01040000 	mrseq	r0, (UNDEF: 4)
    5efc:	00000850 	andeq	r0, r0, r0, asr r8
    5f00:	00232101 	eoreq	r2, r3, r1, lsl #2
    5f04:	0000fa00 	andeq	pc, r0, r0, lsl #20
    5f08:	004d2000 	subeq	r2, sp, r0
    5f0c:	00033c08 	andeq	r3, r3, r8, lsl #24
    5f10:	000e0d00 	andeq	r0, lr, r0, lsl #26
    5f14:	05040200 	streq	r0, [r4, #-512]	; 0x200
    5f18:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5f1c:	94050202 	strls	r0, [r5], #-514	; 0x202
    5f20:	02000009 	andeq	r0, r0, #9
    5f24:	0b650601 	bleq	1947730 <__Stack_Size+0x1947330>
    5f28:	75030000 	strvc	r0, [r3, #-0]
    5f2c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    5f30:	00004527 	andeq	r4, r0, r7, lsr #10
    5f34:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5f38:	00000b07 	andeq	r0, r0, r7, lsl #22
    5f3c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    5f40:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    5f44:	02000000 	andeq	r0, r0, #0
    5f48:	0d270702 	stceq	7, cr0, [r7, #-8]!
    5f4c:	75030000 	strvc	r0, [r3, #-0]
    5f50:	29020038 	stmdbcs	r2, {r3, r4, r5}
    5f54:	00000068 	andeq	r0, r0, r8, rrx
    5f58:	63080102 	movwvs	r0, #33026	; 0x8102
    5f5c:	0300000b 	movweq	r0, #11
    5f60:	00386375 	eorseq	r6, r8, r5, ror r3
    5f64:	007a2d02 	rsbseq	r2, sl, r2, lsl #26
    5f68:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    5f6c:	05000000 	streq	r0, [r0, #-0]
    5f70:	000004ec 	andeq	r0, r0, ip, ror #9
    5f74:	008a2f02 	addeq	r2, sl, r2, lsl #30
    5f78:	45060000 	strmi	r0, [r6, #-0]
    5f7c:	03000000 	movweq	r0, #0
    5f80:	00387576 	eorseq	r7, r8, r6, ror r5
    5f84:	009a3102 	addseq	r3, sl, r2, lsl #2
    5f88:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    5f8c:	07000000 	streq	r0, [r0, -r0]
    5f90:	b4390201 	ldrtlt	r0, [r9], #-513	; 0x201
    5f94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5f98:	0000196d 	andeq	r1, r0, sp, ror #18
    5f9c:	45530900 	ldrbmi	r0, [r3, #-2304]	; 0x900
    5fa0:	00010054 	andeq	r0, r1, r4, asr r0
    5fa4:	0008f305 	andeq	pc, r8, r5, lsl #6
    5fa8:	9f390200 	svcls	0x00390200
    5fac:	05000000 	streq	r0, [r0, #-0]
    5fb0:	000020f5 	strdeq	r2, [r0], -r5
    5fb4:	009f3902 	addseq	r3, pc, r2, lsl #18
    5fb8:	01070000 	mrseq	r0, (UNDEF: 7)
    5fbc:	00df3b02 	sbcseq	r3, pc, r2, lsl #22
    5fc0:	f1080000 	cpsie	
    5fc4:	00000005 	andeq	r0, r0, r5
    5fc8:	000ae008 	andeq	lr, sl, r8
    5fcc:	05000100 	streq	r0, [r0, #-256]	; 0x100
    5fd0:	00000114 	andeq	r0, r0, r4, lsl r1
    5fd4:	00ca3b02 	sbceq	r3, sl, r2, lsl #22
    5fd8:	01070000 	mrseq	r0, (UNDEF: 7)
    5fdc:	00ff3e02 	rscseq	r3, pc, r2, lsl #28
    5fe0:	11080000 	mrsne	r0, (UNDEF: 8)
    5fe4:	00000000 	andeq	r0, r0, r0
    5fe8:	0005d608 	andeq	sp, r5, r8, lsl #12
    5fec:	05000100 	streq	r0, [r0, #-256]	; 0x100
    5ff0:	0000014c 	andeq	r0, r0, ip, asr #2
    5ff4:	00ea3e02 	rsceq	r3, sl, r2, lsl #28
    5ff8:	04020000 	streq	r0, [r2], #-0
    5ffc:	000afe07 	andeq	pc, sl, r7, lsl #28
    6000:	03280a00 			; <UNDEFINED> instruction: 0x03280a00
    6004:	019c01aa 	orrseq	r0, ip, sl, lsr #3
    6008:	430b0000 	movwmi	r0, #45056	; 0xb000
    600c:	ac030052 	stcge	0, cr0, [r3], {82}	; 0x52
    6010:	00007f01 	andeq	r7, r0, r1, lsl #30
    6014:	4f0c0000 	svcmi	0x000c0000
    6018:	03000021 	movweq	r0, #33	; 0x21
    601c:	007f01ad 	rsbseq	r0, pc, sp, lsr #3
    6020:	0b040000 	bleq	106028 <__Stack_Size+0x105c28>
    6024:	00524943 	subseq	r4, r2, r3, asr #18
    6028:	7f01ae03 	svcvc	0x0001ae03
    602c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6030:	0021ae0c 	eoreq	sl, r1, ip, lsl #28
    6034:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    6038:	0000007f 	andeq	r0, r0, pc, ror r0
    603c:	20ad0c0c 	adccs	r0, sp, ip, lsl #24
    6040:	b0030000 	andlt	r0, r3, r0
    6044:	00007f01 	andeq	r7, r0, r1, lsl #30
    6048:	d00c1000 	andle	r1, ip, r0
    604c:	03000021 	movweq	r0, #33	; 0x21
    6050:	007f01b1 	ldrhteq	r0, [pc], #-17
    6054:	0c140000 	ldceq	0, cr0, [r4], {-0}
    6058:	000021e1 	andeq	r2, r0, r1, ror #3
    605c:	7f01b203 	svcvc	0x0001b203
    6060:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6064:	0021630c 	eoreq	r6, r1, ip, lsl #6
    6068:	01b30300 			; <UNDEFINED> instruction: 0x01b30300
    606c:	0000007f 	andeq	r0, r0, pc, ror r0
    6070:	20fe0c1c 	rscscs	r0, lr, ip, lsl ip
    6074:	b4030000 	strlt	r0, [r3], #-0
    6078:	00007f01 	andeq	r7, r0, r1, lsl #30
    607c:	430b2000 	movwmi	r2, #45056	; 0xb000
    6080:	03005253 	movweq	r5, #595	; 0x253
    6084:	007f01b5 	ldrhteq	r0, [pc], #-21
    6088:	00240000 	eoreq	r0, r4, r0
    608c:	0020a10d 	eoreq	sl, r0, sp, lsl #2
    6090:	01b60300 			; <UNDEFINED> instruction: 0x01b60300
    6094:	00000111 	andeq	r0, r0, r1, lsl r1
    6098:	1904140e 	stmdbne	r4, {r1, r2, r3, sl, ip}
    609c:	000001ed 	andeq	r0, r0, sp, ror #3
    60a0:	0022960f 	eoreq	r9, r2, pc, lsl #12
    60a4:	3a1b0400 	bcc	6c70ac <__Stack_Size+0x6c6cac>
    60a8:	00000000 	andeq	r0, r0, r0
    60ac:	0021540f 	eoreq	r5, r1, pc, lsl #8
    60b0:	3a1c0400 	bcc	7070b8 <__Stack_Size+0x706cb8>
    60b4:	04000000 	streq	r0, [r0], #-0
    60b8:	0022ee0f 	eoreq	lr, r2, pc, lsl #28
    60bc:	3a1d0400 	bcc	7470c4 <__Stack_Size+0x746cc4>
    60c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    60c4:	0022b20f 	eoreq	fp, r2, pc, lsl #4
    60c8:	3a1e0400 	bcc	7870d0 <__Stack_Size+0x786cd0>
    60cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    60d0:	0022290f 	eoreq	r2, r2, pc, lsl #18
    60d4:	3a1f0400 	bcc	7c70dc <__Stack_Size+0x7c6cdc>
    60d8:	10000000 	andne	r0, r0, r0
    60dc:	211c0500 	tstcs	ip, r0, lsl #10
    60e0:	20040000 	andcs	r0, r4, r0
    60e4:	000001a8 	andeq	r0, r0, r8, lsr #3
    60e8:	00003c10 	andeq	r3, r0, r0, lsl ip
    60ec:	207c0100 	rsbscs	r0, ip, r0, lsl #2
    60f0:	3c08004d 	stccc	0, cr0, [r8], {77}	; 0x4d
    60f4:	01000000 	mrseq	r0, (UNDEF: 0)
    60f8:	068e119c 	pkhbteq	r1, lr, ip, lsl #3
    60fc:	9f010000 	svcls	0x00010000
    6100:	08004d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, lr}
    6104:	00000038 	andeq	r0, r0, r8, lsr r0
    6108:	022c9c01 	eoreq	r9, ip, #256	; 0x100
    610c:	d5120000 	ldrle	r0, [r2, #-0]
    6110:	01000022 	tsteq	r0, r2, lsr #32
    6114:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    6118:	00500100 	subseq	r0, r0, r0, lsl #2
    611c:	00220b11 	eoreq	r0, r2, r1, lsl fp
    6120:	94e90100 	strbtls	r0, [r9], #256	; 0x100
    6124:	1408004d 	strne	r0, [r8], #-77	; 0x4d
    6128:	01000000 	mrseq	r0, (UNDEF: 0)
    612c:	0002609c 	muleq	r2, ip, r0
    6130:	22151300 	andscs	r1, r5, #0, 6
    6134:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    6138:	0000005e 	andeq	r0, r0, lr, asr r0
    613c:	00002bc6 	andeq	r2, r0, r6, asr #23
    6140:	001a0714 	andseq	r0, sl, r4, lsl r7
    6144:	3aeb0100 	bcc	ffac654c <SCS_BASE+0x1fab854c>
    6148:	e7000000 	str	r0, [r0, -r0]
    614c:	0000002b 	andeq	r0, r0, fp, lsr #32
    6150:	00237a15 	eoreq	r7, r3, r5, lsl sl
    6154:	01060100 	mrseq	r0, (UNDEF: 22)
    6158:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    615c:	0000000c 	andeq	r0, r0, ip
    6160:	02859c01 	addeq	r9, r5, #256	; 0x100
    6164:	71160000 	tstvc	r6, r0
    6168:	01000016 	tsteq	r0, r6, lsl r0
    616c:	00df0106 	sbcseq	r0, pc, r6, lsl #2
    6170:	50010000 	andpl	r0, r1, r0
    6174:	018b1500 	orreq	r1, fp, r0, lsl #10
    6178:	1f010000 	svcne	0x00010000
    617c:	004db401 	subeq	fp, sp, r1, lsl #8
    6180:	00001408 	andeq	r1, r0, r8, lsl #8
    6184:	cc9c0100 	ldfgts	f0, [ip], {0}
    6188:	17000002 	strne	r0, [r0, -r2]
    618c:	00002243 	andeq	r2, r0, r3, asr #4
    6190:	3a011f01 	bcc	4dd9c <__Stack_Size+0x4d99c>
    6194:	11000000 	mrsne	r0, (UNDEF: 0)
    6198:	1700002c 	strne	r0, [r0, -ip, lsr #32]
    619c:	0000212e 	andeq	r2, r0, lr, lsr #2
    61a0:	3a011f01 	bcc	4ddac <__Stack_Size+0x4d9ac>
    61a4:	32000000 	andcc	r0, r0, #0
    61a8:	1800002c 	stmdane	r0, {r2, r3, r5}
    61ac:	00001a07 	andeq	r1, r0, r7, lsl #20
    61b0:	3a012101 	bcc	4e5bc <__Stack_Size+0x4e1bc>
    61b4:	53000000 	movwpl	r0, #0
    61b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    61bc:	000cb415 	andeq	fp, ip, r5, lsl r4
    61c0:	013c0100 	teqeq	ip, r0, lsl #2
    61c4:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    61c8:	0000000c 	andeq	r0, r0, ip
    61cc:	02f19c01 	rscseq	r9, r1, #256	; 0x100
    61d0:	71160000 	tstvc	r6, r0
    61d4:	01000016 	tsteq	r0, r6, lsl r0
    61d8:	00df013c 	sbcseq	r0, pc, ip, lsr r1	; <UNPREDICTABLE>
    61dc:	50010000 	andpl	r0, r1, r0
    61e0:	00171500 	andseq	r1, r7, r0, lsl #10
    61e4:	4f010000 	svcmi	0x00010000
    61e8:	004dd401 	subeq	sp, sp, r1, lsl #8
    61ec:	00001408 	andeq	r1, r0, r8, lsl #8
    61f0:	289c0100 	ldmcs	ip, {r8}
    61f4:	17000003 	strne	r0, [r0, -r3]
    61f8:	000022dd 	ldrdeq	r2, [r0], -sp
    61fc:	3a014f01 	bcc	59e08 <__Stack_Size+0x59a08>
    6200:	90000000 	andls	r0, r0, r0
    6204:	1800002c 	stmdane	r0, {r2, r3, r5}
    6208:	00001a07 	andeq	r1, r0, r7, lsl #20
    620c:	3a015101 	bcc	5a618 <__Stack_Size+0x5a218>
    6210:	b1000000 	mrslt	r0, (UNDEF: 0)
    6214:	0000002c 	andeq	r0, r0, ip, lsr #32
    6218:	000ac719 	andeq	ip, sl, r9, lsl r7
    621c:	016d0100 	cmneq	sp, r0, lsl #2
    6220:	0000005e 	andeq	r0, r0, lr, asr r0
    6224:	08004de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, lr}
    6228:	00000010 	andeq	r0, r0, r0, lsl r0
    622c:	8c159c01 	ldchi	12, cr9, [r5], {1}
    6230:	01000007 	tsteq	r0, r7
    6234:	4df80184 	ldfmie	f0, [r8, #528]!	; 0x210
    6238:	00140800 	andseq	r0, r4, r0, lsl #16
    623c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6240:	00000375 	andeq	r0, r0, r5, ror r3
    6244:	00228117 	eoreq	r8, r2, r7, lsl r1
    6248:	01840100 	orreq	r0, r4, r0, lsl #2
    624c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6250:	00002cdb 	ldrdeq	r2, [r0], -fp
    6254:	001a0718 	andseq	r0, sl, r8, lsl r7
    6258:	01860100 	orreq	r0, r6, r0, lsl #2
    625c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6260:	00002cfc 	strdeq	r2, [r0], -ip
    6264:	07cb1500 	strbeq	r1, [fp, r0, lsl #10]
    6268:	a5010000 	strge	r0, [r1, #-0]
    626c:	004e0c01 	subeq	r0, lr, r1, lsl #24
    6270:	00001408 	andeq	r1, r0, r8, lsl #8
    6274:	ac9c0100 	ldfges	f0, [ip], {0}
    6278:	17000003 	strne	r0, [r0, -r3]
    627c:	000020b6 	strheq	r2, [r0], -r6
    6280:	3a01a501 	bcc	6f68c <__Stack_Size+0x6f28c>
    6284:	26000000 	strcs	r0, [r0], -r0
    6288:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    628c:	00001a07 	andeq	r1, r0, r7, lsl #20
    6290:	3a01a701 	bcc	6fe9c <__Stack_Size+0x6fa9c>
    6294:	47000000 	strmi	r0, [r0, -r0]
    6298:	0000002d 	andeq	r0, r0, sp, lsr #32
    629c:	00025415 	andeq	r5, r2, r5, lsl r4
    62a0:	01c60100 	biceq	r0, r6, r0, lsl #2
    62a4:	08004e20 	stmdaeq	r0, {r5, r9, sl, fp, lr}
    62a8:	00000014 	andeq	r0, r0, r4, lsl r0
    62ac:	03e39c01 	mvneq	r9, #256	; 0x100
    62b0:	b6170000 	ldrlt	r0, [r7], -r0
    62b4:	01000020 	tsteq	r0, r0, lsr #32
    62b8:	003a01c6 	eorseq	r0, sl, r6, asr #3
    62bc:	2d710000 	ldclcs	0, cr0, [r1, #-0]
    62c0:	07180000 	ldreq	r0, [r8, -r0]
    62c4:	0100001a 	tsteq	r0, sl, lsl r0
    62c8:	003a01c8 	eorseq	r0, sl, r8, asr #3
    62cc:	2d920000 	ldccs	0, cr0, [r2]
    62d0:	15000000 	strne	r0, [r0, #-0]
    62d4:	000022c2 	andeq	r2, r0, r2, asr #5
    62d8:	3401e901 	strcc	lr, [r1], #-2305	; 0x901
    62dc:	1808004e 	stmdane	r8, {r1, r2, r3, r6}
    62e0:	01000000 	mrseq	r0, (UNDEF: 0)
    62e4:	0004189c 	muleq	r4, ip, r8
    62e8:	238d1700 	orrcs	r1, sp, #0, 14
    62ec:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    62f0:	00005e01 	andeq	r5, r0, r1, lsl #28
    62f4:	002dbc00 	eoreq	fp, sp, r0, lsl #24
    62f8:	16711600 	ldrbtne	r1, [r1], -r0, lsl #12
    62fc:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    6300:	0000df01 	andeq	sp, r0, r1, lsl #30
    6304:	00510100 	subseq	r0, r1, r0, lsl #2
    6308:	00219215 	eoreq	r9, r1, r5, lsl r2
    630c:	02080100 	andeq	r0, r8, #0, 2
    6310:	08004e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, lr}
    6314:	0000000c 	andeq	r0, r0, ip
    6318:	043d9c01 	ldrteq	r9, [sp], #-3073	; 0xc01
    631c:	62160000 	andsvs	r0, r6, #0
    6320:	01000022 	tsteq	r0, r2, lsr #32
    6324:	003a0208 	eorseq	r0, sl, r8, lsl #4
    6328:	50010000 	andpl	r0, r1, r0
    632c:	20bf1500 	adcscs	r1, pc, r0, lsl #10
    6330:	1d010000 	stcne	0, cr0, [r1, #-0]
    6334:	004e5802 	subeq	r5, lr, r2, lsl #16
    6338:	00001408 	andeq	r1, r0, r8, lsl #8
    633c:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    6340:	17000004 	strne	r0, [r0, -r4]
    6344:	00002112 	andeq	r2, r0, r2, lsl r1
    6348:	3a021d01 	bcc	8d754 <__Stack_Size+0x8d354>
    634c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    6350:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    6354:	00001a07 	andeq	r1, r0, r7, lsl #20
    6358:	3a021f01 	bcc	8df64 <__Stack_Size+0x8db64>
    635c:	17000000 	strne	r0, [r0, -r0]
    6360:	0000002e 	andeq	r0, r0, lr, lsr #32
    6364:	00234315 	eoreq	r4, r3, r5, lsl r3
    6368:	023c0100 	eorseq	r0, ip, #0, 2
    636c:	08004e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, lr}
    6370:	00000020 	andeq	r0, r0, r0, lsr #32
    6374:	04999c01 	ldreq	r9, [r9], #3073	; 0xc01
    6378:	e6160000 	ldr	r0, [r6], -r0
    637c:	01000020 	tsteq	r0, r0, lsr #32
    6380:	005e023c 	subseq	r0, lr, ip, lsr r2
    6384:	50010000 	andpl	r0, r1, r0
    6388:	21a31500 			; <UNDEFINED> instruction: 0x21a31500
    638c:	63010000 	movwvs	r0, #4096	; 0x1000
    6390:	004e8c02 	subeq	r8, lr, r2, lsl #24
    6394:	00000c08 	andeq	r0, r0, r8, lsl #24
    6398:	be9c0100 	fmllte	f0, f4, f0
    639c:	16000004 	strne	r0, [r0], -r4
    63a0:	00001671 	andeq	r1, r0, r1, ror r6
    63a4:	df026301 	svcle	0x00026301
    63a8:	01000000 	mrseq	r0, (UNDEF: 0)
    63ac:	51150050 	tstpl	r5, r0, asr r0
    63b0:	01000022 	tsteq	r0, r2, lsr #32
    63b4:	4e980279 	mrcmi	2, 4, r0, cr8, cr9, {3}
    63b8:	00100800 	andseq	r0, r0, r0, lsl #16
    63bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    63c0:	000004e5 	andeq	r0, r0, r5, ror #9
    63c4:	00217917 	eoreq	r7, r1, r7, lsl r9
    63c8:	02790100 	rsbseq	r0, r9, #0, 2
    63cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    63d0:	00002e41 	andeq	r2, r0, r1, asr #28
    63d4:	23511500 	cmpcs	r1, #0, 10
    63d8:	8c010000 	stchi	0, cr0, [r1], {-0}
    63dc:	004ea802 	subeq	sl, lr, r2, lsl #16
    63e0:	00000c08 	andeq	r0, r0, r8, lsl #24
    63e4:	0a9c0100 	beq	fe7067ec <SCS_BASE+0x1e6f87ec>
    63e8:	16000005 	strne	r0, [r0], -r5
    63ec:	00001671 	andeq	r1, r0, r1, ror r6
    63f0:	df028c01 	svcle	0x00028c01
    63f4:	01000000 	mrseq	r0, (UNDEF: 0)
    63f8:	0f150050 	svceq	0x00150050
    63fc:	01000023 	tsteq	r0, r3, lsr #32
    6400:	4eb4029c 	mrcmi	2, 5, r0, cr4, cr12, {4}
    6404:	00840800 	addeq	r0, r4, r0, lsl #16
    6408:	9c010000 	stcls	0, cr0, [r1], {-0}
    640c:	0000056f 	andeq	r0, r0, pc, ror #10
    6410:	0022a716 	eoreq	sl, r2, r6, lsl r7
    6414:	029c0100 	addseq	r0, ip, #0, 2
    6418:	0000056f 	andeq	r0, r0, pc, ror #10
    641c:	741a5001 	ldrvc	r5, [sl], #-1
    6420:	0100706d 	tsteq	r0, sp, rrx
    6424:	003a029e 	mlaseq	sl, lr, r2, r0
    6428:	2e620000 	cdpcs	0, 6, cr0, cr2, cr0, {0}
    642c:	8a180000 	bhi	606434 <__Stack_Size+0x606034>
    6430:	01000021 	tsteq	r0, r1, lsr #32
    6434:	003a029e 	mlaseq	sl, lr, r2, r0
    6438:	2ee60000 	cdpcs	0, 14, cr0, cr6, cr0, {0}
    643c:	c6180000 	ldrgt	r0, [r8], -r0
    6440:	01000021 	tsteq	r0, r1, lsr #32
    6444:	003a029e 	mlaseq	sl, lr, r2, r0
    6448:	2f160000 	svccs	0x00160000
    644c:	cf180000 	svcgt	0x00180000
    6450:	01000022 	tsteq	r0, r2, lsr #32
    6454:	003a029e 	mlaseq	sl, lr, r2, r0
    6458:	2f3b0000 	svccs	0x003b0000
    645c:	1b000000 	blne	6464 <__Stack_Size+0x6064>
    6460:	0001ed04 	andeq	lr, r1, r4, lsl #26
    6464:	21391500 	teqcs	r9, r0, lsl #10
    6468:	00010000 	andeq	r0, r1, r0
    646c:	004f3803 	subeq	r3, pc, r3, lsl #16
    6470:	00001808 	andeq	r1, r0, r8, lsl #16
    6474:	aa9c0100 	bge	fe70687c <SCS_BASE+0x1e6f887c>
    6478:	17000005 	strne	r0, [r0, -r5]
    647c:	00002394 	muleq	r0, r4, r3
    6480:	3a030001 	bcc	c648c <__Stack_Size+0xc608c>
    6484:	c6000000 	strgt	r0, [r0], -r0
    6488:	1600002f 	strne	r0, [r0], -pc, lsr #32
    648c:	00001671 	andeq	r1, r0, r1, ror r6
    6490:	df030001 	svcle	0x00030001
    6494:	01000000 	mrseq	r0, (UNDEF: 0)
    6498:	f1150051 			; <UNDEFINED> instruction: 0xf1150051
    649c:	01000004 	tsteq	r0, r4
    64a0:	4f500321 	svcmi	0x00500321
    64a4:	00180800 	andseq	r0, r8, r0, lsl #16
    64a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    64ac:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    64b0:	00210317 	eoreq	r0, r1, r7, lsl r3
    64b4:	03210100 			; <UNDEFINED> instruction: 0x03210100
    64b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    64bc:	00003000 	andeq	r3, r0, r0
    64c0:	00167116 	andseq	r7, r6, r6, lsl r1
    64c4:	03210100 			; <UNDEFINED> instruction: 0x03210100
    64c8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    64cc:	15005101 	strne	r5, [r0, #-257]	; 0x101
    64d0:	000005f9 	strdeq	r0, [r0], -r9
    64d4:	68034301 	stmdavs	r3, {r0, r8, r9, lr}
    64d8:	1808004f 	stmdane	r8, {r0, r1, r2, r3, r6}
    64dc:	01000000 	mrseq	r0, (UNDEF: 0)
    64e0:	0006149c 	muleq	r6, ip, r4
    64e4:	21b71700 			; <UNDEFINED> instruction: 0x21b71700
    64e8:	43010000 	movwmi	r0, #4096	; 0x1000
    64ec:	00003a03 	andeq	r3, r0, r3, lsl #20
    64f0:	00303a00 	eorseq	r3, r0, r0, lsl #20
    64f4:	16711600 	ldrbtne	r1, [r1], -r0, lsl #12
    64f8:	43010000 	movwmi	r0, #4096	; 0x1000
    64fc:	0000df03 	andeq	sp, r0, r3, lsl #30
    6500:	00510100 	subseq	r0, r1, r0, lsl #2
    6504:	001a3115 	andseq	r3, sl, r5, lsl r1
    6508:	03630100 	cmneq	r3, #0, 2
    650c:	08004f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, lr}
    6510:	00000018 	andeq	r0, r0, r8, lsl r0
    6514:	06499c01 	strbeq	r9, [r9], -r1, lsl #24
    6518:	03170000 	tsteq	r7, #0
    651c:	01000021 	tsteq	r0, r1, lsr #32
    6520:	003a0363 	eorseq	r0, sl, r3, ror #6
    6524:	30740000 	rsbscc	r0, r4, r0
    6528:	71160000 	tstvc	r6, r0
    652c:	01000016 	tsteq	r0, r6, lsl r0
    6530:	00df0363 	sbcseq	r0, pc, r3, ror #6
    6534:	51010000 	mrspl	r0, (UNDEF: 1)
    6538:	206b1500 	rsbcs	r1, fp, r0, lsl #10
    653c:	84010000 	strhi	r0, [r1], #-0
    6540:	004f9803 	subeq	r9, pc, r3, lsl #16
    6544:	00001808 	andeq	r1, r0, r8, lsl #16
    6548:	7e9c0100 	fmlvce	f0, f4, f0
    654c:	17000006 	strne	r0, [r0, -r6]
    6550:	000021b7 			; <UNDEFINED> instruction: 0x000021b7
    6554:	3a038401 	bcc	e7560 <__Stack_Size+0xe7160>
    6558:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    655c:	16000030 			; <UNDEFINED> instruction: 0x16000030
    6560:	00001671 	andeq	r1, r0, r1, ror r6
    6564:	df038401 	svcle	0x00038401
    6568:	01000000 	mrseq	r0, (UNDEF: 0)
    656c:	f8150051 			; <UNDEFINED> instruction: 0xf8150051
    6570:	01000021 	tsteq	r0, r1, lsr #32
    6574:	4fb0039c 	svcmi	0x00b0039c
    6578:	000c0800 	andeq	r0, ip, r0, lsl #16
    657c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6580:	000006a3 	andeq	r0, r0, r3, lsr #13
    6584:	00167116 	andseq	r7, r6, r6, lsl r1
    6588:	039c0100 	orrseq	r0, ip, #0, 2
    658c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6590:	15005001 	strne	r5, [r0, #-1]
    6594:	0000235f 	andeq	r2, r0, pc, asr r3
    6598:	bc03ac01 	stclt	12, cr10, [r3], {1}
    659c:	0c08004f 	stceq	0, cr0, [r8], {79}	; 0x4f
    65a0:	01000000 	mrseq	r0, (UNDEF: 0)
    65a4:	0006c89c 	muleq	r6, ip, r8
    65a8:	16711600 	ldrbtne	r1, [r1], -r0, lsl #12
    65ac:	ac010000 	stcge	0, cr0, [r1], {-0}
    65b0:	0000df03 	andeq	sp, r0, r3, lsl #30
    65b4:	00500100 	subseq	r0, r0, r0, lsl #2
    65b8:	00216b15 	eoreq	r6, r1, r5, lsl fp
    65bc:	03c10100 	biceq	r0, r1, #0, 2
    65c0:	08004fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, lr}
    65c4:	0000000c 	andeq	r0, r0, ip
    65c8:	06ed9c01 	strbteq	r9, [sp], r1, lsl #24
    65cc:	85160000 	ldrhi	r0, [r6, #-0]
    65d0:	01000023 	tsteq	r0, r3, lsr #32
    65d4:	005e03c1 	subseq	r0, lr, r1, asr #7
    65d8:	50010000 	andpl	r0, r1, r0
    65dc:	08ec1c00 	stmiaeq	ip!, {sl, fp, ip}^
    65e0:	dd010000 	stcle	0, cr0, [r1, #-0]
    65e4:	0000b403 	andeq	fp, r0, r3, lsl #8
    65e8:	004fd400 	subeq	sp, pc, r0, lsl #8
    65ec:	00002808 	andeq	r2, r0, r8, lsl #16
    65f0:	489c0100 	ldmmi	ip, {r8}
    65f4:	17000007 	strne	r0, [r0, -r7]
    65f8:	0000223a 	andeq	r2, r0, sl, lsr r2
    65fc:	5e03dd01 	cdppl	13, 0, cr13, cr3, cr1, {0}
    6600:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    6604:	1a000030 	bne	66cc <__Stack_Size+0x62cc>
    6608:	00706d74 	rsbseq	r6, r0, r4, ror sp
    660c:	3a03df01 	bcc	fe218 <__Stack_Size+0xfde18>
    6610:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6614:	18000031 	stmdane	r0, {r0, r4, r5}
    6618:	000021d7 	ldrdeq	r2, [r0], -r7
    661c:	3a03e001 	bcc	fe628 <__Stack_Size+0xfe228>
    6620:	52000000 	andpl	r0, r0, #0
    6624:	18000031 	stmdane	r0, {r0, r4, r5}
    6628:	00001700 	andeq	r1, r0, r0, lsl #14
    662c:	b403e101 	strlt	lr, [r3], #-257	; 0x101
    6630:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    6634:	00000031 	andeq	r0, r0, r1, lsr r0
    6638:	0002bd1d 	andeq	fp, r2, sp, lsl sp
    663c:	ffc60100 			; <UNDEFINED> instruction: 0xffc60100
    6640:	fc000000 	stc2	0, cr0, [r0], {-0}
    6644:	2e08004f 	cdpcs	0, 0, cr0, cr8, cr15, {2}
    6648:	01000000 	mrseq	r0, (UNDEF: 0)
    664c:	0007b29c 	muleq	r7, ip, r2
    6650:	21e91e00 	mvncs	r1, r0, lsl #28
    6654:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    6658:	0000007f 	andeq	r0, r0, pc, ror r0
    665c:	14749102 	ldrbtne	r9, [r4], #-258	; 0x102
    6660:	000016f9 	strdeq	r1, [r0], -r9
    6664:	00ffc901 	rscseq	ip, pc, r1, lsl #18
    6668:	31cb0000 	biccc	r0, fp, r0
    666c:	8c140000 	ldchi	0, cr0, [r4], {-0}
    6670:	01000022 	tsteq	r0, r2, lsr #32
    6674:	0000b4ca 	andeq	fp, r0, sl, asr #9
    6678:	0031f000 	eorseq	pc, r1, r0
    667c:	50081f00 	andpl	r1, r8, r0, lsl #30
    6680:	06ed0800 	strbteq	r0, [sp], r0, lsl #16
    6684:	07a10000 	streq	r0, [r1, r0]!
    6688:	01200000 			; <UNDEFINED> instruction: 0x01200000
    668c:	31080250 	tstcc	r8, r0, asr r2
    6690:	501e2100 	andspl	r2, lr, r0, lsl #2
    6694:	06ed0800 	strbteq	r0, [sp], r0, lsl #16
    6698:	01200000 			; <UNDEFINED> instruction: 0x01200000
    669c:	31080250 	tstcc	r8, r0, asr r2
    66a0:	73220000 			; <UNDEFINED> instruction: 0x73220000
    66a4:	01000022 	tsteq	r0, r2, lsr #32
    66a8:	502a0410 	eorpl	r0, sl, r0, lsl r4
    66ac:	00120800 	andseq	r0, r2, r0, lsl #16
    66b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    66b4:	0020ee1c 	eoreq	lr, r0, ip, lsl lr
    66b8:	04240100 	strteq	r0, [r4], #-256	; 0x100
    66bc:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    66c0:	0800503c 	stmdaeq	r0, {r2, r3, r4, r5, ip, lr}
    66c4:	00000014 	andeq	r0, r0, r4, lsl r0
    66c8:	07ff9c01 	ldrbeq	r9, [pc, r1, lsl #24]!
    66cc:	8d170000 	ldchi	0, cr0, [r7, #-0]
    66d0:	01000023 	tsteq	r0, r3, lsr #32
    66d4:	005e0424 	subseq	r0, lr, r4, lsr #8
    66d8:	32030000 	andcc	r0, r3, #0
    66dc:	00180000 	andseq	r0, r8, r0
    66e0:	01000017 	tsteq	r0, r7, lsl r0
    66e4:	00bf0426 	adcseq	r0, pc, r6, lsr #8
    66e8:	32240000 	eorcc	r0, r4, #0
    66ec:	15000000 	strne	r0, [r0, #-0]
    66f0:	000020d0 	ldrdeq	r2, [r0], -r0
    66f4:	50044701 	andpl	r4, r4, r1, lsl #14
    66f8:	0c080050 	stceq	0, cr0, [r8], {80}	; 0x50
    66fc:	01000000 	mrseq	r0, (UNDEF: 0)
    6700:	0008249c 	muleq	r8, ip, r4
    6704:	238d1600 	orrcs	r1, sp, #0, 12
    6708:	47010000 	strmi	r0, [r1, -r0]
    670c:	00005e04 	andeq	r5, r0, r4, lsl #28
    6710:	00500100 	subseq	r0, r0, r0, lsl #2
    6714:	00006f23 	andeq	r6, r0, r3, lsr #30
    6718:	00083400 	andeq	r3, r8, r0, lsl #8
    671c:	010a2400 	tsteq	sl, r0, lsl #8
    6720:	000f0000 	andeq	r0, pc, r0
    6724:	0022fe1e 	eoreq	pc, r2, lr, lsl lr	; <UNPREDICTABLE>
    6728:	456f0100 	strbmi	r0, [pc, #-256]!	; 6630 <__Stack_Size+0x6230>
    672c:	05000008 	streq	r0, [r0, #-8]
    6730:	00609c03 	rsbeq	r9, r0, r3, lsl #24
    6734:	08240408 	stmdaeq	r4!, {r3, sl}
    6738:	6f230000 	svcvs	0x00230000
    673c:	5a000000 	bpl	6744 <__Stack_Size+0x6344>
    6740:	24000008 	strcs	r0, [r0], #-8
    6744:	0000010a 	andeq	r0, r0, sl, lsl #2
    6748:	a21e0003 	andsge	r0, lr, #3
    674c:	01000023 	tsteq	r0, r3, lsr #32
    6750:	00086b70 	andeq	r6, r8, r0, ror fp
    6754:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    6758:	04080060 	streq	r0, [r8], #-96	; 0x60
    675c:	0000084a 	andeq	r0, r0, sl, asr #16
    6760:	00020700 	andeq	r0, r2, r0, lsl #14
    6764:	7e000400 	cfcpysvc	mvf0, mvf0
    6768:	04000012 	streq	r0, [r0], #-18
    676c:	00085001 	andeq	r5, r8, r1
    6770:	23ec0100 	mvncs	r0, #0, 2
    6774:	00fa0000 	rscseq	r0, sl, r0
    6778:	505c0000 	subspl	r0, ip, r0
    677c:	008c0800 	addeq	r0, ip, r0, lsl #16
    6780:	0fad0000 	svceq	0x00ad0000
    6784:	04020000 	streq	r0, [r2], #-0
    6788:	0009d005 	andeq	sp, r9, r5
    678c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    6790:	00000994 	muleq	r0, r4, r9
    6794:	65060102 	strvs	r0, [r6, #-258]	; 0x102
    6798:	0300000b 	movweq	r0, #11
    679c:	00323375 	eorseq	r3, r2, r5, ror r3
    67a0:	00452702 	subeq	r2, r5, r2, lsl #14
    67a4:	04020000 	streq	r0, [r2], #-0
    67a8:	000b0707 	andeq	r0, fp, r7, lsl #14
    67ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    67b0:	00000d27 	andeq	r0, r0, r7, lsr #26
    67b4:	00387503 	eorseq	r7, r8, r3, lsl #10
    67b8:	005d2902 	subseq	r2, sp, r2, lsl #18
    67bc:	01020000 	mrseq	r0, (UNDEF: 2)
    67c0:	000b6308 	andeq	r6, fp, r8, lsl #6
    67c4:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    67c8:	2f020000 	svccs	0x00020000
    67cc:	0000006f 	andeq	r0, r0, pc, rrx
    67d0:	00004505 	andeq	r4, r0, r5, lsl #10
    67d4:	1e9b0400 	cdpne	4, 9, cr0, cr11, cr0, {0}
    67d8:	33020000 	movwcc	r0, #8192	; 0x2000
    67dc:	0000007f 	andeq	r0, r0, pc, ror r0
    67e0:	00006f06 	andeq	r6, r0, r6, lsl #30
    67e4:	02010700 	andeq	r0, r1, #0, 14
    67e8:	00009939 	andeq	r9, r0, r9, lsr r9
    67ec:	196d0800 	stmdbne	sp!, {fp}^
    67f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    67f4:	00544553 	subseq	r4, r4, r3, asr r5
    67f8:	f3040001 	vhadd.u8	d0, d4, d1
    67fc:	02000008 	andeq	r0, r0, #8
    6800:	00008439 	andeq	r8, r0, r9, lsr r4
    6804:	02010700 	andeq	r0, r1, #0, 14
    6808:	0000b93b 	andeq	fp, r0, fp, lsr r9
    680c:	05f10800 	ldrbeq	r0, [r1, #2048]!	; 0x800
    6810:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6814:	00000ae0 	andeq	r0, r0, r0, ror #21
    6818:	14040001 	strne	r0, [r4], #-1
    681c:	02000001 	andeq	r0, r0, #1
    6820:	0000a43b 	andeq	sl, r0, fp, lsr r4
    6824:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6828:	00000afe 	strdeq	r0, [r0], -lr
    682c:	0203100a 	andeq	r1, r3, #10
    6830:	00010902 	andeq	r0, r1, r2, lsl #18
    6834:	24120b00 	ldrcs	r0, [r2], #-2816	; 0xb00
    6838:	04030000 	streq	r0, [r3], #-0
    683c:	00006402 	andeq	r6, r0, r2, lsl #8
    6840:	3f0b0000 	svccc	0x000b0000
    6844:	03000024 	movweq	r0, #36	; 0x24
    6848:	00640205 	rsbeq	r0, r4, r5, lsl #4
    684c:	0c040000 	stceq	0, cr0, [r4], {-0}
    6850:	004c4156 	subeq	r4, ip, r6, asr r1
    6854:	64020603 	strvs	r0, [r2], #-1539	; 0x603
    6858:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    685c:	0023e60b 	eoreq	lr, r3, fp, lsl #12
    6860:	02070300 	andeq	r0, r7, #0, 6
    6864:	00000074 	andeq	r0, r0, r4, ror r0
    6868:	440d000c 	strmi	r0, [sp], #-12
    686c:	03000024 	movweq	r0, #36	; 0x24
    6870:	00cb0208 	sbceq	r0, fp, r8, lsl #4
    6874:	270e0000 	strcs	r0, [lr, -r0]
    6878:	01000024 	tsteq	r0, r4, lsr #32
    687c:	00505c2b 	subseq	r5, r0, fp, lsr #24
    6880:	00001808 	andeq	r1, r0, r8, lsl #16
    6884:	389c0100 	ldmcc	ip, {r8}
    6888:	0f000001 	svceq	0x00000001
    688c:	00002454 	andeq	r2, r0, r4, asr r4
    6890:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    6894:	50010000 	andpl	r0, r1, r0
    6898:	02220e00 	eoreq	r0, r2, #0, 28
    689c:	42010000 	andmi	r0, r1, #0
    68a0:	08005074 	stmdaeq	r0, {r2, r4, r5, r6, ip, lr}
    68a4:	0000000c 	andeq	r0, r0, ip
    68a8:	015b9c01 	cmpeq	fp, r1, lsl #24
    68ac:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 68b4 <__Stack_Size+0x64b4>
    68b0:	01000002 	tsteq	r0, r2
    68b4:	00003a42 	andeq	r3, r0, r2, asr #20
    68b8:	00500100 	subseq	r0, r0, r0, lsl #2
    68bc:	000a5a0e 	andeq	r5, sl, lr, lsl #20
    68c0:	80550100 	subshi	r0, r5, r0, lsl #2
    68c4:	28080050 	stmdacs	r8, {r4, r6}
    68c8:	01000000 	mrseq	r0, (UNDEF: 0)
    68cc:	0001809c 	muleq	r1, ip, r0
    68d0:	24171000 	ldrcs	r1, [r7], #-0
    68d4:	55010000 	strpl	r0, [r1, #-0]
    68d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    68dc:	00003263 	andeq	r3, r0, r3, ror #4
    68e0:	08c40e00 	stmiaeq	r4, {r9, sl, fp}^
    68e4:	70010000 	andvc	r0, r1, r0
    68e8:	080050a8 	stmdaeq	r0, {r3, r5, r7, ip, lr}
    68ec:	00000018 	andeq	r0, r0, r8, lsl r0
    68f0:	01a39c01 			; <UNDEFINED> instruction: 0x01a39c01
    68f4:	710f0000 	mrsvc	r0, CPSR
    68f8:	01000016 	tsteq	r0, r6, lsl r0
    68fc:	0000b970 	andeq	fp, r0, r0, ror r9
    6900:	00500100 	subseq	r0, r0, r0, lsl #2
    6904:	0023b011 	eoreq	fp, r3, r1, lsl r0
    6908:	3a860100 	bcc	fe186d10 <SCS_BASE+0x1e178d10>
    690c:	c0000000 	andgt	r0, r0, r0
    6910:	0c080050 	stceq	0, cr0, [r8], {80}	; 0x50
    6914:	01000000 	mrseq	r0, (UNDEF: 0)
    6918:	23c3129c 	biccs	r1, r3, #156, 4	; 0xc0000009
    691c:	96010000 	strls	r0, [r1], -r0
    6920:	00000099 	muleq	r0, r9, r0
    6924:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    6928:	0000001c 	andeq	r0, r0, ip, lsl r0
    692c:	d9109c01 	ldmdble	r0, {r0, sl, fp, ip, pc}
    6930:	01000023 	tsteq	r0, r3, lsr #32
    6934:	00005396 	muleq	r0, r6, r3
    6938:	00329e00 	eorseq	r9, r2, r0, lsl #28
    693c:	21d71300 	bicscs	r1, r7, r0, lsl #6
    6940:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    6944:	0000003a 	andeq	r0, r0, sl, lsr r0
    6948:	000032bf 			; <UNDEFINED> instruction: 0x000032bf
    694c:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    6950:	3a980100 	bcc	fe606d58 <SCS_BASE+0x1e5f8d58>
    6954:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    6958:	13000032 	movwne	r0, #50	; 0x32
    695c:	00001700 	andeq	r1, r0, r0, lsl #14
    6960:	00999901 	addseq	r9, r9, r1, lsl #18
    6964:	330b0000 	movwcc	r0, #45056	; 0xb000
    6968:	00000000 	andeq	r0, r0, r0
    696c:	00001f3e 	andeq	r1, r0, lr, lsr pc
    6970:	13a60004 			; <UNDEFINED> instruction: 0x13a60004
    6974:	01040000 	mrseq	r0, (UNDEF: 4)
    6978:	00000850 	andeq	r0, r0, r0, asr r8
    697c:	00274e01 	eoreq	r4, r7, r1, lsl #28
    6980:	0000fa00 	andeq	pc, r0, r0, lsl #20
    6984:	0050e800 	subseq	lr, r0, r0, lsl #16
    6988:	000a4408 	andeq	r4, sl, r8, lsl #8
    698c:	00106200 	andseq	r6, r0, r0, lsl #4
    6990:	05040200 	streq	r0, [r4, #-512]	; 0x200
    6994:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6998:	94050202 	strls	r0, [r5], #-514	; 0x202
    699c:	02000009 	andeq	r0, r0, #9
    69a0:	0b650601 	bleq	19481ac <__Stack_Size+0x1947dac>
    69a4:	75030000 	strvc	r0, [r3, #-0]
    69a8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    69ac:	00004527 	andeq	r4, r0, r7, lsr #10
    69b0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    69b4:	00000b07 	andeq	r0, r0, r7, lsl #22
    69b8:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    69bc:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    69c0:	02000000 	andeq	r0, r0, #0
    69c4:	0d270702 	stceq	7, cr0, [r7, #-8]!
    69c8:	75030000 	strvc	r0, [r3, #-0]
    69cc:	29020038 	stmdbcs	r2, {r3, r4, r5}
    69d0:	00000068 	andeq	r0, r0, r8, rrx
    69d4:	63080102 	movwvs	r0, #33026	; 0x8102
    69d8:	0400000b 	streq	r0, [r0], #-11
    69dc:	000004ec 	andeq	r0, r0, ip, ror #9
    69e0:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    69e4:	45050000 	strmi	r0, [r5, #-0]
    69e8:	04000000 	streq	r0, [r0], #-0
    69ec:	00000347 	andeq	r0, r0, r7, asr #6
    69f0:	008a3002 	addeq	r3, sl, r2
    69f4:	57050000 	strpl	r0, [r5, -r0]
    69f8:	06000000 	streq	r0, [r0], -r0
    69fc:	a4390201 	ldrtge	r0, [r9], #-513	; 0x201
    6a00:	07000000 	streq	r0, [r0, -r0]
    6a04:	0000196d 	andeq	r1, r0, sp, ror #18
    6a08:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    6a0c:	00010054 	andeq	r0, r1, r4, asr r0
    6a10:	0008f304 	andeq	pc, r8, r4, lsl #6
    6a14:	8f390200 	svchi	0x00390200
    6a18:	04000000 	streq	r0, [r0], #-0
    6a1c:	000020f5 	strdeq	r2, [r0], -r5
    6a20:	008f3902 	addeq	r3, pc, r2, lsl #18
    6a24:	01060000 	mrseq	r0, (UNDEF: 6)
    6a28:	00cf3b02 	sbceq	r3, pc, r2, lsl #22
    6a2c:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    6a30:	00000005 	andeq	r0, r0, r5
    6a34:	000ae007 	andeq	lr, sl, r7
    6a38:	04000100 	streq	r0, [r0], #-256	; 0x100
    6a3c:	00000114 	andeq	r0, r0, r4, lsl r1
    6a40:	00ba3b02 	adcseq	r3, sl, r2, lsl #22
    6a44:	04020000 	streq	r0, [r2], #-0
    6a48:	000afe07 	andeq	pc, sl, r7, lsl #28
    6a4c:	03500900 	cmpeq	r0, #0, 18
    6a50:	02f2020b 	rscseq	r0, r2, #-1342177280	; 0xb0000000
    6a54:	430a0000 	movwmi	r0, #40960	; 0xa000
    6a58:	03003152 	movweq	r3, #338	; 0x152
    6a5c:	007f020d 	rsbseq	r0, pc, sp, lsl #4
    6a60:	0b000000 	bleq	6a68 <__Stack_Size+0x6668>
    6a64:	0000094e 	andeq	r0, r0, lr, asr #18
    6a68:	4c020e03 	stcmi	14, cr0, [r2], {3}
    6a6c:	02000000 	andeq	r0, r0, #0
    6a70:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
    6a74:	020f0300 	andeq	r0, pc, #0, 6
    6a78:	0000007f 	andeq	r0, r0, pc, ror r0
    6a7c:	09580b04 	ldmdbeq	r8, {r2, r8, r9, fp}^
    6a80:	10030000 	andne	r0, r3, r0
    6a84:	00004c02 	andeq	r4, r0, r2, lsl #24
    6a88:	890b0600 	stmdbhi	fp, {r9, sl}
    6a8c:	03000006 	movweq	r0, #6
    6a90:	007f0211 	rsbseq	r0, pc, r1, lsl r2	; <UNPREDICTABLE>
    6a94:	0b080000 	bleq	206a9c <__Stack_Size+0x20669c>
    6a98:	00000962 	andeq	r0, r0, r2, ror #18
    6a9c:	4c021203 	sfmmi	f1, 4, [r2], {3}
    6aa0:	0a000000 	beq	6aa8 <__Stack_Size+0x66a8>
    6aa4:	00051b0b 	andeq	r1, r5, fp, lsl #22
    6aa8:	02130300 	andseq	r0, r3, #0, 6
    6aac:	0000007f 	andeq	r0, r0, pc, ror r0
    6ab0:	096c0b0c 	stmdbeq	ip!, {r2, r3, r8, r9, fp}^
    6ab4:	14030000 	strne	r0, [r3], #-0
    6ab8:	00004c02 	andeq	r4, r0, r2, lsl #24
    6abc:	530a0e00 	movwpl	r0, #44544	; 0xae00
    6ac0:	15030052 	strne	r0, [r3, #-82]	; 0x52
    6ac4:	00007f02 	andeq	r7, r0, r2, lsl #30
    6ac8:	760b1000 	strvc	r1, [fp], -r0
    6acc:	03000009 	movweq	r0, #9
    6ad0:	004c0216 	subeq	r0, ip, r6, lsl r2
    6ad4:	0a120000 	beq	486adc <__Stack_Size+0x4866dc>
    6ad8:	00524745 	subseq	r4, r2, r5, asr #14
    6adc:	7f021703 	svcvc	0x00021703
    6ae0:	14000000 	strne	r0, [r0], #-0
    6ae4:	0009800b 	andeq	r8, r9, fp
    6ae8:	02180300 	andseq	r0, r8, #0, 6
    6aec:	0000004c 	andeq	r0, r0, ip, asr #32
    6af0:	039f0b16 	orrseq	r0, pc, #22528	; 0x5800
    6af4:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    6af8:	00007f02 	andeq	r7, r0, r2, lsl #30
    6afc:	8a0b1800 	bhi	2ccb04 <__Stack_Size+0x2cc704>
    6b00:	03000009 	movweq	r0, #9
    6b04:	004c021a 	subeq	r0, ip, sl, lsl r2
    6b08:	0b1a0000 	bleq	686b10 <__Stack_Size+0x686710>
    6b0c:	000003a5 	andeq	r0, r0, r5, lsr #7
    6b10:	7f021b03 	svcvc	0x00021b03
    6b14:	1c000000 	stcne	0, cr0, [r0], {-0}
    6b18:	000dcb0b 	andeq	ip, sp, fp, lsl #22
    6b1c:	021c0300 	andseq	r0, ip, #0, 6
    6b20:	0000004c 	andeq	r0, r0, ip, asr #32
    6b24:	05bc0b1e 	ldreq	r0, [ip, #2846]!	; 0xb1e
    6b28:	1d030000 	stcne	0, cr0, [r3, #-0]
    6b2c:	00007f02 	andeq	r7, r0, r2, lsl #30
    6b30:	9e0b2000 	cdpls	0, 0, cr2, cr11, cr0, {0}
    6b34:	03000009 	movweq	r0, #9
    6b38:	004c021e 	subeq	r0, ip, lr, lsl r2
    6b3c:	0a220000 	beq	886b44 <__Stack_Size+0x886744>
    6b40:	00544e43 	subseq	r4, r4, r3, asr #28
    6b44:	7f021f03 	svcvc	0x00021f03
    6b48:	24000000 	strcs	r0, [r0], #-0
    6b4c:	0009a80b 	andeq	sl, r9, fp, lsl #16
    6b50:	02200300 	eoreq	r0, r0, #0, 6
    6b54:	0000004c 	andeq	r0, r0, ip, asr #32
    6b58:	53500a26 	cmppl	r0, #155648	; 0x26000
    6b5c:	21030043 	tstcs	r3, r3, asr #32
    6b60:	00007f02 	andeq	r7, r0, r2, lsl #30
    6b64:	df0b2800 	svcle	0x000b2800
    6b68:	0300000b 	movweq	r0, #11
    6b6c:	004c0222 	subeq	r0, ip, r2, lsr #4
    6b70:	0a2a0000 	beq	a86b78 <__Stack_Size+0xa86778>
    6b74:	00525241 	subseq	r5, r2, r1, asr #4
    6b78:	7f022303 	svcvc	0x00022303
    6b7c:	2c000000 	stccs	0, cr0, [r0], {-0}
    6b80:	000bea0b 	andeq	lr, fp, fp, lsl #20
    6b84:	02240300 	eoreq	r0, r4, #0, 6
    6b88:	0000004c 	andeq	r0, r0, ip, asr #32
    6b8c:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
    6b90:	25030052 	strcs	r0, [r3, #-82]	; 0x52
    6b94:	00007f02 	andeq	r7, r0, r2, lsl #30
    6b98:	f50b3000 			; <UNDEFINED> instruction: 0xf50b3000
    6b9c:	0300000b 	movweq	r0, #11
    6ba0:	004c0226 	subeq	r0, ip, r6, lsr #4
    6ba4:	0b320000 	bleq	c86bac <__Stack_Size+0xc867ac>
    6ba8:	0000038b 	andeq	r0, r0, fp, lsl #7
    6bac:	7f022703 	svcvc	0x00022703
    6bb0:	34000000 	strcc	r0, [r0], #-0
    6bb4:	000c000b 	andeq	r0, ip, fp
    6bb8:	02280300 	eoreq	r0, r8, #0, 6
    6bbc:	0000004c 	andeq	r0, r0, ip, asr #32
    6bc0:	03900b36 	orrseq	r0, r0, #55296	; 0xd800
    6bc4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    6bc8:	00007f02 	andeq	r7, r0, r2, lsl #30
    6bcc:	0b0b3800 	bleq	2d4bd4 <__Stack_Size+0x2d47d4>
    6bd0:	0300000c 	movweq	r0, #12
    6bd4:	004c022a 	subeq	r0, ip, sl, lsr #4
    6bd8:	0b3a0000 	bleq	e86be0 <__Stack_Size+0xe867e0>
    6bdc:	00000395 	muleq	r0, r5, r3
    6be0:	7f022b03 	svcvc	0x00022b03
    6be4:	3c000000 	stccc	0, cr0, [r0], {-0}
    6be8:	000c160b 	andeq	r1, ip, fp, lsl #12
    6bec:	022c0300 	eoreq	r0, ip, #0, 6
    6bf0:	0000004c 	andeq	r0, r0, ip, asr #32
    6bf4:	039a0b3e 	orrseq	r0, sl, #63488	; 0xf800
    6bf8:	2d030000 	stccs	0, cr0, [r3, #-0]
    6bfc:	00007f02 	andeq	r7, r0, r2, lsl #30
    6c00:	210b4000 	mrscs	r4, (UNDEF: 11)
    6c04:	0300000c 	movweq	r0, #12
    6c08:	004c022e 	subeq	r0, ip, lr, lsr #4
    6c0c:	0b420000 	bleq	1086c14 <__Stack_Size+0x1086814>
    6c10:	0000033c 	andeq	r0, r0, ip, lsr r3
    6c14:	7f022f03 	svcvc	0x00022f03
    6c18:	44000000 	strmi	r0, [r0], #-0
    6c1c:	000c2c0b 	andeq	r2, ip, fp, lsl #24
    6c20:	02300300 	eorseq	r0, r0, #0, 6
    6c24:	0000004c 	andeq	r0, r0, ip, asr #32
    6c28:	43440a46 	movtmi	r0, #19014	; 0x4a46
    6c2c:	31030052 	qaddcc	r0, r2, r3
    6c30:	00007f02 	andeq	r7, r0, r2, lsl #30
    6c34:	370b4800 	strcc	r4, [fp, -r0, lsl #16]
    6c38:	0300000c 	movweq	r0, #12
    6c3c:	004c0232 	subeq	r0, ip, r2, lsr r2
    6c40:	0b4a0000 	bleq	1286c48 <__Stack_Size+0x1286848>
    6c44:	000009d9 	ldrdeq	r0, [r0], -r9
    6c48:	7f023303 	svcvc	0x00023303
    6c4c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6c50:	000c420b 	andeq	r4, ip, fp, lsl #4
    6c54:	02340300 	eorseq	r0, r4, #0, 6
    6c58:	0000004c 	andeq	r0, r0, ip, asr #32
    6c5c:	d30c004e 	movwle	r0, #49230	; 0xc04e
    6c60:	03000002 	movweq	r0, #2
    6c64:	00e10235 	rsceq	r0, r1, r5, lsr r2
    6c68:	0a0d0000 	beq	346c70 <__Stack_Size+0x346870>
    6c6c:	03431b04 	movteq	r1, #15108	; 0x3b04
    6c70:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    6c74:	04000000 	streq	r0, [r0], #-0
    6c78:	00004c1d 	andeq	r4, r0, sp, lsl ip
    6c7c:	450e0000 	strmi	r0, [lr, #-0]
    6c80:	04000006 	streq	r0, [r0], #-6
    6c84:	00004c1e 	andeq	r4, r0, lr, lsl ip
    6c88:	c00e0200 	andgt	r0, lr, r0, lsl #4
    6c8c:	04000007 	streq	r0, [r0], #-7
    6c90:	00004c1f 	andeq	r4, r0, pc, lsl ip
    6c94:	080e0400 	stmdaeq	lr, {sl}
    6c98:	04000003 	streq	r0, [r0], #-3
    6c9c:	00004c20 	andeq	r4, r0, r0, lsr #24
    6ca0:	6b0e0600 	blvs	3884a8 <__Stack_Size+0x3880a8>
    6ca4:	04000005 	streq	r0, [r0], #-5
    6ca8:	00005e21 	andeq	r5, r0, r1, lsr #28
    6cac:	04000800 	streq	r0, [r0], #-2048	; 0x800
    6cb0:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6cb4:	02fe2204 	rscseq	r2, lr, #4, 4	; 0x40000000
    6cb8:	100d0000 	andne	r0, sp, r0
    6cbc:	03b72504 			; <UNDEFINED> instruction: 0x03b72504
    6cc0:	100e0000 	andne	r0, lr, r0
    6cc4:	04000009 	streq	r0, [r0], #-9
    6cc8:	00004c27 	andeq	r4, r0, r7, lsr #24
    6ccc:	1a0e0000 	bne	386cd4 <__Stack_Size+0x3868d4>
    6cd0:	04000003 	streq	r0, [r0], #-3
    6cd4:	00004c28 	andeq	r4, r0, r8, lsr #24
    6cd8:	b60e0200 	strlt	r0, [lr], -r0, lsl #4
    6cdc:	0400000a 	streq	r0, [r0], #-10
    6ce0:	00004c29 	andeq	r4, r0, r9, lsr #24
    6ce4:	ef0e0400 	svc	0x000e0400
    6ce8:	04000002 	streq	r0, [r0], #-2
    6cec:	00004c2a 	andeq	r4, r0, sl, lsr #24
    6cf0:	c70e0600 	strgt	r0, [lr, -r0, lsl #12]
    6cf4:	04000000 	streq	r0, [r0], #-0
    6cf8:	00004c2b 	andeq	r4, r0, fp, lsr #24
    6cfc:	880e0800 	stmdahi	lr, {fp}
    6d00:	04000005 	streq	r0, [r0], #-5
    6d04:	00004c2c 	andeq	r4, r0, ip, lsr #24
    6d08:	120e0a00 	andne	r0, lr, #0, 20
    6d0c:	04000002 	streq	r0, [r0], #-2
    6d10:	00004c2d 	andeq	r4, r0, sp, lsr #24
    6d14:	2e0e0c00 	cdpcs	12, 0, cr0, cr14, cr0, {0}
    6d18:	04000007 	streq	r0, [r0], #-7
    6d1c:	00004c2e 	andeq	r4, r0, lr, lsr #24
    6d20:	04000e00 	streq	r0, [r0], #-3584	; 0xe00
    6d24:	00000094 	muleq	r0, r4, r0
    6d28:	034e2f04 	movteq	r2, #61188	; 0xef04
    6d2c:	0a0d0000 	beq	346d34 <__Stack_Size+0x346934>
    6d30:	04073204 	streq	r3, [r7], #-516	; 0x204
    6d34:	6c0e0000 	stcvs	0, cr0, [lr], {-0}
    6d38:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    6d3c:	00004c34 	andeq	r4, r0, r4, lsr ip
    6d40:	530e0000 	movwpl	r0, #57344	; 0xe000
    6d44:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    6d48:	00004c35 	andeq	r4, r0, r5, lsr ip
    6d4c:	f70e0200 			; <UNDEFINED> instruction: 0xf70e0200
    6d50:	0400002a 	streq	r0, [r0], #-42	; 0x2a
    6d54:	00004c36 	andeq	r4, r0, r6, lsr ip
    6d58:	410e0400 	tstmi	lr, r0, lsl #8
    6d5c:	04000028 	streq	r0, [r0], #-40	; 0x28
    6d60:	00004c37 	andeq	r4, r0, r7, lsr ip
    6d64:	e80e0600 	stmda	lr, {r9, sl}
    6d68:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    6d6c:	00004c38 	andeq	r4, r0, r8, lsr ip
    6d70:	04000800 	streq	r0, [r0], #-2048	; 0x800
    6d74:	0000253e 	andeq	r2, r0, lr, lsr r5
    6d78:	03c23904 	biceq	r3, r2, #4, 18	; 0x10000
    6d7c:	0e0d0000 	cdpeq	0, 0, cr0, cr13, cr0, {0}
    6d80:	046f3c04 	strbteq	r3, [pc], #-3076	; 6d88 <__Stack_Size+0x6988>
    6d84:	450e0000 	strmi	r0, [lr, #-0]
    6d88:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    6d8c:	00004c3e 	andeq	r4, r0, lr, lsr ip
    6d90:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    6d94:	04000026 	streq	r0, [r0], #-38	; 0x26
    6d98:	00004c3f 	andeq	r4, r0, pc, lsr ip
    6d9c:	140e0200 	strne	r0, [lr], #-512	; 0x200
    6da0:	04000028 	streq	r0, [r0], #-40	; 0x28
    6da4:	00004c40 	andeq	r4, r0, r0, asr #24
    6da8:	260e0400 	strcs	r0, [lr], -r0, lsl #8
    6dac:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    6db0:	00004c41 	andeq	r4, r0, r1, asr #24
    6db4:	0a0e0600 	beq	3885bc <__Stack_Size+0x3881bc>
    6db8:	04000029 	streq	r0, [r0], #-41	; 0x29
    6dbc:	00004c42 	andeq	r4, r0, r2, asr #24
    6dc0:	b20e0800 	andlt	r0, lr, #0, 16
    6dc4:	04000027 	streq	r0, [r0], #-39	; 0x27
    6dc8:	00004c43 	andeq	r4, r0, r3, asr #24
    6dcc:	d60e0a00 	strle	r0, [lr], -r0, lsl #20
    6dd0:	0400002b 	streq	r0, [r0], #-43	; 0x2b
    6dd4:	00004c44 	andeq	r4, r0, r4, asr #24
    6dd8:	04000c00 	streq	r0, [r0], #-3072	; 0xc00
    6ddc:	00002897 	muleq	r0, r7, r8
    6de0:	04124504 	ldreq	r4, [r2], #-1284	; 0x504
    6de4:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 6dec <__Stack_Size+0x69ec>
    6de8:	0100002d 	tsteq	r0, sp, lsr #32
    6dec:	ac010518 	cfstr32ge	mvfx0, [r1], {24}
    6df0:	10000004 	andne	r0, r0, r4
    6df4:	00002616 	andeq	r2, r0, r6, lsl r6
    6df8:	ac051801 	stcge	8, cr1, [r5], {1}
    6dfc:	10000004 	andne	r0, r0, r4
    6e00:	00002550 	andeq	r2, r0, r0, asr r5
    6e04:	4c051801 	stcmi	8, cr1, [r5], {1}
    6e08:	11000000 	mrsne	r0, (UNDEF: 0)
    6e0c:	000025fc 	strdeq	r2, [r0], -ip
    6e10:	4c051a01 	stcmi	10, cr1, [r5], {1}
    6e14:	00000000 	andeq	r0, r0, r0
    6e18:	02f20412 	rscseq	r0, r2, #301989888	; 0x12000000
    6e1c:	97130000 	ldrls	r0, [r3, -r0]
    6e20:	01000026 	tsteq	r0, r6, lsr #32
    6e24:	50e80bed 	rscpl	r0, r8, sp, ror #23
    6e28:	00320800 	eorseq	r0, r2, r0, lsl #16
    6e2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e30:	00000527 	andeq	r0, r0, r7, lsr #10
    6e34:	00261614 	eoreq	r1, r6, r4, lsl r6
    6e38:	0bed0100 	bleq	ffb47240 <SCS_BASE+0x1fb39240>
    6e3c:	000004ac 	andeq	r0, r0, ip, lsr #9
    6e40:	53155001 	tstpl	r5, #1
    6e44:	0100002b 	tsteq	r0, fp, lsr #32
    6e48:	004c0bed 	subeq	r0, ip, sp, ror #23
    6e4c:	334a0000 	movtcc	r0, #40960	; 0xa000
    6e50:	f7150000 			; <UNDEFINED> instruction: 0xf7150000
    6e54:	0100002a 	tsteq	r0, sl, lsr #32
    6e58:	004c0bed 	subeq	r0, ip, sp, ror #23
    6e5c:	336b0000 	cmncc	fp, #0
    6e60:	e8150000 	ldmda	r5, {}	; <UNPREDICTABLE>
    6e64:	0100002c 	tsteq	r0, ip, lsr #32
    6e68:	004c0bee 	subeq	r0, ip, lr, ror #23
    6e6c:	338c0000 	orrcc	r0, ip, #0
    6e70:	5a160000 	bpl	586e78 <__Stack_Size+0x586a78>
    6e74:	0100002a 	tsteq	r0, sl, lsr #32
    6e78:	004c0bf0 	strdeq	r0, [ip], #-176	; 0xffffff50
    6e7c:	33ad0000 			; <UNDEFINED> instruction: 0x33ad0000
    6e80:	83160000 	tsthi	r6, #0
    6e84:	01000027 	tsteq	r0, r7, lsr #32
    6e88:	004c0bf0 	strdeq	r0, [ip], #-176	; 0xffffff50
    6e8c:	33e80000 	mvncc	r0, #0
    6e90:	13000000 	movwne	r0, #0
    6e94:	00002520 	andeq	r2, r0, r0, lsr #10
    6e98:	1a0c1b01 	bne	30daa4 <__Stack_Size+0x30d6a4>
    6e9c:	3a080051 	bcc	206fe8 <__Stack_Size+0x206be8>
    6ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ea4:	0005ac9c 	muleq	r5, ip, ip
    6ea8:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    6eac:	1b010000 	blne	46eb4 <__Stack_Size+0x46ab4>
    6eb0:	0004ac0c 	andeq	sl, r4, ip, lsl #24
    6eb4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6eb8:	00002b53 	andeq	r2, r0, r3, asr fp
    6ebc:	4c0c1b01 	stcmi	11, cr1, [ip], {1}
    6ec0:	12000000 	andne	r0, r0, #0
    6ec4:	15000034 	strne	r0, [r0, #-52]	; 0x34
    6ec8:	00002af7 	strdeq	r2, [r0], -r7
    6ecc:	4c0c1b01 	stcmi	11, cr1, [ip], {1}
    6ed0:	33000000 	movwcc	r0, #0
    6ed4:	15000034 	strne	r0, [r0, #-52]	; 0x34
    6ed8:	00002ce8 	andeq	r2, r0, r8, ror #25
    6edc:	4c0c1c01 	stcmi	12, cr1, [ip], {1}
    6ee0:	54000000 	strpl	r0, [r0], #-0
    6ee4:	16000034 			; <UNDEFINED> instruction: 0x16000034
    6ee8:	00002a5a 	andeq	r2, r0, sl, asr sl
    6eec:	4c0c1e01 	stcmi	14, cr1, [ip], {1}
    6ef0:	75000000 	strvc	r0, [r0, #-0]
    6ef4:	16000034 			; <UNDEFINED> instruction: 0x16000034
    6ef8:	00002783 	andeq	r2, r0, r3, lsl #15
    6efc:	4c0c1e01 	stcmi	14, cr1, [ip], {1}
    6f00:	9f000000 	svcls	0x00000000
    6f04:	17000034 	smladxne	r0, r4, r0, r0
    6f08:	00706d74 	rsbseq	r6, r0, r4, ror sp
    6f0c:	4c0c1e01 	stcmi	14, cr1, [ip], {1}
    6f10:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    6f14:	00000034 	andeq	r0, r0, r4, lsr r0
    6f18:	000b7618 	andeq	r7, fp, r8, lsl r6
    6f1c:	54860100 	strpl	r0, [r6], #256	; 0x100
    6f20:	c8080051 	stmdagt	r8, {r0, r4, r6}
    6f24:	01000000 	mrseq	r0, (UNDEF: 0)
    6f28:	0006b89c 	muleq	r6, ip, r8
    6f2c:	26161900 	ldrcs	r1, [r6], -r0, lsl #18
    6f30:	86010000 	strhi	r0, [r1], -r0
    6f34:	000004ac 	andeq	r0, r0, ip, lsr #9
    6f38:	000034fc 	strdeq	r3, [r0], -ip
    6f3c:	00517c1a 	subseq	r7, r1, sl, lsl ip
    6f40:	001f1708 	andseq	r1, pc, r8, lsl #14
    6f44:	0005e800 	andeq	lr, r5, r0, lsl #16
    6f48:	51011b00 	tstpl	r1, r0, lsl #22
    6f4c:	011b3101 	tsteq	fp, r1, lsl #2
    6f50:	00310150 	eorseq	r0, r1, r0, asr r1
    6f54:	0051ac1a 	subseq	sl, r1, sl, lsl ip
    6f58:	001f2e08 	andseq	r2, pc, r8, lsl #28
    6f5c:	00060200 	andeq	r0, r6, r0, lsl #4
    6f60:	51011b00 	tstpl	r1, r0, lsl #22
    6f64:	011b3101 	tsteq	fp, r1, lsl #2
    6f68:	000a0350 	andeq	r0, sl, r0, asr r3
    6f6c:	ba1a0008 	blt	686f94 <__Stack_Size+0x686b94>
    6f70:	17080051 	smlsdne	r8, r1, r0, r0
    6f74:	1a00001f 	bne	6ff8 <__Stack_Size+0x6bf8>
    6f78:	1b000006 	blne	6f98 <__Stack_Size+0x6b98>
    6f7c:	31015101 	tstcc	r1, r1, lsl #2
    6f80:	0150011b 	cmpeq	r0, fp, lsl r1
    6f84:	c61c0032 			; <UNDEFINED> instruction: 0xc61c0032
    6f88:	17080051 	smlsdne	r8, r1, r0, r0
    6f8c:	2d00001f 	stccs	0, cr0, [r0, #-124]	; 0xffffff84
    6f90:	1b000006 	blne	6fb0 <__Stack_Size+0x6bb0>
    6f94:	30015101 	andcc	r5, r1, r1, lsl #2
    6f98:	51ce1a00 	bicpl	r1, lr, r0, lsl #20
    6f9c:	1f170800 	svcne	0x00170800
    6fa0:	06450000 	strbeq	r0, [r5], -r0
    6fa4:	011b0000 	tsteq	fp, r0
    6fa8:	1b310151 	blne	c474f4 <__Stack_Size+0xc470f4>
    6fac:	34015001 	strcc	r5, [r1], #-1
    6fb0:	51da1a00 	bicspl	r1, sl, r0, lsl #20
    6fb4:	1f170800 	svcne	0x00170800
    6fb8:	065d0000 	ldrbeq	r0, [sp], -r0
    6fbc:	011b0000 	tsteq	fp, r0
    6fc0:	1b310151 	blne	c4750c <__Stack_Size+0xc4710c>
    6fc4:	38015001 	stmdacc	r1, {r0, ip, lr}
    6fc8:	51e61a00 	mvnpl	r1, r0, lsl #20
    6fcc:	1f170800 	svcne	0x00170800
    6fd0:	06750000 	ldrbteq	r0, [r5], -r0
    6fd4:	011b0000 	tsteq	fp, r0
    6fd8:	1b310151 	blne	c47524 <__Stack_Size+0xc47124>
    6fdc:	40015001 	andmi	r5, r1, r1
    6fe0:	51f21a00 	mvnspl	r1, r0, lsl #20
    6fe4:	1f170800 	svcne	0x00170800
    6fe8:	068e0000 	streq	r0, [lr], r0
    6fec:	011b0000 	tsteq	fp, r0
    6ff0:	1b310151 	blne	c4753c <__Stack_Size+0xc4713c>
    6ff4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    6ff8:	001a0020 	andseq	r0, sl, r0, lsr #32
    6ffc:	2e080052 	mcrcs	0, 0, r0, cr8, cr2, {2}
    7000:	a800001f 	stmdage	r0, {r0, r1, r2, r3, r4}
    7004:	1b000006 	blne	7024 <__Stack_Size+0x6c24>
    7008:	31015101 	tstcc	r1, r1, lsl #2
    700c:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7010:	0020000a 	eoreq	r0, r0, sl
    7014:	00520e1d 	subseq	r0, r2, sp, lsl lr
    7018:	001f2e08 	andseq	r2, pc, r8, lsl #28
    701c:	51011b00 	tstpl	r1, r0, lsl #22
    7020:	00003001 	andeq	r3, r0, r1
    7024:	00074f18 	andeq	r4, r7, r8, lsl pc
    7028:	1cc60100 	stfnee	f0, [r6], {0}
    702c:	3c080052 	stccc	0, cr0, [r8], {82}	; 0x52
    7030:	01000000 	mrseq	r0, (UNDEF: 0)
    7034:	0006e89c 	muleq	r6, ip, r8
    7038:	26161e00 	ldrcs	r1, [r6], -r0, lsl #28
    703c:	c6010000 	strgt	r0, [r1], -r0
    7040:	000004ac 	andeq	r0, r0, ip, lsr #9
    7044:	dc1e5001 	ldcle	0, cr5, [lr], {1}
    7048:	01000027 	tsteq	r0, r7, lsr #32
    704c:	0006e8c6 	andeq	lr, r6, r6, asr #17
    7050:	00510100 	subseq	r0, r1, r0, lsl #2
    7054:	03430412 	movteq	r0, #13330	; 0x3412
    7058:	c8180000 	ldmdagt	r8, {}	; <UNPREDICTABLE>
    705c:	01000001 	tsteq	r0, r1
    7060:	005258ed 	subseq	r5, r2, sp, ror #17
    7064:	00007408 	andeq	r7, r0, r8, lsl #8
    7068:	4b9c0100 	blmi	fe707470 <SCS_BASE+0x1e6f9470>
    706c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    7070:	00002616 	andeq	r2, r0, r6, lsl r6
    7074:	04aced01 	strteq	lr, [ip], #3329	; 0xd01
    7078:	50010000 	andpl	r0, r1, r0
    707c:	0029d71e 	eoreq	sp, r9, lr, lsl r7
    7080:	4bed0100 	blmi	ffb47488 <SCS_BASE+0x1fb39488>
    7084:	01000007 	tsteq	r0, r7
    7088:	28021f51 	stmdacs	r2, {r0, r4, r6, r8, r9, sl, fp, ip}
    708c:	ef010000 	svc	0x00010000
    7090:	0000004c 	andeq	r0, r0, ip, asr #32
    7094:	000035d7 	ldrdeq	r3, [r0], -r7
    7098:	0027831f 	eoreq	r8, r7, pc, lsl r3
    709c:	4cef0100 	stfmie	f0, [pc]	; 70a4 <__Stack_Size+0x6ca4>
    70a0:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    70a4:	1f000035 	svcne	0x00000035
    70a8:	00002cbb 			; <UNDEFINED> instruction: 0x00002cbb
    70ac:	004cef01 	subeq	lr, ip, r1, lsl #30
    70b0:	36200000 	strtcc	r0, [r0], -r0
    70b4:	12000000 	andne	r0, r0, #0
    70b8:	0003b704 	andeq	fp, r3, r4, lsl #14
    70bc:	26732000 	ldrbtcs	r2, [r3], -r0
    70c0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    70c4:	0052cc01 	subseq	ip, r2, r1, lsl #24
    70c8:	00008808 	andeq	r8, r0, r8, lsl #16
    70cc:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    70d0:	14000007 	strne	r0, [r0], #-7
    70d4:	00002616 	andeq	r2, r0, r6, lsl r6
    70d8:	ac014801 	stcge	8, cr4, [r1], {1}
    70dc:	01000004 	tsteq	r0, r4
    70e0:	29d71450 	ldmibcs	r7, {r4, r6, sl, ip}^
    70e4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    70e8:	00074b01 	andeq	r4, r7, r1, lsl #22
    70ec:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    70f0:	00002802 	andeq	r2, r0, r2, lsl #16
    70f4:	4c014a01 	stcmi	10, cr4, [r1], {1}
    70f8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    70fc:	16000036 			; <UNDEFINED> instruction: 0x16000036
    7100:	00002783 	andeq	r2, r0, r3, lsl #15
    7104:	4c014a01 	stcmi	10, cr4, [r1], {1}
    7108:	7b000000 	blvc	7110 <__Stack_Size+0x6d10>
    710c:	16000036 			; <UNDEFINED> instruction: 0x16000036
    7110:	00002cbb 			; <UNDEFINED> instruction: 0x00002cbb
    7114:	4c014a01 	stcmi	10, cr4, [r1], {1}
    7118:	dc000000 	stcle	0, cr0, [r0], {-0}
    711c:	00000036 	andeq	r0, r0, r6, lsr r0
    7120:	0026f320 	eoreq	pc, r6, r0, lsr #6
    7124:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    7128:	08005354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip, lr}
    712c:	00000084 	andeq	r0, r0, r4, lsl #1
    7130:	08179c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}
    7134:	16140000 	ldrne	r0, [r4], -r0
    7138:	01000026 	tsteq	r0, r6, lsr #32
    713c:	04ac01a4 	strteq	r0, [ip], #420	; 0x1a4
    7140:	50010000 	andpl	r0, r1, r0
    7144:	0029d714 	eoreq	sp, r9, r4, lsl r7
    7148:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    714c:	0000074b 	andeq	r0, r0, fp, asr #14
    7150:	02165101 	andseq	r5, r6, #1073741824	; 0x40000000
    7154:	01000028 	tsteq	r0, r8, lsr #32
    7158:	004c01a6 	subeq	r0, ip, r6, lsr #3
    715c:	37110000 	ldrcc	r0, [r1, -r0]
    7160:	83160000 	tsthi	r6, #0
    7164:	01000027 	tsteq	r0, r7, lsr #32
    7168:	004c01a6 	subeq	r0, ip, r6, lsr #3
    716c:	37300000 	ldrcc	r0, [r0, -r0]!
    7170:	bb160000 	bllt	587178 <__Stack_Size+0x586d78>
    7174:	0100002c 	tsteq	r0, ip, lsr #32
    7178:	004c01a6 	subeq	r0, ip, r6, lsr #3
    717c:	37910000 	ldrcc	r0, [r1, r0]
    7180:	20000000 	andcs	r0, r0, r0
    7184:	000029a8 	andeq	r2, r0, r8, lsr #19
    7188:	d8020001 	stmdale	r2, {r0}
    718c:	68080053 	stmdavs	r8, {r0, r1, r4, r6}
    7190:	01000000 	mrseq	r0, (UNDEF: 0)
    7194:	00087c9c 	muleq	r8, ip, ip
    7198:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    719c:	00010000 	andeq	r0, r1, r0
    71a0:	0004ac02 	andeq	sl, r4, r2, lsl #24
    71a4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    71a8:	000029d7 	ldrdeq	r2, [r0], -r7
    71ac:	4b020001 	blmi	871b8 <__Stack_Size+0x86db8>
    71b0:	c6000007 	strgt	r0, [r0], -r7
    71b4:	16000037 			; <UNDEFINED> instruction: 0x16000037
    71b8:	00002802 	andeq	r2, r0, r2, lsl #16
    71bc:	4c020201 	sfmmi	f0, 4, [r2], {1}
    71c0:	e7000000 	str	r0, [r0, -r0]
    71c4:	16000037 			; <UNDEFINED> instruction: 0x16000037
    71c8:	00002783 	andeq	r2, r0, r3, lsl #15
    71cc:	4c020201 	sfmmi	f0, 4, [r2], {1}
    71d0:	06000000 	streq	r0, [r0], -r0
    71d4:	16000038 			; <UNDEFINED> instruction: 0x16000038
    71d8:	00002cbb 			; <UNDEFINED> instruction: 0x00002cbb
    71dc:	4c020201 	sfmmi	f0, 4, [r2], {1}
    71e0:	30000000 	andcc	r0, r0, r0
    71e4:	00000038 	andeq	r0, r0, r8, lsr r0
    71e8:	002b8820 	eoreq	r8, fp, r0, lsr #16
    71ec:	02d10100 	sbcseq	r0, r1, #0, 2
    71f0:	08005440 	stmdaeq	r0, {r6, sl, ip, lr}
    71f4:	00000022 	andeq	r0, r0, r2, lsr #32
    71f8:	08af9c01 	stmiaeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    71fc:	16140000 	ldrne	r0, [r4], -r0
    7200:	01000026 	tsteq	r0, r6, lsr #32
    7204:	04ac02d1 	strteq	r0, [ip], #721	; 0x2d1
    7208:	50010000 	andpl	r0, r1, r0
    720c:	00277014 	eoreq	r7, r7, r4, lsl r0
    7210:	02d10100 	sbcseq	r0, r1, #0, 2
    7214:	000008af 	andeq	r0, r0, pc, lsr #17
    7218:	12005101 	andne	r5, r0, #1073741824	; 0x40000000
    721c:	00046f04 	andeq	r6, r4, r4, lsl #30
    7220:	0ae72000 	beq	ff9cf228 <SCS_BASE+0x1f9c1228>
    7224:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    7228:	00546202 	subseq	r6, r4, r2, lsl #4
    722c:	00001208 	andeq	r1, r0, r8, lsl #4
    7230:	da9c0100 	ble	fe707638 <SCS_BASE+0x1e6f9638>
    7234:	14000008 	strne	r0, [r0], #-8
    7238:	000027dc 	ldrdeq	r2, [r0], -ip
    723c:	e802ee01 	stmda	r2, {r0, r9, sl, fp, sp, lr, pc}
    7240:	01000006 	tsteq	r0, r6
    7244:	bf200050 	svclt	0x00200050
    7248:	0100000c 	tsteq	r0, ip
    724c:	54740300 	ldrbtpl	r0, [r4], #-768	; 0x300
    7250:	00140800 	andseq	r0, r4, r0, lsl #16
    7254:	9c010000 	stcls	0, cr0, [r1], {-0}
    7258:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    725c:	0029d714 	eoreq	sp, r9, r4, lsl r7
    7260:	03000100 	movweq	r0, #256	; 0x100
    7264:	0000074b 	andeq	r0, r0, fp, asr #14
    7268:	20005001 	andcs	r5, r0, r1
    726c:	0000248e 	andeq	r2, r0, lr, lsl #9
    7270:	88031501 	stmdahi	r3, {r0, r8, sl, ip}
    7274:	10080054 	andne	r0, r8, r4, asr r0
    7278:	01000000 	mrseq	r0, (UNDEF: 0)
    727c:	0009249c 	muleq	r9, ip, r4
    7280:	29561400 	ldmdbcs	r6, {sl, ip}^
    7284:	15010000 	strne	r0, [r1, #-0]
    7288:	00092403 	andeq	r2, r9, r3, lsl #8
    728c:	00500100 	subseq	r0, r0, r0, lsl #2
    7290:	04070412 	streq	r0, [r7], #-1042	; 0x412
    7294:	60200000 	eorvs	r0, r0, r0
    7298:	0100002c 	tsteq	r0, ip, lsr #32
    729c:	54980327 	ldrpl	r0, [r8], #807	; 0x327
    72a0:	00120800 	andseq	r0, r2, r0, lsl #16
    72a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    72a8:	0000094f 	andeq	r0, r0, pc, asr #18
    72ac:	00277014 	eoreq	r7, r7, r4, lsl r0
    72b0:	03270100 			; <UNDEFINED> instruction: 0x03270100
    72b4:	000008af 	andeq	r0, r0, pc, lsr #17
    72b8:	20005001 	andcs	r5, r0, r1
    72bc:	00000d73 	andeq	r0, r0, r3, ror sp
    72c0:	aa033c01 	bge	d62cc <__Stack_Size+0xd5ecc>
    72c4:	18080054 	stmdane	r8, {r2, r4, r6}
    72c8:	01000000 	mrseq	r0, (UNDEF: 0)
    72cc:	0009829c 	muleq	r9, ip, r2
    72d0:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    72d4:	3c010000 	stccc	0, cr0, [r1], {-0}
    72d8:	0004ac03 	andeq	sl, r4, r3, lsl #24
    72dc:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    72e0:	00001671 	andeq	r1, r0, r1, ror r6
    72e4:	cf033c01 	svcgt	0x00033c01
    72e8:	01000000 	mrseq	r0, (UNDEF: 0)
    72ec:	62200051 	eorvs	r0, r0, #81	; 0x51
    72f0:	0100002b 	tsteq	r0, fp, lsr #32
    72f4:	54c20357 	strbpl	r0, [r2], #855	; 0x357
    72f8:	001c0800 	andseq	r0, ip, r0, lsl #16
    72fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7300:	000009b5 			; <UNDEFINED> instruction: 0x000009b5
    7304:	00261614 	eoreq	r1, r6, r4, lsl r6
    7308:	03570100 	cmpeq	r7, #0, 2
    730c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7310:	71145001 	tstvc	r4, r1
    7314:	01000016 	tsteq	r0, r6, lsl r0
    7318:	00cf0357 	sbceq	r0, pc, r7, asr r3	; <UNPREDICTABLE>
    731c:	51010000 	mrspl	r0, (UNDEF: 1)
    7320:	0a4d2000 	beq	134f328 <__Stack_Size+0x134ef28>
    7324:	7d010000 	stcvc	0, cr0, [r1, #-0]
    7328:	0054de03 	subseq	sp, r4, r3, lsl #28
    732c:	00001208 	andeq	r1, r0, r8, lsl #4
    7330:	f89c0100 			; <UNDEFINED> instruction: 0xf89c0100
    7334:	14000009 	strne	r0, [r0], #-9
    7338:	00002616 	andeq	r2, r0, r6, lsl r6
    733c:	ac037d01 	stcge	13, cr7, [r3], {1}
    7340:	01000004 	tsteq	r0, r4
    7344:	2cc21550 	cfstr64cs	mvdx1, [r2], {80}	; 0x50
    7348:	7d010000 	stcvc	0, cr0, [r1, #-0]
    734c:	00004c03 	andeq	r4, r0, r3, lsl #24
    7350:	00385a00 	eorseq	r5, r8, r0, lsl #20
    7354:	16711400 	ldrbtne	r1, [r1], -r0, lsl #8
    7358:	7d010000 	stcvc	0, cr0, [r1, #-0]
    735c:	0000cf03 	andeq	ip, r0, r3, lsl #30
    7360:	00520100 	subseq	r0, r2, r0, lsl #2
    7364:	0028c020 	eoreq	ip, r8, r0, lsr #32
    7368:	03a00100 	moveq	r0, #0, 2
    736c:	080054f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, lr}
    7370:	00000004 	andeq	r0, r0, r4
    7374:	0a2b9c01 	beq	aee380 <__Stack_Size+0xaedf80>
    7378:	16140000 	ldrne	r0, [r4], -r0
    737c:	01000026 	tsteq	r0, r6, lsr #32
    7380:	04ac03a0 	strteq	r0, [ip], #928	; 0x3a0
    7384:	50010000 	andpl	r0, r1, r0
    7388:	002a4a14 	eoreq	r4, sl, r4, lsl sl
    738c:	03a00100 	moveq	r0, #0, 2
    7390:	0000004c 	andeq	r0, r0, ip, asr #32
    7394:	20005101 	andcs	r5, r0, r1, lsl #2
    7398:	0000272b 	andeq	r2, r0, fp, lsr #14
    739c:	f403bf01 			; <UNDEFINED> instruction: 0xf403bf01
    73a0:	08080054 	stmdaeq	r8, {r2, r4, r6}
    73a4:	01000000 	mrseq	r0, (UNDEF: 0)
    73a8:	000a6e9c 	muleq	sl, ip, lr
    73ac:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    73b0:	bf010000 	svclt	0x00010000
    73b4:	0004ac03 	andeq	sl, r4, r3, lsl #24
    73b8:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    73bc:	0000288b 	andeq	r2, r0, fp, lsl #17
    73c0:	4c03bf01 	stcmi	15, cr11, [r3], {1}
    73c4:	01000000 	mrseq	r0, (UNDEF: 0)
    73c8:	26d21551 			; <UNDEFINED> instruction: 0x26d21551
    73cc:	bf010000 	svclt	0x00010000
    73d0:	00004c03 	andeq	r4, r0, r3, lsl #24
    73d4:	00389400 	eorseq	r9, r8, r0, lsl #8
    73d8:	fc200000 	stc2	0, cr0, [r0], #-0
    73dc:	0100002b 	tsteq	r0, fp, lsr #32
    73e0:	54fc03dc 	ldrbtpl	r0, [ip], #988	; 0x3dc
    73e4:	00120800 	andseq	r0, r2, r0, lsl #16
    73e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    73ec:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    73f0:	00261614 	eoreq	r1, r6, r4, lsl r6
    73f4:	03dc0100 	bicseq	r0, ip, #0, 2
    73f8:	000004ac 	andeq	r0, r0, ip, lsr #9
    73fc:	f5155001 			; <UNDEFINED> instruction: 0xf5155001
    7400:	0100002c 	tsteq	r0, ip, lsr #32
    7404:	004c03dc 	ldrdeq	r0, [ip], #-60	; 0xffffffc4
    7408:	38b50000 	ldmcc	r5!, {}	; <UNPREDICTABLE>
    740c:	71140000 	tstvc	r4, r0
    7410:	01000016 	tsteq	r0, r6, lsl r0
    7414:	00cf03dc 	ldrdeq	r0, [pc], #60	; <UNPREDICTABLE>
    7418:	52010000 	andpl	r0, r1, #0
    741c:	2aaf2000 	bcs	febcf424 <SCS_BASE+0x1ebc1424>
    7420:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    7424:	00550e03 	subseq	r0, r5, r3, lsl #28
    7428:	00000e08 	andeq	r0, r0, r8, lsl #28
    742c:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    7430:	1400000a 	strne	r0, [r0], #-10
    7434:	00002616 	andeq	r2, r0, r6, lsl r6
    7438:	ac03f801 	stcge	8, cr15, [r3], {1}
    743c:	01000004 	tsteq	r0, r4
    7440:	0f200050 	svceq	0x00200050
    7444:	01000027 	tsteq	r0, r7, lsr #32
    7448:	551c040e 	ldrpl	r0, [ip, #-1038]	; 0x40e
    744c:	001a0800 	andseq	r0, sl, r0, lsl #16
    7450:	9c010000 	stcls	0, cr0, [r1], {-0}
    7454:	00000b3f 	andeq	r0, r0, pc, lsr fp
    7458:	00261614 	eoreq	r1, r6, r4, lsl r6
    745c:	040e0100 	streq	r0, [lr], #-256	; 0x100
    7460:	000004ac 	andeq	r0, r0, ip, lsr #9
    7464:	50155001 	andspl	r5, r5, r1
    7468:	01000025 	tsteq	r0, r5, lsr #32
    746c:	004c040e 	subeq	r0, ip, lr, lsl #8
    7470:	38ef0000 	stmiacc	pc!, {}^	; <UNPREDICTABLE>
    7474:	7a210000 	bvc	84747c <__Stack_Size+0x84707c>
    7478:	1c000004 	stcne	0, cr0, [r0], {4}
    747c:	0e080055 	mcreq	0, 0, r0, cr8, cr5, {2}
    7480:	01000000 	mrseq	r0, (UNDEF: 0)
    7484:	93220415 			; <UNDEFINED> instruction: 0x93220415
    7488:	ef000004 	svc	0x00000004
    748c:	23000038 	movwcs	r0, #56	; 0x38
    7490:	00000487 	andeq	r0, r0, r7, lsl #9
    7494:	1c245001 	stcne	0, cr5, [r4], #-4
    7498:	0e080055 	mcreq	0, 0, r0, cr8, cr5, {2}
    749c:	25000000 	strcs	r0, [r0, #-0]
    74a0:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    74a4:	00003910 	andeq	r3, r0, r0, lsl r9
    74a8:	20000000 	andcs	r0, r0, r0
    74ac:	00002ba7 	andeq	r2, r0, r7, lsr #23
    74b0:	36042d01 	strcc	r2, [r4], -r1, lsl #26
    74b4:	34080055 	strcc	r0, [r8], #-85	; 0x55
    74b8:	01000000 	mrseq	r0, (UNDEF: 0)
    74bc:	000bee9c 	muleq	fp, ip, lr
    74c0:	26161500 	ldrcs	r1, [r6], -r0, lsl #10
    74c4:	2d010000 	stccs	0, cr0, [r1, #-0]
    74c8:	0004ac04 	andeq	sl, r4, r4, lsl #24
    74cc:	00394500 	eorseq	r4, r9, r0, lsl #10
    74d0:	29141500 	ldmdbcs	r4, {r8, sl, ip}
    74d4:	2d010000 	stccs	0, cr0, [r1, #-0]
    74d8:	00004c04 	andeq	r4, r0, r4, lsl #24
    74dc:	00397900 	eorseq	r7, r9, r0, lsl #18
    74e0:	2b531500 	blcs	14cc8e8 <__Stack_Size+0x14cc4e8>
    74e4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    74e8:	00004c04 	andeq	r4, r0, r4, lsl #24
    74ec:	00399a00 	eorseq	r9, r9, r0, lsl #20
    74f0:	2cec1500 	cfstr64cs	mvdx1, [ip]
    74f4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    74f8:	00004c04 	andeq	r4, r0, r4, lsl #24
    74fc:	0039bb00 	eorseq	fp, r9, r0, lsl #22
    7500:	047a2600 	ldrbteq	r2, [sl], #-1536	; 0x600
    7504:	55500000 	ldrbpl	r0, [r0, #-0]
    7508:	000e0800 	andeq	r0, lr, r0, lsl #16
    750c:	41010000 	mrsmi	r0, (UNDEF: 1)
    7510:	000bcb04 	andeq	ip, fp, r4, lsl #22
    7514:	04932300 	ldreq	r2, [r3], #768	; 0x300
    7518:	55010000 	strpl	r0, [r1, #-0]
    751c:	00048723 	andeq	r8, r4, r3, lsr #14
    7520:	24540100 	ldrbcs	r0, [r4], #-256	; 0x100
    7524:	08005550 	stmdaeq	r0, {r4, r6, r8, sl, ip, lr}
    7528:	0000000e 	andeq	r0, r0, lr
    752c:	00049f25 	andeq	r9, r4, r5, lsr #30
    7530:	0039f500 	eorseq	pc, r9, r0, lsl #10
    7534:	1a000000 	bne	753c <__Stack_Size+0x713c>
    7538:	0800554a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip, lr}
    753c:	00000527 	andeq	r0, r0, r7, lsr #10
    7540:	00000be4 	andeq	r0, r0, r4, ror #23
    7544:	0152011b 	cmpeq	r2, fp, lsl r1
    7548:	50011b31 	andpl	r1, r1, r1, lsr fp
    754c:	00007402 	andeq	r7, r0, r2, lsl #8
    7550:	00555027 	subseq	r5, r5, r7, lsr #32
    7554:	0004b208 	andeq	fp, r4, r8, lsl #4
    7558:	1b200000 	blne	807560 <__Stack_Size+0x807160>
    755c:	0100002a 	tsteq	r0, sl, lsr #32
    7560:	556a04b1 	strbpl	r0, [sl, #-1201]!	; 0x4b1
    7564:	00140800 	andseq	r0, r4, r0, lsl #16
    7568:	9c010000 	stcls	0, cr0, [r1], {-0}
    756c:	00000c51 	andeq	r0, r0, r1, asr ip
    7570:	00261614 	eoreq	r1, r6, r4, lsl r6
    7574:	04b10100 	ldrteq	r0, [r1], #256	; 0x100
    7578:	000004ac 	andeq	r0, r0, ip, lsr #9
    757c:	67155001 	ldrvs	r5, [r5, -r1]
    7580:	01000025 	tsteq	r0, r5, lsr #32
    7584:	004c04b1 	strheq	r0, [ip], #-65	; 0xffffffbf
    7588:	3a1f0000 	bcc	7c7590 <__Stack_Size+0x7c7190>
    758c:	99140000 	ldmdbls	r4, {}	; <UNPREDICTABLE>
    7590:	0100002c 	tsteq	r0, ip, lsr #32
    7594:	004c04b1 	strheq	r0, [ip], #-65	; 0xffffffbf
    7598:	52010000 	andpl	r0, r1, #0
    759c:	0029e815 	eoreq	lr, r9, r5, lsl r8
    75a0:	04b20100 	ldrteq	r0, [r2], #256	; 0x100
    75a4:	0000004c 	andeq	r0, r0, ip, asr #32
    75a8:	00003a40 	andeq	r3, r0, r0, asr #20
    75ac:	0025fc16 	eoreq	pc, r5, r6, lsl ip	; <UNPREDICTABLE>
    75b0:	04b40100 	ldrteq	r0, [r4], #256	; 0x100
    75b4:	0000004c 	andeq	r0, r0, ip, asr #32
    75b8:	00003a61 	andeq	r3, r0, r1, ror #20
    75bc:	2b072000 	blcs	1cf5c4 <__Stack_Size+0x1cf1c4>
    75c0:	5b010000 	blpl	475c8 <__Stack_Size+0x471c8>
    75c4:	00557e04 	subseq	r7, r5, r4, lsl #28
    75c8:	00001a08 	andeq	r1, r0, r8, lsl #20
    75cc:	c89c0100 	ldmgt	ip, {r8}
    75d0:	1500000c 	strne	r0, [r0, #-12]
    75d4:	00002616 	andeq	r2, r0, r6, lsl r6
    75d8:	ac045b01 	stcge	11, cr5, [r4], {1}
    75dc:	90000004 	andls	r0, r0, r4
    75e0:	1500003a 	strne	r0, [r0, #-58]	; 0x3a
    75e4:	00002567 	andeq	r2, r0, r7, ror #10
    75e8:	4c045b01 	stcmi	11, cr5, [r4], {1}
    75ec:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    75f0:	1500003a 	strne	r0, [r0, #-58]	; 0x3a
    75f4:	00002c99 	muleq	r0, r9, ip
    75f8:	4c045b01 	stcmi	11, cr5, [r4], {1}
    75fc:	cf000000 	svcgt	0x00000000
    7600:	1500003a 	strne	r0, [r0, #-58]	; 0x3a
    7604:	000029e8 	andeq	r2, r0, r8, ror #19
    7608:	4c045c01 	stcmi	12, cr5, [r4], {1}
    760c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    7610:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    7614:	000025fc 	strdeq	r2, [r0], -ip
    7618:	4c045e01 	stcmi	14, cr5, [r4], {1}
    761c:	11000000 	mrsne	r0, (UNDEF: 0)
    7620:	2800003b 	stmdacs	r0, {r0, r1, r3, r4, r5}
    7624:	08005586 	stmdaeq	r0, {r1, r2, r7, r8, sl, ip, lr}
    7628:	00000bee 	andeq	r0, r0, lr, ror #23
    762c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    7630:	00000074 	andeq	r0, r0, r4, ror r0
    7634:	00267f20 	eoreq	r7, r6, r0, lsr #30
    7638:	048d0100 	streq	r0, [sp], #256	; 0x100
    763c:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
    7640:	00000014 	andeq	r0, r0, r4, lsl r0
    7644:	0d2f9c01 	stceq	12, cr9, [pc, #-4]!	; 7648 <__Stack_Size+0x7248>
    7648:	16150000 	ldrne	r0, [r5], -r0
    764c:	01000026 	tsteq	r0, r6, lsr #32
    7650:	04ac048d 	strteq	r0, [ip], #1165	; 0x48d
    7654:	3b4e0000 	blcc	138765c <__Stack_Size+0x138725c>
    7658:	67150000 	ldrvs	r0, [r5, -r0]
    765c:	01000025 	tsteq	r0, r5, lsr #32
    7660:	004c048d 	subeq	r0, ip, sp, lsl #9
    7664:	3b6c0000 	blcc	1b0766c <__Stack_Size+0x1b0726c>
    7668:	99150000 	ldmdbls	r5, {}	; <UNPREDICTABLE>
    766c:	0100002c 	tsteq	r0, ip, lsr #32
    7670:	004c048e 	subeq	r0, ip, lr, lsl #9
    7674:	3b8d0000 	blcc	fe34767c <SCS_BASE+0x1e33967c>
    7678:	e8150000 	ldmda	r5, {}	; <UNPREDICTABLE>
    767c:	01000029 	tsteq	r0, r9, lsr #32
    7680:	004c048e 	subeq	r0, ip, lr, lsl #9
    7684:	3bae0000 	blcc	feb8768c <SCS_BASE+0x1eb7968c>
    7688:	a0280000 	eorge	r0, r8, r0
    768c:	ee080055 	mcr	0, 0, r0, cr8, cr5, {2}
    7690:	1b00000b 	blne	76c4 <__Stack_Size+0x72c4>
    7694:	74025001 	strvc	r5, [r2], #-1
    7698:	20000000 	andcs	r0, r0, r0
    769c:	00000dd5 	ldrdeq	r0, [r0], -r5
    76a0:	ac04d601 	stcge	6, cr13, [r4], {1}
    76a4:	06080055 			; <UNDEFINED> instruction: 0x06080055
    76a8:	01000000 	mrseq	r0, (UNDEF: 0)
    76ac:	000d709c 	muleq	sp, ip, r0
    76b0:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    76b4:	d6010000 	strle	r0, [r1], -r0
    76b8:	0004ac04 	andeq	sl, r4, r4, lsl #24
    76bc:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    76c0:	00002ad1 	ldrdeq	r2, [r0], -r1
    76c4:	4c04d601 	stcmi	6, cr13, [r4], {1}
    76c8:	01000000 	mrseq	r0, (UNDEF: 0)
    76cc:	285d1451 	ldmdacs	sp, {r0, r4, r6, sl, ip}^
    76d0:	d6010000 	strle	r0, [r1], -r0
    76d4:	00004c04 	andeq	r4, r0, r4, lsl #24
    76d8:	00520100 	subseq	r0, r2, r0, lsl #2
    76dc:	00297220 	eoreq	r7, r9, r0, lsr #4
    76e0:	04f20100 	ldrbteq	r0, [r2], #256	; 0x100
    76e4:	080055b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, ip, lr}
    76e8:	00000010 	andeq	r0, r0, r0, lsl r0
    76ec:	0db59c01 	ldceq	12, cr9, [r5, #4]!
    76f0:	16140000 	ldrne	r0, [r4], -r0
    76f4:	01000026 	tsteq	r0, r6, lsr #32
    76f8:	04ac04f2 	strteq	r0, [ip], #1266	; 0x4f2
    76fc:	50010000 	andpl	r0, r1, r0
    7700:	00064515 	andeq	r4, r6, r5, lsl r5
    7704:	04f20100 	ldrbteq	r0, [r2], #256	; 0x100
    7708:	0000004c 	andeq	r0, r0, ip, asr #32
    770c:	00003bcf 	andeq	r3, r0, pc, asr #23
    7710:	00266c16 	eoreq	r6, r6, r6, lsl ip
    7714:	04f40100 	ldrbteq	r0, [r4], #256	; 0x100
    7718:	0000004c 	andeq	r0, r0, ip, asr #32
    771c:	00003bf0 	strdeq	r3, [r0], -r0
    7720:	047a2900 	ldrbteq	r2, [sl], #-2304	; 0x900
    7724:	55c20000 	strbpl	r0, [r2]
    7728:	00100800 	andseq	r0, r0, r0, lsl #16
    772c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7730:	00000de2 	andeq	r0, r0, r2, ror #27
    7734:	00048723 	andeq	r8, r4, r3, lsr #14
    7738:	22500100 	subscs	r0, r0, #0, 2
    773c:	00000493 	muleq	r0, r3, r4
    7740:	00003c25 	andeq	r3, r0, r5, lsr #24
    7744:	00049f25 	andeq	r9, r4, r5, lsr #30
    7748:	003c4600 	eorseq	r4, ip, r0, lsl #12
    774c:	e6200000 	strt	r0, [r0], -r0
    7750:	01000028 	tsteq	r0, r8, lsr #32
    7754:	55d20545 	ldrbpl	r0, [r2, #1349]	; 0x545
    7758:	003c0800 	eorseq	r0, ip, r0, lsl #16
    775c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7760:	00000e67 	andeq	r0, r0, r7, ror #28
    7764:	00261614 	eoreq	r1, r6, r4, lsl r6
    7768:	05450100 	strbeq	r0, [r5, #-256]	; 0x100
    776c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7770:	31155001 	tstcc	r5, r1
    7774:	01000028 	tsteq	r0, r8, lsr #32
    7778:	004c0545 	subeq	r0, ip, r5, asr #10
    777c:	3c7b0000 	ldclcc	0, cr0, [fp], #-0
    7780:	ec150000 	ldc	0, cr0, [r5], {-0}
    7784:	01000025 	tsteq	r0, r5, lsr #32
    7788:	004c0546 	subeq	r0, ip, r6, asr #10
    778c:	3c9c0000 	ldccc	0, cr0, [ip], {0}
    7790:	2c150000 	ldccs	0, cr0, [r5], {-0}
    7794:	01000026 	tsteq	r0, r6, lsr #32
    7798:	004c0546 	subeq	r0, ip, r6, asr #10
    779c:	3cbd0000 	ldccc	0, cr0, [sp]
    77a0:	fc160000 	ldc2	0, cr0, [r6], {-0}
    77a4:	01000025 	tsteq	r0, r5, lsr #32
    77a8:	004c0548 	subeq	r0, ip, r8, asr #10
    77ac:	3cde0000 	ldclcc	0, cr0, [lr], {0}
    77b0:	5a160000 	bpl	5877b8 <__Stack_Size+0x5873b8>
    77b4:	0100002a 	tsteq	r0, sl, lsr #32
    77b8:	004c0549 	subeq	r0, ip, r9, asr #10
    77bc:	3d130000 	ldccc	0, cr0, [r3, #-0]
    77c0:	83160000 	tsthi	r6, #0
    77c4:	01000027 	tsteq	r0, r7, lsr #32
    77c8:	004c054a 	subeq	r0, ip, sl, asr #10
    77cc:	3d3d0000 	ldccc	0, cr0, [sp, #-0]
    77d0:	20000000 	andcs	r0, r0, r0
    77d4:	00002c07 	andeq	r2, r0, r7, lsl #24
    77d8:	0e057f01 	cdpeq	15, 0, cr7, cr5, cr1, {0}
    77dc:	10080056 	andne	r0, r8, r6, asr r0
    77e0:	01000000 	mrseq	r0, (UNDEF: 0)
    77e4:	000eac9c 	muleq	lr, ip, ip
    77e8:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    77ec:	7f010000 	svcvc	0x00010000
    77f0:	0004ac05 	andeq	sl, r4, r5, lsl #24
    77f4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    77f8:	0000261b 	andeq	r2, r0, fp, lsl r6
    77fc:	4c057f01 	stcmi	15, cr7, [r5], {1}
    7800:	67000000 	strvs	r0, [r0, -r0]
    7804:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    7808:	00002a5a 	andeq	r2, r0, sl, asr sl
    780c:	4c058101 	stfmid	f0, [r5], {1}
    7810:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7814:	0000003d 	andeq	r0, r0, sp, lsr r0
    7818:	0025a520 	eoreq	sl, r5, r0, lsr #10
    781c:	05a10100 	streq	r0, [r1, #256]!	; 0x100
    7820:	0800561e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, ip, lr}
    7824:	00000014 	andeq	r0, r0, r4, lsl r0
    7828:	0ef19c01 	cdpeq	12, 15, cr9, cr1, cr1, {0}
    782c:	16140000 	ldrne	r0, [r4], -r0
    7830:	01000026 	tsteq	r0, r6, lsr #32
    7834:	04ac05a1 	strteq	r0, [ip], #1441	; 0x5a1
    7838:	50010000 	andpl	r0, r1, r0
    783c:	00261b15 	eoreq	r1, r6, r5, lsl fp
    7840:	05a10100 	streq	r0, [r1, #256]!	; 0x100
    7844:	0000004c 	andeq	r0, r0, ip, asr #32
    7848:	00003dbd 			; <UNDEFINED> instruction: 0x00003dbd
    784c:	002a5a16 	eoreq	r5, sl, r6, lsl sl
    7850:	05a30100 	streq	r0, [r3, #256]!	; 0x100
    7854:	0000004c 	andeq	r0, r0, ip, asr #32
    7858:	00003dde 	ldrdeq	r3, [r0], -lr
    785c:	2cc92000 	stclcs	0, cr2, [r9], {0}
    7860:	c3010000 	movwgt	r0, #4096	; 0x1000
    7864:	00563205 	subseq	r3, r6, r5, lsl #4
    7868:	00001008 	andeq	r1, r0, r8
    786c:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    7870:	1400000f 	strne	r0, [r0], #-15
    7874:	00002616 	andeq	r2, r0, r6, lsl r6
    7878:	ac05c301 	stcge	3, cr12, [r5], {1}
    787c:	01000004 	tsteq	r0, r4
    7880:	261b1550 			; <UNDEFINED> instruction: 0x261b1550
    7884:	c3010000 	movwgt	r0, #4096	; 0x1000
    7888:	00004c05 	andeq	r4, r0, r5, lsl #24
    788c:	003e1300 	eorseq	r1, lr, r0, lsl #6
    7890:	2a631600 	bcs	18cd098 <__Stack_Size+0x18ccc98>
    7894:	c5010000 	strgt	r0, [r1, #-0]
    7898:	00004c05 	andeq	r4, r0, r5, lsl #24
    789c:	003e3400 	eorseq	r3, lr, r0, lsl #8
    78a0:	b4200000 	strtlt	r0, [r0], #-0
    78a4:	01000029 	tsteq	r0, r9, lsr #32
    78a8:	564205e5 	strbpl	r0, [r2], -r5, ror #11
    78ac:	00140800 	andseq	r0, r4, r0, lsl #16
    78b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    78b4:	00000f7b 	andeq	r0, r0, fp, ror pc
    78b8:	00261614 	eoreq	r1, r6, r4, lsl r6
    78bc:	05e50100 	strbeq	r0, [r5, #256]!	; 0x100
    78c0:	000004ac 	andeq	r0, r0, ip, lsr #9
    78c4:	1b155001 	blne	55b8d0 <__Stack_Size+0x55b4d0>
    78c8:	01000026 	tsteq	r0, r6, lsr #32
    78cc:	004c05e5 	subeq	r0, ip, r5, ror #11
    78d0:	3e690000 	cdpcc	0, 6, cr0, cr9, cr0, {0}
    78d4:	63160000 	tstvs	r6, #0
    78d8:	0100002a 	tsteq	r0, sl, lsr #32
    78dc:	004c05e7 	subeq	r0, ip, r7, ror #11
    78e0:	3e8a0000 	cdpcc	0, 8, cr0, cr10, cr0, {0}
    78e4:	20000000 	andcs	r0, r0, r0
    78e8:	00002739 	andeq	r2, r0, r9, lsr r7
    78ec:	56060201 	strpl	r0, [r6], -r1, lsl #4
    78f0:	18080056 	stmdane	r8, {r1, r2, r4, r6}
    78f4:	01000000 	mrseq	r0, (UNDEF: 0)
    78f8:	000fae9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    78fc:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    7900:	02010000 	andeq	r0, r1, #0
    7904:	0004ac06 	andeq	sl, r4, r6, lsl #24
    7908:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    790c:	00001671 	andeq	r1, r0, r1, ror r6
    7910:	cf060201 	svcgt	0x00060201
    7914:	01000000 	mrseq	r0, (UNDEF: 0)
    7918:	78200051 	stmdavc	r0!, {r0, r4, r6}
    791c:	0100002a 	tsteq	r0, sl, lsr #32
    7920:	566e061d 			; <UNDEFINED> instruction: 0x566e061d
    7924:	00180800 	andseq	r0, r8, r0, lsl #16
    7928:	9c010000 	stcls	0, cr0, [r1], {-0}
    792c:	00000fe1 	andeq	r0, r0, r1, ror #31
    7930:	00261614 	eoreq	r1, r6, r4, lsl r6
    7934:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
    7938:	000004ac 	andeq	r0, r0, ip, lsr #9
    793c:	71145001 	tstvc	r4, r1
    7940:	01000016 	tsteq	r0, r6, lsl r0
    7944:	00cf061d 	sbceq	r0, pc, sp, lsl r6	; <UNPREDICTABLE>
    7948:	51010000 	mrspl	r0, (UNDEF: 1)
    794c:	25d12000 	ldrbcs	r2, [r1]
    7950:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7954:	00568606 	subseq	r8, r6, r6, lsl #12
    7958:	00001808 	andeq	r1, r0, r8, lsl #16
    795c:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    7960:	14000010 	strne	r0, [r0], #-16
    7964:	00002616 	andeq	r2, r0, r6, lsl r6
    7968:	ac063901 	stcge	9, cr3, [r6], {1}
    796c:	01000004 	tsteq	r0, r4
    7970:	16711450 			; <UNDEFINED> instruction: 0x16711450
    7974:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7978:	0000cf06 	andeq	ip, r0, r6, lsl #30
    797c:	00510100 	subseq	r0, r1, r0, lsl #2
    7980:	002a8620 	eoreq	r8, sl, r0, lsr #12
    7984:	06550100 	ldrbeq	r0, [r5], -r0, lsl #2
    7988:	0800569e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip, lr}
    798c:	00000018 	andeq	r0, r0, r8, lsl r0
    7990:	10479c01 	subne	r9, r7, r1, lsl #24
    7994:	16140000 	ldrne	r0, [r4], -r0
    7998:	01000026 	tsteq	r0, r6, lsr #32
    799c:	04ac0655 	strteq	r0, [ip], #1621	; 0x655
    79a0:	50010000 	andpl	r0, r1, r0
    79a4:	00167114 	andseq	r7, r6, r4, lsl r1
    79a8:	06550100 	ldrbeq	r0, [r5], -r0, lsl #2
    79ac:	000000cf 	andeq	r0, r0, pc, asr #1
    79b0:	20005101 	andcs	r5, r0, r1, lsl #2
    79b4:	000001d4 	ldrdeq	r0, [r0], -r4
    79b8:	b6067401 	strlt	r7, [r6], -r1, lsl #8
    79bc:	10080056 	andne	r0, r8, r6, asr r0
    79c0:	01000000 	mrseq	r0, (UNDEF: 0)
    79c4:	00108c9c 	mulseq	r0, ip, ip
    79c8:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    79cc:	74010000 	strvc	r0, [r1], #-0
    79d0:	0004ac06 	andeq	sl, r4, r6, lsl #24
    79d4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    79d8:	000024eb 	andeq	r2, r0, fp, ror #9
    79dc:	4c067401 	cfstrsmi	mvf7, [r6], {1}
    79e0:	bf000000 	svclt	0x00000000
    79e4:	1600003e 			; <UNDEFINED> instruction: 0x1600003e
    79e8:	00002a5a 	andeq	r2, r0, sl, asr sl
    79ec:	4c067601 	stcmi	6, cr7, [r6], {1}
    79f0:	e0000000 	and	r0, r0, r0
    79f4:	0000003e 	andeq	r0, r0, lr, lsr r0
    79f8:	00259020 	eoreq	r9, r5, r0, lsr #32
    79fc:	06950100 	ldreq	r0, [r5], r0, lsl #2
    7a00:	080056c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, ip, lr}
    7a04:	00000014 	andeq	r0, r0, r4, lsl r0
    7a08:	10d19c01 	sbcsne	r9, r1, r1, lsl #24
    7a0c:	16140000 	ldrne	r0, [r4], -r0
    7a10:	01000026 	tsteq	r0, r6, lsr #32
    7a14:	04ac0695 	strteq	r0, [ip], #1685	; 0x695
    7a18:	50010000 	andpl	r0, r1, r0
    7a1c:	0024eb15 	eoreq	lr, r4, r5, lsl fp
    7a20:	06950100 	ldreq	r0, [r5], r0, lsl #2
    7a24:	0000004c 	andeq	r0, r0, ip, asr #32
    7a28:	00003f15 	andeq	r3, r0, r5, lsl pc
    7a2c:	002a5a16 	eoreq	r5, sl, r6, lsl sl
    7a30:	06970100 	ldreq	r0, [r7], r0, lsl #2
    7a34:	0000004c 	andeq	r0, r0, ip, asr #32
    7a38:	00003f36 	andeq	r3, r0, r6, lsr pc
    7a3c:	24f92000 	ldrbtcs	r2, [r9], #0
    7a40:	b6010000 	strlt	r0, [r1], -r0
    7a44:	0056da06 	subseq	sp, r6, r6, lsl #20
    7a48:	00001008 	andeq	r1, r0, r8
    7a4c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    7a50:	14000011 	strne	r0, [r0], #-17
    7a54:	00002616 	andeq	r2, r0, r6, lsl r6
    7a58:	ac06b601 	stcge	6, cr11, [r6], {1}
    7a5c:	01000004 	tsteq	r0, r4
    7a60:	24eb1550 	strbtcs	r1, [fp], #1360	; 0x550
    7a64:	b6010000 	strlt	r0, [r1], -r0
    7a68:	00004c06 	andeq	r4, r0, r6, lsl #24
    7a6c:	003f6b00 	eorseq	r6, pc, r0, lsl #22
    7a70:	2a631600 	bcs	18cd278 <__Stack_Size+0x18cce78>
    7a74:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    7a78:	00004c06 	andeq	r4, r0, r6, lsl #24
    7a7c:	003f8c00 	eorseq	r8, pc, r0, lsl #24
    7a80:	9f200000 	svcls	0x00200000
    7a84:	01000024 	tsteq	r0, r4, lsr #32
    7a88:	56ea06d7 	usatpl	r0, #10, r7, asr #13
    7a8c:	00140800 	andseq	r0, r4, r0, lsl #16
    7a90:	9c010000 	stcls	0, cr0, [r1], {-0}
    7a94:	0000115b 	andeq	r1, r0, fp, asr r1
    7a98:	00261614 	eoreq	r1, r6, r4, lsl r6
    7a9c:	06d70100 	ldrbeq	r0, [r7], r0, lsl #2
    7aa0:	000004ac 	andeq	r0, r0, ip, lsr #9
    7aa4:	eb155001 	bl	55bab0 <__Stack_Size+0x55b6b0>
    7aa8:	01000024 	tsteq	r0, r4, lsr #32
    7aac:	004c06d7 	ldrdeq	r0, [ip], #-103	; 0xffffff99
    7ab0:	3fc10000 	svccc	0x00c10000
    7ab4:	63160000 	tstvs	r6, #0
    7ab8:	0100002a 	tsteq	r0, sl, lsr #32
    7abc:	004c06d9 	ldrdeq	r0, [ip], #-105	; 0xffffff97
    7ac0:	3fe20000 	svccc	0x00e20000
    7ac4:	20000000 	andcs	r0, r0, r0
    7ac8:	00002a09 	andeq	r2, r0, r9, lsl #20
    7acc:	fe06f701 	cdp2	7, 0, cr15, cr6, cr1, {0}
    7ad0:	10080056 	andne	r0, r8, r6, asr r0
    7ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    7ad8:	0011a09c 	mulseq	r1, ip, r0
    7adc:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    7ae0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    7ae4:	0004ac06 	andeq	sl, r4, r6, lsl #24
    7ae8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7aec:	0000252b 	andeq	r2, r0, fp, lsr #10
    7af0:	4c06f701 	stcmi	7, cr15, [r6], {1}
    7af4:	17000000 	strne	r0, [r0, -r0]
    7af8:	16000040 	strne	r0, [r0], -r0, asr #32
    7afc:	00002a5a 	andeq	r2, r0, sl, asr sl
    7b00:	4c06f901 	stcmi	9, cr15, [r6], {1}
    7b04:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7b08:	00000040 	andeq	r0, r0, r0, asr #32
    7b0c:	0027a020 	eoreq	sl, r7, r0, lsr #32
    7b10:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    7b14:	0800570e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip, lr}
    7b18:	00000014 	andeq	r0, r0, r4, lsl r0
    7b1c:	11e59c01 	mvnne	r9, r1, lsl #24
    7b20:	16140000 	ldrne	r0, [r4], -r0
    7b24:	01000026 	tsteq	r0, r6, lsr #32
    7b28:	04ac0718 	strteq	r0, [ip], #1816	; 0x718
    7b2c:	50010000 	andpl	r0, r1, r0
    7b30:	00252b15 	eoreq	r2, r5, r5, lsl fp
    7b34:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    7b38:	0000004c 	andeq	r0, r0, ip, asr #32
    7b3c:	0000406d 	andeq	r4, r0, sp, rrx
    7b40:	002a5a16 	eoreq	r5, sl, r6, lsl sl
    7b44:	071a0100 	ldreq	r0, [sl, -r0, lsl #2]
    7b48:	0000004c 	andeq	r0, r0, ip, asr #32
    7b4c:	0000408e 	andeq	r4, r0, lr, lsl #1
    7b50:	26042000 	strcs	r2, [r4], -r0
    7b54:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7b58:	00572207 	subseq	r2, r7, r7, lsl #4
    7b5c:	00001008 	andeq	r1, r0, r8
    7b60:	2a9c0100 	bcs	fe707f68 <SCS_BASE+0x1e6f9f68>
    7b64:	14000012 	strne	r0, [r0], #-18
    7b68:	00002616 	andeq	r2, r0, r6, lsl r6
    7b6c:	ac073901 	stcge	9, cr3, [r7], {1}
    7b70:	01000004 	tsteq	r0, r4
    7b74:	252b1550 	strcs	r1, [fp, #-1360]!	; 0x550
    7b78:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    7b7c:	00004c07 	andeq	r4, r0, r7, lsl #24
    7b80:	0040c300 	subeq	ip, r0, r0, lsl #6
    7b84:	2a631600 	bcs	18cd38c <__Stack_Size+0x18ccf8c>
    7b88:	3b010000 	blcc	47b90 <__Stack_Size+0x47790>
    7b8c:	00004c07 	andeq	r4, r0, r7, lsl #24
    7b90:	0040e400 	subeq	lr, r0, r0, lsl #8
    7b94:	66200000 	strtvs	r0, [r0], -r0
    7b98:	01000024 	tsteq	r0, r4, lsr #32
    7b9c:	5732075a 			; <UNDEFINED> instruction: 0x5732075a
    7ba0:	00140800 	andseq	r0, r4, r0, lsl #16
    7ba4:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ba8:	0000126f 	andeq	r1, r0, pc, ror #4
    7bac:	00261614 	eoreq	r1, r6, r4, lsl r6
    7bb0:	075a0100 	ldrbeq	r0, [sl, -r0, lsl #2]
    7bb4:	000004ac 	andeq	r0, r0, ip, lsr #9
    7bb8:	2b155001 	blcs	55bbc4 <__Stack_Size+0x55b7c4>
    7bbc:	01000025 	tsteq	r0, r5, lsr #32
    7bc0:	004c075a 	subeq	r0, ip, sl, asr r7
    7bc4:	41190000 	tstmi	r9, r0
    7bc8:	63160000 	tstvs	r6, #0
    7bcc:	0100002a 	tsteq	r0, sl, lsr #32
    7bd0:	004c075c 	subeq	r0, ip, ip, asr r7
    7bd4:	413a0000 	teqmi	sl, r0
    7bd8:	20000000 	andcs	r0, r0, r0
    7bdc:	00002c73 	andeq	r2, r0, r3, ror ip
    7be0:	46077b01 	strmi	r7, [r7], -r1, lsl #22
    7be4:	10080057 	andne	r0, r8, r7, asr r0
    7be8:	01000000 	mrseq	r0, (UNDEF: 0)
    7bec:	0012b49c 	mulseq	r2, ip, r4
    7bf0:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    7bf4:	7b010000 	blvc	47bfc <__Stack_Size+0x477fc>
    7bf8:	0004ac07 	andeq	sl, r4, r7, lsl #24
    7bfc:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7c00:	00002851 	andeq	r2, r0, r1, asr r8
    7c04:	4c077b01 	stcmi	11, cr7, [r7], {1}
    7c08:	6f000000 	svcvs	0x00000000
    7c0c:	16000041 	strne	r0, [r0], -r1, asr #32
    7c10:	00002a5a 	andeq	r2, r0, sl, asr sl
    7c14:	4c077d01 	stcmi	13, cr7, [r7], {1}
    7c18:	90000000 	andls	r0, r0, r0
    7c1c:	00000041 	andeq	r0, r0, r1, asr #32
    7c20:	002b9720 	eoreq	r9, fp, r0, lsr #14
    7c24:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    7c28:	08005756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, ip, lr}
    7c2c:	00000010 	andeq	r0, r0, r0, lsl r0
    7c30:	12f99c01 	rscsne	r9, r9, #256	; 0x100
    7c34:	16140000 	ldrne	r0, [r4], -r0
    7c38:	01000026 	tsteq	r0, r6, lsr #32
    7c3c:	04ac079b 	strteq	r0, [ip], #1947	; 0x79b
    7c40:	50010000 	andpl	r0, r1, r0
    7c44:	00285115 	eoreq	r5, r8, r5, lsl r1
    7c48:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    7c4c:	0000004c 	andeq	r0, r0, ip, asr #32
    7c50:	000041c5 	andeq	r4, r0, r5, asr #3
    7c54:	002a5a16 	eoreq	r5, sl, r6, lsl sl
    7c58:	079d0100 	ldreq	r0, [sp, r0, lsl #2]
    7c5c:	0000004c 	andeq	r0, r0, ip, asr #32
    7c60:	000041e6 	andeq	r4, r0, r6, ror #3
    7c64:	29982000 	ldmibcs	r8, {sp}
    7c68:	bb010000 	bllt	47c70 <__Stack_Size+0x47870>
    7c6c:	00576607 	subseq	r6, r7, r7, lsl #12
    7c70:	00001008 	andeq	r1, r0, r8
    7c74:	3e9c0100 	fmlcce	f0, f4, f0
    7c78:	14000013 	strne	r0, [r0], #-19
    7c7c:	00002616 	andeq	r2, r0, r6, lsl r6
    7c80:	ac07bb01 	stcge	11, cr11, [r7], {1}
    7c84:	01000004 	tsteq	r0, r4
    7c88:	28511550 	ldmdacs	r1, {r4, r6, r8, sl, ip}^
    7c8c:	bb010000 	bllt	47c94 <__Stack_Size+0x47894>
    7c90:	00004c07 	andeq	r4, r0, r7, lsl #24
    7c94:	00421000 	subeq	r1, r2, r0
    7c98:	2a631600 	bcs	18cd4a0 <__Stack_Size+0x18cd0a0>
    7c9c:	bd010000 	stclt	0, cr0, [r1, #-0]
    7ca0:	00004c07 	andeq	r4, r0, r7, lsl #24
    7ca4:	00423100 	subeq	r3, r2, r0, lsl #2
    7ca8:	ff200000 			; <UNDEFINED> instruction: 0xff200000
    7cac:	01000026 	tsteq	r0, r6, lsr #32
    7cb0:	577607db 			; <UNDEFINED> instruction: 0x577607db
    7cb4:	00100800 	andseq	r0, r0, r0, lsl #16
    7cb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7cbc:	00001383 	andeq	r1, r0, r3, lsl #7
    7cc0:	00261614 	eoreq	r1, r6, r4, lsl r6
    7cc4:	07db0100 	ldrbeq	r0, [fp, r0, lsl #2]
    7cc8:	000004ac 	andeq	r0, r0, ip, lsr #9
    7ccc:	51155001 	tstpl	r5, r1
    7cd0:	01000028 	tsteq	r0, r8, lsr #32
    7cd4:	004c07db 	ldrdeq	r0, [ip], #-123	; 0xffffff85
    7cd8:	42660000 	rsbmi	r0, r6, #0
    7cdc:	63160000 	tstvs	r6, #0
    7ce0:	0100002a 	tsteq	r0, sl, lsr #32
    7ce4:	004c07dd 	ldrdeq	r0, [ip], #-125	; 0xffffff83
    7ce8:	42870000 	addmi	r0, r7, #0
    7cec:	20000000 	andcs	r0, r0, r0
    7cf0:	00002478 	andeq	r2, r0, r8, ror r4
    7cf4:	8607fb01 	strhi	pc, [r7], -r1, lsl #22
    7cf8:	10080057 	andne	r0, r8, r7, asr r0
    7cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    7d00:	0013c89c 	mulseq	r3, ip, r8
    7d04:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    7d08:	fb010000 	blx	47d12 <__Stack_Size+0x47912>
    7d0c:	0004ac07 	andeq	sl, r4, r7, lsl #24
    7d10:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7d14:	000000c7 	andeq	r0, r0, r7, asr #1
    7d18:	4c07fb01 	stcmi	11, cr15, [r7], {1}
    7d1c:	b1000000 	mrslt	r0, (UNDEF: 0)
    7d20:	16000042 	strne	r0, [r0], -r2, asr #32
    7d24:	00002783 	andeq	r2, r0, r3, lsl #15
    7d28:	4c07fd01 	stcmi	13, cr15, [r7], {1}
    7d2c:	d2000000 	andle	r0, r0, #0
    7d30:	00000042 	andeq	r0, r0, r2, asr #32
    7d34:	002a2920 	eoreq	r2, sl, r0, lsr #18
    7d38:	08180100 	ldmdaeq	r8, {r8}
    7d3c:	08005796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, lr}
    7d40:	00000010 	andeq	r0, r0, r0, lsl r0
    7d44:	140d9c01 	strne	r9, [sp], #-3073	; 0xc01
    7d48:	16140000 	ldrne	r0, [r4], -r0
    7d4c:	01000026 	tsteq	r0, r6, lsr #32
    7d50:	04ac0818 	strteq	r0, [ip], #2072	; 0x818
    7d54:	50010000 	andpl	r0, r1, r0
    7d58:	00058815 	andeq	r8, r5, r5, lsl r8
    7d5c:	08180100 	ldmdaeq	r8, {r8}
    7d60:	0000004c 	andeq	r0, r0, ip, asr #32
    7d64:	00004307 	andeq	r4, r0, r7, lsl #6
    7d68:	00278316 	eoreq	r8, r7, r6, lsl r3
    7d6c:	081a0100 	ldmdaeq	sl, {r8}
    7d70:	0000004c 	andeq	r0, r0, ip, asr #32
    7d74:	00004328 	andeq	r4, r0, r8, lsr #6
    7d78:	2d342000 	ldccs	0, cr2, [r4, #-0]
    7d7c:	36010000 	strcc	r0, [r1], -r0
    7d80:	0057a608 	subseq	sl, r7, r8, lsl #12
    7d84:	00001408 	andeq	r1, r0, r8, lsl #8
    7d88:	529c0100 	addspl	r0, ip, #0, 2
    7d8c:	14000014 	strne	r0, [r0], #-20
    7d90:	00002616 	andeq	r2, r0, r6, lsl r6
    7d94:	ac083601 	stcge	6, cr3, [r8], {1}
    7d98:	01000004 	tsteq	r0, r4
    7d9c:	00c71550 	sbceq	r1, r7, r0, asr r5
    7da0:	36010000 	strcc	r0, [r1], -r0
    7da4:	00004c08 	andeq	r4, r0, r8, lsl #24
    7da8:	00435d00 	subeq	r5, r3, r0, lsl #26
    7dac:	27831600 	strcs	r1, [r3, r0, lsl #12]
    7db0:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    7db4:	00004c08 	andeq	r4, r0, r8, lsl #24
    7db8:	00437e00 	subeq	r7, r3, r0, lsl #28
    7dbc:	33200000 	nopcc	{0}	; <UNPREDICTABLE>
    7dc0:	0100002c 	tsteq	r0, ip, lsr #32
    7dc4:	57ba0853 	sbfxpl	r0, r3, #16, #27
    7dc8:	00140800 	andseq	r0, r4, r0, lsl #16
    7dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7dd0:	00001497 	muleq	r0, r7, r4
    7dd4:	00261614 	eoreq	r1, r6, r4, lsl r6
    7dd8:	08530100 	ldmdaeq	r3, {r8}^
    7ddc:	000004ac 	andeq	r0, r0, ip, lsr #9
    7de0:	88155001 	ldmdahi	r5, {r0, ip, lr}
    7de4:	01000005 	tsteq	r0, r5
    7de8:	004c0853 	subeq	r0, ip, r3, asr r8
    7dec:	43b30000 			; <UNDEFINED> instruction: 0x43b30000
    7df0:	83160000 	tsthi	r6, #0
    7df4:	01000027 	tsteq	r0, r7, lsr #32
    7df8:	004c0855 	subeq	r0, ip, r5, asr r8
    7dfc:	43d40000 	bicsmi	r0, r4, #0
    7e00:	20000000 	andcs	r0, r0, r0
    7e04:	00002c83 	andeq	r2, r0, r3, lsl #25
    7e08:	ce087101 	adfgte	f7, f0, f1
    7e0c:	14080057 	strne	r0, [r8], #-87	; 0x57
    7e10:	01000000 	mrseq	r0, (UNDEF: 0)
    7e14:	0014dc9c 	mulseq	r4, ip, ip
    7e18:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    7e1c:	71010000 	mrsvc	r0, (UNDEF: 1)
    7e20:	0004ac08 	andeq	sl, r4, r8, lsl #24
    7e24:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7e28:	000000c7 	andeq	r0, r0, r7, asr #1
    7e2c:	4c087101 	stfmis	f7, [r8], {1}
    7e30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7e34:	16000044 	strne	r0, [r0], -r4, asr #32
    7e38:	00002783 	andeq	r2, r0, r3, lsl #15
    7e3c:	4c087301 	stcmi	3, cr7, [r8], {1}
    7e40:	2a000000 	bcs	7e48 <__Stack_Size+0x7a48>
    7e44:	00000044 	andeq	r0, r0, r4, asr #32
    7e48:	0024d420 	eoreq	sp, r4, r0, lsr #8
    7e4c:	088e0100 	stmeq	lr, {r8}
    7e50:	080057e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, ip, lr}
    7e54:	00000014 	andeq	r0, r0, r4, lsl r0
    7e58:	15219c01 	strne	r9, [r1, #-3073]!	; 0xc01
    7e5c:	16140000 	ldrne	r0, [r4], -r0
    7e60:	01000026 	tsteq	r0, r6, lsr #32
    7e64:	04ac088e 	strteq	r0, [ip], #2190	; 0x88e
    7e68:	50010000 	andpl	r0, r1, r0
    7e6c:	00058815 	andeq	r8, r5, r5, lsl r8
    7e70:	088e0100 	stmeq	lr, {r8}
    7e74:	0000004c 	andeq	r0, r0, ip, asr #32
    7e78:	0000445f 	andeq	r4, r0, pc, asr r4
    7e7c:	00278316 	eoreq	r8, r7, r6, lsl r3
    7e80:	08900100 	ldmeq	r0, {r8}
    7e84:	0000004c 	andeq	r0, r0, ip, asr #32
    7e88:	00004480 	andeq	r4, r0, r0, lsl #9
    7e8c:	2c4a2000 	marcs	acc0, r2, sl
    7e90:	ac010000 	stcge	0, cr0, [r1], {-0}
    7e94:	0057f608 	subseq	pc, r7, r8, lsl #12
    7e98:	00001408 	andeq	r1, r0, r8, lsl #8
    7e9c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    7ea0:	14000015 	strne	r0, [r0], #-21
    7ea4:	00002616 	andeq	r2, r0, r6, lsl r6
    7ea8:	ac08ac01 	stcge	12, cr10, [r8], {1}
    7eac:	01000004 	tsteq	r0, r4
    7eb0:	00c71550 	sbceq	r1, r7, r0, asr r5
    7eb4:	ac010000 	stcge	0, cr0, [r1], {-0}
    7eb8:	00004c08 	andeq	r4, r0, r8, lsl #24
    7ebc:	0044b500 	subeq	fp, r4, r0, lsl #10
    7ec0:	27831600 	strcs	r1, [r3, r0, lsl #12]
    7ec4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    7ec8:	00004c08 	andeq	r4, r0, r8, lsl #24
    7ecc:	0044d600 	subeq	sp, r4, r0, lsl #12
    7ed0:	6f200000 	svcvs	0x00200000
    7ed4:	01000028 	tsteq	r0, r8, lsr #32
    7ed8:	580a08ce 	stmdapl	sl, {r1, r2, r3, r6, r7, fp}
    7edc:	001c0800 	andseq	r0, ip, r0, lsl #16
    7ee0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7ee4:	000015a9 	andeq	r1, r0, r9, lsr #11
    7ee8:	00261614 	eoreq	r1, r6, r4, lsl r6
    7eec:	08ce0100 	stmiaeq	lr, {r8}^
    7ef0:	000004ac 	andeq	r0, r0, ip, lsr #9
    7ef4:	6c145001 	ldcvs	0, cr5, [r4], {1}
    7ef8:	0100002a 	tsteq	r0, sl, lsr #32
    7efc:	004c08ce 	subeq	r0, ip, lr, asr #17
    7f00:	51010000 	mrspl	r0, (UNDEF: 1)
    7f04:	002adb15 	eoreq	sp, sl, r5, lsl fp
    7f08:	08ce0100 	stmiaeq	lr, {r8}^
    7f0c:	0000004c 	andeq	r0, r0, ip, asr #32
    7f10:	0000450b 	andeq	r4, r0, fp, lsl #10
    7f14:	257b2000 	ldrbcs	r2, [fp, #-0]!
    7f18:	ea010000 	b	47f20 <__Stack_Size+0x47b20>
    7f1c:	00582608 	subseq	r2, r8, r8, lsl #12
    7f20:	00001c08 	andeq	r1, r0, r8, lsl #24
    7f24:	ec9c0100 	ldfs	f0, [ip], {0}
    7f28:	14000015 	strne	r0, [r0], #-21
    7f2c:	00002616 	andeq	r2, r0, r6, lsl r6
    7f30:	ac08ea01 	stcge	10, cr14, [r8], {1}
    7f34:	01000004 	tsteq	r0, r4
    7f38:	2a6c1450 	bcs	1b0d080 <__Stack_Size+0x1b0cc80>
    7f3c:	ea010000 	b	47f44 <__Stack_Size+0x47b44>
    7f40:	00004c08 	andeq	r4, r0, r8, lsl #24
    7f44:	15510100 	ldrbne	r0, [r1, #-256]	; 0x100
    7f48:	00002901 	andeq	r2, r0, r1, lsl #18
    7f4c:	4c08ea01 	stcmi	10, cr14, [r8], {1}
    7f50:	2c000000 	stccs	0, cr0, [r0], {-0}
    7f54:	00000045 	andeq	r0, r0, r5, asr #32
    7f58:	0027f320 	eoreq	pc, r7, r0, lsr #6
    7f5c:	09120100 	ldmdbeq	r2, {r8}
    7f60:	08005842 	stmdaeq	r0, {r1, r6, fp, ip, lr}
    7f64:	00000044 	andeq	r0, r0, r4, asr #32
    7f68:	16339c01 	ldrtne	r9, [r3], -r1, lsl #24
    7f6c:	16150000 	ldrne	r0, [r5], -r0
    7f70:	01000026 	tsteq	r0, r6, lsr #32
    7f74:	04ac0912 	strteq	r0, [ip], #2322	; 0x912
    7f78:	454d0000 	strbmi	r0, [sp, #-0]
    7f7c:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    7f80:	0100002a 	tsteq	r0, sl, lsr #32
    7f84:	004c0912 	subeq	r0, ip, r2, lsl r9
    7f88:	456d0000 	strbmi	r0, [sp, #-0]!
    7f8c:	10150000 	andsne	r0, r5, r0
    7f90:	01000009 	tsteq	r0, r9
    7f94:	004c0912 	subeq	r0, ip, r2, lsl r9
    7f98:	45a70000 	strmi	r0, [r7, #0]!
    7f9c:	20000000 	andcs	r0, r0, r0
    7fa0:	0000292d 	andeq	r2, r0, sp, lsr #18
    7fa4:	86093801 	strhi	r3, [r9], -r1, lsl #16
    7fa8:	18080058 	stmdane	r8, {r3, r4, r6}
    7fac:	01000000 	mrseq	r0, (UNDEF: 0)
    7fb0:	0016669c 	mulseq	r6, ip, r6
    7fb4:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    7fb8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    7fbc:	0004ac09 	andeq	sl, r4, r9, lsl #24
    7fc0:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    7fc4:	00001671 	andeq	r1, r0, r1, ror r6
    7fc8:	cf093801 	svcgt	0x00093801
    7fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    7fd0:	b9200051 	stmdblt	r0!, {r0, r4, r6}
    7fd4:	01000025 	tsteq	r0, r5, lsr #32
    7fd8:	589e0955 	ldmpl	lr, {r0, r2, r4, r6, r8, fp}
    7fdc:	00180800 	andseq	r0, r8, r0, lsl #16
    7fe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fe4:	00001699 	muleq	r0, r9, r6
    7fe8:	00261614 	eoreq	r1, r6, r4, lsl r6
    7fec:	09550100 	ldmdbeq	r5, {r8}^
    7ff0:	000004ac 	andeq	r0, r0, ip, lsr #9
    7ff4:	45145001 	ldrmi	r5, [r4, #-1]
    7ff8:	01000029 	tsteq	r0, r9, lsr #32
    7ffc:	004c0955 	subeq	r0, ip, r5, asr r9
    8000:	51010000 	mrspl	r0, (UNDEF: 1)
    8004:	28ab2000 	stmiacs	fp!, {sp}
    8008:	70010000 	andvc	r0, r1, r0
    800c:	0058b609 	subseq	fp, r8, r9, lsl #12
    8010:	00001808 	andeq	r1, r0, r8, lsl #16
    8014:	cc9c0100 	ldfgts	f0, [ip], {0}
    8018:	14000016 	strne	r0, [r0], #-22
    801c:	00002616 	andeq	r2, r0, r6, lsl r6
    8020:	ac097001 	stcge	0, cr7, [r9], {1}
    8024:	01000004 	tsteq	r0, r4
    8028:	16711450 			; <UNDEFINED> instruction: 0x16711450
    802c:	70010000 	andvc	r0, r1, r0
    8030:	0000cf09 	andeq	ip, r0, r9, lsl #30
    8034:	00510100 	subseq	r0, r1, r0, lsl #2
    8038:	002b1f20 	eoreq	r1, fp, r0, lsr #30
    803c:	098d0100 	stmibeq	sp, {r8}
    8040:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    8044:	00000016 	andeq	r0, r0, r6, lsl r0
    8048:	17019c01 	strne	r9, [r1, -r1, lsl #24]
    804c:	16140000 	ldrne	r0, [r4], -r0
    8050:	01000026 	tsteq	r0, r6, lsr #32
    8054:	04ac098d 	strteq	r0, [ip], #2445	; 0x98d
    8058:	50010000 	andpl	r0, r1, r0
    805c:	0025e115 	eoreq	lr, r5, r5, lsl r1
    8060:	098d0100 	stmibeq	sp, {r8}
    8064:	0000004c 	andeq	r0, r0, ip, asr #32
    8068:	000045c8 	andeq	r4, r0, r8, asr #11
    806c:	27c42000 	strbcs	r2, [r4, r0]
    8070:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    8074:	0058e409 	subseq	lr, r8, r9, lsl #8
    8078:	00001608 	andeq	r1, r0, r8, lsl #12
    807c:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    8080:	14000017 	strne	r0, [r0], #-23
    8084:	00002616 	andeq	r2, r0, r6, lsl r6
    8088:	ac09ae01 	stcge	14, cr10, [r9], {1}
    808c:	01000004 	tsteq	r0, r4
    8090:	2b361550 	blcs	d8d5d8 <__Stack_Size+0xd8d1d8>
    8094:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    8098:	00004c09 	andeq	r4, r0, r9, lsl #24
    809c:	0045e900 	subeq	lr, r5, r0, lsl #18
    80a0:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
    80a4:	01000029 	tsteq	r0, r9, lsr #32
    80a8:	58fa09ca 	ldmpl	sl!, {r1, r3, r6, r7, r8, fp}^
    80ac:	00160800 	andseq	r0, r6, r0, lsl #16
    80b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    80b4:	0000176b 	andeq	r1, r0, fp, ror #14
    80b8:	00261614 	eoreq	r1, r6, r4, lsl r6
    80bc:	09ca0100 	stmibeq	sl, {r8}^
    80c0:	000004ac 	andeq	r0, r0, ip, lsr #9
    80c4:	50155001 	andspl	r5, r5, r1
    80c8:	01000026 	tsteq	r0, r6, lsr #32
    80cc:	004c09ca 	subeq	r0, ip, sl, asr #19
    80d0:	460a0000 	strmi	r0, [sl], -r0
    80d4:	20000000 	andcs	r0, r0, r0
    80d8:	00002d03 	andeq	r2, r0, r3, lsl #26
    80dc:	1009e401 	andne	lr, r9, r1, lsl #8
    80e0:	16080059 			; <UNDEFINED> instruction: 0x16080059
    80e4:	01000000 	mrseq	r0, (UNDEF: 0)
    80e8:	0017a09c 	mulseq	r7, ip, r0
    80ec:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    80f0:	e4010000 	str	r0, [r1], #-0
    80f4:	0004ac09 	andeq	sl, r4, r9, lsl #24
    80f8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    80fc:	00002bc2 	andeq	r2, r0, r2, asr #23
    8100:	4c09e401 	cfstrsmi	mvf14, [r9], {1}
    8104:	2b000000 	blcs	810c <__Stack_Size+0x7d0c>
    8108:	00000046 	andeq	r0, r0, r6, asr #32
    810c:	00282220 	eoreq	r2, r8, r0, lsr #4
    8110:	09f90100 	ldmibeq	r9!, {r8}^
    8114:	08005926 	stmdaeq	r0, {r1, r2, r5, r8, fp, ip, lr}
    8118:	00000004 	andeq	r0, r0, r4
    811c:	17d39c01 	ldrbne	r9, [r3, r1, lsl #24]
    8120:	16140000 	ldrne	r0, [r4], -r0
    8124:	01000026 	tsteq	r0, r6, lsr #32
    8128:	04ac09f9 	strteq	r0, [ip], #2553	; 0x9f9
    812c:	50010000 	andpl	r0, r1, r0
    8130:	00241f14 	eoreq	r1, r4, r4, lsl pc
    8134:	09f90100 	ldmibeq	r9!, {r8}^
    8138:	0000004c 	andeq	r0, r0, ip, asr #32
    813c:	20005101 	andcs	r5, r0, r1, lsl #2
    8140:	00002bea 	andeq	r2, r0, sl, ror #23
    8144:	2a0a0a01 	bcs	28a950 <__Stack_Size+0x28a550>
    8148:	04080059 	streq	r0, [r8], #-89	; 0x59
    814c:	01000000 	mrseq	r0, (UNDEF: 0)
    8150:	0018069c 	mulseq	r8, ip, r6
    8154:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    8158:	0a010000 	beq	48160 <__Stack_Size+0x47d60>
    815c:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    8160:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    8164:	00002bf1 	strdeq	r2, [r0], -r1
    8168:	4c0a0a01 	stcmi	10, cr0, [sl], {1}
    816c:	01000000 	mrseq	r0, (UNDEF: 0)
    8170:	43200051 			; <UNDEFINED> instruction: 0x43200051
    8174:	0100000d 	tsteq	r0, sp
    8178:	592e0a1c 	stmdbpl	lr!, {r2, r3, r4, r9, fp}
    817c:	00040800 	andeq	r0, r4, r0, lsl #16
    8180:	9c010000 	stcls	0, cr0, [r1], {-0}
    8184:	00001839 	andeq	r1, r0, r9, lsr r8
    8188:	00261614 	eoreq	r1, r6, r4, lsl r6
    818c:	0a1c0100 	beq	708594 <__Stack_Size+0x708194>
    8190:	000004ac 	andeq	r0, r0, ip, lsr #9
    8194:	4a145001 	bmi	51c1a0 <__Stack_Size+0x51bda0>
    8198:	0100000d 	tsteq	r0, sp
    819c:	004c0a1c 	subeq	r0, ip, ip, lsl sl
    81a0:	51010000 	mrspl	r0, (UNDEF: 1)
    81a4:	24b42000 	ldrtcs	r2, [r4], #0
    81a8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    81ac:	0059320a 	subseq	r3, r9, sl, lsl #4
    81b0:	00000408 	andeq	r0, r0, r8, lsl #8
    81b4:	6c9c0100 	ldfvss	f0, [ip], {0}
    81b8:	14000018 	strne	r0, [r0], #-24
    81bc:	00002616 	andeq	r2, r0, r6, lsl r6
    81c0:	ac0a2e01 	stcge	14, cr2, [sl], {1}
    81c4:	01000004 	tsteq	r0, r4
    81c8:	24bb1450 	ldrtcs	r1, [fp], #1104	; 0x450
    81cc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    81d0:	00004c0a 	andeq	r4, r0, sl, lsl #24
    81d4:	00510100 	subseq	r0, r1, r0, lsl #2
    81d8:	00298820 	eoreq	r8, r9, r0, lsr #16
    81dc:	0a400100 	beq	10085e4 <__Stack_Size+0x10081e4>
    81e0:	08005936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, ip, lr}
    81e4:	00000004 	andeq	r0, r0, r4
    81e8:	189f9c01 	ldmne	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    81ec:	16140000 	ldrne	r0, [r4], -r0
    81f0:	01000026 	tsteq	r0, r6, lsr #32
    81f4:	04ac0a40 	strteq	r0, [ip], #2624	; 0xa40
    81f8:	50010000 	andpl	r0, r1, r0
    81fc:	00298f14 	eoreq	r8, r9, r4, lsl pc
    8200:	0a400100 	beq	1008608 <__Stack_Size+0x1008208>
    8204:	0000004c 	andeq	r0, r0, ip, asr #32
    8208:	20005101 	andcs	r5, r0, r1, lsl #2
    820c:	000024c4 	andeq	r2, r0, r4, asr #9
    8210:	3a0a5201 	bcc	29ca1c <__Stack_Size+0x29c61c>
    8214:	06080059 			; <UNDEFINED> instruction: 0x06080059
    8218:	01000000 	mrseq	r0, (UNDEF: 0)
    821c:	0018d29c 	mulseq	r8, ip, r2
    8220:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    8224:	52010000 	andpl	r0, r1, #0
    8228:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    822c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    8230:	000024cb 	andeq	r2, r0, fp, asr #9
    8234:	4c0a5201 	sfmmi	f5, 4, [sl], {1}
    8238:	01000000 	mrseq	r0, (UNDEF: 0)
    823c:	c7200051 			; <UNDEFINED> instruction: 0xc7200051
    8240:	0100002a 	tsteq	r0, sl, lsr #32
    8244:	59400a6a 	stmdbpl	r0, {r1, r3, r5, r6, r9, fp}^
    8248:	00160800 	andseq	r0, r6, r0, lsl #16
    824c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8250:	00001907 	andeq	r1, r0, r7, lsl #18
    8254:	00261614 	eoreq	r1, r6, r4, lsl r6
    8258:	0a6a0100 	beq	1a88660 <__Stack_Size+0x1a88260>
    825c:	000004ac 	andeq	r0, r0, ip, lsr #9
    8260:	40155001 	andsmi	r5, r5, r1
    8264:	0100002a 	tsteq	r0, sl, lsr #32
    8268:	004c0a6a 	subeq	r0, ip, sl, ror #20
    826c:	464c0000 	strbmi	r0, [ip], -r0
    8270:	20000000 	andcs	r0, r0, r0
    8274:	000028d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8278:	560a8601 	strpl	r8, [sl], -r1, lsl #12
    827c:	1a080059 	bne	2083e8 <__Stack_Size+0x207fe8>
    8280:	01000000 	mrseq	r0, (UNDEF: 0)
    8284:	00193c9c 	mulseq	r9, ip, ip
    8288:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    828c:	86010000 	strhi	r0, [r1], -r0
    8290:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    8294:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    8298:	00002a40 	andeq	r2, r0, r0, asr #20
    829c:	4c0a8601 	stcmi	6, cr8, [sl], {1}
    82a0:	6d000000 	stcvs	0, cr0, [r0, #-0]
    82a4:	00000046 	andeq	r0, r0, r6, asr #32
    82a8:	002cac20 	eoreq	sl, ip, r0, lsr #24
    82ac:	028a0100 	addeq	r0, sl, #0, 2
    82b0:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
    82b4:	0000006e 	andeq	r0, r0, lr, rrx
    82b8:	1a3e9c01 	bne	faf2c4 <__Stack_Size+0xfaeec4>
    82bc:	16150000 	ldrne	r0, [r5], -r0
    82c0:	01000026 	tsteq	r0, r6, lsr #32
    82c4:	04ac028a 	strteq	r0, [ip], #650	; 0x28a
    82c8:	468e0000 	strmi	r0, [lr], r0
    82cc:	56150000 	ldrpl	r0, [r5], -r0
    82d0:	01000029 	tsteq	r0, r9, lsr #32
    82d4:	0924028a 	stmdbeq	r4!, {r1, r3, r7, r9}
    82d8:	46f40000 	ldrbtmi	r0, [r4], r0
    82dc:	75160000 	ldrvc	r0, [r6, #-0]
    82e0:	0100002b 	tsteq	r0, fp, lsr #32
    82e4:	004c028c 	subeq	r0, ip, ip, lsl #5
    82e8:	47390000 	ldrmi	r0, [r9, -r0]!
    82ec:	9b160000 	blls	5882f4 <__Stack_Size+0x587ef4>
    82f0:	0100002a 	tsteq	r0, sl, lsr #32
    82f4:	004c028d 	subeq	r0, ip, sp, lsl #5
    82f8:	47630000 	strbmi	r0, [r3, -r0]!
    82fc:	9a1a0000 	bls	688304 <__Stack_Size+0x687f04>
    8300:	b2080059 	andlt	r0, r8, #89	; 0x59
    8304:	a6000004 	strge	r0, [r0], -r4
    8308:	1b000019 	blne	8374 <__Stack_Size+0x7f74>
    830c:	75025001 	strvc	r5, [r2, #-1]
    8310:	a21a0000 	andsge	r0, sl, #0
    8314:	d2080059 	andle	r0, r8, #89	; 0x59
    8318:	ba000018 	blt	8380 <__Stack_Size+0x7f80>
    831c:	1b000019 	blne	8388 <__Stack_Size+0x7f88>
    8320:	75025001 	strvc	r5, [r2, #-1]
    8324:	ae1a0000 	cdpge	0, 1, cr0, cr10, cr0, {0}
    8328:	27080059 	smlsdcs	r8, r9, r0, r0
    832c:	da000005 	ble	8348 <__Stack_Size+0x7f48>
    8330:	1b000019 	blne	839c <__Stack_Size+0x7f9c>
    8334:	76025201 	strvc	r5, [r2], -r1, lsl #4
    8338:	51011b00 	tstpl	r1, r0, lsl #22
    833c:	1b007702 	blne	25f4c <__Stack_Size+0x25b4c>
    8340:	75025001 	strvc	r5, [r2, #-1]
    8344:	ba1c0000 	blt	70834c <__Stack_Size+0x707f4c>
    8348:	07080059 	smlsdeq	r8, r9, r0, r0
    834c:	ef000019 	svc	0x00000019
    8350:	1b000019 	blne	83bc <__Stack_Size+0x7fbc>
    8354:	f3035001 	vhadd.u8	d5, d3, d1
    8358:	27005001 	strcs	r5, [r0, -r1]
    835c:	080059be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, lr}
    8360:	00000527 	andeq	r0, r0, r7, lsr #10
    8364:	0059c61a 	subseq	ip, r9, sl, lsl r6
    8368:	00190708 	andseq	r0, r9, r8, lsl #14
    836c:	001a0c00 	andseq	r0, sl, r0, lsl #24
    8370:	50011b00 	andpl	r1, r1, r0, lsl #22
    8374:	00007502 	andeq	r7, r0, r2, lsl #10
    8378:	0059d21a 	subseq	sp, r9, sl, lsl r2
    837c:	0004b208 	andeq	fp, r4, r8, lsl #4
    8380:	001a2c00 	andseq	r2, sl, r0, lsl #24
    8384:	52011b00 	andpl	r1, r1, #0, 22
    8388:	1b007602 	blne	25b98 <__Stack_Size+0x25798>
    838c:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    8390:	50011b00 	andpl	r1, r1, r0, lsl #22
    8394:	00007502 	andeq	r7, r0, r2, lsl #10
    8398:	0059de1d 	subseq	sp, r9, sp, lsl lr
    839c:	0018d208 	andseq	sp, r8, r8, lsl #4
    83a0:	50011b00 	andpl	r1, r1, r0, lsl #22
    83a4:	5001f303 	andpl	pc, r1, r3, lsl #6
    83a8:	e3200000 	nop	{0}	; <UNPREDICTABLE>
    83ac:	0100002a 	tsteq	r0, sl, lsr #32
    83b0:	59de0aa2 	ldmibpl	lr, {r1, r5, r7, r9, fp}^
    83b4:	00160800 	andseq	r0, r6, r0, lsl #16
    83b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    83bc:	00001a73 	andeq	r1, r0, r3, ror sl
    83c0:	00261614 	eoreq	r1, r6, r4, lsl r6
    83c4:	0aa20100 	beq	fe8887cc <SCS_BASE+0x1e87a7cc>
    83c8:	000004ac 	andeq	r0, r0, ip, lsr #9
    83cc:	40155001 	andsmi	r5, r5, r1
    83d0:	0100002a 	tsteq	r0, sl, lsr #32
    83d4:	004c0aa2 	subeq	r0, ip, r2, lsr #21
    83d8:	478d0000 	strmi	r0, [sp, r0]
    83dc:	20000000 	andcs	r0, r0, r0
    83e0:	0000263c 	andeq	r2, r0, ip, lsr r6
    83e4:	f40abe01 			; <UNDEFINED> instruction: 0xf40abe01
    83e8:	1a080059 	bne	208554 <__Stack_Size+0x208154>
    83ec:	01000000 	mrseq	r0, (UNDEF: 0)
    83f0:	001aa89c 	mulseq	sl, ip, r8
    83f4:	26161400 	ldrcs	r1, [r6], -r0, lsl #8
    83f8:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    83fc:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    8400:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    8404:	00002a40 	andeq	r2, r0, r0, asr #20
    8408:	4c0abe01 	stcmi	14, cr11, [sl], {1}
    840c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    8410:	00000047 	andeq	r0, r0, r7, asr #32
    8414:	0029672a 	eoreq	r6, r9, sl, lsr #14
    8418:	0c4b0100 	stfeqe	f0, [fp], {-0}
    841c:	001b0a01 	andseq	r0, fp, r1, lsl #20
    8420:	26161000 	ldrcs	r1, [r6], -r0
    8424:	4b010000 	blmi	4842c <__Stack_Size+0x4802c>
    8428:	0004ac0c 	andeq	sl, r4, ip, lsl #24
    842c:	2b531000 	blcs	14cc434 <__Stack_Size+0x14cc034>
    8430:	4b010000 	blmi	48438 <__Stack_Size+0x48038>
    8434:	00004c0c 	andeq	r4, r0, ip, lsl #24
    8438:	2af71000 	bcs	ffdcc440 <SCS_BASE+0x1fdbe440>
    843c:	4b010000 	blmi	48444 <__Stack_Size+0x48044>
    8440:	00004c0c 	andeq	r4, r0, ip, lsl #24
    8444:	2ce81000 	stclcs	0, cr1, [r8]
    8448:	4c010000 	stcmi	0, cr0, [r1], {-0}
    844c:	00004c0c 	andeq	r4, r0, ip, lsl #24
    8450:	2a631100 	bcs	18cc858 <__Stack_Size+0x18cc458>
    8454:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    8458:	00004c0c 	andeq	r4, r0, ip, lsl #24
    845c:	27831100 	strcs	r1, [r3, r0, lsl #2]
    8460:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    8464:	00004c0c 	andeq	r4, r0, ip, lsl #24
    8468:	6d742b00 	vldmdbvs	r4!, {d18-d17}
    846c:	4e010070 	mcrmi	0, 0, r0, cr1, cr0, {3}
    8470:	00004c0c 	andeq	r4, r0, ip, lsl #24
    8474:	1b2a0000 	blne	a8847c <__Stack_Size+0xa8807c>
    8478:	0100002c 	tsteq	r0, ip, lsr #32
    847c:	6c010c7a 	stcvs	12, cr0, [r1], {122}	; 0x7a
    8480:	1000001b 	andne	r0, r0, fp, lsl r0
    8484:	00002616 	andeq	r2, r0, r6, lsl r6
    8488:	ac0c7a01 	stcge	10, cr7, [ip], {1}
    848c:	10000004 	andne	r0, r0, r4
    8490:	00002b53 	andeq	r2, r0, r3, asr fp
    8494:	4c0c7a01 	stcmi	10, cr7, [ip], {1}
    8498:	10000000 	andne	r0, r0, r0
    849c:	00002af7 	strdeq	r2, [r0], -r7
    84a0:	4c0c7a01 	stcmi	10, cr7, [ip], {1}
    84a4:	10000000 	andne	r0, r0, r0
    84a8:	00002ce8 	andeq	r2, r0, r8, ror #25
    84ac:	4c0c7b01 	stcmi	11, cr7, [ip], {1}
    84b0:	11000000 	mrsne	r0, (UNDEF: 0)
    84b4:	00002a63 	andeq	r2, r0, r3, ror #20
    84b8:	4c0c7d01 	stcmi	13, cr7, [ip], {1}
    84bc:	11000000 	mrsne	r0, (UNDEF: 0)
    84c0:	00002783 	andeq	r2, r0, r3, lsl #15
    84c4:	4c0c7d01 	stcmi	13, cr7, [ip], {1}
    84c8:	2b000000 	blcs	84d0 <__Stack_Size+0x80d0>
    84cc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    84d0:	4c0c7d01 	stcmi	13, cr7, [ip], {1}
    84d4:	00000000 	andeq	r0, r0, r0
    84d8:	002cdd20 	eoreq	sp, ip, r0, lsr #26
    84dc:	02490100 	subeq	r0, r9, #0, 2
    84e0:	08005a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, lr}
    84e4:	000000b6 	strheq	r0, [r0], -r6
    84e8:	1cc49c01 	stclne	12, cr9, [r4], {1}
    84ec:	16150000 	ldrne	r0, [r5], -r0
    84f0:	01000026 	tsteq	r0, r6, lsr #32
    84f4:	04ac0249 	strteq	r0, [ip], #585	; 0x249
    84f8:	47cf0000 	strbmi	r0, [pc, r0]
    84fc:	56150000 	ldrpl	r0, [r5], -r0
    8500:	01000029 	tsteq	r0, r9, lsr #32
    8504:	09240249 	stmdbeq	r4!, {r0, r3, r6, r9}
    8508:	48670000 	stmdami	r7!, {}^	; <UNPREDICTABLE>
    850c:	a82c0000 	stmdage	ip!, {}	; <UNPREDICTABLE>
    8510:	4800001a 	stmdami	r0, {r1, r3, r4}
    8514:	8808005a 	stmdahi	r8, {r1, r3, r4, r6}
    8518:	01000000 	mrseq	r0, (UNDEF: 0)
    851c:	1bfc026a 	blne	fff08ecc <SCS_BASE+0x1fefaecc>
    8520:	d9220000 	stmdble	r2!, {}	; <UNPREDICTABLE>
    8524:	c500001a 	strgt	r0, [r0, #-26]
    8528:	22000048 	andcs	r0, r0, #72	; 0x48
    852c:	00001acd 	andeq	r1, r0, sp, asr #21
    8530:	000048d8 	ldrdeq	r4, [r0], -r8
    8534:	001ac122 	andseq	ip, sl, r2, lsr #2
    8538:	0048eb00 	subeq	lr, r8, r0, lsl #22
    853c:	1ab52200 	bne	fed50d44 <SCS_BASE+0x1ed42d44>
    8540:	48fe0000 	ldmmi	lr!, {}^	; <UNPREDICTABLE>
    8544:	882d0000 	stmdahi	sp!, {}	; <UNPREDICTABLE>
    8548:	25000000 	strcs	r0, [r0, #-0]
    854c:	00001ae5 	andeq	r1, r0, r5, ror #21
    8550:	0000491f 	andeq	r4, r0, pc, lsl r9
    8554:	001af125 	andseq	pc, sl, r5, lsr #2
    8558:	00495a00 	subeq	r5, r9, r0, lsl #20
    855c:	1afd2500 	bne	fff51964 <SCS_BASE+0x1ff43964>
    8560:	49900000 	ldmibmi	r0, {}	; <UNPREDICTABLE>
    8564:	00000000 	andeq	r0, r0, r0
    8568:	001b0a2c 	andseq	r0, fp, ip, lsr #20
    856c:	005a8600 	subseq	r8, sl, r0, lsl #12
    8570:	0000a808 	andeq	sl, r0, r8, lsl #16
    8574:	02740100 	rsbseq	r0, r4, #0, 2
    8578:	00001c56 	andeq	r1, r0, r6, asr ip
    857c:	001b3b22 	andseq	r3, fp, r2, lsr #22
    8580:	0049b300 	subeq	fp, r9, r0, lsl #6
    8584:	1b2f2200 	blne	bd0d8c <__Stack_Size+0xbd098c>
    8588:	49c60000 	stmibmi	r6, {}^	; <UNPREDICTABLE>
    858c:	23220000 			; <UNDEFINED> instruction: 0x23220000
    8590:	d900001b 	stmdble	r0, {r0, r1, r3, r4}
    8594:	22000049 	andcs	r0, r0, #73	; 0x49
    8598:	00001b17 	andeq	r1, r0, r7, lsl fp
    859c:	000049ec 	andeq	r4, r0, ip, ror #19
    85a0:	0000a82d 	andeq	sl, r0, sp, lsr #16
    85a4:	1b472500 	blne	11d19ac <__Stack_Size+0x11d15ac>
    85a8:	4a0d0000 	bmi	3485b0 <__Stack_Size+0x3481b0>
    85ac:	53250000 			; <UNDEFINED> instruction: 0x53250000
    85b0:	5400001b 	strpl	r0, [r0], #-27
    85b4:	2500004a 	strcs	r0, [r0, #-74]	; 0x4a
    85b8:	00001b5f 	andeq	r1, r0, pc, asr fp
    85bc:	00004a8f 	andeq	r4, r0, pc, lsl #21
    85c0:	221a0000 	andscs	r0, sl, #0
    85c4:	b208005a 	andlt	r0, r8, #90	; 0x5a
    85c8:	6a000004 	bvs	85e0 <__Stack_Size+0x81e0>
    85cc:	1b00001c 	blne	8644 <__Stack_Size+0x8244>
    85d0:	74025001 	strvc	r5, [r2], #-1
    85d4:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    85d8:	d208005a 	andle	r0, r8, #90	; 0x5a
    85dc:	7f000018 	svcvc	0x00000018
    85e0:	1b00001c 	blne	8658 <__Stack_Size+0x8258>
    85e4:	f3035001 	vhadd.u8	d5, d3, d1
    85e8:	27005001 	strcs	r5, [r0, -r1]
    85ec:	08005a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, ip, lr}
    85f0:	00000527 	andeq	r0, r0, r7, lsr #10
    85f4:	005a421c 	subseq	r4, sl, ip, lsl r2
    85f8:	00190708 	andseq	r0, r9, r8, lsl #14
    85fc:	001c9d00 	andseq	r9, ip, r0, lsl #26
    8600:	50011b00 	andpl	r1, r1, r0, lsl #22
    8604:	5001f303 	andpl	pc, r1, r3, lsl #6
    8608:	5a861c00 	bpl	fe18f610 <SCS_BASE+0x1e181610>
    860c:	1a3e0800 	bne	f8a614 <__Stack_Size+0xf8a214>
    8610:	1cb20000 	ldcne	0, cr0, [r2]
    8614:	011b0000 	tsteq	fp, r0
    8618:	01f30350 	mvnseq	r0, r0, asr r3
    861c:	c41d0050 	ldrgt	r0, [sp], #-80	; 0x50
    8620:	7308005a 	movwvc	r0, #32858	; 0x805a
    8624:	1b00001a 	blne	8694 <__Stack_Size+0x8294>
    8628:	f3035001 	vhadd.u8	d5, d3, d1
    862c:	00005001 	andeq	r5, r0, r1
    8630:	00278b20 	eoreq	r8, r7, r0, lsr #22
    8634:	0ad80100 	beq	ff608a3c <SCS_BASE+0x1f5faa3c>
    8638:	08005ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, lr}
    863c:	00000010 	andeq	r0, r0, r0, lsl r0
    8640:	1cf99c01 	ldclne	12, cr9, [r9], #4
    8644:	16140000 	ldrne	r0, [r4], -r0
    8648:	01000026 	tsteq	r0, r6, lsr #32
    864c:	04ac0ad8 	strteq	r0, [ip], #2776	; 0xad8
    8650:	50010000 	andpl	r0, r1, r0
    8654:	00253615 	eoreq	r3, r5, r5, lsl r6
    8658:	0ad80100 	beq	ff608a60 <SCS_BASE+0x1f5faa60>
    865c:	0000004c 	andeq	r0, r0, ip, asr #32
    8660:	00004ab2 			; <UNDEFINED> instruction: 0x00004ab2
    8664:	02df2e00 	sbcseq	r2, pc, #0, 28
    8668:	ec010000 	stc	0, cr0, [r1], {-0}
    866c:	00004c0a 	andeq	r4, r0, sl, lsl #24
    8670:	005ad400 	subseq	sp, sl, r0, lsl #8
    8674:	00000608 	andeq	r0, r0, r8, lsl #12
    8678:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    867c:	1500001d 	strne	r0, [r0, #-29]
    8680:	00002616 	andeq	r2, r0, r6, lsl r6
    8684:	ac0aec01 	stcge	12, cr14, [sl], {1}
    8688:	d3000004 	movwle	r0, #4
    868c:	0000004a 	andeq	r0, r0, sl, asr #32
    8690:	0026a22e 	eoreq	sl, r6, lr, lsr #4
    8694:	0afd0100 	beq	fff48a9c <SCS_BASE+0x1ff3aa9c>
    8698:	0000004c 	andeq	r0, r0, ip, asr #32
    869c:	08005ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, lr}
    86a0:	00000006 	andeq	r0, r0, r6
    86a4:	1d4f9c01 	stclne	12, cr9, [pc, #-4]	; 86a8 <__Stack_Size+0x82a8>
    86a8:	16150000 	ldrne	r0, [r5], -r0
    86ac:	01000026 	tsteq	r0, r6, lsr #32
    86b0:	04ac0afd 	strteq	r0, [ip], #2813	; 0xafd
    86b4:	4af40000 	bmi	ffd086bc <SCS_BASE+0x1fcfa6bc>
    86b8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    86bc:	000026b2 			; <UNDEFINED> instruction: 0x000026b2
    86c0:	4c0b0e01 	stcmi	14, cr0, [fp], {1}
    86c4:	e0000000 	and	r0, r0, r0
    86c8:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    86cc:	01000000 	mrseq	r0, (UNDEF: 0)
    86d0:	001d7a9c 	mulseq	sp, ip, sl
    86d4:	26161500 	ldrcs	r1, [r6], -r0, lsl #10
    86d8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    86dc:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    86e0:	004b1500 	subeq	r1, fp, r0, lsl #10
    86e4:	c22e0000 	eorgt	r0, lr, #0
    86e8:	01000026 	tsteq	r0, r6, lsr #32
    86ec:	004c0b1f 	subeq	r0, ip, pc, lsl fp
    86f0:	5ae60000 	bpl	ff9886f8 <SCS_BASE+0x1f97a6f8>
    86f4:	00080800 	andeq	r0, r8, r0, lsl #16
    86f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    86fc:	00001da5 	andeq	r1, r0, r5, lsr #27
    8700:	00261615 	eoreq	r1, r6, r5, lsl r6
    8704:	0b1f0100 	bleq	7c8b0c <__Stack_Size+0x7c870c>
    8708:	000004ac 	andeq	r0, r0, ip, lsr #9
    870c:	00004b36 	andeq	r4, r0, r6, lsr fp
    8710:	29c82e00 	stmibcs	r8, {r9, sl, fp, sp}^
    8714:	2f010000 	svccs	0x00010000
    8718:	00004c0b 	andeq	r4, r0, fp, lsl #24
    871c:	005aee00 	subseq	lr, sl, r0, lsl #28
    8720:	00000608 	andeq	r0, r0, r8, lsl #12
    8724:	d09c0100 	addsle	r0, ip, r0, lsl #2
    8728:	1500001d 	strne	r0, [r0, #-29]
    872c:	00002616 	andeq	r2, r0, r6, lsl r6
    8730:	ac0b2f01 	stcge	15, cr2, [fp], {1}
    8734:	57000004 	strpl	r0, [r0, -r4]
    8738:	0000004b 	andeq	r0, r0, fp, asr #32
    873c:	00287a2e 	eoreq	r7, r8, lr, lsr #20
    8740:	0b3f0100 	bleq	fc8b48 <__Stack_Size+0xfc8748>
    8744:	0000004c 	andeq	r0, r0, ip, asr #32
    8748:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    874c:	00000006 	andeq	r0, r0, r6
    8750:	1dfb9c01 	ldclne	12, cr9, [fp, #4]!
    8754:	16150000 	ldrne	r0, [r5], -r0
    8758:	01000026 	tsteq	r0, r6, lsr #32
    875c:	04ac0b3f 	strteq	r0, [ip], #2879	; 0xb3f
    8760:	4b780000 	blmi	1e08768 <__Stack_Size+0x1e08368>
    8764:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    8768:	0000250e 	andeq	r2, r0, lr, lsl #10
    876c:	a40b5d01 	strge	r5, [fp], #-3329	; 0xd01
    8770:	fa000000 	blx	8778 <__Stack_Size+0x8378>
    8774:	0c08005a 	stceq	0, cr0, [r8], {90}	; 0x5a
    8778:	01000000 	mrseq	r0, (UNDEF: 0)
    877c:	001e449c 	mulseq	lr, ip, r4
    8780:	26161500 	ldrcs	r1, [r6], -r0, lsl #10
    8784:	5d010000 	stcpl	0, cr0, [r1, #-0]
    8788:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    878c:	004b9900 	subeq	r9, fp, r0, lsl #18
    8790:	280b1400 	stmdacs	fp, {sl, ip}
    8794:	5d010000 	stcpl	0, cr0, [r1, #-0]
    8798:	00004c0b 	andeq	r4, r0, fp, lsl #24
    879c:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    87a0:	00001700 	andeq	r1, r0, r0, lsl #14
    87a4:	af0b5f01 	svcge	0x000b5f01
    87a8:	ba000000 	blt	87b0 <__Stack_Size+0x83b0>
    87ac:	0000004b 	andeq	r0, r0, fp, asr #32
    87b0:	0026e520 	eoreq	lr, r6, r0, lsr #10
    87b4:	0b860100 	bleq	fe188bbc <SCS_BASE+0x1e17abbc>
    87b8:	08005b06 	stmdaeq	r0, {r1, r2, r8, r9, fp, ip, lr}
    87bc:	00000008 	andeq	r0, r0, r8
    87c0:	1e799c01 	cdpne	12, 7, cr9, cr9, cr1, {0}
    87c4:	16140000 	ldrne	r0, [r4], -r0
    87c8:	01000026 	tsteq	r0, r6, lsr #32
    87cc:	04ac0b86 	strteq	r0, [ip], #2950	; 0xb86
    87d0:	50010000 	andpl	r0, r1, r0
    87d4:	00280b15 	eoreq	r0, r8, r5, lsl fp
    87d8:	0b860100 	bleq	fe188be0 <SCS_BASE+0x1e17abe0>
    87dc:	0000004c 	andeq	r0, r0, ip, asr #32
    87e0:	00004be2 	andeq	r4, r0, r2, ror #23
    87e4:	0d172e00 	ldceq	14, cr2, [r7, #-0]
    87e8:	a2010000 	andge	r0, r1, #0
    87ec:	0000af0b 	andeq	sl, r0, fp, lsl #30
    87f0:	005b0e00 	subseq	r0, fp, r0, lsl #28
    87f4:	00001608 	andeq	r1, r0, r8, lsl #12
    87f8:	e29c0100 	adds	r0, ip, #0, 2
    87fc:	1500001e 	strne	r0, [r0, #-30]
    8800:	00002616 	andeq	r2, r0, r6, lsl r6
    8804:	ac0ba201 	sfmge	f2, 1, [fp], {1}
    8808:	03000004 	movweq	r0, #4
    880c:	1400004c 	strne	r0, [r0], #-76	; 0x4c
    8810:	00002cc2 	andeq	r2, r0, r2, asr #25
    8814:	4c0ba201 	sfmmi	f2, 1, [fp], {1}
    8818:	01000000 	mrseq	r0, (UNDEF: 0)
    881c:	17001651 	smlsdne	r0, r1, r6, r1
    8820:	a4010000 	strge	r0, [r1], #-0
    8824:	0000af0b 	andeq	sl, r0, fp, lsl #30
    8828:	004c2400 	subeq	r2, ip, r0, lsl #8
    882c:	17011600 	strne	r1, [r1, -r0, lsl #12]
    8830:	a5010000 	strge	r0, [r1, #-0]
    8834:	00004c0b 	andeq	r4, r0, fp, lsl #24
    8838:	004c4300 	subeq	r4, ip, r0, lsl #6
    883c:	25871600 	strcs	r1, [r7, #1536]	; 0x600
    8840:	a5010000 	strge	r0, [r1, #-0]
    8844:	00004c0b 	andeq	r4, r0, fp, lsl #24
    8848:	004c6700 	subeq	r6, ip, r0, lsl #14
    884c:	75200000 	strvc	r0, [r0, #-0]!
    8850:	01000003 	tsteq	r0, r3
    8854:	5b240bcd 	blpl	90b790 <__Stack_Size+0x90b390>
    8858:	00080800 	andeq	r0, r8, r0, lsl #16
    885c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8860:	00001f17 	andeq	r1, r0, r7, lsl pc
    8864:	00261614 	eoreq	r1, r6, r4, lsl r6
    8868:	0bcd0100 	bleq	ff348c70 <SCS_BASE+0x1f33ac70>
    886c:	000004ac 	andeq	r0, r0, ip, lsr #9
    8870:	c2155001 	andsgt	r5, r5, #1
    8874:	0100002c 	tsteq	r0, ip, lsr #32
    8878:	004c0bcd 	subeq	r0, ip, sp, asr #23
    887c:	4c8b0000 	stcmi	0, cr0, [fp], {0}
    8880:	2f000000 	svccs	0x00000000
    8884:	0000206b 	andeq	r2, r0, fp, rrx
    8888:	2e011505 	cfsh32cs	mvfx1, mvfx1, #5
    888c:	3000001f 	andcc	r0, r0, pc, lsl r0
    8890:	0000003a 	andeq	r0, r0, sl, lsr r0
    8894:	0000cf30 	andeq	ip, r0, r0, lsr pc
    8898:	31310000 	teqcc	r1, r0
    889c:	0500001a 	streq	r0, [r0, #-26]
    88a0:	3a300114 	bcc	c08cf8 <__Stack_Size+0xc088f8>
    88a4:	30000000 	andcc	r0, r0, r0
    88a8:	000000cf 	andeq	r0, r0, pc, asr #1
    88ac:	0a280000 	beq	a088b4 <__Stack_Size+0xa084b4>
    88b0:	00040000 	andeq	r0, r4, r0
    88b4:	00001664 	andeq	r1, r0, r4, ror #12
    88b8:	08500104 	ldmdaeq	r0, {r2, r8}^
    88bc:	f1010000 	setend	le
    88c0:	fa00002f 	blx	8984 <__Stack_Size+0x8584>
    88c4:	2c000000 	stccs	0, cr0, [r0], {-0}
    88c8:	4208005b 	andmi	r0, r8, #91	; 0x5b
    88cc:	3d000003 	stccc	0, cr0, [r0, #-12]
    88d0:	02000015 	andeq	r0, r0, #21
    88d4:	0b0c0704 	bleq	30a4ec <__Stack_Size+0x30a0ec>
    88d8:	04020000 	streq	r0, [r2], #-0
    88dc:	0009d005 	andeq	sp, r9, r5
    88e0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    88e4:	00000994 	muleq	r0, r4, r9
    88e8:	65060102 	strvs	r0, [r6, #-258]	; 0x102
    88ec:	0300000b 	movweq	r0, #11
    88f0:	00323375 	eorseq	r3, r2, r5, ror r3
    88f4:	004c2702 	subeq	r2, ip, r2, lsl #14
    88f8:	04020000 	streq	r0, [r2], #-0
    88fc:	000b0707 	andeq	r0, fp, r7, lsl #14
    8900:	31750300 	cmncc	r5, r0, lsl #6
    8904:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    8908:	0000005e 	andeq	r0, r0, lr, asr r0
    890c:	27070202 	strcs	r0, [r7, -r2, lsl #4]
    8910:	0300000d 	movweq	r0, #13
    8914:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    8918:	00006f29 	andeq	r6, r0, r9, lsr #30
    891c:	08010200 	stmdaeq	r1, {r9}
    8920:	00000b63 	andeq	r0, r0, r3, ror #22
    8924:	0004ec04 	andeq	lr, r4, r4, lsl #24
    8928:	812f0200 			; <UNDEFINED> instruction: 0x812f0200
    892c:	05000000 	streq	r0, [r0, #-0]
    8930:	0000004c 	andeq	r0, r0, ip, asr #32
    8934:	00034704 	andeq	r4, r3, r4, lsl #14
    8938:	91300200 	teqls	r0, r0, lsl #4
    893c:	05000000 	streq	r0, [r0, #-0]
    8940:	0000005e 	andeq	r0, r0, lr, asr r0
    8944:	39020106 	stmdbcc	r2, {r1, r2, r8}
    8948:	000000ab 	andeq	r0, r0, fp, lsr #1
    894c:	00196d07 	andseq	r6, r9, r7, lsl #26
    8950:	53080000 	movwpl	r0, #32768	; 0x8000
    8954:	01005445 	tsteq	r0, r5, asr #8
    8958:	08f30400 	ldmeq	r3!, {sl}^
    895c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    8960:	00000096 	muleq	r0, r6, r0
    8964:	0020f504 	eoreq	pc, r0, r4, lsl #10
    8968:	96390200 	ldrtls	r0, [r9], -r0, lsl #4
    896c:	06000000 	streq	r0, [r0], -r0
    8970:	d63b0201 	ldrtle	r0, [fp], -r1, lsl #4
    8974:	07000000 	streq	r0, [r0, -r0]
    8978:	000005f1 	strdeq	r0, [r0], -r1
    897c:	0ae00700 	beq	ff80a584 <SCS_BASE+0x1f7fc584>
    8980:	00010000 	andeq	r0, r1, r0
    8984:	00011404 	andeq	r1, r1, r4, lsl #8
    8988:	c13b0200 	teqgt	fp, r0, lsl #4
    898c:	02000000 	andeq	r0, r0, #0
    8990:	0afe0704 	beq	fff8a5a8 <SCS_BASE+0x1ff7c5a8>
    8994:	1c090000 	stcne	0, cr0, [r9], {-0}
    8998:	a6023803 	strge	r3, [r2], -r3, lsl #16
    899c:	0a000001 	beq	89a8 <__Stack_Size+0x85a8>
    89a0:	03005253 	movweq	r5, #595	; 0x253
    89a4:	0086023a 	addeq	r0, r6, sl, lsr r2
    89a8:	0b000000 	bleq	89b0 <__Stack_Size+0x85b0>
    89ac:	0000094e 	andeq	r0, r0, lr, asr #18
    89b0:	53023b03 	movwpl	r3, #11011	; 0x2b03
    89b4:	02000000 	andeq	r0, r0, #0
    89b8:	0052440a 	subseq	r4, r2, sl, lsl #8
    89bc:	86023c03 	strhi	r3, [r2], -r3, lsl #24
    89c0:	04000000 	streq	r0, [r0], #-0
    89c4:	0009580b 	andeq	r5, r9, fp, lsl #16
    89c8:	023d0300 	eorseq	r0, sp, #0, 6
    89cc:	00000053 	andeq	r0, r0, r3, asr r0
    89d0:	52420a06 	subpl	r0, r2, #24576	; 0x6000
    89d4:	3e030052 	mcrcc	0, 0, r0, cr3, cr2, {2}
    89d8:	00008602 	andeq	r8, r0, r2, lsl #12
    89dc:	620b0800 	andvs	r0, fp, #0, 16
    89e0:	03000009 	movweq	r0, #9
    89e4:	0053023f 	subseq	r0, r3, pc, lsr r2
    89e8:	0a0a0000 	beq	2889f0 <__Stack_Size+0x2885f0>
    89ec:	00315243 	eorseq	r5, r1, r3, asr #4
    89f0:	86024003 	strhi	r4, [r2], -r3
    89f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    89f8:	00096c0b 	andeq	r6, r9, fp, lsl #24
    89fc:	02410300 	subeq	r0, r1, #0, 6
    8a00:	00000053 	andeq	r0, r0, r3, asr r0
    8a04:	52430a0e 	subpl	r0, r3, #57344	; 0xe000
    8a08:	42030032 	andmi	r0, r3, #50	; 0x32
    8a0c:	00008602 	andeq	r8, r0, r2, lsl #12
    8a10:	760b1000 	strvc	r1, [fp], -r0
    8a14:	03000009 	movweq	r0, #9
    8a18:	00530243 	subseq	r0, r3, r3, asr #4
    8a1c:	0a120000 	beq	488a24 <__Stack_Size+0x488624>
    8a20:	00335243 	eorseq	r5, r3, r3, asr #4
    8a24:	86024403 	strhi	r4, [r2], -r3, lsl #8
    8a28:	14000000 	strne	r0, [r0], #-0
    8a2c:	0009800b 	andeq	r8, r9, fp
    8a30:	02450300 	subeq	r0, r5, #0, 6
    8a34:	00000053 	andeq	r0, r0, r3, asr r0
    8a38:	02ae0b16 	adceq	r0, lr, #22528	; 0x5800
    8a3c:	46030000 	strmi	r0, [r3], -r0
    8a40:	00008602 	andeq	r8, r0, r2, lsl #12
    8a44:	8a0b1800 	bhi	2cea4c <__Stack_Size+0x2ce64c>
    8a48:	03000009 	movweq	r0, #9
    8a4c:	00530247 	subseq	r0, r3, r7, asr #4
    8a50:	001a0000 	andseq	r0, sl, r0
    8a54:	00053d0c 	andeq	r3, r5, ip, lsl #26
    8a58:	02480300 	subeq	r0, r8, #0, 6
    8a5c:	000000e8 	andeq	r0, r0, r8, ror #1
    8a60:	1a04100d 	bne	10ca9c <__Stack_Size+0x10c69c>
    8a64:	00000203 	andeq	r0, r0, r3, lsl #4
    8a68:	0002f90e 	andeq	pc, r2, lr, lsl #18
    8a6c:	411c0400 	tstmi	ip, r0, lsl #8
    8a70:	00000000 	andeq	r0, r0, r0
    8a74:	0001990e 	andeq	r9, r1, lr, lsl #18
    8a78:	531d0400 	tstpl	sp, #0, 8
    8a7c:	04000000 	streq	r0, [r0], #-0
    8a80:	0001e90e 	andeq	lr, r1, lr, lsl #18
    8a84:	531e0400 	tstpl	lr, #0, 8
    8a88:	06000000 	streq	r0, [r0], -r0
    8a8c:	000c9b0e 	andeq	r9, ip, lr, lsl #22
    8a90:	531f0400 	tstpl	pc, #0, 8
    8a94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8a98:	0006550e 	andeq	r5, r6, lr, lsl #10
    8a9c:	53200400 	noppl	{0}	; <UNPREDICTABLE>
    8aa0:	0a000000 	beq	8aa8 <__Stack_Size+0x86a8>
    8aa4:	00069c0e 	andeq	r9, r6, lr, lsl #24
    8aa8:	53210400 			; <UNDEFINED> instruction: 0x53210400
    8aac:	0c000000 	stceq	0, cr0, [r0], {-0}
    8ab0:	0c6e0400 	cfstrdeq	mvd0, [lr], #-0
    8ab4:	22040000 	andcs	r0, r4, #0
    8ab8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    8abc:	2504080d 	strcs	r0, [r4, #-2061]	; 0x80d
    8ac0:	00000247 	andeq	r0, r0, r7, asr #4
    8ac4:	002f230e 	eoreq	r2, pc, lr, lsl #6
    8ac8:	53270400 			; <UNDEFINED> instruction: 0x53270400
    8acc:	00000000 	andeq	r0, r0, r0
    8ad0:	002fd10e 	eoreq	sp, pc, lr, lsl #2
    8ad4:	53280400 			; <UNDEFINED> instruction: 0x53280400
    8ad8:	02000000 	andeq	r0, r0, #0
    8adc:	002d590e 	eoreq	r5, sp, lr, lsl #18
    8ae0:	53290400 			; <UNDEFINED> instruction: 0x53290400
    8ae4:	04000000 	streq	r0, [r0], #-0
    8ae8:	002fe30e 	eoreq	lr, pc, lr, lsl #6
    8aec:	532a0400 			; <UNDEFINED> instruction: 0x532a0400
    8af0:	06000000 	streq	r0, [r0], -r0
    8af4:	2d920400 	cfldrscs	mvf0, [r2]
    8af8:	2b040000 	blcs	108b00 <__Stack_Size+0x108700>
    8afc:	0000020e 	andeq	r0, r0, lr, lsl #4
    8b00:	1905140d 	stmdbne	r5, {r0, r2, r3, sl, ip}
    8b04:	00000297 	muleq	r0, r7, r2
    8b08:	0022960e 	eoreq	r9, r2, lr, lsl #12
    8b0c:	411b0500 	tstmi	fp, r0, lsl #10
    8b10:	00000000 	andeq	r0, r0, r0
    8b14:	0021540e 	eoreq	r5, r1, lr, lsl #8
    8b18:	411c0500 	tstmi	ip, r0, lsl #10
    8b1c:	04000000 	streq	r0, [r0], #-0
    8b20:	0022ee0e 	eoreq	lr, r2, lr, lsl #28
    8b24:	411d0500 	tstmi	sp, r0, lsl #10
    8b28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8b2c:	0022b20e 	eoreq	fp, r2, lr, lsl #4
    8b30:	411e0500 	tstmi	lr, r0, lsl #10
    8b34:	0c000000 	stceq	0, cr0, [r0], {-0}
    8b38:	0022290e 	eoreq	r2, r2, lr, lsl #18
    8b3c:	411f0500 	tstmi	pc, r0, lsl #10
    8b40:	10000000 	andne	r0, r0, r0
    8b44:	211c0400 	tstcs	ip, r0, lsl #8
    8b48:	20050000 	andcs	r0, r5, r0
    8b4c:	00000252 	andeq	r0, r0, r2, asr r2
    8b50:	000bbf0f 	andeq	fp, fp, pc, lsl #30
    8b54:	2c5a0100 	ldfcse	f0, [sl], {-0}
    8b58:	9408005b 	strls	r0, [r8], #-91	; 0x5b
    8b5c:	01000000 	mrseq	r0, (UNDEF: 0)
    8b60:	0003729c 	muleq	r3, ip, r2
    8b64:	2ed51000 	cdpcs	0, 13, cr1, cr5, cr0, {0}
    8b68:	5a010000 	bpl	48b70 <__Stack_Size+0x48770>
    8b6c:	00000372 	andeq	r0, r0, r2, ror r3
    8b70:	00004cac 	andeq	r4, r0, ip, lsr #25
    8b74:	005b6011 	subseq	r6, fp, r1, lsl r0
    8b78:	0009e508 	andeq	lr, r9, r8, lsl #10
    8b7c:	0002e000 	andeq	lr, r2, r0
    8b80:	51011200 	mrspl	r1, R9_usr
    8b84:	01123101 	tsteq	r2, r1, lsl #2
    8b88:	000a0350 	andeq	r0, sl, r0, asr r3
    8b8c:	6e130040 	cdpvs	0, 1, cr0, cr3, cr0, {2}
    8b90:	e508005b 	str	r0, [r8, #-91]	; 0x5b
    8b94:	fa000009 	blx	8bc0 <__Stack_Size+0x87c0>
    8b98:	12000002 	andne	r0, r0, #2
    8b9c:	30015101 	andcc	r5, r1, r1, lsl #2
    8ba0:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    8ba4:	0040000a 	subeq	r0, r0, sl
    8ba8:	005b7811 	subseq	r7, fp, r1, lsl r8
    8bac:	0009fc08 	andeq	pc, r9, r8, lsl #24
    8bb0:	00031400 	andeq	r1, r3, r0, lsl #8
    8bb4:	51011200 	mrspl	r1, R9_usr
    8bb8:	01123101 	tsteq	r2, r1, lsl #2
    8bbc:	3d400350 	stclcc	3, cr0, [r0, #-320]	; 0xfffffec0
    8bc0:	88110024 	ldmdahi	r1, {r2, r5}
    8bc4:	fc08005b 	stc2	0, cr0, [r8], {91}	; 0x5b
    8bc8:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    8bcc:	12000003 	andne	r0, r0, #3
    8bd0:	31015101 	tstcc	r1, r1, lsl #2
    8bd4:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    8bd8:	00243e40 	eoreq	r3, r4, r0, asr #28
    8bdc:	005b9811 	subseq	r9, fp, r1, lsl r8
    8be0:	0009fc08 	andeq	pc, r9, r8, lsl #24
    8be4:	00034800 	andeq	r4, r3, r0, lsl #16
    8be8:	51011200 	mrspl	r1, R9_usr
    8bec:	01123101 	tsteq	r2, r1, lsl #2
    8bf0:	3f400350 	svccc	0x00400350
    8bf4:	a8110024 	ldmdage	r1, {r2, r5}
    8bf8:	fc08005b 	stc2	0, cr0, [r8], {91}	; 0x5b
    8bfc:	62000009 	andvs	r0, r0, #9
    8c00:	12000003 	andne	r0, r0, #3
    8c04:	31015101 	tstcc	r1, r1, lsl #2
    8c08:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    8c0c:	00244040 	eoreq	r4, r4, r0, asr #32
    8c10:	005bb614 	subseq	fp, fp, r4, lsl r6
    8c14:	0009fc08 	andeq	pc, r9, r8, lsl #24
    8c18:	51011200 	mrspl	r1, R9_usr
    8c1c:	00003001 	andeq	r3, r0, r1
    8c20:	01a60415 			; <UNDEFINED> instruction: 0x01a60415
    8c24:	410f0000 	mrsmi	r0, CPSR
    8c28:	01000001 	tsteq	r0, r1
    8c2c:	005bc08c 	subseq	ip, fp, ip, lsl #1
    8c30:	00008808 	andeq	r8, r0, r8, lsl #16
    8c34:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    8c38:	10000004 	andne	r0, r0, r4
    8c3c:	00002ed5 	ldrdeq	r2, [r0], -r5
    8c40:	03728c01 	cmneq	r2, #256	; 0x100
    8c44:	4d3c0000 	ldcmi	0, cr0, [ip, #-0]
    8c48:	dc100000 	ldcle	0, cr0, [r0], {-0}
    8c4c:	0100002e 	tsteq	r0, lr, lsr #32
    8c50:	0004158c 	andeq	r1, r4, ip, lsl #11
    8c54:	004d6800 	subeq	r6, sp, r0, lsl #16
    8c58:	1a071600 	bne	1ce460 <__Stack_Size+0x1ce060>
    8c5c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    8c60:	00000041 	andeq	r0, r0, r1, asr #32
    8c64:	00004d94 	muleq	r0, r4, sp
    8c68:	002def16 	eoreq	lr, sp, r6, lsl pc
    8c6c:	418e0100 	orrmi	r0, lr, r0, lsl #2
    8c70:	81000000 	mrshi	r0, (UNDEF: 0)
    8c74:	1600004e 	strne	r0, [r0], -lr, asr #32
    8c78:	00002d4a 	andeq	r2, r0, sl, asr #26
    8c7c:	00418f01 	subeq	r8, r1, r1, lsl #30
    8c80:	4ef80000 	cdpmi	0, 15, cr0, cr8, cr0, {0}
    8c84:	62160000 	andsvs	r0, r6, #0
    8c88:	0100002f 	tsteq	r0, pc, lsr #32
    8c8c:	00004190 	muleq	r0, r0, r1
    8c90:	004f7100 	subeq	r7, pc, r0, lsl #2
    8c94:	2e851600 	cdpcs	6, 8, cr1, cr5, cr0, {0}
    8c98:	91010000 	mrsls	r0, (UNDEF: 1)
    8c9c:	00000041 	andeq	r0, r0, r1, asr #32
    8ca0:	00004d3c 	andeq	r4, r0, ip, lsr sp
    8ca4:	002e9017 	eoreq	r9, lr, r7, lsl r0
    8ca8:	97920100 	ldrls	r0, [r2, r0, lsl #2]
    8cac:	02000002 	andeq	r0, r0, #2
    8cb0:	06185c91 			; <UNDEFINED> instruction: 0x06185c91
    8cb4:	1308005c 	movwne	r0, #32860	; 0x805c
    8cb8:	1200000a 	andne	r0, r0, #10
    8cbc:	91025001 	tstls	r2, r1
    8cc0:	1500005c 	strne	r0, [r0, #-92]	; 0x5c
    8cc4:	00020304 	andeq	r0, r2, r4, lsl #6
    8cc8:	049e0f00 	ldreq	r0, [lr], #3840	; 0xf00
    8ccc:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    8cd0:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
    8cd4:	00000016 	andeq	r0, r0, r6, lsl r0
    8cd8:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xc01
    8cdc:	dc190000 	ldcle	0, cr0, [r9], {-0}
    8ce0:	0100002e 	tsteq	r0, lr, lsr #32
    8ce4:	000415e8 	andeq	r1, r4, r8, ror #11
    8ce8:	00500100 	subseq	r0, r0, r0, lsl #2
    8cec:	002f9e0f 	eoreq	r9, pc, pc, lsl #28
    8cf0:	5eff0100 	cdppl	1, 15, cr0, cr15, cr0, {0}
    8cf4:	2008005c 	andcs	r0, r8, ip, asr r0
    8cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    8cfc:	0004809c 	muleq	r4, ip, r0
    8d00:	2ed51900 	cdpcs	9, 13, cr1, cr5, cr0, {0}
    8d04:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    8d08:	00000372 	andeq	r0, r0, r2, ror r3
    8d0c:	4c105001 	ldcmi	0, cr5, [r0], {1}
    8d10:	0100002e 	tsteq	r0, lr, lsr #32
    8d14:	000480ff 	strdeq	r8, [r4], -pc	; <UNPREDICTABLE>
    8d18:	00500f00 	subseq	r0, r0, r0, lsl #30
    8d1c:	1a071a00 	bne	1cf524 <__Stack_Size+0x1cf124>
    8d20:	01010000 	mrseq	r0, (UNDEF: 1)
    8d24:	00004101 	andeq	r4, r0, r1, lsl #2
    8d28:	00503000 	subseq	r3, r0, r0
    8d2c:	04150000 	ldreq	r0, [r5], #-0
    8d30:	00000247 	andeq	r0, r0, r7, asr #4
    8d34:	002e6f1b 	eoreq	r6, lr, fp, lsl pc
    8d38:	01230100 			; <UNDEFINED> instruction: 0x01230100
    8d3c:	08005c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, ip, lr}
    8d40:	0000000c 	andeq	r0, r0, ip
    8d44:	04ab9c01 	strteq	r9, [fp], #3073	; 0xc01
    8d48:	4c1c0000 	ldcmi	0, cr0, [ip], {-0}
    8d4c:	0100002e 	tsteq	r0, lr, lsr #32
    8d50:	04800123 	streq	r0, [r0], #291	; 0x123
    8d54:	50010000 	andpl	r0, r1, r0
    8d58:	00321b00 	eorseq	r1, r2, r0, lsl #22
    8d5c:	37010000 	strcc	r0, [r1, -r0]
    8d60:	005c8a01 	subseq	r8, ip, r1, lsl #20
    8d64:	00001808 	andeq	r1, r0, r8, lsl #16
    8d68:	de9c0100 	fmllee	f0, f4, f0
    8d6c:	1c000004 	stcne	0, cr0, [r0], {4}
    8d70:	00002ed5 	ldrdeq	r2, [r0], -r5
    8d74:	72013701 	andvc	r3, r1, #262144	; 0x40000
    8d78:	01000003 	tsteq	r0, r3
    8d7c:	16711c50 			; <UNDEFINED> instruction: 0x16711c50
    8d80:	37010000 	strcc	r0, [r1, -r0]
    8d84:	0000d601 	andeq	sp, r0, r1, lsl #12
    8d88:	00510100 	subseq	r0, r1, r0, lsl #2
    8d8c:	000a1c1b 	andeq	r1, sl, fp, lsl ip
    8d90:	01620100 	cmneq	r2, r0, lsl #2
    8d94:	08005ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip, lr}
    8d98:	00000032 	andeq	r0, r0, r2, lsr r0
    8d9c:	05639c01 	strbeq	r9, [r3, #-3073]!	; 0xc01
    8da0:	d51d0000 	ldrle	r0, [sp, #-0]
    8da4:	0100002e 	tsteq	r0, lr, lsr #32
    8da8:	03720162 	cmneq	r2, #-2147483624	; 0x80000018
    8dac:	506a0000 	rsbpl	r0, sl, r0
    8db0:	d71d0000 	ldrle	r0, [sp, -r0]
    8db4:	0100002d 	tsteq	r0, sp, lsr #32
    8db8:	00530162 	subseq	r0, r3, r2, ror #2
    8dbc:	50a30000 	adcpl	r0, r3, r0
    8dc0:	711d0000 	tstvc	sp, r0
    8dc4:	01000016 	tsteq	r0, r6, lsl r0
    8dc8:	00d60162 	sbcseq	r0, r6, r2, ror #2
    8dcc:	50c40000 	sbcpl	r0, r4, r0
    8dd0:	151a0000 	ldrne	r0, [sl, #-0]
    8dd4:	01000030 	tsteq	r0, r0, lsr r0
    8dd8:	00410164 	subeq	r0, r1, r4, ror #2
    8ddc:	50fe0000 	rscspl	r0, lr, r0
    8de0:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
    8de4:	0100002e 	tsteq	r0, lr, lsr #32
    8de8:	00410164 	subeq	r0, r1, r4, ror #2
    8dec:	51220000 			; <UNDEFINED> instruction: 0x51220000
    8df0:	dc1a0000 	ldcle	0, cr0, [sl], {-0}
    8df4:	0100002f 	tsteq	r0, pc, lsr #32
    8df8:	00410164 	subeq	r0, r1, r4, ror #2
    8dfc:	515d0000 	cmppl	sp, r0
    8e00:	851e0000 	ldrhi	r0, [lr, #-0]
    8e04:	0100002e 	tsteq	r0, lr, lsr #32
    8e08:	00410165 	subeq	r0, r1, r5, ror #2
    8e0c:	50010000 	andpl	r0, r1, r0
    8e10:	2dca1b00 	vstrcs	d17, [sl]
    8e14:	9d010000 	stcls	0, cr0, [r1, #-0]
    8e18:	005cd401 	subseq	sp, ip, r1, lsl #8
    8e1c:	00001208 	andeq	r1, r0, r8, lsl #4
    8e20:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    8e24:	1c000005 	stcne	0, cr0, [r0], {5}
    8e28:	00002ed5 	ldrdeq	r2, [r0], -r5
    8e2c:	72019d01 	andvc	r9, r1, #1, 26	; 0x40
    8e30:	01000003 	tsteq	r0, r3
    8e34:	2e621d50 	mcrcs	13, 3, r1, cr2, cr0, {2}
    8e38:	9d010000 	stcls	0, cr0, [r1, #-0]
    8e3c:	00005301 	andeq	r5, r0, r1, lsl #6
    8e40:	0051a500 	subseq	sl, r1, r0, lsl #10
    8e44:	16711c00 	ldrbtne	r1, [r1], -r0, lsl #24
    8e48:	9d010000 	stcls	0, cr0, [r1, #-0]
    8e4c:	0000d601 	andeq	sp, r0, r1, lsl #12
    8e50:	00520100 	subseq	r0, r2, r0, lsl #2
    8e54:	002ea11b 	eoreq	sl, lr, fp, lsl r1
    8e58:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    8e5c:	08005ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, lr}
    8e60:	00000016 	andeq	r0, r0, r6, lsl r0
    8e64:	05db9c01 	ldrbeq	r9, [fp, #3073]	; 0xc01
    8e68:	d51c0000 	ldrle	r0, [ip, #-0]
    8e6c:	0100002e 	tsteq	r0, lr, lsr #32
    8e70:	037201bc 	cmneq	r2, #188, 2	; 0x2f
    8e74:	50010000 	andpl	r0, r1, r0
    8e78:	002eed1d 	eoreq	lr, lr, sp, lsl sp
    8e7c:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    8e80:	00000065 	andeq	r0, r0, r5, rrx
    8e84:	000051df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    8e88:	2fae1b00 	svccs	0x00ae1b00
    8e8c:	d5010000 	strle	r0, [r1, #-0]
    8e90:	005cfc01 	subseq	pc, ip, r1, lsl #24
    8e94:	00001608 	andeq	r1, r0, r8, lsl #12
    8e98:	109c0100 	addsne	r0, ip, r0, lsl #2
    8e9c:	1c000006 	stcne	0, cr0, [r0], {6}
    8ea0:	00002ed5 	ldrdeq	r2, [r0], -r5
    8ea4:	7201d501 	andvc	sp, r1, #4194304	; 0x400000
    8ea8:	01000003 	tsteq	r0, r3
    8eac:	2dbd1d50 	ldccs	13, cr1, [sp, #320]!	; 0x140
    8eb0:	d5010000 	strle	r0, [r1, #-0]
    8eb4:	00005301 	andeq	r5, r0, r1, lsl #6
    8eb8:	00520000 	subseq	r0, r2, r0
    8ebc:	2f1b0000 	svccs	0x001b0000
    8ec0:	0100002f 	tsteq	r0, pc, lsr #32
    8ec4:	5d1201ea 	ldfpls	f0, [r2, #-936]	; 0xfffffc58
    8ec8:	00180800 	andseq	r0, r8, r0, lsl #16
    8ecc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ed0:	00000643 	andeq	r0, r0, r3, asr #12
    8ed4:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    8ed8:	01ea0100 	mvneq	r0, r0, lsl #2
    8edc:	00000372 	andeq	r0, r0, r2, ror r3
    8ee0:	711c5001 	tstvc	ip, r1
    8ee4:	01000016 	tsteq	r0, r6, lsl r0
    8ee8:	00d601ea 	sbcseq	r0, r6, sl, ror #3
    8eec:	51010000 	mrspl	r0, (UNDEF: 1)
    8ef0:	2e201b00 	vmulcs.f64	d1, d0, d0
    8ef4:	0a010000 	beq	48efc <__Stack_Size+0x48afc>
    8ef8:	005d2a02 	subseq	r2, sp, r2, lsl #20
    8efc:	00001608 	andeq	r1, r0, r8, lsl #12
    8f00:	789c0100 	ldmvc	ip, {r8}
    8f04:	1c000006 	stcne	0, cr0, [r0], {6}
    8f08:	00002ed5 	ldrdeq	r2, [r0], -r5
    8f0c:	72020a01 	andvc	r0, r2, #4096	; 0x1000
    8f10:	01000003 	tsteq	r0, r3
    8f14:	2d771d50 	ldclcs	13, cr1, [r7, #-320]!	; 0xfffffec0
    8f18:	0a010000 	beq	48f20 <__Stack_Size+0x48b20>
    8f1c:	00005302 	andeq	r5, r0, r2, lsl #6
    8f20:	00522100 	subseq	r2, r2, r0, lsl #2
    8f24:	551b0000 	ldrpl	r0, [fp, #-0]
    8f28:	0100002f 	tsteq	r0, pc, lsr #32
    8f2c:	5d40021f 	sfmpl	f0, 2, [r0, #-124]	; 0xffffff84
    8f30:	00180800 	andseq	r0, r8, r0, lsl #16
    8f34:	9c010000 	stcls	0, cr0, [r1], {-0}
    8f38:	000006ab 	andeq	r0, r0, fp, lsr #13
    8f3c:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    8f40:	021f0100 	andseq	r0, pc, #0, 2
    8f44:	00000372 	andeq	r0, r0, r2, ror r3
    8f48:	711c5001 	tstvc	ip, r1
    8f4c:	01000016 	tsteq	r0, r6, lsl r0
    8f50:	00d6021f 	sbcseq	r0, r6, pc, lsl r2
    8f54:	51010000 	mrspl	r0, (UNDEF: 1)
    8f58:	03cf1b00 	biceq	r1, pc, #0, 22
    8f5c:	3b010000 	blcc	48f64 <__Stack_Size+0x48b64>
    8f60:	005d5802 	subseq	r5, sp, r2, lsl #16
    8f64:	00000808 	andeq	r0, r0, r8, lsl #16
    8f68:	e09c0100 	adds	r0, ip, r0, lsl #2
    8f6c:	1c000006 	stcne	0, cr0, [r0], {6}
    8f70:	00002ed5 	ldrdeq	r2, [r0], -r5
    8f74:	72023b01 	andvc	r3, r2, #1024	; 0x400
    8f78:	01000003 	tsteq	r0, r3
    8f7c:	17ec1d50 	ubfxne	r1, r0, #26, #13
    8f80:	3b010000 	blcc	48f88 <__Stack_Size+0x48b88>
    8f84:	00005302 	andeq	r5, r0, r2, lsl #6
    8f88:	00524200 	subseq	r4, r2, r0, lsl #4
    8f8c:	2a1f0000 	bcs	7c8f94 <__Stack_Size+0x7c8b94>
    8f90:	01000003 	tsteq	r0, r3
    8f94:	0053024e 	subseq	r0, r3, lr, asr #4
    8f98:	5d600000 	stclpl	0, cr0, [r0, #-0]
    8f9c:	00080800 	andeq	r0, r8, r0, lsl #16
    8fa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8fa4:	0000070b 	andeq	r0, r0, fp, lsl #14
    8fa8:	002ed51d 	eoreq	sp, lr, sp, lsl r5
    8fac:	024e0100 	subeq	r0, lr, #0, 2
    8fb0:	00000372 	andeq	r0, r0, r2, ror r3
    8fb4:	00005263 	andeq	r5, r0, r3, ror #4
    8fb8:	2ec51b00 	vdivcs.f64	d17, d5, d0
    8fbc:	60010000 	andvs	r0, r1, r0
    8fc0:	005d6802 	subseq	r6, sp, r2, lsl #16
    8fc4:	00000c08 	andeq	r0, r0, r8, lsl #24
    8fc8:	309c0100 	addscc	r0, ip, r0, lsl #2
    8fcc:	1c000007 	stcne	0, cr0, [r0], {7}
    8fd0:	00002ed5 	ldrdeq	r2, [r0], -r5
    8fd4:	72026001 	andvc	r6, r2, #1
    8fd8:	01000003 	tsteq	r0, r3
    8fdc:	b21b0050 	andslt	r0, fp, #80	; 0x50
    8fe0:	0100002e 	tsteq	r0, lr, lsr #32
    8fe4:	5d740273 	lfmpl	f0, 2, [r4, #-460]!	; 0xfffffe34
    8fe8:	00120800 	andseq	r0, r2, r0, lsl #16
    8fec:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ff0:	00000765 	andeq	r0, r0, r5, ror #14
    8ff4:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    8ff8:	02730100 	rsbseq	r0, r3, #0, 2
    8ffc:	00000372 	andeq	r0, r0, r2, ror r3
    9000:	101d5001 	andsne	r5, sp, r1
    9004:	0100002e 	tsteq	r0, lr, lsr #32
    9008:	00650273 	rsbeq	r0, r5, r3, ror r2
    900c:	52840000 	addpl	r0, r4, #0
    9010:	1b000000 	blne	9018 <__Stack_Size+0x8c18>
    9014:	00002d64 	andeq	r2, r0, r4, ror #26
    9018:	86028901 	strhi	r8, [r2], -r1, lsl #18
    901c:	1208005d 	andne	r0, r8, #93	; 0x5d
    9020:	01000000 	mrseq	r0, (UNDEF: 0)
    9024:	00079a9c 	muleq	r7, ip, sl
    9028:	2ed51c00 	cdpcs	12, 13, cr1, cr5, cr0, {0}
    902c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9030:	00037202 	andeq	r7, r3, r2, lsl #4
    9034:	1d500100 	ldfnee	f0, [r0, #-0]
    9038:	00002fc1 	andeq	r2, r0, r1, asr #31
    903c:	65028901 	strvs	r8, [r2, #-2305]	; 0x901
    9040:	a5000000 	strge	r0, [r0, #-0]
    9044:	00000052 	andeq	r0, r0, r2, asr r0
    9048:	002f8b1b 	eoreq	r8, pc, fp, lsl fp	; <UNPREDICTABLE>
    904c:	029f0100 	addseq	r0, pc, #0, 2
    9050:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
    9054:	00000018 	andeq	r0, r0, r8, lsl r0
    9058:	07cd9c01 	strbeq	r9, [sp, r1, lsl #24]
    905c:	d51c0000 	ldrle	r0, [ip, #-0]
    9060:	0100002e 	tsteq	r0, lr, lsr #32
    9064:	0372029f 	cmneq	r2, #-268435447	; 0xf0000009
    9068:	50010000 	andpl	r0, r1, r0
    906c:	0016711c 	andseq	r7, r6, ip, lsl r1
    9070:	029f0100 	addseq	r0, pc, #0, 2
    9074:	000000d6 	ldrdeq	r0, [r0], -r6
    9078:	1b005101 	blne	1d484 <__Stack_Size+0x1d084>
    907c:	00002f74 	andeq	r2, r0, r4, ror pc
    9080:	b002bc01 	andlt	fp, r2, r1, lsl #24
    9084:	1808005d 	stmdane	r8, {r0, r2, r3, r4, r6}
    9088:	01000000 	mrseq	r0, (UNDEF: 0)
    908c:	0008009c 	muleq	r8, ip, r0
    9090:	2ed51c00 	cdpcs	12, 13, cr1, cr5, cr0, {0}
    9094:	bc010000 	stclt	0, cr0, [r1], {-0}
    9098:	00037202 	andeq	r7, r3, r2, lsl #4
    909c:	1c500100 	ldfnee	f0, [r0], {-0}
    90a0:	00001671 	andeq	r1, r0, r1, ror r6
    90a4:	d602bc01 	strle	fp, [r2], -r1, lsl #24
    90a8:	01000000 	mrseq	r0, (UNDEF: 0)
    90ac:	a91b0051 	ldmdbge	fp, {r0, r4, r6}
    90b0:	0100002d 	tsteq	r0, sp, lsr #32
    90b4:	5dc802d9 	sfmpl	f0, 2, [r8, #868]	; 0x364
    90b8:	00180800 	andseq	r0, r8, r0, lsl #16
    90bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    90c0:	00000833 	andeq	r0, r0, r3, lsr r8
    90c4:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    90c8:	02d90100 	sbcseq	r0, r9, #0, 2
    90cc:	00000372 	andeq	r0, r0, r2, ror r3
    90d0:	711c5001 	tstvc	ip, r1
    90d4:	01000016 	tsteq	r0, r6, lsl r0
    90d8:	00d602d9 	ldrsbeq	r0, [r6], #41	; 0x29
    90dc:	51010000 	mrspl	r0, (UNDEF: 1)
    90e0:	2f121b00 	svccs	0x00121b00
    90e4:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    90e8:	005de002 	subseq	lr, sp, r2
    90ec:	00001608 	andeq	r1, r0, r8, lsl #12
    90f0:	689c0100 	ldmvs	ip, {r8}
    90f4:	1c000008 	stcne	0, cr0, [r0], {8}
    90f8:	00002ed5 	ldrdeq	r2, [r0], -r5
    90fc:	7202f801 	andvc	pc, r2, #65536	; 0x10000
    9100:	01000003 	tsteq	r0, r3
    9104:	2de01d50 	stclcs	13, cr1, [r0, #320]!	; 0x140
    9108:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    910c:	00005302 	andeq	r5, r0, r2, lsl #6
    9110:	0052c600 	subseq	ip, r2, r0, lsl #12
    9114:	471b0000 	ldrmi	r0, [fp, -r0]
    9118:	0100002f 	tsteq	r0, pc, lsr #32
    911c:	5df6030d 	ldclpl	3, cr0, [r6, #52]!	; 0x34
    9120:	00180800 	andseq	r0, r8, r0, lsl #16
    9124:	9c010000 	stcls	0, cr0, [r1], {-0}
    9128:	0000089b 	muleq	r0, fp, r8
    912c:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    9130:	030d0100 	movweq	r0, #53504	; 0xd100
    9134:	00000372 	andeq	r0, r0, r2, ror r3
    9138:	711c5001 	tstvc	ip, r1
    913c:	01000016 	tsteq	r0, r6, lsl r0
    9140:	00d6030d 	sbcseq	r0, r6, sp, lsl #6
    9144:	51010000 	mrspl	r0, (UNDEF: 1)
    9148:	07db1f00 	ldrbeq	r1, [fp, r0, lsl #30]
    914c:	35010000 	strcc	r0, [r1, #-0]
    9150:	0000ab03 	andeq	sl, r0, r3, lsl #22
    9154:	005e0e00 	subseq	r0, lr, r0, lsl #28
    9158:	00000c08 	andeq	r0, r0, r8, lsl #24
    915c:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    9160:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    9164:	00002ed5 	ldrdeq	r2, [r0], -r5
    9168:	72033501 	andvc	r3, r3, #4194304	; 0x400000
    916c:	e7000003 	str	r0, [r0, -r3]
    9170:	1c000052 	stcne	0, cr0, [r0], {82}	; 0x52
    9174:	00002e41 	andeq	r2, r0, r1, asr #28
    9178:	53033501 	movwpl	r3, #13569	; 0x3501
    917c:	01000000 	mrseq	r0, (UNDEF: 0)
    9180:	17001a51 	smlsdne	r0, r1, sl, r1
    9184:	37010000 	strcc	r0, [r1, -r0]
    9188:	0000ab03 	andeq	sl, r0, r3, lsl #22
    918c:	00530800 	subseq	r0, r3, r0, lsl #16
    9190:	021b0000 	andseq	r0, fp, #0
    9194:	0100002f 	tsteq	r0, pc, lsr #32
    9198:	5e1a0369 	cdppl	3, 1, cr0, cr10, cr9, {3}
    919c:	00080800 	andeq	r0, r8, r0, lsl #16
    91a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    91a4:	00000919 	andeq	r0, r0, r9, lsl r9
    91a8:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    91ac:	03690100 	cmneq	r9, #0, 2
    91b0:	00000372 	andeq	r0, r0, r2, ror r3
    91b4:	411d5001 	tstmi	sp, r1
    91b8:	0100002e 	tsteq	r0, lr, lsr #32
    91bc:	00530369 	subseq	r0, r3, r9, ror #6
    91c0:	53300000 	teqpl	r0, #0
    91c4:	1f000000 	svcne	0x00000000
    91c8:	000000e8 	andeq	r0, r0, r8, ror #1
    91cc:	b6038a01 	strlt	r8, [r3], -r1, lsl #20
    91d0:	22000000 	andcs	r0, r0, #0
    91d4:	3e08005e 	mcrcc	0, 0, r0, cr8, cr14, {2}
    91d8:	01000000 	mrseq	r0, (UNDEF: 0)
    91dc:	0009949c 	muleq	r9, ip, r4
    91e0:	2ed51d00 	cdpcs	13, 13, cr1, cr5, cr0, {0}
    91e4:	8a010000 	bhi	491ec <__Stack_Size+0x48dec>
    91e8:	00037203 	andeq	r7, r3, r3, lsl #4
    91ec:	00535100 	subseq	r5, r3, r0, lsl #2
    91f0:	2dd71d00 	ldclcs	13, cr1, [r7]
    91f4:	8a010000 	bhi	491fc <__Stack_Size+0x48dfc>
    91f8:	00005303 	andeq	r5, r0, r3, lsl #6
    91fc:	00538b00 	subseq	r8, r3, r0, lsl #22
    9200:	2efb1a00 	vmovcs.f32	s3, #176	; 0xb0
    9204:	8c010000 	stchi	0, cr0, [r1], {-0}
    9208:	00004103 	andeq	r4, r0, r3, lsl #2
    920c:	0053b700 	subseq	fp, r3, r0, lsl #14
    9210:	2fdc1a00 	svccs	0x00dc1a00
    9214:	8c010000 	stchi	0, cr0, [r1], {-0}
    9218:	00004103 	andeq	r4, r0, r3, lsl #2
    921c:	00543500 	subseq	r3, r4, r0, lsl #10
    9220:	30151a00 	andscc	r1, r5, r0, lsl #20
    9224:	8c010000 	stchi	0, cr0, [r1], {-0}
    9228:	00004103 	andeq	r4, r0, r3, lsl #2
    922c:	00547d00 	subseq	r7, r4, r0, lsl #26
    9230:	17001a00 	strne	r1, [r0, -r0, lsl #20]
    9234:	8d010000 	stchi	0, cr0, [r1, #-0]
    9238:	0000b603 	andeq	fp, r0, r3, lsl #12
    923c:	0054a100 	subseq	sl, r4, r0, lsl #2
    9240:	f81b0000 			; <UNDEFINED> instruction: 0xf81b0000
    9244:	0100002d 	tsteq	r0, sp, lsr #32
    9248:	5e6003da 	mcrpl	3, 3, r0, cr0, cr10, {6}
    924c:	000e0800 	andeq	r0, lr, r0, lsl #16
    9250:	9c010000 	stcls	0, cr0, [r1], {-0}
    9254:	000009e5 	andeq	r0, r0, r5, ror #19
    9258:	002ed51c 	eoreq	sp, lr, ip, lsl r5
    925c:	03da0100 	bicseq	r0, sl, #0, 2
    9260:	00000372 	andeq	r0, r0, r2, ror r3
    9264:	d71d5001 	ldrle	r5, [sp, -r1]
    9268:	0100002d 	tsteq	r0, sp, lsr #32
    926c:	005303da 	ldrsbeq	r0, [r3], #-58	; 0xffffffc6
    9270:	54c00000 	strbpl	r0, [r0], #0
    9274:	fb1a0000 	blx	68927e <__Stack_Size+0x688e7e>
    9278:	0100002e 	tsteq	r0, lr, lsr #32
    927c:	005303dc 	ldrsbeq	r0, [r3], #-60	; 0xffffffc4
    9280:	54e10000 	strbtpl	r0, [r1], #0
    9284:	dc200000 	stcle	0, cr0, [r0], #-0
    9288:	0100002f 	tsteq	r0, pc, lsr #32
    928c:	005303dc 	ldrsbeq	r0, [r3], #-60	; 0xffffffc4
    9290:	21000000 	mrscs	r0, (UNDEF: 0)
    9294:	00001a31 	andeq	r1, r0, r1, lsr sl
    9298:	fc011405 	stc2	4, cr1, [r1], {5}
    929c:	22000009 	andcs	r0, r0, #9
    92a0:	00000041 	andeq	r0, r0, r1, asr #32
    92a4:	0000d622 	andeq	sp, r0, r2, lsr #12
    92a8:	6b210000 	blvs	8492b0 <__Stack_Size+0x848eb0>
    92ac:	05000020 	streq	r0, [r0, #-32]
    92b0:	0a130115 	beq	4c970c <__Stack_Size+0x4c930c>
    92b4:	41220000 			; <UNDEFINED> instruction: 0x41220000
    92b8:	22000000 	andcs	r0, r0, #0
    92bc:	000000d6 	ldrdeq	r0, [r0], -r6
    92c0:	230f2100 	movwcs	r2, #61696	; 0xf100
    92c4:	10050000 	andne	r0, r5, r0
    92c8:	000a2501 	andeq	r2, sl, r1, lsl #10
    92cc:	0a252200 	beq	951ad4 <__Stack_Size+0x9516d4>
    92d0:	15000000 	strne	r0, [r0, #-0]
    92d4:	00029704 	andeq	r9, r2, r4, lsl #14
    92d8:	00610000 	rsbeq	r0, r1, r0
    92dc:	00020000 	andeq	r0, r2, r0
    92e0:	00001851 	andeq	r1, r0, r1, asr r8
    92e4:	17170104 	ldrne	r0, [r7, -r4, lsl #2]
    92e8:	5e700000 	cdppl	0, 7, cr0, cr0, cr0, {0}
    92ec:	5ede0800 	cdppl	8, 13, cr0, cr14, cr0, {0}
    92f0:	74730800 	ldrbtvc	r0, [r3], #-2048	; 0x800
    92f4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    92f8:	5f783031 	svcpl	0x00783031
    92fc:	2f62696c 	svccs	0x0062696c
    9300:	2f637273 	svccs	0x00637273
    9304:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
    9308:	336d7865 	cmncc	sp, #6619136	; 0x650000
    930c:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    9310:	732e6f72 			; <UNDEFINED> instruction: 0x732e6f72
    9314:	6f682f00 	svcvs	0x00682f00
    9318:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
    931c:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0x56c
    9320:	4d2f746e 	cfstrsmi	mvf7, [pc, #-440]!	; 9170 <__Stack_Size+0x8d70>
    9324:	3330314f 	teqcc	r0, #-1073741805	; 0xc0000013
    9328:	626f522f 	rsbvs	r5, pc, #-268435454	; 0xf0000002
    932c:	4700746f 	strmi	r7, [r0, -pc, ror #8]
    9330:	4120554e 			; <UNDEFINED> instruction: 0x4120554e
    9334:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
    9338:	302e3432 	eorcc	r3, lr, r2, lsr r4
    933c:	0f800100 	svceq	0x00800100
    9340:	04000001 	streq	r0, [r0], #-1
    9344:	00186500 	andseq	r6, r8, r0, lsl #10
    9348:	50010400 	andpl	r0, r1, r0, lsl #8
    934c:	01000008 	tsteq	r0, r8
    9350:	00003058 	andeq	r3, r0, r8, asr r0
    9354:	000000fa 	strdeq	r0, [r0], -sl
    9358:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
    935c:	00000050 	andeq	r0, r0, r0, asr r0
    9360:	000017bb 			; <UNDEFINED> instruction: 0x000017bb
    9364:	d0050402 	andle	r0, r5, r2, lsl #8
    9368:	02000009 	andeq	r0, r0, #9
    936c:	09940502 	ldmibeq	r4, {r1, r8, sl}
    9370:	01020000 	mrseq	r0, (UNDEF: 2)
    9374:	000b6506 	andeq	r6, fp, r6, lsl #10
    9378:	07040200 	streq	r0, [r4, -r0, lsl #4]
    937c:	00000b07 	andeq	r0, r0, r7, lsl #22
    9380:	27070202 	strcs	r0, [r7, -r2, lsl #4]
    9384:	0200000d 	andeq	r0, r0, #13
    9388:	0b630801 	bleq	18cb394 <__Stack_Size+0x18caf94>
    938c:	04020000 	streq	r0, [r2], #-0
    9390:	000afe07 	andeq	pc, sl, r7, lsl #28
    9394:	302d0300 	eorcc	r0, sp, r0, lsl #6
    9398:	91010000 	mrsls	r0, (UNDEF: 1)
    939c:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
    93a0:	00000050 	andeq	r0, r0, r0, asr r0
    93a4:	008f9c01 	addeq	r9, pc, r1, lsl #24
    93a8:	8a040000 	bhi	1093b0 <__Stack_Size+0x108fb0>
    93ac:	01000030 	tsteq	r0, r0, lsr r0
    93b0:	00008f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    93b4:	303b0500 	eorscc	r0, fp, r0, lsl #10
    93b8:	93010000 	movwls	r0, #4096	; 0x1000
    93bc:	0000008f 	andeq	r0, r0, pc, lsl #1
    93c0:	00005508 	andeq	r5, r0, r8, lsl #10
    93c4:	005f1206 	subseq	r1, pc, r6, lsl #4
    93c8:	00010008 	andeq	r0, r1, r8
    93cc:	04070000 	streq	r0, [r7], #-0
    93d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    93d4:	00304308 	eorseq	r4, r0, r8, lsl #6
    93d8:	3a190100 	bcc	6497e0 <__Stack_Size+0x6493e0>
    93dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    93e0:	00003026 	andeq	r3, r0, r6, lsr #32
    93e4:	003a1b01 	eorseq	r1, sl, r1, lsl #22
    93e8:	51080000 	mrspl	r0, (UNDEF: 8)
    93ec:	01000030 	tsteq	r0, r0, lsr r0
    93f0:	00003a1d 	andeq	r3, r0, sp, lsl sl
    93f4:	30910800 	addscc	r0, r1, r0, lsl #16
    93f8:	20010000 	andcs	r0, r1, r0
    93fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    9400:	00304b08 	eorseq	r4, r0, r8, lsl #22
    9404:	3a220100 	bcc	88980c <__Stack_Size+0x88940c>
    9408:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    940c:	0000301e 	andeq	r3, r0, lr, lsl r0
    9410:	e30a2501 	movw	r2, #42241	; 0xa501
    9414:	e3000000 	movw	r0, #0
    9418:	0b000000 	bleq	9420 <__Stack_Size+0x9020>
    941c:	0000004f 	andeq	r0, r0, pc, asr #32
    9420:	0407004c 	streq	r0, [r7], #-76	; 0x4c
    9424:	000000e9 	andeq	r0, r0, r9, ror #1
    9428:	307d0d0c 	rsbscc	r0, sp, ip, lsl #26
    942c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    9430:	000000fb 	strdeq	r0, [r0], -fp
    9434:	30000305 	andcc	r0, r0, r5, lsl #6
    9438:	d30e0800 	movwle	r0, #59392	; 0xe800
    943c:	0f000000 	svceq	0x00000000
    9440:	00000adb 	ldrdeq	r0, [r0], -fp
    9444:	010b2c01 	tsteq	fp, r1, lsl #24
    9448:	04100000 	ldreq	r0, [r0], #-0
    944c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	08030016 	stmdaeq	r3, {r1, r2, r4}
      18:	0b3b0b3a 	bleq	ec2d08 <__Stack_Size+0xec2908>
      1c:	00001349 	andeq	r1, r0, r9, asr #6
      20:	0b002403 	bleq	9034 <__Stack_Size+0x8c34>
      24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      28:	0400000e 	streq	r0, [r0], #-14
      2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      30:	0b3b0b3a 	bleq	ec2d20 <__Stack_Size+0xec2920>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      40:	0b0b0104 	bleq	2c0458 <__Stack_Size+0x2c0058>
      44:	0b3b0b3a 	bleq	ec2d34 <__Stack_Size+0xec2934>
      48:	00001301 	andeq	r1, r0, r1, lsl #6
      4c:	03002807 	movweq	r2, #2055	; 0x807
      50:	000d1c0e 	andeq	r1, sp, lr, lsl #24
      54:	00280800 	eoreq	r0, r8, r0, lsl #16
      58:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      5c:	13090000 	movwne	r0, #36864	; 0x9000
      60:	3a0b0b01 	bcc	2c2c6c <__Stack_Size+0x2c286c>
      64:	01053b0b 	tsteq	r5, fp, lsl #22
      68:	0a000013 	beq	bc <_Minimum_Stack_Size-0x44>
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      74:	0b381349 	bleq	e04da0 <__Stack_Size+0xe049a0>
      78:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      7c:	3a0e0300 	bcc	380c84 <__Stack_Size+0x380884>
      80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      84:	000b3813 	andeq	r3, fp, r3, lsl r8
      88:	00160c00 	andseq	r0, r6, r0, lsl #24
      8c:	0b3a0e03 	bleq	e838a0 <__Stack_Size+0xe834a0>
      90:	1349053b 	movtne	r0, #38203	; 0x953b
      94:	130d0000 	movwne	r0, #53248	; 0xd000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c28a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2998>
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe049d8>
      b0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
      b4:	03193f01 	tsteq	r9, #1, 30
      b8:	3b0b3a0e 	blcc	2ce8f8 <__Stack_Size+0x2ce4f8>
      bc:	20192705 	andscs	r2, r9, r5, lsl #14
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	00051000 	andeq	r1, r5, r0
      c8:	0b3a0e03 	bleq	e838dc <__Stack_Size+0xe834dc>
      cc:	1349053b 	movtne	r0, #38203	; 0x953b
      d0:	24110000 	ldrcs	r0, [r1], #-0
      d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      d8:	0008030b 	andeq	r0, r8, fp, lsl #6
      dc:	000f1200 	andeq	r1, pc, r0, lsl #4
      e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      e4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      e8:	03193f01 	tsteq	r9, #1, 30
      ec:	3b0b3a0e 	blcc	2ce92c <__Stack_Size+0x2ce52c>
      f0:	11192705 	tstne	r9, r5, lsl #14
      f4:	40061201 	andmi	r1, r6, r1, lsl #4
      f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
     100:	03003414 	movweq	r3, #1044	; 0x414
     104:	3b0b3a0e 	blcc	2ce944 <__Stack_Size+0x2ce544>
     108:	02134905 	andseq	r4, r3, #81920	; 0x14000
     10c:	15000017 	strne	r0, [r0, #-23]
     110:	00018289 	andeq	r8, r1, r9, lsl #5
     114:	13310111 	teqne	r1, #1073741828	; 0x40000004
     118:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     11c:	11010182 	smlabbne	r1, r2, r1, r0
     120:	01133101 	tsteq	r3, r1, lsl #2
     124:	17000013 	smladne	r0, r3, r0, r0
     128:	0001828a 	andeq	r8, r1, sl, lsl #5
     12c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     130:	18000018 	stmdane	r0, {r3, r4}
     134:	01018289 	smlabbeq	r1, r9, r2, r8
     138:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     13c:	01133119 	tsteq	r3, r9, lsl r1
     140:	19000013 	stmdbne	r0, {r0, r1, r4}
     144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     14c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     150:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     154:	11010182 	smlabbne	r1, r2, r1, r0
     158:	00133101 	andseq	r3, r3, r1, lsl #2
     15c:	82891b00 	addhi	r1, r9, #0, 22
     160:	01110101 	tsteq	r1, r1, lsl #2
     164:	31194295 			; <UNDEFINED> instruction: 0x31194295
     168:	1c000013 	stcne	0, cr0, [r0], {19}
     16c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     170:	0b3a0e03 	bleq	e83984 <__Stack_Size+0xe83584>
     174:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     178:	06120111 			; <UNDEFINED> instruction: 0x06120111
     17c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     180:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
     184:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     188:	0b3a0e03 	bleq	e8399c <__Stack_Size+0xe8359c>
     18c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     190:	01111349 	tsteq	r1, r9, asr #6
     194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     198:	00194297 	mulseq	r9, r7, r2
     19c:	00051e00 	andeq	r1, r5, r0, lsl #28
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001702 	andeq	r1, r0, r2, lsl #14
     1ac:	3f012e1f 	svccc	0x00012e1f
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	11134919 	tstne	r3, r9, lsl r9
     1bc:	40061201 	andmi	r1, r6, r1, lsl #4
     1c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1c4:	00001301 	andeq	r1, r0, r1, lsl #6
     1c8:	3f012e20 	svccc	0x00012e20
     1cc:	3a0e0319 	bcc	380e38 <__Stack_Size+0x380a38>
     1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1d8:	97184006 	ldrls	r4, [r8, -r6]
     1dc:	13011942 	movwne	r1, #6466	; 0x1942
     1e0:	05210000 	streq	r0, [r1, #-0]!
     1e4:	3a080300 	bcc	200dec <__Stack_Size+0x2009ec>
     1e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1ec:	00170213 	andseq	r0, r7, r3, lsl r2
     1f0:	00342200 	eorseq	r2, r4, r0, lsl #4
     1f4:	0b3a0e03 	bleq	e83a08 <__Stack_Size+0xe83608>
     1f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1fc:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     200:	11000182 	smlabbne	r0, r2, r1, r0
     204:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     208:	00001331 	andeq	r1, r0, r1, lsr r3
     20c:	03000524 	movweq	r0, #1316	; 0x524
     210:	3b0b3a0e 	blcc	2cea50 <__Stack_Size+0x2ce650>
     214:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     218:	25000017 	strcs	r0, [r0, #-23]
     21c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     220:	0b3b0b3a 	bleq	ec2f10 <__Stack_Size+0xec2b10>
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     22c:	03193f01 	tsteq	r9, #1, 30
     230:	3b0b3a0e 	blcc	2cea70 <__Stack_Size+0x2ce670>
     234:	12011105 	andne	r1, r1, #1073741825	; 0x40000001
     238:	97184006 	ldrls	r4, [r8, -r6]
     23c:	13011942 	movwne	r1, #6466	; 0x1942
     240:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     244:	11133101 	tstne	r3, r1, lsl #2
     248:	40061201 	andmi	r1, r6, r1, lsl #4
     24c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     250:	00001301 	andeq	r1, r0, r1, lsl #6
     254:	31000528 	tstcc	r0, r8, lsr #10
     258:	00170213 	andseq	r0, r7, r3, lsl r2
     25c:	00052900 	andeq	r2, r5, r0, lsl #18
     260:	0b3a0803 	bleq	e82274 <__Stack_Size+0xe81e74>
     264:	1349053b 	movtne	r0, #38203	; 0x953b
     268:	00001702 	andeq	r1, r0, r2, lsl #14
     26c:	3f012e2a 	svccc	0x00012e2a
     270:	3a080319 	bcc	200edc <__Stack_Size+0x200adc>
     274:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     278:	01193c13 	tsteq	r9, r3, lsl ip
     27c:	2b000013 	blcs	2d0 <_Minimum_Stack_Size+0x1d0>
     280:	00000018 	andeq	r0, r0, r8, lsl r0
     284:	0300342c 	movweq	r3, #1068	; 0x42c
     288:	3b0b3a08 	blcc	2ceab0 <__Stack_Size+0x2ce6b0>
     28c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     290:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
     294:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     298:	00001301 	andeq	r1, r0, r1, lsl #6
     29c:	3f012e2e 	svccc	0x00012e2e
     2a0:	3a0e0319 	bcc	380f0c <__Stack_Size+0x380b0c>
     2a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2a8:	01193c13 	tsteq	r9, r3, lsl ip
     2ac:	2f000013 	svccs	0x00000013
     2b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2b8:	0b1c1349 	bleq	704fe4 <__Stack_Size+0x704be4>
     2bc:	0b300000 	bleq	c002c4 <__Stack_Size+0xbffec4>
     2c0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     2c4:	00130106 	andseq	r0, r3, r6, lsl #2
     2c8:	011d3100 	tsteq	sp, r0, lsl #2
     2cc:	01111331 	tsteq	r1, r1, lsr r3
     2d0:	0b580612 	bleq	1601b20 <__Stack_Size+0x1601720>
     2d4:	00000559 	andeq	r0, r0, r9, asr r5
     2d8:	03000532 	movweq	r0, #1330	; 0x532
     2dc:	3b0b3a0e 	blcc	2ceb1c <__Stack_Size+0x2ce71c>
     2e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     2e4:	33000018 	movwcc	r0, #24
     2e8:	13490101 	movtne	r0, #37121	; 0x9101
     2ec:	00001301 	andeq	r1, r0, r1, lsl #6
     2f0:	49002134 	stmdbmi	r0, {r2, r4, r5, r8, sp}
     2f4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     2f8:	00343500 	eorseq	r3, r4, r0, lsl #10
     2fc:	0b3a0e03 	bleq	e83b10 <__Stack_Size+0xe83710>
     300:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     304:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     308:	34360000 	ldrtcc	r0, [r6], #-0
     30c:	3a080300 	bcc	200f14 <__Stack_Size+0x200b14>
     310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     314:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     318:	37000018 	smladcc	r0, r8, r0, r0
     31c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     320:	0b3a0e03 	bleq	e83b34 <__Stack_Size+0xe83734>
     324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     328:	0000193c 	andeq	r1, r0, ip, lsr r9
     32c:	3f012e38 	svccc	0x00012e38
     330:	3a0e0319 	bcc	380f9c <__Stack_Size+0x380b9c>
     334:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     338:	01193c19 	tsteq	r9, r9, lsl ip
     33c:	39000013 	stmdbcc	r0, {r0, r1, r4}
     340:	13490005 	movtne	r0, #36869	; 0x9005
     344:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
     348:	03193f00 	tsteq	r9, #0, 30
     34c:	3b0b3a0e 	blcc	2ceb8c <__Stack_Size+0x2ce78c>
     350:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     354:	00193c13 	andseq	r3, r9, r3, lsl ip
     358:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
     35c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     360:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     364:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     368:	00001301 	andeq	r1, r0, r1, lsl #6
     36c:	3f012e3c 	svccc	0x00012e3c
     370:	3a0e0319 	bcc	380fdc <__Stack_Size+0x380bdc>
     374:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     378:	3c134919 	ldccc	9, cr4, [r3], {25}
     37c:	00130119 	andseq	r0, r3, r9, lsl r1
     380:	002e3d00 	eoreq	r3, lr, r0, lsl #26
     384:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     38c:	13491927 	movtne	r1, #39207	; 0x9927
     390:	0000193c 	andeq	r1, r0, ip, lsr r9
     394:	3f012e3e 	svccc	0x00012e3e
     398:	3a0e0319 	bcc	381004 <__Stack_Size+0x380c04>
     39c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3a0:	3c134919 	ldccc	9, cr4, [r3], {25}
     3a4:	00130119 	andseq	r0, r3, r9, lsl r1
     3a8:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
     3ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3b0:	0b3b0b3a 	bleq	ec30a0 <__Stack_Size+0xec2ca0>
     3b4:	13491927 	movtne	r1, #39207	; 0x9927
     3b8:	0000193c 	andeq	r1, r0, ip, lsr r9
     3bc:	01110100 	tsteq	r1, r0, lsl #2
     3c0:	0b130e25 	bleq	4c3c5c <__Stack_Size+0x4c385c>
     3c4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3cc:	00001710 	andeq	r1, r0, r0, lsl r7
     3d0:	3f002e02 	svccc	0x00002e02
     3d4:	3a0e0319 	bcc	381040 <__Stack_Size+0x380c40>
     3d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3e0:	97184006 	ldrls	r4, [r8, -r6]
     3e4:	00001942 	andeq	r1, r0, r2, asr #18
     3e8:	3f012e03 	svccc	0x00012e03
     3ec:	3a0e0319 	bcc	381058 <__Stack_Size+0x380c58>
     3f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3f8:	97184006 	ldrls	r4, [r8, -r6]
     3fc:	13011942 	movwne	r1, #6466	; 0x1942
     400:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     404:	03193f01 	tsteq	r9, #1, 30
     408:	3b0b3a0e 	blcc	2cec48 <__Stack_Size+0x2ce848>
     40c:	3c13490b 	ldccc	9, cr4, [r3], {11}
     410:	00130119 	andseq	r0, r3, r9, lsl r1
     414:	00180500 	andseq	r0, r8, r0, lsl #10
     418:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
     41c:	11000182 	smlabbne	r0, r2, r1, r0
     420:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     424:	00001331 	andeq	r1, r0, r1, lsr r3
     428:	0b002407 	bleq	944c <__Stack_Size+0x904c>
     42c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     430:	08000008 	stmdaeq	r0, {r3}
     434:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     438:	0b3a0e03 	bleq	e83c4c <__Stack_Size+0xe8384c>
     43c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     440:	06120111 			; <UNDEFINED> instruction: 0x06120111
     444:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     448:	09000019 	stmdbeq	r0, {r0, r3, r4}
     44c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     450:	0b3a0e03 	bleq	e83c64 <__Stack_Size+0xe83864>
     454:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     458:	06120111 			; <UNDEFINED> instruction: 0x06120111
     45c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     460:	00130119 	andseq	r0, r3, r9, lsl r1
     464:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
     468:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     46c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     470:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     474:	00001301 	andeq	r1, r0, r1, lsl #6
     478:	3f012e0b 	svccc	0x00012e0b
     47c:	3a0e0319 	bcc	3810e8 <__Stack_Size+0x380ce8>
     480:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     484:	00193c13 	andseq	r3, r9, r3, lsl ip
     488:	11010000 	mrsne	r0, (UNDEF: 1)
     48c:	130e2501 	movwne	r2, #58625	; 0xe501
     490:	1b0e030b 	blne	3810c4 <__Stack_Size+0x380cc4>
     494:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     498:	00171006 	andseq	r1, r7, r6
     49c:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
     4a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4a4:	0b3b0b3a 	bleq	ec3194 <__Stack_Size+0xec2d94>
     4a8:	13491927 	movtne	r1, #39207	; 0x9927
     4ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
     4b0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     4b4:	00130119 	andseq	r0, r3, r9, lsl r1
     4b8:	00050300 	andeq	r0, r5, r0, lsl #6
     4bc:	0b3a0e03 	bleq	e83cd0 <__Stack_Size+0xe838d0>
     4c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4c4:	00001702 	andeq	r1, r0, r2, lsl #14
     4c8:	3f012e04 	svccc	0x00012e04
     4cc:	3a0e0319 	bcc	381138 <__Stack_Size+0x380d38>
     4d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d4:	01193c13 	tsteq	r9, r3, lsl ip
     4d8:	05000013 	streq	r0, [r0, #-19]
     4dc:	00000018 	andeq	r0, r0, r8, lsl r0
     4e0:	01828906 	orreq	r8, r2, r6, lsl #18
     4e4:	31011101 	tstcc	r1, r1, lsl #2
     4e8:	07000013 	smladeq	r0, r3, r0, r0
     4ec:	0001828a 	andeq	r8, r1, sl, lsl #5
     4f0:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     4f4:	08000018 	stmdaeq	r0, {r3, r4}
     4f8:	0b0b0024 	bleq	2c0590 <__Stack_Size+0x2c0190>
     4fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     500:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     504:	03193f01 	tsteq	r9, #1, 30
     508:	3b0b3a0e 	blcc	2ced48 <__Stack_Size+0x2ce948>
     50c:	1119270b 	tstne	r9, fp, lsl #14
     510:	40061201 	andmi	r1, r6, r1, lsl #4
     514:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     518:	00001301 	andeq	r1, r0, r1, lsl #6
     51c:	0182890a 	orreq	r8, r2, sl, lsl #18
     520:	95011100 	strls	r1, [r1, #-256]	; 0x100
     524:	13311942 	teqne	r1, #1081344	; 0x108000
     528:	340b0000 	strcc	r0, [fp], #-0
     52c:	3a080300 	bcc	201134 <__Stack_Size+0x200d34>
     530:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     534:	00170213 	andseq	r0, r7, r3, lsl r2
     538:	82890c00 	addhi	r0, r9, #0, 24
     53c:	01110001 	tsteq	r1, r1
     540:	00001331 	andeq	r1, r0, r1, lsr r3
     544:	0b000f0d 	bleq	4180 <__Stack_Size+0x3d80>
     548:	0013490b 	andseq	r4, r3, fp, lsl #18
     54c:	00240e00 	eoreq	r0, r4, r0, lsl #28
     550:	0b3e0b0b 	bleq	f83184 <__Stack_Size+0xf82d84>
     554:	00000e03 	andeq	r0, r0, r3, lsl #28
     558:	11010b0f 	tstne	r1, pc, lsl #22
     55c:	00061201 	andeq	r1, r6, r1, lsl #4
     560:	82891000 	addhi	r1, r9, #0
     564:	01110101 	tsteq	r1, r1, lsl #2
     568:	31194295 			; <UNDEFINED> instruction: 0x31194295
     56c:	11000013 	tstne	r0, r3, lsl r0
     570:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     574:	0b3a0e03 	bleq	e83d88 <__Stack_Size+0xe83988>
     578:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     57c:	0000193c 	andeq	r1, r0, ip, lsr r9
     580:	01110100 	tsteq	r1, r0, lsl #2
     584:	0b130e25 	bleq	4c3e20 <__Stack_Size+0x4c3a20>
     588:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     58c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     590:	00001710 	andeq	r1, r0, r0, lsl r7
     594:	3f012e02 	svccc	0x00012e02
     598:	3a0e0319 	bcc	381204 <__Stack_Size+0x380e04>
     59c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5a0:	010b2019 	tsteq	fp, r9, lsl r0
     5a4:	03000013 	movweq	r0, #19
     5a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     5ac:	0b3b0b3a 	bleq	ec329c <__Stack_Size+0xec2e9c>
     5b0:	00001349 	andeq	r1, r0, r9, asr #6
     5b4:	03003404 	movweq	r3, #1028	; 0x404
     5b8:	3b0b3a0e 	blcc	2cedf8 <__Stack_Size+0x2ce9f8>
     5bc:	0013490b 	andseq	r4, r3, fp, lsl #18
     5c0:	00240500 	eoreq	r0, r4, r0, lsl #10
     5c4:	0b3e0b0b 	bleq	f831f8 <__Stack_Size+0xf82df8>
     5c8:	00000e03 	andeq	r0, r0, r3, lsl #28
     5cc:	3f002e06 	svccc	0x00002e06
     5d0:	3a0e0319 	bcc	38123c <__Stack_Size+0x380e3c>
     5d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5d8:	000b2019 	andeq	r2, fp, r9, lsl r0
     5dc:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
     5e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     5e8:	13491927 	movtne	r1, #39207	; 0x9927
     5ec:	13010b20 	movwne	r0, #6944	; 0x1b20
     5f0:	05080000 	streq	r0, [r8, #-0]
     5f4:	3a0e0300 	bcc	3811fc <__Stack_Size+0x380dfc>
     5f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	09000013 	stmdbeq	r0, {r0, r1, r4}
     600:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     604:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     608:	00001349 	andeq	r1, r0, r9, asr #6
     60c:	0b00240a 	bleq	963c <__Stack_Size+0x923c>
     610:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     614:	0b000008 	bleq	63c <__Stack_Size+0x23c>
     618:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     61c:	0b3a0e03 	bleq	e83e30 <__Stack_Size+0xe83a30>
     620:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     624:	01111349 	tsteq	r1, r9, asr #6
     628:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     62c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     630:	0c000013 	stceq	0, cr0, [r0], {19}
     634:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     638:	0b3b0b3a 	bleq	ec3328 <__Stack_Size+0xec2f28>
     63c:	17021349 	strne	r1, [r2, -r9, asr #6]
     640:	340d0000 	strcc	r0, [sp], #-0
     644:	3a0e0300 	bcc	38124c <__Stack_Size+0x380e4c>
     648:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     64c:	00170213 	andseq	r0, r7, r3, lsl r2
     650:	82890e00 	addhi	r0, r9, #0, 28
     654:	01110101 	tsteq	r1, r1, lsl #2
     658:	00001331 	andeq	r1, r0, r1, lsr r3
     65c:	01828a0f 	orreq	r8, r2, pc, lsl #20
     660:	91180200 	tstls	r8, r0, lsl #4
     664:	00001842 	andeq	r1, r0, r2, asr #16
     668:	3f012e10 	svccc	0x00012e10
     66c:	3a0e0319 	bcc	3812d8 <__Stack_Size+0x380ed8>
     670:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     674:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     678:	97184006 	ldrls	r4, [r8, -r6]
     67c:	13011942 	movwne	r1, #6466	; 0x1942
     680:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     684:	11000182 	smlabbne	r0, r2, r1, r0
     688:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     68c:	00001331 	andeq	r1, r0, r1, lsr r3
     690:	31012e12 	tstcc	r1, r2, lsl lr
     694:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     698:	97184006 	ldrls	r4, [r8, -r6]
     69c:	13011942 	movwne	r1, #6466	; 0x1942
     6a0:	34130000 	ldrcc	r0, [r3], #-0
     6a4:	02133100 	andseq	r3, r3, #0, 2
     6a8:	14000017 	strne	r0, [r0], #-23
     6ac:	13310034 	teqne	r1, #52	; 0x34
     6b0:	0b150000 	bleq	5406b8 <__Stack_Size+0x5402b8>
     6b4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     6b8:	00130106 	andseq	r0, r3, r6, lsl #2
     6bc:	82891600 	addhi	r1, r9, #0, 12
     6c0:	01110101 	tsteq	r1, r1, lsl #2
     6c4:	13011331 	movwne	r1, #4913	; 0x1331
     6c8:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
     6cc:	11000182 	smlabbne	r0, r2, r1, r0
     6d0:	00133101 	andseq	r3, r3, r1, lsl #2
     6d4:	00341800 	eorseq	r1, r4, r0, lsl #16
     6d8:	0b1c1331 	bleq	7053a4 <__Stack_Size+0x704fa4>
     6dc:	0b190000 	bleq	6406e4 <__Stack_Size+0x6402e4>
     6e0:	01175501 	tsteq	r7, r1, lsl #10
     6e4:	1a000013 	bne	738 <__Stack_Size+0x338>
     6e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6ec:	0b3a0e03 	bleq	e83f00 <__Stack_Size+0xe83b00>
     6f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6f4:	01111349 	tsteq	r1, r9, asr #6
     6f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6fc:	00194297 	mulseq	r9, r7, r2
     700:	00051b00 	andeq	r1, r5, r0, lsl #22
     704:	0b3a0803 	bleq	e82718 <__Stack_Size+0xe82318>
     708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     70c:	00001802 	andeq	r1, r0, r2, lsl #16
     710:	0300051c 	movweq	r0, #1308	; 0x51c
     714:	3b0b3a0e 	blcc	2cef54 <__Stack_Size+0x2ceb54>
     718:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     71c:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     720:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     724:	0b3a0e03 	bleq	e83f38 <__Stack_Size+0xe83b38>
     728:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     72c:	01111349 	tsteq	r1, r9, asr #6
     730:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     734:	00194297 	mulseq	r9, r7, r2
     738:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     73c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     744:	13491927 	movtne	r1, #39207	; 0x9927
     748:	06120111 			; <UNDEFINED> instruction: 0x06120111
     74c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     750:	00130119 	andseq	r0, r3, r9, lsl r1
     754:	00051f00 	andeq	r1, r5, r0, lsl #30
     758:	0b3a0e03 	bleq	e83f6c <__Stack_Size+0xe83b6c>
     75c:	1349053b 	movtne	r0, #38203	; 0x953b
     760:	00001702 	andeq	r1, r0, r2, lsl #14
     764:	31000520 	tstcc	r0, r0, lsr #10
     768:	00170213 	andseq	r0, r7, r3, lsl r2
     76c:	00052100 	andeq	r2, r5, r0, lsl #2
     770:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     774:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     778:	03193f01 	tsteq	r9, #1, 30
     77c:	3b0b3a0e 	blcc	2cefbc <__Stack_Size+0x2cebbc>
     780:	11192705 	tstne	r9, r5, lsl #14
     784:	40061201 	andmi	r1, r6, r1, lsl #4
     788:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     78c:	00001301 	andeq	r1, r0, r1, lsl #6
     790:	03000523 	movweq	r0, #1315	; 0x523
     794:	3b0b3a08 	blcc	2cefbc <__Stack_Size+0x2cebbc>
     798:	02134905 	andseq	r4, r3, #81920	; 0x14000
     79c:	24000017 	strcs	r0, [r0], #-23
     7a0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7a8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     7ac:	00001301 	andeq	r1, r0, r1, lsl #6
     7b0:	11010b25 	tstne	r1, r5, lsr #22
     7b4:	00061201 	andeq	r1, r6, r1, lsl #4
     7b8:	00052600 	andeq	r2, r5, r0, lsl #12
     7bc:	00001331 	andeq	r1, r0, r1, lsr r3
     7c0:	49010127 	stmdbmi	r1, {r0, r1, r2, r5, r8}
     7c4:	00130113 	andseq	r0, r3, r3, lsl r1
     7c8:	00212800 	eoreq	r2, r1, r0, lsl #16
     7cc:	0b2f1349 	bleq	bc54f8 <__Stack_Size+0xbc50f8>
     7d0:	34290000 	strtcc	r0, [r9], #-0
     7d4:	3a0e0300 	bcc	3813dc <__Stack_Size+0x380fdc>
     7d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     7e0:	2a000018 	bcs	848 <__Stack_Size+0x448>
     7e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     7e8:	0b3a0e03 	bleq	e83ffc <__Stack_Size+0xe83bfc>
     7ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7f0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     7f4:	00001301 	andeq	r1, r0, r1, lsl #6
     7f8:	4900052b 	stmdbmi	r0, {r0, r1, r3, r5, r8, sl}
     7fc:	2c000013 	stccs	0, cr0, [r0], {19}
     800:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     804:	0b3a0e03 	bleq	e84018 <__Stack_Size+0xe83c18>
     808:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     80c:	0000193c 	andeq	r1, r0, ip, lsr r9
     810:	0b000f2d 	bleq	44cc <__Stack_Size+0x40cc>
     814:	0013490b 	andseq	r4, r3, fp, lsl #18
     818:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     81c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     820:	0b3b0b3a 	bleq	ec3510 <__Stack_Size+0xec3110>
     824:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     828:	00001301 	andeq	r1, r0, r1, lsl #6
     82c:	3f002e2f 	svccc	0x00002e2f
     830:	3a0e0319 	bcc	38149c <__Stack_Size+0x38109c>
     834:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     838:	3c134919 	ldccc	9, cr4, [r3], {25}
     83c:	00000019 	andeq	r0, r0, r9, lsl r0
     840:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     844:	030b130e 	movweq	r1, #45838	; 0xb30e
     848:	110e1b0e 	tstne	lr, lr, lsl #22
     84c:	10061201 	andne	r1, r6, r1, lsl #4
     850:	02000017 	andeq	r0, r0, #23
     854:	0b0b0024 	bleq	2c08ec <__Stack_Size+0x2c04ec>
     858:	0e030b3e 	vmoveq.16	d3[0], r0
     85c:	16030000 	strne	r0, [r3], -r0
     860:	3a080300 	bcc	201468 <__Stack_Size+0x201068>
     864:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     868:	04000013 	streq	r0, [r0], #-19
     86c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     870:	0b3b0b3a 	bleq	ec3560 <__Stack_Size+0xec3160>
     874:	00001349 	andeq	r1, r0, r9, asr #6
     878:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     87c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     880:	0b0b0104 	bleq	2c0c98 <__Stack_Size+0x2c0898>
     884:	0b3b0b3a 	bleq	ec3574 <__Stack_Size+0xec3174>
     888:	00001301 	andeq	r1, r0, r1, lsl #6
     88c:	03002807 	movweq	r2, #2055	; 0x807
     890:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     894:	00280800 	eoreq	r0, r8, r0, lsl #16
     898:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     89c:	13090000 	movwne	r0, #36864	; 0x9000
     8a0:	3a0b0b01 	bcc	2c34ac <__Stack_Size+0x2c30ac>
     8a4:	01053b0b 	tsteq	r5, fp, lsl #22
     8a8:	0a000013 	beq	8fc <__Stack_Size+0x4fc>
     8ac:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     8b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b4:	0b381349 	bleq	e055e0 <__Stack_Size+0xe051e0>
     8b8:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     8bc:	3a0e0300 	bcc	3814c4 <__Stack_Size+0x3810c4>
     8c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	000b3813 	andeq	r3, fp, r3, lsl r8
     8c8:	00160c00 	andseq	r0, r6, r0, lsl #24
     8cc:	0b3a0e03 	bleq	e840e0 <__Stack_Size+0xe83ce0>
     8d0:	1349053b 	movtne	r0, #38203	; 0x953b
     8d4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     8d8:	03193f01 	tsteq	r9, #1, 30
     8dc:	3b0b3a0e 	blcc	2cf11c <__Stack_Size+0x2ced1c>
     8e0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     8e4:	010b2013 	tsteq	fp, r3, lsl r0
     8e8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     8ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8f4:	00001349 	andeq	r1, r0, r9, asr #6
     8f8:	3f012e0f 	svccc	0x00012e0f
     8fc:	3a0e0319 	bcc	381568 <__Stack_Size+0x381168>
     900:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     904:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     908:	97184006 	ldrls	r4, [r8, -r6]
     90c:	13011942 	movwne	r1, #6466	; 0x1942
     910:	05100000 	ldreq	r0, [r0, #-0]
     914:	3a0e0300 	bcc	38151c <__Stack_Size+0x38111c>
     918:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     91c:	00170213 	andseq	r0, r7, r3, lsl r2
     920:	002e1100 	eoreq	r1, lr, r0, lsl #2
     924:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     928:	0b3b0b3a 	bleq	ec3618 <__Stack_Size+0xec3218>
     92c:	01111927 	tsteq	r1, r7, lsr #18
     930:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     934:	00194297 	mulseq	r9, r7, r2
     938:	002e1200 	eoreq	r1, lr, r0, lsl #4
     93c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     940:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     944:	13491927 	movtne	r1, #39207	; 0x9927
     948:	06120111 			; <UNDEFINED> instruction: 0x06120111
     94c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     950:	13000019 	movwne	r0, #25
     954:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     958:	0b3a0e03 	bleq	e8416c <__Stack_Size+0xe83d6c>
     95c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     960:	01111349 	tsteq	r1, r9, asr #6
     964:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     968:	01194297 			; <UNDEFINED> instruction: 0x01194297
     96c:	14000013 	strne	r0, [r0], #-19
     970:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     974:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     978:	17021349 	strne	r1, [r2, -r9, asr #6]
     97c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     980:	03193f01 	tsteq	r9, #1, 30
     984:	3b0b3a0e 	blcc	2cf1c4 <__Stack_Size+0x2cedc4>
     988:	11192705 	tstne	r9, r5, lsl #14
     98c:	40061201 	andmi	r1, r6, r1, lsl #4
     990:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     994:	00001301 	andeq	r1, r0, r1, lsl #6
     998:	03000516 	movweq	r0, #1302	; 0x516
     99c:	3b0b3a0e 	blcc	2cf1dc <__Stack_Size+0x2ceddc>
     9a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9a4:	17000017 	smladne	r0, r7, r0, r0
     9a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     9ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     9b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9b4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     9b8:	11133101 	tstne	r3, r1, lsl #2
     9bc:	40061201 	andmi	r1, r6, r1, lsl #4
     9c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     9c4:	00001301 	andeq	r1, r0, r1, lsl #6
     9c8:	31003419 	tstcc	r0, r9, lsl r4
     9cc:	00170213 	andseq	r0, r7, r3, lsl r2
     9d0:	010b1a00 	tsteq	fp, r0, lsl #20
     9d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9d8:	341b0000 	ldrcc	r0, [fp], #-0
     9dc:	00133100 	andseq	r3, r3, r0, lsl #2
     9e0:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
     9e4:	0b3a0e03 	bleq	e841f8 <__Stack_Size+0xe83df8>
     9e8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9ec:	13010b20 	movwne	r0, #6944	; 0x1b20
     9f0:	341d0000 	ldrcc	r0, [sp], #-0
     9f4:	3a080300 	bcc	2015fc <__Stack_Size+0x2011fc>
     9f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9fc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     a00:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     a04:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a08:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     a0c:	00001301 	andeq	r1, r0, r1, lsl #6
     a10:	3100341f 	tstcc	r0, pc, lsl r4
     a14:	00180213 	andseq	r0, r8, r3, lsl r2
     a18:	82892000 	addhi	r2, r9, #0
     a1c:	01110001 	tsteq	r1, r1
     a20:	00001331 	andeq	r1, r0, r1, lsr r3
     a24:	3f012e21 	svccc	0x00012e21
     a28:	3a0e0319 	bcc	381694 <__Stack_Size+0x381294>
     a2c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a30:	11134919 	tstne	r3, r9, lsl r9
     a34:	40061201 	andmi	r1, r6, r1, lsl #4
     a38:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a3c:	00001301 	andeq	r1, r0, r1, lsl #6
     a40:	03003422 	movweq	r3, #1058	; 0x422
     a44:	3b0b3a0e 	blcc	2cf284 <__Stack_Size+0x2cee84>
     a48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a4c:	23000017 	movwcs	r0, #23
     a50:	01018289 	smlabbeq	r1, r9, r2, r8
     a54:	13310111 	teqne	r1, #1073741828	; 0x40000004
     a58:	00001301 	andeq	r1, r0, r1, lsl #6
     a5c:	01828a24 	orreq	r8, r2, r4, lsr #20
     a60:	91180200 	tstls	r8, r0, lsl #4
     a64:	00001842 	andeq	r1, r0, r2, asr #16
     a68:	01828925 	orreq	r8, r2, r5, lsr #18
     a6c:	31011101 	tstcc	r1, r1, lsl #2
     a70:	26000013 			; <UNDEFINED> instruction: 0x26000013
     a74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a78:	0b3a0e03 	bleq	e8428c <__Stack_Size+0xe83e8c>
     a7c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     a80:	01111349 	tsteq	r1, r9, asr #6
     a84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a88:	00194297 	mulseq	r9, r7, r2
     a8c:	11010000 	mrsne	r0, (UNDEF: 1)
     a90:	130e2501 	movwne	r2, #58625	; 0xe501
     a94:	1b0e030b 	blne	3816c8 <__Stack_Size+0x3812c8>
     a98:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     a9c:	00171006 	andseq	r1, r7, r6
     aa0:	00240200 	eoreq	r0, r4, r0, lsl #4
     aa4:	0b3e0b0b 	bleq	f836d8 <__Stack_Size+0xf832d8>
     aa8:	00000e03 	andeq	r0, r0, r3, lsl #28
     aac:	03001603 	movweq	r1, #1539	; 0x603
     ab0:	3b0b3a08 	blcc	2cf2d8 <__Stack_Size+0x2ceed8>
     ab4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ab8:	00160400 	andseq	r0, r6, r0, lsl #8
     abc:	0b3a0e03 	bleq	e842d0 <__Stack_Size+0xe83ed0>
     ac0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ac4:	35050000 	strcc	r0, [r5, #-0]
     ac8:	00134900 	andseq	r4, r3, r0, lsl #18
     acc:	01040600 	tsteq	r4, r0, lsl #12
     ad0:	0b3a0b0b 	bleq	e83704 <__Stack_Size+0xe83304>
     ad4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ad8:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     adc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     ae0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     ae4:	0b0b0113 	bleq	2c0f38 <__Stack_Size+0x2c0b38>
     ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     aec:	00001301 	andeq	r1, r0, r1, lsl #6
     af0:	03000d09 	movweq	r0, #3337	; 0xd09
     af4:	3b0b3a08 	blcc	2cf31c <__Stack_Size+0x2cef1c>
     af8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     afc:	0a00000b 	beq	b30 <__Stack_Size+0x730>
     b00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b08:	0b381349 	bleq	e05834 <__Stack_Size+0xe05434>
     b0c:	160b0000 	strne	r0, [fp], -r0
     b10:	3a0e0300 	bcc	381718 <__Stack_Size+0x381318>
     b14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	0c000013 	stceq	0, cr0, [r0], {19}
     b1c:	13490101 	movtne	r0, #37121	; 0x9101
     b20:	00001301 	andeq	r1, r0, r1, lsl #6
     b24:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     b28:	000b2f13 	andeq	r2, fp, r3, lsl pc
     b2c:	01130e00 	tsteq	r3, r0, lsl #28
     b30:	0b3a0b0b 	bleq	e83764 <__Stack_Size+0xe83364>
     b34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     b38:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; b40 <__Stack_Size+0x740>
     b3c:	3a0e0300 	bcc	381744 <__Stack_Size+0x381344>
     b40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b44:	000b3813 	andeq	r3, fp, r3, lsl r8
     b48:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
     b4c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b50:	0b3b0b3a 	bleq	ec3840 <__Stack_Size+0xec3440>
     b54:	01111927 	tsteq	r1, r7, lsr #18
     b58:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b5c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b60:	11000013 	tstne	r0, r3, lsl r0
     b64:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b68:	0b3b0b3a 	bleq	ec3858 <__Stack_Size+0xec3458>
     b6c:	17021349 	strne	r1, [r2, -r9, asr #6]
     b70:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
     b74:	11010182 	smlabbne	r1, r2, r1, r0
     b78:	01133101 	tsteq	r3, r1, lsl #2
     b7c:	13000013 	movwne	r0, #19
     b80:	0001828a 	andeq	r8, r1, sl, lsl #5
     b84:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     b88:	14000018 	strne	r0, [r0], #-24
     b8c:	01018289 	smlabbeq	r1, r9, r2, r8
     b90:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     b94:	00133119 	andseq	r3, r3, r9, lsl r1
     b98:	000f1500 	andeq	r1, pc, r0, lsl #10
     b9c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ba0:	05160000 	ldreq	r0, [r6, #-0]
     ba4:	3a0e0300 	bcc	3817ac <__Stack_Size+0x3813ac>
     ba8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bac:	00180213 	andseq	r0, r8, r3, lsl r2
     bb0:	00341700 	eorseq	r1, r4, r0, lsl #14
     bb4:	0b3a0e03 	bleq	e843c8 <__Stack_Size+0xe83fc8>
     bb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bbc:	00001702 	andeq	r1, r0, r2, lsl #14
     bc0:	03003418 	movweq	r3, #1048	; 0x418
     bc4:	3b0b3a08 	blcc	2cf3ec <__Stack_Size+0x2cefec>
     bc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bcc:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
     bd0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bd4:	0b3a0e03 	bleq	e843e8 <__Stack_Size+0xe83fe8>
     bd8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     bdc:	01111349 	tsteq	r1, r9, asr #6
     be0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     be4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     be8:	1a000013 	bne	c3c <__Stack_Size+0x83c>
     bec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bf0:	0b3a0e03 	bleq	e84404 <__Stack_Size+0xe84004>
     bf4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     bf8:	01111349 	tsteq	r1, r9, asr #6
     bfc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c00:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c04:	1b000013 	blne	c58 <__Stack_Size+0x858>
     c08:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c10:	17021349 	strne	r1, [r2, -r9, asr #6]
     c14:	051c0000 	ldreq	r0, [ip, #-0]
     c18:	3a0e0300 	bcc	381820 <__Stack_Size+0x381420>
     c1c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c20:	00180213 	andseq	r0, r8, r3, lsl r2
     c24:	00341d00 	eorseq	r1, r4, r0, lsl #26
     c28:	0b3a0e03 	bleq	e8443c <__Stack_Size+0xe8403c>
     c2c:	1349053b 	movtne	r0, #38203	; 0x953b
     c30:	00001702 	andeq	r1, r0, r2, lsl #14
     c34:	3f012e1e 	svccc	0x00012e1e
     c38:	3a0e0319 	bcc	3818a4 <__Stack_Size+0x3814a4>
     c3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c40:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c44:	97184006 	ldrls	r4, [r8, -r6]
     c48:	13011942 	movwne	r1, #6466	; 0x1942
     c4c:	341f0000 	ldrcc	r0, [pc], #-0	; c54 <__Stack_Size+0x854>
     c50:	3a080300 	bcc	201858 <__Stack_Size+0x201458>
     c54:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c58:	00170213 	andseq	r0, r7, r3, lsl r2
     c5c:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
     c60:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c68:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     c6c:	05210000 	streq	r0, [r1, #-0]!
     c70:	00134900 	andseq	r4, r3, r0, lsl #18
     c74:	11010000 	mrsne	r0, (UNDEF: 1)
     c78:	130e2501 	movwne	r2, #58625	; 0xe501
     c7c:	1b0e030b 	blne	3818b0 <__Stack_Size+0x3814b0>
     c80:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c84:	00171006 	andseq	r1, r7, r6
     c88:	00240200 	eoreq	r0, r4, r0, lsl #4
     c8c:	0b3e0b0b 	bleq	f838c0 <__Stack_Size+0xf834c0>
     c90:	00000e03 	andeq	r0, r0, r3, lsl #28
     c94:	03001603 	movweq	r1, #1539	; 0x603
     c98:	3b0b3a08 	blcc	2cf4c0 <__Stack_Size+0x2cf0c0>
     c9c:	0013490b 	andseq	r4, r3, fp, lsl #18
     ca0:	00160400 	andseq	r0, r6, r0, lsl #8
     ca4:	0b3a0e03 	bleq	e844b8 <__Stack_Size+0xe840b8>
     ca8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cac:	35050000 	strcc	r0, [r5, #-0]
     cb0:	00134900 	andseq	r4, r3, r0, lsl #18
     cb4:	00260600 	eoreq	r0, r6, r0, lsl #12
     cb8:	00001349 	andeq	r1, r0, r9, asr #6
     cbc:	0b010407 	bleq	41ce0 <__Stack_Size+0x418e0>
     cc0:	3b0b3a0b 	blcc	2cf4f4 <__Stack_Size+0x2cf0f4>
     cc4:	0013010b 	andseq	r0, r3, fp, lsl #2
     cc8:	00280800 	eoreq	r0, r8, r0, lsl #16
     ccc:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     cd0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
     cd4:	1c080300 	stcne	3, cr0, [r8], {-0}
     cd8:	0a00000d 	beq	d14 <__Stack_Size+0x914>
     cdc:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     ce0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
     ce8:	03000d0b 	movweq	r0, #3339	; 0xd0b
     cec:	3b0b3a0e 	blcc	2cf52c <__Stack_Size+0x2cf12c>
     cf0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     cf4:	0c00000b 	stceq	0, cr0, [r0], {11}
     cf8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d00:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     d04:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     d08:	3a080300 	bcc	201910 <__Stack_Size+0x201510>
     d0c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d10:	00053813 	andeq	r3, r5, r3, lsl r8
     d14:	01010e00 	tsteq	r1, r0, lsl #28
     d18:	13011349 	movwne	r1, #4937	; 0x1349
     d1c:	210f0000 	mrscs	r0, CPSR
     d20:	2f134900 	svccs	0x00134900
     d24:	1000000b 	andne	r0, r0, fp
     d28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d30:	00001349 	andeq	r1, r0, r9, asr #6
     d34:	0b011311 	bleq	45980 <__Stack_Size+0x45580>
     d38:	3b0b3a0b 	blcc	2cf56c <__Stack_Size+0x2cf16c>
     d3c:	00130105 	andseq	r0, r3, r5, lsl #2
     d40:	000d1200 	andeq	r1, sp, r0, lsl #4
     d44:	0b3a0803 	bleq	e82d58 <__Stack_Size+0xe82958>
     d48:	1349053b 	movtne	r0, #38203	; 0x953b
     d4c:	00000b38 	andeq	r0, r0, r8, lsr fp
     d50:	0b011313 	bleq	459a4 <__Stack_Size+0x455a4>
     d54:	3b0b3a0b 	blcc	2cf588 <__Stack_Size+0x2cf188>
     d58:	0013010b 	andseq	r0, r3, fp, lsl #2
     d5c:	000d1400 	andeq	r1, sp, r0, lsl #8
     d60:	0b3a0e03 	bleq	e84574 <__Stack_Size+0xe84174>
     d64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d68:	00000b38 	andeq	r0, r0, r8, lsr fp
     d6c:	3f012e15 	svccc	0x00012e15
     d70:	3a0e0319 	bcc	3819dc <__Stack_Size+0x3815dc>
     d74:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d78:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d7c:	97184006 	ldrls	r4, [r8, -r6]
     d80:	13011942 	movwne	r1, #6466	; 0x1942
     d84:	34160000 	ldrcc	r0, [r6], #-0
     d88:	3a0e0300 	bcc	381990 <__Stack_Size+0x381590>
     d8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d90:	00170213 	andseq	r0, r7, r3, lsl r2
     d94:	00051700 	andeq	r1, r5, r0, lsl #14
     d98:	0b3a0e03 	bleq	e845ac <__Stack_Size+0xe841ac>
     d9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     da0:	00001702 	andeq	r1, r0, r2, lsl #14
     da4:	03000518 	movweq	r0, #1304	; 0x518
     da8:	3b0b3a0e 	blcc	2cf5e8 <__Stack_Size+0x2cf1e8>
     dac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     db0:	19000018 	stmdbne	r0, {r3, r4}
     db4:	0b0b000f 	bleq	2c0df8 <__Stack_Size+0x2c09f8>
     db8:	00001349 	andeq	r1, r0, r9, asr #6
     dbc:	0182891a 	orreq	r8, r2, sl, lsl r9
     dc0:	95011100 	strls	r1, [r1, #-256]	; 0x100
     dc4:	13311942 	teqne	r1, #1081344	; 0x108000
     dc8:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
     dcc:	11010182 	smlabbne	r1, r2, r1, r0
     dd0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     dd4:	00001331 	andeq	r1, r0, r1, lsr r3
     dd8:	01828a1c 	orreq	r8, r2, ip, lsl sl
     ddc:	91180200 	tstls	r8, r0, lsl #4
     de0:	00001842 	andeq	r1, r0, r2, asr #16
     de4:	3f012e1d 	svccc	0x00012e1d
     de8:	3a0e0319 	bcc	381a54 <__Stack_Size+0x381654>
     dec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     df0:	11134919 	tstne	r3, r9, lsl r9
     df4:	40061201 	andmi	r1, r6, r1, lsl #4
     df8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
     e00:	3f002e1e 	svccc	0x00002e1e
     e04:	3a0e0319 	bcc	381a70 <__Stack_Size+0x381670>
     e08:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e0c:	11134919 	tstne	r3, r9, lsl r9
     e10:	40061201 	andmi	r1, r6, r1, lsl #4
     e14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e18:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     e1c:	03193f01 	tsteq	r9, #1, 30
     e20:	3b0b3a0e 	blcc	2cf660 <__Stack_Size+0x2cf260>
     e24:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     e28:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e2c:	97184006 	ldrls	r4, [r8, -r6]
     e30:	13011942 	movwne	r1, #6466	; 0x1942
     e34:	05200000 	streq	r0, [r0, #-0]!
     e38:	3a0e0300 	bcc	381a40 <__Stack_Size+0x381640>
     e3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e40:	00170213 	andseq	r0, r7, r3, lsl r2
     e44:	00342100 	eorseq	r2, r4, r0, lsl #2
     e48:	0b3a0e03 	bleq	e8465c <__Stack_Size+0xe8425c>
     e4c:	1349053b 	movtne	r0, #38203	; 0x953b
     e50:	00001702 	andeq	r1, r0, r2, lsl #14
     e54:	03003422 	movweq	r3, #1058	; 0x422
     e58:	3b0b3a08 	blcc	2cf680 <__Stack_Size+0x2cf280>
     e5c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e60:	23000017 	movwcs	r0, #23
     e64:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e68:	0b3a0e03 	bleq	e8467c <__Stack_Size+0xe8427c>
     e6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e70:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e74:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e78:	00130119 	andseq	r0, r3, r9, lsl r1
     e7c:	00052400 	andeq	r2, r5, r0, lsl #8
     e80:	0b3a0e03 	bleq	e84694 <__Stack_Size+0xe84294>
     e84:	1349053b 	movtne	r0, #38203	; 0x953b
     e88:	00001802 	andeq	r1, r0, r2, lsl #16
     e8c:	3f002e25 	svccc	0x00002e25
     e90:	3a0e0319 	bcc	381afc <__Stack_Size+0x3816fc>
     e94:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e98:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     e9c:	97184006 	ldrls	r4, [r8, -r6]
     ea0:	00001942 	andeq	r1, r0, r2, asr #18
     ea4:	3f002e26 	svccc	0x00002e26
     ea8:	3a0e0319 	bcc	381b14 <__Stack_Size+0x381714>
     eac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     eb0:	00193c19 	andseq	r3, r9, r9, lsl ip
     eb4:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     eb8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ebc:	0b3b0b3a 	bleq	ec3bac <__Stack_Size+0xec37ac>
     ec0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     ec4:	00001301 	andeq	r1, r0, r1, lsl #6
     ec8:	49000528 	stmdbmi	r0, {r3, r5, r8, sl}
     ecc:	29000013 	stmdbcs	r0, {r0, r1, r4}
     ed0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ed4:	0b3a0e03 	bleq	e846e8 <__Stack_Size+0xe842e8>
     ed8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     edc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     ee0:	01000000 	mrseq	r0, (UNDEF: 0)
     ee4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ee8:	0e030b13 	vmoveq.32	d3[0], r0
     eec:	01110e1b 	tsteq	r1, fp, lsl lr
     ef0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     ef4:	24020000 	strcs	r0, [r2], #-0
     ef8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     efc:	000e030b 	andeq	r0, lr, fp, lsl #6
     f00:	00160300 	andseq	r0, r6, r0, lsl #6
     f04:	0b3a0803 	bleq	e82f18 <__Stack_Size+0xe82b18>
     f08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f0c:	16040000 	strne	r0, [r4], -r0
     f10:	3a0e0300 	bcc	381b18 <__Stack_Size+0x381718>
     f14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f18:	05000013 	streq	r0, [r0, #-19]
     f1c:	13490035 	movtne	r0, #36917	; 0x9035
     f20:	04060000 	streq	r0, [r6], #-0
     f24:	3a0b0b01 	bcc	2c3b30 <__Stack_Size+0x2c3730>
     f28:	010b3b0b 	tsteq	fp, fp, lsl #22
     f2c:	07000013 	smladeq	r0, r3, r0, r0
     f30:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     f34:	00000d1c 	andeq	r0, r0, ip, lsl sp
     f38:	03002808 	movweq	r2, #2056	; 0x808
     f3c:	000d1c08 	andeq	r1, sp, r8, lsl #24
     f40:	01130900 	tsteq	r3, r0, lsl #18
     f44:	0b3a0b0b 	bleq	e83b78 <__Stack_Size+0xe83778>
     f48:	1301053b 	movwne	r0, #5435	; 0x153b
     f4c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     f50:	3a080300 	bcc	201b58 <__Stack_Size+0x201758>
     f54:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f58:	000b3813 	andeq	r3, fp, r3, lsl r8
     f5c:	00160b00 	andseq	r0, r6, r0, lsl #22
     f60:	0b3a0e03 	bleq	e84774 <__Stack_Size+0xe84374>
     f64:	1349053b 	movtne	r0, #38203	; 0x953b
     f68:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     f6c:	03193f01 	tsteq	r9, #1, 30
     f70:	3b0b3a0e 	blcc	2cf7b0 <__Stack_Size+0x2cf3b0>
     f74:	1119270b 	tstne	r9, fp, lsl #14
     f78:	40061201 	andmi	r1, r6, r1, lsl #4
     f7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f80:	00001301 	andeq	r1, r0, r1, lsl #6
     f84:	0182890d 	orreq	r8, r2, sp, lsl #18
     f88:	31011101 	tstcc	r1, r1, lsl #2
     f8c:	00130113 	andseq	r0, r3, r3, lsl r1
     f90:	828a0e00 	addhi	r0, sl, #0, 28
     f94:	18020001 	stmdane	r2, {r0}
     f98:	00184291 	mulseq	r8, r1, r2
     f9c:	82890f00 	addhi	r0, r9, #0, 30
     fa0:	01110101 	tsteq	r1, r1, lsl #2
     fa4:	31194295 			; <UNDEFINED> instruction: 0x31194295
     fa8:	10000013 	andne	r0, r0, r3, lsl r0
     fac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     fb0:	0b3b0b3a 	bleq	ec3ca0 <__Stack_Size+0xec38a0>
     fb4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     fb8:	05110000 	ldreq	r0, [r1, #-0]
     fbc:	3a0e0300 	bcc	381bc4 <__Stack_Size+0x3817c4>
     fc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fc4:	00170213 	andseq	r0, r7, r3, lsl r2
     fc8:	00341200 	eorseq	r1, r4, r0, lsl #4
     fcc:	0b3a0e03 	bleq	e847e0 <__Stack_Size+0xe843e0>
     fd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fd4:	00001702 	andeq	r1, r0, r2, lsl #14
     fd8:	01828913 	orreq	r8, r2, r3, lsl r9
     fdc:	95011100 	strls	r1, [r1, #-256]	; 0x100
     fe0:	13311942 	teqne	r1, #1081344	; 0x108000
     fe4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     fe8:	03193f01 	tsteq	r9, #1, 30
     fec:	3b0b3a0e 	blcc	2cf82c <__Stack_Size+0x2cf42c>
     ff0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ff4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ff8:	97184006 	ldrls	r4, [r8, -r6]
     ffc:	13011942 	movwne	r1, #6466	; 0x1942
    1000:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    1004:	03193f01 	tsteq	r9, #1, 30
    1008:	3b0b3a0e 	blcc	2cf848 <__Stack_Size+0x2cf448>
    100c:	11192705 	tstne	r9, r5, lsl #14
    1010:	40061201 	andmi	r1, r6, r1, lsl #4
    1014:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1018:	00001301 	andeq	r1, r0, r1, lsl #6
    101c:	03000516 	movweq	r0, #1302	; 0x516
    1020:	3b0b3a0e 	blcc	2cf860 <__Stack_Size+0x2cf460>
    1024:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1028:	17000017 	smladne	r0, r7, r0, r0
    102c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1030:	0b3a0e03 	bleq	e84844 <__Stack_Size+0xe84444>
    1034:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1038:	1301193c 	movwne	r1, #6460	; 0x193c
    103c:	05180000 	ldreq	r0, [r8, #-0]
    1040:	00134900 	andseq	r4, r3, r0, lsl #18
    1044:	002e1900 	eoreq	r1, lr, r0, lsl #18
    1048:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    104c:	0b3b0b3a 	bleq	ec3d3c <__Stack_Size+0xec393c>
    1050:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1054:	01000000 	mrseq	r0, (UNDEF: 0)
    1058:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    105c:	0e030b13 	vmoveq.32	d3[0], r0
    1060:	01110e1b 	tsteq	r1, fp, lsl lr
    1064:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1068:	24020000 	strcs	r0, [r2], #-0
    106c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1070:	000e030b 	andeq	r0, lr, fp, lsl #6
    1074:	00160300 	andseq	r0, r6, r0, lsl #6
    1078:	0b3a0803 	bleq	e8308c <__Stack_Size+0xe82c8c>
    107c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1080:	26040000 	strcs	r0, [r4], -r0
    1084:	00134900 	andseq	r4, r3, r0, lsl #18
    1088:	00160500 	andseq	r0, r6, r0, lsl #10
    108c:	0b3a0e03 	bleq	e848a0 <__Stack_Size+0xe844a0>
    1090:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1094:	35060000 	strcc	r0, [r6, #-0]
    1098:	00134900 	andseq	r4, r3, r0, lsl #18
    109c:	01040700 	tsteq	r4, r0, lsl #14
    10a0:	0b3a0b0b 	bleq	e83cd4 <__Stack_Size+0xe838d4>
    10a4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10a8:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    10ac:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    10b0:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    10b4:	08030028 	stmdaeq	r3, {r3, r5}
    10b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    10bc:	0b01130a 	bleq	45cec <__Stack_Size+0x458ec>
    10c0:	3b0b3a0b 	blcc	2cf8f4 <__Stack_Size+0x2cf4f4>
    10c4:	00130105 	andseq	r0, r3, r5, lsl #2
    10c8:	000d0b00 	andeq	r0, sp, r0, lsl #22
    10cc:	0b3a0803 	bleq	e830e0 <__Stack_Size+0xe82ce0>
    10d0:	1349053b 	movtne	r0, #38203	; 0x953b
    10d4:	00000b38 	andeq	r0, r0, r8, lsr fp
    10d8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    10dc:	3b0b3a0e 	blcc	2cf91c <__Stack_Size+0x2cf51c>
    10e0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    10e4:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    10e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    10ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10f0:	00001349 	andeq	r1, r0, r9, asr #6
    10f4:	0b01130e 	bleq	45d34 <__Stack_Size+0x45934>
    10f8:	3b0b3a0b 	blcc	2cf92c <__Stack_Size+0x2cf52c>
    10fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1100:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1104:	0b3a0e03 	bleq	e84918 <__Stack_Size+0xe84518>
    1108:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    110c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1110:	3f002e10 	svccc	0x00002e10
    1114:	3a0e0319 	bcc	381d80 <__Stack_Size+0x381980>
    1118:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    111c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1120:	97184006 	ldrls	r4, [r8, -r6]
    1124:	00001942 	andeq	r1, r0, r2, asr #18
    1128:	3f012e11 	svccc	0x00012e11
    112c:	3a0e0319 	bcc	381d98 <__Stack_Size+0x381998>
    1130:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1134:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1138:	97184006 	ldrls	r4, [r8, -r6]
    113c:	13011942 	movwne	r1, #6466	; 0x1942
    1140:	05120000 	ldreq	r0, [r2, #-0]
    1144:	3a0e0300 	bcc	381d4c <__Stack_Size+0x38194c>
    1148:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    114c:	00180213 	andseq	r0, r8, r3, lsl r2
    1150:	00051300 	andeq	r1, r5, r0, lsl #6
    1154:	0b3a0e03 	bleq	e84968 <__Stack_Size+0xe84568>
    1158:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    115c:	00001702 	andeq	r1, r0, r2, lsl #14
    1160:	03003414 	movweq	r3, #1044	; 0x414
    1164:	3b0b3a0e 	blcc	2cf9a4 <__Stack_Size+0x2cf5a4>
    1168:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    116c:	15000017 	strne	r0, [r0, #-23]
    1170:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1174:	0b3a0e03 	bleq	e84988 <__Stack_Size+0xe84588>
    1178:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    117c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1180:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1184:	00130119 	andseq	r0, r3, r9, lsl r1
    1188:	00051600 	andeq	r1, r5, r0, lsl #12
    118c:	0b3a0e03 	bleq	e849a0 <__Stack_Size+0xe845a0>
    1190:	1349053b 	movtne	r0, #38203	; 0x953b
    1194:	00001802 	andeq	r1, r0, r2, lsl #16
    1198:	03000517 	movweq	r0, #1303	; 0x517
    119c:	3b0b3a0e 	blcc	2cf9dc <__Stack_Size+0x2cf5dc>
    11a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11a4:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    11a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    11b4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    11b8:	03193f00 	tsteq	r9, #0, 30
    11bc:	3b0b3a0e 	blcc	2cf9fc <__Stack_Size+0x2cf5fc>
    11c0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    11c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    11c8:	97184006 	ldrls	r4, [r8, -r6]
    11cc:	00001942 	andeq	r1, r0, r2, asr #18
    11d0:	0300341a 	movweq	r3, #1050	; 0x41a
    11d4:	3b0b3a08 	blcc	2cf9fc <__Stack_Size+0x2cf5fc>
    11d8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11dc:	1b000017 	blne	1240 <__Stack_Size+0xe40>
    11e0:	0b0b000f 	bleq	2c1224 <__Stack_Size+0x2c0e24>
    11e4:	00001349 	andeq	r1, r0, r9, asr #6
    11e8:	3f012e1c 	svccc	0x00012e1c
    11ec:	3a0e0319 	bcc	381e58 <__Stack_Size+0x381a58>
    11f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    11f4:	11134919 	tstne	r3, r9, lsl r9
    11f8:	40061201 	andmi	r1, r6, r1, lsl #4
    11fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1200:	00001301 	andeq	r1, r0, r1, lsl #6
    1204:	3f012e1d 	svccc	0x00012e1d
    1208:	3a0e0319 	bcc	381e74 <__Stack_Size+0x381a74>
    120c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1210:	11134919 	tstne	r3, r9, lsl r9
    1214:	40061201 	andmi	r1, r6, r1, lsl #4
    1218:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    121c:	00001301 	andeq	r1, r0, r1, lsl #6
    1220:	0300341e 	movweq	r3, #1054	; 0x41e
    1224:	3b0b3a0e 	blcc	2cfa64 <__Stack_Size+0x2cf664>
    1228:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    122c:	1f000018 	svcne	0x00000018
    1230:	01018289 	smlabbeq	r1, r9, r2, r8
    1234:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1238:	00001301 	andeq	r1, r0, r1, lsl #6
    123c:	01828a20 	orreq	r8, r2, r0, lsr #20
    1240:	91180200 	tstls	r8, r0, lsl #4
    1244:	00001842 	andeq	r1, r0, r2, asr #16
    1248:	01828921 	orreq	r8, r2, r1, lsr #18
    124c:	31011101 	tstcc	r1, r1, lsl #2
    1250:	22000013 	andcs	r0, r0, #19
    1254:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1258:	0b3a0e03 	bleq	e84a6c <__Stack_Size+0xe8466c>
    125c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1260:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1264:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1268:	23000019 	movwcs	r0, #25
    126c:	13490101 	movtne	r0, #37121	; 0x9101
    1270:	00001301 	andeq	r1, r0, r1, lsl #6
    1274:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
    1278:	000b2f13 	andeq	r2, fp, r3, lsl pc
    127c:	11010000 	mrsne	r0, (UNDEF: 1)
    1280:	130e2501 	movwne	r2, #58625	; 0xe501
    1284:	1b0e030b 	blne	381eb8 <__Stack_Size+0x381ab8>
    1288:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    128c:	00171006 	andseq	r1, r7, r6
    1290:	00240200 	eoreq	r0, r4, r0, lsl #4
    1294:	0b3e0b0b 	bleq	f83ec8 <__Stack_Size+0xf83ac8>
    1298:	00000e03 	andeq	r0, r0, r3, lsl #28
    129c:	03001603 	movweq	r1, #1539	; 0x603
    12a0:	3b0b3a08 	blcc	2cfac8 <__Stack_Size+0x2cf6c8>
    12a4:	0013490b 	andseq	r4, r3, fp, lsl #18
    12a8:	00160400 	andseq	r0, r6, r0, lsl #8
    12ac:	0b3a0e03 	bleq	e84ac0 <__Stack_Size+0xe846c0>
    12b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12b4:	35050000 	strcc	r0, [r5, #-0]
    12b8:	00134900 	andseq	r4, r3, r0, lsl #18
    12bc:	00260600 	eoreq	r0, r6, r0, lsl #12
    12c0:	00001349 	andeq	r1, r0, r9, asr #6
    12c4:	0b010407 	bleq	422e8 <__Stack_Size+0x41ee8>
    12c8:	3b0b3a0b 	blcc	2cfafc <__Stack_Size+0x2cf6fc>
    12cc:	0013010b 	andseq	r0, r3, fp, lsl #2
    12d0:	00280800 	eoreq	r0, r8, r0, lsl #16
    12d4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    12d8:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    12dc:	1c080300 	stcne	3, cr0, [r8], {-0}
    12e0:	0a00000d 	beq	131c <__Stack_Size+0xf1c>
    12e4:	0b0b0113 	bleq	2c1738 <__Stack_Size+0x2c1338>
    12e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12ec:	00001301 	andeq	r1, r0, r1, lsl #6
    12f0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    12f4:	3b0b3a0e 	blcc	2cfb34 <__Stack_Size+0x2cf734>
    12f8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    12fc:	0c00000b 	stceq	0, cr0, [r0], {11}
    1300:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1304:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1308:	0b381349 	bleq	e06034 <__Stack_Size+0xe05c34>
    130c:	160d0000 	strne	r0, [sp], -r0
    1310:	3a0e0300 	bcc	381f18 <__Stack_Size+0x381b18>
    1314:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1318:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    131c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1320:	0b3a0e03 	bleq	e84b34 <__Stack_Size+0xe84734>
    1324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1328:	06120111 			; <UNDEFINED> instruction: 0x06120111
    132c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1330:	00130119 	andseq	r0, r3, r9, lsl r1
    1334:	00050f00 	andeq	r0, r5, r0, lsl #30
    1338:	0b3a0e03 	bleq	e84b4c <__Stack_Size+0xe8474c>
    133c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1340:	00001802 	andeq	r1, r0, r2, lsl #16
    1344:	03000510 	movweq	r0, #1296	; 0x510
    1348:	3b0b3a0e 	blcc	2cfb88 <__Stack_Size+0x2cf788>
    134c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1350:	11000017 	tstne	r0, r7, lsl r0
    1354:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1358:	0b3a0e03 	bleq	e84b6c <__Stack_Size+0xe8476c>
    135c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1360:	01111349 	tsteq	r1, r9, asr #6
    1364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1368:	00194297 	mulseq	r9, r7, r2
    136c:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    1370:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1374:	0b3b0b3a 	bleq	ec4064 <__Stack_Size+0xec3c64>
    1378:	13491927 	movtne	r1, #39207	; 0x9927
    137c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1380:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1384:	13000019 	movwne	r0, #25
    1388:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    138c:	0b3b0b3a 	bleq	ec407c <__Stack_Size+0xec3c7c>
    1390:	17021349 	strne	r1, [r2, -r9, asr #6]
    1394:	34140000 	ldrcc	r0, [r4], #-0
    1398:	3a080300 	bcc	201fa0 <__Stack_Size+0x201ba0>
    139c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a0:	00170213 	andseq	r0, r7, r3, lsl r2
    13a4:	11010000 	mrsne	r0, (UNDEF: 1)
    13a8:	130e2501 	movwne	r2, #58625	; 0xe501
    13ac:	1b0e030b 	blne	381fe0 <__Stack_Size+0x381be0>
    13b0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    13b4:	00171006 	andseq	r1, r7, r6
    13b8:	00240200 	eoreq	r0, r4, r0, lsl #4
    13bc:	0b3e0b0b 	bleq	f83ff0 <__Stack_Size+0xf83bf0>
    13c0:	00000e03 	andeq	r0, r0, r3, lsl #28
    13c4:	03001603 	movweq	r1, #1539	; 0x603
    13c8:	3b0b3a08 	blcc	2cfbf0 <__Stack_Size+0x2cf7f0>
    13cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    13d0:	00160400 	andseq	r0, r6, r0, lsl #8
    13d4:	0b3a0e03 	bleq	e84be8 <__Stack_Size+0xe847e8>
    13d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13dc:	35050000 	strcc	r0, [r5, #-0]
    13e0:	00134900 	andseq	r4, r3, r0, lsl #18
    13e4:	01040600 	tsteq	r4, r0, lsl #12
    13e8:	0b3a0b0b 	bleq	e8401c <__Stack_Size+0xe83c1c>
    13ec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    13f0:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    13f4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    13f8:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    13fc:	08030028 	stmdaeq	r3, {r3, r5}
    1400:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1404:	0b011309 	bleq	46030 <__Stack_Size+0x45c30>
    1408:	3b0b3a0b 	blcc	2cfc3c <__Stack_Size+0x2cf83c>
    140c:	00130105 	andseq	r0, r3, r5, lsl #2
    1410:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1414:	0b3a0803 	bleq	e83428 <__Stack_Size+0xe83028>
    1418:	1349053b 	movtne	r0, #38203	; 0x953b
    141c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1420:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1424:	3b0b3a0e 	blcc	2cfc64 <__Stack_Size+0x2cf864>
    1428:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    142c:	0c00000b 	stceq	0, cr0, [r0], {11}
    1430:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1434:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1438:	00001349 	andeq	r1, r0, r9, asr #6
    143c:	0b01130d 	bleq	46078 <__Stack_Size+0x45c78>
    1440:	3b0b3a0b 	blcc	2cfc74 <__Stack_Size+0x2cf874>
    1444:	0013010b 	andseq	r0, r3, fp, lsl #2
    1448:	000d0e00 	andeq	r0, sp, r0, lsl #28
    144c:	0b3a0e03 	bleq	e84c60 <__Stack_Size+0xe84860>
    1450:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1454:	00000b38 	andeq	r0, r0, r8, lsr fp
    1458:	3f012e0f 	svccc	0x00012e0f
    145c:	3a0e0319 	bcc	3820c8 <__Stack_Size+0x381cc8>
    1460:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1464:	010b2019 	tsteq	fp, r9, lsl r0
    1468:	10000013 	andne	r0, r0, r3, lsl r0
    146c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1470:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1474:	00001349 	andeq	r1, r0, r9, asr #6
    1478:	03003411 	movweq	r3, #1041	; 0x411
    147c:	3b0b3a0e 	blcc	2cfcbc <__Stack_Size+0x2cf8bc>
    1480:	00134905 	andseq	r4, r3, r5, lsl #18
    1484:	000f1200 	andeq	r1, pc, r0, lsl #4
    1488:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    148c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1490:	3a0e0301 	bcc	38209c <__Stack_Size+0x381c9c>
    1494:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1498:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    149c:	97184006 	ldrls	r4, [r8, -r6]
    14a0:	13011942 	movwne	r1, #6466	; 0x1942
    14a4:	05140000 	ldreq	r0, [r4, #-0]
    14a8:	3a0e0300 	bcc	3820b0 <__Stack_Size+0x381cb0>
    14ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14b0:	00180213 	andseq	r0, r8, r3, lsl r2
    14b4:	00051500 	andeq	r1, r5, r0, lsl #10
    14b8:	0b3a0e03 	bleq	e84ccc <__Stack_Size+0xe848cc>
    14bc:	1349053b 	movtne	r0, #38203	; 0x953b
    14c0:	00001702 	andeq	r1, r0, r2, lsl #14
    14c4:	03003416 	movweq	r3, #1046	; 0x416
    14c8:	3b0b3a0e 	blcc	2cfd08 <__Stack_Size+0x2cf908>
    14cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    14d0:	17000017 	smladne	r0, r7, r0, r0
    14d4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14dc:	17021349 	strne	r1, [r2, -r9, asr #6]
    14e0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    14e4:	03193f01 	tsteq	r9, #1, 30
    14e8:	3b0b3a0e 	blcc	2cfd28 <__Stack_Size+0x2cf928>
    14ec:	1119270b 	tstne	r9, fp, lsl #14
    14f0:	40061201 	andmi	r1, r6, r1, lsl #4
    14f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    14f8:	00001301 	andeq	r1, r0, r1, lsl #6
    14fc:	03000519 	movweq	r0, #1305	; 0x519
    1500:	3b0b3a0e 	blcc	2cfd40 <__Stack_Size+0x2cf940>
    1504:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1508:	1a000017 	bne	156c <__Stack_Size+0x116c>
    150c:	01018289 	smlabbeq	r1, r9, r2, r8
    1510:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1514:	00001301 	andeq	r1, r0, r1, lsl #6
    1518:	01828a1b 	orreq	r8, r2, fp, lsl sl
    151c:	91180200 	tstls	r8, r0, lsl #4
    1520:	00001842 	andeq	r1, r0, r2, asr #16
    1524:	0182891c 	orreq	r8, r2, ip, lsl r9
    1528:	95011101 	strls	r1, [r1, #-257]	; 0x101
    152c:	13311942 	teqne	r1, #1081344	; 0x108000
    1530:	00001301 	andeq	r1, r0, r1, lsl #6
    1534:	0182891d 	orreq	r8, r2, sp, lsl r9
    1538:	95011101 	strls	r1, [r1, #-257]	; 0x101
    153c:	13311942 	teqne	r1, #1081344	; 0x108000
    1540:	051e0000 	ldreq	r0, [lr, #-0]
    1544:	3a0e0300 	bcc	38214c <__Stack_Size+0x381d4c>
    1548:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    154c:	00180213 	andseq	r0, r8, r3, lsl r2
    1550:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1554:	0b3a0e03 	bleq	e84d68 <__Stack_Size+0xe84968>
    1558:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    155c:	00001702 	andeq	r1, r0, r2, lsl #14
    1560:	3f012e20 	svccc	0x00012e20
    1564:	3a0e0319 	bcc	3821d0 <__Stack_Size+0x381dd0>
    1568:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    156c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1570:	97184006 	ldrls	r4, [r8, -r6]
    1574:	13011942 	movwne	r1, #6466	; 0x1942
    1578:	1d210000 	stcne	0, cr0, [r1, #-0]
    157c:	11133101 	tstne	r3, r1, lsl #2
    1580:	58061201 	stmdapl	r6, {r0, r9, ip}
    1584:	0005590b 	andeq	r5, r5, fp, lsl #18
    1588:	00052200 	andeq	r2, r5, r0, lsl #4
    158c:	17021331 	smladxne	r2, r1, r3, r1
    1590:	05230000 	streq	r0, [r3, #-0]!
    1594:	02133100 	andseq	r3, r3, #0, 2
    1598:	24000018 	strcs	r0, [r0], #-24
    159c:	0111010b 	tsteq	r1, fp, lsl #2
    15a0:	00000612 	andeq	r0, r0, r2, lsl r6
    15a4:	31003425 	tstcc	r0, r5, lsr #8
    15a8:	00170213 	andseq	r0, r7, r3, lsl r2
    15ac:	011d2600 	tsteq	sp, r0, lsl #12
    15b0:	01111331 	tsteq	r1, r1, lsr r3
    15b4:	0b580612 	bleq	1602e04 <__Stack_Size+0x1602a04>
    15b8:	13010559 	movwne	r0, #5465	; 0x1559
    15bc:	89270000 	stmdbhi	r7!, {}	; <UNPREDICTABLE>
    15c0:	11000182 	smlabbne	r0, r2, r1, r0
    15c4:	00133101 	andseq	r3, r3, r1, lsl #2
    15c8:	82892800 	addhi	r2, r9, #0, 16
    15cc:	01110101 	tsteq	r1, r1, lsl #2
    15d0:	00001331 	andeq	r1, r0, r1, lsr r3
    15d4:	31012e29 	tstcc	r1, r9, lsr #28
    15d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    15dc:	97184006 	ldrls	r4, [r8, -r6]
    15e0:	13011942 	movwne	r1, #6466	; 0x1942
    15e4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    15e8:	3a0e0301 	bcc	3821f4 <__Stack_Size+0x381df4>
    15ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    15f0:	010b2019 	tsteq	fp, r9, lsl r0
    15f4:	2b000013 	blcs	1648 <__Stack_Size+0x1248>
    15f8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    15fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1600:	00001349 	andeq	r1, r0, r9, asr #6
    1604:	31011d2c 	tstcc	r1, ip, lsr #26
    1608:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    160c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1610:	00130105 	andseq	r0, r3, r5, lsl #2
    1614:	010b2d00 	tsteq	fp, r0, lsl #26
    1618:	00001755 	andeq	r1, r0, r5, asr r7
    161c:	3f012e2e 	svccc	0x00012e2e
    1620:	3a0e0319 	bcc	38228c <__Stack_Size+0x381e8c>
    1624:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1628:	11134919 	tstne	r3, r9, lsl r9
    162c:	40061201 	andmi	r1, r6, r1, lsl #4
    1630:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1634:	00001301 	andeq	r1, r0, r1, lsl #6
    1638:	3f012e2f 	svccc	0x00012e2f
    163c:	3a0e0319 	bcc	3822a8 <__Stack_Size+0x381ea8>
    1640:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1644:	01193c19 	tsteq	r9, r9, lsl ip
    1648:	30000013 	andcc	r0, r0, r3, lsl r0
    164c:	13490005 	movtne	r0, #36869	; 0x9005
    1650:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    1654:	03193f01 	tsteq	r9, #1, 30
    1658:	3b0b3a0e 	blcc	2cfe98 <__Stack_Size+0x2cfa98>
    165c:	3c192705 	ldccc	7, cr2, [r9], {5}
    1660:	00000019 	andeq	r0, r0, r9, lsl r0
    1664:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1668:	030b130e 	movweq	r1, #45838	; 0xb30e
    166c:	110e1b0e 	tstne	lr, lr, lsl #22
    1670:	10061201 	andne	r1, r6, r1, lsl #4
    1674:	02000017 	andeq	r0, r0, #23
    1678:	0b0b0024 	bleq	2c1710 <__Stack_Size+0x2c1310>
    167c:	0e030b3e 	vmoveq.16	d3[0], r0
    1680:	16030000 	strne	r0, [r3], -r0
    1684:	3a080300 	bcc	20228c <__Stack_Size+0x201e8c>
    1688:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    168c:	04000013 	streq	r0, [r0], #-19
    1690:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1694:	0b3b0b3a 	bleq	ec4384 <__Stack_Size+0xec3f84>
    1698:	00001349 	andeq	r1, r0, r9, asr #6
    169c:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    16a0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    16a4:	0b0b0104 	bleq	2c1abc <__Stack_Size+0x2c16bc>
    16a8:	0b3b0b3a 	bleq	ec4398 <__Stack_Size+0xec3f98>
    16ac:	00001301 	andeq	r1, r0, r1, lsl #6
    16b0:	03002807 	movweq	r2, #2055	; 0x807
    16b4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    16b8:	00280800 	eoreq	r0, r8, r0, lsl #16
    16bc:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    16c0:	13090000 	movwne	r0, #36864	; 0x9000
    16c4:	3a0b0b01 	bcc	2c42d0 <__Stack_Size+0x2c3ed0>
    16c8:	01053b0b 	tsteq	r5, fp, lsl #22
    16cc:	0a000013 	beq	1720 <__Stack_Size+0x1320>
    16d0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    16d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16d8:	0b381349 	bleq	e06404 <__Stack_Size+0xe06004>
    16dc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    16e0:	3a0e0300 	bcc	3822e8 <__Stack_Size+0x381ee8>
    16e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    16e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    16ec:	00160c00 	andseq	r0, r6, r0, lsl #24
    16f0:	0b3a0e03 	bleq	e84f04 <__Stack_Size+0xe84b04>
    16f4:	1349053b 	movtne	r0, #38203	; 0x953b
    16f8:	130d0000 	movwne	r0, #53248	; 0xd000
    16fc:	3a0b0b01 	bcc	2c4308 <__Stack_Size+0x2c3f08>
    1700:	010b3b0b 	tsteq	fp, fp, lsl #22
    1704:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1708:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    170c:	0b3b0b3a 	bleq	ec43fc <__Stack_Size+0xec3ffc>
    1710:	0b381349 	bleq	e0643c <__Stack_Size+0xe0603c>
    1714:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1718:	03193f01 	tsteq	r9, #1, 30
    171c:	3b0b3a0e 	blcc	2cff5c <__Stack_Size+0x2cfb5c>
    1720:	1119270b 	tstne	r9, fp, lsl #14
    1724:	40061201 	andmi	r1, r6, r1, lsl #4
    1728:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    172c:	00001301 	andeq	r1, r0, r1, lsl #6
    1730:	03000510 	movweq	r0, #1296	; 0x510
    1734:	3b0b3a0e 	blcc	2cff74 <__Stack_Size+0x2cfb74>
    1738:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    173c:	11000017 	tstne	r0, r7, lsl r0
    1740:	01018289 	smlabbeq	r1, r9, r2, r8
    1744:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1748:	00001301 	andeq	r1, r0, r1, lsl #6
    174c:	01828a12 	orreq	r8, r2, r2, lsl sl
    1750:	91180200 	tstls	r8, r0, lsl #4
    1754:	00001842 	andeq	r1, r0, r2, asr #16
    1758:	01828913 	orreq	r8, r2, r3, lsl r9
    175c:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1760:	13311942 	teqne	r1, #1081344	; 0x108000
    1764:	00001301 	andeq	r1, r0, r1, lsl #6
    1768:	01828914 	orreq	r8, r2, r4, lsl r9
    176c:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1770:	13311942 	teqne	r1, #1081344	; 0x108000
    1774:	0f150000 	svceq	0x00150000
    1778:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    177c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1780:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1784:	0b3b0b3a 	bleq	ec4474 <__Stack_Size+0xec4074>
    1788:	17021349 	strne	r1, [r2, -r9, asr #6]
    178c:	34170000 	ldrcc	r0, [r7], #-0
    1790:	3a0e0300 	bcc	382398 <__Stack_Size+0x381f98>
    1794:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1798:	00180213 	andseq	r0, r8, r3, lsl r2
    179c:	82891800 	addhi	r1, r9, #0, 16
    17a0:	01110101 	tsteq	r1, r1, lsl #2
    17a4:	00001331 	andeq	r1, r0, r1, lsr r3
    17a8:	03000519 	movweq	r0, #1305	; 0x519
    17ac:	3b0b3a0e 	blcc	2cffec <__Stack_Size+0x2cfbec>
    17b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    17b4:	1a000018 	bne	181c <__Stack_Size+0x141c>
    17b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    17bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    17c0:	17021349 	strne	r1, [r2, -r9, asr #6]
    17c4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    17c8:	03193f01 	tsteq	r9, #1, 30
    17cc:	3b0b3a0e 	blcc	2d000c <__Stack_Size+0x2cfc0c>
    17d0:	11192705 	tstne	r9, r5, lsl #14
    17d4:	40061201 	andmi	r1, r6, r1, lsl #4
    17d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    17dc:	00001301 	andeq	r1, r0, r1, lsl #6
    17e0:	0300051c 	movweq	r0, #1308	; 0x51c
    17e4:	3b0b3a0e 	blcc	2d0024 <__Stack_Size+0x2cfc24>
    17e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    17ec:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    17f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    17f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    17f8:	17021349 	strne	r1, [r2, -r9, asr #6]
    17fc:	341e0000 	ldrcc	r0, [lr], #-0
    1800:	3a0e0300 	bcc	382408 <__Stack_Size+0x382008>
    1804:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1808:	00180213 	andseq	r0, r8, r3, lsl r2
    180c:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
    1810:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1814:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1818:	13491927 	movtne	r1, #39207	; 0x9927
    181c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1820:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1824:	00130119 	andseq	r0, r3, r9, lsl r1
    1828:	00342000 	eorseq	r2, r4, r0
    182c:	0b3a0e03 	bleq	e85040 <__Stack_Size+0xe84c40>
    1830:	1349053b 	movtne	r0, #38203	; 0x953b
    1834:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1838:	03193f01 	tsteq	r9, #1, 30
    183c:	3b0b3a0e 	blcc	2d007c <__Stack_Size+0x2cfc7c>
    1840:	3c192705 	ldccc	7, cr2, [r9], {5}
    1844:	00130119 	andseq	r0, r3, r9, lsl r1
    1848:	00052200 	andeq	r2, r5, r0, lsl #4
    184c:	00001349 	andeq	r1, r0, r9, asr #6
    1850:	00110100 	andseq	r0, r1, r0, lsl #2
    1854:	01110610 	tsteq	r1, r0, lsl r6
    1858:	08030112 	stmdaeq	r3, {r1, r4, r8}
    185c:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
    1860:	00000513 	andeq	r0, r0, r3, lsl r5
    1864:	01110100 	tsteq	r1, r0, lsl #2
    1868:	0b130e25 	bleq	4c5104 <__Stack_Size+0x4c4d04>
    186c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1870:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1874:	00001710 	andeq	r1, r0, r0, lsl r7
    1878:	0b002402 	bleq	a888 <__Stack_Size+0xa488>
    187c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1880:	0300000e 	movweq	r0, #14
    1884:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1888:	0b3a0e03 	bleq	e8509c <__Stack_Size+0xe84c9c>
    188c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1890:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1894:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1898:	00130119 	andseq	r0, r3, r9, lsl r1
    189c:	00340400 	eorseq	r0, r4, r0, lsl #8
    18a0:	0b3a0e03 	bleq	e850b4 <__Stack_Size+0xe84cb4>
    18a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18a8:	34050000 	strcc	r0, [r5], #-0
    18ac:	3a0e0300 	bcc	3824b4 <__Stack_Size+0x3820b4>
    18b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18b4:	00170213 	andseq	r0, r7, r3, lsl r2
    18b8:	82890600 	addhi	r0, r9, #0, 12
    18bc:	01110001 	tsteq	r1, r1
    18c0:	00001331 	andeq	r1, r0, r1, lsr r3
    18c4:	0b000f07 	bleq	54e8 <__Stack_Size+0x50e8>
    18c8:	0013490b 	andseq	r4, r3, fp, lsl #18
    18cc:	00340800 	eorseq	r0, r4, r0, lsl #16
    18d0:	0b3a0e03 	bleq	e850e4 <__Stack_Size+0xe84ce4>
    18d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18d8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    18dc:	34090000 	strcc	r0, [r9], #-0
    18e0:	3a0e0300 	bcc	3824e8 <__Stack_Size+0x3820e8>
    18e4:	3f0b3b0b 	svccc	0x000b3b0b
    18e8:	00193c19 	andseq	r3, r9, r9, lsl ip
    18ec:	01010a00 	tsteq	r1, r0, lsl #20
    18f0:	13011349 	movwne	r1, #4937	; 0x1349
    18f4:	210b0000 	mrscs	r0, (UNDEF: 11)
    18f8:	2f134900 	svccs	0x00134900
    18fc:	0c00000b 	stceq	0, cr0, [r0], {11}
    1900:	19270015 	stmdbne	r7!, {r0, r2, r4}
    1904:	340d0000 	strcc	r0, [sp], #-0
    1908:	3a0e0300 	bcc	382510 <__Stack_Size+0x382110>
    190c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1910:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1914:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    1918:	13490026 	movtne	r0, #36902	; 0x9026
    191c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1920:	03193f00 	tsteq	r9, #0, 30
    1924:	3b0b3a0e 	blcc	2d0164 <__Stack_Size+0x2cfd64>
    1928:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    192c:	00193c13 	andseq	r3, r9, r3, lsl ip
    1930:	00241000 	eoreq	r1, r4, r0
    1934:	0b3e0b0b 	bleq	f84568 <__Stack_Size+0xf84168>
    1938:	00000803 	andeq	r0, r0, r3, lsl #16
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000004d9 	ldrdeq	r0, [r0], -r9
       4:	01250002 			; <UNDEFINED> instruction: 0x01250002
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	41010000 	mrsmi	r0, (UNDEF: 1)
      1c:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
      20:	73006372 	movwvc	r6, #882	; 0x372
      24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      2c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      34:	50504100 	subspl	r4, r0, r0, lsl #2
      38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      3c:	616d0000 	cmnvs	sp, r0
      40:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
      44:	00000100 	andeq	r0, r0, r0, lsl #2
      48:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      4c:	30316632 	eorscc	r6, r1, r2, lsr r6
      50:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      54:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
      58:	00000200 	andeq	r0, r0, r0, lsl #4
      5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      60:	30316632 	eorscc	r6, r1, r2, lsr r6
      64:	616d5f78 	smcvs	54776	; 0xd5f8
      68:	00682e70 	rsbeq	r2, r8, r0, ror lr
      6c:	73000002 	movwvc	r0, #2
      70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      74:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      78:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
      7c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
      80:	73000002 	movwvc	r0, #2
      84:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      88:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      8c:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
      90:	00682e63 	rsbeq	r2, r8, r3, ror #28
      94:	73000002 	movwvc	r0, #2
      98:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      9c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      a0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
      a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      a8:	74730000 	ldrbtvc	r0, [r3], #-0
      ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      b0:	5f783031 	svcpl	0x00783031
      b4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
      b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
      bc:	3c000002 	stccc	0, cr0, [r0], {2}
      c0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
      c4:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
      c8:	0000003e 	andeq	r0, r0, lr, lsr r0
      cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
      d0:	31663233 	cmncc	r6, r3, lsr r2
      d4:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
      d8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
      dc:	00000200 	andeq	r0, r0, r0, lsl #4
      e0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      e4:	30316632 	eorscc	r6, r1, r2, lsr r6
      e8:	77705f78 			; <UNDEFINED> instruction: 0x77705f78
      ec:	00682e72 	rsbeq	r2, r8, r2, ror lr
      f0:	73000002 	movwvc	r0, #2
      f4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      fc:	616c665f 	cmnvs	ip, pc, asr r6
     100:	682e6873 	stmdavs	lr!, {r0, r1, r4, r5, r6, fp, sp, lr}
     104:	00000200 	andeq	r0, r0, r0, lsl #4
     108:	616e7964 	cmnvs	lr, r4, ror #18
     10c:	6578696d 	ldrbvs	r6, [r8, #-2413]!	; 0x96d
     110:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     114:	73000003 	movwvc	r0, #3
     118:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     11c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     120:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     124:	6b636974 	blvs	18da6fc <__Stack_Size+0x18da2fc>
     128:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     12c:	00000000 	andeq	r0, r0, r0
     130:	31340205 	teqcc	r4, r5, lsl #4
     134:	b0030800 	andlt	r0, r3, r0, lsl #16
     138:	31230106 			; <UNDEFINED> instruction: 0x31230106
     13c:	221e304d 	andscs	r3, lr, #77	; 0x4d
     140:	5b202803 	blpl	80a154 <__Stack_Size+0x809d54>
     144:	56032d4d 	strpl	r2, [r3], -sp, asr #26
     148:	3f3f3f3c 	svccc	0x003f3f3c
     14c:	00694d3f 	rsbeq	r4, r9, pc, lsr sp
     150:	3f010402 	svccc	0x00010402
     154:	0402005d 	streq	r0, [r2], #-93	; 0x5d
     158:	18033f01 	stmdane	r3, {r0, r8, r9, sl, fp, ip, sp}
     15c:	4e6a2874 	mcrmi	8, 3, r2, cr10, cr4, {3}
     160:	1c241d22 	stcne	13, cr1, [r4], #-136	; 0xffffff78
     164:	2f2f2f2f 	svccs	0x002f2f2f
     168:	2f1c2431 	svccs	0x001c2431
     16c:	2f2f2f2f 	svccs	0x002f2f2f
     170:	282e0a03 	stmdacs	lr!, {r0, r1, r9, fp}
     174:	03207a03 			; <UNDEFINED> instruction: 0x03207a03
     178:	7a033c09 	bvc	cf1a4 <__Stack_Size+0xceda4>
     17c:	21212120 			; <UNDEFINED> instruction: 0x21212120
     180:	2f2f2f2b 	svccs	0x002f2f2b
     184:	2f3a3030 	svccs	0x003a3030
     188:	1f4d302f 	svcne	0x004d302f
     18c:	302d2d21 	eorcc	r2, sp, r1, lsr #26
     190:	4b4c4b30 	blmi	1312e58 <__Stack_Size+0x1312a58>
     194:	7437034b 	ldrtvc	r0, [r7], #-843	; 0x34b
     198:	86136a13 			; <UNDEFINED> instruction: 0x86136a13
     19c:	20774013 	rsbscs	r4, r7, r3, lsl r0
     1a0:	004c4b21 	subeq	r4, ip, r1, lsr #22
     1a4:	4b010402 	blmi	411b4 <__Stack_Size+0x40db4>
     1a8:	862d4c68 	strthi	r4, [sp], -r8, ror #24
     1ac:	4d3d5b17 	fldmdbxmi	sp!, {d5-d15}	;@ Deprecated
     1b0:	4a00da03 	bmi	369c4 <__Stack_Size+0x365c4>
     1b4:	00211f13 	eoreq	r1, r1, r3, lsl pc
     1b8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     1bc:	3c630367 	stclcc	3, cr0, [r3], #-412	; 0xfffffe64
     1c0:	033d3d2f 	teqeq	sp, #3008	; 0xbc0
     1c4:	202078c6 	eorcs	r7, r0, r6, asr #17
     1c8:	592f4b21 	stmdbpl	pc!, {r0, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
     1cc:	206c2d30 	rsbcs	r2, ip, r0, lsr sp
     1d0:	672f4b21 	strvs	r4, [pc, -r1, lsr #22]!
     1d4:	ec032d30 	stc	13, cr2, [r3], {48}	; 0x30
     1d8:	85136606 	ldrhi	r6, [r3, #-1542]	; 0x606
     1dc:	32323232 	eorscc	r3, r2, #536870915	; 0x20000003
     1e0:	27083232 	smladxcs	r8, r2, r2, r3
     1e4:	593e5921 	ldmdbpl	lr!, {r0, r5, r8, fp, ip, lr}
     1e8:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     1ec:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     1f0:	032d5a3e 			; <UNDEFINED> instruction: 0x032d5a3e
     1f4:	20200810 	eorcs	r0, r0, r0, lsl r8
     1f8:	3e213d23 	cdpcc	13, 2, cr3, cr1, cr3, {1}
     1fc:	212f2f2d 			; <UNDEFINED> instruction: 0x212f2f2d
     200:	70032d3e 	andvc	r2, r3, lr, lsr sp
     204:	3d21202e 	stccc	0, cr2, [r1, #-184]!	; 0xffffff48
     208:	da032d21 	ble	cb694 <__Stack_Size+0xcb294>
     20c:	1e142e78 	mrcne	14, 0, r2, cr4, cr8, {3}
     210:	2f3d3d25 	svccs	0x003d3d25
     214:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     218:	91032c3f 	tstls	r3, pc, lsr ip
     21c:	21208204 			; <UNDEFINED> instruction: 0x21208204
     220:	312d2f4b 			; <UNDEFINED> instruction: 0x312d2f4b
     224:	5b2d5a21 	blpl	b56ab0 <__Stack_Size+0xb566b0>
     228:	032d5a21 			; <UNDEFINED> instruction: 0x032d5a21
     22c:	20587beb 	subscs	r7, r8, fp, ror #23
     230:	3e243f2f 	cdpcc	15, 2, cr3, cr4, cr15, {1}
     234:	211f2f59 	tstcs	pc, r9, asr pc	; <UNPREDICTABLE>
     238:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 1b8 <_Minimum_Stack_Size+0xb8>
     23c:	82049003 	andhi	r9, r4, #3
     240:	2159212e 	cmpcs	r9, lr, lsr #2
     244:	4a1d032d 	bmi	740f00 <__Stack_Size+0x740b00>
     248:	034b2120 	movteq	r2, #45344	; 0xb120
     24c:	213c7bd6 			; <UNDEFINED> instruction: 0x213c7bd6
     250:	211f2f4b 	tstcs	pc, fp, asr #30
     254:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 1d4 <_Minimum_Stack_Size+0xd4>
     258:	2f4b2188 	svccs	0x004b2188
     25c:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     260:	208a2c3f 	addcs	r2, sl, pc, lsr ip
     264:	1f2f4b21 	svcne	0x002f4b21
     268:	3f3d2221 	svccc	0x003d2221
     26c:	9009032c 	andls	r0, r9, ip, lsr #6
     270:	2f4b2120 	svccs	0x004b2120
     274:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     278:	db032c3f 	blle	cb37c <__Stack_Size+0xcaf7c>
     27c:	31209003 			; <UNDEFINED> instruction: 0x31209003
     280:	4b2f232b 	blmi	bc8f34 <__Stack_Size+0xbc8b34>
     284:	01040200 	mrseq	r0, R12_usr
     288:	02005806 	andeq	r5, r0, #393216	; 0x60000
     28c:	4b060104 	blmi	1806a4 <__Stack_Size+0x1802a4>
     290:	2e0a033d 	mcrcs	3, 0, r0, cr10, cr13, {1}
     294:	232b3120 			; <UNDEFINED> instruction: 0x232b3120
     298:	02004b2f 	andeq	r4, r0, #48128	; 0xbc00
     29c:	58060104 	stmdapl	r6, {r2, r8}
     2a0:	02040200 	andeq	r0, r4, #0, 4
     2a4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     2a8:	02005803 	andeq	r5, r0, #196608	; 0x30000
     2ac:	21060304 	tstcs	r6, r4, lsl #6
     2b0:	7c98033d 	ldcvc	3, cr0, [r8], {61}	; 0x3d
     2b4:	4b21202e 	blmi	848374 <__Stack_Size+0x847f74>
     2b8:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     2bc:	032b403d 			; <UNDEFINED> instruction: 0x032b403d
     2c0:	21209009 			; <UNDEFINED> instruction: 0x21209009
     2c4:	211f2f4b 	tstcs	pc, fp, asr #30
     2c8:	2b403d22 	blcs	100f758 <__Stack_Size+0x100f358>
     2cc:	4b212097 	blmi	848530 <__Stack_Size+0x848130>
     2d0:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     2d4:	972c3f3d 			; <UNDEFINED> instruction: 0x972c3f3d
     2d8:	2f4b2120 	svccs	0x004b2120
     2dc:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     2e0:	20972c3f 	addscs	r2, r7, pc, lsr ip
     2e4:	1f2f4b21 	svcne	0x002f4b21
     2e8:	3f3d2221 	svccc	0x003d2221
     2ec:	2120982c 			; <UNDEFINED> instruction: 0x2120982c
     2f0:	211f2f4b 	tstcs	pc, fp, asr #30
     2f4:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 274 <_Minimum_Stack_Size+0x174>
     2f8:	4b212097 	blmi	84855c <__Stack_Size+0x84815c>
     2fc:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     300:	972c3f3d 			; <UNDEFINED> instruction: 0x972c3f3d
     304:	2f4b2120 	svccs	0x004b2120
     308:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     30c:	20972c3f 	addscs	r2, r7, pc, lsr ip
     310:	1f2f4b21 	svcne	0x002f4b21
     314:	3f3d2221 	svccc	0x003d2221
     318:	2120962c 			; <UNDEFINED> instruction: 0x2120962c
     31c:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
     320:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 2a0 <_Minimum_Stack_Size+0x1a0>
     324:	2b594087 	blcs	1650548 <__Stack_Size+0x1650148>
     328:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     32c:	322005bc 	eorcc	r0, r0, #188, 10	; 0x2f000000
     330:	2f4d3e3d 	svccs	0x004d3e3d
     334:	2f2f3724 	svccs	0x002f3724
     338:	7a31302f 	bvc	c4c3fc <__Stack_Size+0xc4bffc>
     33c:	2c221e22 	stccs	14, cr1, [r2], #-136	; 0xffffff78
     340:	312f2f2b 			; <UNDEFINED> instruction: 0x312f2f2b
     344:	59695b2f 	stmdbpl	r9!, {r0, r1, r2, r3, r5, r8, r9, fp, ip, lr}^
     348:	5a68215b 	bpl	1a088bc <__Stack_Size+0x1a084bc>
     34c:	922f1f59 	eorls	r1, pc, #356	; 0x164
     350:	6721a43d 			; <UNDEFINED> instruction: 0x6721a43d
     354:	4e221608 	cfmadda32mi	mvax0, mvax1, mvfx2, mvfx8
     358:	4b13402d 	blmi	4d0414 <__Stack_Size+0x4d0014>
     35c:	3e222086 	cdpcc	0, 2, cr2, cr2, cr6, {4}
     360:	01040200 	mrseq	r0, R12_usr
     364:	214c4d3e 	cmpcs	ip, lr, lsr sp
     368:	79f4032d 	ldmibvc	r4!, {r0, r2, r3, r5, r8, r9}^
     36c:	1d312058 	ldcne	0, cr2, [r1, #-352]!	; 0xfffffea0
     370:	004c2f23 	subeq	r2, ip, r3, lsr #30
     374:	06010402 	streq	r0, [r1], -r2, lsl #8
     378:	04020020 	streq	r0, [r2], #-32
     37c:	002f0603 	eoreq	r0, pc, r3, lsl #12
     380:	3b030402 	blcc	c1390 <__Stack_Size+0xc0f90>
     384:	032b2333 			; <UNDEFINED> instruction: 0x032b2333
     388:	223c01b7 	eorscs	r0, ip, #-1073741779	; 0xc000002d
     38c:	4c595959 	mrrcmi	9, 5, r5, r9, cr9
     390:	5c2d5a59 	stcpl	10, cr5, [sp], #-356	; 0xfffffe9c
     394:	593d5921 	ldmdbpl	sp!, {r0, r5, r8, fp, ip, lr}
     398:	3d673f59 	stclcc	15, cr3, [r7, #-356]!	; 0xfffffe9c
     39c:	59593d59 	ldmdbpl	r9, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
     3a0:	412d683d 			; <UNDEFINED> instruction: 0x412d683d
     3a4:	03040200 	movweq	r0, #16896	; 0x4200
     3a8:	04020032 	streq	r0, [r2], #-50	; 0x32
     3ac:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     3b0:	003d0304 	eorseq	r0, sp, r4, lsl #6
     3b4:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     3b8:	03040200 	movweq	r0, #16896	; 0x4200
     3bc:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     3c0:	02005903 	andeq	r5, r0, #49152	; 0xc000
     3c4:	00590304 	subseq	r0, r9, r4, lsl #6
     3c8:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     3cc:	03040200 	movweq	r0, #16896	; 0x4200
     3d0:	04020059 	streq	r0, [r2], #-89	; 0x59
     3d4:	02005903 	andeq	r5, r0, #49152	; 0xc000
     3d8:	003e0304 	eorseq	r0, lr, r4, lsl #6
     3dc:	59030402 	stmdbpl	r3, {r1, sl}
     3e0:	03040200 	movweq	r0, #16896	; 0x4200
     3e4:	04020059 	streq	r0, [r2], #-89	; 0x59
     3e8:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     3ec:	00590304 	subseq	r0, r9, r4, lsl #6
     3f0:	59030402 	stmdbpl	r3, {r1, sl}
     3f4:	03040200 	movweq	r0, #16896	; 0x4200
     3f8:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     3fc:	02005903 	andeq	r5, r0, #49152	; 0xc000
     400:	00590304 	subseq	r0, r9, r4, lsl #6
     404:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     408:	03040200 	movweq	r0, #16896	; 0x4200
     40c:	04020059 	streq	r0, [r2], #-89	; 0x59
     410:	02005903 	andeq	r5, r0, #49152	; 0xc000
     414:	003e0304 	eorseq	r0, lr, r4, lsl #6
     418:	59030402 	stmdbpl	r3, {r1, sl}
     41c:	03040200 	movweq	r0, #16896	; 0x4200
     420:	04020059 	streq	r0, [r2], #-89	; 0x59
     424:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     428:	003d0304 	eorseq	r0, sp, r4, lsl #6
     42c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     430:	03040200 	movweq	r0, #16896	; 0x4200
     434:	033c5b03 	teqeq	ip, #3072	; 0xc00
     438:	2f034a27 	svccs	0x00034a27
     43c:	593d20ac 	ldmdbpl	sp!, {r2, r3, r5, r7, sp}
     440:	034b4b4b 	movteq	r4, #47947	; 0xbb4b
     444:	2f205816 	svccs	0x00205816
     448:	5b592f3d 	blpl	164c144 <__Stack_Size+0x164bd44>
     44c:	01a3032c 			; <UNDEFINED> instruction: 0x01a3032c
     450:	3d404e58 	stclcc	14, cr4, [r0, #-352]	; 0xfffffea0
     454:	1b2f2f2f 	blne	bcc118 <__Stack_Size+0xbcbd18>
     458:	3d223125 	stfccs	f3, [r2, #-148]!	; 0xffffff6c
     45c:	316a4d3e 	cmncc	sl, lr, lsr sp
     460:	513e3d30 	teqpl	lr, r0, lsr sp
     464:	7d83034c 	stcvc	3, cr0, [r3, #304]	; 0x130
     468:	31312266 	teqcc	r1, r6, ror #4
     46c:	4b303030 	blmi	c0c534 <__Stack_Size+0xc0c134>
     470:	bd032d3d 	stclt	13, cr2, [r3, #-244]	; 0xffffff0c
     474:	21014a02 	tstcs	r1, r2, lsl #20
     478:	3c029503 	cfstr32cc	mvfx9, [r2], {3}
     47c:	40166a13 	andsmi	r6, r6, r3, lsl sl
     480:	01000702 	tsteq	r0, r2, lsl #14
     484:	02050001 	andeq	r0, r5, #1
     488:	08005f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, lr}
     48c:	0103cf03 	tsteq	r3, r3, lsl #30
     490:	2e0f0332 	mcrcs	3, 0, r0, cr15, cr2, {1}
     494:	5c593d3d 	mrrcpl	13, 3, r3, r9, cr13
     498:	2b234d4b 	blcs	8d39cc <__Stack_Size+0x8d35cc>
     49c:	0a032f23 	beq	cc130 <__Stack_Size+0xcbd30>
     4a0:	4b32304a 	blmi	c8c5d0 <__Stack_Size+0xc8c1d0>
     4a4:	034a0a03 	movteq	r0, #43523	; 0xaa03
     4a8:	28213c77 	stmdacs	r1!, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp}
     4ac:	034d592f 	movteq	r5, #55599	; 0xd92f
     4b0:	03212e72 			; <UNDEFINED> instruction: 0x03212e72
     4b4:	4b36200d 	blmi	d884f0 <__Stack_Size+0xd880f0>
     4b8:	5959595c 	ldmdbpl	r9, {r2, r3, r4, r6, r8, fp, ip, lr}^
     4bc:	515b5b2f 	cmppl	fp, pc, lsr #22
     4c0:	5b4b5959 	blpl	12d6a2c <__Stack_Size+0x12d662c>
     4c4:	2e01d203 	cdpcs	2, 0, cr13, cr1, cr3, {0}
     4c8:	7eb1034b 	cdpvc	3, 11, cr0, cr1, cr11, {2}
     4cc:	3d5c3d2e 	ldclcc	13, cr3, [ip, #-184]	; 0xffffff48
     4d0:	5c5c3d5b 	mrrcpl	13, 5, r3, ip, cr11
     4d4:	4a62032f 	bmi	1881198 <__Stack_Size+0x1880d98>
     4d8:	01000802 	tsteq	r0, r2, lsl #16
     4dc:	00012501 	andeq	r2, r1, r1, lsl #10
     4e0:	2d000200 	sfmcs	f0, 4, [r0, #-0]
     4e4:	02000000 	andeq	r0, r0, #0
     4e8:	0d0efb01 	vstreq	d15, [lr, #-4]
     4ec:	01010100 	mrseq	r0, (UNDEF: 17)
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	01000001 	tsteq	r0, r1
     4f8:	2f505041 	svccs	0x00505041
     4fc:	00637273 	rsbeq	r7, r3, r3, ror r2
     500:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     504:	31663233 	cmncc	r6, r3, lsr r2
     508:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     50c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     510:	00000001 	andeq	r0, r0, r1
     514:	fc020500 	stc2	5, cr0, [r2], {-0}
     518:	0308003d 	movweq	r0, #32829	; 0x803d
     51c:	0b030123 	bleq	c09b0 <__Stack_Size+0xc05b0>
     520:	04020020 	streq	r0, [r2], #-32
     524:	0b031601 	bleq	c5d30 <__Stack_Size+0xc5930>
     528:	04020020 	streq	r0, [r2], #-32
     52c:	0b031601 	bleq	c5d38 <__Stack_Size+0xc5938>
     530:	04020020 	streq	r0, [r2], #-32
     534:	0b031601 	bleq	c5d40 <__Stack_Size+0xc5940>
     538:	04020020 	streq	r0, [r2], #-32
     53c:	0b031601 	bleq	c5d48 <__Stack_Size+0xc5948>
     540:	200b0320 	andcs	r0, fp, r0, lsr #6
     544:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     548:	0313200b 	tsteq	r3, #11
     54c:	0b032e0b 	bleq	cbd80 <__Stack_Size+0xcb980>
     550:	200b0320 	andcs	r0, fp, r0, lsr #6
     554:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     558:	0b03200b 	bleq	c858c <__Stack_Size+0xc818c>
     55c:	200b0320 	andcs	r0, fp, r0, lsr #6
     560:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     564:	0b03200b 	bleq	c8598 <__Stack_Size+0xc8198>
     568:	200b0320 	andcs	r0, fp, r0, lsr #6
     56c:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     570:	0b03200b 	bleq	c85a4 <__Stack_Size+0xc81a4>
     574:	200b0320 	andcs	r0, fp, r0, lsr #6
     578:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     57c:	0b03200b 	bleq	c85b0 <__Stack_Size+0xc81b0>
     580:	200c0320 	andcs	r0, ip, r0, lsr #6
     584:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     588:	0b03200c 	bleq	c85c0 <__Stack_Size+0xc81c0>
     58c:	200b0320 	andcs	r0, fp, r0, lsr #6
     590:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     594:	0c03200b 	stceq	0, cr2, [r3], {11}
     598:	200c0320 	andcs	r0, ip, r0, lsr #6
     59c:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5a0:	0313200b 	tsteq	r3, #11
     5a4:	0b032e0b 	bleq	cbdd8 <__Stack_Size+0xcb9d8>
     5a8:	200b0320 	andcs	r0, fp, r0, lsr #6
     5ac:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5b0:	0b03200b 	bleq	c85e4 <__Stack_Size+0xc81e4>
     5b4:	200b0320 	andcs	r0, fp, r0, lsr #6
     5b8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5bc:	0313200b 	tsteq	r3, #11
     5c0:	0b032e0b 	bleq	cbdf4 <__Stack_Size+0xcb9f4>
     5c4:	200b0320 	andcs	r0, fp, r0, lsr #6
     5c8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5cc:	0b03200b 	bleq	c8600 <__Stack_Size+0xc8200>
     5d0:	200c0320 	andcs	r0, ip, r0, lsr #6
     5d4:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     5d8:	0b03200b 	bleq	c860c <__Stack_Size+0xc820c>
     5dc:	200b0320 	andcs	r0, fp, r0, lsr #6
     5e0:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5e4:	0b03200b 	bleq	c8618 <__Stack_Size+0xc8218>
     5e8:	200b0320 	andcs	r0, fp, r0, lsr #6
     5ec:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5f0:	0b03200b 	bleq	c8624 <__Stack_Size+0xc8224>
     5f4:	200b0320 	andcs	r0, fp, r0, lsr #6
     5f8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5fc:	0c03200b 	stceq	0, cr2, [r3], {11}
     600:	00010220 	andeq	r0, r1, r0, lsr #4
     604:	00620101 	rsbeq	r0, r2, r1, lsl #2
     608:	00020000 	andeq	r0, r2, r0
     60c:	00000028 	andeq	r0, r0, r8, lsr #32
     610:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     614:	0101000d 	tsteq	r1, sp
     618:	00000101 	andeq	r0, r0, r1, lsl #2
     61c:	00000100 	andeq	r0, r0, r0, lsl #2
     620:	50504101 	subspl	r4, r0, r1, lsl #2
     624:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     628:	78640000 	stmdavc	r4!, {}^	; <UNPREDICTABLE>
     62c:	61685f6c 	cmnvs	r8, ip, ror #30
     630:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     634:	00000001 	andeq	r0, r0, r1
     638:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     63c:	1608003e 			; <UNDEFINED> instruction: 0x1608003e
     640:	16313e26 	ldrtne	r3, [r1], -r6, lsr #28
     644:	20321532 	eorscs	r1, r2, r2, lsr r5
     648:	04020035 	streq	r0, [r2], #-53	; 0x35
     64c:	003c0601 	eorseq	r0, ip, r1, lsl #12
     650:	06030402 	streq	r0, [r3], -r2, lsl #8
     654:	20315b2f 	eorscs	r5, r1, pc, lsr #22
     658:	04020035 	streq	r0, [r2], #-53	; 0x35
     65c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     660:	315d4b30 	cmpcc	sp, r0, lsr fp
     664:	02164e17 	andseq	r4, r6, #368	; 0x170
     668:	01010002 	tsteq	r1, r2
     66c:	00000154 	andeq	r0, r0, r4, asr r1
     670:	003f0002 	eorseq	r0, pc, r2
     674:	01020000 	mrseq	r0, (UNDEF: 2)
     678:	000d0efb 	strdeq	r0, [sp], -fp
     67c:	01010101 	tsteq	r1, r1, lsl #2
     680:	01000000 	mrseq	r0, (UNDEF: 0)
     684:	41010000 	mrsmi	r0, (UNDEF: 1)
     688:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
     68c:	41006372 	tstmi	r0, r2, ror r3
     690:	692f5050 	stmdbvs	pc!, {r4, r6, ip, lr}	; <UNPREDICTABLE>
     694:	0000636e 	andeq	r6, r0, lr, ror #6
     698:	616e7964 	cmnvs	lr, r4, ror #18
     69c:	6578696d 	ldrbvs	r6, [r8, #-2413]!	; 0x96d
     6a0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     6a4:	64000001 	strvs	r0, [r0], #-1
     6a8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     6ac:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
     6b0:	00000200 	andeq	r0, r0, r0, lsl #4
     6b4:	02050000 	andeq	r0, r5, #0
     6b8:	08003ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, sp}
     6bc:	24011303 	strcs	r1, [r1], #-771	; 0x303
     6c0:	3d5b221e 	lfmcc	f2, 2, [fp, #-120]	; 0xffffff88
     6c4:	32138541 	andscc	r8, r3, #272629760	; 0x10400000
     6c8:	221e5125 	andscs	r5, lr, #1073741833	; 0x40000009
     6cc:	3d22221e 	sfmcc	f2, 4, [r2, #-120]!	; 0xffffff88
     6d0:	3550232f 	ldrbcc	r2, [r0, #-815]	; 0x32f
     6d4:	03211e22 			; <UNDEFINED> instruction: 0x03211e22
     6d8:	02002062 	andeq	r2, r0, #98	; 0x62
     6dc:	1f030104 	svcne	0x00030104
     6e0:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     6e4:	22594b03 	subscs	r4, r9, #3072	; 0xc00
     6e8:	3150301e 	cmpcc	r0, lr, lsl r0
     6ec:	2f3f4c4b 	svccs	0x003f4c4b
     6f0:	1e302f40 	cdpne	15, 3, cr2, cr0, cr0, {2}
     6f4:	24783022 	ldrbtcs	r3, [r8], #-34	; 0x22
     6f8:	30334c5b 	eorscc	r4, r3, fp, asr ip
     6fc:	3db23f2f 	ldccc	15, cr3, [r2, #188]!	; 0xbc
     700:	2f1f212d 	svccs	0x001f212d
     704:	033d4e22 	teqeq	sp, #544	; 0x220
     708:	7c312e19 	ldcvc	14, cr2, [r1], #-100	; 0xffffff9c
     70c:	2f585e03 	svccs	0x00585e03
     710:	0334252f 	teqeq	r4, #197132288	; 0xbc00000
     714:	0326207a 			; <UNDEFINED> instruction: 0x0326207a
     718:	03303c7a 	teqeq	r0, #31232	; 0x7a00
     71c:	a5459e09 	strbge	r9, [r5, #-3593]	; 0xe09
     720:	82140359 	andshi	r0, r4, #1677721601	; 0x64000001
     724:	222f1f4b 	eorcs	r1, pc, #300	; 0x12c
     728:	212d3d4b 			; <UNDEFINED> instruction: 0x212d3d4b
     72c:	6e032f1f 	mcrvs	15, 0, r2, cr3, cr15, {0}
     730:	3c1a0320 	ldccc	3, cr0, [sl], {32}
     734:	03226791 			; <UNDEFINED> instruction: 0x03226791
     738:	3022c80c 	eorcc	ip, r2, ip, lsl #16
     73c:	147a304f 	ldrbtne	r3, [sl], #-79	; 0x4f
     740:	136a1369 	cmnne	sl, #-1543503871	; 0xa4000001
     744:	136a136a 	cmnne	sl, #-1476395007	; 0xa8000001
     748:	694e136a 	stmdbvs	lr, {r1, r3, r5, r6, r8, r9, ip}^
     74c:	2f136914 	svccs	0x00136914
     750:	31301769 	teqcc	r0, r9, ror #14
     754:	3f183117 	svccc	0x00183117
     758:	04020013 	streq	r0, [r2], #-19
     75c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     760:	221e2f31 	andscs	r2, lr, #49, 30	; 0xc4
     764:	00214e22 	eoreq	r4, r1, r2, lsr #28
     768:	06010402 	streq	r0, [r1], -r2, lsl #8
     76c:	3031062e 	eorscc	r0, r1, lr, lsr #12
     770:	22221c2f 	eorcs	r1, r2, #12032	; 0x2f00
     774:	135b3122 	cmpne	fp, #-2147483640	; 0x80000008
     778:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
     77c:	20060104 	andcs	r0, r6, r4, lsl #2
     780:	1e233006 	cdpne	0, 2, cr3, cr3, cr6, {0}
     784:	22211d23 	eorcs	r1, r1, #2240	; 0x8c0
     788:	214e2d23 	cmpcs	lr, r3, lsr #26
     78c:	01040200 	mrseq	r0, R12_usr
     790:	31062e06 	tstcc	r6, r6, lsl #28
     794:	241c2130 	ldrcs	r2, [ip], #-304	; 0x130
     798:	b503271e 	strlt	r2, [r3, #-1822]	; 0x71e
     79c:	03302e7f 	teqeq	r0, #2032	; 0x7f0
     7a0:	4d4a00cc 	stclmi	0, cr0, [sl, #-816]	; 0xfffffcd0
     7a4:	00211f13 	eoreq	r1, r1, r3, lsl pc
     7a8:	06010402 	streq	r0, [r1], -r2, lsl #8
     7ac:	03330620 	teqeq	r3, #32, 12	; 0x2000000
     7b0:	03207fbc 			; <UNDEFINED> instruction: 0x03207fbc
     7b4:	242e00c1 	strtcs	r0, [lr], #-193	; 0xc1
     7b8:	211c241d 	tstcs	ip, sp, lsl r4
     7bc:	022d2323 	eoreq	r2, sp, #-1946157056	; 0x8c000000
     7c0:	01010005 	tsteq	r1, r5
     7c4:	00000206 	andeq	r0, r0, r6, lsl #4
     7c8:	00880002 	addeq	r0, r8, r2
     7cc:	01020000 	mrseq	r0, (UNDEF: 2)
     7d0:	000d0efb 	strdeq	r0, [sp], -fp
     7d4:	01010101 	tsteq	r1, r1, lsl #2
     7d8:	01000000 	mrseq	r0, (UNDEF: 0)
     7dc:	73010000 	movwvc	r0, #4096	; 0x1000
     7e0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     7e4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     7e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     7ec:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     7f0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     7f4:	31663233 	cmncc	r6, r3, lsr r2
     7f8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     7fc:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     800:	0000636e 	andeq	r6, r0, lr, ror #6
     804:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     808:	30316632 	eorscc	r6, r1, r2, lsr r6
     80c:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     810:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     814:	00010063 	andeq	r0, r1, r3, rrx
     818:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     81c:	31663233 	cmncc	r6, r3, lsr r2
     820:	745f7830 	ldrbvc	r7, [pc], #-2096	; 828 <__Stack_Size+0x428>
     824:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     828:	00020068 	andeq	r0, r2, r8, rrx
     82c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     830:	31663233 	cmncc	r6, r3, lsr r2
     834:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 77c <__Stack_Size+0x37c>
     838:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     83c:	00000200 	andeq	r0, r0, r0, lsl #4
     840:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     844:	30316632 	eorscc	r6, r1, r2, lsr r6
     848:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     84c:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     850:	00020068 	andeq	r0, r2, r8, rrx
     854:	05000000 	streq	r0, [r0, #-0]
     858:	00426c02 	subeq	r6, r2, r2, lsl #24
     85c:	00d60308 	sbcseq	r0, r6, r8, lsl #6
     860:	03591701 	cmpeq	r9, #262144	; 0x40000
     864:	5917740e 	ldmdbpl	r7, {r1, r2, r3, sl, ip, sp, lr}
     868:	17740e03 	ldrbne	r0, [r4, -r3, lsl #28]!
     86c:	740c0359 	strvc	r0, [ip], #-857	; 0x359
     870:	0b033d14 	bleq	cfcc8 <__Stack_Size+0xcf8c8>
     874:	f6031490 			; <UNDEFINED> instruction: 0xf6031490
     878:	2f148203 	svccs	0x00148203
     87c:	144a0a03 	strbne	r0, [sl], #-2563	; 0xa03
     880:	4a0b032f 	bmi	2c1544 <__Stack_Size+0x2c1144>
     884:	2e090315 	mcrcs	3, 0, r0, cr9, cr5, {0}
     888:	15660a03 	strbne	r0, [r6, #-2563]!	; 0xa03
     88c:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
     890:	1d28660e 	stcne	6, cr6, [r8, #-56]!	; 0xffffffc8
     894:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
     898:	263e1874 			; <UNDEFINED> instruction: 0x263e1874
     89c:	10032941 	andne	r2, r3, r1, asr #18
     8a0:	4a0f033c 	bmi	3c1598 <__Stack_Size+0x3c1198>
     8a4:	660c0317 			; <UNDEFINED> instruction: 0x660c0317
     8a8:	42425015 	submi	r5, r2, #21
     8ac:	344a7003 	strbcc	r7, [sl], #-3
     8b0:	03201003 			; <UNDEFINED> instruction: 0x03201003
     8b4:	24203c0c 	strtcs	r3, [r0], #-3084	; 0xc0c
     8b8:	04020031 	streq	r0, [r2], #-49	; 0x31
     8bc:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     8c0:	30201903 	eorcc	r1, r0, r3, lsl #18
     8c4:	2f746803 	svccs	0x00746803
     8c8:	b2035d33 	andlt	r5, r3, #3264	; 0xcc0
     8cc:	27202e7a 			; <UNDEFINED> instruction: 0x27202e7a
     8d0:	2925314c 	stmdbcs	r5!, {r2, r3, r6, r8, ip, sp}
     8d4:	304d214b 	subcc	r2, sp, fp, asr #2
     8d8:	0c036b23 	stceq	11, cr6, [r3], {35}	; 0x23
     8dc:	314c244a 	cmpcc	ip, sl, asr #8
     8e0:	4d4b2a24 	vstrmi	s5, [fp, #-144]	; 0xffffff70
     8e4:	036b2330 	cmneq	fp, #48, 6	; 0xc0000000
     8e8:	4c243c0c 	stcmi	12, cr3, [r4], #-48	; 0xffffffd0
     8ec:	78033631 	stmdavc	r3, {r0, r4, r5, r9, sl, ip, sp}
     8f0:	4b3f212e 	blmi	fc8db0 <__Stack_Size+0xfc89b0>
     8f4:	0331304d 	teqeq	r1, #77	; 0x4d
     8f8:	77033c09 	strvc	r3, [r3, -r9, lsl #24]
     8fc:	1d233120 	stfnes	f3, [r3, #-128]!	; 0xffffff80
     900:	0a03313f 	beq	cce04 <__Stack_Size+0xcca04>
     904:	036c232e 	cmneq	ip, #-1207959552	; 0xb8000000
     908:	2720740d 	strcs	r7, [r0, -sp, lsl #8]!
     90c:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
     910:	1b253230 	blne	94d1d8 <__Stack_Size+0x94cdd8>
     914:	3230314c 	eorscc	r3, r0, #76, 2
     918:	3c0a0331 	stccc	3, cr0, [sl], {49}	; 0x31
     91c:	0d036c23 	stceq	12, cr6, [r3, #-140]	; 0xffffff74
     920:	0327204a 			; <UNDEFINED> instruction: 0x0327204a
     924:	30272079 	eorcc	r2, r7, r9, ror r0
     928:	4c1c2431 	cfldrsmi	mvf2, [ip], {49}	; 0x31
     92c:	6b233022 	blvs	8cc9bc <__Stack_Size+0x8cc5bc>
     930:	204a0e03 	subcs	r0, sl, r3, lsl #28
     934:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     938:	33313026 	teqcc	r1, #38	; 0x26
     93c:	243f211b 	ldrtcs	r2, [pc], #-283	; 944 <__Stack_Size+0x544>
     940:	30233d1c 	eorcc	r3, r3, ip, lsl sp
     944:	14036b23 	strne	r6, [r3], #-2851	; 0xb23
     948:	0f032066 	svceq	0x00032066
     94c:	77033e20 	strvc	r3, [r3, -r0, lsr #28]
     950:	200c032e 	andcs	r0, ip, lr, lsr #6
     954:	032e7503 			; <UNDEFINED> instruction: 0x032e7503
     958:	3d21200b 	stccc	0, cr2, [r1, #-44]!	; 0xffffffd4
     95c:	033e1e22 	teqeq	lr, #544	; 0x220
     960:	15032072 	strne	r2, [r3, #-114]	; 0x72
     964:	1d23372e 	stcne	7, cr3, [r3, #-184]!	; 0xffffff48
     968:	033e3023 	teqeq	lr, #35	; 0x23
     96c:	17032069 	strne	r2, [r3, -r9, rrx]
     970:	033f2320 	teqeq	pc, #32, 6	; 0x80000000
     974:	1c032e64 	stcne	14, cr2, [r3], {100}	; 0x64
     978:	6203302e 	andvs	r3, r3, #46	; 0x2e
     97c:	201e0320 	andscs	r0, lr, r0, lsr #6
     980:	5d033f23 	stcpl	15, cr3, [r3, #-140]	; 0xffffff74
     984:	2023032e 	eorcs	r0, r3, lr, lsr #6
     988:	205b034c 	subscs	r0, fp, ip, asr #6
     98c:	23202503 			; <UNDEFINED> instruction: 0x23202503
     990:	036b313f 	cmneq	fp, #-1073741809	; 0xc000000f
     994:	26207410 			; <UNDEFINED> instruction: 0x26207410
     998:	0335314c 	teqeq	r5, #76, 2
     99c:	3e212e79 	mcrcc	14, 1, r2, cr1, cr9, {3}
     9a0:	31304d4b 	teqcc	r0, fp, asr #26
     9a4:	32225a5b 	eorcc	r5, r2, #372736	; 0x5b000
     9a8:	79314c32 	ldmdbvc	r1!, {r1, r4, r5, sl, fp, lr}
     9ac:	18036c23 	stmdane	r3, {r0, r1, r5, sl, fp, sp, lr}
     9b0:	20090374 	andcs	r0, r9, r4, ror r3
     9b4:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
     9b8:	3f212009 	svccc	0x00212009
     9bc:	03207303 			; <UNDEFINED> instruction: 0x03207303
     9c0:	31302e0d 	teqcc	r0, sp, lsl #28
     9c4:	233e3f76 	teqcs	lr, #472	; 0x1d8
     9c8:	0007026b 	andeq	r0, r7, fp, ror #4
     9cc:	017e0101 	cmneq	lr, r1, lsl #2
     9d0:	00020000 	andeq	r0, r2, r0
     9d4:	00000099 	muleq	r0, r9, r0
     9d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9dc:	0101000d 	tsteq	r1, sp
     9e0:	00000101 	andeq	r0, r0, r1, lsl #2
     9e4:	00000100 	andeq	r0, r0, r0, lsl #2
     9e8:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     9ec:	31663233 	cmncc	r6, r3, lsr r2
     9f0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     9f4:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     9f8:	73006372 	movwvc	r6, #882	; 0x372
     9fc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     a00:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     a04:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     a08:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a0c:	74730000 	ldrbtvc	r0, [r3], #-0
     a10:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a14:	5f783031 	svcpl	0x00783031
     a18:	6f697067 	svcvs	0x00697067
     a1c:	0100632e 	tsteq	r0, lr, lsr #6
     a20:	74730000 	ldrbtvc	r0, [r3], #-0
     a24:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a28:	5f783031 	svcpl	0x00783031
     a2c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     a30:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a34:	74730000 	ldrbtvc	r0, [r3], #-0
     a38:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a3c:	5f783031 	svcpl	0x00783031
     a40:	2e70616d 	rpwcssz	f6, f0, #5.0
     a44:	00020068 	andeq	r0, r2, r8, rrx
     a48:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a4c:	31663233 	cmncc	r6, r3, lsr r2
     a50:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
     a54:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     a58:	00020068 	andeq	r0, r2, r8, rrx
     a5c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a60:	31663233 	cmncc	r6, r3, lsr r2
     a64:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     a68:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     a6c:	00000200 	andeq	r0, r0, r0, lsl #4
     a70:	02050000 	andeq	r0, r5, #0
     a74:	080046ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, lr}
     a78:	24013303 	strcs	r3, [r1], #-771	; 0x303
     a7c:	032a4bf5 			; <UNDEFINED> instruction: 0x032a4bf5
     a80:	034bac17 	movteq	sl, #48151	; 0xbc17
     a84:	324b2e70 	subcc	r2, fp, #112, 28	; 0x700
     a88:	034b324b 	movteq	r3, #45643	; 0xb24b
     a8c:	324b2e09 	subcc	r2, fp, #9, 28	; 0x90
     a90:	7a034259 	bvc	d13fc <__Stack_Size+0xd0ffc>
     a94:	8212032e 	andshi	r0, r2, #-1207959552	; 0xb8000000
     a98:	032d4c21 			; <UNDEFINED> instruction: 0x032d4c21
     a9c:	0a034a0f 	beq	d32e0 <__Stack_Size+0xd2ee0>
     aa0:	20760301 	rsbscs	r0, r6, r1, lsl #6
     aa4:	25200c03 	strcs	r0, [r0, #-3075]!	; 0xc03
     aa8:	20740333 	rsbscs	r0, r4, r3, lsr r3
     aac:	223e3335 	eorscs	r3, lr, #-738197504	; 0xd4000000
     ab0:	30303022 	eorscc	r3, r0, r2, lsr #32
     ab4:	1d343d30 	ldcne	13, cr3, [r4, #-192]!	; 0xffffff40
     ab8:	2233224d 	eorscs	r2, r3, #-805306364	; 0xd0000004
     abc:	02040200 	andeq	r0, r4, #0, 4
     ac0:	032e6603 			; <UNDEFINED> instruction: 0x032e6603
     ac4:	30253c1f 	eorcc	r3, r5, pc, lsl ip
     ac8:	2f303e21 	svccs	0x00303e21
     acc:	343d3030 	ldrtcc	r3, [sp], #-48	; 0x30
     ad0:	31224d1d 			; <UNDEFINED> instruction: 0x31224d1d
     ad4:	04020022 	streq	r0, [r2], #-34	; 0x22
     ad8:	2e690302 	cdpcs	3, 6, cr0, cr9, cr2, {0}
     adc:	033c1b03 	teqeq	ip, #3072	; 0xc00
     ae0:	3d142e0d 	ldccc	14, cr2, [r4, #-52]	; 0xffffffcc
     ae4:	3c0d032f 	stccc	3, cr0, [sp], {47}	; 0x2f
     ae8:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     aec:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     af0:	2e0c0321 	cdpcs	3, 0, cr0, cr12, cr1, {1}
     af4:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     af8:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     afc:	2e0d0321 	cdpcs	3, 0, cr0, cr13, cr1, {1}
     b00:	2e0e0317 	mcrcs	3, 0, r0, cr14, cr7, {0}
     b04:	2e110317 	mrccs	3, 0, r0, cr1, cr7, {0}
     b08:	03322218 	teqeq	r2, #24, 4	; 0x80000001
     b0c:	03162e0e 	tsteq	r6, #14, 28	; 0xe0
     b10:	30192e0e 	andscc	r2, r9, lr, lsl #28
     b14:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
     b18:	192e1003 	stmdbne	lr!, {r0, r1, ip}
     b1c:	03305a30 	teqeq	r0, #48, 20	; 0x30000
     b20:	0316580c 	tsteq	r6, #12, 16	; 0xc0000
     b24:	25276627 	strcs	r6, [r7, #-1575]!	; 0x627
     b28:	23222345 			; <UNDEFINED> instruction: 0x23222345
     b2c:	284c2f1f 	stmdacs	ip, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}^
     b30:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
     b34:	03207003 			; <UNDEFINED> instruction: 0x03207003
     b38:	4b342e0a 	blmi	d0c368 <__Stack_Size+0xd0bf68>
     b3c:	034d2231 	movteq	r2, #53809	; 0xd231
     b40:	03196610 	tsteq	r9, #16, 12	; 0x1000000
     b44:	22278279 	eorcs	r8, r7, #-1879048185	; 0x90000007
     b48:	023d301e 	eorseq	r3, sp, #30
     b4c:	01010005 	tsteq	r1, r5
     b50:	000001ce 	andeq	r0, r0, lr, asr #3
     b54:	009a0002 	addseq	r0, sl, r2
     b58:	01020000 	mrseq	r0, (UNDEF: 2)
     b5c:	000d0efb 	strdeq	r0, [sp], -fp
     b60:	01010101 	tsteq	r1, r1, lsl #2
     b64:	01000000 	mrseq	r0, (UNDEF: 0)
     b68:	73010000 	movwvc	r0, #4096	; 0x1000
     b6c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b70:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b74:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     b78:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     b7c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     b80:	31663233 	cmncc	r6, r3, lsr r2
     b84:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     b88:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     b8c:	0000636e 	andeq	r6, r0, lr, ror #6
     b90:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b94:	30316632 	eorscc	r6, r1, r2, lsr r6
     b98:	766e5f78 	uqsub16vc	r5, lr, r8
     b9c:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
     ba0:	00000100 	andeq	r0, r0, r0, lsl #2
     ba4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ba8:	30316632 	eorscc	r6, r1, r2, lsr r6
     bac:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bb0:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     bb4:	00000200 	andeq	r0, r0, r0, lsl #4
     bb8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bbc:	30316632 	eorscc	r6, r1, r2, lsr r6
     bc0:	616d5f78 	smcvs	54776	; 0xd5f8
     bc4:	00682e70 	rsbeq	r2, r8, r0, ror lr
     bc8:	73000002 	movwvc	r0, #2
     bcc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     bd0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     bd4:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     bd8:	00682e63 	rsbeq	r2, r8, r3, ror #28
     bdc:	63000002 	movwvs	r0, #2
     be0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     be4:	5f336d78 	svcpl	0x00336d78
     be8:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     bec:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     bf0:	00000002 	andeq	r0, r0, r2
     bf4:	44020500 	strmi	r0, [r2], #-1280	; 0x500
     bf8:	03080049 	movweq	r0, #32841	; 0x8049
     bfc:	21150124 	tstcs	r5, r4, lsr #2
     c00:	2f2f4b2d 	svccs	0x002f4b2d
     c04:	04020030 	streq	r0, [r2], #-48	; 0x30
     c08:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
     c0c:	002c0304 	eoreq	r0, ip, r4, lsl #6
     c10:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
     c14:	03040200 	movweq	r0, #16896	; 0x4200
     c18:	0402001e 	streq	r0, [r2], #-30
     c1c:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
     c20:	242c0304 	strtcs	r0, [ip], #-772	; 0x304
     c24:	154a0b03 	strbne	r0, [sl, #-2819]	; 0xb03
     c28:	2f211e3e 	svccs	0x00211e3e
     c2c:	3e232121 	sufccsp	f2, f3, f1
     c30:	03213d21 			; <UNDEFINED> instruction: 0x03213d21
     c34:	03176617 	tsteq	r7, #24117248	; 0x1700000
     c38:	0a039e0e 	beq	e8478 <__Stack_Size+0xe8078>
     c3c:	20760301 	rsbscs	r0, r6, r1, lsl #6
     c40:	232e0a03 			; <UNDEFINED> instruction: 0x232e0a03
     c44:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
     c48:	313d1c24 	teqcc	sp, r4, lsr #24
     c4c:	2c95312c 	ldfcss	f3, [r5], {44}	; 0x2c
     c50:	242b241f 	strtcs	r2, [fp], #-1055	; 0x41f
     c54:	3122212f 			; <UNDEFINED> instruction: 0x3122212f
     c58:	49211f21 	stmdbmi	r1!, {r0, r5, r8, r9, sl, fp, ip}
     c5c:	03492150 	movteq	r2, #37200	; 0x9150
     c60:	2f149e0e 	svccs	0x00149e0e
     c64:	0b032121 	bleq	c90f0 <__Stack_Size+0xc8cf0>
     c68:	0b03132e 	bleq	c5928 <__Stack_Size+0xc5528>
     c6c:	0b03132e 	bleq	c592c <__Stack_Size+0xc552c>
     c70:	0b03132e 	bleq	c5930 <__Stack_Size+0xc5530>
     c74:	0d03132e 	stceq	3, cr1, [r3, #-184]	; 0xffffff48
     c78:	0b03162e 	bleq	c6538 <__Stack_Size+0xc6138>
     c7c:	0b03133c 	bleq	c5974 <__Stack_Size+0xc5574>
     c80:	032f132e 			; <UNDEFINED> instruction: 0x032f132e
     c84:	4c19580b 	ldcmi	8, cr5, [r9], {11}
     c88:	03660903 	cmneq	r6, #49152	; 0xc000
     c8c:	0316660a 	tsteq	r6, #10485760	; 0xa00000
     c90:	0316660b 	tsteq	r6, #11534336	; 0xb00000
     c94:	2f13ba0c 	svccs	0x0013ba0c
     c98:	19660b03 	stmdbne	r6!, {r0, r1, r8, r9, fp}^
     c9c:	6609034c 	strvs	r0, [r9], -ip, asr #6
     ca0:	13660b03 	cmnne	r6, #3072	; 0xc00
     ca4:	4a10032f 	bmi	401968 <__Stack_Size+0x401568>
     ca8:	9e0b0317 	mcrls	3, 0, r0, cr11, cr7, {0}
     cac:	820b0313 	andhi	r0, fp, #1275068416	; 0x4c000000
     cb0:	82120313 	andshi	r0, r2, #1275068416	; 0x4c000000
     cb4:	32221e27 	eorcc	r1, r2, #624	; 0x270
     cb8:	19741303 	ldmdbne	r4!, {r0, r1, r8, r9, ip}^
     cbc:	0340225a 	movteq	r2, #602	; 0x25a
     cc0:	0903741a 	stmdbeq	r3, {r1, r3, r4, sl, ip, sp, lr}
     cc4:	20770301 	rsbscs	r0, r7, r1, lsl #6
     cc8:	4b200903 	blmi	8030dc <__Stack_Size+0x802cdc>
     ccc:	253f1e31 	ldrcs	r1, [pc, #-3633]!	; fffffea3 <SCS_BASE+0x1fff1ea3>
     cd0:	2326702d 			; <UNDEFINED> instruction: 0x2326702d
     cd4:	033d221e 	teqeq	sp, #-536870911	; 0xe0000001
     cd8:	24242078 	strtcs	r2, [r4], #-120	; 0x78
     cdc:	03661103 	cmneq	r6, #-1073741824	; 0xc0000000
     ce0:	301c010c 	andscc	r0, ip, ip, lsl #2
     ce4:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     ce8:	03740f03 	cmneq	r4, #3, 30
     cec:	301e0109 	andscc	r0, lr, r9, lsl #2
     cf0:	03900f03 	orrseq	r0, r0, #3, 30
     cf4:	301e0109 	andscc	r0, lr, r9, lsl #2
     cf8:	03901503 	orrseq	r1, r0, #12582912	; 0xc00000
     cfc:	301c010c 	andscc	r0, ip, ip, lsl #2
     d00:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     d04:	19741103 	ldmdbne	r4!, {r0, r1, r8, ip}^
     d08:	0330223f 	teqeq	r0, #-268435453	; 0xf0000003
     d0c:	3d362e7a 	ldccc	14, cr2, [r6, #-488]!	; 0xfffffe18
     d10:	23334022 	teqcs	r3, #34	; 0x22
     d14:	034a0f03 	movteq	r0, #44803	; 0xaf03
     d18:	32302009 	eorscc	r2, r0, #9
     d1c:	00040223 	andeq	r0, r4, r3, lsr #4
     d20:	00e70101 	rsceq	r0, r7, r1, lsl #2
     d24:	00020000 	andeq	r0, r2, r0
     d28:	00000098 	muleq	r0, r8, r0
     d2c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d30:	0101000d 	tsteq	r1, sp
     d34:	00000101 	andeq	r0, r0, r1, lsl #2
     d38:	00000100 	andeq	r0, r0, r0, lsl #2
     d3c:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     d40:	31663233 	cmncc	r6, r3, lsr r2
     d44:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     d48:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     d4c:	73006372 	movwvc	r6, #882	; 0x372
     d50:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     d54:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     d58:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     d5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     d60:	74730000 	ldrbtvc	r0, [r3], #-0
     d64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d68:	5f783031 	svcpl	0x00783031
     d6c:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
     d70:	00010063 	andeq	r0, r1, r3, rrx
     d74:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     d78:	31663233 	cmncc	r6, r3, lsr r2
     d7c:	745f7830 	ldrbvc	r7, [pc], #-2096	; d84 <__Stack_Size+0x984>
     d80:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     d84:	00020068 	andeq	r0, r2, r8, rrx
     d88:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     d8c:	31663233 	cmncc	r6, r3, lsr r2
     d90:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; cd8 <__Stack_Size+0x8d8>
     d94:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     d98:	00000200 	andeq	r0, r0, r0, lsl #4
     d9c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     da0:	336d7865 	cmncc	sp, #6619136	; 0x650000
     da4:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
     da8:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     dac:	00000200 	andeq	r0, r0, r0, lsl #4
     db0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     db4:	30316632 	eorscc	r6, r1, r2, lsr r6
     db8:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     dbc:	00682e63 	rsbeq	r2, r8, r3, ror #28
     dc0:	00000002 	andeq	r0, r0, r2
     dc4:	58020500 	stmdapl	r2, {r8, sl}
     dc8:	0308004c 	movweq	r0, #32844	; 0x804c
     dcc:	210100c3 	smlabtcs	r1, r3, r0, r0
     dd0:	0c032d5a 	stceq	13, cr2, [r3], {90}	; 0x5a
     dd4:	0c031658 	stceq	6, cr1, [r3], {88}	; 0x58
     dd8:	15031658 	strne	r1, [r3, #-1624]	; 0x658
     ddc:	31311866 	teqcc	r1, r6, ror #16
     de0:	580c0323 	stmdapl	ip, {r0, r1, r5, r8, r9}
     de4:	66140316 			; <UNDEFINED> instruction: 0x66140316
     de8:	200f031a 	andcs	r0, pc, sl, lsl r3	; <UNPREDICTABLE>
     dec:	23207103 			; <UNDEFINED> instruction: 0x23207103
     df0:	5b233131 	blpl	8cd2bc <__Stack_Size+0x8ccebc>
     df4:	0c033323 	stceq	3, cr3, [r3], {35}	; 0x23
     df8:	4d5b1466 	cfldrdmi	mvd1, [fp, #-408]	; 0xfffffe68
     dfc:	660f035b 			; <UNDEFINED> instruction: 0x660f035b
     e00:	3c0b0318 	stccc	3, cr0, [fp], {24}
     e04:	16740d03 	ldrbtne	r0, [r4], -r3, lsl #26
     e08:	01000802 	tsteq	r0, r2, lsl #16
     e0c:	00019c01 	andeq	r9, r1, r1, lsl #24
     e10:	84000200 	strhi	r0, [r0], #-512	; 0x200
     e14:	02000000 	andeq	r0, r0, #0
     e18:	0d0efb01 	vstreq	d15, [lr, #-4]
     e1c:	01010100 	mrseq	r0, (UNDEF: 17)
     e20:	00000001 	andeq	r0, r0, r1
     e24:	01000001 	tsteq	r0, r1
     e28:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e2c:	30316632 	eorscc	r6, r1, r2, lsr r6
     e30:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e34:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     e38:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     e3c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e40:	5f783031 	svcpl	0x00783031
     e44:	2f62696c 	svccs	0x0062696c
     e48:	00636e69 	rsbeq	r6, r3, r9, ror #28
     e4c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     e50:	31663233 	cmncc	r6, r3, lsr r2
     e54:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     e58:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     e5c:	00000100 	andeq	r0, r0, r0, lsl #2
     e60:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e64:	30316632 	eorscc	r6, r1, r2, lsr r6
     e68:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e6c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     e70:	00000200 	andeq	r0, r0, r0, lsl #4
     e74:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e78:	30316632 	eorscc	r6, r1, r2, lsr r6
     e7c:	616d5f78 	smcvs	54776	; 0xd5f8
     e80:	00682e70 	rsbeq	r2, r8, r0, ror lr
     e84:	73000002 	movwvc	r0, #2
     e88:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     e8c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e90:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     e94:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e98:	00000000 	andeq	r0, r0, r0
     e9c:	4d200205 	sfmmi	f0, 4, [r0, #-20]!	; 0xffffffec
     ea0:	fc030800 	stc2	8, cr0, [r3], {-0}
     ea4:	5b140100 	blpl	5012ac <__Stack_Size+0x500eac>
     ea8:	4d4d694d 	stclmi	9, cr6, [sp, #-308]	; 0xfffffecc
     eac:	18741203 	ldmdane	r4!, {r0, r1, r9, ip}^
     eb0:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
     eb4:	4f5c4d4d 	svcmi	0x005c4d4d
     eb8:	18823503 	stmne	r2, {r0, r1, r8, sl, ip, sp}
     ebc:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
     ec0:	03164a0e 	tsteq	r6, #57344	; 0xe000
     ec4:	31196615 	tstcc	r9, r5, lsl r6
     ec8:	0d03233f 	stceq	3, cr2, [r3, #-252]	; 0xffffff04
     ecc:	0f03164a 	svceq	0x0003164a
     ed0:	31311866 	teqcc	r1, r6, ror #16
     ed4:	580f0323 	stmdapl	pc, {r0, r1, r5, r8, r9}	; <UNPREDICTABLE>
     ed8:	15032f13 	strne	r2, [r3, #-3859]	; 0xf13
     edc:	31311866 	teqcc	r1, r6, ror #16
     ee0:	58120323 	ldmdapl	r2, {r0, r1, r5, r8, r9}
     ee4:	23313118 	teqcs	r1, #24, 2
     ee8:	18581203 	ldmdane	r8, {r0, r1, r9, ip}^
     eec:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
     ef0:	1d284a14 	vstmdbne	r8!, {s8-s27}
     ef4:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
     ef8:	11031674 	tstne	r3, r4, ror r6
     efc:	31311866 	teqcc	r1, r6, ror #16
     f00:	58100323 	ldmdapl	r0, {r0, r1, r5, r8, r9}
     f04:	7a033418 	bvc	cdf6c <__Stack_Size+0xcdb6c>
     f08:	4e232320 	cdpmi	3, 2, cr2, cr3, cr0, {1}
     f0c:	12032421 	andne	r2, r3, #553648128	; 0x21000000
     f10:	12031658 	andne	r1, r3, #88, 12	; 0x5800000
     f14:	0e031766 	cdpeq	7, 0, cr1, cr3, cr6, {3}
     f18:	0c031682 	stceq	6, cr1, [r3], {130}	; 0x82
     f1c:	241c1666 	ldrcs	r1, [ip], #-1638	; 0x666
     f20:	2333513e 	teqcs	r3, #-2147483633	; 0x8000000f
     f24:	321c321e 	andscc	r3, ip, #-536870911	; 0xe0000001
     f28:	03323f27 	teqeq	r2, #39, 30	; 0x9c
     f2c:	1f223c0c 	svcne	0x00223c0c
     f30:	32214d32 	eorcc	r4, r1, #3200	; 0xc80
     f34:	3f32214d 	svccc	0x0032214d
     f38:	03312f21 	teqeq	r1, #33, 30	; 0x84
     f3c:	1e27c816 	mcrne	8, 1, ip, cr7, cr6, {0}
     f40:	16033222 	strne	r3, [r3], -r2, lsr #4
     f44:	221e2774 	andscs	r2, lr, #116, 14	; 0x1d00000
     f48:	74170332 	ldrvc	r0, [r7], #-818	; 0x332
     f4c:	32221e27 	eorcc	r1, r2, #624	; 0x270
     f50:	27741503 	ldrbcs	r1, [r4, -r3, lsl #10]!
     f54:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
     f58:	1e277416 	mcrne	4, 1, r7, cr7, cr6, {0}
     f5c:	0d033222 	sfmeq	f3, 4, [r3, #-136]	; 0xffffff78
     f60:	0c031674 	stceq	6, cr1, [r3], {116}	; 0x74
     f64:	11031666 	tstne	r3, r6, ror #12
     f68:	17031766 	strne	r1, [r3, -r6, ror #14]
     f6c:	01090366 	tsteq	r9, r6, ror #6
     f70:	22303e22 	eorscs	r3, r0, #544	; 0x220
     f74:	0b032632 	bleq	ca844 <__Stack_Size+0xca444>
     f78:	79c3034a 	stmibvc	r3, {r1, r3, r6, r8, r9}^
     f7c:	02002166 	andeq	r2, r0, #-2147483623	; 0x80000019
     f80:	00350204 	eorseq	r0, r5, r4, lsl #4
     f84:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     f88:	02040200 	andeq	r0, r4, #0, 4
     f8c:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     f90:	06200601 	strteq	r0, [r0], -r1, lsl #12
     f94:	3c0a034d 	stccc	3, cr0, [sl], {77}	; 0x4d
     f98:	6606b303 	strvs	fp, [r6], -r3, lsl #6
     f9c:	90120314 	andsls	r0, r2, r4, lsl r3
     fa0:	3c0b0319 	stccc	3, cr0, [fp], {25}
     fa4:	18741103 	ldmdane	r4!, {r0, r1, r8, ip}^
     fa8:	01000602 	tsteq	r0, r2, lsl #12
     fac:	0000b101 	andeq	fp, r0, r1, lsl #2
     fb0:	75000200 	strvc	r0, [r0, #-512]	; 0x200
     fb4:	02000000 	andeq	r0, r0, #0
     fb8:	0d0efb01 	vstreq	d15, [lr, #-4]
     fbc:	01010100 	mrseq	r0, (UNDEF: 17)
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	01000001 	tsteq	r0, r1
     fc8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fcc:	30316632 	eorscc	r6, r1, r2, lsr r6
     fd0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fd4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     fd8:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     fdc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     fe0:	5f783031 	svcpl	0x00783031
     fe4:	2f62696c 	svccs	0x0062696c
     fe8:	00636e69 	rsbeq	r6, r3, r9, ror #28
     fec:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     ff0:	31663233 	cmncc	r6, r3, lsr r2
     ff4:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
     ff8:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     ffc:	632e6b63 			; <UNDEFINED> instruction: 0x632e6b63
    1000:	00000100 	andeq	r0, r0, r0, lsl #2
    1004:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1008:	30316632 	eorscc	r6, r1, r2, lsr r6
    100c:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1010:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1014:	00000200 	andeq	r0, r0, r0, lsl #4
    1018:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    101c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1020:	616d5f78 	smcvs	54776	; 0xd5f8
    1024:	00682e70 	rsbeq	r2, r8, r0, ror lr
    1028:	00000002 	andeq	r0, r0, r2
    102c:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    1030:	03080050 	movweq	r0, #32848	; 0x8050
    1034:	2224012b 	eorcs	r0, r4, #-1073741814	; 0xc000000a
    1038:	660d034e 	strvs	r0, [sp], -lr, asr #6
    103c:	660f0316 			; <UNDEFINED> instruction: 0x660f0316
    1040:	304c3e16 	subcc	r3, ip, r6, lsl lr
    1044:	660d035c 			; <UNDEFINED> instruction: 0x660d035c
    1048:	40221e26 	eormi	r1, r2, r6, lsr #28
    104c:	13660c03 	cmnne	r6, #768	; 0x300
    1050:	4a0e032f 	bmi	381d14 <__Stack_Size+0x381914>
    1054:	3e010a03 	vmlacc.f32	s0, s2, s6
    1058:	09032332 	stmdbeq	r3, {r1, r4, r5, r8, r9, sp}
    105c:	0006022e 	andeq	r0, r6, lr, lsr #4
    1060:	04d70101 	ldrbeq	r0, [r7], #257	; 0x101
    1064:	00020000 	andeq	r0, r2, r0
    1068:	00000097 	muleq	r0, r7, r0
    106c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1070:	0101000d 	tsteq	r1, sp
    1074:	00000101 	andeq	r0, r0, r1, lsl #2
    1078:	00000100 	andeq	r0, r0, r0, lsl #2
    107c:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    1080:	31663233 	cmncc	r6, r3, lsr r2
    1084:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    1088:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    108c:	73006372 	movwvc	r6, #882	; 0x372
    1090:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1094:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1098:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    109c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10a0:	74730000 	ldrbtvc	r0, [r3], #-0
    10a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    10a8:	5f783031 	svcpl	0x00783031
    10ac:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
    10b0:	00010063 	andeq	r0, r1, r3, rrx
    10b4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    10b8:	31663233 	cmncc	r6, r3, lsr r2
    10bc:	745f7830 	ldrbvc	r7, [pc], #-2096	; 10c4 <__Stack_Size+0xcc4>
    10c0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    10c4:	00020068 	andeq	r0, r2, r8, rrx
    10c8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    10cc:	31663233 	cmncc	r6, r3, lsr r2
    10d0:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 1018 <__Stack_Size+0xc18>
    10d4:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    10d8:	00000200 	andeq	r0, r0, r0, lsl #4
    10dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10e0:	30316632 	eorscc	r6, r1, r2, lsr r6
    10e4:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    10e8:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    10ec:	73000002 	movwvc	r0, #2
    10f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    10f4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    10f8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    10fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1100:	00000000 	andeq	r0, r0, r0
    1104:	50e80205 	rscpl	r0, r8, r5, lsl #4
    1108:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
    110c:	68240117 	stmdavs	r4!, {r0, r1, r2, r4, r8}
    1110:	23211f21 			; <UNDEFINED> instruction: 0x23211f21
    1114:	235c2b40 	cmpcs	ip, #64, 22	; 0x10000
    1118:	2e1b0321 	cdpcs	3, 1, cr0, cr11, cr1, {1}
    111c:	24216824 	strtcs	r6, [r1], #-2084	; 0x824
    1120:	6333242a 	teqvs	r3, #704643072	; 0x2a000000
    1124:	23242a32 			; <UNDEFINED> instruction: 0x23242a32
    1128:	68d50321 	ldmvs	r5, {r0, r5, r8, r9}^
    112c:	4bec242e 	blmi	ffb0a1ec <SCS_BASE+0x1fafc1ec>
    1130:	082e7703 	stmdaeq	lr!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1134:	09035915 	stmdbeq	r3, {r0, r2, r4, r8, fp, ip, lr}
    1138:	1f034b3c 	svcne	0x00034b3c
    113c:	2e61032e 	cdpcs	3, 6, cr0, cr1, cr14, {1}
    1140:	4b324b32 	blmi	c93e10 <__Stack_Size+0xc93a10>
    1144:	4b324b32 	blmi	c93e14 <__Stack_Size+0xc93a14>
    1148:	03425932 	movteq	r5, #10546	; 0x2932
    114c:	15032e7a 	strne	r2, [r3, #-3706]	; 0xe7a
    1150:	77591990 			; <UNDEFINED> instruction: 0x77591990
    1154:	00303131 	eorseq	r3, r0, r1, lsr r1
    1158:	06010402 	streq	r0, [r1], -r2, lsl #8
    115c:	034d063c 	movteq	r0, #54844	; 0xd63c
    1160:	0a035811 	beq	d71ac <__Stack_Size+0xd6dac>
    1164:	20760301 	rsbscs	r0, r6, r1, lsl #6
    1168:	5b200a03 	blpl	80397c <__Stack_Size+0x80357c>
    116c:	1d262323 	stcne	3, cr2, [r6, #-140]!	; 0xffffff74
    1170:	033f2b50 	teqeq	pc, #80, 22	; 0x14000
    1174:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    1178:	20090320 	andcs	r0, r9, r0, lsr #6
    117c:	03251b22 			; <UNDEFINED> instruction: 0x03251b22
    1180:	12032069 	andne	r2, r3, #105	; 0x69
    1184:	02002520 	andeq	r2, r0, #32, 10	; 0x8000000
    1188:	20060104 	andcs	r0, r6, r4, lsl #2
    118c:	4a150306 	bmi	541dac <__Stack_Size+0x5419ac>
    1190:	1d2e7603 	stcne	6, cr7, [lr, #-12]!
    1194:	351d2631 	ldrcc	r2, [sp, #-1585]	; 0x631
    1198:	4a0a031c 	bmi	281e10 <__Stack_Size+0x281a10>
    119c:	03232331 			; <UNDEFINED> instruction: 0x03232331
    11a0:	0a035810 	beq	d71e8 <__Stack_Size+0xd6de8>
    11a4:	20760301 	rsbscs	r0, r6, r1, lsl #6
    11a8:	5b200a03 	blpl	8039bc <__Stack_Size+0x8035bc>
    11ac:	1d262323 	stcne	3, cr2, [r6, #-140]!	; 0xffffff74
    11b0:	232b314d 			; <UNDEFINED> instruction: 0x232b314d
    11b4:	31231d23 			; <UNDEFINED> instruction: 0x31231d23
    11b8:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
    11bc:	1d312012 	ldcne	0, cr2, [r1, #-72]!	; 0xffffffb8
    11c0:	02002223 	andeq	r2, r0, #805306370	; 0x30000002
    11c4:	3c060104 	stfccs	f0, [r6], {4}
    11c8:	1d315206 	lfmne	f5, 4, [r1, #-24]!	; 0xffffffe8
    11cc:	403f3123 	eorsmi	r3, pc, r3, lsr #2
    11d0:	2079033f 	rsbscs	r0, r9, pc, lsr r3
    11d4:	234e3127 	movtcs	r3, #57639	; 0xe127
    11d8:	4a100323 	bmi	401e6c <__Stack_Size+0x401a6c>
    11dc:	03010a03 	movweq	r0, #6659	; 0x1a03
    11e0:	0a032076 	beq	c93c0 <__Stack_Size+0xc8fc0>
    11e4:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    11e8:	2b501d26 	blcs	1408688 <__Stack_Size+0x1408288>
    11ec:	231d2323 	tstcs	sp, #-1946157056	; 0x8c000000
    11f0:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    11f4:	31201203 			; <UNDEFINED> instruction: 0x31201203
    11f8:	0022231d 	eoreq	r2, r2, sp, lsl r3
    11fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    1200:	3152063c 	cmpcc	r2, ip, lsr r6
    1204:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    1208:	31232e73 			; <UNDEFINED> instruction: 0x31232e73
    120c:	76032335 			; <UNDEFINED> instruction: 0x76032335
    1210:	200a0320 	andcs	r0, sl, r0, lsr #6
    1214:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    1218:	7603200a 	strvc	r2, [r3], -sl
    121c:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    1220:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    1224:	2324200a 			; <UNDEFINED> instruction: 0x2324200a
    1228:	4a100323 	bmi	401ebc <__Stack_Size+0x401abc>
    122c:	03010a03 	movweq	r0, #6659	; 0x1a03
    1230:	0a032076 	beq	c9410 <__Stack_Size+0xc9010>
    1234:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1238:	2b501d26 	blcs	14086d8 <__Stack_Size+0x14082d8>
    123c:	231d2331 	tstcs	sp, #-1006632960	; 0xc4000000
    1240:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    1244:	31201203 			; <UNDEFINED> instruction: 0x31201203
    1248:	03207403 			; <UNDEFINED> instruction: 0x03207403
    124c:	1b30200c 	blne	c09284 <__Stack_Size+0xc08e84>
    1250:	04020025 	streq	r0, [r2], #-37	; 0x25
    1254:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1258:	40311d52 	eorsmi	r1, r1, r2, asr sp
    125c:	98032323 	stmdals	r3, {r0, r1, r5, r8, r9, sp}
    1260:	0d034a01 	vstreq	s8, [r3, #-4]
    1264:	08100301 	ldmdaeq	r0, {r0, r8, r9}
    1268:	2f3d1412 	svccs	0x003d1412
    126c:	0c032121 	stfeqs	f2, [r3], {33}	; 0x21
    1270:	212f142e 			; <UNDEFINED> instruction: 0x212f142e
    1274:	21212121 			; <UNDEFINED> instruction: 0x21212121
    1278:	2e0c0321 	cdpcs	3, 0, cr0, cr12, cr1, {1}
    127c:	211e2214 	tstcs	lr, r4, lsl r2
    1280:	03212121 			; <UNDEFINED> instruction: 0x03212121
    1284:	2f142e0c 	svccs	0x00142e0c
    1288:	21212121 			; <UNDEFINED> instruction: 0x21212121
    128c:	2e0d0321 	cdpcs	3, 0, cr0, cr13, cr1, {1}
    1290:	4f231d1a 	svcmi	0x00231d1a
    1294:	1a660e03 	bne	1984aa8 <__Stack_Size+0x19846a8>
    1298:	036b232b 	cmneq	fp, #-1409286144	; 0xac000000
    129c:	0a035819 	beq	d7308 <__Stack_Size+0xd6f08>
    12a0:	33232b01 			; <UNDEFINED> instruction: 0x33232b01
    12a4:	194a1403 	stmdbne	sl, {r0, r1, sl, ip}^
    12a8:	192e1803 	stmdbne	lr!, {r0, r1, fp, ip}
    12ac:	034a1603 	movteq	r1, #42499	; 0xa603
    12b0:	232b010a 			; <UNDEFINED> instruction: 0x232b010a
    12b4:	4a0d0333 	bmi	341f88 <__Stack_Size+0x341b88>
    12b8:	74110317 	ldrvc	r0, [r1], #-791	; 0x317
    12bc:	01029203 	tsteq	r2, r3, lsl #4
    12c0:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    12c4:	03207dee 			; <UNDEFINED> instruction: 0x03207dee
    12c8:	28206617 	stmdacs	r0!, {r0, r1, r2, r4, r9, sl, sp, lr}
    12cc:	03207803 			; <UNDEFINED> instruction: 0x03207803
    12d0:	222c2e0a 	eorcs	r2, ip, #10, 28	; 0xa0
    12d4:	01e40340 	mvneq	r0, r0, asr #6
    12d8:	234d232e 	movtcs	r2, #54062	; 0xd32e
    12dc:	207e9a03 	rsbscs	r9, lr, r3, lsl #20
    12e0:	6600ef03 	strvs	lr, [r0], -r3, lsl #30
    12e4:	3f200903 	svccc	0x00200903
    12e8:	9803233f 	stmdals	r3, {r0, r1, r2, r3, r4, r5, r8, r9, sp}
    12ec:	03202e7f 			; <UNDEFINED> instruction: 0x03202e7f
    12f0:	2831200a 	ldmdacs	r1!, {r1, r3, sp}
    12f4:	1903314b 	stmdbne	r3, {r0, r1, r3, r6, r8, ip, sp}
    12f8:	3128202e 			; <UNDEFINED> instruction: 0x3128202e
    12fc:	18663d03 	stmdane	r6!, {r0, r1, r8, sl, fp, ip, sp}^
    1300:	2e130323 	cdpcs	3, 1, cr0, cr3, cr3, {1}
    1304:	234d2319 	movtcs	r2, #54041	; 0xd319
    1308:	1a2e1603 	bne	b86b1c <__Stack_Size+0xb8671c>
    130c:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1310:	0c032e1d 	stceq	14, cr2, [r3], {29}
    1314:	27232320 	strcs	r2, [r3, -r0, lsr #6]!
    1318:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    131c:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    1320:	1c242a32 	stcne	10, cr2, [r4], #-200	; 0xffffff38
    1324:	78033225 	stmdavc	r3, {r0, r2, r5, r9, ip, sp}
    1328:	2332242e 	teqcs	r2, #771751936	; 0x2e000000
    132c:	12032323 	andne	r2, r3, #-1946157056	; 0x8c000000
    1330:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    1334:	2e120323 	cdpcs	3, 1, cr0, cr2, cr3, {1}
    1338:	3f4d2319 	svccc	0x004d2319
    133c:	192e1203 	stmdbne	lr!, {r0, r1, r9, ip}
    1340:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1344:	23182e12 	tstcs	r8, #288	; 0x120
    1348:	0e033f4d 	cdpeq	15, 0, cr3, cr3, cr13, {2}
    134c:	231d1a2e 	tstcs	sp, #188416	; 0x2e000
    1350:	660e034f 	strvs	r0, [lr], -pc, asr #6
    1354:	4f231d1a 	svcmi	0x00231d1a
    1358:	1a660f03 	bne	1984f6c <__Stack_Size+0x1984b6c>
    135c:	034f231d 	movteq	r2, #62237	; 0xf31d
    1360:	1d1a660f 	ldcne	6, cr6, [sl, #-60]	; 0xffffffc4
    1364:	12034f23 	andne	r4, r3, #35, 30	; 0x8c
    1368:	4d231966 	stcmi	9, cr1, [r3, #-408]!	; 0xfffffe68
    136c:	2e110323 	cdpcs	3, 1, cr0, cr1, cr3, {1}
    1370:	3f4d2319 	svccc	0x004d2319
    1374:	192e1103 	stmdbne	lr!, {r0, r1, r8, ip}
    1378:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    137c:	23192e11 	tstcs	r9, #272	; 0x110
    1380:	10033f4d 	andne	r3, r3, sp, asr #30
    1384:	4d231a2e 	vstmdbmi	r3!, {s2-s47}
    1388:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    138c:	3f4d231a 	svccc	0x004d231a
    1390:	1a2e1003 	bne	b853a4 <__Stack_Size+0xb84fa4>
    1394:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1398:	231a2e10 	tstcs	sl, #16, 28	; 0x100
    139c:	10033f4d 	andne	r3, r3, sp, asr #30
    13a0:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    13a4:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    13a8:	3f312319 	svccc	0x00312319
    13ac:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    13b0:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    13b4:	23192e10 	tstcs	r9, #16, 28	; 0x100
    13b8:	10033f31 	andne	r3, r3, r1, lsr pc
    13bc:	4b23192e 	blmi	8c787c <__Stack_Size+0x8c747c>
    13c0:	2e0f0323 	cdpcs	3, 0, cr0, cr15, cr3, {1}
    13c4:	234b2319 	movtcs	r2, #45849	; 0xb319
    13c8:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    13cc:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    13d0:	23192e0f 	tstcs	r9, #15, 28	; 0xf0
    13d4:	10033f4b 	andne	r3, r3, fp, asr #30
    13d8:	4b23192e 	blmi	8c7898 <__Stack_Size+0x8c7498>
    13dc:	2e0f033f 	mcrcs	3, 0, r0, cr15, cr15, {1}
    13e0:	3f4b2319 	svccc	0x004b2319
    13e4:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    13e8:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    13ec:	03192e14 	tsteq	r9, #20, 28	; 0x140
    13f0:	69272079 	stmdbvs	r7!, {r0, r3, r4, r5, r6, sp}
    13f4:	19661203 	stmdbne	r6!, {r0, r1, r9, ip}^
    13f8:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    13fc:	661e0369 	ldrvs	r0, [lr], -r9, ror #6
    1400:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1404:	694d6827 	stmdbvs	sp, {r0, r1, r2, r5, fp, sp, lr}^
    1408:	311d6934 	tstcc	sp, r4, lsr r9
    140c:	1a580e03 	bne	1604c20 <__Stack_Size+0x1604820>
    1410:	034f231d 	movteq	r2, #62237	; 0xf31d
    1414:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    1418:	0e034f23 	cdpeq	15, 0, cr4, cr3, cr3, {1}
    141c:	231d1a66 	tstcs	sp, #417792	; 0x66000
    1420:	6610034f 	ldrvs	r0, [r0], -pc, asr #6
    1424:	18036918 	stmdane	r3, {r3, r4, r8, fp, sp, lr}
    1428:	03691958 	cmneq	r9, #88, 18	; 0x160000
    142c:	69185812 	ldmdbvs	r8, {r1, r4, fp, ip, lr}
    1430:	18581103 	ldmdane	r8, {r0, r1, r8, ip}^
    1434:	580c0369 	stmdapl	ip, {r0, r3, r5, r6, r8, r9}
    1438:	2e0c0317 	mcrcs	3, 0, r0, cr12, cr7, {0}
    143c:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    1440:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    1444:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    1448:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    144c:	3c130317 	ldccc	3, cr0, [r3], {23}
    1450:	13036918 	movwne	r6, #14616	; 0x3918
    1454:	03691858 	cmneq	r9, #88, 16	; 0x580000
    1458:	20746ffb 	ldrshtcs	r6, [r4], #-251	; 0xffffff05
    145c:	200a0328 	andcs	r0, sl, r8, lsr #6
    1460:	03207603 			; <UNDEFINED> instruction: 0x03207603
    1464:	73032013 	movwvc	r2, #12307	; 0x3013
    1468:	6e03402e 	cdpvs	0, 0, cr4, cr3, cr14, {1}
    146c:	20180320 	andscs	r0, r8, r0, lsr #6
    1470:	4d323f4d 	ldcmi	15, cr3, [r2, #-308]!	; 0xfffffecc
    1474:	2e110369 	cdpcs	3, 1, cr0, cr1, cr9, {3}
    1478:	332e6f03 			; <UNDEFINED> instruction: 0x332e6f03
    147c:	30694d32 	rsbcc	r4, r9, r2, lsr sp
    1480:	0fe1032c 	svceq	0x00e1032c
    1484:	0369182e 	cmneq	r9, #3014656	; 0x2e0000
    1488:	69185813 	ldmdbvs	r8, {r0, r1, r4, fp, ip, lr}
    148c:	746f8203 	strbtvc	r8, [pc], #-515	; 1494 <__Stack_Size+0x1094>
    1490:	20090320 	andcs	r0, r9, r0, lsr #6
    1494:	03207703 			; <UNDEFINED> instruction: 0x03207703
    1498:	33234a09 			; <UNDEFINED> instruction: 0x33234a09
    149c:	032e2003 			; <UNDEFINED> instruction: 0x032e2003
    14a0:	31302e60 	teqcc	r0, r0, ror #28
    14a4:	2e160333 	mrccs	3, 0, r0, cr6, cr3, {1}
    14a8:	302e6a03 	eorcc	r6, lr, r3, lsl #20
    14ac:	3c13ea03 	ldccc	10, cr14, [r3], {3}
    14b0:	206c9603 	rsbcs	r9, ip, r3, lsl #12
    14b4:	2013ea03 	andscs	lr, r3, r3, lsl #20
    14b8:	211f215a 	tstcs	pc, sl, asr r1	; <UNPREDICTABLE>
    14bc:	464b3224 	strbmi	r3, [fp], -r4, lsr #4
    14c0:	8f033124 	svchi	0x00033124
    14c4:	f203206c 	vhadd.s8	q1, <illegal reg q1.5>, q14
    14c8:	9a032013 	bls	c951c <__Stack_Size+0xc911c>
    14cc:	7403206c 	strvc	r2, [r3], #-108	; 0x6c
    14d0:	1491032e 	ldrne	r0, [r1], #814	; 0x32e
    14d4:	24215a2e 	strtcs	r5, [r1], #-2606	; 0xa2e
    14d8:	2f402438 	svccs	0x00402438
    14dc:	241c322a 	ldrcs	r3, [ip], #-554	; 0x22a
    14e0:	6bea0331 	blvs	ffa821ac <SCS_BASE+0x1fa741ac>
    14e4:	95032220 	strls	r2, [r3, #-544]	; 0x220
    14e8:	e9032e14 	stmdb	r3, {r2, r4, r9, sl, fp, sp}
    14ec:	e003206b 	and	r2, r3, fp, rrx
    14f0:	3f182e10 	svccc	0x00182e10
    14f4:	17580b03 	ldrbne	r0, [r8, -r3, lsl #22]
    14f8:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    14fc:	0b032117 	bleq	c9960 <__Stack_Size+0xc9560>
    1500:	0321172e 			; <UNDEFINED> instruction: 0x0321172e
    1504:	2f172e0b 	svccs	0x00172e0b
    1508:	172e0a03 	strne	r0, [lr, -r3, lsl #20]!
    150c:	2e0a0321 	cdpcs	3, 0, cr0, cr10, cr1, {1}
    1510:	18032117 	stmdane	r3, {r0, r1, r2, r4, r8, sp}
    1514:	09031a2e 	stmdbeq	r3, {r1, r2, r3, r5, r9, fp, ip}
    1518:	4a18032e 	bmi	6021d8 <__Stack_Size+0x601dd8>
    151c:	4a160318 	bmi	582184 <__Stack_Size+0x581d84>
    1520:	22010903 	andcs	r0, r1, #49152	; 0xc000
    1524:	00222c22 	eoreq	r2, r2, r2, lsr #24
    1528:	06010402 	streq	r0, [r1], -r2, lsl #8
    152c:	04020020 	streq	r0, [r2], #-32
    1530:	43220601 			; <UNDEFINED> instruction: 0x43220601
    1534:	18201503 	stmdane	r0!, {r0, r1, r8, sl, ip}
    1538:	01000402 	tsteq	r0, r2, lsl #8
    153c:	0001d601 	andeq	sp, r1, r1, lsl #12
    1540:	9b000200 	blls	1d48 <__Stack_Size+0x1948>
    1544:	02000000 	andeq	r0, r0, #0
    1548:	0d0efb01 	vstreq	d15, [lr, #-4]
    154c:	01010100 	mrseq	r0, (UNDEF: 17)
    1550:	00000001 	andeq	r0, r0, r1
    1554:	01000001 	tsteq	r0, r1
    1558:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    155c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1560:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1564:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1568:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
    156c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1570:	5f783031 	svcpl	0x00783031
    1574:	2f62696c 	svccs	0x0062696c
    1578:	00636e69 	rsbeq	r6, r3, r9, ror #28
    157c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1580:	31663233 	cmncc	r6, r3, lsr r2
    1584:	755f7830 	ldrbvc	r7, [pc, #-2096]	; d5c <__Stack_Size+0x95c>
    1588:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    158c:	0100632e 	tsteq	r0, lr, lsr #6
    1590:	74730000 	ldrbtvc	r0, [r3], #-0
    1594:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1598:	5f783031 	svcpl	0x00783031
    159c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    15a0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    15a4:	74730000 	ldrbtvc	r0, [r3], #-0
    15a8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    15ac:	5f783031 	svcpl	0x00783031
    15b0:	2e70616d 	rpwcssz	f6, f0, #5.0
    15b4:	00020068 	andeq	r0, r2, r8, rrx
    15b8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    15bc:	31663233 	cmncc	r6, r3, lsr r2
    15c0:	755f7830 	ldrbvc	r7, [pc, #-2096]	; d98 <__Stack_Size+0x998>
    15c4:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    15c8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    15cc:	74730000 	ldrbtvc	r0, [r3], #-0
    15d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    15d4:	5f783031 	svcpl	0x00783031
    15d8:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    15dc:	00020068 	andeq	r0, r2, r8, rrx
    15e0:	05000000 	streq	r0, [r0, #-0]
    15e4:	005b2c02 	subseq	r2, fp, r2, lsl #24
    15e8:	00da0308 	sbcseq	r0, sl, r8, lsl #6
    15ec:	3f082401 	svccc	0x00082401
    15f0:	03581b03 	cmpeq	r8, #3072	; 0xc00
    15f4:	595c2e66 	ldmdbpl	ip, {r1, r2, r5, r6, r9, sl, fp, sp}^
    15f8:	59405940 	stmdbpl	r0, {r6, r8, fp, ip, lr}^
    15fc:	03425940 	movteq	r5, #10560	; 0x2940
    1600:	16032e7a 			; <UNDEFINED> instruction: 0x16032e7a
    1604:	3c150374 	ldccc	3, cr0, [r5], {116}	; 0x74
    1608:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    160c:	23233222 			; <UNDEFINED> instruction: 0x23233222
    1610:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
    1614:	2e7a0328 	cdpcs	3, 7, cr0, cr10, cr8, {1}
    1618:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    161c:	26233234 			; <UNDEFINED> instruction: 0x26233234
    1620:	22207a03 	eorcs	r7, r0, #12288	; 0x3000
    1624:	032e4e03 			; <UNDEFINED> instruction: 0x032e4e03
    1628:	24232036 	strtcs	r2, [r3], #-54	; 0x36
    162c:	4e241c43 	cdpmi	12, 2, cr1, cr4, cr3, {2}
    1630:	773d4d67 	ldrvc	r4, [sp, -r7, ror #26]!
    1634:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    1638:	2f1d4014 	svccs	0x001d4014
    163c:	03212121 			; <UNDEFINED> instruction: 0x03212121
    1640:	15032e10 	strne	r2, [r3, #-3600]	; 0xe10
    1644:	206b0301 	rsbcs	r0, fp, r1, lsl #6
    1648:	03201503 			; <UNDEFINED> instruction: 0x03201503
    164c:	0a032076 	beq	c982c <__Stack_Size+0xc942c>
    1650:	3c760320 	ldclcc	3, cr0, [r6], #-128	; 0xffffff80
    1654:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    1658:	32352e78 	eorscc	r2, r5, #120, 28	; 0x780
    165c:	142e0c03 	strtne	r0, [lr], #-3075	; 0xc03
    1660:	0321212f 			; <UNDEFINED> instruction: 0x0321212f
    1664:	1d1a2e0f 	ldcne	14, cr2, [sl, #-60]	; 0xffffffc4
    1668:	1e034f23 	cdpne	15, 0, cr4, cr3, cr3, {1}
    166c:	200d0366 	andcs	r0, sp, r6, ror #6
    1670:	301e3e33 	andscc	r3, lr, r3, lsr lr
    1674:	32223022 	eorcc	r3, r2, #34	; 0x22
    1678:	03402222 	movteq	r2, #546	; 0x222
    167c:	0a035815 	beq	d76d8 <__Stack_Size+0xd72d8>
    1680:	34242a01 	strtcc	r2, [r4], #-2561	; 0xa01
    1684:	184a0f03 	stmdane	sl, {r0, r1, r8, r9, sl, fp}^
    1688:	58110368 	ldmdapl	r1, {r3, r5, r6, r8, r9}
    168c:	0f036717 	svceq	0x00036717
    1690:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    1694:	6613034f 	ldrvs	r0, [r3], -pc, asr #6
    1698:	0f036717 	svceq	0x00036717
    169c:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    16a0:	660f034f 	strvs	r0, [pc], -pc, asr #6
    16a4:	4a0d0318 	bmi	34230c <__Stack_Size+0x341f0c>
    16a8:	0c032117 	stfeqs	f2, [r3], {23}
    16ac:	0e03173c 	mcreq	7, 0, r1, cr3, cr12, {1}
    16b0:	033e1766 	teqeq	lr, #26738688	; 0x1980000
    16b4:	4c17660f 	ldcmi	6, cr6, [r7], {15}
    16b8:	1a580f03 	bne	16052cc <__Stack_Size+0x1604ecc>
    16bc:	034f231d 	movteq	r2, #62237	; 0xf31d
    16c0:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    16c4:	10034f23 	andne	r4, r3, r3, lsr #30
    16c8:	231d1a66 	tstcs	sp, #417792	; 0x66000
    16cc:	6612034f 	ldrvs	r0, [r2], -pc, asr #6
    16d0:	0f036717 	svceq	0x00036717
    16d4:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    16d8:	661b034f 	ldrvs	r0, [fp], -pc, asr #6
    16dc:	2e09031a 	mcrcs	3, 0, r0, cr9, cr10, {0}
    16e0:	184a2303 	stmdane	sl, {r0, r1, r8, r9, sp}^
    16e4:	034a1b03 	movteq	r1, #43779	; 0xab03
    16e8:	7103010f 	tstvc	r3, pc, lsl #2
    16ec:	200a0320 	andcs	r0, sl, r0, lsr #6
    16f0:	301e3033 	andscc	r3, lr, r3, lsr r0
    16f4:	32223022 	eorcc	r3, r2, #34	; 0x22
    16f8:	02003042 	andeq	r3, r0, #66	; 0x42
    16fc:	001d0104 	andseq	r0, sp, r4, lsl #2
    1700:	3f010402 	svccc	0x00010402
    1704:	01040200 	mrseq	r0, R12_usr
    1708:	03244e22 			; <UNDEFINED> instruction: 0x03244e22
    170c:	0a032023 	beq	c97a0 <__Stack_Size+0xc93a0>
    1710:	04023d01 	streq	r3, [r2], #-3329	; 0xd01
    1714:	a0010100 	andge	r0, r1, r0, lsl #2
    1718:	02000000 	andeq	r0, r0, #0
    171c:	00003900 	andeq	r3, r0, r0, lsl #18
    1720:	fb010200 	blx	41f2a <__Stack_Size+0x41b2a>
    1724:	01000d0e 	tsteq	r0, lr, lsl #26
    1728:	00010101 	andeq	r0, r1, r1, lsl #2
    172c:	00010000 	andeq	r0, r1, r0
    1730:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    1734:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1738:	5f783031 	svcpl	0x00783031
    173c:	2f62696c 	svccs	0x0062696c
    1740:	00637273 	rsbeq	r7, r3, r3, ror r2
    1744:	726f6300 	rsbvc	r6, pc, #0, 6
    1748:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    174c:	616d5f33 	cmnvs	sp, r3, lsr pc
    1750:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    1754:	00010073 	andeq	r0, r1, r3, ror r0
    1758:	05000000 	streq	r0, [r0, #-0]
    175c:	005e7002 	subseq	r7, lr, r2
    1760:	01340308 	teqeq	r4, r8, lsl #6
    1764:	200b0321 	andcs	r0, fp, r1, lsr #6
    1768:	200b0321 	andcs	r0, fp, r1, lsr #6
    176c:	200b0321 	andcs	r0, fp, r1, lsr #6
    1770:	200b032f 	andcs	r0, fp, pc, lsr #6
    1774:	200b032f 	andcs	r0, fp, pc, lsr #6
    1778:	200b032f 	andcs	r0, fp, pc, lsr #6
    177c:	200b0321 	andcs	r0, fp, r1, lsr #6
    1780:	200b032f 	andcs	r0, fp, pc, lsr #6
    1784:	0a032f2f 	beq	cd448 <__Stack_Size+0xcd048>
    1788:	0b032f20 	bleq	cd410 <__Stack_Size+0xcd010>
    178c:	0b032f20 	bleq	cd414 <__Stack_Size+0xcd014>
    1790:	0b032f20 	bleq	cd418 <__Stack_Size+0xcd018>
    1794:	0a032f20 	beq	cd41c <__Stack_Size+0xcd01c>
    1798:	0b032120 	bleq	c9c20 <__Stack_Size+0xc9820>
    179c:	0b032120 	bleq	c9c24 <__Stack_Size+0xc9824>
    17a0:	0b032120 	bleq	c9c28 <__Stack_Size+0xc9828>
    17a4:	0b032120 	bleq	c9c2c <__Stack_Size+0xc982c>
    17a8:	0b032f20 	bleq	cd430 <__Stack_Size+0xcd030>
    17ac:	0a032f20 	beq	cd434 <__Stack_Size+0xcd034>
    17b0:	0b032120 	bleq	c9c38 <__Stack_Size+0xc9838>
    17b4:	01022120 	tsteq	r2, r0, lsr #2
    17b8:	5f010100 	svcpl	0x00010100
    17bc:	02000000 	andeq	r0, r0, #0
    17c0:	00003b00 	andeq	r3, r0, r0, lsl #22
    17c4:	fb010200 	blx	41fce <__Stack_Size+0x41bce>
    17c8:	01000d0e 	tsteq	r0, lr, lsl #26
    17cc:	00010101 	andeq	r0, r1, r1, lsl #2
    17d0:	00010000 	andeq	r0, r1, r0
    17d4:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    17d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    17dc:	5f783031 	svcpl	0x00783031
    17e0:	2f62696c 	svccs	0x0062696c
    17e4:	00637273 	rsbeq	r7, r3, r3, ror r2
    17e8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    17ec:	31663233 	cmncc	r6, r3, lsr r2
    17f0:	765f7830 			; <UNDEFINED> instruction: 0x765f7830
    17f4:	6f746365 	svcvs	0x00746365
    17f8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    17fc:	00000001 	andeq	r0, r0, r1
    1800:	e0020500 	and	r0, r2, r0, lsl #10
    1804:	0308005e 	movweq	r0, #32862	; 0x805e
    1808:	00010191 	muleq	r1, r1, r1
    180c:	7b010402 	blvc	4281c <__Stack_Size+0x4241c>
    1810:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    1814:	503e6c01 	eorspl	r6, lr, r1, lsl #24
    1818:	000f022f 	andeq	r0, pc, pc, lsr #4
    181c:	Address 0x0000181c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000084 	andeq	r0, r0, r4, lsl #1
      20:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      24:	56018e02 	strpl	r8, [r1], -r2, lsl #28
      28:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
      2c:	000b4300 	andeq	r4, fp, r0, lsl #6
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	080031b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip, sp}
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
      44:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      48:	0c0e6501 	cfstr32eq	mvfx6, [lr], {1}
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	08003206 	stmdaeq	r0, {r1, r2, r9, ip, sp}
      58:	00000086 	andeq	r0, r0, r6, lsl #1
      5c:	84200e41 	strthi	r0, [r0], #-3649	; 0xe41
      60:	86048505 	strhi	r8, [r4], -r5, lsl #10
      64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      68:	140e7c01 	strne	r7, [lr], #-3073	; 0xc01
      6c:	0000000c 	andeq	r0, r0, ip
      70:	00000000 	andeq	r0, r0, r0
      74:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
      78:	0000000c 	andeq	r0, r0, ip
      7c:	0000000c 	andeq	r0, r0, ip
      80:	00000000 	andeq	r0, r0, r0
      84:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      88:	00000010 	andeq	r0, r0, r0, lsl r0
      8c:	0000000c 	andeq	r0, r0, ip
      90:	00000000 	andeq	r0, r0, r0
      94:	080032a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp}
      98:	00000014 	andeq	r0, r0, r4, lsl r0
      9c:	00000018 	andeq	r0, r0, r8, lsl r0
      a0:	00000000 	andeq	r0, r0, r0
      a4:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
      a8:	00000044 	andeq	r0, r0, r4, asr #32
      ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      b0:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
      b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
      b8:	0000000c 	andeq	r0, r0, ip
      bc:	00000000 	andeq	r0, r0, r0
      c0:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
      c4:	00000020 	andeq	r0, r0, r0, lsr #32
      c8:	00000014 	andeq	r0, r0, r4, lsl r0
      cc:	00000000 	andeq	r0, r0, r0
      d0:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
      dc:	00018e02 	andeq	r8, r1, r2, lsl #28
      e0:	00000014 	andeq	r0, r0, r4, lsl r0
      e4:	00000000 	andeq	r0, r0, r0
      e8:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
      ec:	00000012 	andeq	r0, r0, r2, lsl r0
      f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      f4:	00018e02 	andeq	r8, r1, r2, lsl #28
      f8:	00000018 	andeq	r0, r0, r8, lsl r0
      fc:	00000000 	andeq	r0, r0, r0
     100:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
     104:	0000002e 	andeq	r0, r0, lr, lsr #32
     108:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     10c:	50018e02 	andpl	r8, r1, r2, lsl #28
     110:	000ec4ce 	andeq	ip, lr, lr, asr #9
     114:	00000018 	andeq	r0, r0, r8, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
     120:	00000030 	andeq	r0, r0, r0, lsr r0
     124:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     128:	51018e02 	tstpl	r1, r2, lsl #28
     12c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     130:	0000000c 	andeq	r0, r0, ip
     134:	00000000 	andeq	r0, r0, r0
     138:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     13c:	0000004c 	andeq	r0, r0, ip, asr #32
     140:	0000001c 	andeq	r0, r0, ip, lsl r0
     144:	00000000 	andeq	r0, r0, r0
     148:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     14c:	00000094 	muleq	r0, r4, r0
     150:	83080e41 	movwhi	r0, #36417	; 0x8e41
     154:	77018e02 	strvc	r8, [r1, -r2, lsl #28]
     158:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     15c:	000b4300 	andeq	r4, fp, r0, lsl #6
     160:	00000018 	andeq	r0, r0, r8, lsl r0
     164:	00000000 	andeq	r0, r0, r0
     168:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     16c:	0000002e 	andeq	r0, r0, lr, lsr #32
     170:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     174:	54018e02 	strpl	r8, [r1], #-3586	; 0xe02
     178:	000ec4ce 	andeq	ip, lr, lr, asr #9
     17c:	00000018 	andeq	r0, r0, r8, lsl r0
     180:	00000000 	andeq	r0, r0, r0
     184:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     188:	00000014 	andeq	r0, r0, r4, lsl r0
     18c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     190:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     194:	000ec4ce 	andeq	ip, lr, lr, asr #9
     198:	0000001c 	andeq	r0, r0, ip, lsl r0
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	080034ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp}
     1a4:	0000003a 	andeq	r0, r0, sl, lsr r0
     1a8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     1ac:	53018e02 	movwpl	r8, #7682	; 0x1e02
     1b0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     1b4:	000b4300 	andeq	r4, fp, r0, lsl #6
     1b8:	00000018 	andeq	r0, r0, r8, lsl r0
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     1c4:	00000018 	andeq	r0, r0, r8, lsl r0
     1c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     1cc:	49018e02 	stmdbmi	r1, {r1, r9, sl, fp, pc}
     1d0:	000ec4ce 	andeq	ip, lr, lr, asr #9
     1d4:	00000018 	andeq	r0, r0, r8, lsl r0
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	08003520 	stmdaeq	r0, {r5, r8, sl, ip, sp}
     1e0:	0000001a 	andeq	r0, r0, sl, lsl r0
     1e4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     1e8:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     1ec:	000ec3ce 	andeq	ip, lr, lr, asr #7
     1f0:	00000018 	andeq	r0, r0, r8, lsl r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	0800353a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip, sp}
     1fc:	0000001a 	andeq	r0, r0, sl, lsl r0
     200:	83080e41 	movwhi	r0, #36417	; 0x8e41
     204:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     208:	000ec3ce 	andeq	ip, lr, lr, asr #7
     20c:	00000024 	andeq	r0, r0, r4, lsr #32
     210:	00000000 	andeq	r0, r0, r0
     214:	08003554 	stmdaeq	r0, {r2, r4, r6, r8, sl, ip, sp}
     218:	00000048 	andeq	r0, r0, r8, asr #32
     21c:	83100e41 	tsthi	r0, #1040	; 0x410
     220:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     224:	5b018e02 	blpl	63a34 <__Stack_Size+0x63634>
     228:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     22c:	43000ec3 	movwmi	r0, #3779	; 0xec3
     230:	0000000b 	andeq	r0, r0, fp
     234:	00000018 	andeq	r0, r0, r8, lsl r0
     238:	00000000 	andeq	r0, r0, r0
     23c:	0800359c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp}
     240:	0000001e 	andeq	r0, r0, lr, lsl r0
     244:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     248:	49018e02 	stmdbmi	r1, {r1, r9, sl, fp, pc}
     24c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     250:	00000014 	andeq	r0, r0, r4, lsl r0
     254:	00000000 	andeq	r0, r0, r0
     258:	080035ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip, sp}
     25c:	00000012 	andeq	r0, r0, r2, lsl r0
     260:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     264:	00018e02 	andeq	r8, r1, r2, lsl #28
     268:	0000001c 	andeq	r0, r0, ip, lsl r0
     26c:	00000000 	andeq	r0, r0, r0
     270:	080035cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp}
     274:	00000034 	andeq	r0, r0, r4, lsr r0
     278:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     27c:	51018e02 	tstpl	r1, r2, lsl #28
     280:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     284:	000b4300 	andeq	r4, fp, r0, lsl #6
     288:	0000001c 	andeq	r0, r0, ip, lsl r0
     28c:	00000000 	andeq	r0, r0, r0
     290:	08003600 	stmdaeq	r0, {r9, sl, ip, sp}
     294:	00000034 	andeq	r0, r0, r4, lsr r0
     298:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     29c:	51018e02 	tstpl	r1, r2, lsl #28
     2a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2a4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	08003634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip, sp}
     2b4:	00000038 	andeq	r0, r0, r8, lsr r0
     2b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2bc:	52018e02 	andpl	r8, r1, #2, 28
     2c0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2c4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2cc:	00000000 	andeq	r0, r0, r0
     2d0:	0800366c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, sp}
     2d4:	00000038 	andeq	r0, r0, r8, lsr r0
     2d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2dc:	52018e02 	andpl	r8, r1, #2, 28
     2e0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2e4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ec:	00000000 	andeq	r0, r0, r0
     2f0:	080036a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip, sp}
     2f4:	00000034 	andeq	r0, r0, r4, lsr r0
     2f8:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
     2fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     300:	58018e02 	stmdapl	r1, {r1, r9, sl, fp, pc}
     304:	0000100e 	andeq	r1, r0, lr
     308:	0000001c 	andeq	r0, r0, ip, lsl r0
     30c:	00000000 	andeq	r0, r0, r0
     310:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
     314:	0000003c 	andeq	r0, r0, ip, lsr r0
     318:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
     31c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     320:	5c018e02 	stcpl	14, cr8, [r1], {2}
     324:	0000100e 	andeq	r1, r0, lr
     328:	0000001c 	andeq	r0, r0, ip, lsl r0
     32c:	00000000 	andeq	r0, r0, r0
     330:	08003714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip, sp}
     334:	00000038 	andeq	r0, r0, r8, lsr r0
     338:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     33c:	52018e02 	andpl	r8, r1, #2, 28
     340:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     344:	000b4300 	andeq	r4, fp, r0, lsl #6
     348:	0000001c 	andeq	r0, r0, ip, lsl r0
     34c:	00000000 	andeq	r0, r0, r0
     350:	0800374c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp}
     354:	00000038 	andeq	r0, r0, r8, lsr r0
     358:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     35c:	52018e02 	andpl	r8, r1, #2, 28
     360:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     364:	000b4300 	andeq	r4, fp, r0, lsl #6
     368:	0000001c 	andeq	r0, r0, ip, lsl r0
     36c:	00000000 	andeq	r0, r0, r0
     370:	08003784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, sp}
     374:	00000038 	andeq	r0, r0, r8, lsr r0
     378:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     37c:	52018e02 	andpl	r8, r1, #2, 28
     380:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     384:	000b4300 	andeq	r4, fp, r0, lsl #6
     388:	0000001c 	andeq	r0, r0, ip, lsl r0
     38c:	00000000 	andeq	r0, r0, r0
     390:	080037bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp}
     394:	00000038 	andeq	r0, r0, r8, lsr r0
     398:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     39c:	52018e02 	andpl	r8, r1, #2, 28
     3a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     3a4:	000b4300 	andeq	r4, fp, r0, lsl #6
     3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	080037f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     3b4:	00000038 	andeq	r0, r0, r8, lsr r0
     3b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3bc:	52018e02 	andpl	r8, r1, #2, 28
     3c0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     3c4:	000b4300 	andeq	r4, fp, r0, lsl #6
     3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
     3d4:	00000038 	andeq	r0, r0, r8, lsr r0
     3d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3dc:	52018e02 	andpl	r8, r1, #2, 28
     3e0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     3e4:	000b4300 	andeq	r4, fp, r0, lsl #6
     3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
     3f4:	00000038 	andeq	r0, r0, r8, lsr r0
     3f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3fc:	52018e02 	andpl	r8, r1, #2, 28
     400:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     404:	000b4300 	andeq	r4, fp, r0, lsl #6
     408:	0000001c 	andeq	r0, r0, ip, lsl r0
     40c:	00000000 	andeq	r0, r0, r0
     410:	0800389c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, sp}
     414:	00000038 	andeq	r0, r0, r8, lsr r0
     418:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     41c:	52018e02 	andpl	r8, r1, #2, 28
     420:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     424:	000b4300 	andeq	r4, fp, r0, lsl #6
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	00000000 	andeq	r0, r0, r0
     430:	080038d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, ip, sp}
     434:	00000038 	andeq	r0, r0, r8, lsr r0
     438:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     43c:	52018e02 	andpl	r8, r1, #2, 28
     440:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     444:	000b4300 	andeq	r4, fp, r0, lsl #6
     448:	0000001c 	andeq	r0, r0, ip, lsl r0
     44c:	00000000 	andeq	r0, r0, r0
     450:	0800390c 	stmdaeq	r0, {r2, r3, r8, fp, ip, sp}
     454:	00000034 	andeq	r0, r0, r4, lsr r0
     458:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     45c:	51018e02 	tstpl	r1, r2, lsl #28
     460:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     464:	000b4300 	andeq	r4, fp, r0, lsl #6
     468:	00000018 	andeq	r0, r0, r8, lsl r0
     46c:	00000000 	andeq	r0, r0, r0
     470:	08003940 	stmdaeq	r0, {r6, r8, fp, ip, sp}
     474:	0000001a 	andeq	r0, r0, sl, lsl r0
     478:	83100e41 	tsthi	r0, #1040	; 0x410
     47c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     480:	00018e02 	andeq	r8, r1, r2, lsl #28
     484:	0000001c 	andeq	r0, r0, ip, lsl r0
     488:	00000000 	andeq	r0, r0, r0
     48c:	0800395a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, ip, sp}
     490:	0000008e 	andeq	r0, r0, lr, lsl #1
     494:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     498:	41018e02 	tstmi	r1, r2, lsl #28
     49c:	4102280e 	tstmi	r2, lr, lsl #16
     4a0:	0000080e 	andeq	r0, r0, lr, lsl #16
     4a4:	00000014 	andeq	r0, r0, r4, lsl r0
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	080039e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp}
     4b0:	00000054 	andeq	r0, r0, r4, asr r0
     4b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4bc:	00000018 	andeq	r0, r0, r8, lsl r0
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
     4c8:	00000030 	andeq	r0, r0, r0, lsr r0
     4cc:	83100e41 	tsthi	r0, #1040	; 0x410
     4d0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000018 	andeq	r0, r0, r8, lsl r0
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
     4e8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4ec:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     4f0:	000ec3ce 	andeq	ip, lr, lr, asr #7
     4f4:	0000000c 	andeq	r0, r0, ip
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	08003a80 	stmdaeq	r0, {r7, r9, fp, ip, sp}
     500:	00000018 	andeq	r0, r0, r8, lsl r0
     504:	00000018 	andeq	r0, r0, r8, lsl r0
     508:	00000000 	andeq	r0, r0, r0
     50c:	08003a98 	stmdaeq	r0, {r3, r4, r7, r9, fp, ip, sp}
     510:	00000030 	andeq	r0, r0, r0, lsr r0
     514:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     518:	52018e02 	andpl	r8, r1, #2, 28
     51c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     520:	00000020 	andeq	r0, r0, r0, lsr #32
     524:	00000000 	andeq	r0, r0, r0
     528:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
     52c:	00000032 	andeq	r0, r0, r2, lsr r0
     530:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     534:	86038504 	strhi	r8, [r3], -r4, lsl #10
     538:	55018e02 	strpl	r8, [r1, #-3586]	; 0xe02
     53c:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     540:	0000000e 	andeq	r0, r0, lr
     544:	00000018 	andeq	r0, r0, r8, lsl r0
     548:	00000000 	andeq	r0, r0, r0
     54c:	08003afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, ip, sp}
     550:	0000004a 	andeq	r0, r0, sl, asr #32
     554:	83080e41 	movwhi	r0, #36417	; 0x8e41
     558:	5f018e02 	svcpl	0x00018e02
     55c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     560:	00000018 	andeq	r0, r0, r8, lsl r0
     564:	00000000 	andeq	r0, r0, r0
     568:	08003b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, ip, sp}
     56c:	0000007e 	andeq	r0, r0, lr, ror r0
     570:	83080e41 	movwhi	r0, #36417	; 0x8e41
     574:	7b018e02 	blvc	63d84 <__Stack_Size+0x63984>
     578:	000ec3ce 	andeq	ip, lr, lr, asr #7
     57c:	00000014 	andeq	r0, r0, r4, lsl r0
     580:	00000000 	andeq	r0, r0, r0
     584:	08003bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip, sp}
     588:	00000102 	andeq	r0, r0, r2, lsl #2
     58c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     590:	00018e02 	andeq	r8, r1, r2, lsl #28
     594:	00000018 	andeq	r0, r0, r8, lsl r0
     598:	00000000 	andeq	r0, r0, r0
     59c:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
     5a0:	00000034 	andeq	r0, r0, r4, lsr r0
     5a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     5a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     5ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     5b0:	00000024 	andeq	r0, r0, r4, lsr #32
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	08003cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, ip, sp}
     5bc:	00000032 	andeq	r0, r0, r2, lsr r0
     5c0:	83100e41 	tsthi	r0, #1040	; 0x410
     5c4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     5c8:	53018e02 	movwpl	r8, #7682	; 0x1e02
     5cc:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     5d0:	44000ec3 	strmi	r0, [r0], #-3779	; 0xec3
     5d4:	0000000b 	andeq	r0, r0, fp
     5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5dc:	00000000 	andeq	r0, r0, r0
     5e0:	08003d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, ip, sp}
     5e4:	0000007a 	andeq	r0, r0, sl, ror r0
     5e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     5ec:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     5f0:	200e4301 	andcs	r4, lr, r1, lsl #6
     5f4:	000c0e74 	andeq	r0, ip, r4, ror lr
     5f8:	00000018 	andeq	r0, r0, r8, lsl r0
     5fc:	00000000 	andeq	r0, r0, r0
     600:	08003da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, sp}
     604:	00000030 	andeq	r0, r0, r0, lsr r0
     608:	83080e41 	movwhi	r0, #36417	; 0x8e41
     60c:	53018e02 	movwpl	r8, #7682	; 0x1e02
     610:	000ec3ce 	andeq	ip, lr, lr, asr #7
     614:	0000000c 	andeq	r0, r0, ip
     618:	00000000 	andeq	r0, r0, r0
     61c:	08003dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp}
     620:	00000008 	andeq	r0, r0, r8
     624:	00000018 	andeq	r0, r0, r8, lsl r0
     628:	00000000 	andeq	r0, r0, r0
     62c:	08005f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, lr}
     630:	0000016c 	andeq	r0, r0, ip, ror #2
     634:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     638:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     63c:	280e4101 	stmdacs	lr, {r0, r8, lr}
     640:	0000000c 	andeq	r0, r0, ip
     644:	00000000 	andeq	r0, r0, r0
     648:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
     64c:	0000000c 	andeq	r0, r0, ip
     650:	0000000c 	andeq	r0, r0, ip
     654:	00000000 	andeq	r0, r0, r0
     658:	08003de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, ip, sp}
     65c:	00000014 	andeq	r0, r0, r4, lsl r0
     660:	0000000c 	andeq	r0, r0, ip
     664:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     668:	7c020001 	stcvc	0, cr0, [r2], {1}
     66c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     670:	0000000c 	andeq	r0, r0, ip
     674:	00000660 	andeq	r0, r0, r0, ror #12
     678:	08003dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
     67c:	00000002 	andeq	r0, r0, r2
     680:	0000000c 	andeq	r0, r0, ip
     684:	00000660 	andeq	r0, r0, r0, ror #12
     688:	08003dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
     68c:	00000002 	andeq	r0, r0, r2
     690:	0000000c 	andeq	r0, r0, ip
     694:	00000660 	andeq	r0, r0, r0, ror #12
     698:	08003e00 	stmdaeq	r0, {r9, sl, fp, ip, sp}
     69c:	00000002 	andeq	r0, r0, r2
     6a0:	0000000c 	andeq	r0, r0, ip
     6a4:	00000660 	andeq	r0, r0, r0, ror #12
     6a8:	08003e02 	stmdaeq	r0, {r1, r9, sl, fp, ip, sp}
     6ac:	00000002 	andeq	r0, r0, r2
     6b0:	0000000c 	andeq	r0, r0, ip
     6b4:	00000660 	andeq	r0, r0, r0, ror #12
     6b8:	08003e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, sp}
     6bc:	00000002 	andeq	r0, r0, r2
     6c0:	0000000c 	andeq	r0, r0, ip
     6c4:	00000660 	andeq	r0, r0, r0, ror #12
     6c8:	08003e06 	stmdaeq	r0, {r1, r2, r9, sl, fp, ip, sp}
     6cc:	00000002 	andeq	r0, r0, r2
     6d0:	0000000c 	andeq	r0, r0, ip
     6d4:	00000660 	andeq	r0, r0, r0, ror #12
     6d8:	08003e08 	stmdaeq	r0, {r3, r9, sl, fp, ip, sp}
     6dc:	00000002 	andeq	r0, r0, r2
     6e0:	0000000c 	andeq	r0, r0, ip
     6e4:	00000660 	andeq	r0, r0, r0, ror #12
     6e8:	08003e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, sp}
     6ec:	00000002 	andeq	r0, r0, r2
     6f0:	0000000c 	andeq	r0, r0, ip
     6f4:	00000660 	andeq	r0, r0, r0, ror #12
     6f8:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
     6fc:	00000004 	andeq	r0, r0, r4
     700:	0000000c 	andeq	r0, r0, ip
     704:	00000660 	andeq	r0, r0, r0, ror #12
     708:	08003e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, sp}
     70c:	00000002 	andeq	r0, r0, r2
     710:	0000000c 	andeq	r0, r0, ip
     714:	00000660 	andeq	r0, r0, r0, ror #12
     718:	08003e12 	stmdaeq	r0, {r1, r4, r9, sl, fp, ip, sp}
     71c:	00000002 	andeq	r0, r0, r2
     720:	0000000c 	andeq	r0, r0, ip
     724:	00000660 	andeq	r0, r0, r0, ror #12
     728:	08003e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, ip, sp}
     72c:	00000002 	andeq	r0, r0, r2
     730:	0000000c 	andeq	r0, r0, ip
     734:	00000660 	andeq	r0, r0, r0, ror #12
     738:	08003e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp, ip, sp}
     73c:	00000002 	andeq	r0, r0, r2
     740:	0000000c 	andeq	r0, r0, ip
     744:	00000660 	andeq	r0, r0, r0, ror #12
     748:	08003e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp}
     74c:	00000002 	andeq	r0, r0, r2
     750:	0000000c 	andeq	r0, r0, ip
     754:	00000660 	andeq	r0, r0, r0, ror #12
     758:	08003e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip, sp}
     75c:	00000002 	andeq	r0, r0, r2
     760:	0000000c 	andeq	r0, r0, ip
     764:	00000660 	andeq	r0, r0, r0, ror #12
     768:	08003e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, ip, sp}
     76c:	00000002 	andeq	r0, r0, r2
     770:	0000000c 	andeq	r0, r0, ip
     774:	00000660 	andeq	r0, r0, r0, ror #12
     778:	08003e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp, ip, sp}
     77c:	00000002 	andeq	r0, r0, r2
     780:	0000000c 	andeq	r0, r0, ip
     784:	00000660 	andeq	r0, r0, r0, ror #12
     788:	08003e20 	stmdaeq	r0, {r5, r9, sl, fp, ip, sp}
     78c:	00000002 	andeq	r0, r0, r2
     790:	0000000c 	andeq	r0, r0, ip
     794:	00000660 	andeq	r0, r0, r0, ror #12
     798:	08003e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, ip, sp}
     79c:	00000002 	andeq	r0, r0, r2
     7a0:	0000000c 	andeq	r0, r0, ip
     7a4:	00000660 	andeq	r0, r0, r0, ror #12
     7a8:	08003e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp}
     7ac:	00000002 	andeq	r0, r0, r2
     7b0:	0000000c 	andeq	r0, r0, ip
     7b4:	00000660 	andeq	r0, r0, r0, ror #12
     7b8:	08003e26 	stmdaeq	r0, {r1, r2, r5, r9, sl, fp, ip, sp}
     7bc:	00000002 	andeq	r0, r0, r2
     7c0:	0000000c 	andeq	r0, r0, ip
     7c4:	00000660 	andeq	r0, r0, r0, ror #12
     7c8:	08003e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, sp}
     7cc:	00000002 	andeq	r0, r0, r2
     7d0:	0000000c 	andeq	r0, r0, ip
     7d4:	00000660 	andeq	r0, r0, r0, ror #12
     7d8:	08003e2a 	stmdaeq	r0, {r1, r3, r5, r9, sl, fp, ip, sp}
     7dc:	00000002 	andeq	r0, r0, r2
     7e0:	0000000c 	andeq	r0, r0, ip
     7e4:	00000660 	andeq	r0, r0, r0, ror #12
     7e8:	08003e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip, sp}
     7ec:	00000002 	andeq	r0, r0, r2
     7f0:	0000000c 	andeq	r0, r0, ip
     7f4:	00000660 	andeq	r0, r0, r0, ror #12
     7f8:	08003e2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, fp, ip, sp}
     7fc:	00000002 	andeq	r0, r0, r2
     800:	0000000c 	andeq	r0, r0, ip
     804:	00000660 	andeq	r0, r0, r0, ror #12
     808:	08003e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, sp}
     80c:	00000002 	andeq	r0, r0, r2
     810:	0000000c 	andeq	r0, r0, ip
     814:	00000660 	andeq	r0, r0, r0, ror #12
     818:	08003e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip, sp}
     81c:	00000002 	andeq	r0, r0, r2
     820:	0000000c 	andeq	r0, r0, ip
     824:	00000660 	andeq	r0, r0, r0, ror #12
     828:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
     82c:	00000002 	andeq	r0, r0, r2
     830:	0000000c 	andeq	r0, r0, ip
     834:	00000660 	andeq	r0, r0, r0, ror #12
     838:	08003e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, ip, sp}
     83c:	00000002 	andeq	r0, r0, r2
     840:	0000000c 	andeq	r0, r0, ip
     844:	00000660 	andeq	r0, r0, r0, ror #12
     848:	08003e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, ip, sp}
     84c:	00000002 	andeq	r0, r0, r2
     850:	0000000c 	andeq	r0, r0, ip
     854:	00000660 	andeq	r0, r0, r0, ror #12
     858:	08003e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, ip, sp}
     85c:	00000002 	andeq	r0, r0, r2
     860:	0000000c 	andeq	r0, r0, ip
     864:	00000660 	andeq	r0, r0, r0, ror #12
     868:	08003e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip, sp}
     86c:	00000002 	andeq	r0, r0, r2
     870:	0000000c 	andeq	r0, r0, ip
     874:	00000660 	andeq	r0, r0, r0, ror #12
     878:	08003e3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
     87c:	00000002 	andeq	r0, r0, r2
     880:	0000000c 	andeq	r0, r0, ip
     884:	00000660 	andeq	r0, r0, r0, ror #12
     888:	08003e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, sp}
     88c:	00000002 	andeq	r0, r0, r2
     890:	0000000c 	andeq	r0, r0, ip
     894:	00000660 	andeq	r0, r0, r0, ror #12
     898:	08003e42 	stmdaeq	r0, {r1, r6, r9, sl, fp, ip, sp}
     89c:	00000002 	andeq	r0, r0, r2
     8a0:	0000000c 	andeq	r0, r0, ip
     8a4:	00000660 	andeq	r0, r0, r0, ror #12
     8a8:	08003e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip, sp}
     8ac:	00000002 	andeq	r0, r0, r2
     8b0:	0000000c 	andeq	r0, r0, ip
     8b4:	00000660 	andeq	r0, r0, r0, ror #12
     8b8:	08003e46 	stmdaeq	r0, {r1, r2, r6, r9, sl, fp, ip, sp}
     8bc:	00000002 	andeq	r0, r0, r2
     8c0:	0000000c 	andeq	r0, r0, ip
     8c4:	00000660 	andeq	r0, r0, r0, ror #12
     8c8:	08003e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp}
     8cc:	00000004 	andeq	r0, r0, r4
     8d0:	0000000c 	andeq	r0, r0, ip
     8d4:	00000660 	andeq	r0, r0, r0, ror #12
     8d8:	08003e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip, sp}
     8dc:	00000002 	andeq	r0, r0, r2
     8e0:	0000000c 	andeq	r0, r0, ip
     8e4:	00000660 	andeq	r0, r0, r0, ror #12
     8e8:	08003e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, sp}
     8ec:	00000002 	andeq	r0, r0, r2
     8f0:	0000000c 	andeq	r0, r0, ip
     8f4:	00000660 	andeq	r0, r0, r0, ror #12
     8f8:	08003e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, ip, sp}
     8fc:	00000002 	andeq	r0, r0, r2
     900:	0000000c 	andeq	r0, r0, ip
     904:	00000660 	andeq	r0, r0, r0, ror #12
     908:	08003e52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, ip, sp}
     90c:	00000002 	andeq	r0, r0, r2
     910:	0000000c 	andeq	r0, r0, ip
     914:	00000660 	andeq	r0, r0, r0, ror #12
     918:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
     91c:	00000002 	andeq	r0, r0, r2
     920:	0000000c 	andeq	r0, r0, ip
     924:	00000660 	andeq	r0, r0, r0, ror #12
     928:	08003e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip, sp}
     92c:	00000002 	andeq	r0, r0, r2
     930:	0000000c 	andeq	r0, r0, ip
     934:	00000660 	andeq	r0, r0, r0, ror #12
     938:	08003e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, sp}
     93c:	00000002 	andeq	r0, r0, r2
     940:	0000000c 	andeq	r0, r0, ip
     944:	00000660 	andeq	r0, r0, r0, ror #12
     948:	08003e5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, fp, ip, sp}
     94c:	00000002 	andeq	r0, r0, r2
     950:	0000000c 	andeq	r0, r0, ip
     954:	00000660 	andeq	r0, r0, r0, ror #12
     958:	08003e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp, ip, sp}
     95c:	00000004 	andeq	r0, r0, r4
     960:	0000000c 	andeq	r0, r0, ip
     964:	00000660 	andeq	r0, r0, r0, ror #12
     968:	08003e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, sp}
     96c:	00000002 	andeq	r0, r0, r2
     970:	0000000c 	andeq	r0, r0, ip
     974:	00000660 	andeq	r0, r0, r0, ror #12
     978:	08003e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp, ip, sp}
     97c:	00000002 	andeq	r0, r0, r2
     980:	0000000c 	andeq	r0, r0, ip
     984:	00000660 	andeq	r0, r0, r0, ror #12
     988:	08003e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, ip, sp}
     98c:	00000002 	andeq	r0, r0, r2
     990:	0000000c 	andeq	r0, r0, ip
     994:	00000660 	andeq	r0, r0, r0, ror #12
     998:	08003e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, ip, sp}
     99c:	00000002 	andeq	r0, r0, r2
     9a0:	0000000c 	andeq	r0, r0, ip
     9a4:	00000660 	andeq	r0, r0, r0, ror #12
     9a8:	08003e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, sp}
     9ac:	00000002 	andeq	r0, r0, r2
     9b0:	0000000c 	andeq	r0, r0, ip
     9b4:	00000660 	andeq	r0, r0, r0, ror #12
     9b8:	08003e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, ip, sp}
     9bc:	00000002 	andeq	r0, r0, r2
     9c0:	0000000c 	andeq	r0, r0, ip
     9c4:	00000660 	andeq	r0, r0, r0, ror #12
     9c8:	08003e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, sp}
     9cc:	00000002 	andeq	r0, r0, r2
     9d0:	0000000c 	andeq	r0, r0, ip
     9d4:	00000660 	andeq	r0, r0, r0, ror #12
     9d8:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
     9dc:	00000002 	andeq	r0, r0, r2
     9e0:	0000000c 	andeq	r0, r0, ip
     9e4:	00000660 	andeq	r0, r0, r0, ror #12
     9e8:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
     9ec:	00000002 	andeq	r0, r0, r2
     9f0:	0000000c 	andeq	r0, r0, ip
     9f4:	00000660 	andeq	r0, r0, r0, ror #12
     9f8:	08003e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
     9fc:	00000002 	andeq	r0, r0, r2
     a00:	0000000c 	andeq	r0, r0, ip
     a04:	00000660 	andeq	r0, r0, r0, ror #12
     a08:	08003e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, sp}
     a0c:	00000002 	andeq	r0, r0, r2
     a10:	0000000c 	andeq	r0, r0, ip
     a14:	00000660 	andeq	r0, r0, r0, ror #12
     a18:	08003e76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp}
     a1c:	00000002 	andeq	r0, r0, r2
     a20:	0000000c 	andeq	r0, r0, ip
     a24:	00000660 	andeq	r0, r0, r0, ror #12
     a28:	08003e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp}
     a2c:	00000002 	andeq	r0, r0, r2
     a30:	0000000c 	andeq	r0, r0, ip
     a34:	00000660 	andeq	r0, r0, r0, ror #12
     a38:	08003e7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}
     a3c:	00000002 	andeq	r0, r0, r2
     a40:	0000000c 	andeq	r0, r0, ip
     a44:	00000660 	andeq	r0, r0, r0, ror #12
     a48:	08003e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
     a4c:	00000002 	andeq	r0, r0, r2
     a50:	0000000c 	andeq	r0, r0, ip
     a54:	00000660 	andeq	r0, r0, r0, ror #12
     a58:	08003e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
     a5c:	00000002 	andeq	r0, r0, r2
     a60:	0000000c 	andeq	r0, r0, ip
     a64:	00000660 	andeq	r0, r0, r0, ror #12
     a68:	08003e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp}
     a6c:	00000002 	andeq	r0, r0, r2
     a70:	0000000c 	andeq	r0, r0, ip
     a74:	00000660 	andeq	r0, r0, r0, ror #12
     a78:	08003e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip, sp}
     a7c:	00000002 	andeq	r0, r0, r2
     a80:	0000000c 	andeq	r0, r0, ip
     a84:	00000660 	andeq	r0, r0, r0, ror #12
     a88:	08003e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, sp}
     a8c:	00000002 	andeq	r0, r0, r2
     a90:	0000000c 	andeq	r0, r0, ip
     a94:	00000660 	andeq	r0, r0, r0, ror #12
     a98:	08003e86 	stmdaeq	r0, {r1, r2, r7, r9, sl, fp, ip, sp}
     a9c:	00000002 	andeq	r0, r0, r2
     aa0:	0000000c 	andeq	r0, r0, ip
     aa4:	00000660 	andeq	r0, r0, r0, ror #12
     aa8:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
     aac:	00000002 	andeq	r0, r0, r2
     ab0:	0000000c 	andeq	r0, r0, ip
     ab4:	00000660 	andeq	r0, r0, r0, ror #12
     ab8:	08003e8a 	stmdaeq	r0, {r1, r3, r7, r9, sl, fp, ip, sp}
     abc:	00000002 	andeq	r0, r0, r2
     ac0:	0000000c 	andeq	r0, r0, ip
     ac4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ac8:	7c020001 	stcvc	0, cr0, [r2], {1}
     acc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ad0:	00000014 	andeq	r0, r0, r4, lsl r0
     ad4:	00000ac0 	andeq	r0, r0, r0, asr #21
     ad8:	08003e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp}
     adc:	0000000c 	andeq	r0, r0, ip
     ae0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ae4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ae8:	0000000c 	andeq	r0, r0, ip
     aec:	00000ac0 	andeq	r0, r0, r0, asr #21
     af0:	08003e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp}
     af4:	00000004 	andeq	r0, r0, r4
     af8:	0000000c 	andeq	r0, r0, ip
     afc:	00000ac0 	andeq	r0, r0, r0, asr #21
     b00:	08003e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, ip, sp}
     b04:	00000004 	andeq	r0, r0, r4
     b08:	00000018 	andeq	r0, r0, r8, lsl r0
     b0c:	00000ac0 	andeq	r0, r0, r0, asr #21
     b10:	08003ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, sp}
     b14:	0000001e 	andeq	r0, r0, lr, lsl r0
     b18:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     b1c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
     b24:	0000001c 	andeq	r0, r0, ip, lsl r0
     b28:	00000ac0 	andeq	r0, r0, r0, asr #21
     b2c:	08003ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     b30:	00000024 	andeq	r0, r0, r4, lsr #32
     b34:	83180e41 	tsthi	r8, #1040	; 0x410
     b38:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     b3c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     b40:	00018e02 	andeq	r8, r1, r2, lsl #28
     b44:	0000000c 	andeq	r0, r0, ip
     b48:	00000ac0 	andeq	r0, r0, r0, asr #21
     b4c:	08003ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
     b50:	00000008 	andeq	r0, r0, r8
     b54:	0000000c 	andeq	r0, r0, ip
     b58:	00000ac0 	andeq	r0, r0, r0, asr #21
     b5c:	08003eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, ip, sp}
     b60:	00000004 	andeq	r0, r0, r4
     b64:	0000000c 	andeq	r0, r0, ip
     b68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b74:	00000014 	andeq	r0, r0, r4, lsl r0
     b78:	00000b64 	andeq	r0, r0, r4, ror #22
     b7c:	08003ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, sp}
     b80:	0000002c 	andeq	r0, r0, ip, lsr #32
     b84:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b88:	00018e02 	andeq	r8, r1, r2, lsl #28
     b8c:	0000000c 	andeq	r0, r0, ip
     b90:	00000b64 	andeq	r0, r0, r4, ror #22
     b94:	08003f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp}
     b98:	00000004 	andeq	r0, r0, r4
     b9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ba0:	00000b64 	andeq	r0, r0, r4, ror #22
     ba4:	08003f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, sp}
     ba8:	0000009c 	muleq	r0, ip, r0
     bac:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     bb0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     bb4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bb8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bbc:	00000b64 	andeq	r0, r0, r4, ror #22
     bc0:	08003fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
     bc4:	00000150 	andeq	r0, r0, r0, asr r1
     bc8:	83180e41 	tsthi	r8, #1040	; 0x410
     bcc:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     bd0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     bd4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd8:	00000014 	andeq	r0, r0, r4, lsl r0
     bdc:	00000b64 	andeq	r0, r0, r4, ror #22
     be0:	0800410c 	stmdaeq	r0, {r2, r3, r8, lr}
     be4:	00000020 	andeq	r0, r0, r0, lsr #32
     be8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     bec:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf0:	0000000c 	andeq	r0, r0, ip
     bf4:	00000b64 	andeq	r0, r0, r4, ror #22
     bf8:	0800412c 	stmdaeq	r0, {r2, r3, r5, r8, lr}
     bfc:	0000000c 	andeq	r0, r0, ip
     c00:	0000000c 	andeq	r0, r0, ip
     c04:	00000b64 	andeq	r0, r0, r4, ror #22
     c08:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
     c0c:	0000000c 	andeq	r0, r0, ip
     c10:	0000000c 	andeq	r0, r0, ip
     c14:	00000b64 	andeq	r0, r0, r4, ror #22
     c18:	08004144 	stmdaeq	r0, {r2, r6, r8, lr}
     c1c:	0000000c 	andeq	r0, r0, ip
     c20:	0000000c 	andeq	r0, r0, ip
     c24:	00000b64 	andeq	r0, r0, r4, ror #22
     c28:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
     c2c:	0000000c 	andeq	r0, r0, ip
     c30:	0000000c 	andeq	r0, r0, ip
     c34:	00000b64 	andeq	r0, r0, r4, ror #22
     c38:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
     c3c:	0000000c 	andeq	r0, r0, ip
     c40:	0000000c 	andeq	r0, r0, ip
     c44:	00000b64 	andeq	r0, r0, r4, ror #22
     c48:	08004168 	stmdaeq	r0, {r3, r5, r6, r8, lr}
     c4c:	00000014 	andeq	r0, r0, r4, lsl r0
     c50:	0000000c 	andeq	r0, r0, ip
     c54:	00000b64 	andeq	r0, r0, r4, ror #22
     c58:	0800417c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, lr}
     c5c:	0000000c 	andeq	r0, r0, ip
     c60:	0000000c 	andeq	r0, r0, ip
     c64:	00000b64 	andeq	r0, r0, r4, ror #22
     c68:	08004188 	stmdaeq	r0, {r3, r7, r8, lr}
     c6c:	00000010 	andeq	r0, r0, r0, lsl r0
     c70:	0000000c 	andeq	r0, r0, ip
     c74:	00000b64 	andeq	r0, r0, r4, ror #22
     c78:	08004198 	stmdaeq	r0, {r3, r4, r7, r8, lr}
     c7c:	00000008 	andeq	r0, r0, r8
     c80:	0000000c 	andeq	r0, r0, ip
     c84:	00000b64 	andeq	r0, r0, r4, ror #22
     c88:	080041a0 	stmdaeq	r0, {r5, r7, r8, lr}
     c8c:	00000004 	andeq	r0, r0, r4
     c90:	0000000c 	andeq	r0, r0, ip
     c94:	00000b64 	andeq	r0, r0, r4, ror #22
     c98:	080041a4 	stmdaeq	r0, {r2, r5, r7, r8, lr}
     c9c:	00000006 	andeq	r0, r0, r6
     ca0:	0000000c 	andeq	r0, r0, ip
     ca4:	00000b64 	andeq	r0, r0, r4, ror #22
     ca8:	080041aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, lr}
     cac:	0000001a 	andeq	r0, r0, sl, lsl r0
     cb0:	00000014 	andeq	r0, r0, r4, lsl r0
     cb4:	00000b64 	andeq	r0, r0, r4, ror #22
     cb8:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
     cbc:	00000028 	andeq	r0, r0, r8, lsr #32
     cc0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     cc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc8:	00000018 	andeq	r0, r0, r8, lsl r0
     ccc:	00000b64 	andeq	r0, r0, r4, ror #22
     cd0:	080041ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, lr}
     cd4:	00000024 	andeq	r0, r0, r4, lsr #32
     cd8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     cdc:	4c018e02 	stcmi	14, cr8, [r1], {2}
     ce0:	000ec4ce 	andeq	ip, lr, lr, asr #9
     ce4:	00000014 	andeq	r0, r0, r4, lsl r0
     ce8:	00000b64 	andeq	r0, r0, r4, ror #22
     cec:	08004210 	stmdaeq	r0, {r4, r9, lr}
     cf0:	00000030 	andeq	r0, r0, r0, lsr r0
     cf4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     cf8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cfc:	00000018 	andeq	r0, r0, r8, lsl r0
     d00:	00000b64 	andeq	r0, r0, r4, ror #22
     d04:	08004240 	stmdaeq	r0, {r6, r9, lr}
     d08:	0000002c 	andeq	r0, r0, ip, lsr #32
     d0c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     d10:	4f018e02 	svcmi	0x00018e02
     d14:	000ec4ce 	andeq	ip, lr, lr, asr #9
     d18:	0000000c 	andeq	r0, r0, ip
     d1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d20:	7c020001 	stcvc	0, cr0, [r2], {1}
     d24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d28:	0000000c 	andeq	r0, r0, ip
     d2c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d30:	0800426c 	stmdaeq	r0, {r2, r3, r5, r6, r9, lr}
     d34:	00000018 	andeq	r0, r0, r8, lsl r0
     d38:	0000000c 	andeq	r0, r0, ip
     d3c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d40:	08004284 	stmdaeq	r0, {r2, r7, r9, lr}
     d44:	00000018 	andeq	r0, r0, r8, lsl r0
     d48:	0000000c 	andeq	r0, r0, ip
     d4c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d50:	0800429c 	stmdaeq	r0, {r2, r3, r4, r7, r9, lr}
     d54:	00000018 	andeq	r0, r0, r8, lsl r0
     d58:	0000000c 	andeq	r0, r0, ip
     d5c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d60:	080042b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, lr}
     d64:	00000018 	andeq	r0, r0, r8, lsl r0
     d68:	0000000c 	andeq	r0, r0, ip
     d6c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d70:	080042cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, lr}
     d74:	00000010 	andeq	r0, r0, r0, lsl r0
     d78:	0000000c 	andeq	r0, r0, ip
     d7c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d80:	080042dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, lr}
     d84:	0000000c 	andeq	r0, r0, ip
     d88:	0000000c 	andeq	r0, r0, ip
     d8c:	00000d18 	andeq	r0, r0, r8, lsl sp
     d90:	080042e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, lr}
     d94:	0000000c 	andeq	r0, r0, ip
     d98:	0000000c 	andeq	r0, r0, ip
     d9c:	00000d18 	andeq	r0, r0, r8, lsl sp
     da0:	080042f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, lr}
     da4:	00000010 	andeq	r0, r0, r0, lsl r0
     da8:	0000000c 	andeq	r0, r0, ip
     dac:	00000d18 	andeq	r0, r0, r8, lsl sp
     db0:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
     db4:	00000010 	andeq	r0, r0, r0, lsl r0
     db8:	0000000c 	andeq	r0, r0, ip
     dbc:	00000d18 	andeq	r0, r0, r8, lsl sp
     dc0:	08004314 	stmdaeq	r0, {r2, r4, r8, r9, lr}
     dc4:	00000018 	andeq	r0, r0, r8, lsl r0
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	00000d18 	andeq	r0, r0, r8, lsl sp
     dd0:	0800432c 	stmdaeq	r0, {r2, r3, r5, r8, r9, lr}
     dd4:	00000020 	andeq	r0, r0, r0, lsr #32
     dd8:	0000000c 	andeq	r0, r0, ip
     ddc:	00000d18 	andeq	r0, r0, r8, lsl sp
     de0:	0800434c 	stmdaeq	r0, {r2, r3, r6, r8, r9, lr}
     de4:	0000000c 	andeq	r0, r0, ip
     de8:	0000000c 	andeq	r0, r0, ip
     dec:	00000d18 	andeq	r0, r0, r8, lsl sp
     df0:	08004358 	stmdaeq	r0, {r3, r4, r6, r8, r9, lr}
     df4:	00000028 	andeq	r0, r0, r8, lsr #32
     df8:	00000018 	andeq	r0, r0, r8, lsl r0
     dfc:	00000d18 	andeq	r0, r0, r8, lsl sp
     e00:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
     e04:	00000036 	andeq	r0, r0, r6, lsr r0
     e08:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     e0c:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
     e10:	0000080e 	andeq	r0, r0, lr, lsl #16
     e14:	00000018 	andeq	r0, r0, r8, lsl r0
     e18:	00000d18 	andeq	r0, r0, r8, lsl sp
     e1c:	080043b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, lr}
     e20:	00000042 	andeq	r0, r0, r2, asr #32
     e24:	83100e41 	tsthi	r0, #1040	; 0x410
     e28:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     e2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     e30:	00000014 	andeq	r0, r0, r4, lsl r0
     e34:	00000d18 	andeq	r0, r0, r8, lsl sp
     e38:	080043f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, lr}
     e3c:	0000003c 	andeq	r0, r0, ip, lsr r0
     e40:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e44:	00018e02 	andeq	r8, r1, r2, lsl #28
     e48:	00000014 	andeq	r0, r0, r4, lsl r0
     e4c:	00000d18 	andeq	r0, r0, r8, lsl sp
     e50:	08004434 	stmdaeq	r0, {r2, r4, r5, sl, lr}
     e54:	00000070 	andeq	r0, r0, r0, ror r0
     e58:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     e60:	00000018 	andeq	r0, r0, r8, lsl r0
     e64:	00000d18 	andeq	r0, r0, r8, lsl sp
     e68:	080044a4 	stmdaeq	r0, {r2, r5, r7, sl, lr}
     e6c:	00000048 	andeq	r0, r0, r8, asr #32
     e70:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     e74:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e78:	00018e02 	andeq	r8, r1, r2, lsl #28
     e7c:	00000018 	andeq	r0, r0, r8, lsl r0
     e80:	00000d18 	andeq	r0, r0, r8, lsl sp
     e84:	080044ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, lr}
     e88:	00000038 	andeq	r0, r0, r8, lsr r0
     e8c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     e90:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e94:	00018e02 	andeq	r8, r1, r2, lsl #28
     e98:	00000018 	andeq	r0, r0, r8, lsl r0
     e9c:	00000d18 	andeq	r0, r0, r8, lsl sp
     ea0:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
     ea4:	00000048 	andeq	r0, r0, r8, asr #32
     ea8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     eac:	86038504 	strhi	r8, [r3], -r4, lsl #10
     eb0:	00018e02 	andeq	r8, r1, r2, lsl #28
     eb4:	00000014 	andeq	r0, r0, r4, lsl r0
     eb8:	00000d18 	andeq	r0, r0, r8, lsl sp
     ebc:	0800456c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, lr}
     ec0:	000000a0 	andeq	r0, r0, r0, lsr #1
     ec4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     ec8:	00018e02 	andeq	r8, r1, r2, lsl #28
     ecc:	00000018 	andeq	r0, r0, r8, lsl r0
     ed0:	00000d18 	andeq	r0, r0, r8, lsl sp
     ed4:	0800460c 	stmdaeq	r0, {r2, r3, r9, sl, lr}
     ed8:	0000008c 	andeq	r0, r0, ip, lsl #1
     edc:	83100e41 	tsthi	r0, #1040	; 0x410
     ee0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     ee4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ee8:	0000001c 	andeq	r0, r0, ip, lsl r0
     eec:	00000d18 	andeq	r0, r0, r8, lsl sp
     ef0:	08004698 	stmdaeq	r0, {r3, r4, r7, r9, sl, lr}
     ef4:	00000054 	andeq	r0, r0, r4, asr r0
     ef8:	83180e41 	tsthi	r8, #1040	; 0x410
     efc:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     f00:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     f04:	00018e02 	andeq	r8, r1, r2, lsl #28
     f08:	0000000c 	andeq	r0, r0, ip
     f0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f10:	7c020001 	stcvc	0, cr0, [r2], {1}
     f14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f18:	0000001c 	andeq	r0, r0, ip, lsl r0
     f1c:	00000f08 	andeq	r0, r0, r8, lsl #30
     f20:	080046ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, lr}
     f24:	000000a4 	andeq	r0, r0, r4, lsr #1
     f28:	83080e41 	movwhi	r0, #36417	; 0x8e41
     f2c:	02018e02 	andeq	r8, r1, #2, 28
     f30:	c3ce0a49 	bicgt	r0, lr, #299008	; 0x49000
     f34:	0b42000e 	bleq	1080f74 <__Stack_Size+0x1080b74>
     f38:	00000018 	andeq	r0, r0, r8, lsl r0
     f3c:	00000f08 	andeq	r0, r0, r8, lsl #30
     f40:	08004790 	stmdaeq	r0, {r4, r7, r8, r9, sl, lr}
     f44:	00000016 	andeq	r0, r0, r6, lsl r0
     f48:	83080e41 	movwhi	r0, #36417	; 0x8e41
     f4c:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     f50:	000ec3ce 	andeq	ip, lr, lr, asr #7
     f54:	0000001c 	andeq	r0, r0, ip, lsl r0
     f58:	00000f08 	andeq	r0, r0, r8, lsl #30
     f5c:	080047a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, lr}
     f60:	0000009c 	muleq	r0, ip, r0
     f64:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
     f68:	86048505 	strhi	r8, [r4], -r5, lsl #10
     f6c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     f70:	00000001 	andeq	r0, r0, r1
     f74:	0000000c 	andeq	r0, r0, ip
     f78:	00000f08 	andeq	r0, r0, r8, lsl #30
     f7c:	08004842 	stmdaeq	r0, {r1, r6, fp, lr}
     f80:	00000010 	andeq	r0, r0, r0, lsl r0
     f84:	0000000c 	andeq	r0, r0, ip
     f88:	00000f08 	andeq	r0, r0, r8, lsl #30
     f8c:	08004852 	stmdaeq	r0, {r1, r4, r6, fp, lr}
     f90:	0000000c 	andeq	r0, r0, ip
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	00000f08 	andeq	r0, r0, r8, lsl #30
     f9c:	0800485e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, lr}
     fa0:	00000006 	andeq	r0, r0, r6
     fa4:	0000000c 	andeq	r0, r0, ip
     fa8:	00000f08 	andeq	r0, r0, r8, lsl #30
     fac:	08004864 	stmdaeq	r0, {r2, r5, r6, fp, lr}
     fb0:	0000000c 	andeq	r0, r0, ip
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	00000f08 	andeq	r0, r0, r8, lsl #30
     fbc:	08004870 	stmdaeq	r0, {r4, r5, r6, fp, lr}
     fc0:	00000006 	andeq	r0, r0, r6
     fc4:	0000000c 	andeq	r0, r0, ip
     fc8:	00000f08 	andeq	r0, r0, r8, lsl #30
     fcc:	08004876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, lr}
     fd0:	00000004 	andeq	r0, r0, r4
     fd4:	0000000c 	andeq	r0, r0, ip
     fd8:	00000f08 	andeq	r0, r0, r8, lsl #30
     fdc:	0800487a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, lr}
     fe0:	00000004 	andeq	r0, r0, r4
     fe4:	0000000c 	andeq	r0, r0, ip
     fe8:	00000f08 	andeq	r0, r0, r8, lsl #30
     fec:	0800487e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, lr}
     ff0:	0000000a 	andeq	r0, r0, sl
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	00000f08 	andeq	r0, r0, r8, lsl #30
     ffc:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    1000:	00000004 	andeq	r0, r0, r4
    1004:	0000000c 	andeq	r0, r0, ip
    1008:	00000f08 	andeq	r0, r0, r8, lsl #30
    100c:	0800488c 	stmdaeq	r0, {r2, r3, r7, fp, lr}
    1010:	00000010 	andeq	r0, r0, r0, lsl r0
    1014:	0000000c 	andeq	r0, r0, ip
    1018:	00000f08 	andeq	r0, r0, r8, lsl #30
    101c:	0800489c 	stmdaeq	r0, {r2, r3, r4, r7, fp, lr}
    1020:	0000001c 	andeq	r0, r0, ip, lsl r0
    1024:	0000000c 	andeq	r0, r0, ip
    1028:	00000f08 	andeq	r0, r0, r8, lsl #30
    102c:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000018 	andeq	r0, r0, r8, lsl r0
    1038:	00000f08 	andeq	r0, r0, r8, lsl #30
    103c:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
    1040:	00000054 	andeq	r0, r0, r4, asr r0
    1044:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1048:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    104c:	00000001 	andeq	r0, r0, r1
    1050:	00000014 	andeq	r0, r0, r4, lsl r0
    1054:	00000f08 	andeq	r0, r0, r8, lsl #30
    1058:	08004918 	stmdaeq	r0, {r3, r4, r8, fp, lr}
    105c:	0000002a 	andeq	r0, r0, sl, lsr #32
    1060:	84080e49 	strhi	r0, [r8], #-3657	; 0xe49
    1064:	00018e02 	andeq	r8, r1, r2, lsl #28
    1068:	0000000c 	andeq	r0, r0, ip
    106c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1070:	7c020001 	stcvc	0, cr0, [r2], {1}
    1074:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1078:	0000000c 	andeq	r0, r0, ip
    107c:	00001068 	andeq	r1, r0, r8, rrx
    1080:	08004944 	stmdaeq	r0, {r2, r6, r8, fp, lr}
    1084:	00000034 	andeq	r0, r0, r4, lsr r0
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	00001068 	andeq	r1, r0, r8, rrx
    1090:	08004978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, lr}
    1094:	00000030 	andeq	r0, r0, r0, lsr r0
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	00001068 	andeq	r1, r0, r8, rrx
    10a0:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    10a4:	00000014 	andeq	r0, r0, r4, lsl r0
    10a8:	00000018 	andeq	r0, r0, r8, lsl r0
    10ac:	00001068 	andeq	r1, r0, r8, rrx
    10b0:	080049bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, lr}
    10b4:	00000084 	andeq	r0, r0, r4, lsl #1
    10b8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    10bc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    10c0:	00000001 	andeq	r0, r0, r1
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	00001068 	andeq	r1, r0, r8, rrx
    10cc:	08004a40 	stmdaeq	r0, {r6, r9, fp, lr}
    10d0:	0000000c 	andeq	r0, r0, ip
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00001068 	andeq	r1, r0, r8, rrx
    10dc:	08004a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, lr}
    10e0:	00000004 	andeq	r0, r0, r4
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00001068 	andeq	r1, r0, r8, rrx
    10ec:	08004a50 	stmdaeq	r0, {r4, r6, r9, fp, lr}
    10f0:	00000004 	andeq	r0, r0, r4
    10f4:	0000000c 	andeq	r0, r0, ip
    10f8:	00001068 	andeq	r1, r0, r8, rrx
    10fc:	08004a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, lr}
    1100:	00000004 	andeq	r0, r0, r4
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	00001068 	andeq	r1, r0, r8, rrx
    110c:	08004a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, lr}
    1110:	00000004 	andeq	r0, r0, r4
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	00001068 	andeq	r1, r0, r8, rrx
    111c:	08004a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, lr}
    1120:	00000006 	andeq	r0, r0, r6
    1124:	0000000c 	andeq	r0, r0, ip
    1128:	00001068 	andeq	r1, r0, r8, rrx
    112c:	08004a62 	stmdaeq	r0, {r1, r5, r6, r9, fp, lr}
    1130:	00000004 	andeq	r0, r0, r4
    1134:	0000000c 	andeq	r0, r0, ip
    1138:	00001068 	andeq	r1, r0, r8, rrx
    113c:	08004a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, lr}
    1140:	0000000e 	andeq	r0, r0, lr
    1144:	0000000c 	andeq	r0, r0, ip
    1148:	00001068 	andeq	r1, r0, r8, rrx
    114c:	08004a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, lr}
    1150:	00000020 	andeq	r0, r0, r0, lsr #32
    1154:	0000000c 	andeq	r0, r0, ip
    1158:	00001068 	andeq	r1, r0, r8, rrx
    115c:	08004a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, lr}
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	0000000c 	andeq	r0, r0, ip
    1168:	00001068 	andeq	r1, r0, r8, rrx
    116c:	08004aa0 	stmdaeq	r0, {r5, r7, r9, fp, lr}
    1170:	00000018 	andeq	r0, r0, r8, lsl r0
    1174:	0000000c 	andeq	r0, r0, ip
    1178:	00001068 	andeq	r1, r0, r8, rrx
    117c:	08004ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, lr}
    1180:	00000010 	andeq	r0, r0, r0, lsl r0
    1184:	0000000c 	andeq	r0, r0, ip
    1188:	00001068 	andeq	r1, r0, r8, rrx
    118c:	08004ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, lr}
    1190:	00000020 	andeq	r0, r0, r0, lsr #32
    1194:	0000000c 	andeq	r0, r0, ip
    1198:	00001068 	andeq	r1, r0, r8, rrx
    119c:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	0000000c 	andeq	r0, r0, ip
    11a8:	00001068 	andeq	r1, r0, r8, rrx
    11ac:	08004af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, lr}
    11b0:	00000014 	andeq	r0, r0, r4, lsl r0
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	00001068 	andeq	r1, r0, r8, rrx
    11bc:	08004b08 	stmdaeq	r0, {r3, r8, r9, fp, lr}
    11c0:	00000010 	andeq	r0, r0, r0, lsl r0
    11c4:	0000000c 	andeq	r0, r0, ip
    11c8:	00001068 	andeq	r1, r0, r8, rrx
    11cc:	08004b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, lr}
    11d0:	00000010 	andeq	r0, r0, r0, lsl r0
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	00001068 	andeq	r1, r0, r8, rrx
    11dc:	08004b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, lr}
    11e0:	00000018 	andeq	r0, r0, r8, lsl r0
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	00001068 	andeq	r1, r0, r8, rrx
    11ec:	08004b40 	stmdaeq	r0, {r6, r8, r9, fp, lr}
    11f0:	00000020 	andeq	r0, r0, r0, lsr #32
    11f4:	00000014 	andeq	r0, r0, r4, lsl r0
    11f8:	00001068 	andeq	r1, r0, r8, rrx
    11fc:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    1200:	0000004c 	andeq	r0, r0, ip, asr #32
    1204:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1208:	00018e02 	andeq	r8, r1, r2, lsl #28
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	00001068 	andeq	r1, r0, r8, rrx
    1214:	08004bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, lr}
    1218:	0000001c 	andeq	r0, r0, ip, lsl r0
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	00001068 	andeq	r1, r0, r8, rrx
    1224:	08004bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, lr}
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	00001068 	andeq	r1, r0, r8, rrx
    1234:	08004be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, lr}
    1238:	00000018 	andeq	r0, r0, r8, lsl r0
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	00001068 	andeq	r1, r0, r8, rrx
    1244:	08004bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, lr}
    1248:	0000001c 	andeq	r0, r0, ip, lsl r0
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	00001068 	andeq	r1, r0, r8, rrx
    1254:	08004c14 	stmdaeq	r0, {r2, r4, sl, fp, lr}
    1258:	00000030 	andeq	r0, r0, r0, lsr r0
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	00001068 	andeq	r1, r0, r8, rrx
    1264:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
    1268:	00000014 	andeq	r0, r0, r4, lsl r0
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1274:	7c020001 	stcvc	0, cr0, [r2], {1}
    1278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    127c:	00000018 	andeq	r0, r0, r8, lsl r0
    1280:	0000126c 	andeq	r1, r0, ip, ror #4
    1284:	08004c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, lr}
    1288:	0000001a 	andeq	r0, r0, sl, lsl r0
    128c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1290:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
    1294:	000ec3ce 	andeq	ip, lr, lr, asr #7
    1298:	0000000c 	andeq	r0, r0, ip
    129c:	0000126c 	andeq	r1, r0, ip, ror #4
    12a0:	08004c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, lr}
    12a4:	0000000a 	andeq	r0, r0, sl
    12a8:	0000000c 	andeq	r0, r0, ip
    12ac:	0000126c 	andeq	r1, r0, ip, ror #4
    12b0:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	0000000c 	andeq	r0, r0, ip
    12bc:	0000126c 	andeq	r1, r0, ip, ror #4
    12c0:	08004c88 	stmdaeq	r0, {r3, r7, sl, fp, lr}
    12c4:	00000014 	andeq	r0, r0, r4, lsl r0
    12c8:	0000000c 	andeq	r0, r0, ip
    12cc:	0000126c 	andeq	r1, r0, ip, ror #4
    12d0:	08004c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, lr}
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	0000000c 	andeq	r0, r0, ip
    12dc:	0000126c 	andeq	r1, r0, ip, ror #4
    12e0:	08004ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, lr}
    12e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    12e8:	0000000c 	andeq	r0, r0, ip
    12ec:	0000126c 	andeq	r1, r0, ip, ror #4
    12f0:	08004cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, lr}
    12f4:	00000028 	andeq	r0, r0, r8, lsr #32
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	0000126c 	andeq	r1, r0, ip, ror #4
    1300:	08004cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, lr}
    1304:	00000014 	andeq	r0, r0, r4, lsl r0
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	0000126c 	andeq	r1, r0, ip, ror #4
    1310:	08004d10 	stmdaeq	r0, {r4, r8, sl, fp, lr}
    1314:	00000010 	andeq	r0, r0, r0, lsl r0
    1318:	0000000c 	andeq	r0, r0, ip
    131c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1320:	7c020001 	stcvc	0, cr0, [r2], {1}
    1324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1328:	0000000c 	andeq	r0, r0, ip
    132c:	00001318 	andeq	r1, r0, r8, lsl r3
    1330:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    1334:	0000003c 	andeq	r0, r0, ip, lsr r0
    1338:	0000000c 	andeq	r0, r0, ip
    133c:	00001318 	andeq	r1, r0, r8, lsl r3
    1340:	08004d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, lr}
    1344:	00000038 	andeq	r0, r0, r8, lsr r0
    1348:	0000000c 	andeq	r0, r0, ip
    134c:	00001318 	andeq	r1, r0, r8, lsl r3
    1350:	08004d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, lr}
    1354:	00000014 	andeq	r0, r0, r4, lsl r0
    1358:	0000000c 	andeq	r0, r0, ip
    135c:	00001318 	andeq	r1, r0, r8, lsl r3
    1360:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    1364:	0000000c 	andeq	r0, r0, ip
    1368:	0000000c 	andeq	r0, r0, ip
    136c:	00001318 	andeq	r1, r0, r8, lsl r3
    1370:	08004db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, lr}
    1374:	00000014 	andeq	r0, r0, r4, lsl r0
    1378:	0000000c 	andeq	r0, r0, ip
    137c:	00001318 	andeq	r1, r0, r8, lsl r3
    1380:	08004dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, lr}
    1384:	0000000c 	andeq	r0, r0, ip
    1388:	0000000c 	andeq	r0, r0, ip
    138c:	00001318 	andeq	r1, r0, r8, lsl r3
    1390:	08004dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, lr}
    1394:	00000014 	andeq	r0, r0, r4, lsl r0
    1398:	0000000c 	andeq	r0, r0, ip
    139c:	00001318 	andeq	r1, r0, r8, lsl r3
    13a0:	08004de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, lr}
    13a4:	00000010 	andeq	r0, r0, r0, lsl r0
    13a8:	0000000c 	andeq	r0, r0, ip
    13ac:	00001318 	andeq	r1, r0, r8, lsl r3
    13b0:	08004df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, lr}
    13b4:	00000014 	andeq	r0, r0, r4, lsl r0
    13b8:	0000000c 	andeq	r0, r0, ip
    13bc:	00001318 	andeq	r1, r0, r8, lsl r3
    13c0:	08004e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, lr}
    13c4:	00000014 	andeq	r0, r0, r4, lsl r0
    13c8:	0000000c 	andeq	r0, r0, ip
    13cc:	00001318 	andeq	r1, r0, r8, lsl r3
    13d0:	08004e20 	stmdaeq	r0, {r5, r9, sl, fp, lr}
    13d4:	00000014 	andeq	r0, r0, r4, lsl r0
    13d8:	0000000c 	andeq	r0, r0, ip
    13dc:	00001318 	andeq	r1, r0, r8, lsl r3
    13e0:	08004e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, lr}
    13e4:	00000018 	andeq	r0, r0, r8, lsl r0
    13e8:	0000000c 	andeq	r0, r0, ip
    13ec:	00001318 	andeq	r1, r0, r8, lsl r3
    13f0:	08004e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, lr}
    13f4:	0000000c 	andeq	r0, r0, ip
    13f8:	0000000c 	andeq	r0, r0, ip
    13fc:	00001318 	andeq	r1, r0, r8, lsl r3
    1400:	08004e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, lr}
    1404:	00000014 	andeq	r0, r0, r4, lsl r0
    1408:	0000000c 	andeq	r0, r0, ip
    140c:	00001318 	andeq	r1, r0, r8, lsl r3
    1410:	08004e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, lr}
    1414:	00000020 	andeq	r0, r0, r0, lsr #32
    1418:	0000000c 	andeq	r0, r0, ip
    141c:	00001318 	andeq	r1, r0, r8, lsl r3
    1420:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    1424:	0000000c 	andeq	r0, r0, ip
    1428:	0000000c 	andeq	r0, r0, ip
    142c:	00001318 	andeq	r1, r0, r8, lsl r3
    1430:	08004e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, lr}
    1434:	00000010 	andeq	r0, r0, r0, lsl r0
    1438:	0000000c 	andeq	r0, r0, ip
    143c:	00001318 	andeq	r1, r0, r8, lsl r3
    1440:	08004ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, lr}
    1444:	0000000c 	andeq	r0, r0, ip
    1448:	00000014 	andeq	r0, r0, r4, lsl r0
    144c:	00001318 	andeq	r1, r0, r8, lsl r3
    1450:	08004eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, lr}
    1454:	00000084 	andeq	r0, r0, r4, lsl #1
    1458:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    145c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	00001318 	andeq	r1, r0, r8, lsl r3
    1468:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    146c:	00000018 	andeq	r0, r0, r8, lsl r0
    1470:	0000000c 	andeq	r0, r0, ip
    1474:	00001318 	andeq	r1, r0, r8, lsl r3
    1478:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    147c:	00000018 	andeq	r0, r0, r8, lsl r0
    1480:	0000000c 	andeq	r0, r0, ip
    1484:	00001318 	andeq	r1, r0, r8, lsl r3
    1488:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	0000000c 	andeq	r0, r0, ip
    1494:	00001318 	andeq	r1, r0, r8, lsl r3
    1498:	08004f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, lr}
    149c:	00000018 	andeq	r0, r0, r8, lsl r0
    14a0:	0000000c 	andeq	r0, r0, ip
    14a4:	00001318 	andeq	r1, r0, r8, lsl r3
    14a8:	08004f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, lr}
    14ac:	00000018 	andeq	r0, r0, r8, lsl r0
    14b0:	0000000c 	andeq	r0, r0, ip
    14b4:	00001318 	andeq	r1, r0, r8, lsl r3
    14b8:	08004fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, lr}
    14bc:	0000000c 	andeq	r0, r0, ip
    14c0:	0000000c 	andeq	r0, r0, ip
    14c4:	00001318 	andeq	r1, r0, r8, lsl r3
    14c8:	08004fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, lr}
    14cc:	0000000c 	andeq	r0, r0, ip
    14d0:	0000000c 	andeq	r0, r0, ip
    14d4:	00001318 	andeq	r1, r0, r8, lsl r3
    14d8:	08004fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, lr}
    14dc:	0000000c 	andeq	r0, r0, ip
    14e0:	0000000c 	andeq	r0, r0, ip
    14e4:	00001318 	andeq	r1, r0, r8, lsl r3
    14e8:	08004fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp, lr}
    14ec:	00000028 	andeq	r0, r0, r8, lsr #32
    14f0:	00000014 	andeq	r0, r0, r4, lsl r0
    14f4:	00001318 	andeq	r1, r0, r8, lsl r3
    14f8:	08004ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14fc:	0000002e 	andeq	r0, r0, lr, lsr #32
    1500:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    1504:	040e5401 	streq	r5, [lr], #-1025	; 0x401
    1508:	0000000c 	andeq	r0, r0, ip
    150c:	00001318 	andeq	r1, r0, r8, lsl r3
    1510:	0800502a 	stmdaeq	r0, {r1, r3, r5, ip, lr}
    1514:	00000012 	andeq	r0, r0, r2, lsl r0
    1518:	0000000c 	andeq	r0, r0, ip
    151c:	00001318 	andeq	r1, r0, r8, lsl r3
    1520:	0800503c 	stmdaeq	r0, {r2, r3, r4, r5, ip, lr}
    1524:	00000014 	andeq	r0, r0, r4, lsl r0
    1528:	0000000c 	andeq	r0, r0, ip
    152c:	00001318 	andeq	r1, r0, r8, lsl r3
    1530:	08005050 	stmdaeq	r0, {r4, r6, ip, lr}
    1534:	0000000c 	andeq	r0, r0, ip
    1538:	0000000c 	andeq	r0, r0, ip
    153c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1540:	7c020001 	stcvc	0, cr0, [r2], {1}
    1544:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1548:	0000000c 	andeq	r0, r0, ip
    154c:	00001538 	andeq	r1, r0, r8, lsr r5
    1550:	0800505c 	stmdaeq	r0, {r2, r3, r4, r6, ip, lr}
    1554:	00000018 	andeq	r0, r0, r8, lsl r0
    1558:	0000000c 	andeq	r0, r0, ip
    155c:	00001538 	andeq	r1, r0, r8, lsr r5
    1560:	08005074 	stmdaeq	r0, {r2, r4, r5, r6, ip, lr}
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	0000000c 	andeq	r0, r0, ip
    156c:	00001538 	andeq	r1, r0, r8, lsr r5
    1570:	08005080 	stmdaeq	r0, {r7, ip, lr}
    1574:	00000028 	andeq	r0, r0, r8, lsr #32
    1578:	0000000c 	andeq	r0, r0, ip
    157c:	00001538 	andeq	r1, r0, r8, lsr r5
    1580:	080050a8 	stmdaeq	r0, {r3, r5, r7, ip, lr}
    1584:	00000018 	andeq	r0, r0, r8, lsl r0
    1588:	0000000c 	andeq	r0, r0, ip
    158c:	00001538 	andeq	r1, r0, r8, lsr r5
    1590:	080050c0 	stmdaeq	r0, {r6, r7, ip, lr}
    1594:	0000000c 	andeq	r0, r0, ip
    1598:	0000000c 	andeq	r0, r0, ip
    159c:	00001538 	andeq	r1, r0, r8, lsr r5
    15a0:	080050cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, lr}
    15a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a8:	0000000c 	andeq	r0, r0, ip
    15ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15b8:	00000018 	andeq	r0, r0, r8, lsl r0
    15bc:	000015a8 	andeq	r1, r0, r8, lsr #11
    15c0:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
    15c4:	00000032 	andeq	r0, r0, r2, lsr r0
    15c8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    15cc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    15d0:	00000001 	andeq	r0, r0, r1
    15d4:	00000018 	andeq	r0, r0, r8, lsl r0
    15d8:	000015a8 	andeq	r1, r0, r8, lsr #11
    15dc:	0800511a 	stmdaeq	r0, {r1, r3, r4, r8, ip, lr}
    15e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    15e4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    15e8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    15ec:	00000001 	andeq	r0, r0, r1
    15f0:	00000024 	andeq	r0, r0, r4, lsr #32
    15f4:	000015a8 	andeq	r1, r0, r8, lsr #11
    15f8:	08005154 	stmdaeq	r0, {r2, r4, r6, r8, ip, lr}
    15fc:	000000c8 	andeq	r0, r0, r8, asr #1
    1600:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1604:	76018e02 	strvc	r8, [r1], -r2, lsl #28
    1608:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    160c:	620b4200 	andvs	r4, fp, #0, 4
    1610:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1614:	000b4200 	andeq	r4, fp, r0, lsl #4
    1618:	0000000c 	andeq	r0, r0, ip
    161c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1620:	0800521c 	stmdaeq	r0, {r2, r3, r4, r9, ip, lr}
    1624:	0000003c 	andeq	r0, r0, ip, lsr r0
    1628:	00000018 	andeq	r0, r0, r8, lsl r0
    162c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1630:	08005258 	stmdaeq	r0, {r3, r4, r6, r9, ip, lr}
    1634:	00000074 	andeq	r0, r0, r4, ror r0
    1638:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    163c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1640:	00018e02 	andeq	r8, r1, r2, lsl #28
    1644:	00000018 	andeq	r0, r0, r8, lsl r0
    1648:	000015a8 	andeq	r1, r0, r8, lsr #11
    164c:	080052cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, lr}
    1650:	00000088 	andeq	r0, r0, r8, lsl #1
    1654:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    1658:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    165c:	00000001 	andeq	r0, r0, r1
    1660:	00000018 	andeq	r0, r0, r8, lsl r0
    1664:	000015a8 	andeq	r1, r0, r8, lsr #11
    1668:	08005354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip, lr}
    166c:	00000084 	andeq	r0, r0, r4, lsl #1
    1670:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1674:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1678:	00018e02 	andeq	r8, r1, r2, lsl #28
    167c:	00000018 	andeq	r0, r0, r8, lsl r0
    1680:	000015a8 	andeq	r1, r0, r8, lsr #11
    1684:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
    1688:	00000068 	andeq	r0, r0, r8, rrx
    168c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    1690:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1694:	00000001 	andeq	r0, r0, r1
    1698:	0000000c 	andeq	r0, r0, ip
    169c:	000015a8 	andeq	r1, r0, r8, lsr #11
    16a0:	08005440 	stmdaeq	r0, {r6, sl, ip, lr}
    16a4:	00000022 	andeq	r0, r0, r2, lsr #32
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	000015a8 	andeq	r1, r0, r8, lsr #11
    16b0:	08005462 	stmdaeq	r0, {r1, r5, r6, sl, ip, lr}
    16b4:	00000012 	andeq	r0, r0, r2, lsl r0
    16b8:	0000000c 	andeq	r0, r0, ip
    16bc:	000015a8 	andeq	r1, r0, r8, lsr #11
    16c0:	08005474 	stmdaeq	r0, {r2, r4, r5, r6, sl, ip, lr}
    16c4:	00000014 	andeq	r0, r0, r4, lsl r0
    16c8:	0000000c 	andeq	r0, r0, ip
    16cc:	000015a8 	andeq	r1, r0, r8, lsr #11
    16d0:	08005488 	stmdaeq	r0, {r3, r7, sl, ip, lr}
    16d4:	00000010 	andeq	r0, r0, r0, lsl r0
    16d8:	0000000c 	andeq	r0, r0, ip
    16dc:	000015a8 	andeq	r1, r0, r8, lsr #11
    16e0:	08005498 	stmdaeq	r0, {r3, r4, r7, sl, ip, lr}
    16e4:	00000012 	andeq	r0, r0, r2, lsl r0
    16e8:	0000000c 	andeq	r0, r0, ip
    16ec:	000015a8 	andeq	r1, r0, r8, lsr #11
    16f0:	080054aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip, lr}
    16f4:	00000018 	andeq	r0, r0, r8, lsl r0
    16f8:	0000000c 	andeq	r0, r0, ip
    16fc:	000015a8 	andeq	r1, r0, r8, lsr #11
    1700:	080054c2 	stmdaeq	r0, {r1, r6, r7, sl, ip, lr}
    1704:	0000001c 	andeq	r0, r0, ip, lsl r0
    1708:	0000000c 	andeq	r0, r0, ip
    170c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1710:	080054de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, ip, lr}
    1714:	00000012 	andeq	r0, r0, r2, lsl r0
    1718:	0000000c 	andeq	r0, r0, ip
    171c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1720:	080054f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip, lr}
    1724:	00000004 	andeq	r0, r0, r4
    1728:	0000000c 	andeq	r0, r0, ip
    172c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1730:	080054f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, lr}
    1734:	00000008 	andeq	r0, r0, r8
    1738:	0000000c 	andeq	r0, r0, ip
    173c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1740:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
    1744:	00000012 	andeq	r0, r0, r2, lsl r0
    1748:	0000000c 	andeq	r0, r0, ip
    174c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1750:	0800550e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip, lr}
    1754:	0000000e 	andeq	r0, r0, lr
    1758:	0000000c 	andeq	r0, r0, ip
    175c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1760:	0800551c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, lr}
    1764:	0000001a 	andeq	r0, r0, sl, lsl r0
    1768:	00000018 	andeq	r0, r0, r8, lsl r0
    176c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1770:	08005536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, ip, lr}
    1774:	00000034 	andeq	r0, r0, r4, lsr r0
    1778:	83100e41 	tsthi	r0, #1040	; 0x410
    177c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1780:	00018e02 	andeq	r8, r1, r2, lsl #28
    1784:	00000014 	andeq	r0, r0, r4, lsl r0
    1788:	000015a8 	andeq	r1, r0, r8, lsr #11
    178c:	0800556a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip, lr}
    1790:	00000014 	andeq	r0, r0, r4, lsl r0
    1794:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1798:	00018e02 	andeq	r8, r1, r2, lsl #28
    179c:	00000014 	andeq	r0, r0, r4, lsl r0
    17a0:	000015a8 	andeq	r1, r0, r8, lsr #11
    17a4:	0800557e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip, lr}
    17a8:	0000001a 	andeq	r0, r0, sl, lsl r0
    17ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    17b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b4:	00000014 	andeq	r0, r0, r4, lsl r0
    17b8:	000015a8 	andeq	r1, r0, r8, lsr #11
    17bc:	08005598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, lr}
    17c0:	00000014 	andeq	r0, r0, r4, lsl r0
    17c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    17c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    17cc:	0000000c 	andeq	r0, r0, ip
    17d0:	000015a8 	andeq	r1, r0, r8, lsr #11
    17d4:	080055ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, lr}
    17d8:	00000006 	andeq	r0, r0, r6
    17dc:	0000000c 	andeq	r0, r0, ip
    17e0:	000015a8 	andeq	r1, r0, r8, lsr #11
    17e4:	080055b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, ip, lr}
    17e8:	00000010 	andeq	r0, r0, r0, lsl r0
    17ec:	0000000c 	andeq	r0, r0, ip
    17f0:	000015a8 	andeq	r1, r0, r8, lsr #11
    17f4:	080055c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, lr}
    17f8:	00000010 	andeq	r0, r0, r0, lsl r0
    17fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1800:	000015a8 	andeq	r1, r0, r8, lsr #11
    1804:	080055d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, ip, lr}
    1808:	0000003c 	andeq	r0, r0, ip, lsr r0
    180c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1810:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1814:	00018e02 	andeq	r8, r1, r2, lsl #28
    1818:	0000000c 	andeq	r0, r0, ip
    181c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1820:	0800560e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip, lr}
    1824:	00000010 	andeq	r0, r0, r0, lsl r0
    1828:	0000000c 	andeq	r0, r0, ip
    182c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1830:	0800561e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, ip, lr}
    1834:	00000014 	andeq	r0, r0, r4, lsl r0
    1838:	0000000c 	andeq	r0, r0, ip
    183c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1840:	08005632 	stmdaeq	r0, {r1, r4, r5, r9, sl, ip, lr}
    1844:	00000010 	andeq	r0, r0, r0, lsl r0
    1848:	0000000c 	andeq	r0, r0, ip
    184c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1850:	08005642 	stmdaeq	r0, {r1, r6, r9, sl, ip, lr}
    1854:	00000014 	andeq	r0, r0, r4, lsl r0
    1858:	0000000c 	andeq	r0, r0, ip
    185c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1860:	08005656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip, lr}
    1864:	00000018 	andeq	r0, r0, r8, lsl r0
    1868:	0000000c 	andeq	r0, r0, ip
    186c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1870:	0800566e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, ip, lr}
    1874:	00000018 	andeq	r0, r0, r8, lsl r0
    1878:	0000000c 	andeq	r0, r0, ip
    187c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1880:	08005686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip, lr}
    1884:	00000018 	andeq	r0, r0, r8, lsl r0
    1888:	0000000c 	andeq	r0, r0, ip
    188c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1890:	0800569e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip, lr}
    1894:	00000018 	andeq	r0, r0, r8, lsl r0
    1898:	0000000c 	andeq	r0, r0, ip
    189c:	000015a8 	andeq	r1, r0, r8, lsr #11
    18a0:	080056b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, ip, lr}
    18a4:	00000010 	andeq	r0, r0, r0, lsl r0
    18a8:	0000000c 	andeq	r0, r0, ip
    18ac:	000015a8 	andeq	r1, r0, r8, lsr #11
    18b0:	080056c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, ip, lr}
    18b4:	00000014 	andeq	r0, r0, r4, lsl r0
    18b8:	0000000c 	andeq	r0, r0, ip
    18bc:	000015a8 	andeq	r1, r0, r8, lsr #11
    18c0:	080056da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, ip, lr}
    18c4:	00000010 	andeq	r0, r0, r0, lsl r0
    18c8:	0000000c 	andeq	r0, r0, ip
    18cc:	000015a8 	andeq	r1, r0, r8, lsr #11
    18d0:	080056ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, ip, lr}
    18d4:	00000014 	andeq	r0, r0, r4, lsl r0
    18d8:	0000000c 	andeq	r0, r0, ip
    18dc:	000015a8 	andeq	r1, r0, r8, lsr #11
    18e0:	080056fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, lr}
    18e4:	00000010 	andeq	r0, r0, r0, lsl r0
    18e8:	0000000c 	andeq	r0, r0, ip
    18ec:	000015a8 	andeq	r1, r0, r8, lsr #11
    18f0:	0800570e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip, lr}
    18f4:	00000014 	andeq	r0, r0, r4, lsl r0
    18f8:	0000000c 	andeq	r0, r0, ip
    18fc:	000015a8 	andeq	r1, r0, r8, lsr #11
    1900:	08005722 	stmdaeq	r0, {r1, r5, r8, r9, sl, ip, lr}
    1904:	00000010 	andeq	r0, r0, r0, lsl r0
    1908:	0000000c 	andeq	r0, r0, ip
    190c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1910:	08005732 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, ip, lr}
    1914:	00000014 	andeq	r0, r0, r4, lsl r0
    1918:	0000000c 	andeq	r0, r0, ip
    191c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1920:	08005746 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, ip, lr}
    1924:	00000010 	andeq	r0, r0, r0, lsl r0
    1928:	0000000c 	andeq	r0, r0, ip
    192c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1930:	08005756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, ip, lr}
    1934:	00000010 	andeq	r0, r0, r0, lsl r0
    1938:	0000000c 	andeq	r0, r0, ip
    193c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1940:	08005766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip, lr}
    1944:	00000010 	andeq	r0, r0, r0, lsl r0
    1948:	0000000c 	andeq	r0, r0, ip
    194c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1950:	08005776 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, lr}
    1954:	00000010 	andeq	r0, r0, r0, lsl r0
    1958:	0000000c 	andeq	r0, r0, ip
    195c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1960:	08005786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip, lr}
    1964:	00000010 	andeq	r0, r0, r0, lsl r0
    1968:	0000000c 	andeq	r0, r0, ip
    196c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1970:	08005796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, lr}
    1974:	00000010 	andeq	r0, r0, r0, lsl r0
    1978:	0000000c 	andeq	r0, r0, ip
    197c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1980:	080057a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, ip, lr}
    1984:	00000014 	andeq	r0, r0, r4, lsl r0
    1988:	0000000c 	andeq	r0, r0, ip
    198c:	000015a8 	andeq	r1, r0, r8, lsr #11
    1990:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    1994:	00000014 	andeq	r0, r0, r4, lsl r0
    1998:	0000000c 	andeq	r0, r0, ip
    199c:	000015a8 	andeq	r1, r0, r8, lsr #11
    19a0:	080057ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, ip, lr}
    19a4:	00000014 	andeq	r0, r0, r4, lsl r0
    19a8:	0000000c 	andeq	r0, r0, ip
    19ac:	000015a8 	andeq	r1, r0, r8, lsr #11
    19b0:	080057e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, ip, lr}
    19b4:	00000014 	andeq	r0, r0, r4, lsl r0
    19b8:	0000000c 	andeq	r0, r0, ip
    19bc:	000015a8 	andeq	r1, r0, r8, lsr #11
    19c0:	080057f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    19c4:	00000014 	andeq	r0, r0, r4, lsl r0
    19c8:	00000014 	andeq	r0, r0, r4, lsl r0
    19cc:	000015a8 	andeq	r1, r0, r8, lsr #11
    19d0:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
    19d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    19d8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    19dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    19e0:	00000014 	andeq	r0, r0, r4, lsl r0
    19e4:	000015a8 	andeq	r1, r0, r8, lsr #11
    19e8:	08005826 	stmdaeq	r0, {r1, r2, r5, fp, ip, lr}
    19ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    19f0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    19f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    19f8:	00000014 	andeq	r0, r0, r4, lsl r0
    19fc:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a00:	08005842 	stmdaeq	r0, {r1, r6, fp, ip, lr}
    1a04:	00000044 	andeq	r0, r0, r4, asr #32
    1a08:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1a0c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1a10:	0000000c 	andeq	r0, r0, ip
    1a14:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a18:	08005886 	stmdaeq	r0, {r1, r2, r7, fp, ip, lr}
    1a1c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a20:	0000000c 	andeq	r0, r0, ip
    1a24:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a28:	0800589e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, ip, lr}
    1a2c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a30:	0000000c 	andeq	r0, r0, ip
    1a34:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a38:	080058b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip, lr}
    1a3c:	00000018 	andeq	r0, r0, r8, lsl r0
    1a40:	0000000c 	andeq	r0, r0, ip
    1a44:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a48:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
    1a4c:	00000016 	andeq	r0, r0, r6, lsl r0
    1a50:	0000000c 	andeq	r0, r0, ip
    1a54:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a58:	080058e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, lr}
    1a5c:	00000016 	andeq	r0, r0, r6, lsl r0
    1a60:	0000000c 	andeq	r0, r0, ip
    1a64:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a68:	080058fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, lr}
    1a6c:	00000016 	andeq	r0, r0, r6, lsl r0
    1a70:	0000000c 	andeq	r0, r0, ip
    1a74:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a78:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
    1a7c:	00000016 	andeq	r0, r0, r6, lsl r0
    1a80:	0000000c 	andeq	r0, r0, ip
    1a84:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a88:	08005926 	stmdaeq	r0, {r1, r2, r5, r8, fp, ip, lr}
    1a8c:	00000004 	andeq	r0, r0, r4
    1a90:	0000000c 	andeq	r0, r0, ip
    1a94:	000015a8 	andeq	r1, r0, r8, lsr #11
    1a98:	0800592a 	stmdaeq	r0, {r1, r3, r5, r8, fp, ip, lr}
    1a9c:	00000004 	andeq	r0, r0, r4
    1aa0:	0000000c 	andeq	r0, r0, ip
    1aa4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1aa8:	0800592e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, ip, lr}
    1aac:	00000004 	andeq	r0, r0, r4
    1ab0:	0000000c 	andeq	r0, r0, ip
    1ab4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1ab8:	08005932 	stmdaeq	r0, {r1, r4, r5, r8, fp, ip, lr}
    1abc:	00000004 	andeq	r0, r0, r4
    1ac0:	0000000c 	andeq	r0, r0, ip
    1ac4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1ac8:	08005936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, ip, lr}
    1acc:	00000004 	andeq	r0, r0, r4
    1ad0:	0000000c 	andeq	r0, r0, ip
    1ad4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1ad8:	0800593a 	stmdaeq	r0, {r1, r3, r4, r5, r8, fp, ip, lr}
    1adc:	00000006 	andeq	r0, r0, r6
    1ae0:	0000000c 	andeq	r0, r0, ip
    1ae4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1ae8:	08005940 	stmdaeq	r0, {r6, r8, fp, ip, lr}
    1aec:	00000016 	andeq	r0, r0, r6, lsl r0
    1af0:	0000000c 	andeq	r0, r0, ip
    1af4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1af8:	08005956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, ip, lr}
    1afc:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b00:	00000030 	andeq	r0, r0, r0, lsr r0
    1b04:	000015a8 	andeq	r1, r0, r8, lsr #11
    1b08:	08005970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, lr}
    1b0c:	0000006e 	andeq	r0, r0, lr, rrx
    1b10:	83180e41 	tsthi	r8, #1040	; 0x410
    1b14:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1b18:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1b1c:	62018e02 	andvs	r8, r1, #2, 28
    1b20:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1b24:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1b28:	500b4200 	andpl	r4, fp, r0, lsl #4
    1b2c:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1b30:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1b34:	0000000c 	andeq	r0, r0, ip
    1b38:	000015a8 	andeq	r1, r0, r8, lsr #11
    1b3c:	080059de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, ip, lr}
    1b40:	00000016 	andeq	r0, r0, r6, lsl r0
    1b44:	0000000c 	andeq	r0, r0, ip
    1b48:	000015a8 	andeq	r1, r0, r8, lsr #11
    1b4c:	080059f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, lr}
    1b50:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b54:	00000048 	andeq	r0, r0, r8, asr #32
    1b58:	000015a8 	andeq	r1, r0, r8, lsr #11
    1b5c:	08005a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, lr}
    1b60:	000000b6 	strheq	r0, [r0], -r6
    1b64:	83180e41 	tsthi	r8, #1040	; 0x410
    1b68:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1b6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1b70:	4d018e02 	stcmi	14, cr8, [r1, #-8]
    1b74:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1b78:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1b7c:	480b4200 	stmdami	fp, {r9, lr}
    1b80:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1b84:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1b88:	600b4200 	andvs	r4, fp, r0, lsl #4
    1b8c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1b90:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1b94:	5c0b4200 	sfmpl	f4, 4, [fp], {-0}
    1b98:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1b9c:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1ba0:	0000000c 	andeq	r0, r0, ip
    1ba4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1ba8:	08005ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, ip, lr}
    1bac:	00000010 	andeq	r0, r0, r0, lsl r0
    1bb0:	0000000c 	andeq	r0, r0, ip
    1bb4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1bb8:	08005ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, lr}
    1bbc:	00000006 	andeq	r0, r0, r6
    1bc0:	0000000c 	andeq	r0, r0, ip
    1bc4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1bc8:	08005ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, lr}
    1bcc:	00000006 	andeq	r0, r0, r6
    1bd0:	0000000c 	andeq	r0, r0, ip
    1bd4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1bd8:	08005ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, lr}
    1bdc:	00000006 	andeq	r0, r0, r6
    1be0:	0000000c 	andeq	r0, r0, ip
    1be4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1be8:	08005ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, lr}
    1bec:	00000008 	andeq	r0, r0, r8
    1bf0:	0000000c 	andeq	r0, r0, ip
    1bf4:	000015a8 	andeq	r1, r0, r8, lsr #11
    1bf8:	08005aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, ip, lr}
    1bfc:	00000006 	andeq	r0, r0, r6
    1c00:	0000000c 	andeq	r0, r0, ip
    1c04:	000015a8 	andeq	r1, r0, r8, lsr #11
    1c08:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    1c0c:	00000006 	andeq	r0, r0, r6
    1c10:	0000000c 	andeq	r0, r0, ip
    1c14:	000015a8 	andeq	r1, r0, r8, lsr #11
    1c18:	08005afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, ip, lr}
    1c1c:	0000000c 	andeq	r0, r0, ip
    1c20:	0000000c 	andeq	r0, r0, ip
    1c24:	000015a8 	andeq	r1, r0, r8, lsr #11
    1c28:	08005b06 	stmdaeq	r0, {r1, r2, r8, r9, fp, ip, lr}
    1c2c:	00000008 	andeq	r0, r0, r8
    1c30:	0000000c 	andeq	r0, r0, ip
    1c34:	000015a8 	andeq	r1, r0, r8, lsr #11
    1c38:	08005b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip, lr}
    1c3c:	00000016 	andeq	r0, r0, r6, lsl r0
    1c40:	0000000c 	andeq	r0, r0, ip
    1c44:	000015a8 	andeq	r1, r0, r8, lsr #11
    1c48:	08005b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, lr}
    1c4c:	00000008 	andeq	r0, r0, r8
    1c50:	0000000c 	andeq	r0, r0, ip
    1c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1c58:	7c020001 	stcvc	0, cr0, [r2], {1}
    1c5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1c60:	00000024 	andeq	r0, r0, r4, lsr #32
    1c64:	00001c50 	andeq	r1, r0, r0, asr ip
    1c68:	08005b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, ip, lr}
    1c6c:	00000094 	muleq	r0, r4, r0
    1c70:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1c74:	5b018e02 	blpl	65484 <__Stack_Size+0x65084>
    1c78:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1c7c:	620b4500 	andvs	r4, fp, #0, 10
    1c80:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1c84:	000b4200 	andeq	r4, fp, r0, lsl #4
    1c88:	0000001c 	andeq	r0, r0, ip, lsl r0
    1c8c:	00001c50 	andeq	r1, r0, r0, asr ip
    1c90:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
    1c94:	00000088 	andeq	r0, r0, r8, lsl #1
    1c98:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1c9c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1ca0:	280e5d01 	stmdacs	lr, {r0, r8, sl, fp, ip, lr}
    1ca4:	000c0e62 	andeq	r0, ip, r2, ror #28
    1ca8:	0000000c 	andeq	r0, r0, ip
    1cac:	00001c50 	andeq	r1, r0, r0, asr ip
    1cb0:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
    1cb4:	00000016 	andeq	r0, r0, r6, lsl r0
    1cb8:	00000014 	andeq	r0, r0, r4, lsl r0
    1cbc:	00001c50 	andeq	r1, r0, r0, asr ip
    1cc0:	08005c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
    1cc4:	00000020 	andeq	r0, r0, r0, lsr #32
    1cc8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1ccc:	00018e02 	andeq	r8, r1, r2, lsl #28
    1cd0:	0000000c 	andeq	r0, r0, ip
    1cd4:	00001c50 	andeq	r1, r0, r0, asr ip
    1cd8:	08005c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, ip, lr}
    1cdc:	0000000c 	andeq	r0, r0, ip
    1ce0:	0000000c 	andeq	r0, r0, ip
    1ce4:	00001c50 	andeq	r1, r0, r0, asr ip
    1ce8:	08005c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, lr}
    1cec:	00000018 	andeq	r0, r0, r8, lsl r0
    1cf0:	00000014 	andeq	r0, r0, r4, lsl r0
    1cf4:	00001c50 	andeq	r1, r0, r0, asr ip
    1cf8:	08005ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip, lr}
    1cfc:	00000032 	andeq	r0, r0, r2, lsr r0
    1d00:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1d04:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d08:	0000000c 	andeq	r0, r0, ip
    1d0c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d10:	08005cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip, lr}
    1d14:	00000012 	andeq	r0, r0, r2, lsl r0
    1d18:	0000000c 	andeq	r0, r0, ip
    1d1c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d20:	08005ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, lr}
    1d24:	00000016 	andeq	r0, r0, r6, lsl r0
    1d28:	0000000c 	andeq	r0, r0, ip
    1d2c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d30:	08005cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, ip, lr}
    1d34:	00000016 	andeq	r0, r0, r6, lsl r0
    1d38:	0000000c 	andeq	r0, r0, ip
    1d3c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d40:	08005d12 	stmdaeq	r0, {r1, r4, r8, sl, fp, ip, lr}
    1d44:	00000018 	andeq	r0, r0, r8, lsl r0
    1d48:	0000000c 	andeq	r0, r0, ip
    1d4c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d50:	08005d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, ip, lr}
    1d54:	00000016 	andeq	r0, r0, r6, lsl r0
    1d58:	0000000c 	andeq	r0, r0, ip
    1d5c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d60:	08005d40 	stmdaeq	r0, {r6, r8, sl, fp, ip, lr}
    1d64:	00000018 	andeq	r0, r0, r8, lsl r0
    1d68:	0000000c 	andeq	r0, r0, ip
    1d6c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d70:	08005d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, lr}
    1d74:	00000008 	andeq	r0, r0, r8
    1d78:	0000000c 	andeq	r0, r0, ip
    1d7c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d80:	08005d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, ip, lr}
    1d84:	00000008 	andeq	r0, r0, r8
    1d88:	0000000c 	andeq	r0, r0, ip
    1d8c:	00001c50 	andeq	r1, r0, r0, asr ip
    1d90:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
    1d94:	0000000c 	andeq	r0, r0, ip
    1d98:	0000000c 	andeq	r0, r0, ip
    1d9c:	00001c50 	andeq	r1, r0, r0, asr ip
    1da0:	08005d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, lr}
    1da4:	00000012 	andeq	r0, r0, r2, lsl r0
    1da8:	0000000c 	andeq	r0, r0, ip
    1dac:	00001c50 	andeq	r1, r0, r0, asr ip
    1db0:	08005d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp, ip, lr}
    1db4:	00000012 	andeq	r0, r0, r2, lsl r0
    1db8:	0000000c 	andeq	r0, r0, ip
    1dbc:	00001c50 	andeq	r1, r0, r0, asr ip
    1dc0:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
    1dc4:	00000018 	andeq	r0, r0, r8, lsl r0
    1dc8:	0000000c 	andeq	r0, r0, ip
    1dcc:	00001c50 	andeq	r1, r0, r0, asr ip
    1dd0:	08005db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, ip, lr}
    1dd4:	00000018 	andeq	r0, r0, r8, lsl r0
    1dd8:	0000000c 	andeq	r0, r0, ip
    1ddc:	00001c50 	andeq	r1, r0, r0, asr ip
    1de0:	08005dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, ip, lr}
    1de4:	00000018 	andeq	r0, r0, r8, lsl r0
    1de8:	0000000c 	andeq	r0, r0, ip
    1dec:	00001c50 	andeq	r1, r0, r0, asr ip
    1df0:	08005de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, ip, lr}
    1df4:	00000016 	andeq	r0, r0, r6, lsl r0
    1df8:	0000000c 	andeq	r0, r0, ip
    1dfc:	00001c50 	andeq	r1, r0, r0, asr ip
    1e00:	08005df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    1e04:	00000018 	andeq	r0, r0, r8, lsl r0
    1e08:	0000000c 	andeq	r0, r0, ip
    1e0c:	00001c50 	andeq	r1, r0, r0, asr ip
    1e10:	08005e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp, ip, lr}
    1e14:	0000000c 	andeq	r0, r0, ip
    1e18:	0000000c 	andeq	r0, r0, ip
    1e1c:	00001c50 	andeq	r1, r0, r0, asr ip
    1e20:	08005e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip, lr}
    1e24:	00000008 	andeq	r0, r0, r8
    1e28:	00000014 	andeq	r0, r0, r4, lsl r0
    1e2c:	00001c50 	andeq	r1, r0, r0, asr ip
    1e30:	08005e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, ip, lr}
    1e34:	0000003e 	andeq	r0, r0, lr, lsr r0
    1e38:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1e3c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1e40:	0000000c 	andeq	r0, r0, ip
    1e44:	00001c50 	andeq	r1, r0, r0, asr ip
    1e48:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
    1e4c:	0000000e 	andeq	r0, r0, lr
    1e50:	0000000c 	andeq	r0, r0, ip
    1e54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1e58:	7c020001 	stcvc	0, cr0, [r2], {1}
    1e5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1e60:	0000001c 	andeq	r0, r0, ip, lsl r0
    1e64:	00001e50 	andeq	r1, r0, r0, asr lr
    1e68:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}
    1e6c:	00000050 	andeq	r0, r0, r0, asr r0
    1e70:	000d0941 	andeq	r0, sp, r1, asr #18
    1e74:	8d080e44 	stchi	14, cr0, [r8, #-272]	; 0xfffffef0
    1e78:	56018e02 	strpl	r8, [r1], -r2, lsl #28
    1e7c:	000ec0ce 	andeq	ip, lr, lr, asr #1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0, 10
      14:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
      18:	535f4343 	cmppl	pc, #201326593	; 0xc000001
      1c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
      20:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      24:	00676966 	rsbeq	r6, r7, r6, ror #18
      28:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
      2c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
      30:	53550065 	cmppl	r5, #101	; 0x65
      34:	5f545241 	svcpl	0x00545241
      38:	00646d43 	rsbeq	r6, r4, r3, asr #26
      3c:	5f434352 	svcpl	0x00434352
      40:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
      44:	47007469 	strmi	r7, [r0, -r9, ror #8]
      48:	5f4f4950 	svcpl	0x004f4950
      4c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
      50:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
      54:	63007469 	movwvs	r7, #1129	; 0x469
      58:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
      5c:	6d754c72 	ldclvs	12, cr4, [r5, #-456]!	; 0xfffffe38
      60:	736f6e69 	cmnvc	pc, #1680	; 0x690
      64:	00797469 	rsbseq	r7, r9, r9, ror #8
      68:	5f4d4954 	svcpl	0x004d4954
      6c:	73657250 	cmnvc	r5, #80, 4
      70:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
      74:	53420072 	movtpl	r0, #8306	; 0x2072
      78:	74005252 	strvc	r5, [r0], #-594	; 0x252
      7c:	5f6e7275 	svcpl	0x006e7275
      80:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
      84:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
      88:	75427261 	strbvc	r7, [r2, #-609]	; 0x261
      8c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      90:	00363532 	eorseq	r3, r6, r2, lsr r5
      94:	5f4d4954 	svcpl	0x004d4954
      98:	6e49434f 	cdpvs	3, 4, cr4, cr9, cr15, {2}
      9c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
      a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
      a4:	62670066 	rsbvs	r0, r7, #102	; 0x66
      a8:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
      ac:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      b0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
      b4:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
      b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      c0:	6f4d5f4f 	svcvs	0x004d5f4f
      c4:	54006564 	strpl	r6, [r0], #-1380	; 0x564
      c8:	4f5f4d49 	svcmi	0x005f4d49
      cc:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; ffffffc8 <SCS_BASE+0x1fff1fc8>
      d0:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
      d4:	50470079 	subpl	r0, r7, r9, ror r0
      d8:	505f4f49 	subspl	r4, pc, r9, asr #30
      dc:	62006e69 	andvs	r6, r0, #1680	; 0x690
      e0:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
      e4:	00657461 	rsbeq	r7, r5, r1, ror #8
      e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      ec:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
      f0:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
      f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
      f8:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
      fc:	2f656d6f 	svccs	0x00656d6f
     100:	6d656c63 	stclvs	12, cr6, [r5, #-396]!	; 0xfffffe74
     104:	2f746e65 	svccs	0x00746e65
     108:	30314f4d 	eorscc	r4, r1, sp, asr #30
     10c:	6f522f33 	svcvs	0x00522f33
     110:	00746f62 	rsbseq	r6, r4, r2, ror #30
     114:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     118:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     11c:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
     120:	00657461 	rsbeq	r7, r5, r1, ror #8
     124:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
     128:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
     12c:	4c58445f 	cfldrdmi	mvd4, [r8], {95}	; 0x5f
     130:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
     134:	754c7468 	strbvc	r7, [ip, #-1128]	; 0x468
     138:	6f6e696d 	svcvs	0x006e696d
     13c:	79746973 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     140:	41535500 	cmpmi	r3, r0, lsl #10
     144:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     148:	0074696e 	rsbseq	r6, r4, lr, ror #18
     14c:	6f727245 	svcvs	0x00727245
     150:	61745372 	cmnvs	r4, r2, ror r3
     154:	00737574 	rsbseq	r7, r3, r4, ror r5
     158:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     15c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     160:	00676966 	rsbeq	r6, r7, r6, ror #18
     164:	6f666e69 	svcvs	0x00666e69
     168:	7473624f 	ldrbtvc	r6, [r3], #-591	; 0x24f
     16c:	78546200 	ldmdavc	r4, {r9, sp, lr}^
     170:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     174:	656c0061 	strbvs	r0, [ip, #-97]!	; 0x61
     178:	69667466 	stmdbvs	r6!, {r1, r2, r5, r6, sl, ip, sp, lr}^
     17c:	00646c65 	rsbeq	r6, r4, r5, ror #24
     180:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     184:	73756d5f 	cmnvc	r5, #6080	; 0x17c0
     188:	52006369 	andpl	r6, r0, #-1543503871	; 0xa4000001
     18c:	505f4343 	subspl	r4, pc, r3, asr #6
     190:	6f434c4c 	svcvs	0x00434c4c
     194:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     198:	41535500 	cmpmi	r3, r0, lsl #10
     19c:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
     1a0:	4c64726f 	sfmmi	f7, 2, [r4], #-444	; 0xfffffe44
     1a4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     1a8:	756f0068 	strbvc	r0, [pc, #-104]!	; 148 <_Minimum_Stack_Size+0x48>
     1ac:	676e4174 			; <UNDEFINED> instruction: 0x676e4174
     1b0:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
     1b4:	69766f4d 	ldmdbvs	r6!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     1b8:	7300676e 	movwvc	r6, #1902	; 0x76e
     1bc:	65766f68 	ldrbvs	r6, [r6, #-3944]!	; 0xf68
     1c0:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
     1c4:	00657461 	rsbeq	r7, r5, r1, ror #8
     1c8:	5f4d4954 	svcpl	0x004d4954
     1cc:	4931434f 	ldmdbmi	r1!, {r0, r1, r2, r3, r6, r8, r9, lr}
     1d0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     1d4:	5f4d4954 	svcpl	0x004d4954
     1d8:	5031434f 	eorspl	r4, r1, pc, asr #6
     1dc:	6f6c6572 	svcvs	0x006c6572
     1e0:	6f436461 	svcvs	0x00436461
     1e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     1e8:	41535500 	cmpmi	r3, r0, lsl #10
     1ec:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
     1f0:	42706f74 	rsbsmi	r6, r0, #116, 30	; 0x1d0
     1f4:	00737469 	rsbseq	r7, r3, r9, ror #8
     1f8:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     1fc:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
     200:	75007468 	strvc	r7, [r0, #-1128]	; 0x468
     204:	6f745f70 	svcvs	0x00745f70
     208:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
     20c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
     210:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     214:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     218:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0x449
     21c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     220:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
     224:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     228:	65535f6b 	ldrbvs	r5, [r3, #-3947]	; 0xf6b
     22c:	6c655274 	sfmvs	f5, 2, [r5], #-464	; 0xfffffe30
     230:	0064616f 	rsbeq	r6, r4, pc, ror #2
     234:	5f74756f 	svcpl	0x0074756f
     238:	6c676e41 	stclvs	14, cr6, [r7], #-260	; 0xfffffefc
     23c:	6f003165 	svcvs	0x00003165
     240:	415f7475 	cmpmi	pc, r5, ror r4	; <UNPREDICTABLE>
     244:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     248:	50470032 	subpl	r0, r7, r2, lsr r0
     24c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     250:	0074696e 	rsbseq	r6, r4, lr, ror #18
     254:	5f434352 	svcpl	0x00434352
     258:	4b4c4350 	blmi	1310fa0 <__Stack_Size+0x1310ba0>
     25c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     260:	00676966 	rsbeq	r6, r7, r6, ror #18
     264:	31524343 	cmpcc	r2, r3, asr #6
     268:	6c61565f 	stclvs	6, cr5, [r1], #-380	; 0xfffffe84
     26c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0x300
     270:	63006465 	movwvs	r6, #1125	; 0x465
     274:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     278:	415f746e 	cmpmi	pc, lr, ror #8
     27c:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     280:	75630031 	strbvc	r0, [r3, #-49]!	; 0x31
     284:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     288:	6e415f74 	mcrvs	15, 2, r5, cr1, cr4, {3}
     28c:	32656c67 	rsbcc	r6, r5, #26368	; 0x6700
     290:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     294:	70535f4f 	subsvc	r5, r3, pc, asr #30
     298:	5f646565 	svcpl	0x00646565
     29c:	7a484d32 	bvc	121376c <__Stack_Size+0x121336c>
     2a0:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     2a4:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
     2a8:	65526172 	ldrbvs	r6, [r2, #-370]	; 0x172
     2ac:	54470064 	strbpl	r0, [r7], #-100	; 0x64
     2b0:	54005250 	strpl	r5, [r0], #-592	; 0x250
     2b4:	74534478 	ldrbvc	r4, [r3], #-1144	; 0x478
     2b8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     2bc:	43435200 	movtmi	r5, #12800	; 0x3200
     2c0:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     2c4:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
     2c8:	53455348 	movtpl	r5, #21320	; 0x5348
     2cc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     2d0:	54007055 	strpl	r7, [r0], #-85	; 0x55
     2d4:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2dc <_Minimum_Stack_Size+0x1dc>
     2d8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     2dc:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     2e0:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
     2e4:	61437465 	cmpvs	r3, r5, ror #8
     2e8:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
     2ec:	54003165 	strpl	r3, [r0], #-357	; 0x165
     2f0:	505f4d49 	subspl	r4, pc, r9, asr #26
     2f4:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xc75
     2f8:	41535500 	cmpmi	r3, r0, lsl #10
     2fc:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     300:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     304:	00657461 	rsbeq	r7, r5, r1, ror #8
     308:	5f4d4954 	svcpl	0x004d4954
     30c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     310:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     314:	6f697369 	svcvs	0x00697369
     318:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     31c:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffff3d7 <SCS_BASE+0x1fff13d7>
     320:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     324:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     328:	53550065 	cmppl	r5, #101	; 0x65
     32c:	5f545241 	svcpl	0x00545241
     330:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
     334:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
     338:	00617461 	rsbeq	r7, r1, r1, ror #8
     33c:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
     340:	61446200 	mrsvs	r6, (UNDEF: 100)
     344:	76006174 			; <UNDEFINED> instruction: 0x76006174
     348:	00363175 	eorseq	r3, r6, r5, ror r1
     34c:	7a7a7562 	bvc	1e9d8dc <__Stack_Size+0x1e9d4dc>
     350:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
     354:	616c6544 	cmnvs	ip, r4, asr #10
     358:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
     35c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     360:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     364:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     368:	62006665 	andvs	r6, r0, #105906176	; 0x6500000
     36c:	746e6553 	strbtvc	r6, [lr], #-1363	; 0x553
     370:	61746144 	cmnvs	r4, r4, asr #2
     374:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     378:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     37c:	54497261 	strbpl	r7, [r9], #-609	; 0x261
     380:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     384:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     388:	43007469 	movwmi	r7, #1129	; 0x469
     38c:	00315243 	eorseq	r5, r1, r3, asr #4
     390:	32524343 	subscc	r4, r2, #201326593	; 0xc000001
     394:	52434300 	subpl	r4, r3, #0, 6
     398:	43430033 	movtmi	r0, #12339	; 0x3033
     39c:	43003452 	movwmi	r3, #1106	; 0x452
     3a0:	31524d43 	cmpcc	r2, r3, asr #26
     3a4:	4d434300 	stclmi	3, cr4, [r3, #-0]
     3a8:	47003252 	smlsdmi	r0, r2, r2, r3
     3ac:	5f4f4950 	svcpl	0x004f4950
     3b0:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     3b4:	30315f64 	eorscc	r5, r1, r4, ror #30
     3b8:	007a484d 	rsbseq	r4, sl, sp, asr #16
     3bc:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     3c0:	5f657479 	svcpl	0x00657479
     3c4:	63004350 	movwvs	r4, #848	; 0x350
     3c8:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0x61
     3cc:	55006572 	strpl	r6, [r0, #-1394]	; 0x572
     3d0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     3d4:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     3d8:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     3dc:	53770061 	cmnpl	r7, #97	; 0x61
     3e0:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xe65
     3e4:	00617461 	rsbeq	r7, r1, r1, ror #8
     3e8:	2f505041 	svccs	0x00505041
     3ec:	2f637273 	svccs	0x00637273
     3f0:	6e69616d 	powvsez	f6, f1, #5.0
     3f4:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
     3f8:	5f4f4950 	svcpl	0x004f4950
     3fc:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
     400:	00737469 	rsbseq	r7, r3, r9, ror #8
     404:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xf56
     408:	00656761 	rsbeq	r6, r5, r1, ror #14
     40c:	69666e69 	stmdbvs	r6!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     410:	6574696e 	ldrbvs	r6, [r4, #-2414]!	; 0x96e
     414:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
     418:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     41c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     420:	6d65526e 	sfmvs	f5, 2, [r5, #-440]!	; 0xfffffe48
     424:	6f437061 	svcvs	0x00437061
     428:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     42c:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     430:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     434:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     438:	00657479 	rsbeq	r7, r5, r9, ror r4
     43c:	30447852 	subcc	r7, r4, r2, asr r8
     440:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     444:	70757272 	rsbsvc	r7, r5, r2, ror r2
     448:	57500074 			; <UNDEFINED> instruction: 0x57500074
     44c:	61425f52 	cmpvs	r2, r2, asr pc
     450:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     454:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
     458:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
     45c:	72500064 	subsvc	r0, r0, #100	; 0x64
     460:	43746e69 	cmnmi	r4, #1680	; 0x690
     464:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
     468:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     46c:	50470073 	subpl	r0, r7, r3, ror r0
     470:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 354 <_Minimum_Stack_Size+0x254>
     474:	5f65646f 	svcpl	0x0065646f
     478:	00445049 	subeq	r5, r4, r9, asr #32
     47c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     480:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     484:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     488:	775f6574 			; <UNDEFINED> instruction: 0x775f6574
     48c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     490:	4f495047 	svcmi	0x00495047
     494:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 49c <__Stack_Size+0x9c>
     498:	50495f65 	subpl	r5, r9, r5, ror #30
     49c:	53550055 	cmppl	r5, #85	; 0x55
     4a0:	5f545241 	svcpl	0x00545241
     4a4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     4a8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     4ac:	67007469 	strvs	r7, [r0, -r9, ror #8]
     4b0:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
     4b4:	00656c67 	rsbeq	r6, r5, r7, ror #24
     4b8:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     4bc:	5f657479 	svcpl	0x00657479
     4c0:	004c5844 	subeq	r5, ip, r4, asr #16
     4c4:	4f495047 	svcmi	0x00495047
     4c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4d0 <__Stack_Size+0xd0>
     4cc:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff56f <SCS_BASE+0x1fff156f>
     4d0:	444f5f74 	strbmi	r5, [pc], #-3956	; 4d8 <__Stack_Size+0xd8>
     4d4:	44785400 	ldrbtmi	r5, [r8], #-1024	; 0x400
     4d8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     4dc:	67003631 	smladxvs	r0, r1, r6, r3
     4e0:	736d3177 	cmnvc	sp, #-1073741795	; 0xc000001d
     4e4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     4e8:	00726574 	rsbseq	r6, r2, r4, ror r5
     4ec:	32337576 	eorscc	r7, r3, #494927872	; 0x1d800000
     4f0:	43435200 	movtmi	r5, #12800	; 0x3200
     4f4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4f8:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4fc:	43687069 	cmnmi	r8, #105	; 0x69
     500:	6b636f6c 	blvs	18dc2b8 <__Stack_Size+0x18dbeb8>
     504:	00646d43 	rsbeq	r6, r4, r3, asr #26
     508:	4349564e 	movtmi	r5, #38478	; 0x964e
     50c:	5152495f 	cmppl	r2, pc, asr r9
     510:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     514:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
     518:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
     51c:	00524549 	subseq	r4, r2, r9, asr #10
     520:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
     524:	696d754c 	stmdbvs	sp!, {r2, r3, r6, r8, sl, ip, sp, lr}^
     528:	69736f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     52c:	67007974 	smlsdxvs	r0, r4, r9, r7
     530:	6d695477 	cfstrdvs	mvd5, [r9, #-476]!	; 0xfffffe24
     534:	44676e69 	strbtmi	r6, [r7], #-3689	; 0xe69
     538:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     53c:	41535500 	cmpmi	r3, r0, lsl #10
     540:	545f5452 	ldrbpl	r5, [pc], #-1106	; 548 <__Stack_Size+0x148>
     544:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     548:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     54c:	4f5f4d49 	svcmi	0x005f4d49
     550:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
     554:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     558:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     55c:	69006572 	stmdbvs	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
     560:	5f74696e 	svcpl	0x0074696e
     564:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     568:	54007374 	strpl	r7, [r0], #-884	; 0x374
     56c:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
     570:	74657065 	strbtvc	r7, [r5], #-101	; 0x65
     574:	6f697469 	svcvs	0x00697469
     578:	756f436e 	strbvc	r4, [pc, #-878]!	; 212 <_Minimum_Stack_Size+0x112>
     57c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     580:	6e657300 	cdpvs	3, 6, cr7, cr5, cr0, {0}
     584:	00726f73 	rsbseq	r6, r2, r3, ror pc
     588:	5f4d4954 	svcpl	0x004d4954
     58c:	504e434f 	subpl	r4, lr, pc, asr #6
     590:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
     594:	00797469 	rsbseq	r7, r9, r9, ror #8
     598:	6c65446d 	cfstrdvs	mvd4, [r5], #-436	; 0xfffffe4c
     59c:	55007961 	strpl	r7, [r0, #-2401]	; 0x961
     5a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     5a4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     5a8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     5ac:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     5b0:	6c006572 	cfstr32vs	mvfx6, [r0], {114}	; 0x72
     5b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
     5b8:	0066664f 	rsbeq	r6, r6, pc, asr #12
     5bc:	52454343 	subpl	r4, r5, #201326593	; 0xc000001
     5c0:	736f5000 	cmnvc	pc, #0
     5c4:	6f697469 	svcvs	0x00697469
     5c8:	6142006e 	cmpvs	r2, lr, rrx
     5cc:	61726475 	cmnvs	r2, r5, ror r4
     5d0:	505f6574 	subspl	r6, pc, r4, ror r5	; <UNPREDICTABLE>
     5d4:	55530043 	ldrbpl	r0, [r3, #-67]	; 0x43
     5d8:	53454343 	movtpl	r4, #21315	; 0x5343
     5dc:	564e0053 			; <UNDEFINED> instruction: 0x564e0053
     5e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5e4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     5e8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     5ec:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5f0:	53494400 	movtpl	r4, #37888	; 0x9400
     5f4:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     5f8:	43435200 	movtmi	r5, #12800	; 0x3200
     5fc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     600:	72655031 	rsbvc	r5, r5, #49	; 0x31
     604:	43687069 	cmnmi	r8, #105	; 0x69
     608:	6b636f6c 	blvs	18dc3c0 <__Stack_Size+0x18dbfc0>
     60c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     610:	63656843 	cmnvs	r5, #4390912	; 0x430000
     614:	77654e6b 	strbvc	r4, [r5, -fp, ror #28]!
     618:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
     61c:	64006576 	strvs	r6, [r0], #-1398	; 0x576
     620:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
     624:	00626c74 	rsbeq	r6, r2, r4, ror ip
     628:	6564726f 	strbvs	r7, [r4, #-623]!	; 0x26f
     62c:	70750072 	rsbsvc	r0, r5, r2, ror r0
     630:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
     634:	5f6f745f 	svcpl	0x006f745f
     638:	64007075 	strvs	r7, [r0], #-117	; 0x75
     63c:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
     640:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
     644:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     648:	756f435f 	strbvc	r4, [pc, #-863]!	; 2f1 <_Minimum_Stack_Size+0x1f1>
     64c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     650:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     654:	41535500 	cmpmi	r3, r0, lsl #10
     658:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 518 <__Stack_Size+0x118>
     65c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     660:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     664:	435f3154 	cmpmi	pc, #84, 2
     668:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     66c:	61727567 	cmnvs	r2, r7, ror #10
     670:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     674:	444e4900 	strbmi	r4, [lr], #-2304	; 0x900
     678:	63005845 	movwvs	r5, #2117	; 0x845
     67c:	6b636568 	blvs	18d9c24 <__Stack_Size+0x18d9824>
     680:	7473624f 	ldrbtvc	r6, [r3], #-591	; 0x24f
     684:	656c6361 	strbvs	r6, [ip, #-865]!	; 0x361
     688:	434d5300 	movtmi	r5, #54016	; 0xd300
     68c:	43520052 	cmpmi	r2, #82	; 0x52
     690:	53485f43 	movtpl	r5, #36675	; 0x8f43
     694:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     698:	00676966 	rsbeq	r6, r7, r6, ror #18
     69c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     6a0:	61485f54 	cmpvs	r8, r4, asr pc
     6a4:	61776472 	cmnvs	r7, r2, ror r4
     6a8:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
     6ac:	6f43776f 	svcvs	0x0043776f
     6b0:	6f72746e 	svcvs	0x0072746e
     6b4:	6e61006c 	cdpvs	0, 6, cr0, cr1, cr12, {3}
     6b8:	5f656c67 	svcpl	0x00656c67
     6bc:	6d726f6e 	ldclvs	15, cr6, [r2, #-440]!	; 0xfffffe48
     6c0:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
     6c4:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     6c8:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     6cc:	5f747075 	svcpl	0x00747075
     6d0:	00736d31 	rsbseq	r6, r3, r1, lsr sp
     6d4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     6d8:	5f6b6369 	svcpl	0x006b6369
     6dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6e0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     6e4:	6f697461 	svcvs	0x00697461
     6e8:	4f50006e 	svcmi	0x0050006e
     6ec:	74005452 	strvc	r5, [r0], #-1106	; 0x452
     6f0:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
     6f4:	007a7a75 	rsbseq	r7, sl, r5, ror sl
     6f8:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
     6fc:	5f6f745f 	svcpl	0x006f745f
     700:	69707075 	ldmdbvs	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}^
     704:	6700676e 	strvs	r6, [r0, -lr, ror #14]
     708:	78527062 	ldmdavc	r2, {r1, r5, r6, ip, sp, lr}^
     70c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     710:	70757272 	rsbsvc	r7, r5, r2, ror r2
     714:	66754274 			; <UNDEFINED> instruction: 0x66754274
     718:	00726566 	rsbseq	r6, r2, r6, ror #10
     71c:	5f434352 	svcpl	0x00434352
     720:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     724:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     728:	6f697461 	svcvs	0x00697461
     72c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     730:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     734:	6c64494e 	stclvs	9, cr4, [r4], #-312	; 0xfffffec8
     738:	61745365 	cmnvs	r4, r5, ror #6
     73c:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
     740:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     744:	5f676e69 	svcpl	0x00676e69
     748:	6c5f6f74 	mrrcvs	15, 7, r6, pc, cr4	; <UNPREDICTABLE>
     74c:	5400776f 	strpl	r7, [r0], #-1903	; 0x76f
     750:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 758 <__Stack_Size+0x358>
     754:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
     758:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     75c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     760:	4f495047 	svcmi	0x00495047
     764:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     768:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     76c:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     770:	77006572 	smlsdxvc	r0, r2, r5, r6
     774:	73657250 	cmnvc	r5, #80, 4
     778:	50746e65 	rsbspl	r6, r4, r5, ror #28
     77c:	6c00736f 	stcvs	3, cr7, [r0], {111}	; 0x6f
     780:	69746669 	ldmdbvs	r4!, {r0, r3, r5, r6, r9, sl, sp, lr}^
     784:	6900676e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     788:	006f666e 	rsbeq	r6, pc, lr, ror #12
     78c:	5f434352 	svcpl	0x00434352
     790:	4b4c4348 	blmi	13114b8 <__Stack_Size+0x13110b8>
     794:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     798:	64006769 	strvs	r6, [r0], #-1897	; 0x769
     79c:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
     7a0:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
     7a4:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     7a8:	54620074 	strbtpl	r0, [r2], #-116	; 0x74
     7ac:	00706d65 	rsbseq	r6, r0, r5, ror #26
     7b0:	4349564e 	movtmi	r5, #38478	; 0x964e
     7b4:	5152495f 	cmppl	r2, pc, asr r9
     7b8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     7bc:	006c656e 	rsbeq	r6, ip, lr, ror #10
     7c0:	5f4d4954 	svcpl	0x004d4954
     7c4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     7c8:	5200646f 	andpl	r6, r0, #1862270976	; 0x6f000000
     7cc:	505f4343 	subspl	r4, pc, r3, asr #6
     7d0:	314b4c43 	cmpcc	fp, r3, asr #24
     7d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     7d8:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
     7dc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     7e0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     7e4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     7e8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     7ec:	73007375 	movwvc	r7, #885	; 0x375
     7f0:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
     7f4:	00656c67 	rsbeq	r6, r5, r7, ror #24
     7f8:	4349564e 	movtmi	r5, #38478	; 0x964e
     7fc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     800:	50470074 	subpl	r0, r7, r4, ror r0
     804:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 6e8 <__Stack_Size+0x2e8>
     808:	5f65646f 	svcpl	0x0065646f
     80c:	4f5f4641 	svcmi	0x005f4641
     810:	69540044 	ldmdbvs	r4, {r2, r6}^
     814:	5f72656d 	svcpl	0x0072656d
     818:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     81c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     820:	6f697461 	svcvs	0x00697461
     824:	5047006e 	subpl	r0, r7, lr, rrx
     828:	525f4f49 	subspl	r4, pc, #292	; 0x124
     82c:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     830:	73746942 	cmnvc	r4, #1081344	; 0x108000
     834:	414c4600 	cmpmi	ip, r0, lsl #12
     838:	535f4853 	cmppl	pc, #5439488	; 0x530000
     83c:	614c7465 	cmpvs	ip, r5, ror #8
     840:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
     844:	78540079 	ldmdavc	r4, {r0, r3, r4, r5, r6}^
     848:	74794244 	ldrbtvc	r4, [r9], #-580	; 0x244
     84c:	00363165 	eorseq	r3, r6, r5, ror #2
     850:	20554e47 	subscs	r4, r5, r7, asr #28
     854:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     858:	20332e39 	eorscs	r2, r3, r9, lsr lr
     85c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     860:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
     864:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     868:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     86c:	5b202965 	blpl	80ae08 <__Stack_Size+0x80aa08>
     870:	2f4d5241 	svccs	0x004d5241
     874:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     878:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     87c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     880:	6172622d 	cmnvs	r2, sp, lsr #4
     884:	2068636e 	rsbcs	r6, r8, lr, ror #6
     888:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     88c:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     890:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
     894:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
     898:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     89c:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     8a0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     8a4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     8a8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     8ac:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     8b0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     8b4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
     8b8:	6f6e662d 	svcvs	0x006e662d
     8bc:	6d6f632d 	stclvs	3, cr6, [pc, #-180]!	; 810 <__Stack_Size+0x410>
     8c0:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     8c4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     8c8:	5f6b6369 	svcpl	0x006b6369
     8cc:	6f435449 	svcvs	0x00435449
     8d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8d4:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     8d8:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     8dc:	696c0064 	stmdbvs	ip!, {r2, r5, r6}^
     8e0:	4f746867 	svcmi	0x00746867
     8e4:	6e61006e 	cdpvs	0, 6, cr0, cr1, cr14, {3}
     8e8:	00656c67 	rsbeq	r6, r5, r7, ror #24
     8ec:	5f434352 	svcpl	0x00434352
     8f0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     8f4:	5367616c 	cmnpl	r7, #108, 2
     8f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     8fc:	50470073 	subpl	r0, r7, r3, ror r0
     900:	70534f49 	subsvc	r4, r3, r9, asr #30
     904:	5f646565 	svcpl	0x00646565
     908:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     90c:	00666544 	rsbeq	r6, r6, r4, asr #10
     910:	5f4d4954 	svcpl	0x004d4954
     914:	6f4d434f 	svcvs	0x004d434f
     918:	47006564 	strmi	r6, [r0, -r4, ror #10]
     91c:	5f4f4950 	svcpl	0x004f4950
     920:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     924:	4e49415f 	mcrmi	1, 2, r4, cr9, cr15, {2}
     928:	414c4600 	cmpmi	ip, r0, lsl #12
     92c:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
     930:	65666572 	strbvs	r6, [r6, #-1394]!	; 0x572
     934:	42686374 	rsbmi	r6, r8, #116, 6	; 0xd0000001
     938:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     93c:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
     940:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
     944:	6f665f65 	svcvs	0x00665f65
     948:	72617772 	rsbvc	r7, r1, #29884416	; 0x1c80000
     94c:	45520064 	ldrbmi	r0, [r2, #-100]	; 0x64
     950:	56524553 			; <UNDEFINED> instruction: 0x56524553
     954:	00304445 	eorseq	r4, r0, r5, asr #8
     958:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     95c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     960:	45520031 	ldrbmi	r0, [r2, #-49]	; 0x31
     964:	56524553 			; <UNDEFINED> instruction: 0x56524553
     968:	00324445 	eorseq	r4, r2, r5, asr #8
     96c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     970:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     974:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     978:	56524553 			; <UNDEFINED> instruction: 0x56524553
     97c:	00344445 	eorseq	r4, r4, r5, asr #8
     980:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     984:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     988:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     98c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     990:	00364445 	eorseq	r4, r6, r5, asr #8
     994:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     998:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     99c:	45520074 	ldrbmi	r0, [r2, #-116]	; 0x74
     9a0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     9a4:	00384445 	eorseq	r4, r8, r5, asr #8
     9a8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     9ac:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     9b0:	69720039 	ldmdbvs	r2!, {r0, r3, r4, r5}^
     9b4:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
     9b8:	6172666e 	cmnvs	r2, lr, ror #12
     9bc:	00646552 	rsbeq	r6, r4, r2, asr r5
     9c0:	4f495047 	svcmi	0x00495047
     9c4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 9cc <__Stack_Size+0x5cc>
     9c8:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     9cc:	0050505f 	subseq	r5, r0, pc, asr r0
     9d0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     9d4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     9d8:	414d4400 	cmpmi	sp, r0, lsl #8
     9dc:	50470052 	subpl	r0, r7, r2, asr r0
     9e0:	535f4f49 	cmppl	pc, #292	; 0x124
     9e4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     9e8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     9ec:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
     9f0:	32636973 	rsbcc	r6, r3, #1884160	; 0x1cc000
     9f4:	65684300 	strbvs	r4, [r8, #-768]!	; 0x300
     9f8:	69546b63 	ldmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     9fc:	754f656d 	strbvc	r6, [pc, #-1389]	; 497 <__Stack_Size+0x97>
     a00:	78520074 	ldmdavc	r2, {r2, r4, r5, r6}^
     a04:	74794244 	ldrbtvc	r4, [r9], #-580	; 0x244
     a08:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a0c:	6944004c 	stmdbvs	r4, {r2, r3, r6}^
     a10:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     a14:	41535565 	cmpmi	r3, r5, ror #10
     a18:	00315452 	eorseq	r5, r1, r2, asr r4
     a1c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     a20:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
     a24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a28:	74006769 	strvc	r6, [r0], #-1897	; 0x769
     a2c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
     a30:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
     a34:	72666e49 	rsbvc	r6, r6, #1168	; 0x490
     a38:	64657261 	strbtvs	r7, [r5], #-609	; 0x261
     a3c:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     a40:	754c6b63 	strbvc	r6, [ip, #-2915]	; 0xb63
     a44:	6f6e696d 	svcvs	0x006e696d
     a48:	79746973 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     a4c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a50:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     a54:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a58:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     a5c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     a60:	6f435f6b 	svcvs	0x00435f6b
     a64:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     a68:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
     a6c:	61745300 	cmnvs	r4, r0, lsl #6
     a70:	69447472 	stmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
     a74:	756f6373 	strbvc	r6, [pc, #-883]!	; 709 <__Stack_Size+0x309>
     a78:	6f00746e 	svcvs	0x0000746e
     a7c:	70537475 	subsvc	r7, r3, r5, ror r4
     a80:	00646565 	rsbeq	r6, r4, r5, ror #10
     a84:	4f495047 	svcmi	0x00495047
     a88:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a8c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a90:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
     a94:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a98:	6172666e 	cmnvs	r2, lr, ror #12
     a9c:	00646552 	rsbeq	r6, r4, r2, asr r5
     aa0:	4f495047 	svcmi	0x00495047
     aa4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     aa8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     aac:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     ab0:	746f6e00 	strbtvc	r6, [pc], #-3584	; ab8 <__Stack_Size+0x6b8>
     ab4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     ab8:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffffb73 <SCS_BASE+0x1fff1b73>
     abc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     ac0:	6174534e 	cmnvs	r4, lr, asr #6
     ac4:	52006574 	andpl	r6, r0, #116, 10	; 0x1d000000
     ac8:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     acc:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     ad0:	4b4c4353 	blmi	1311824 <__Stack_Size+0x1311424>
     ad4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     ad8:	6d006563 	cfstr32vs	mvfx6, [r0, #-396]	; 0xfffffe74
     adc:	006e6961 	rsbeq	r6, lr, r1, ror #18
     ae0:	42414e45 	submi	r4, r1, #1104	; 0x450
     ae4:	5400454c 	strpl	r4, [r0], #-1356	; 0x54c
     ae8:	545f4d49 	ldrbpl	r4, [pc], #-3401	; af0 <__Stack_Size+0x6f0>
     aec:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
     af0:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
     af4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     af8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     afc:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
     b00:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     b04:	6c006570 	cfstr32vs	mvfx6, [r0], {112}	; 0x70
     b08:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     b0c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     b10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     b14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     b18:	72687400 	rsbvc	r7, r8, #0, 8
     b1c:	6f687365 	svcvs	0x00687365
     b20:	694c646c 	stmdbvs	ip, {r2, r3, r5, r6, sl, sp, lr}^
     b24:	00746867 	rsbseq	r6, r4, r7, ror #16
     b28:	5f4d4954 	svcpl	0x004d4954
     b2c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     b30:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
     b34:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     b38:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     b3c:	564e0065 	strbpl	r0, [lr], -r5, rrx
     b40:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     b44:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0x465
     b48:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
     b4c:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     b50:	50470065 	subpl	r0, r7, r5, rrx
     b54:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     b58:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     b5c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     b60:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     b64:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     b68:	2064656e 	rsbcs	r6, r4, lr, ror #10
     b6c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     b70:	6d546200 	lfmvs	f6, 2, [r4, #-0]
     b74:	49540070 	ldmdbmi	r4, {r4, r5, r6}^
     b78:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xf4d
     b7c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     b80:	726f6e00 	rsbvc	r6, pc, #0, 28
     b84:	546c616d 	strbtpl	r6, [ip], #-365	; 0x16d
     b88:	006e7275 	rsbeq	r7, lr, r5, ror r2
     b8c:	4f495047 	svcmi	0x00495047
     b90:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     b94:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 737 <__Stack_Size+0x337>
     b98:	7a484d30 	bvc	1214060 <__Stack_Size+0x1213c60>
     b9c:	41535500 	cmpmi	r3, r0, lsl #10
     ba0:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     ba4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ba8:	61727567 	cmnvs	r2, r7, ror #10
     bac:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     bb0:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     bb4:	6165725f 	cmnvs	r5, pc, asr r2
     bb8:	79625f64 	stmdbvc	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     bbc:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
     bc0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     bc4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     bc8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     bcc:	4349564e 	movtmi	r5, #38478	; 0x964e
     bd0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     bd4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     bd8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     bdc:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     be0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     be4:	31444556 	cmpcc	r4, r6, asr r5
     be8:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     bec:	56524553 			; <UNDEFINED> instruction: 0x56524553
     bf0:	31314445 	teqcc	r1, r5, asr #8
     bf4:	53455200 	movtpl	r5, #20992	; 0x5200
     bf8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     bfc:	00323144 	eorseq	r3, r2, r4, asr #2
     c00:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c04:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c08:	52003331 	andpl	r3, r0, #-1006632960	; 0xc4000000
     c0c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c10:	31444556 	cmpcc	r4, r6, asr r5
     c14:	45520034 	ldrbmi	r0, [r2, #-52]	; 0x34
     c18:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c1c:	35314445 	ldrcc	r4, [r1, #-1093]!	; 0x445
     c20:	53455200 	movtpl	r5, #20992	; 0x5200
     c24:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c28:	00363144 	eorseq	r3, r6, r4, asr #2
     c2c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c30:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c34:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
     c38:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c3c:	31444556 	cmpcc	r4, r6, asr r5
     c40:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
     c44:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c48:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
     c4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c50:	6f435f4f 	svcvs	0x00435f4f
     c54:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c58:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     c5c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     c60:	5f6c7864 	svcpl	0x006c7864
     c64:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     c68:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     c6c:	53550064 	cmppl	r5, #100	; 0x64
     c70:	5f545241 	svcpl	0x00545241
     c74:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     c78:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     c7c:	00666544 	rsbeq	r6, r6, r4, asr #10
     c80:	4349564e 	movtmi	r5, #38478	; 0x964e
     c84:	5152495f 	cmppl	r2, pc, asr r9
     c88:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     c8c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     c90:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     c94:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c98:	55007974 	strpl	r7, [r0, #-2420]	; 0x974
     c9c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ca0:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     ca4:	00797469 	rsbseq	r7, r9, r9, ror #8
     ca8:	53495f5f 	movtpl	r5, #40799	; 0x9f5f
     cac:	45445f52 	strbmi	r5, [r4, #-3922]	; 0xf52
     cb0:	0059414c 	subseq	r4, r9, ip, asr #2
     cb4:	5f434352 	svcpl	0x00434352
     cb8:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     cbc:	5400646d 	strpl	r6, [r0], #-1133	; 0x46d
     cc0:	4f5f4d49 	svcmi	0x005f4d49
     cc4:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
     cc8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     ccc:	0074696e 	rsbseq	r6, r4, lr, ror #18
     cd0:	5f4d4954 	svcpl	0x004d4954
     cd4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     cd8:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
     cdc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     ce0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     ce4:	00666544 	rsbeq	r6, r6, r4, asr #10
     ce8:	4349564e 	movtmi	r5, #38478	; 0x964e
     cec:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     cf0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     cf4:	6f724779 	svcvs	0x00724779
     cf8:	6f437075 	svcvs	0x00437075
     cfc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     d00:	52626700 	rsbpl	r6, r2, #0, 14
     d04:	66754278 			; <UNDEFINED> instruction: 0x66754278
     d08:	52726566 	rsbspl	r6, r2, #427819008	; 0x19800000
     d0c:	50646165 	rsbpl	r6, r4, r5, ror #2
     d10:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     d14:	54007265 	strpl	r7, [r0], #-613	; 0x265
     d18:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
     d1c:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
     d20:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     d24:	73007375 	movwvc	r7, #885	; 0x375
     d28:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     d2c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     d30:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     d34:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     d38:	6f6e0074 	svcvs	0x006e0074
     d3c:	75426574 	strbvc	r6, [r2, #-1396]	; 0x574
     d40:	54007a7a 	strpl	r7, [r0], #-2682	; 0xa7a
     d44:	535f4d49 	cmppl	pc, #4672	; 0x1240
     d48:	6f437465 	svcvs	0x00437465
     d4c:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
     d50:	69003165 	stmdbvs	r0, {r0, r2, r5, r6, r8, ip, sp}
     d54:	5f74696e 	svcpl	0x0074696e
     d58:	6c676e41 	stclvs	14, cr6, [r7], #-260	; 0xfffffefc
     d5c:	69003165 	stmdbvs	r0, {r0, r2, r5, r6, r8, ip, sp}
     d60:	5f74696e 	svcpl	0x0074696e
     d64:	6c676e41 	stclvs	14, cr6, [r7], #-260	; 0xfffffefc
     d68:	47003265 	strmi	r3, [r0, -r5, ror #4]
     d6c:	506c616f 	rsbpl	r6, ip, pc, ror #2
     d70:	5400736f 	strpl	r7, [r0], #-879	; 0x36f
     d74:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     d78:	6700646d 	strvs	r6, [r0, -sp, ror #8]
     d7c:	70537465 	subsvc	r7, r3, r5, ror #8
     d80:	00646565 	rsbeq	r6, r4, r5, ror #10
     d84:	4349564e 	movtmi	r5, #38478	; 0x964e
     d88:	5152495f 	cmppl	r2, pc, asr r9
     d8c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     d90:	506c656e 	rsbpl	r6, ip, lr, ror #10
     d94:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     d98:	6f697470 	svcvs	0x00697470
     d9c:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     da0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     da4:	78640079 	stmdavc	r4!, {r0, r3, r4, r5, r6}^
     da8:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
     dac:	61697469 	cmnvs	r9, r9, ror #8
     db0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
     db4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     db8:	6f4d5f4f 	svcvs	0x004d5f4f
     dbc:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     dc0:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
     dc4:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
     dc8:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
     dcc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     dd0:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
     dd4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     dd8:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
     ddc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     de0:	6f437265 	svcvs	0x00437265
     de4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     de8:	69546e00 	ldmdbvs	r4, {r9, sl, fp, sp, lr}^
     dec:	5000656d 	andpl	r6, r0, sp, ror #10
     df0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     df4:	6f727245 	svcvs	0x00727245
     df8:	646f4372 	strbtvs	r4, [pc], #-882	; e00 <__Stack_Size+0xa00>
     dfc:	53480065 	movtpl	r0, #32869	; 0x8065
     e00:	61745345 	cmnvs	r4, r5, asr #6
     e04:	70557472 	subsvc	r7, r5, r2, ror r4
     e08:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e0c:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
     e10:	00524b43 	subseq	r4, r2, r3, asr #22
     e14:	5f6c7864 	svcpl	0x006c7864
     e18:	5f746567 	svcpl	0x00746567
     e1c:	61707872 	cmnvs	r0, r2, ror r8
     e20:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
     e24:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     e28:	4200726f 	andmi	r7, r0, #-268435450	; 0xf0000006
     e2c:	61467375 	hvcvs	26421	; 0x6735
     e30:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     e34:	70656378 	rsbvc	r6, r5, r8, ror r3
     e38:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e3c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     e40:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     e44:	61485152 	cmpvs	r8, r2, asr r1
     e48:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e4c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     e50:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     e54:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     e58:	61485152 	cmpvs	r8, r2, asr r1
     e5c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e60:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     e64:	5f304954 	svcpl	0x00304954
     e68:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     e6c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     e70:	50007265 	andpl	r7, r0, r5, ror #4
     e74:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     e78:	61485152 	cmpvs	r8, r2, asr r1
     e7c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e80:	61480072 	hvcvs	32770	; 0x8002
     e84:	61466472 	hvcvs	26178	; 0x6642
     e88:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     e8c:	70656378 	rsbvc	r6, r5, r8, ror r3
     e90:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e94:	43444100 	movtmi	r4, #16640	; 0x4100
     e98:	5f325f31 	svcpl	0x00325f31
     e9c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ea0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ea4:	54007265 	strpl	r7, [r0], #-613	; 0x265
     ea8:	45504d41 	ldrbmi	r4, [r0, #-3393]	; 0xd41
     eac:	52495f52 	subpl	r5, r9, #328	; 0x148
     eb0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     eb4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     eb8:	43435200 	movtmi	r5, #12800	; 0x3200
     ebc:	5152495f 	cmppl	r2, pc, asr r9
     ec0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ec4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ec8:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     ecc:	5152495f 	cmppl	r2, pc, asr r9
     ed0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ed4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ed8:	5f4e4143 	svcpl	0x004e4143
     edc:	5f315852 	svcpl	0x00315852
     ee0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ee4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ee8:	44007265 	strmi	r7, [r0], #-613	; 0x265
     eec:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     ef0:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     ef4:	00726f74 	rsbseq	r6, r2, r4, ror pc
     ef8:	31414d44 	cmpcc	r1, r4, asr #26
     efc:	6168435f 	cmnvs	r8, pc, asr r3
     f00:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     f04:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f08:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f0c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f10:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     f14:	50555f31 	subspl	r5, r5, r1, lsr pc
     f18:	5152495f 	cmppl	r2, pc, asr r9
     f1c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     f20:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f24:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     f28:	5f50555f 	svcpl	0x0050555f
     f2c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     f30:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     f34:	54007265 	strpl	r7, [r0], #-613	; 0x265
     f38:	5f314d49 	svcpl	0x00314d49
     f3c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f40:	61485152 	cmpvs	r8, r2, asr r1
     f44:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f48:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f4c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     f50:	52495f43 	subpl	r5, r9, #268	; 0x10c
     f54:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f58:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f5c:	414d4400 	cmpmi	sp, r0, lsl #8
     f60:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f64:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     f68:	495f326c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     f6c:	61485152 	cmpvs	r8, r2, asr r1
     f70:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f74:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f78:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     f7c:	61485152 	cmpvs	r8, r2, asr r1
     f80:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f84:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     f88:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0x954
     f8c:	5f30315f 	svcpl	0x0030315f
     f90:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     f94:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     f98:	44007265 	strmi	r7, [r0], #-613	; 0x265
     f9c:	5f31414d 	svcpl	0x0031414d
     fa0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     fa4:	316c656e 	cmncc	ip, lr, ror #10
     fa8:	5152495f 	cmppl	r2, pc, asr r9
     fac:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     fb0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     fb4:	48435653 	stmdami	r3, {r0, r1, r4, r6, r9, sl, ip, lr}^
     fb8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fbc:	55007265 	strpl	r7, [r0, #-613]	; 0x265
     fc0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     fc4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     fc8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     fcc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     fd0:	43545200 	cmpmi	r4, #0, 4
     fd4:	5152495f 	cmppl	r2, pc, asr r9
     fd8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     fdc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     fe0:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
     fe4:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     fe8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     fec:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     ff0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     ff4:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     ff8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     ffc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1000:	414d4400 	cmpmi	sp, r0, lsl #8
    1004:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1008:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    100c:	355f346c 	ldrbcc	r3, [pc, #-1132]	; ba8 <__Stack_Size+0x7a8>
    1010:	5152495f 	cmppl	r2, pc, asr r9
    1014:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1018:	0072656c 	rsbseq	r6, r2, ip, ror #10
    101c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    1020:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    1024:	63784565 	cmnvs	r8, #423624704	; 0x19400000
    1028:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    102c:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
    1030:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
    1034:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
    1038:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    103c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1040:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    1044:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1048:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    104c:	414d4400 	cmpmi	sp, r0, lsl #8
    1050:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1054:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1058:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    105c:	61485152 	cmpvs	r8, r2, asr r1
    1060:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1064:	53550072 	cmppl	r5, #114	; 0x72
    1068:	6b615742 	blvs	1856d78 <__Stack_Size+0x1856978>
    106c:	5f705565 	svcpl	0x00705565
    1070:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1074:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1078:	53007265 	movwpl	r7, #613	; 0x265
    107c:	5f4f4944 	svcpl	0x004f4944
    1080:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1084:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1088:	46007265 	strmi	r7, [r0], -r5, ror #4
    108c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1090:	5152495f 	cmppl	r2, pc, asr r9
    1094:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1098:	0072656c 	rsbseq	r6, r2, ip, ror #10
    109c:	67617355 			; <UNDEFINED> instruction: 0x67617355
    10a0:	75614665 	strbvc	r4, [r1, #-1637]!	; 0x665
    10a4:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
    10a8:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
    10ac:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    10b0:	31433249 	cmpcc	r3, r9, asr #4
    10b4:	5f56455f 	svcpl	0x0056455f
    10b8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10bc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10c0:	54007265 	strpl	r7, [r0], #-613	; 0x265
    10c4:	5f384d49 	svcpl	0x00384d49
    10c8:	5f475254 	svcpl	0x00475254
    10cc:	5f4d4f43 	svcpl	0x004d4f43
    10d0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10d4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10d8:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    10dc:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
    10e0:	5f6d7261 	svcpl	0x006d7261
    10e4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10e8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10ec:	44007265 	strmi	r7, [r0], #-613	; 0x265
    10f0:	5f31414d 	svcpl	0x0031414d
    10f4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    10f8:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
    10fc:	5152495f 	cmppl	r2, pc, asr r9
    1100:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1104:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1108:	33495053 	movtcc	r5, #36947	; 0x9053
    110c:	5152495f 	cmppl	r2, pc, asr r9
    1110:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1114:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1118:	334d4954 	movtcc	r4, #55636	; 0xd954
    111c:	5152495f 	cmppl	r2, pc, asr r9
    1120:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1124:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1128:	5f4e4143 	svcpl	0x004e4143
    112c:	5f454353 	svcpl	0x00454353
    1130:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1134:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1138:	44007265 	strmi	r7, [r0], #-613	; 0x265
    113c:	5f31414d 	svcpl	0x0031414d
    1140:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1144:	346c656e 	strbtcc	r6, [ip], #-1390	; 0x56e
    1148:	5152495f 	cmppl	r2, pc, asr r9
    114c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1150:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1154:	434d5346 	movtmi	r5, #54086	; 0xd346
    1158:	5152495f 	cmppl	r2, pc, asr r9
    115c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1160:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1164:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1168:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    116c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1170:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1174:	43444100 	movtmi	r4, #16640	; 0x4100
    1178:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    117c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1180:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1184:	43324900 	teqmi	r2, #0, 18
    1188:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
    118c:	5152495f 	cmppl	r2, pc, asr r9
    1190:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1194:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1198:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    119c:	5f52455f 	svcpl	0x0052455f
    11a0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11a4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11a8:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    11ac:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11b0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    11b4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    11b8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    11bc:	42535500 	subsmi	r5, r3, #0, 10
    11c0:	5f504c5f 	svcpl	0x00504c5f
    11c4:	5f4e4143 	svcpl	0x004e4143
    11c8:	5f305852 	svcpl	0x00305852
    11cc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11d0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11d4:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    11d8:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^	; <UNPREDICTABLE>
    11dc:	41435f50 	cmpmi	r3, r0, asr pc
    11e0:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    11e4:	5152495f 	cmppl	r2, pc, asr r9
    11e8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11f0:	31433249 	cmpcc	r3, r9, asr #4
    11f4:	5f52455f 	svcpl	0x0052455f
    11f8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11fc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1200:	53007265 	movwpl	r7, #613	; 0x265
    1204:	5f314950 	svcpl	0x00314950
    1208:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    120c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1210:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1214:	5f384d49 	svcpl	0x00384d49
    1218:	5f4b5242 	svcpl	0x004b5242
    121c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1220:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1224:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1228:	5f31414d 	svcpl	0x0031414d
    122c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1230:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
    1234:	5152495f 	cmppl	r2, pc, asr r9
    1238:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    123c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1240:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1244:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1248:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    124c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1250:	41535500 	cmpmi	r3, r0, lsl #10
    1254:	5f325452 	svcpl	0x00325452
    1258:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    125c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1260:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1264:	5f344d49 	svcpl	0x00344d49
    1268:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    126c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1270:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1274:	5f314d49 	svcpl	0x00314d49
    1278:	5f475254 	svcpl	0x00475254
    127c:	5f4d4f43 	svcpl	0x004d4f43
    1280:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1284:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1288:	44007265 	strmi	r7, [r0], #-613	; 0x265
    128c:	5f32414d 	svcpl	0x0032414d
    1290:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1294:	316c656e 	cmncc	ip, lr, ror #10
    1298:	5152495f 	cmppl	r2, pc, asr r9
    129c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12a4:	374d4954 	smlsldcc	r4, sp, r4, r9
    12a8:	5152495f 	cmppl	r2, pc, asr r9
    12ac:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12b4:	47445757 	smlsldmi	r5, r4, r7, r7
    12b8:	5152495f 	cmppl	r2, pc, asr r9
    12bc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12c4:	32495053 	subcc	r5, r9, #83	; 0x53
    12c8:	5152495f 	cmppl	r2, pc, asr r9
    12cc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12d4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    12d8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    12dc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    12e0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    12e4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    12e8:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 9a7 <__Stack_Size+0x5a7>
    12ec:	5152495f 	cmppl	r2, pc, asr r9
    12f0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12f8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    12fc:	00435653 	subeq	r5, r3, r3, asr r6
    1300:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    1304:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    1308:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    130c:	41007265 	tstmi	r0, r5, ror #4
    1310:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
    1314:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1318:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    131c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1320:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
    1324:	4d440063 	stclmi	0, cr0, [r4, #-396]	; 0xfffffe74
    1328:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    132c:	6e6e6168 	powvsez	f6, f6, #0.0
    1330:	5f376c65 	svcpl	0x00376c65
    1334:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1338:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    133c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1340:	5f31414d 	svcpl	0x0031414d
    1344:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1348:	356c656e 	strbcc	r6, [ip, #-1390]!	; 0x56e
    134c:	5152495f 	cmppl	r2, pc, asr r9
    1350:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1354:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1358:	5f6c7864 	svcpl	0x006c7864
    135c:	5f6c6168 	svcpl	0x006c6168
    1360:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1364:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1368:	49766564 	ldmdbmi	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    136c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1370:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1374:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    1378:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    137c:	70007261 	andvc	r7, r0, r1, ror #4
    1380:	6b636150 	blvs	18d98c8 <__Stack_Size+0x18d94c8>
    1384:	64007465 	strvs	r7, [r0], #-1125	; 0x465
    1388:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    138c:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1390:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1398 <__Stack_Size+0xf98>
    1394:	6f656d69 	svcvs	0x00656d69
    1398:	41007475 	tstmi	r0, r5, ror r4
    139c:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
    13a0:	642f6372 	strtvs	r6, [pc], #-882	; 13a8 <__Stack_Size+0xfa8>
    13a4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    13a8:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    13ac:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    13b0:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    13b4:	6f6c635f 	svcvs	0x006c635f
    13b8:	64006573 	strvs	r6, [r0], #-1395	; 0x573
    13bc:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    13c0:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    13c4:	78640078 	stmdavc	r4!, {r3, r4, r5, r6}^
    13c8:	61685f6c 	cmnvs	r8, ip, ror #30
    13cc:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    13d0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    13d4:	6b636150 	blvs	18d991c <__Stack_Size+0x18d951c>
    13d8:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    13dc:	63526d75 	cmpvs	r2, #7488	; 0x1d40
    13e0:	74794276 	ldrbtvc	r4, [r9], #-630	; 0x276
    13e4:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    13e8:	61685f6c 	cmnvs	r8, ip, ror #30
    13ec:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    13f0:	67006e65 	strvs	r6, [r0, -r5, ror #28]
    13f4:	50785262 	rsbspl	r5, r8, r2, ror #4
    13f8:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    13fc:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1400:	00687467 	rsbeq	r7, r8, r7, ror #8
    1404:	5f6c7864 	svcpl	0x006c7864
    1408:	705f7874 	subsvc	r7, pc, r4, ror r8	; <UNPREDICTABLE>
    140c:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1410:	526e0074 	rsbpl	r0, lr, #116	; 0x74
    1414:	00646165 	rsbeq	r6, r4, r5, ror #2
    1418:	5f6c7864 	svcpl	0x006c7864
    141c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    1420:	43626700 	cmnmi	r2, #0, 14
    1424:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
    1428:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    142c:	78640073 	stmdavc	r4!, {r0, r1, r4, r5, r6}^
    1430:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1434:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1438:	6b636170 	blvs	18d9a00 <__Stack_Size+0x18d9600>
    143c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    1440:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1444:	78640068 	stmdavc	r4!, {r3, r5, r6}^
    1448:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    144c:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1450:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
    1454:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    1458:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    145c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1464 <__Stack_Size+0x1064>
    1460:	63617078 	cmnvs	r1, #120	; 0x78
    1464:	5f74656b 	svcpl	0x0074656b
    1468:	61726170 	cmnvs	r2, r0, ror r1
    146c:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0x56d
    1470:	78640072 	stmdavc	r4!, {r1, r4, r5, r6}^
    1474:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1478:	6f6c5f74 	svcvs	0x006c5f74
    147c:	74796277 	ldrbtvc	r6, [r9], #-631	; 0x277
    1480:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    1484:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1488:	6361705f 	cmnvs	r1, #95	; 0x5f
    148c:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1490:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1494:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
    1498:	50504100 	subspl	r4, r0, r0, lsl #2
    149c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    14a0:	6e79642f 	cdpvs	4, 7, cr6, cr9, cr15, {1}
    14a4:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    14a8:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
    14ac:	61655200 	cmnvs	r5, r0, lsl #4
    14b0:	4e78546c 	cdpmi	4, 7, cr5, cr8, cr12, {3}
    14b4:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    14b8:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    14bc:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    14c0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 14c8 <__Stack_Size+0x10c8>
    14c4:	63617078 	cmnvs	r1, #120	; 0x78
    14c8:	5f74656b 	svcpl	0x0074656b
    14cc:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    14d0:	74006874 	strvc	r6, [r0], #-2164	; 0x874
    14d4:	00706d65 	rsbseq	r6, r0, r5, ror #26
    14d8:	5f6c7864 	svcpl	0x006c7864
    14dc:	5f746573 	svcpl	0x00746573
    14e0:	61707874 	cmnvs	r0, r4, ror r8
    14e4:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    14e8:	0064695f 	rsbeq	r6, r4, pc, asr r9
    14ec:	74536267 	ldrbvc	r6, [r3], #-615	; 0x267
    14f0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    14f4:	6b636150 	blvs	18d9a3c <__Stack_Size+0x18d963c>
    14f8:	76007465 	strvc	r7, [r0], -r5, ror #8
    14fc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1500:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1504:	7278745f 	rsbsvc	r7, r8, #1593835520	; 0x5f000000
    1508:	61705f78 	cmnvs	r0, r8, ror pc
    150c:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1510:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1514:	6b616d5f 	blvs	185ca98 <__Stack_Size+0x185c698>
    1518:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
    151c:	78640064 	stmdavc	r4!, {r2, r5, r6}^
    1520:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1524:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1528:	6b636170 	blvs	18d9af0 <__Stack_Size+0x18d96f0>
    152c:	705f7465 	subsvc	r7, pc, r5, ror #8
    1530:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1534:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1538:	52626700 	rsbpl	r6, r2, #0, 14
    153c:	74654778 	strbtvc	r4, [r5], #-1912	; 0x778
    1540:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1544:	64006874 	strvs	r6, [r0], #-2164	; 0x874
    1548:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    154c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1554 <__Stack_Size+0x1154>
    1550:	63617078 	cmnvs	r1, #120	; 0x78
    1554:	5f74656b 	svcpl	0x0074656b
    1558:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xe69
    155c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1560:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1564:	62727265 	rsbsvs	r7, r2, #1342177286	; 0x50000006
    1568:	67007469 	strvs	r7, [r0, -r9, ror #8]
    156c:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    1570:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
    1574:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    1578:	00786564 	rsbseq	r6, r8, r4, ror #10
    157c:	6e496267 	cdpvs	2, 4, cr6, cr9, cr7, {3}
    1580:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    1584:	6f697463 	svcvs	0x00697463
    1588:	6361506e 	cmnvs	r1, #110	; 0x6e
    158c:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1590:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    1594:	006d756e 	rsbeq	r7, sp, lr, ror #10
    1598:	5f6c7864 	svcpl	0x006c7864
    159c:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    15a0:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xe69
    15a4:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    15a8:	5f485341 	svcpl	0x00485341
    15ac:	6f435449 	svcvs	0x00435449
    15b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15b4:	50525700 	subspl	r5, r2, r0, lsl #14
    15b8:	61445f32 	cmpvs	r4, r2, lsr pc
    15bc:	4f006174 	svcmi	0x00006174
    15c0:	54535f42 	ldrbpl	r5, [r3], #-3906	; 0xf42
    15c4:	4600504f 	strmi	r5, [r0], -pc, asr #32
    15c8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    15cc:	6172455f 	cmnvs	r2, pc, asr r5
    15d0:	704f6573 	subvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    15d4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    15d8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    15dc:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0x73
    15e0:	756f6461 	strbvc	r6, [pc, #-1121]!	; 1187 <__Stack_Size+0xd87>
    15e4:	61747374 	cmnvs	r4, r4, ror r3
    15e8:	00737574 	rsbseq	r7, r3, r4, ror r5
    15ec:	53414c46 	movtpl	r4, #7238	; 0x1c46
    15f0:	52455f48 	subpl	r5, r5, #72, 30	; 0x120
    15f4:	5f524f52 	svcpl	0x00524f52
    15f8:	00505257 	subseq	r5, r0, r7, asr r2
    15fc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1600:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    1604:	50657361 	rsbpl	r7, r5, r1, ror #6
    1608:	00656761 	rsbeq	r6, r5, r1, ror #14
    160c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1610:	614c5f48 	cmpvs	ip, r8, asr #30
    1614:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    1618:	4c460079 	mcrrmi	0, 7, r0, r6, cr9
    161c:	5f485341 	svcpl	0x00485341
    1620:	50746547 	rsbspl	r6, r4, r7, asr #10
    1624:	65666572 	strbvs	r6, [r6, #-1394]!	; 0x572
    1628:	42686374 	rsbmi	r6, r8, #116, 6	; 0xd0000001
    162c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1630:	61745372 	cmnvs	r4, r2, ror r3
    1634:	00737574 	rsbseq	r7, r3, r4, ror r5
    1638:	616c6564 	cmnvs	ip, r4, ror #10
    163c:	52570079 	subspl	r0, r7, #121	; 0x79
    1640:	46005250 			; <UNDEFINED> instruction: 0x46005250
    1644:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1648:	6c6e555f 	cfstr64vs	mvdx5, [lr], #-380	; 0xfffffe84
    164c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1650:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1654:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    1658:	41657361 	cmnmi	r5, r1, ror #6
    165c:	61506c6c 	cmpvs	r0, ip, ror #24
    1660:	00736567 	rsbseq	r6, r3, r7, ror #10
    1664:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1668:	74535f48 	ldrbvc	r5, [r3], #-3912	; 0xf48
    166c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1670:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    1674:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1678:	52570065 	subspl	r0, r7, #101	; 0x65
    167c:	57003050 	smlsdpl	r0, r0, r0, r3
    1680:	00315052 	eorseq	r5, r1, r2, asr r0
    1684:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
    1688:	50525700 	subspl	r5, r2, r0, lsl #14
    168c:	4c460033 	mcrrmi	0, 3, r0, r6, cr3
    1690:	5f485341 	svcpl	0x00485341
    1694:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
    1698:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    169c:	746f7250 	strbtvc	r7, [pc], #-592	; 16a4 <__Stack_Size+0x12a4>
    16a0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16a4:	704f6e6f 	subvc	r6, pc, pc, ror #28
    16a8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    16ac:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    16b0:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
    16b4:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
    16b8:	414c4600 	cmpmi	ip, r0, lsl #12
    16bc:	555f4853 	ldrbpl	r4, [pc, #-2131]	; e71 <__Stack_Size+0xa71>
    16c0:	4f726573 	svcmi	0x00726573
    16c4:	6f697470 	svcvs	0x00697470
    16c8:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    16cc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    16d0:	00676966 	rsbeq	r6, r7, r6, ror #18
    16d4:	495f424f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r9, lr}^	; <UNPREDICTABLE>
    16d8:	00474457 	subeq	r4, r7, r7, asr r4
    16dc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    16e0:	65525f48 	ldrbvs	r5, [r2, #-3912]	; 0xf48
    16e4:	754f6461 	strbvc	r6, [pc, #-1121]	; 128b <__Stack_Size+0xe8b>
    16e8:	6f725074 	svcvs	0x00725074
    16ec:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    16f0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    16f4:	73616c66 	cmnvc	r1, #26112	; 0x6600
    16f8:	61747368 	cmnvs	r4, r8, ror #6
    16fc:	00737574 	rsbseq	r7, r3, r4, ror r5
    1700:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1704:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1708:	61500073 	cmpvs	r0, r3, ror r0
    170c:	415f6567 	cmpmi	pc, r7, ror #10
    1710:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1714:	46007373 			; <UNDEFINED> instruction: 0x46007373
    1718:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    171c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1720:	505f524f 	subspl	r5, pc, pc, asr #4
    1724:	4c460047 	mcrrmi	0, 4, r0, r6, cr7
    1728:	5f485341 	svcpl	0x00485341
    172c:	6b636f4c 	blvs	18dd464 <__Stack_Size+0x18dd064>
    1730:	50525700 	subspl	r5, r2, r0, lsl #14
    1734:	61445f33 	cmpvs	r4, r3, lsr pc
    1738:	73006174 	movwvc	r6, #372	; 0x174
    173c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1740:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1744:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1748:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    174c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1750:	31663233 	cmncc	r6, r3, lsr r2
    1754:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
    1758:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    175c:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    1760:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1764:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1768:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    176c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1770:	46007375 			; <UNDEFINED> instruction: 0x46007375
    1774:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1778:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    177c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    1780:	46006761 	strmi	r6, [r0], -r1, ror #14
    1784:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1788:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 1614 <__Stack_Size+0x1214>
    178c:	54454c50 	strbpl	r4, [r5], #-3152	; 0xc50
    1790:	4c460045 	mcrrmi	0, 4, r0, r6, cr5
    1794:	5f485341 	svcpl	0x00485341
    1798:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
    179c:	50525700 	subspl	r5, r2, r0, lsl #14
    17a0:	61445f31 	cmpvs	r4, r1, lsr pc
    17a4:	46006174 			; <UNDEFINED> instruction: 0x46006174
    17a8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    17ac:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    17b0:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xf45
    17b4:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    17b8:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    17bc:	414c4600 	cmpmi	ip, r0, lsl #12
    17c0:	475f4853 			; <UNDEFINED> instruction: 0x475f4853
    17c4:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
    17c8:	754f6461 	strbvc	r6, [pc, #-1121]	; 136f <__Stack_Size+0xf6f>
    17cc:	6f725074 	svcvs	0x00725074
    17d0:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    17d4:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    17d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    17dc:	424f0073 	submi	r0, pc, #115	; 0x73
    17e0:	4454535f 	ldrbmi	r5, [r4], #-863	; 0x35f
    17e4:	57005942 	strpl	r5, [r0, -r2, asr #18]
    17e8:	5f305052 	svcpl	0x00305052
    17ec:	61746144 	cmnvs	r4, r4, asr #2
    17f0:	414c4600 	cmpmi	ip, r0, lsl #12
    17f4:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    17f8:	43666c61 	cmnmi	r6, #24832	; 0x6100
    17fc:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1800:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    1804:	46007373 			; <UNDEFINED> instruction: 0x46007373
    1808:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    180c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1810:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1814:	4f007375 	svcmi	0x00007375
    1818:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    181c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1820:	4c460066 	mcrrmi	0, 6, r0, r6, cr6
    1824:	5f485341 	svcpl	0x00485341
    1828:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    182c:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    1830:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    1834:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    1838:	4600646d 	strmi	r6, [r0], -sp, ror #8
    183c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1840:	6f72505f 	svcvs	0x0072505f
    1844:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1848:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    184c:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1850:	61446574 	hvcvs	18004	; 0x4654
    1854:	46006174 			; <UNDEFINED> instruction: 0x46006174
    1858:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    185c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1860:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1864:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1868:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    186c:	46006574 			; <UNDEFINED> instruction: 0x46006574
    1870:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1874:	6f72505f 	svcvs	0x0072505f
    1878:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    187c:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    1880:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    1884:	414c4600 	cmpmi	ip, r0, lsl #12
    1888:	465f4853 			; <UNDEFINED> instruction: 0x465f4853
    188c:	0047414c 	subeq	r4, r7, ip, asr #2
    1890:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1894:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
    1898:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    189c:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    18a0:	6f725065 	svcvs	0x00725065
    18a4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    18a8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    18ac:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
    18b0:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    18b4:	44003061 	strmi	r3, [r0], #-97	; 0x61
    18b8:	31617461 	cmncc	r1, r1, ror #8
    18bc:	414c4600 	cmpmi	ip, r0, lsl #12
    18c0:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    18c4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    18c8:	414c4600 	cmpmi	ip, r0, lsl #12
    18cc:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    18d0:	4c460054 	mcrrmi	0, 5, r0, r6, cr4
    18d4:	5f485341 	svcpl	0x00485341
    18d8:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    18dc:	576d6172 			; <UNDEFINED> instruction: 0x576d6172
    18e0:	0064726f 	rsbeq	r7, r4, pc, ror #4
    18e4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    18e8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    18ec:	414c4600 	cmpmi	ip, r0, lsl #12
    18f0:	545f4853 	ldrbpl	r4, [pc], #-2131	; 18f8 <__Stack_Size+0x14f8>
    18f4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    18f8:	46006665 	strmi	r6, [r0], -r5, ror #12
    18fc:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1900:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1904:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    1908:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    190c:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
    1910:	6f697461 	svcvs	0x00697461
    1914:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    1918:	5f485341 	svcpl	0x00485341
    191c:	66657250 			; <UNDEFINED> instruction: 0x66657250
    1920:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1924:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1928:	70007265 	andvc	r7, r0, r5, ror #4
    192c:	6f706e69 	svcvs	0x00706e69
    1930:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1934:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xf74
    1938:	50470054 	subpl	r0, r7, r4, asr r0
    193c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1940:	4f646165 	svcmi	0x00646165
    1944:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    1948:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    194c:	50470061 	subpl	r0, r7, r1, rrx
    1950:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; a0f <__Stack_Size+0x60f>
    1954:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1958:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    195c:	6d437475 	cfstrdvs	mvd7, [r3, #-468]	; 0xfffffe2c
    1960:	69420064 	stmdbvs	r2, {r2, r5, r6}^
    1964:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1968:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    196c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1970:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1974:	5f4f4950 	svcpl	0x004f4950
    1978:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    197c:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
    1980:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1984:	00524349 	subseq	r4, r2, r9, asr #6
    1988:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    198c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1990:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1994:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1998:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    199c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    19a0:	5f783031 	svcpl	0x00783031
    19a4:	6f697067 	svcvs	0x00697067
    19a8:	7000632e 	andvc	r6, r0, lr, lsr #6
    19ac:	616d6e69 	cmnvs	sp, r9, ror #28
    19b0:	47006b73 	smlsdxmi	r0, r3, fp, r6
    19b4:	5f4f4950 	svcpl	0x004f4950
    19b8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    19bc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    19c0:	47006563 	strmi	r6, [r0, -r3, ror #10]
    19c4:	5f4f4950 	svcpl	0x004f4950
    19c8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    19cc:	47007469 	strmi	r7, [r0, -r9, ror #8]
    19d0:	5f4f4950 	svcpl	0x004f4950
    19d4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    19d8:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xf74
    19dc:	43747570 	cmnmi	r4, #112, 10	; 0x1c000000
    19e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19e4:	50470067 	subpl	r0, r7, r7, rrx
    19e8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    19ec:	70616d65 	rsbvc	r6, r1, r5, ror #26
    19f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19f4:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    19f8:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    19fc:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    1a00:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1a04:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    1a08:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    1a0c:	6f500067 	svcvs	0x00500067
    1a10:	61567472 	cmpvs	r6, r2, ror r4
    1a14:	7563006c 	strbvc	r0, [r3, #-108]!	; 0x6c
    1a18:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1a1c:	646f6d74 	strbtvs	r6, [pc], #-3444	; 1a24 <__Stack_Size+0x1624>
    1a20:	50470065 	subpl	r0, r7, r5, rrx
    1a24:	505f4f49 	subspl	r4, pc, r9, asr #30
    1a28:	6f536e69 	svcvs	0x00536e69
    1a2c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1a30:	43435200 	movtmi	r5, #12800	; 0x3200
    1a34:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1a38:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1a3c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1a40:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1a44:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a48:	4f495047 	svcmi	0x00495047
    1a4c:	6165525f 	cmnvs	r5, pc, asr r2
    1a50:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1a54:	61447475 	hvcvs	18245	; 0x4745
    1a58:	74006174 	strvc	r6, [r0], #-372	; 0x174
    1a5c:	616d706d 	cmnvs	sp, sp, rrx
    1a60:	47006b73 	smlsdxmi	r0, r3, fp, r6
    1a64:	5f4f4950 	svcpl	0x004f4950
    1a68:	4c6e6950 	stclmi	9, cr6, [lr], #-320	; 0xfffffec0
    1a6c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1a70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a74:	75630067 	strbvc	r0, [r3, #-103]!	; 0x67
    1a78:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1a7c:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    1a80:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1a84:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1a88:	00657469 	rsbeq	r7, r5, r9, ror #8
    1a8c:	31706d74 	cmncc	r0, r4, ror sp
    1a90:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1a94:	58455f4f 	stmdapl	r5, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1a98:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
    1a9c:	6f43656e 	svcvs	0x0043656e
    1aa0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1aa4:	49464100 	stmdbmi	r6, {r8, lr}^
    1aa8:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1aac:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1ab0:	69420066 	stmdbvs	r2, {r1, r2, r5, r6}^
    1ab4:	74634174 	strbtvc	r4, [r3], #-372	; 0x174
    1ab8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1abc:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    1ac0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ac4:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1ac8:	5f4f4950 	svcpl	0x004f4950
    1acc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1ad0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1ad4:	45007463 	strmi	r7, [r0, #-1123]	; 0x463
    1ad8:	00524356 	subseq	r4, r2, r6, asr r3
    1adc:	4f495047 	svcmi	0x00495047
    1ae0:	6165525f 	cmnvs	r5, pc, asr r2
    1ae4:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
    1ae8:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    1aec:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1af0:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1af4:	5f4f4950 	svcpl	0x004f4950
    1af8:	4f494641 	svcmi	0x00494641
    1afc:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1b00:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1b04:	00524241 	subseq	r4, r2, r1, asr #4
    1b08:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b0c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1b10:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    1b14:	61684351 	cmnvs	r8, r1, asr r3
    1b18:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1b1c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1b20:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1b24:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1b28:	5f434956 	svcpl	0x00434956
    1b2c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1b30:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1b34:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    1b38:	5f434956 	svcpl	0x00434956
    1b3c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1b40:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1b44:	6550746e 	ldrbvs	r7, [r0, #-1134]	; 0x46e
    1b48:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1b4c:	51524967 	cmppl	r2, r7, ror #18
    1b50:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1b54:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1b58:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b5c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1b60:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
    1b64:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    1b68:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1b6c:	73795300 	cmnvc	r9, #0, 6
    1b70:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1b74:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1b78:	75537265 	ldrbvc	r7, [r3, #-613]	; 0x265
    1b7c:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1b80:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1b84:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1b88:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1b8c:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1b90:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1b94:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1b98:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1b9c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1ba0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    1ba4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1ba8:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
    1bac:	74007465 	strvc	r7, [r0], #-1125	; 0x465
    1bb0:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1bb4:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1bb8:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1bbc:	54455345 	strbpl	r5, [r5], #-837	; 0x345
    1bc0:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
    1bc4:	004b5341 	subeq	r5, fp, r1, asr #6
    1bc8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1bcc:	64646174 	strbtvs	r6, [r4], #-372	; 0x174
    1bd0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1bd4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1bd8:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1bdc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1be0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1be4:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1be8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1bec:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1bf0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1bf4:	5f5f0067 	svcpl	0x005f0067
    1bf8:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    1bfc:	50455341 	subpl	r5, r5, r1, asr #6
    1c00:	73004952 	movwvc	r4, #2386	; 0x952
    1c04:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1c08:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1c0c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1c10:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1c14:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1c18:	31663233 	cmncc	r6, r3, lsr r2
    1c1c:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
    1c20:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
    1c24:	564e0063 	strbpl	r0, [lr], -r3, rrx
    1c28:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1c2c:	50437465 	subpl	r7, r3, r5, ror #8
    1c30:	00444955 	subeq	r4, r4, r5, asr r9
    1c34:	4349564e 	movtmi	r5, #38478	; 0x964e
    1c38:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1c3c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1c40:	6f724779 	svcvs	0x00724779
    1c44:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1c48:	5f434956 	svcpl	0x00434956
    1c4c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1c50:	55414654 	strbpl	r4, [r1, #-1620]	; 0x654
    1c54:	414d544c 	cmpmi	sp, ip, asr #8
    1c58:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    1c5c:	5f434956 	svcpl	0x00434956
    1c60:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1c64:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1c68:	6341746e 	movtvs	r7, #5230	; 0x146e
    1c6c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1c70:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1c74:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1c78:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1c7c:	61486d65 	cmpvs	r8, r5, ror #26
    1c80:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1c84:	43490072 	movtmi	r0, #36978	; 0x9072
    1c88:	5f005253 	svcpl	0x00005253
    1c8c:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    1c90:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    1c94:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1c98:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1c9c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1ca0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1ca4:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    1ca8:	5265726f 	rsbpl	r7, r5, #-268435450	; 0xf0000006
    1cac:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1cb0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1cb4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1cb8:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
    1cbc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1cc0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1cc4:	63417265 	movtvs	r7, #4709	; 0x1265
    1cc8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1ccc:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1cd0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1cd4:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    1cd8:	425f4349 	subsmi	r4, pc, #603979777	; 0x24000001
    1cdc:	50455341 	subpl	r5, r5, r1, asr #6
    1ce0:	4f434952 	svcmi	0x00434952
    1ce4:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1ce8:	41464200 	mrsmi	r4, (UNDEF: 102)
    1cec:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1cf0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1cf4:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1cf8:	61684351 	cmnvs	r8, r1, asr r3
    1cfc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1d00:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1d04:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1d08:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    1d0c:	6f70706d 	svcvs	0x0070706d
    1d10:	46430073 			; <UNDEFINED> instruction: 0x46430073
    1d14:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    1d18:	5f434956 	svcpl	0x00434956
    1d1c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    1d20:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1d24:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1d28:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1d2c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1d30:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1d34:	41007469 	tstmi	r0, r9, ror #8
    1d38:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
    1d3c:	50434900 	subpl	r4, r3, r0, lsl #18
    1d40:	5f5f0052 	svcpl	0x005f0052
    1d44:	45534142 	ldrbmi	r4, [r3, #-322]	; 0x142
    1d48:	43495250 	movtmi	r5, #37456	; 0x9250
    1d4c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1d50:	48530047 	ldmdami	r3, {r0, r1, r2, r6}^
    1d54:	53005250 	movwpl	r5, #592	; 0x250
    1d58:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
    1d5c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d60:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1d64:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1d68:	564e0066 	strbpl	r0, [lr], -r6, rrx
    1d6c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1d70:	41427465 	cmpmi	r2, r5, ror #8
    1d74:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    1d78:	53520049 	cmppl	r2, #73	; 0x49
    1d7c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1d80:	5f003144 	svcpl	0x00003144
    1d84:	5345525f 	movtpl	r5, #21087	; 0x525f
    1d88:	41465445 	cmpmi	r6, r5, asr #8
    1d8c:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
    1d90:	004b5341 	subeq	r5, fp, r1, asr #6
    1d94:	41464d4d 	cmpmi	r6, sp, asr #26
    1d98:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
    1d9c:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1da0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1da4:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1da8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1dac:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1db0:	4372656c 	cmnmi	r2, #108, 10	; 0x1b000000
    1db4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1db8:	564e0067 	strbpl	r0, [lr], -r7, rrx
    1dbc:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1dc0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1dc4:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    1dc8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1dcc:	664f0067 	strbvs	r0, [pc], -r7, rrx
    1dd0:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    1dd4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1dd8:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    1ddc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1de0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1de4:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
    1de8:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
    1dec:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    1df0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1df4:	54560079 	ldrbpl	r0, [r6], #-121	; 0x79
    1df8:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    1dfc:	00525053 	subseq	r5, r2, r3, asr r0
    1e00:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
    1e04:	53464800 	movtpl	r4, #26624	; 0x6800
    1e08:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1e0c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1e10:	41465445 	cmpmi	r6, r5, asr #8
    1e14:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
    1e18:	004b5341 	subeq	r5, fp, r1, asr #6
    1e1c:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
    1e20:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
    1e24:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1e28:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1e2c:	61467465 	cmpvs	r6, r5, ror #8
    1e30:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    1e34:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1e38:	6f537265 	svcvs	0x00537265
    1e3c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1e40:	43530073 	cmpmi	r3, #115	; 0x73
    1e44:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    1e48:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1e4c:	6d740066 	ldclvs	0, cr0, [r4, #-408]!	; 0xfffffe68
    1e50:	4e003270 	mcrmi	2, 0, r3, cr0, cr0, {3}
    1e54:	5f434956 	svcpl	0x00434956
    1e58:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1e5c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1e60:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1e64:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1e68:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1e6c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1e70:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1e74:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e78:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1e7c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1e80:	53726165 	cmnpl	r2, #1073741849	; 0x40000019
    1e84:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1e88:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1e8c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1e90:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1e94:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1e98:	76007469 	strvc	r7, [r0], -r9, ror #8
    1e9c:	32336375 	eorscc	r6, r3, #-738197503	; 0xd4000001
    1ea0:	75616600 	strbvc	r6, [r1, #-1536]!	; 0x600
    1ea4:	6f73746c 	svcvs	0x0073746c
    1ea8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1eac:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    1eb0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1eb4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1eb8:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1ebc:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    1ec0:	6f697470 	svcvs	0x00697470
    1ec4:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    1ec8:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1ecc:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1ed0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1ed4:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1ed8:	61684351 	cmnvs	r8, r1, asr r3
    1edc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1ee0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1ee4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1ee8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1eec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1ef0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ef4:	43535f43 	cmpmi	r3, #268	; 0x10c
    1ef8:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
    1efc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1f00:	5077654e 	rsbspl	r6, r7, lr, asr #10
    1f04:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1f08:	00797469 	rsbseq	r7, r9, r9, ror #8
    1f0c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1f10:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1f14:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    1f18:	74636100 	strbtvc	r6, [r3], #-256	; 0x100
    1f1c:	69657669 	stmdbvs	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1f20:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    1f24:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f28:	535f5f00 	cmppl	pc, #0, 30
    1f2c:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1f30:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1f34:	6168004b 	cmnvs	r8, fp, asr #32
    1f38:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1f3c:	73616d72 	cmnvc	r1, #7296	; 0x1c80
    1f40:	5f5f006b 	svcpl	0x005f006b
    1f44:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1f48:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    1f4c:	4b53414d 	blmi	14d2488 <__Stack_Size+0x14d2088>
    1f50:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1f54:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
    1f58:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1f60 <__Stack_Size+0x1b60>
    1f5c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1f60:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1f64:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1f68:	61684351 	cmnvs	r8, r1, asr r3
    1f6c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1f70:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1f74:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1f78:	61745374 	cmnvs	r4, r4, ror r3
    1f7c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1f80:	4349564e 	movtmi	r5, #38478	; 0x964e
    1f84:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1f88:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1f8c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1f90:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f94:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    1f98:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f9c:	52575000 	subspl	r5, r7, #0
    1fa0:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    1fa4:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    1fa8:	42444e41 	submi	r4, r4, #1040	; 0x410
    1fac:	646f4d59 	strbtvs	r4, [pc], #-3417	; 1fb4 <__Stack_Size+0x1bb4>
    1fb0:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    1fb4:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    1fb8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1fbc:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1fc0:	5f525750 	svcpl	0x00525750
    1fc4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1fc8:	50007469 	andpl	r7, r0, r9, ror #8
    1fcc:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    1fd0:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1fd4:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1fd8:	52575000 	subspl	r5, r7, #0
    1fdc:	4456505f 	ldrbmi	r5, [r6], #-95	; 0x5f
    1fe0:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    1fe4:	5750006c 	ldrbpl	r0, [r0, -ip, rrx]
    1fe8:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    1fec:	50004741 	andpl	r4, r0, r1, asr #14
    1ff0:	545f5257 	ldrbpl	r5, [pc], #-599	; 1ff8 <__Stack_Size+0x1bf8>
    1ff4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1ff8:	50006665 	andpl	r6, r0, r5, ror #12
    1ffc:	505f5257 	subspl	r5, pc, r7, asr r2	; <UNPREDICTABLE>
    2000:	6d434456 	cfstrdvs	mvd4, [r3, #-344]	; 0xfffffea8
    2004:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
    2008:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    200c:	5f783031 	svcpl	0x00783031
    2010:	2f62696c 	svccs	0x0062696c
    2014:	2f637273 	svccs	0x00637273
    2018:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    201c:	30316632 	eorscc	r6, r1, r2, lsr r6
    2020:	77705f78 			; <UNDEFINED> instruction: 0x77705f78
    2024:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2028:	5f525750 	svcpl	0x00525750
    202c:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    2030:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    2034:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2038:	50006769 	andpl	r6, r0, r9, ror #14
    203c:	475f5257 			; <UNDEFINED> instruction: 0x475f5257
    2040:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    2044:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    2048:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    204c:	575f5f00 	ldrbpl	r5, [pc, -r0, lsl #30]
    2050:	5f004546 	svcpl	0x00004546
    2054:	4946575f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2058:	52575000 	subspl	r5, r7, #0
    205c:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    2060:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    2064:	6f4d504f 	svcvs	0x004d504f
    2068:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    206c:	415f4343 	cmpmi	pc, r3, asr #6
    2070:	50314250 	eorspl	r4, r1, r0, asr r2
    2074:	70697265 	rsbvc	r7, r9, r5, ror #4
    2078:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    207c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    2080:	57500064 	ldrbpl	r0, [r0, -r4, rrx]
    2084:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
    2088:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    208c:	00797274 	rsbseq	r7, r9, r4, ror r2
    2090:	5f525750 	svcpl	0x00525750
    2094:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2098:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    209c:	646d436e 	strbtvs	r4, [sp], #-878	; 0x36e
    20a0:	43435200 	movtmi	r5, #12800	; 0x3200
    20a4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    20a8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    20ac:	42504100 	subsmi	r4, r0, #0, 2
    20b0:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
    20b4:	43520052 	cmpmi	r2, #82	; 0x52
    20b8:	43485f43 	movtmi	r5, #36675	; 0x8f43
    20bc:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
    20c0:	415f4343 	cmpmi	pc, r3, asr #6
    20c4:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    20c8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    20cc:	00676966 	rsbeq	r6, r7, r6, ror #18
    20d0:	5f434352 	svcpl	0x00434352
    20d4:	61656c43 	cmnvs	r5, r3, asr #24
    20d8:	50544972 	subspl	r4, r4, r2, ror r9
    20dc:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    20e0:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    20e4:	43520074 	cmpmi	r2, #116	; 0x74
    20e8:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    20ec:	43520045 	cmpmi	r2, #69	; 0x45
    20f0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    20f4:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    20f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    20fc:	44420073 	strbmi	r0, [r2], #-115	; 0x73
    2100:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    2104:	415f4343 	cmpmi	pc, r3, asr #6
    2108:	50324250 	eorspl	r4, r2, r0, asr r2
    210c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2110:	43520068 	cmpmi	r2, #104	; 0x68
    2114:	43505f43 	cmpmi	r0, #268	; 0x10c
    2118:	00324b4c 	eorseq	r4, r2, ip, asr #22
    211c:	5f434352 	svcpl	0x00434352
    2120:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2124:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    2128:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    212c:	43520066 	cmpmi	r2, #102	; 0x66
    2130:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2134:	6c754d4c 	ldclvs	13, cr4, [r5], #-304	; 0xfffffed0
    2138:	43435200 	movtmi	r5, #12800	; 0x3200
    213c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2140:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2144:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2148:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    214c:	4300646d 	movwmi	r6, #1133	; 0x46d
    2150:	00524746 	subseq	r4, r2, r6, asr #14
    2154:	4b4c4348 	blmi	1312e7c <__Stack_Size+0x1312a7c>
    2158:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    215c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2160:	41007963 	tstmi	r0, r3, ror #18
    2164:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
    2168:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    216c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2068 <__Stack_Size+0x1c68>
    2170:	6f434f43 	svcvs	0x00434f43
    2174:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2178:	43435200 	movtmi	r5, #12800	; 0x3200
    217c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2180:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2184:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2188:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
    218c:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    2190:	4352006c 	cmpmi	r2, #108	; 0x6c
    2194:	53555f43 	cmppl	r5, #268	; 0x10c
    2198:	4b4c4342 	blmi	1312ea8 <__Stack_Size+0x1312aa8>
    219c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21a0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    21a4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    21a8:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    21ac:	50410064 	subpl	r0, r1, r4, rrx
    21b0:	53523242 	cmppl	r2, #536870916	; 0x20000004
    21b4:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    21b8:	415f4343 	cmpmi	pc, r3, asr #6
    21bc:	50314250 	eorspl	r4, r1, r0, asr r2
    21c0:	70697265 	rsbvc	r7, r9, r5, ror #4
    21c4:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
    21c8:	756f736c 	strbvc	r7, [pc, #-876]!	; 1e64 <__Stack_Size+0x1a64>
    21cc:	00656372 	rsbeq	r6, r5, r2, ror r3
    21d0:	45424841 	strbmi	r4, [r2, #-2113]	; 0x841
    21d4:	7300524e 	movwvc	r5, #590	; 0x24e
    21d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    21dc:	67657273 			; <UNDEFINED> instruction: 0x67657273
    21e0:	42504100 	subsmi	r4, r0, #0, 2
    21e4:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    21e8:	61745300 	cmnvs	r4, r0, lsl #6
    21ec:	70557472 	subsvc	r7, r5, r2, ror r4
    21f0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    21f4:	00726574 	rsbseq	r6, r2, r4, ror r5
    21f8:	5f434352 	svcpl	0x00434352
    21fc:	6b636142 	blvs	18da70c <__Stack_Size+0x18da30c>
    2200:	65527075 	ldrbvs	r7, [r2, #-117]	; 0x75
    2204:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2208:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    220c:	415f4343 	cmpmi	pc, r3, asr #6
    2210:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    2214:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
    2218:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    221c:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
    2220:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2224:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2228:	43444100 	movtmi	r4, #16640	; 0x4100
    222c:	5f4b4c43 	svcpl	0x004b4c43
    2230:	71657246 	cmnvc	r5, r6, asr #4
    2234:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2238:	43520079 	cmpmi	r2, #121	; 0x79
    223c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    2240:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    2244:	505f4343 	subspl	r4, pc, r3, asr #6
    2248:	6f534c4c 	svcvs	0x00534c4c
    224c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2250:	43435200 	movtmi	r5, #12800	; 0x3200
    2254:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2258:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    225c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2260:	43520067 	cmpmi	r2, #103	; 0x67
    2264:	53555f43 	cmppl	r5, #268	; 0x10c
    2268:	4b4c4342 	blmi	1312f78 <__Stack_Size+0x1312b78>
    226c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2270:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2274:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2278:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    227c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2280:	43435200 	movtmi	r5, #12800	; 0x3200
    2284:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    2288:	004b4c43 	subeq	r4, fp, r3, asr #24
    228c:	53455348 	movtpl	r5, #21320	; 0x5348
    2290:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2294:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    2298:	4b4c4353 	blmi	1312fec <__Stack_Size+0x1312bec>
    229c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    22a0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    22a4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    22a8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    22ac:	6b636f6c 	blvs	18de064 <__Stack_Size+0x18ddc64>
    22b0:	43500073 	cmpmi	r0, #115	; 0x73
    22b4:	5f324b4c 	svcpl	0x00324b4c
    22b8:	71657246 	cmnvc	r5, r6, asr #4
    22bc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    22c0:	43520079 	cmpmi	r2, #121	; 0x79
    22c4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    22c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    22cc:	70006769 	andvc	r6, r0, r9, ror #14
    22d0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    22d4:	43435200 	movtmi	r5, #12800	; 0x3200
    22d8:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0x85f
    22dc:	43435200 	movtmi	r5, #12800	; 0x3200
    22e0:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    22e4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    22e8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    22ec:	43500065 	cmpmi	r0, #101	; 0x65
    22f0:	5f314b4c 	svcpl	0x00314b4c
    22f4:	71657246 	cmnvc	r5, r6, asr #4
    22f8:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    22fc:	50410079 	subpl	r0, r1, r9, ror r0
    2300:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    2304:	73657250 	cmnvc	r5, #80, 4
    2308:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    230c:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    2310:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2314:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2318:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    231c:	71657246 	cmnvc	r5, r6, asr #4
    2320:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2324:	31663233 	cmncc	r6, r3, lsr r2
    2328:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    232c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2330:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2334:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2338:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    233c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    2340:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    2344:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    2348:	6f434553 	svcvs	0x00434553
    234c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2350:	43435200 	movtmi	r5, #12800	; 0x3200
    2354:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2358:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    235c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2360:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2364:	6b636f6c 	blvs	18de11c <__Stack_Size+0x18ddd1c>
    2368:	75636553 	strbvc	r6, [r3, #-1363]!	; 0x553
    236c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2370:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    2374:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
    2378:	43520064 	cmpmi	r2, #100	; 0x64
    237c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    2380:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    2384:	43435200 	movtmi	r5, #12800	; 0x3200
    2388:	4f434d5f 	svcmi	0x00434d5f
    238c:	43435200 	movtmi	r5, #12800	; 0x3200
    2390:	0054495f 	subseq	r4, r4, pc, asr r9
    2394:	5f434352 	svcpl	0x00434352
    2398:	50424841 	subpl	r4, r2, r1, asr #16
    239c:	70697265 	rsbvc	r7, r9, r5, ror #4
    23a0:	44410068 	strbmi	r0, [r1], #-104	; 0x68
    23a4:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    23a8:	61546373 	cmpvs	r4, r3, ror r3
    23ac:	00656c62 	rsbeq	r6, r5, r2, ror #24
    23b0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    23b4:	5f6b6369 	svcpl	0x006b6369
    23b8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    23bc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    23c0:	53007265 	movwpl	r7, #613	; 0x265
    23c4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    23c8:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    23cc:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    23d0:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    23d4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    23d8:	73795300 	cmnvc	r9, #0, 6
    23dc:	6b636954 	blvs	18dc934 <__Stack_Size+0x18dc534>
    23e0:	414c465f 	cmpmi	ip, pc, asr r6
    23e4:	41430047 	cmpmi	r3, r7, asr #32
    23e8:	0042494c 	subeq	r4, r2, ip, asr #18
    23ec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    23f0:	30316632 	eorscc	r6, r1, r2, lsr r6
    23f4:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    23f8:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    23fc:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2400:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2404:	5f783031 	svcpl	0x00783031
    2408:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    240c:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    2410:	54430063 	strbpl	r0, [r3], #-99	; 0x63
    2414:	53004c52 	movwpl	r4, #3154	; 0xc52
    2418:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    241c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2420:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2424:	53007265 	movwpl	r7, #613	; 0x265
    2428:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    242c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2430:	6f534b4c 	svcvs	0x00534b4c
    2434:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2438:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    243c:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
    2440:	0044414f 	subeq	r4, r4, pc, asr #2
    2444:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2448:	5f6b6369 	svcpl	0x006b6369
    244c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2450:	00666544 	rsbeq	r6, r6, r4, asr #10
    2454:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2458:	5f6b6369 	svcpl	0x006b6369
    245c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2460:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2464:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2468:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    246c:	73614634 	cmnvc	r1, #52, 12	; 0x3400000
    2470:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2474:	00676966 	rsbeq	r6, r7, r6, ror #18
    2478:	5f4d4954 	svcpl	0x004d4954
    247c:	5031434f 	eorspl	r4, r1, pc, asr #6
    2480:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2484:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2488:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    248c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2490:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2494:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2498:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    249c:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    24a0:	4f5f4d49 	svcmi	0x005f4d49
    24a4:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    24a8:	616f6c65 	cmnvs	pc, r5, ror #24
    24ac:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    24b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    24b4:	5f4d4954 	svcpl	0x004d4954
    24b8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    24bc:	61706d6f 	cmnvs	r0, pc, ror #26
    24c0:	00326572 	eorseq	r6, r2, r2, ror r5
    24c4:	5f4d4954 	svcpl	0x004d4954
    24c8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    24cc:	61706d6f 	cmnvs	r0, pc, ror #26
    24d0:	00346572 	eorseq	r6, r4, r2, ror r5
    24d4:	5f4d4954 	svcpl	0x004d4954
    24d8:	4e33434f 	cdpmi	3, 3, cr4, cr3, cr15, {2}
    24dc:	616c6f50 	cmnvs	ip, r0, asr pc
    24e0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    24e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    24e8:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    24ec:	4f5f4d49 	svcmi	0x005f4d49
    24f0:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    24f4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    24f8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24fc:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2500:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2504:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2508:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    250c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2510:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    2514:	616c4674 	smcvs	50276	; 0xc464
    2518:	61745367 	cmnvs	r4, r7, ror #6
    251c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2520:	5f324954 	svcpl	0x00324954
    2524:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2528:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    252c:	4f5f4d49 	svcmi	0x005f4d49
    2530:	73614643 	cmnvc	r1, #70254592	; 0x4300000
    2534:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2538:	4b435f4d 	blmi	10da274 <__Stack_Size+0x10d9e74>
    253c:	49540044 	ldmdbmi	r4, {r2, r6}^
    2540:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2544:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2548:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    254c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2550:	5f4d4954 	svcpl	0x004d4954
    2554:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
    2558:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    255c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2560:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2564:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2568:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1827 <__Stack_Size+0x1427>
    256c:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    2570:	65725047 	ldrbvs	r5, [r2, #-71]!	; 0x47
    2574:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2578:	54007265 	strpl	r7, [r0], #-613	; 0x265
    257c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2580:	434e7843 	movtmi	r7, #59459	; 0xe843
    2584:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    2588:	616e6574 	smcvs	58964	; 0xe654
    258c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2590:	5f4d4954 	svcpl	0x004d4954
    2594:	5032434f 	eorspl	r4, r2, pc, asr #6
    2598:	6f6c6572 	svcvs	0x006c6572
    259c:	6f436461 	svcvs	0x00436461
    25a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25a4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25a8:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    25ac:	4f646563 	svcmi	0x00646563
    25b0:	6f433243 	svcvs	0x00433243
    25b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25b8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25bc:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    25c0:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    25c4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    25c8:	6f437473 	svcvs	0x00437473
    25cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25d0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25d4:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    25d8:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    25dc:	414d4443 	cmpmi	sp, r3, asr #8
    25e0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25e4:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
    25e8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    25ec:	5f4d4954 	svcpl	0x004d4954
    25f0:	50314349 	eorspl	r4, r1, r9, asr #6
    25f4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    25f8:	00797469 	rsbseq	r7, r9, r9, ror #8
    25fc:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    2600:	0072636d 	rsbseq	r6, r2, sp, ror #6
    2604:	5f4d4954 	svcpl	0x004d4954
    2608:	4633434f 	ldrtmi	r4, [r3], -pc, asr #6
    260c:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    2610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2614:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2618:	5400784d 	strpl	r7, [r0], #-2125	; 0x84d
    261c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2620:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2624:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2628:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    262c:	5f4d4954 	svcpl	0x004d4954
    2630:	50324349 	eorspl	r4, r2, r9, asr #6
    2634:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2638:	00797469 	rsbseq	r7, r9, r9, ror #8
    263c:	5f4d4954 	svcpl	0x004d4954
    2640:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2644:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    2648:	61637365 	cmnvs	r3, r5, ror #6
    264c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2650:	5f4d4954 	svcpl	0x004d4954
    2654:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2658:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2660 <__Stack_Size+0x2260>
    265c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2660:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2664:	74534953 	ldrbvc	r4, [r3], #-2387	; 0x953
    2668:	00657461 	rsbeq	r7, r5, r1, ror #8
    266c:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    2670:	54003172 	strpl	r3, [r0], #-370	; 0x172
    2674:	4f5f4d49 	svcmi	0x005f4d49
    2678:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    267c:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2680:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 193f <__Stack_Size+0x153f>
    2684:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2688:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    268c:	3265646f 	rsbcc	r6, r5, #1862270976	; 0x6f000000
    2690:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2694:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2698:	435f3149 	cmpmi	pc, #1073741842	; 0x40000012
    269c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26a0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26a4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    26a8:	70614374 	rsbvc	r4, r1, r4, ror r3
    26ac:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    26b0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    26b4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    26b8:	70614374 	rsbvc	r4, r1, r4, ror r3
    26bc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    26c0:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    26c4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    26c8:	70614374 	rsbvc	r4, r1, r4, ror r3
    26cc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    26d0:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    26d4:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    26d8:	72754241 	rsbsvc	r4, r5, #268435460	; 0x10000004
    26dc:	654c7473 	strbvs	r7, [ip, #-1139]	; 0x473
    26e0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    26e4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    26e8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    26ec:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    26f0:	54006761 	strpl	r6, [r0], #-1889	; 0x761
    26f4:	4f5f4d49 	svcmi	0x005f4d49
    26f8:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    26fc:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2700:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2704:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2708:	5234434f 	eorspl	r4, r4, #1006632961	; 0x3c000001
    270c:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2710:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2714:	45785254 	ldrbmi	r5, [r8, #-596]!	; 0x254
    2718:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    271c:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2720:	6b636f6c 	blvs	18de4d8 <__Stack_Size+0x18de0d8>
    2724:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2728:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    272c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2734 <__Stack_Size+0x2334>
    2730:	6f43414d 	svcvs	0x0043414d
    2734:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2738:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    273c:	5252415f 	subspl	r4, r2, #-1073741801	; 0xc0000017
    2740:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2744:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2748:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    274c:	74730067 	ldrbtvc	r0, [r3], #-103	; 0x67
    2750:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2754:	5f783031 	svcpl	0x00783031
    2758:	2f62696c 	svccs	0x0062696c
    275c:	2f637273 	svccs	0x00637273
    2760:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2764:	30316632 	eorscc	r6, r1, r2, lsr r6
    2768:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    276c:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2770:	5f4d4954 	svcpl	0x004d4954
    2774:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2778:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    277c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2780:	74007463 	strvc	r7, [r0], #-1123	; 0x463
    2784:	6363706d 	cmnvs	r3, #109	; 0x6d
    2788:	54007265 	strpl	r7, [r0], #-613	; 0x265
    278c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2790:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2794:	446b636f 	strbtmi	r6, [fp], #-879	; 0x36f
    2798:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    279c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    27a0:	5f4d4954 	svcpl	0x004d4954
    27a4:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    27a8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    27ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    27b0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    27b4:	72425f4d 	subvc	r5, r2, #308	; 0x134
    27b8:	506b6165 	rsbpl	r6, fp, r5, ror #2
    27bc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    27c0:	00797469 	rsbseq	r7, r9, r9, ror #8
    27c4:	5f4d4954 	svcpl	0x004d4954
    27c8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    27cc:	754f7463 	strbvc	r7, [pc, #-1123]	; 2371 <__Stack_Size+0x1f71>
    27d0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    27d4:	67697254 			; <UNDEFINED> instruction: 0x67697254
    27d8:	00726567 	rsbseq	r6, r2, r7, ror #10
    27dc:	5f4d4954 	svcpl	0x004d4954
    27e0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    27e4:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    27e8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    27ec:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    27f0:	54007463 	strpl	r7, [r0], #-1123	; 0x463
    27f4:	535f4d49 	cmppl	pc, #4672	; 0x1240
    27f8:	63656c65 	cmnvs	r5, #25856	; 0x6500
    27fc:	78434f74 	stmdavc	r3, {r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    2800:	6d74004d 	ldclvs	0, cr0, [r4, #-308]!	; 0xfffffecc
    2804:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2808:	54007872 	strpl	r7, [r0], #-2162	; 0x872
    280c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2810:	0047414c 	subeq	r4, r7, ip, asr #2
    2814:	5f4d4954 	svcpl	0x004d4954
    2818:	4b434f4c 	blmi	10d6550 <__Stack_Size+0x10d6150>
    281c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    2820:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    2824:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2828:	756f4374 	strbvc	r4, [pc, #-884]!	; 24bc <__Stack_Size+0x20bc>
    282c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2830:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2834:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    2838:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    283c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2840:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2844:	5043495f 	subpl	r4, r3, pc, asr r9
    2848:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    284c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2850:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2854:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    2858:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    285c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2860:	4353505f 	cmpmi	r3, #95	; 0x5f
    2864:	6f6c6552 	svcvs	0x006c6552
    2868:	6f4d6461 	svcvs	0x004d6461
    286c:	54006564 	strpl	r6, [r0], #-1380	; 0x564
    2870:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2874:	6d437843 	stclvs	8, cr7, [r3, #-268]	; 0xfffffef4
    2878:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    287c:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    2880:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    2884:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2888:	54007265 	strpl	r7, [r0], #-613	; 0x265
    288c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2894 <__Stack_Size+0x2494>
    2890:	6142414d 	cmpvs	r2, sp, asr #2
    2894:	54006573 	strpl	r6, [r0], #-1395	; 0x573
    2898:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    289c:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    28a0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    28a4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    28a8:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    28ac:	535f4d49 	cmppl	pc, #4672	; 0x1240
    28b0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    28b4:	6c614874 	stclvs	8, cr4, [r1], #-464	; 0xfffffe30
    28b8:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    28bc:	00726f73 	rsbseq	r6, r2, r3, ror pc
    28c0:	5f4d4954 	svcpl	0x004d4954
    28c4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    28c8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
    28cc:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    28d0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    28d4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    28d8:	32434974 	subcc	r4, r3, #116, 18	; 0x1d0000
    28dc:	73657250 	cmnvc	r5, #80, 4
    28e0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    28e4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    28e8:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    28ec:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    28f0:	746e4972 	strbtvc	r4, [lr], #-2418	; 0x972
    28f4:	61667265 	cmnvs	r6, r5, ror #4
    28f8:	6f436563 	svcvs	0x00436563
    28fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2900:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2904:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2908:	4954004e 	ldmdbmi	r4, {r1, r2, r3, r6}^
    290c:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2910:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2914:	5f4d4954 	svcpl	0x004d4954
    2918:	45784954 	ldrbmi	r4, [r8, #-2388]!	; 0x954
    291c:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    2920:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2924:	6f534b4c 	svcvs	0x00534b4c
    2928:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    292c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2930:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    2934:	44657461 	strbtmi	r7, [r5], #-1121	; 0x461
    2938:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    293c:	6f43656c 	svcvs	0x0043656c
    2940:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2944:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2948:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    294c:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    2950:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2954:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2958:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    295c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2960:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2964:	54007463 	strpl	r7, [r0], #-1123	; 0x463
    2968:	435f3349 	cmpmi	pc, #603979777	; 0x24000001
    296c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2970:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2974:	6f435f4d 	svcvs	0x00435f4d
    2978:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    297c:	646f4d72 	strbtvs	r4, [pc], #-3442	; 2984 <__Stack_Size+0x2584>
    2980:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2984:	00676966 	rsbeq	r6, r7, r6, ror #18
    2988:	5f4d4954 	svcpl	0x004d4954
    298c:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2990:	61706d6f 	cmnvs	r0, pc, ror #26
    2994:	00336572 	eorseq	r6, r3, r2, ror r5
    2998:	5f4d4954 	svcpl	0x004d4954
    299c:	61656c43 	cmnvs	r5, r3, asr #24
    29a0:	33434f72 	movtcc	r4, #16242	; 0x3f72
    29a4:	00666552 	rsbeq	r6, r6, r2, asr r5
    29a8:	5f4d4954 	svcpl	0x004d4954
    29ac:	4934434f 	ldmdbmi	r4!, {r0, r1, r2, r3, r6, r8, r9, lr}
    29b0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    29b4:	5f4d4954 	svcpl	0x004d4954
    29b8:	63726f46 	cmnvs	r2, #280	; 0x118
    29bc:	434f6465 	movtmi	r6, #62565	; 0xf465
    29c0:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
    29c4:	00676966 	rsbeq	r6, r7, r6, ror #18
    29c8:	5f4d4954 	svcpl	0x004d4954
    29cc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    29d0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    29d4:	54007265 	strpl	r7, [r0], #-613	; 0x265
    29d8:	4f5f4d49 	svcmi	0x005f4d49
    29dc:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    29e0:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    29e4:	00746375 	rsbseq	r6, r4, r5, ror r3
    29e8:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0x845
    29ec:	69464752 	stmdbvs	r6, {r1, r4, r6, r8, r9, sl, lr}^
    29f0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    29f4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    29f8:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    29fc:	53746365 	cmnpl	r4, #-1811939327	; 0x94000001
    2a00:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
    2a04:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2a08:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a0c:	31434f5f 	cmpcc	r3, pc, asr pc
    2a10:	74736146 	ldrbtvc	r6, [r3], #-326	; 0x146
    2a14:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a18:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2a1c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1cdb <__Stack_Size+0x18db>
    2a20:	6f435254 	svcvs	0x00435254
    2a24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a28:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a2c:	31434f5f 	cmpcc	r3, pc, asr pc
    2a30:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 2900 <__Stack_Size+0x2500>
    2a34:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2a38:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2a3c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a40:	5f4d4954 	svcpl	0x004d4954
    2a44:	53504349 	cmppl	r0, #603979777	; 0x24000001
    2a48:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
    2a4c:	76455f4d 	strbvc	r5, [r5], -sp, asr #30
    2a50:	53746e65 	cmnpl	r4, #1616	; 0x650
    2a54:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2a58:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    2a5c:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2a60:	74003172 	strvc	r3, [r0], #-370	; 0x172
    2a64:	6363706d 	cmnvs	r3, #109	; 0x6d
    2a68:	0032726d 	eorseq	r7, r2, sp, ror #4
    2a6c:	5f4d4954 	svcpl	0x004d4954
    2a70:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2a74:	006c656e 	rsbeq	r6, ip, lr, ror #10
    2a78:	5f4d4954 	svcpl	0x004d4954
    2a7c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    2a80:	4f437463 	svcmi	0x00437463
    2a84:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    2a88:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2a8c:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2a90:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2a94:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    2a98:	69006c6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}
    2a9c:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    2aa0:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    2aa4:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    2aa8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2aac:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
    2ab0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2ab4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2ab8:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2abc:	6b636f6c 	blvs	18de874 <__Stack_Size+0x18de474>
    2ac0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ac4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2ac8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2acc:	43497465 	movtmi	r7, #37989	; 0x9465
    2ad0:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0x31
    2ad4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2ad8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    2adc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2ae0:	54007843 	strpl	r7, [r0], #-2115	; 0x843
    2ae4:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2ae8:	43497465 	movtmi	r7, #37989	; 0x9465
    2aec:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0x33
    2af0:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2af4:	54007265 	strpl	r7, [r0], #-613	; 0x265
    2af8:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2afc:	6c655343 	stclvs	3, cr5, [r5], #-268	; 0xfffffef4
    2b00:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2b04:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
    2b08:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1dc7 <__Stack_Size+0x19c7>
    2b0c:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2b10:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2b14:	3165646f 	cmncc	r5, pc, ror #8
    2b18:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b1c:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2b20:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2b24:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2b28:	656e4f74 	strbvs	r4, [lr, #-3956]!	; 0xf74
    2b2c:	736c7550 	cmnvc	ip, #80, 10	; 0x14000000
    2b30:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2b38 <__Stack_Size+0x2738>
    2b34:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2b38:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2b3c:	6f534f47 	svcvs	0x00534f47
    2b40:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2b44:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b48:	53534f5f 	cmppl	r3, #380	; 0x17c
    2b4c:	61745352 	cmnvs	r4, r2, asr r3
    2b50:	54006574 	strpl	r6, [r0], #-1396	; 0x574
    2b54:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2b58:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 2a54 <__Stack_Size+0x2654>
    2b5c:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2b60:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2b64:	74435f4d 	strbvc	r5, [r3], #-3917	; 0xf4d
    2b68:	57506c72 			; <UNDEFINED> instruction: 0x57506c72
    2b6c:	74754f4d 	ldrbtvc	r4, [r5], #-3917	; 0xf4d
    2b70:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    2b74:	6f636900 	svcvs	0x00636900
    2b78:	736f7070 	cmnvc	pc, #112	; 0x70
    2b7c:	70657469 	rsbvc	r7, r5, r9, ror #8
    2b80:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2b84:	00797469 	rsbseq	r7, r9, r9, ror #8
    2b88:	5f4d4954 	svcpl	0x004d4954
    2b8c:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2b90:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b94:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2b98:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2b9c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2ba0:	5232434f 	eorspl	r4, r2, #1006632961	; 0x3c000001
    2ba4:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2ba8:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2bb0 <__Stack_Size+0x27b0>
    2bac:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2bb0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2bb4:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2bb8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2bbc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2bc0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2bc4:	614d5f4d 	cmpvs	sp, sp, asr #30
    2bc8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2bcc:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2bd0:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2bd8 <__Stack_Size+0x27d8>
    2bd4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2bd8:	75415f4d 	strbvc	r5, [r1, #-3917]	; 0xf4d
    2bdc:	616d6f74 	smcvs	55028	; 0xd6f4
    2be0:	4f636974 	svcmi	0x00636974
    2be4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2be8:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2bec:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2bf0:	74754174 	ldrbtvc	r4, [r5], #-372	; 0x174
    2bf4:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
    2bf8:	0064616f 	rsbeq	r6, r4, pc, ror #2
    2bfc:	5f4d4954 	svcpl	0x004d4954
    2c00:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2c04:	5400646d 	strpl	r6, [r0], #-1133	; 0x46d
    2c08:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2c0c:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2c10:	31434f64 	cmpcc	r3, r4, ror #30
    2c14:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c18:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2c1c:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    2c20:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c24:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c28:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xf4d
    2c2c:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    2c30:	5400656d 	strpl	r6, [r0], #-1389	; 0x56d
    2c34:	4f5f4d49 	svcmi	0x005f4d49
    2c38:	504e3243 	subpl	r3, lr, r3, asr #4
    2c3c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2c40:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2c44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c48:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c4c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2c50:	6c6f5034 	stclvs	0, cr5, [pc], #-208	; 2b88 <__Stack_Size+0x2788>
    2c54:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2c58:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2c5c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c60:	5f4d4954 	svcpl	0x004d4954
    2c64:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2c68:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2c6c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2c70:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2c74:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2c78:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2c7c:	5231434f 	eorspl	r4, r1, #1006632961	; 0x3c000001
    2c80:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2c84:	4f5f4d49 	svcmi	0x005f4d49
    2c88:	6f503343 	svcvs	0x00503343
    2c8c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2c90:	6f437974 	svcvs	0x00437974
    2c94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c98:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c9c:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    2ca0:	50475254 	subpl	r5, r7, r4, asr r2
    2ca4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2ca8:	00797469 	rsbseq	r7, r9, r9, ror #8
    2cac:	5f4d4954 	svcpl	0x004d4954
    2cb0:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    2cb4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2cb8:	74006769 	strvc	r6, [r0], #-1897	; 0x769
    2cbc:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    2cc0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2cc4:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xf4d
    2cc8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ccc:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2cd0:	4f646563 	svcmi	0x00646563
    2cd4:	6f433343 	svcvs	0x00433343
    2cd8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2cdc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2ce0:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2ce4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2ce8:	5f4d4954 	svcpl	0x004d4954
    2cec:	69464349 	stmdbvs	r6, {r0, r3, r6, r8, r9, lr}^
    2cf0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2cf4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2cf8:	414d445f 	cmpmi	sp, pc, asr r4
    2cfc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2d00:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2d04:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2d08:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2d0c:	73614d74 	cmnvc	r1, #116, 26	; 0x1d00
    2d10:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    2d14:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
    2d18:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2d1c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d20:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2d24:	49746365 	ldmdbmi	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2d28:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
    2d2c:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2d30:	00726567 	rsbseq	r6, r2, r7, ror #10
    2d34:	5f4d4954 	svcpl	0x004d4954
    2d38:	5032434f 	eorspl	r4, r2, pc, asr #6
    2d3c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2d40:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2d44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d48:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    2d4c:	65676574 	strbvs	r6, [r7, #-1396]!	; 0x574
    2d50:	76696472 			; <UNDEFINED> instruction: 0x76696472
    2d54:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2d58:	41535500 	cmpmi	r3, r0, lsl #10
    2d5c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2d60:	00414850 	subeq	r4, r1, r0, asr r8
    2d64:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d68:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    2d6c:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    2d70:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2d74:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    2d78:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2d7c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2d80:	61657242 	cmnvs	r5, r2, asr #4
    2d84:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    2d88:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    2d8c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    2d90:	53550068 	cmppl	r5, #104	; 0x68
    2d94:	5f545241 	svcpl	0x00545241
    2d98:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d9c:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2da0:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2da4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2da8:	41535500 	cmpmi	r3, r0, lsl #10
    2dac:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2db0:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xc61
    2db4:	656c7075 	strbvs	r7, [ip, #-117]!	; 0x75
    2db8:	646d4378 	strbtvs	r4, [sp], #-888	; 0x378
    2dbc:	41535500 	cmpmi	r3, r0, lsl #10
    2dc0:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    2dc4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    2dc8:	53550070 	cmppl	r5, #112	; 0x70
    2dcc:	5f545241 	svcpl	0x00545241
    2dd0:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2dd4:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2dd8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2ddc:	0054495f 	subseq	r4, r4, pc, asr r9
    2de0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2de4:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    2de8:	6f4d4144 	svcvs	0x004d4144
    2dec:	61006564 	tstvs	r0, r4, ror #10
    2df0:	6c636270 	sfmvs	f6, 2, [r3], #-448	; 0xfffffe40
    2df4:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2df8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2dfc:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2e00:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2e04:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2e08:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2e0c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2e10:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e14:	75475f54 	strbvc	r5, [r7, #-3924]	; 0xf54
    2e18:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    2e1c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2e20:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e24:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2e28:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0x24e
    2e2c:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xb61
    2e30:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    2e34:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2e38:	6f436874 	svcvs	0x00436874
    2e3c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e40:	41535500 	cmpmi	r3, r0, lsl #10
    2e44:	465f5452 			; <UNDEFINED> instruction: 0x465f5452
    2e48:	0047414c 	subeq	r4, r7, ip, asr #2
    2e4c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e50:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2e54:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2e58:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2e5c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2e60:	53550074 	cmppl	r5, #116	; 0x74
    2e64:	5f545241 	svcpl	0x00545241
    2e68:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    2e6c:	55007165 	strpl	r7, [r0, #-357]	; 0x165
    2e70:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e74:	6f6c435f 	svcvs	0x006c435f
    2e78:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xb63
    2e7c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2e80:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e84:	61737500 	cmnvs	r3, r0, lsl #10
    2e88:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    2e8c:	00657361 	rsbeq	r7, r5, r1, ror #6
    2e90:	5f434352 	svcpl	0x00434352
    2e94:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2e98:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    2e9c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2ea0:	41535500 	cmpmi	r3, r0, lsl #10
    2ea4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ea8:	64417465 	strbvs	r7, [r1], #-1125	; 0x465
    2eac:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2eb0:	53550073 	cmppl	r5, #115	; 0x73
    2eb4:	5f545241 	svcpl	0x00545241
    2eb8:	47746553 			; <UNDEFINED> instruction: 0x47746553
    2ebc:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    2ec0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2ec4:	41535500 	cmpmi	r3, r0, lsl #10
    2ec8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ecc:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    2ed0:	6b616572 	blvs	185c4a0 <__Stack_Size+0x185c0a0>
    2ed4:	41535500 	cmpmi	r3, r0, lsl #10
    2ed8:	00785452 	rsbseq	r5, r8, r2, asr r4
    2edc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ee0:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    2ee4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2ee8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2eec:	41535500 	cmpmi	r3, r0, lsl #10
    2ef0:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    2ef4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    2ef8:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    2efc:	6f707469 	svcvs	0x00707469
    2f00:	53550073 	cmppl	r5, #115	; 0x73
    2f04:	5f545241 	svcpl	0x00545241
    2f08:	61656c43 	cmnvs	r5, r3, asr #24
    2f0c:	616c4672 	smcvs	50274	; 0xc462
    2f10:	53550067 	cmppl	r5, #103	; 0x67
    2f14:	5f545241 	svcpl	0x00545241
    2f18:	41447249 	cmpmi	r4, r9, asr #4
    2f1c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2f20:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    2f24:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f28:	6f6c435f 	svcvs	0x006c435f
    2f2c:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    2f30:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f34:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2f38:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    2f3c:	6b615772 	blvs	1858d0c <__Stack_Size+0x185890c>
    2f40:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2f44:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2f48:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f4c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    2f50:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    2f54:	41535500 	cmpmi	r3, r0, lsl #10
    2f58:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    2f5c:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    2f60:	72660064 	rsbvc	r0, r6, #100	; 0x64
    2f64:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2f68:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    2f6c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2f70:	00726564 	rsbseq	r6, r2, r4, ror #10
    2f74:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f78:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    2f7c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2f80:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    2f84:	434b4341 	movtmi	r4, #45889	; 0xb341
    2f88:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2f8c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f90:	616d535f 	cmnvs	sp, pc, asr r3
    2f94:	61437472 	hvcvs	14146	; 0x3742
    2f98:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    2f9c:	53550064 	cmppl	r5, #100	; 0x64
    2fa0:	5f545241 	svcpl	0x00545241
    2fa4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2fa8:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2fac:	53550074 	cmppl	r5, #116	; 0x74
    2fb0:	5f545241 	svcpl	0x00545241
    2fb4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2fb8:	6f437055 	svcvs	0x00437055
    2fbc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2fc0:	41535500 	cmpmi	r3, r0, lsl #10
    2fc4:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    2fc8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2fcc:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2fd0:	41535500 	cmpmi	r3, r0, lsl #10
    2fd4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2fd8:	004c4f50 	subeq	r4, ip, r0, asr pc
    2fdc:	616d7469 	cmnvs	sp, r9, ror #8
    2fe0:	55006b73 	strpl	r6, [r0, #-2931]	; 0xb73
    2fe4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2fe8:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    2fec:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    2ff0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2ff4:	31663233 	cmncc	r6, r3, lsr r2
    2ff8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    2ffc:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3000:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    3004:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3008:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    300c:	6173755f 	cmnvs	r3, pc, asr r5
    3010:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    3014:	61737500 	cmnvs	r3, r0, lsl #10
    3018:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    301c:	655f0067 	ldrbvs	r0, [pc, #-103]	; 2fbd <__Stack_Size+0x2bbd>
    3020:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    3024:	735f006b 	cmpvc	pc, #107	; 0x6b
    3028:	61746164 	cmnvs	r4, r4, ror #2
    302c:	73655200 	cmnvc	r5, #0, 4
    3030:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3034:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3038:	70007265 	andvc	r7, r0, r5, ror #4
    303c:	65446c75 	strbvs	r6, [r4, #-3189]	; 0xc75
    3040:	5f007473 	svcpl	0x00007473
    3044:	61646973 	smcvs	18067	; 0x4693
    3048:	5f006174 	svcpl	0x00006174
    304c:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    3050:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xf00
    3054:	00617461 	rsbeq	r7, r1, r1, ror #8
    3058:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    305c:	30316632 	eorscc	r6, r1, r2, lsr r6
    3060:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3064:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    3068:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    306c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3070:	5f783031 	svcpl	0x00783031
    3074:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
    3078:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    307c:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3080:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xe66
    3084:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    3088:	75700073 	ldrbvc	r0, [r0, #-115]!	; 0x73
    308c:	6372536c 	cmnvs	r2, #108, 6	; 0xb0000001
    3090:	62735f00 	rsbsvs	r5, r3, #0, 30
    3094:	Address 0x00003094 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
       4:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
       8:	68500001 	ldmdavs	r0, {r0}^
       c:	6a080031 	bvs	2000d8 <__Stack_Size+0x1ffcd8>
      10:	01080031 	tsteq	r8, r1, lsr r0
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	32bc0000 	adcscc	r0, ip, #0
      20:	32c40800 	sbccc	r0, r4, #0, 16
      24:	00010800 	andeq	r0, r1, r0, lsl #16
      28:	0032c450 	eorseq	ip, r2, r0, asr r4
      2c:	00330008 	eorseq	r0, r3, r8
      30:	f3000408 	vshl.u8	d0, d8, d0
      34:	009f5001 	addseq	r5, pc, r1
      38:	00000000 	andeq	r0, r0, r0
      3c:	20000000 	andcs	r0, r0, r0
      40:	26080033 			; <UNDEFINED> instruction: 0x26080033
      44:	01080033 	tsteq	r8, r3, lsr r0
      48:	33265000 			; <UNDEFINED> instruction: 0x33265000
      4c:	333c0800 	teqcc	ip, #0, 16
      50:	00040800 	andeq	r0, r4, r0, lsl #16
      54:	9f5001f3 	svcls	0x005001f3
	...
      60:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
      64:	08003340 	stmdaeq	r0, {r6, r8, r9, ip, sp}
      68:	40500001 	subsmi	r0, r0, r1
      6c:	44080033 	strmi	r0, [r8], #-51	; 0x33
      70:	03080033 	movweq	r0, #32819	; 0x8033
      74:	9f017400 	svcls	0x00017400
      78:	08003344 	stmdaeq	r0, {r2, r6, r8, r9, ip, sp}
      7c:	08003346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, sp}
      80:	46540001 	ldrbmi	r0, [r4], -r1
      84:	4c080033 	stcmi	0, cr0, [r8], {51}	; 0x33
      88:	03080033 	movweq	r0, #32819	; 0x8033
      8c:	9f017400 	svcls	0x00017400
      90:	0800334c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp}
      94:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
      98:	00540001 	subseq	r0, r4, r1
      9c:	00000000 	andeq	r0, r0, r0
      a0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
      a4:	59080033 	stmdbpl	r8, {r0, r1, r4, r5}
      a8:	01080033 	tsteq	r8, r3, lsr r0
      ac:	33595000 	cmpcc	r9, #0
      b0:	337c0800 	cmncc	ip, #0, 16
      b4:	00040800 	andeq	r0, r4, r0, lsl #16
      b8:	9f5001f3 	svcls	0x005001f3
	...
      c4:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
      c8:	08003387 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, ip, sp}
      cc:	87500001 	ldrbhi	r0, [r0, -r1]
      d0:	ac080033 	stcge	0, cr0, [r8], {51}	; 0x33
      d4:	04080033 	streq	r0, [r8], #-51	; 0x33
      d8:	5001f300 	andpl	pc, r1, r0, lsl #6
      dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e0:	00000000 	andeq	r0, r0, r0
      e4:	0033ac00 	eorseq	sl, r3, r0, lsl #24
      e8:	0033ae08 	eorseq	sl, r3, r8, lsl #28
      ec:	50000108 	andpl	r0, r0, r8, lsl #2
      f0:	080033ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, sp}
      f4:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
      f8:	02700003 	rsbseq	r0, r0, #3
      fc:	0033be9f 	mlaseq	r3, pc, lr, fp	; <UNPREDICTABLE>
     100:	0033f808 	eorseq	pc, r3, r8, lsl #16
     104:	f3000408 	vshl.u8	d0, d8, d0
     108:	009f5001 	addseq	r5, pc, r1
     10c:	00000000 	andeq	r0, r0, r0
     110:	8c000000 	stchi	0, cr0, [r0], {-0}
     114:	96080034 			; <UNDEFINED> instruction: 0x96080034
     118:	01080034 	tsteq	r8, r4, lsr r0
     11c:	34965000 	ldrcc	r5, [r6], #0
     120:	34ba0800 	ldrtcc	r0, [sl], #2048	; 0x800
     124:	00040800 	andeq	r0, r4, r0, lsl #16
     128:	9f5001f3 	svcls	0x005001f3
	...
     134:	08003496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip, sp}
     138:	080034a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, ip, sp}
     13c:	aa500001 	bge	1400148 <__Stack_Size+0x13ffd48>
     140:	b9080034 	stmdblt	r8, {r2, r4, r5}
     144:	01080034 	tsteq	r8, r4, lsr r0
     148:	00005000 	andeq	r5, r0, r0
     14c:	00000000 	andeq	r0, r0, r0
     150:	34ba0000 	ldrtcc	r0, [sl], #0
     154:	34c00800 	strbcc	r0, [r0], #2048	; 0x800
     158:	00010800 	andeq	r0, r1, r0, lsl #16
     15c:	0034c050 	eorseq	ip, r4, r0, asr r0
     160:	0034ce08 	eorseq	ip, r4, r8, lsl #28
     164:	f3000408 	vshl.u8	d0, d8, d0
     168:	009f5001 	addseq	r5, pc, r1
     16c:	00000000 	andeq	r0, r0, r0
     170:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
     174:	dd080034 	stcle	0, cr0, [r8, #-208]	; 0xffffff30
     178:	01080034 	tsteq	r8, r4, lsr r0
     17c:	34dd5000 	ldrbcc	r5, [sp], #0
     180:	35080800 	strcc	r0, [r8, #-2048]	; 0x800
     184:	00040800 	andeq	r0, r4, r0, lsl #16
     188:	9f5001f3 	svcls	0x005001f3
	...
     194:	080034ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp}
     198:	080034da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, ip, sp}
     19c:	da510001 	ble	14401a8 <__Stack_Size+0x143fda8>
     1a0:	08080034 	stmdaeq	r8, {r2, r4, r5}
     1a4:	04080035 	streq	r0, [r8], #-53	; 0x35
     1a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	0034d800 	eorseq	sp, r4, r0, lsl #16
     1b8:	0034dd08 	eorseq	sp, r4, r8, lsl #26
     1bc:	52000108 	andpl	r0, r0, #8, 2
     1c0:	080034dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, ip, sp}
     1c4:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     1c8:	000a0015 	andeq	r0, sl, r5, lsl r0
     1cc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
     1d0:	5101f31c 	tstpl	r1, ip, lsl r3	; <UNPREDICTABLE>
     1d4:	305101f3 	ldrshcc	r0, [r1], #-19	; 0xffffffed
     1d8:	0001282d 	andeq	r2, r1, sp, lsr #16
     1dc:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	e6000000 	str	r0, [r0], -r0
     1e8:	ea080034 	b	2002c0 <__Stack_Size+0x1ffec0>
     1ec:	01080034 	tsteq	r8, r4, lsr r0
     1f0:	34ea5000 	strbtcc	r5, [sl], #0
     1f4:	34f80800 	ldrbtcc	r0, [r8], #2048	; 0x800
     1f8:	00010800 	andeq	r0, r1, r0, lsl #16
     1fc:	0034fe54 	eorseq	pc, r4, r4, asr lr	; <UNPREDICTABLE>
     200:	00350808 	eorseq	r0, r5, r8, lsl #16
     204:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     210:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     214:	0800350e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip, sp}
     218:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
     21c:	1c080035 	stcne	0, cr0, [r8], {53}	; 0x35
     220:	01080035 	tsteq	r8, r5, lsr r0
     224:	351c5400 	ldrcc	r5, [ip, #-1024]	; 0x400
     228:	351f0800 	ldrcc	r0, [pc, #-2048]	; fffffa30 <SCS_BASE+0x1fff1a30>
     22c:	00040800 	andeq	r0, r4, r0, lsl #16
     230:	9f1f0071 	svcls	0x001f0071
     234:	0800351f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sl, ip, sp}
     238:	08003520 	stmdaeq	r0, {r5, r8, sl, ip, sp}
     23c:	01f30004 	mvnseq	r0, r4
     240:	00009f50 	andeq	r9, r0, r0, asr pc
     244:	00000000 	andeq	r0, r0, r0
     248:	35540000 	ldrbcc	r0, [r4, #-0]
     24c:	355f0800 	ldrbcc	r0, [pc, #-2048]	; fffffa54 <SCS_BASE+0x1fff1a54>
     250:	00010800 	andeq	r0, r1, r0, lsl #16
     254:	00355f50 	eorseq	r5, r5, r0, asr pc
     258:	00359c08 	eorseq	r9, r5, r8, lsl #24
     25c:	f3000408 	vshl.u8	d0, d8, d0
     260:	009f5001 	addseq	r5, pc, r1
     264:	00000000 	andeq	r0, r0, r0
     268:	54000000 	strpl	r0, [r0], #-0
     26c:	5c080035 	stcpl	0, cr0, [r8], {53}	; 0x35
     270:	01080035 	tsteq	r8, r5, lsr r0
     274:	355c5100 	ldrbcc	r5, [ip, #-256]	; 0x100
     278:	35680800 	strbcc	r0, [r8, #-2048]!	; 0x800
     27c:	00010800 	andeq	r0, r1, r0, lsl #16
     280:	00356854 	eorseq	r6, r5, r4, asr r8
     284:	00359c08 	eorseq	r9, r5, r8, lsl #24
     288:	f3000408 	vshl.u8	d0, d8, d0
     28c:	009f5101 	addseq	r5, pc, r1, lsl #2
     290:	00000000 	andeq	r0, r0, r0
     294:	54000000 	strpl	r0, [r0], #-0
     298:	5f080035 	svcpl	0x00080035
     29c:	01080035 	tsteq	r8, r5, lsr r0
     2a0:	355f5200 	ldrbcc	r5, [pc, #-512]	; a8 <_Minimum_Stack_Size-0x58>
     2a4:	359c0800 	ldrcc	r0, [ip, #2048]	; 0x800
     2a8:	00040800 	andeq	r0, r4, r0, lsl #16
     2ac:	9f5201f3 	svcls	0x005201f3
	...
     2b8:	08003568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, sp}
     2bc:	0800357a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sl, ip, sp}
     2c0:	7a540001 	bvc	15002cc <__Stack_Size+0x14ffecc>
     2c4:	9c080035 	stcls	0, cr0, [r8], {53}	; 0x35
     2c8:	14080035 	strne	r0, [r8], #-53	; 0x35
     2cc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     2d0:	f3088023 	vhadd.u8	d8, d8, d19
     2d4:	01f35101 	mvnseq	r5, r1, lsl #2
     2d8:	282d3051 	stmdacs	sp!, {r0, r4, r6, ip, sp}
     2dc:	13160001 	tstne	r6, #1
     2e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	00357a00 	eorseq	r7, r5, r0, lsl #20
     2ec:	00357e08 	eorseq	r7, r5, r8, lsl #28
     2f0:	50000108 	andpl	r0, r0, r8, lsl #2
     2f4:	0800357e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip, sp}
     2f8:	0800358c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, sp}
     2fc:	92540001 	subsls	r0, r4, #1
     300:	9c080035 	stcls	0, cr0, [r8], {53}	; 0x35
     304:	01080035 	tsteq	r8, r5, lsr r0
     308:	00005000 	andeq	r5, r0, r0
     30c:	00000000 	andeq	r0, r0, r0
     310:	359c0000 	ldrcc	r0, [ip]
     314:	35a40800 	strcc	r0, [r4, #2048]!	; 0x800
     318:	00010800 	andeq	r0, r1, r0, lsl #16
     31c:	0035a450 	eorseq	sl, r5, r0, asr r4
     320:	0035ab08 	eorseq	sl, r5, r8, lsl #22
     324:	53000108 	movwpl	r0, #264	; 0x108
     328:	080035ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sl, ip, sp}
     32c:	080035ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip, sp}
     330:	01f30004 	mvnseq	r0, r4
     334:	00009f50 	andeq	r9, r0, r0, asr pc
     338:	00000000 	andeq	r0, r0, r0
     33c:	359c0000 	ldrcc	r0, [ip]
     340:	35a60800 	strcc	r0, [r6, #2048]!	; 0x800
     344:	00010800 	andeq	r0, r1, r0, lsl #16
     348:	0035a651 	eorseq	sl, r5, r1, asr r6
     34c:	0035b208 	eorseq	fp, r5, r8, lsl #4
     350:	54000108 	strpl	r0, [r0], #-264	; 0x108
     354:	080035b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, ip, sp}
     358:	080035b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, ip, sp}
     35c:	b9510001 	ldmdblt	r1, {r0}^
     360:	ba080035 	blt	20043c <__Stack_Size+0x20003c>
     364:	04080035 	streq	r0, [r8], #-53	; 0x35
     368:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     36c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     370:	00000000 	andeq	r0, r0, r0
     374:	0035ba00 	eorseq	fp, r5, r0, lsl #20
     378:	0035c008 	eorseq	ip, r5, r8
     37c:	50000108 	andpl	r0, r0, r8, lsl #2
     380:	080035c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, sp}
     384:	080035cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp}
     388:	00540001 	subseq	r0, r4, r1
     38c:	00000000 	andeq	r0, r0, r0
     390:	ba000000 	blt	398 <_Minimum_Stack_Size+0x298>
     394:	c2080035 	andgt	r0, r8, #53	; 0x35
     398:	01080035 	tsteq	r8, r5, lsr r0
     39c:	35c25100 	strbcc	r5, [r2, #256]	; 0x100
     3a0:	35c50800 	strbcc	r0, [r5, #2048]	; 0x800
     3a4:	00010800 	andeq	r0, r1, r0, lsl #16
     3a8:	0035c550 	eorseq	ip, r5, r0, asr r5
     3ac:	0035cc08 	eorseq	ip, r5, r8, lsl #24
     3b0:	f3000408 	vshl.u8	d0, d8, d0
     3b4:	009f5101 	addseq	r5, pc, r1, lsl #2
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	ba000000 	blt	3c4 <_Minimum_Stack_Size+0x2c4>
     3c0:	c5080035 	strgt	r0, [r8, #-53]	; 0x35
     3c4:	01080035 	tsteq	r8, r5, lsr r0
     3c8:	35c55200 	strbcc	r5, [r5, #512]	; 0x200
     3cc:	35cc0800 	strbcc	r0, [ip, #2048]	; 0x800
     3d0:	00040800 	andeq	r0, r4, r0, lsl #16
     3d4:	9f5201f3 	svcls	0x005201f3
	...
     3e0:	080035cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp}
     3e4:	080035d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, ip, sp}
     3e8:	d5500001 	ldrble	r0, [r0, #-1]
     3ec:	00080035 	andeq	r0, r8, r5, lsr r0
     3f0:	04080036 	streq	r0, [r8], #-54	; 0x36
     3f4:	5001f300 	andpl	pc, r1, r0, lsl #6
     3f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3fc:	00000000 	andeq	r0, r0, r0
     400:	0035de00 	eorseq	sp, r5, r0, lsl #28
     404:	0035e208 	eorseq	lr, r5, r8, lsl #4
     408:	50000108 	andpl	r0, r0, r8, lsl #2
     40c:	080035e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, ip, sp}
     410:	080035f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, sp}
     414:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
     418:	00080035 	andeq	r0, r8, r5, lsr r0
     41c:	01080036 	tsteq	r8, r6, lsr r0
     420:	00005000 	andeq	r5, r0, r0
     424:	00000000 	andeq	r0, r0, r0
     428:	36000000 	strcc	r0, [r0], -r0
     42c:	36090800 	strcc	r0, [r9], -r0, lsl #16
     430:	00010800 	andeq	r0, r1, r0, lsl #16
     434:	00360950 	eorseq	r0, r6, r0, asr r9
     438:	00363408 	eorseq	r3, r6, r8, lsl #8
     43c:	f3000408 	vshl.u8	d0, d8, d0
     440:	009f5001 	addseq	r5, pc, r1
     444:	00000000 	andeq	r0, r0, r0
     448:	12000000 	andne	r0, r0, #0
     44c:	16080036 			; <UNDEFINED> instruction: 0x16080036
     450:	01080036 	tsteq	r8, r6, lsr r0
     454:	36165000 	ldrcc	r5, [r6], -r0
     458:	36240800 	strtcc	r0, [r4], -r0, lsl #16
     45c:	00010800 	andeq	r0, r1, r0, lsl #16
     460:	00362a54 	eorseq	r2, r6, r4, asr sl
     464:	00363408 	eorseq	r3, r6, r8, lsl #8
     468:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     474:	08003634 	stmdaeq	r0, {r2, r4, r5, r9, sl, ip, sp}
     478:	0800363d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, ip, sp}
     47c:	3d500001 	ldclcc	0, cr0, [r0, #-4]
     480:	6c080036 	stcvs	0, cr0, [r8], {54}	; 0x36
     484:	04080036 	streq	r0, [r8], #-54	; 0x36
     488:	5001f300 	andpl	pc, r1, r0, lsl #6
     48c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     490:	00000000 	andeq	r0, r0, r0
     494:	00363400 	eorseq	r3, r6, r0, lsl #8
     498:	00363a08 	eorseq	r3, r6, r8, lsl #20
     49c:	51000108 	tstpl	r0, r8, lsl #2
     4a0:	0800363a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, ip, sp}
     4a4:	08003648 	stmdaeq	r0, {r3, r6, r9, sl, ip, sp}
     4a8:	48540001 	ldmdami	r4, {r0}^
     4ac:	6c080036 	stcvs	0, cr0, [r8], {54}	; 0x36
     4b0:	04080036 	streq	r0, [r8], #-54	; 0x36
     4b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     4b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	00364800 	eorseq	r4, r6, r0, lsl #16
     4c4:	00364c08 	eorseq	r4, r6, r8, lsl #24
     4c8:	50000108 	andpl	r0, r0, r8, lsl #2
     4cc:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
     4d0:	0800365a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, sp}
     4d4:	60540001 	subsvs	r0, r4, r1
     4d8:	6c080036 	stcvs	0, cr0, [r8], {54}	; 0x36
     4dc:	01080036 	tsteq	r8, r6, lsr r0
     4e0:	00005000 	andeq	r5, r0, r0
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	366c0000 	strbtcc	r0, [ip], -r0
     4ec:	36750800 	ldrbtcc	r0, [r5], -r0, lsl #16
     4f0:	00010800 	andeq	r0, r1, r0, lsl #16
     4f4:	00367550 	eorseq	r7, r6, r0, asr r5
     4f8:	0036a408 	eorseq	sl, r6, r8, lsl #8
     4fc:	f3000408 	vshl.u8	d0, d8, d0
     500:	009f5001 	addseq	r5, pc, r1
     504:	00000000 	andeq	r0, r0, r0
     508:	6c000000 	stcvs	0, cr0, [r0], {-0}
     50c:	72080036 	andvc	r0, r8, #54	; 0x36
     510:	01080036 	tsteq	r8, r6, lsr r0
     514:	36725100 	ldrbtcc	r5, [r2], -r0, lsl #2
     518:	36800800 	strcc	r0, [r0], r0, lsl #16
     51c:	00010800 	andeq	r0, r1, r0, lsl #16
     520:	00368054 	eorseq	r8, r6, r4, asr r0
     524:	0036a408 	eorseq	sl, r6, r8, lsl #8
     528:	f3000408 	vshl.u8	d0, d8, d0
     52c:	009f5101 	addseq	r5, pc, r1, lsl #2
     530:	00000000 	andeq	r0, r0, r0
     534:	80000000 	andhi	r0, r0, r0
     538:	84080036 	strhi	r0, [r8], #-54	; 0x36
     53c:	01080036 	tsteq	r8, r6, lsr r0
     540:	36845000 	strcc	r5, [r4], r0
     544:	36920800 	ldrcc	r0, [r2], r0, lsl #16
     548:	00010800 	andeq	r0, r1, r0, lsl #16
     54c:	00369854 	eorseq	r9, r6, r4, asr r8
     550:	0036a408 	eorseq	sl, r6, r8, lsl #8
     554:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     560:	080036a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip, sp}
     564:	080036ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip, sp}
     568:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
     56c:	d8080036 	stmdale	r8, {r1, r2, r4, r5}
     570:	01080036 	tsteq	r8, r6, lsr r0
     574:	00005400 	andeq	r5, r0, r0, lsl #8
     578:	00000000 	andeq	r0, r0, r0
     57c:	36a40000 	strtcc	r0, [r4], r0
     580:	36ac0800 	strtcc	r0, [ip], r0, lsl #16
     584:	00010800 	andeq	r0, r1, r0, lsl #16
     588:	0036ac51 	eorseq	sl, r6, r1, asr ip
     58c:	0036d808 	eorseq	sp, r6, r8, lsl #16
     590:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
     59c:	080036a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip, sp}
     5a0:	080036b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r9, sl, ip, sp}
     5a4:	b3520001 	cmplt	r2, #1
     5a8:	d8080036 	stmdale	r8, {r1, r2, r4, r5}
     5ac:	01080036 	tsteq	r8, r6, lsr r0
     5b0:	00005500 	andeq	r5, r0, r0, lsl #10
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	36d80000 	ldrbcc	r0, [r8], r0
     5bc:	36e20800 	strbtcc	r0, [r2], r0, lsl #16
     5c0:	00010800 	andeq	r0, r1, r0, lsl #16
     5c4:	0036e250 	eorseq	lr, r6, r0, asr r2
     5c8:	00371408 	eorseq	r1, r7, r8, lsl #8
     5cc:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     5d8:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
     5dc:	080036e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip, sp}
     5e0:	e0510001 	subs	r0, r1, r1
     5e4:	14080036 	strne	r0, [r8], #-54	; 0x36
     5e8:	01080037 	tsteq	r8, r7, lsr r0
     5ec:	00005600 	andeq	r5, r0, r0, lsl #12
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	36d80000 	ldrbcc	r0, [r8], r0
     5f8:	36e70800 	strbtcc	r0, [r7], r0, lsl #16
     5fc:	00010800 	andeq	r0, r1, r0, lsl #16
     600:	0036e752 	eorseq	lr, r6, r2, asr r7
     604:	00371408 	eorseq	r1, r7, r8, lsl #8
     608:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     614:	08003714 	stmdaeq	r0, {r2, r4, r8, r9, sl, ip, sp}
     618:	0800371d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, ip, sp}
     61c:	1d500001 	ldclne	0, cr0, [r0, #-4]
     620:	4c080037 	stcmi	0, cr0, [r8], {55}	; 0x37
     624:	04080037 	streq	r0, [r8], #-55	; 0x37
     628:	5001f300 	andpl	pc, r1, r0, lsl #6
     62c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     630:	00000000 	andeq	r0, r0, r0
     634:	00371400 	eorseq	r1, r7, r0, lsl #8
     638:	00371a08 	eorseq	r1, r7, r8, lsl #20
     63c:	51000108 	tstpl	r0, r8, lsl #2
     640:	0800371a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, ip, sp}
     644:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     648:	28540001 	ldmdacs	r4, {r0}^
     64c:	4c080037 	stcmi	0, cr0, [r8], {55}	; 0x37
     650:	04080037 	streq	r0, [r8], #-55	; 0x37
     654:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     658:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     65c:	00000000 	andeq	r0, r0, r0
     660:	00372800 	eorseq	r2, r7, r0, lsl #16
     664:	00372c08 	eorseq	r2, r7, r8, lsl #24
     668:	50000108 	andpl	r0, r0, r8, lsl #2
     66c:	0800372c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip, sp}
     670:	0800373a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, ip, sp}
     674:	40540001 	subsmi	r0, r4, r1
     678:	4c080037 	stcmi	0, cr0, [r8], {55}	; 0x37
     67c:	01080037 	tsteq	r8, r7, lsr r0
     680:	00005000 	andeq	r5, r0, r0
     684:	00000000 	andeq	r0, r0, r0
     688:	374c0000 	strbcc	r0, [ip, -r0]
     68c:	37550800 	ldrbcc	r0, [r5, -r0, lsl #16]
     690:	00010800 	andeq	r0, r1, r0, lsl #16
     694:	00375550 	eorseq	r5, r7, r0, asr r5
     698:	00378408 	eorseq	r8, r7, r8, lsl #8
     69c:	f3000408 	vshl.u8	d0, d8, d0
     6a0:	009f5001 	addseq	r5, pc, r1
     6a4:	00000000 	andeq	r0, r0, r0
     6a8:	4c000000 	stcmi	0, cr0, [r0], {-0}
     6ac:	52080037 	andpl	r0, r8, #55	; 0x37
     6b0:	01080037 	tsteq	r8, r7, lsr r0
     6b4:	37525100 	ldrbcc	r5, [r2, -r0, lsl #2]
     6b8:	37600800 	strbcc	r0, [r0, -r0, lsl #16]!
     6bc:	00010800 	andeq	r0, r1, r0, lsl #16
     6c0:	00376054 	eorseq	r6, r7, r4, asr r0
     6c4:	00378408 	eorseq	r8, r7, r8, lsl #8
     6c8:	f3000408 	vshl.u8	d0, d8, d0
     6cc:	009f5101 	addseq	r5, pc, r1, lsl #2
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	60000000 	andvs	r0, r0, r0
     6d8:	64080037 	strvs	r0, [r8], #-55	; 0x37
     6dc:	01080037 	tsteq	r8, r7, lsr r0
     6e0:	37645000 	strbcc	r5, [r4, -r0]!
     6e4:	37720800 	ldrbcc	r0, [r2, -r0, lsl #16]!
     6e8:	00010800 	andeq	r0, r1, r0, lsl #16
     6ec:	00377854 	eorseq	r7, r7, r4, asr r8
     6f0:	00378408 	eorseq	r8, r7, r8, lsl #8
     6f4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     700:	08003784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, sp}
     704:	0800378d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, ip, sp}
     708:	8d500001 	ldclhi	0, cr0, [r0, #-4]
     70c:	bc080037 	stclt	0, cr0, [r8], {55}	; 0x37
     710:	04080037 	streq	r0, [r8], #-55	; 0x37
     714:	5001f300 	andpl	pc, r1, r0, lsl #6
     718:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     71c:	00000000 	andeq	r0, r0, r0
     720:	00378400 	eorseq	r8, r7, r0, lsl #8
     724:	00378a08 	eorseq	r8, r7, r8, lsl #20
     728:	51000108 	tstpl	r0, r8, lsl #2
     72c:	0800378a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, ip, sp}
     730:	08003798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, sp}
     734:	98540001 	ldmdals	r4, {r0}^
     738:	bc080037 	stclt	0, cr0, [r8], {55}	; 0x37
     73c:	04080037 	streq	r0, [r8], #-55	; 0x37
     740:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     744:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     748:	00000000 	andeq	r0, r0, r0
     74c:	00379800 	eorseq	r9, r7, r0, lsl #16
     750:	00379c08 	eorseq	r9, r7, r8, lsl #24
     754:	50000108 	andpl	r0, r0, r8, lsl #2
     758:	0800379c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip, sp}
     75c:	080037aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip, sp}
     760:	b0540001 	subslt	r0, r4, r1
     764:	bc080037 	stclt	0, cr0, [r8], {55}	; 0x37
     768:	01080037 	tsteq	r8, r7, lsr r0
     76c:	00005000 	andeq	r5, r0, r0
     770:	00000000 	andeq	r0, r0, r0
     774:	37bc0000 	ldrcc	r0, [ip, r0]!
     778:	37c50800 	strbcc	r0, [r5, r0, lsl #16]
     77c:	00010800 	andeq	r0, r1, r0, lsl #16
     780:	0037c550 	eorseq	ip, r7, r0, asr r5
     784:	0037f408 	eorseq	pc, r7, r8, lsl #8
     788:	f3000408 	vshl.u8	d0, d8, d0
     78c:	009f5001 	addseq	r5, pc, r1
     790:	00000000 	andeq	r0, r0, r0
     794:	bc000000 	stclt	0, cr0, [r0], {-0}
     798:	c2080037 	andgt	r0, r8, #55	; 0x37
     79c:	01080037 	tsteq	r8, r7, lsr r0
     7a0:	37c25100 	strbcc	r5, [r2, r0, lsl #2]
     7a4:	37d00800 	ldrbcc	r0, [r0, r0, lsl #16]
     7a8:	00010800 	andeq	r0, r1, r0, lsl #16
     7ac:	0037d054 	eorseq	sp, r7, r4, asr r0
     7b0:	0037f408 	eorseq	pc, r7, r8, lsl #8
     7b4:	f3000408 	vshl.u8	d0, d8, d0
     7b8:	009f5101 	addseq	r5, pc, r1, lsl #2
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	d0000000 	andle	r0, r0, r0
     7c4:	d4080037 	strle	r0, [r8], #-55	; 0x37
     7c8:	01080037 	tsteq	r8, r7, lsr r0
     7cc:	37d45000 	ldrbcc	r5, [r4, r0]
     7d0:	37e20800 	strbcc	r0, [r2, r0, lsl #16]!
     7d4:	00010800 	andeq	r0, r1, r0, lsl #16
     7d8:	0037e854 	eorseq	lr, r7, r4, asr r8
     7dc:	0037f408 	eorseq	pc, r7, r8, lsl #8
     7e0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     7ec:	080037f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     7f0:	080037fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     7f4:	fd500001 	ldc2l	0, cr0, [r0, #-4]
     7f8:	2c080037 	stccs	0, cr0, [r8], {55}	; 0x37
     7fc:	04080038 	streq	r0, [r8], #-56	; 0x38
     800:	5001f300 	andpl	pc, r1, r0, lsl #6
     804:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     808:	00000000 	andeq	r0, r0, r0
     80c:	0037f400 	eorseq	pc, r7, r0, lsl #8
     810:	0037fa08 	eorseq	pc, r7, r8, lsl #20
     814:	51000108 	tstpl	r0, r8, lsl #2
     818:	080037fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     81c:	08003808 	stmdaeq	r0, {r3, fp, ip, sp}
     820:	08540001 	ldmdaeq	r4, {r0}^
     824:	2c080038 	stccs	0, cr0, [r8], {56}	; 0x38
     828:	04080038 	streq	r0, [r8], #-56	; 0x38
     82c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     830:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     834:	00000000 	andeq	r0, r0, r0
     838:	00380800 	eorseq	r0, r8, r0, lsl #16
     83c:	00380c08 	eorseq	r0, r8, r8, lsl #24
     840:	50000108 	andpl	r0, r0, r8, lsl #2
     844:	0800380c 	stmdaeq	r0, {r2, r3, fp, ip, sp}
     848:	0800381a 	stmdaeq	r0, {r1, r3, r4, fp, ip, sp}
     84c:	20540001 	subscs	r0, r4, r1
     850:	2c080038 	stccs	0, cr0, [r8], {56}	; 0x38
     854:	01080038 	tsteq	r8, r8, lsr r0
     858:	00005000 	andeq	r5, r0, r0
     85c:	00000000 	andeq	r0, r0, r0
     860:	382c0000 	stmdacc	ip!, {}	; <UNPREDICTABLE>
     864:	38350800 	ldmdacc	r5!, {fp}
     868:	00010800 	andeq	r0, r1, r0, lsl #16
     86c:	00383550 	eorseq	r3, r8, r0, asr r5
     870:	00386408 	eorseq	r6, r8, r8, lsl #8
     874:	f3000408 	vshl.u8	d0, d8, d0
     878:	009f5001 	addseq	r5, pc, r1
     87c:	00000000 	andeq	r0, r0, r0
     880:	2c000000 	stccs	0, cr0, [r0], {-0}
     884:	32080038 	andcc	r0, r8, #56	; 0x38
     888:	01080038 	tsteq	r8, r8, lsr r0
     88c:	38325100 	ldmdacc	r2!, {r8, ip, lr}
     890:	38400800 	stmdacc	r0, {fp}^
     894:	00010800 	andeq	r0, r1, r0, lsl #16
     898:	00384054 	eorseq	r4, r8, r4, asr r0
     89c:	00386408 	eorseq	r6, r8, r8, lsl #8
     8a0:	f3000408 	vshl.u8	d0, d8, d0
     8a4:	009f5101 	addseq	r5, pc, r1, lsl #2
     8a8:	00000000 	andeq	r0, r0, r0
     8ac:	40000000 	andmi	r0, r0, r0
     8b0:	44080038 	strmi	r0, [r8], #-56	; 0x38
     8b4:	01080038 	tsteq	r8, r8, lsr r0
     8b8:	38445000 	stmdacc	r4, {ip, lr}^
     8bc:	38520800 	ldmdacc	r2, {fp}^
     8c0:	00010800 	andeq	r0, r1, r0, lsl #16
     8c4:	00385854 	eorseq	r5, r8, r4, asr r8
     8c8:	00386408 	eorseq	r6, r8, r8, lsl #8
     8cc:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     8d8:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
     8dc:	0800386d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, ip, sp}
     8e0:	6d500001 	ldclvs	0, cr0, [r0, #-4]
     8e4:	9c080038 	stcls	0, cr0, [r8], {56}	; 0x38
     8e8:	04080038 	streq	r0, [r8], #-56	; 0x38
     8ec:	5001f300 	andpl	pc, r1, r0, lsl #6
     8f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	00386400 	eorseq	r6, r8, r0, lsl #8
     8fc:	00386a08 	eorseq	r6, r8, r8, lsl #20
     900:	51000108 	tstpl	r0, r8, lsl #2
     904:	0800386a 	stmdaeq	r0, {r1, r3, r5, r6, fp, ip, sp}
     908:	08003878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, sp}
     90c:	78540001 	ldmdavc	r4, {r0}^
     910:	9c080038 	stcls	0, cr0, [r8], {56}	; 0x38
     914:	04080038 	streq	r0, [r8], #-56	; 0x38
     918:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     91c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     920:	00000000 	andeq	r0, r0, r0
     924:	00387800 	eorseq	r7, r8, r0, lsl #16
     928:	00387c08 	eorseq	r7, r8, r8, lsl #24
     92c:	50000108 	andpl	r0, r0, r8, lsl #2
     930:	0800387c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, ip, sp}
     934:	0800388a 	stmdaeq	r0, {r1, r3, r7, fp, ip, sp}
     938:	90540001 	subsls	r0, r4, r1
     93c:	9c080038 	stcls	0, cr0, [r8], {56}	; 0x38
     940:	01080038 	tsteq	r8, r8, lsr r0
     944:	00005000 	andeq	r5, r0, r0
     948:	00000000 	andeq	r0, r0, r0
     94c:	389c0000 	ldmcc	ip, {}	; <UNPREDICTABLE>
     950:	38a50800 	stmiacc	r5!, {fp}
     954:	00010800 	andeq	r0, r1, r0, lsl #16
     958:	0038a550 	eorseq	sl, r8, r0, asr r5
     95c:	0038d408 	eorseq	sp, r8, r8, lsl #8
     960:	f3000408 	vshl.u8	d0, d8, d0
     964:	009f5001 	addseq	r5, pc, r1
     968:	00000000 	andeq	r0, r0, r0
     96c:	9c000000 	stcls	0, cr0, [r0], {-0}
     970:	a2080038 	andge	r0, r8, #56	; 0x38
     974:	01080038 	tsteq	r8, r8, lsr r0
     978:	38a25100 	stmiacc	r2!, {r8, ip, lr}
     97c:	38b00800 	ldmcc	r0!, {fp}
     980:	00010800 	andeq	r0, r1, r0, lsl #16
     984:	0038b054 	eorseq	fp, r8, r4, asr r0
     988:	0038d408 	eorseq	sp, r8, r8, lsl #8
     98c:	f3000408 	vshl.u8	d0, d8, d0
     990:	009f5101 	addseq	r5, pc, r1, lsl #2
     994:	00000000 	andeq	r0, r0, r0
     998:	b0000000 	andlt	r0, r0, r0
     99c:	b4080038 	strlt	r0, [r8], #-56	; 0x38
     9a0:	01080038 	tsteq	r8, r8, lsr r0
     9a4:	38b45000 	ldmcc	r4!, {ip, lr}
     9a8:	38c20800 	stmiacc	r2, {fp}^
     9ac:	00010800 	andeq	r0, r1, r0, lsl #16
     9b0:	0038c854 	eorseq	ip, r8, r4, asr r8
     9b4:	0038d408 	eorseq	sp, r8, r8, lsl #8
     9b8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     9c4:	080038d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, ip, sp}
     9c8:	080038dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip, sp}
     9cc:	dd500001 	ldclle	0, cr0, [r0, #-4]
     9d0:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
     9d4:	04080039 	streq	r0, [r8], #-57	; 0x39
     9d8:	5001f300 	andpl	pc, r1, r0, lsl #6
     9dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0038d400 	eorseq	sp, r8, r0, lsl #8
     9e8:	0038da08 	eorseq	sp, r8, r8, lsl #20
     9ec:	51000108 	tstpl	r0, r8, lsl #2
     9f0:	080038da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, ip, sp}
     9f4:	080038e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, sp}
     9f8:	e8540001 	ldmda	r4, {r0}^
     9fc:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
     a00:	04080039 	streq	r0, [r8], #-57	; 0x39
     a04:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a0c:	00000000 	andeq	r0, r0, r0
     a10:	0038e800 	eorseq	lr, r8, r0, lsl #16
     a14:	0038ec08 	eorseq	lr, r8, r8, lsl #24
     a18:	50000108 	andpl	r0, r0, r8, lsl #2
     a1c:	080038ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, sp}
     a20:	080038fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip, sp}
     a24:	00540001 	subseq	r0, r4, r1
     a28:	0c080039 	stceq	0, cr0, [r8], {57}	; 0x39
     a2c:	01080039 	tsteq	r8, r9, lsr r0
     a30:	00005000 	andeq	r5, r0, r0
     a34:	00000000 	andeq	r0, r0, r0
     a38:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
     a3c:	39150800 	ldmdbcc	r5, {fp}
     a40:	00010800 	andeq	r0, r1, r0, lsl #16
     a44:	00391550 	eorseq	r1, r9, r0, asr r5
     a48:	00394008 	eorseq	r4, r9, r8
     a4c:	f3000408 	vshl.u8	d0, d8, d0
     a50:	009f5001 	addseq	r5, pc, r1
     a54:	00000000 	andeq	r0, r0, r0
     a58:	0c000000 	stceq	0, cr0, [r0], {-0}
     a5c:	12080039 	andne	r0, r8, #57	; 0x39
     a60:	01080039 	tsteq	r8, r9, lsr r0
     a64:	39125100 	ldmdbcc	r2, {r8, ip, lr}
     a68:	39150800 	ldmdbcc	r5, {fp}
     a6c:	00010800 	andeq	r0, r1, r0, lsl #16
     a70:	00391552 	eorseq	r1, r9, r2, asr r5
     a74:	00394008 	eorseq	r4, r9, r8
     a78:	f3000408 	vshl.u8	d0, d8, d0
     a7c:	009f5101 	addseq	r5, pc, r1, lsl #2
     a80:	00000000 	andeq	r0, r0, r0
     a84:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     a88:	22080039 	andcs	r0, r8, #57	; 0x39
     a8c:	01080039 	tsteq	r8, r9, lsr r0
     a90:	39225000 	stmdbcc	r2!, {ip, lr}
     a94:	39300800 	ldmdbcc	r0!, {fp}
     a98:	00010800 	andeq	r0, r1, r0, lsl #16
     a9c:	00393654 	eorseq	r3, r9, r4, asr r6
     aa0:	00394008 	eorseq	r4, r9, r8
     aa4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     ab0:	08003940 	stmdaeq	r0, {r6, r8, fp, ip, sp}
     ab4:	08003946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip, sp}
     ab8:	46500001 	ldrbmi	r0, [r0], -r1
     abc:	5a080039 	bpl	200ba8 <__Stack_Size+0x2007a8>
     ac0:	04080039 	streq	r0, [r8], #-57	; 0x39
     ac4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ac8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	00394000 	eorseq	r4, r9, r0
     ad4:	00394608 	eorseq	r4, r9, r8, lsl #12
     ad8:	51000108 	tstpl	r0, r8, lsl #2
     adc:	08003946 	stmdaeq	r0, {r1, r2, r6, r8, fp, ip, sp}
     ae0:	0800395a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, ip, sp}
     ae4:	00540001 	subseq	r0, r4, r1
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	46000000 	strmi	r0, [r0], -r0
     af0:	54080039 	strpl	r0, [r8], #-57	; 0x39
     af4:	03080039 	movweq	r0, #32825	; 0x8039
     af8:	9fff0900 	svcls	0x00ff0900
     afc:	08003954 	stmdaeq	r0, {r2, r4, r6, r8, fp, ip, sp}
     b00:	0800395a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, ip, sp}
     b04:	00500001 	subseq	r0, r0, r1
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     b10:	9e08003a 	mcrls	0, 0, r0, cr8, cr10, {1}
     b14:	0108003a 	tsteq	r8, sl, lsr r0
     b18:	3a9e5000 	bcc	fe794b20 <SCS_BASE+0x1e786b20>
     b1c:	3aa80800 	bcc	fea02b24 <SCS_BASE+0x1e9f4b24>
     b20:	00010800 	andeq	r0, r1, r0, lsl #16
     b24:	003aa854 	eorseq	sl, sl, r4, asr r8
     b28:	003ab708 	eorseq	fp, sl, r8, lsl #14
     b2c:	03000508 	movweq	r0, #1288	; 0x508
     b30:	20000124 	andcs	r0, r0, r4, lsr #2
     b34:	08003ab7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, fp, ip, sp}
     b38:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
     b3c:	01f30004 	mvnseq	r0, r4
     b40:	00009f50 	andeq	r9, r0, r0, asr pc
     b44:	00000000 	andeq	r0, r0, r0
     b48:	3ac80000 	bcc	ff200b50 <SCS_BASE+0x1f1f2b50>
     b4c:	3ad50800 	bcc	ff542b54 <SCS_BASE+0x1f534b54>
     b50:	00010800 	andeq	r0, r1, r0, lsl #16
     b54:	003ad550 	eorseq	sp, sl, r0, asr r5
     b58:	003afa08 	eorseq	pc, sl, r8, lsl #20
     b5c:	f3000408 	vshl.u8	d0, d8, d0
     b60:	009f5001 	addseq	r5, pc, r1
     b64:	00000000 	andeq	r0, r0, r0
     b68:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     b6c:	d008003a 	andle	r0, r8, sl, lsr r0
     b70:	0108003a 	tsteq	r8, sl, lsr r0
     b74:	3ad05100 	bcc	ff414f7c <SCS_BASE+0x1f406f7c>
     b78:	3ae00800 	bcc	ff802b80 <SCS_BASE+0x1f7f4b80>
     b7c:	00010800 	andeq	r0, r1, r0, lsl #16
     b80:	003ae054 	eorseq	lr, sl, r4, asr r0
     b84:	003afa08 	eorseq	pc, sl, r8, lsl #20
     b88:	f3000408 	vshl.u8	d0, d8, d0
     b8c:	009f5101 	addseq	r5, pc, r1, lsl #2
     b90:	00000000 	andeq	r0, r0, r0
     b94:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     b98:	d508003a 	strle	r0, [r8, #-58]	; 0x3a
     b9c:	0108003a 	tsteq	r8, sl, lsr r0
     ba0:	3ad55200 	bcc	ff5553a8 <SCS_BASE+0x1f5473a8>
     ba4:	3af40800 	bcc	ffd02bac <SCS_BASE+0x1fcf4bac>
     ba8:	00010800 	andeq	r0, r1, r0, lsl #16
     bac:	003af456 	eorseq	pc, sl, r6, asr r4	; <UNPREDICTABLE>
     bb0:	003afa08 	eorseq	pc, sl, r8, lsl #20
     bb4:	f3000408 	vshl.u8	d0, d8, d0
     bb8:	009f5201 	addseq	r5, pc, r1, lsl #4
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     bc4:	e008003a 	and	r0, r8, sl, lsr r0
     bc8:	0208003a 	andeq	r0, r8, #58	; 0x3a
     bcc:	e09f3000 	adds	r3, pc, r0
     bd0:	f408003a 	vst4.8	{d0-d3}, [r8 :256], sl
     bd4:	0108003a 	tsteq	r8, sl, lsr r0
     bd8:	00005400 	andeq	r5, r0, r0, lsl #8
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	3bc20000 	blcc	ff080be8 <SCS_BASE+0x1f072be8>
     be4:	3bc60800 	blcc	ff182bec <SCS_BASE+0x1f174bec>
     be8:	00020800 	andeq	r0, r2, r0, lsl #16
     bec:	3bc69f30 	blcc	ff1a88b4 <SCS_BASE+0x1f19a8b4>
     bf0:	3ca60800 	stccc	8, cr0, [r6]
     bf4:	00050800 	andeq	r0, r5, r0, lsl #16
     bf8:	1c007432 	cfstrsne	mvf7, [r0], {50}	; 0x32
     bfc:	003ca69f 	mlaseq	ip, pc, r6, sl	; <UNPREDICTABLE>
     c00:	003cac08 	eorseq	sl, ip, r8, lsl #24
     c04:	33000508 	movwcc	r0, #1288	; 0x508
     c08:	9f1c0074 	svcls	0x001c0074
     c0c:	08003cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, ip, sp}
     c10:	08003cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, sp}
     c14:	74330005 	ldrtvc	r0, [r3], #-5
     c18:	009f1c00 	addseq	r1, pc, r0, lsl #24
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	c4000000 	strgt	r0, [r0], #-0
     c24:	d208003c 	andle	r0, r8, #60	; 0x3c
     c28:	0108003c 	tsteq	r8, ip, lsr r0
     c2c:	3cd25000 	ldclcc	0, cr5, [r2], {0}
     c30:	3cf40800 	ldclcc	8, cr0, [r4]
     c34:	00010800 	andeq	r0, r1, r0, lsl #16
     c38:	003cf454 	eorseq	pc, ip, r4, asr r4	; <UNPREDICTABLE>
     c3c:	003cf808 	eorseq	pc, ip, r8, lsl #16
     c40:	f3000408 	vshl.u8	d0, d8, d0
     c44:	009f5001 	addseq	r5, pc, r1
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	c4000000 	strgt	r0, [r0], #-0
     c50:	d008003c 	andle	r0, r8, ip, lsr r0
     c54:	0108003c 	tsteq	r8, ip, lsr r0
     c58:	3cd05100 	ldfcce	f5, [r0], {0}
     c5c:	3cf40800 	ldclcc	8, cr0, [r4]
     c60:	00010800 	andeq	r0, r1, r0, lsl #16
     c64:	003cf456 	eorseq	pc, ip, r6, asr r4	; <UNPREDICTABLE>
     c68:	003cf808 	eorseq	pc, ip, r8, lsl #16
     c6c:	f3000408 	vshl.u8	d0, d8, d0
     c70:	009f5101 	addseq	r5, pc, r1, lsl #2
     c74:	00000000 	andeq	r0, r0, r0
     c78:	c4000000 	strgt	r0, [r0], #-0
     c7c:	d508003c 	strle	r0, [r8, #-60]	; 0x3c
     c80:	0108003c 	tsteq	r8, ip, lsr r0
     c84:	3cd55200 	lfmcc	f5, 2, [r5], {0}
     c88:	3cf40800 	ldclcc	8, cr0, [r4]
     c8c:	00010800 	andeq	r0, r1, r0, lsl #16
     c90:	003cf455 	eorseq	pc, ip, r5, asr r4	; <UNPREDICTABLE>
     c94:	003cf808 	eorseq	pc, ip, r8, lsl #16
     c98:	f3000408 	vshl.u8	d0, d8, d0
     c9c:	009f5201 	addseq	r5, pc, r1, lsl #4
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     ca8:	0008003c 	andeq	r0, r8, ip, lsr r0
     cac:	0108003d 	tsteq	r8, sp, lsr r0
     cb0:	3d005000 	stccc	0, cr5, [r0, #-0]
     cb4:	3d200800 	stccc	8, cr0, [r0, #-0]
     cb8:	00010800 	andeq	r0, r1, r0, lsl #16
     cbc:	003d2054 	eorseq	r2, sp, r4, asr r0
     cc0:	003d2808 	eorseq	r2, sp, r8, lsl #16
     cc4:	f3000408 	vshl.u8	d0, d8, d0
     cc8:	289f5001 	ldmcs	pc, {r0, ip, lr}	; <UNPREDICTABLE>
     ccc:	2a08003d 	bcs	200dc8 <__Stack_Size+0x2009c8>
     cd0:	0108003d 	tsteq	r8, sp, lsr r0
     cd4:	00005400 	andeq	r5, r0, r0, lsl #8
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	3cf80000 	ldclcc	0, cr0, [r8]
     ce0:	3d030800 	stccc	8, cr0, [r3, #-0]
     ce4:	00010800 	andeq	r0, r1, r0, lsl #16
     ce8:	003d0351 	eorseq	r0, sp, r1, asr r3
     cec:	003d2008 	eorseq	r2, sp, r8
     cf0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     cf4:	08003d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp}
     cf8:	08003d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip, sp}
     cfc:	01f30004 	mvnseq	r0, r4
     d00:	3d289f51 	stccc	15, cr9, [r8, #-324]!	; 0xfffffebc
     d04:	3d2a0800 	stccc	8, cr0, [sl, #-0]
     d08:	00010800 	andeq	r0, r1, r0, lsl #16
     d0c:	00000055 	andeq	r0, r0, r5, asr r0
     d10:	00000000 	andeq	r0, r0, r0
     d14:	003d0800 	eorseq	r0, sp, r0, lsl #16
     d18:	003d2008 	eorseq	r2, sp, r8
     d1c:	54000108 	strpl	r0, [r0], #-264	; 0x108
     d20:	08003d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp}
     d24:	08003d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, ip, sp}
     d28:	01f30004 	mvnseq	r0, r4
     d2c:	00009f50 	andeq	r9, r0, r0, asr pc
     d30:	00000000 	andeq	r0, r0, r0
     d34:	3d080000 	stccc	0, cr0, [r8, #-0]
     d38:	3d200800 	stccc	8, cr0, [r0, #-0]
     d3c:	00010800 	andeq	r0, r1, r0, lsl #16
     d40:	003d2055 	eorseq	r2, sp, r5, asr r0
     d44:	003d2808 	eorseq	r2, sp, r8, lsl #16
     d48:	f3000408 	vshl.u8	d0, d8, d0
     d4c:	009f5101 	addseq	r5, pc, r1, lsl #2
     d50:	00000000 	andeq	r0, r0, r0
     d54:	2a000000 	bcs	d5c <__Stack_Size+0x95c>
     d58:	3408003d 	strcc	r0, [r8], #-61	; 0x3d
     d5c:	0108003d 	tsteq	r8, sp, lsr r0
     d60:	3d345000 	ldccc	0, cr5, [r4, #-0]
     d64:	3da40800 	stccc	8, cr0, [r4]
     d68:	00040800 	andeq	r0, r4, r0, lsl #16
     d6c:	9f5001f3 	svcls	0x005001f3
	...
     d78:	08003d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, ip, sp}
     d7c:	08003d37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, sl, fp, ip, sp}
     d80:	37510001 	ldrbcc	r0, [r1, -r1]
     d84:	9c08003d 	stcls	0, cr0, [r8], {61}	; 0x3d
     d88:	0108003d 	tsteq	r8, sp, lsr r0
     d8c:	3d9c5500 	cfldr32cc	mvfx5, [ip]
     d90:	3da40800 	stccc	8, cr0, [r4]
     d94:	00040800 	andeq	r0, r4, r0, lsl #16
     d98:	9f5101f3 	svcls	0x005101f3
	...
     da4:	08003dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip, sp}
     da8:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
     dac:	d8500001 	ldmdale	r0, {r0}^
     db0:	db08003d 	blle	200eac <__Stack_Size+0x200aac>
     db4:	0108003d 	tsteq	r8, sp, lsr r0
     db8:	3ddb5100 	ldfcce	f5, [fp]
     dbc:	3ddc0800 	ldclcc	8, cr0, [ip]
     dc0:	00040800 	andeq	r0, r4, r0, lsl #16
     dc4:	9f5001f3 	svcls	0x005001f3
	...
     dd0:	08005f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, lr}
     dd4:	08005fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
     dd8:	9f300002 	svcls	0x00300002
     ddc:	08005fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
     de0:	08005fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, lr}
     de4:	9f310002 	svcls	0x00310002
     de8:	08005fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, lr}
     dec:	08006010 	stmdaeq	r0, {r4, sp, lr}
     df0:	9f320002 	svcls	0x00320002
     df4:	08006010 	stmdaeq	r0, {r4, sp, lr}
     df8:	0800608c 	stmdaeq	r0, {r2, r3, r7, sp, lr}
     dfc:	9f330002 	svcls	0x00330002
     e00:	0800608c 	stmdaeq	r0, {r2, r3, r7, sp, lr}
     e04:	0800609c 	stmdaeq	r0, {r2, r3, r4, r7, sp, lr}
     e08:	00530001 	subseq	r0, r3, r1
     e0c:	00000000 	andeq	r0, r0, r0
     e10:	9c000000 	stcls	0, cr0, [r0], {-0}
     e14:	ba08005f 	blt	200f98 <__Stack_Size+0x200b98>
     e18:	0408005f 	streq	r0, [r8], #-95	; 0x5f
     e1c:	7eea7400 	cdpvc	4, 14, cr7, cr10, cr0, {0}
     e20:	005fba9f 			; <UNDEFINED> instruction: 0x005fba9f
     e24:	00609c08 	rsbeq	r9, r0, r8, lsl #24
     e28:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     e34:	08005fba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
     e38:	08005fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
     e3c:	96750004 	ldrbtls	r0, [r5], -r4
     e40:	5fbc9f01 	svcpl	0x00bc9f01
     e44:	609c0800 	addsvs	r0, ip, r0, lsl #16
     e48:	00010800 	andeq	r0, r1, r0, lsl #16
     e4c:	00000055 	andeq	r0, r0, r5, asr r0
     e50:	00000000 	andeq	r0, r0, r0
     e54:	00603a00 	rsbeq	r3, r0, r0, lsl #20
     e58:	00604608 	rsbeq	r4, r0, r8, lsl #12
     e5c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     e68:	0800603a 	stmdaeq	r0, {r1, r3, r4, r5, sp, lr}
     e6c:	08006046 	stmdaeq	r0, {r1, r2, r6, sp, lr}
     e70:	00540001 	subseq	r0, r4, r1
     e74:	00000000 	andeq	r0, r0, r0
     e78:	3a000000 	bcc	e80 <__Stack_Size+0xa80>
     e7c:	46080060 	strmi	r0, [r8], -r0, rrx
     e80:	03080060 	movweq	r0, #32864	; 0x8060
     e84:	9f5c9100 	svcls	0x005c9100
	...
     e94:	00000004 	andeq	r0, r0, r4
     e98:	04500001 	ldrbeq	r0, [r0], #-1
     e9c:	0c000000 	stceq	0, cr0, [r0], {-0}
     ea0:	04000000 	streq	r0, [r0], #-0
     ea4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ea8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     eb4:	00000700 	andeq	r0, r0, r0, lsl #14
     eb8:	51000100 	mrspl	r0, (UNDEF: 16)
     ebc:	00000007 	andeq	r0, r0, r7
     ec0:	0000000c 	andeq	r0, r0, ip
     ec4:	01f30004 	mvnseq	r0, r4
     ec8:	00009f51 	andeq	r9, r0, r1, asr pc
     ecc:	00000000 	andeq	r0, r0, r0
     ed0:	00140000 	andseq	r0, r4, r0
     ed4:	001c0000 	andseq	r0, ip, r0
     ed8:	00010000 	andeq	r0, r1, r0
     edc:	00001c50 	andeq	r1, r0, r0, asr ip
     ee0:	00003200 	andeq	r3, r0, r0, lsl #4
     ee4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     ef0:	00000014 	andeq	r0, r0, r4, lsl r0
     ef4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef8:	1c510001 	mrrcne	0, 0, r0, r1, cr1
     efc:	32000000 	andcc	r0, r0, #0
     f00:	01000000 	mrseq	r0, (UNDEF: 0)
     f04:	00005400 	andeq	r5, r0, r0, lsl #8
     f08:	00000000 	andeq	r0, r0, r0
     f0c:	00140000 	andseq	r0, r4, r0
     f10:	001c0000 	andseq	r0, ip, r0
     f14:	00020000 	andeq	r0, r2, r0
     f18:	001c9f30 	andseq	r9, ip, r0, lsr pc
     f1c:	00290000 	eoreq	r0, r9, r0
     f20:	00010000 	andeq	r0, r1, r0
     f24:	00002a53 	andeq	r2, r0, r3, asr sl
     f28:	00002e00 	andeq	r2, r0, r0, lsl #28
     f2c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     f30:	0000002e 	andeq	r0, r0, lr, lsr #32
     f34:	00000032 	andeq	r0, r0, r2, lsr r0
     f38:	00530001 	subseq	r0, r3, r1
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	32000000 	andcc	r0, r0, #0
     f44:	3a000000 	bcc	f4c <__Stack_Size+0xb4c>
     f48:	01000000 	mrseq	r0, (UNDEF: 0)
     f4c:	003a5000 	eorseq	r5, sl, r0
     f50:	00560000 	subseq	r0, r6, r0
     f54:	00010000 	andeq	r0, r1, r0
     f58:	00000057 	andeq	r0, r0, r7, asr r0
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	00003200 	andeq	r3, r0, r0, lsl #4
     f64:	00003a00 	andeq	r3, r0, r0, lsl #20
     f68:	51000100 	mrspl	r0, (UNDEF: 16)
     f6c:	0000003a 	andeq	r0, r0, sl, lsr r0
     f70:	00000056 	andeq	r0, r0, r6, asr r0
     f74:	00560001 	subseq	r0, r6, r1
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	32000000 	andcc	r0, r0, #0
     f80:	3a000000 	bcc	f88 <__Stack_Size+0xb88>
     f84:	02000000 	andeq	r0, r0, #0
     f88:	3a9f3000 	bcc	fe7ccf90 <SCS_BASE+0x1e7bef90>
     f8c:	3c000000 	stccc	0, cr0, [r0], {-0}
     f90:	01000000 	mrseq	r0, (UNDEF: 0)
     f94:	003c5400 	eorseq	r5, ip, r0, lsl #8
     f98:	004e0000 	subeq	r0, lr, r0
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00004e55 	andeq	r4, r0, r5, asr lr
     fa4:	00005000 	andeq	r5, r0, r0
     fa8:	54000100 	strpl	r0, [r0], #-256	; 0x100
     fac:	00000050 	andeq	r0, r0, r0, asr r0
     fb0:	00000052 	andeq	r0, r0, r2, asr r0
     fb4:	00550001 	subseq	r0, r5, r1
     fb8:	00000000 	andeq	r0, r0, r0
     fbc:	56000000 	strpl	r0, [r0], -r0
     fc0:	5a000000 	bpl	fc8 <__Stack_Size+0xbc8>
     fc4:	01000000 	mrseq	r0, (UNDEF: 0)
     fc8:	005a5000 	subseq	r5, sl, r0
     fcc:	005e0000 	subseq	r0, lr, r0
     fd0:	00040000 	andeq	r0, r4, r0
     fd4:	9f5001f3 	svcls	0x005001f3
	...
     fe4:	0000000d 	andeq	r0, r0, sp
     fe8:	0d500001 	ldcleq	0, cr0, [r0, #-4]
     fec:	2c000000 	stccs	0, cr0, [r0], {-0}
     ff0:	04000000 	streq	r0, [r0], #-0
     ff4:	5001f300 	andpl	pc, r1, r0, lsl #6
     ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1004:	00000600 	andeq	r0, r0, r0, lsl #12
    1008:	51000100 	mrspl	r0, (UNDEF: 16)
    100c:	00000006 	andeq	r0, r0, r6
    1010:	0000000a 	andeq	r0, r0, sl
    1014:	7f710003 	svcvc	0x00710003
    1018:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    101c:	00002c00 	andeq	r2, r0, r0, lsl #24
    1020:	f3000400 	vshl.u8	d0, d0, d0
    1024:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    1030:	06000000 	streq	r0, [r0], -r0
    1034:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1038:	84800c00 	strhi	r0, [r0], #3072	; 0xc00
    103c:	0171001e 	cmneq	r1, lr, lsl r0
    1040:	00069f1b 	andeq	r9, r6, fp, lsl pc
    1044:	000a0000 	andeq	r0, sl, r0
    1048:	00090000 	andeq	r0, r9, r0
    104c:	1e84800c 	cdpne	0, 8, cr8, cr4, cr12, {0}
    1050:	1b007100 	blne	1d458 <__Stack_Size+0x1d058>
    1054:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1058:	00000d00 	andeq	r0, r0, r0, lsl #26
    105c:	51000100 	mrspl	r0, (UNDEF: 16)
    1060:	0000000d 	andeq	r0, r0, sp
    1064:	0000002c 	andeq	r0, r0, ip, lsr #32
    1068:	800c000c 	andhi	r0, ip, ip
    106c:	f3001e84 	vcge.f32	d1, d16, d4
    1070:	01235101 			; <UNDEFINED> instruction: 0x01235101
    1074:	00009f1b 	andeq	r9, r0, fp, lsl pc
    1078:	00000000 	andeq	r0, r0, r0
    107c:	00640000 	rsbeq	r0, r4, r0
    1080:	00660000 	rsbeq	r0, r6, r0
    1084:	00020000 	andeq	r0, r2, r0
    1088:	00669f30 	rsbeq	r9, r6, r0, lsr pc
    108c:	00680000 	rsbeq	r0, r8, r0
    1090:	00010000 	andeq	r0, r1, r0
    1094:	00006850 	andeq	r6, r0, r0, asr r8
    1098:	00007200 	andeq	r7, r0, r0, lsl #4
    109c:	51000100 	mrspl	r0, (UNDEF: 16)
    10a0:	00000078 	andeq	r0, r0, r8, ror r0
    10a4:	0000007a 	andeq	r0, r0, sl, ror r0
    10a8:	7a500001 	bvc	14010b4 <__Stack_Size+0x1400cb4>
    10ac:	8d000000 	stchi	0, cr0, [r0, #-0]
    10b0:	01000000 	mrseq	r0, (UNDEF: 0)
    10b4:	00005100 	andeq	r5, r0, r0, lsl #2
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	00300000 	eorseq	r0, r0, r0
    10c0:	00660000 	rsbeq	r0, r6, r0
    10c4:	00020000 	andeq	r0, r2, r0
    10c8:	00669f30 	rsbeq	r9, r6, r0, lsr pc
    10cc:	00760000 	rsbseq	r0, r6, r0
    10d0:	00010000 	andeq	r0, r1, r0
    10d4:	00007853 	andeq	r7, r0, r3, asr r8
    10d8:	00007c00 	andeq	r7, r0, r0, lsl #24
    10dc:	53000100 	movwpl	r0, #256	; 0x100
	...
    10e8:	00000096 	muleq	r0, r6, r0
    10ec:	000000c2 	andeq	r0, r0, r2, asr #1
    10f0:	00540001 	subseq	r0, r4, r1
    10f4:	00000000 	andeq	r0, r0, r0
    10f8:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    10fc:	b6000000 	strlt	r0, [r0], -r0
    1100:	01000000 	mrseq	r0, (UNDEF: 0)
    1104:	00005000 	andeq	r5, r0, r0
    1108:	00000000 	andeq	r0, r0, r0
    110c:	01080000 	mrseq	r0, (UNDEF: 8)
    1110:	010e0000 	mrseq	r0, (UNDEF: 14)
    1114:	00010000 	andeq	r0, r1, r0
    1118:	00000050 	andeq	r0, r0, r0, asr r0
    111c:	00000000 	andeq	r0, r0, r0
    1120:	00012e00 	andeq	r2, r1, r0, lsl #28
    1124:	00013a00 	andeq	r3, r1, r0, lsl #20
    1128:	53000100 	movwpl	r0, #256	; 0x100
    112c:	00000162 	andeq	r0, r0, r2, ror #2
    1130:	00000190 	muleq	r0, r0, r1
    1134:	90530001 	subsls	r0, r3, r1
    1138:	92000001 	andls	r0, r0, #1
    113c:	03000001 	movweq	r0, #1
    1140:	9f017200 	svcls	0x00017200
    1144:	00000192 	muleq	r0, r2, r1
    1148:	00000194 	muleq	r0, r4, r1
    114c:	01730003 	cmneq	r3, r3
    1150:	0001949f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1154:	0001b000 	andeq	fp, r1, r0
    1158:	53000100 	movwpl	r0, #256	; 0x100
    115c:	000001ea 	andeq	r0, r0, sl, ror #3
    1160:	000001ec 	andeq	r0, r0, ip, ror #3
    1164:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1168:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    116c:	01000001 	tsteq	r0, r1
    1170:	01fe5100 	mvnseq	r5, r0, lsl #2
    1174:	02000000 	andeq	r0, r0, #0
    1178:	00010000 	andeq	r0, r1, r0
    117c:	00020050 	andeq	r0, r2, r0, asr r0
    1180:	00021000 	andeq	r1, r2, r0
    1184:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1190:	0000012e 	andeq	r0, r0, lr, lsr #2
    1194:	00000132 	andeq	r0, r0, r2, lsr r1
    1198:	94520001 	ldrbls	r0, [r2], #-1
    119c:	96000001 	strls	r0, [r0], -r1
    11a0:	01000001 	tsteq	r0, r1
    11a4:	01965000 	orrseq	r5, r6, r0
    11a8:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	0001ae52 	andeq	sl, r1, r2, asr lr
    11b4:	0001b000 	andeq	fp, r1, r0
    11b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    11c4:	000001c8 	andeq	r0, r0, r8, asr #3
    11c8:	000001ce 	andeq	r0, r0, lr, asr #3
    11cc:	00500001 	subseq	r0, r0, r1
    11d0:	00000000 	andeq	r0, r0, r0
    11d4:	ea000000 	b	11dc <__Stack_Size+0xddc>
    11d8:	fc000001 	stc2	0, cr0, [r0], {1}
    11dc:	01000001 	tsteq	r0, r1
    11e0:	01fe5300 	mvnseq	r5, r0, lsl #6
    11e4:	02000000 	andeq	r0, r0, #0
    11e8:	00010000 	andeq	r0, r1, r0
    11ec:	00020053 	andeq	r0, r2, r3, asr r0
    11f0:	00020200 	andeq	r0, r2, r0, lsl #4
    11f4:	73000400 	movwvc	r0, #1024	; 0x400
    11f8:	009f2000 	addseq	r2, pc, r0
    11fc:	00000000 	andeq	r0, r0, r0
    1200:	60000000 	andvs	r0, r0, r0
    1204:	64000002 	strvs	r0, [r0], #-2
    1208:	01000002 	tsteq	r0, r2
    120c:	02645000 	rsbeq	r5, r4, #0
    1210:	026c0000 	rsbeq	r0, ip, #0
    1214:	00090000 	andeq	r0, r9, r0
    1218:	30030070 	andcc	r0, r3, r0, ror r0
    121c:	1c200001 	stcne	0, cr0, [r0], #-4
    1220:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1224:	00000000 	andeq	r0, r0, r0
    1228:	00027800 	andeq	r7, r2, r0, lsl #16
    122c:	00028400 	andeq	r8, r2, r0, lsl #8
    1230:	50000100 	andpl	r0, r0, r0, lsl #2
    1234:	00000284 	andeq	r0, r0, r4, lsl #5
    1238:	0000028c 	andeq	r0, r0, ip, lsl #5
    123c:	01f30004 	mvnseq	r0, r4
    1240:	00009f50 	andeq	r9, r0, r0, asr pc
    1244:	00000000 	andeq	r0, r0, r0
    1248:	02980000 	addseq	r0, r8, #0
    124c:	029c0000 	addseq	r0, ip, #0
    1250:	00010000 	andeq	r0, r1, r0
    1254:	00029c50 	andeq	r9, r2, r0, asr ip
    1258:	0002a000 	andeq	sl, r2, r0
    125c:	70000900 	andvc	r0, r0, r0, lsl #18
    1260:	01300300 	teqeq	r0, r0, lsl #6
    1264:	9f1c2000 	svcls	0x001c2000
    1268:	000002a0 	andeq	r0, r0, r0, lsr #5
    126c:	000002a8 	andeq	r0, r0, r8, lsr #5
    1270:	01f30004 	mvnseq	r0, r4
    1274:	00009f50 	andeq	r9, r0, r0, asr pc
    1278:	00000000 	andeq	r0, r0, r0
    127c:	02a80000 	adceq	r0, r8, #0
    1280:	02ac0000 	adceq	r0, ip, #0
    1284:	00010000 	andeq	r0, r1, r0
    1288:	0002ac50 	andeq	sl, r2, r0, asr ip
    128c:	0002b000 	andeq	fp, r2, r0
    1290:	f3000400 	vshl.u8	d0, d0, d0
    1294:	009f5001 	addseq	r5, pc, r1
    1298:	00000000 	andeq	r0, r0, r0
    129c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    12a0:	ac000002 	stcge	0, cr0, [r0], {2}
    12a4:	0c000002 	stceq	0, cr0, [r0], {2}
    12a8:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    12ac:	ff000a24 			; <UNDEFINED> instruction: 0xff000a24
    12b0:	2200701a 	andcs	r7, r0, #26
    12b4:	0002ac9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    12b8:	0002b000 	andeq	fp, r2, r0
    12bc:	71000d00 	tstvc	r0, r0, lsl #26
    12c0:	0a243800 	beq	90f2c8 <__Stack_Size+0x90eec8>
    12c4:	f31aff00 	vpmax.f<illegal width 64>	d15, d10, d0
    12c8:	9f225001 	svcls	0x00225001
	...
    12d4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    12d8:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    12dc:	b2500001 	subslt	r0, r0, #1
    12e0:	b4000002 	strlt	r0, [r0], #-2
    12e4:	04000002 	streq	r0, [r0], #-2
    12e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    12ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12f0:	00000000 	andeq	r0, r0, r0
    12f4:	0002b000 	andeq	fp, r2, r0
    12f8:	0002b200 	andeq	fp, r2, r0, lsl #4
    12fc:	70000600 	andvc	r0, r0, r0, lsl #12
    1300:	1aff0800 	bne	fffc3308 <SCS_BASE+0x1ffb5308>
    1304:	0002b29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    1308:	0002b400 	andeq	fp, r2, r0, lsl #8
    130c:	f3000700 	vabd.u8	d0, d0, d0
    1310:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    1314:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1318:	00000000 	andeq	r0, r0, r0
    131c:	02b40000 	adcseq	r0, r4, #0
    1320:	02b80000 	adcseq	r0, r8, #0
    1324:	00010000 	andeq	r0, r1, r0
    1328:	0002b850 	andeq	fp, r2, r0, asr r8
    132c:	0002ba00 	andeq	fp, r2, r0, lsl #20
    1330:	f3000400 	vshl.u8	d0, d0, d0
    1334:	009f5001 	addseq	r5, pc, r1
    1338:	00000000 	andeq	r0, r0, r0
    133c:	b4000000 	strlt	r0, [r0], #-0
    1340:	b8000002 	stmdalt	r0, {r1}
    1344:	09000002 	stmdbeq	r0, {r1}
    1348:	0a007000 	beq	1d350 <__Stack_Size+0x1cf50>
    134c:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    1350:	02b89f25 	adcseq	r9, r8, #37, 30	; 0x94
    1354:	02ba0000 	adcseq	r0, sl, #0
    1358:	000a0000 	andeq	r0, sl, r0
    135c:	0a5001f3 	beq	1401b30 <__Stack_Size+0x1401730>
    1360:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    1364:	00009f25 	andeq	r9, r0, r5, lsr #30
    1368:	00000000 	andeq	r0, r0, r0
    136c:	02ba0000 	adcseq	r0, sl, #0
    1370:	02cf0000 	sbceq	r0, pc, #0
    1374:	00010000 	andeq	r0, r1, r0
    1378:	0002cf50 	andeq	ip, r2, r0, asr pc
    137c:	0002d400 	andeq	sp, r2, r0, lsl #8
    1380:	f3000400 	vshl.u8	d0, d0, d0
    1384:	009f5001 	addseq	r5, pc, r1
    1388:	00000000 	andeq	r0, r0, r0
    138c:	d4000000 	strle	r0, [r0], #-0
    1390:	f1000002 	cps	#2
    1394:	01000002 	tsteq	r0, r2
    1398:	02f15000 	rscseq	r5, r1, #0
    139c:	02fc0000 	rscseq	r0, ip, #0
    13a0:	00040000 	andeq	r0, r4, r0
    13a4:	9f5001f3 	svcls	0x005001f3
	...
    13b0:	000002d4 	ldrdeq	r0, [r0], -r4
    13b4:	000002f1 	strdeq	r0, [r0], -r1
    13b8:	f1510001 			; <UNDEFINED> instruction: 0xf1510001
    13bc:	fc000002 	stc2	0, cr0, [r0], {2}
    13c0:	04000002 	streq	r0, [r0], #-2
    13c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    13c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    13cc:	00000000 	andeq	r0, r0, r0
    13d0:	0002fc00 	andeq	pc, r2, r0, lsl #24
    13d4:	00030c00 	andeq	r0, r3, r0, lsl #24
    13d8:	50000100 	andpl	r0, r0, r0, lsl #2
    13dc:	0000030c 	andeq	r0, r0, ip, lsl #6
    13e0:	00000320 	andeq	r0, r0, r0, lsr #6
    13e4:	01f30004 	mvnseq	r0, r4
    13e8:	00009f50 	andeq	r9, r0, r0, asr pc
    13ec:	00000000 	andeq	r0, r0, r0
    13f0:	02fc0000 	rscseq	r0, ip, #0
    13f4:	031b0000 	tsteq	fp, #0
    13f8:	00010000 	andeq	r0, r1, r0
    13fc:	00031b51 	andeq	r1, r3, r1, asr fp
    1400:	00032000 	andeq	r2, r3, r0
    1404:	f3000400 	vshl.u8	d0, d0, d0
    1408:	009f5101 	addseq	r5, pc, r1, lsl #2
    140c:	00000000 	andeq	r0, r0, r0
    1410:	fc000000 	stc2	0, cr0, [r0], {-0}
    1414:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1418:	01000003 	tsteq	r0, r3
    141c:	030e5200 	movweq	r5, #57856	; 0xe200
    1420:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    1424:	00040000 	andeq	r0, r4, r0
    1428:	9f5201f3 	svcls	0x005201f3
	...
    1434:	00000320 	andeq	r0, r0, r0, lsr #6
    1438:	0000033b 	andeq	r0, r0, fp, lsr r3
    143c:	3b500001 	blcc	1401448 <__Stack_Size+0x1401048>
    1440:	50000003 	andpl	r0, r0, r3
    1444:	04000003 	streq	r0, [r0], #-3
    1448:	5001f300 	andpl	pc, r1, r0, lsl #6
    144c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1450:	00000000 	andeq	r0, r0, r0
    1454:	00032000 	andeq	r2, r3, r0
    1458:	00033b00 	andeq	r3, r3, r0, lsl #22
    145c:	51000100 	mrspl	r0, (UNDEF: 16)
    1460:	0000033b 	andeq	r0, r0, fp, lsr r3
    1464:	00000350 	andeq	r0, r0, r0, asr r3
    1468:	01f30004 	mvnseq	r0, r4
    146c:	00009f51 	andeq	r9, r0, r1, asr pc
    1470:	00000000 	andeq	r0, r0, r0
    1474:	033c0000 	teqeq	ip, #0
    1478:	03400000 	movteq	r0, #0
    147c:	000b0000 	andeq	r0, fp, r0
    1480:	0001dc03 	andeq	sp, r1, r3, lsl #24
    1484:	08019420 	stmdaeq	r1, {r5, sl, ip, pc}
    1488:	409f1aff 			; <UNDEFINED> instruction: 0x409f1aff
    148c:	48000003 	stmdami	r0, {r0, r1}
    1490:	01000003 	tsteq	r0, r3
    1494:	03485000 	movteq	r5, #32768	; 0x8000
    1498:	03500000 	cmpeq	r0, #0
    149c:	000b0000 	andeq	r0, fp, r0
    14a0:	0001dc03 	andeq	sp, r1, r3, lsl #24
    14a4:	08019420 	stmdaeq	r1, {r5, sl, ip, pc}
    14a8:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    14ac:	00000000 	andeq	r0, r0, r0
    14b0:	3c000000 	stccc	0, cr0, [r0], {-0}
    14b4:	44000003 	strmi	r0, [r0], #-3
    14b8:	0b000003 	bleq	14cc <__Stack_Size+0x10cc>
    14bc:	01db0300 	bicseq	r0, fp, r0, lsl #6
    14c0:	01942000 	orrseq	r2, r4, r0
    14c4:	9f1aff08 	svcls	0x001aff08
    14c8:	00000344 	andeq	r0, r0, r4, asr #6
    14cc:	00000350 	andeq	r0, r0, r0, asr r3
    14d0:	00530001 	subseq	r0, r3, r1
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	40000000 	andmi	r0, r0, r0
    14dc:	48000003 	stmdami	r0, {r0, r1}
    14e0:	10000003 	andne	r0, r0, r3
    14e4:	01db0300 	bicseq	r0, fp, r0, lsl #6
    14e8:	01942000 	orrseq	r2, r4, r0
    14ec:	701aff08 	andsvc	pc, sl, r8, lsl #30
    14f0:	22243800 	eorcs	r3, r4, #0, 16
    14f4:	0003489f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    14f8:	00035000 	andeq	r5, r3, r0
    14fc:	03001800 	movweq	r1, #2048	; 0x800
    1500:	200001db 	ldrdcs	r0, [r0], -fp
    1504:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1508:	01dc031a 	bicseq	r0, ip, sl, lsl r3
    150c:	01942000 	orrseq	r2, r4, r0
    1510:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    1514:	009f2224 	addseq	r2, pc, r4, lsr #4
    1518:	00000000 	andeq	r0, r0, r0
    151c:	50000000 	andpl	r0, r0, r0
    1520:	66000003 	strvs	r0, [r0], -r3
    1524:	01000003 	tsteq	r0, r3
    1528:	03665000 	cmneq	r6, #0
    152c:	037c0000 	cmneq	ip, #0
    1530:	00040000 	andeq	r0, r4, r0
    1534:	9f5001f3 	svcls	0x005001f3
	...
    1540:	00000350 	andeq	r0, r0, r0, asr r3
    1544:	00000375 	andeq	r0, r0, r5, ror r3
    1548:	75510001 	ldrbvc	r0, [r1, #-1]
    154c:	7c000003 	stcvc	0, cr0, [r0], {3}
    1550:	04000003 	streq	r0, [r0], #-3
    1554:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1558:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    155c:	00000000 	andeq	r0, r0, r0
    1560:	00035000 	andeq	r5, r3, r0
    1564:	00036000 	andeq	r6, r3, r0
    1568:	52000100 	andpl	r0, r0, #0, 2
    156c:	00000360 	andeq	r0, r0, r0, ror #6
    1570:	0000037c 	andeq	r0, r0, ip, ror r3
    1574:	01f30004 	mvnseq	r0, r4
    1578:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    1584:	000e0000 	andeq	r0, lr, r0
    1588:	00010000 	andeq	r0, r1, r0
    158c:	00000e50 	andeq	r0, r0, r0, asr lr
    1590:	00001800 	andeq	r1, r0, r0, lsl #16
    1594:	f3000400 	vshl.u8	d0, d0, d0
    1598:	009f5001 	addseq	r5, pc, r1
    159c:	00000000 	andeq	r0, r0, r0
    15a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    15a4:	26000000 	strcs	r0, [r0], -r0
    15a8:	01000000 	mrseq	r0, (UNDEF: 0)
    15ac:	00265000 	eoreq	r5, r6, r0
    15b0:	00300000 	eorseq	r0, r0, r0
    15b4:	00040000 	andeq	r0, r4, r0
    15b8:	9f5001f3 	svcls	0x005001f3
	...
    15c4:	00000030 	andeq	r0, r0, r0, lsr r0
    15c8:	0000003e 	andeq	r0, r0, lr, lsr r0
    15cc:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    15d0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    15d4:	04000000 	streq	r0, [r0], #-0
    15d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    15dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15e0:	00000000 	andeq	r0, r0, r0
    15e4:	00008800 	andeq	r8, r0, r0, lsl #16
    15e8:	00008c00 	andeq	r8, r0, r0, lsl #24
    15ec:	30000200 	andcc	r0, r0, r0, lsl #4
    15f0:	00008c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    15f4:	00009000 	andeq	r9, r0, r0
    15f8:	70000700 	andvc	r0, r0, r0, lsl #14
    15fc:	301a3200 	andscc	r3, sl, r0, lsl #4
    1600:	00009f2e 	andeq	r9, r0, lr, lsr #30
    1604:	00000000 	andeq	r0, r0, r0
    1608:	00980000 	addseq	r0, r8, r0
    160c:	009c0000 	addseq	r0, ip, r0
    1610:	00020000 	andeq	r0, r2, r0
    1614:	009c9f30 	addseq	r9, ip, r0, lsr pc
    1618:	00a00000 	adceq	r0, r0, r0
    161c:	00080000 	andeq	r0, r8, r0
    1620:	20080070 	andcs	r0, r8, r0, ror r0
    1624:	9f2e301a 	svcls	0x002e301a
	...
    1630:	000000a8 	andeq	r0, r0, r8, lsr #1
    1634:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1638:	b0500001 	subslt	r0, r0, r1
    163c:	b2000000 	andlt	r0, r0, #0
    1640:	04000000 	streq	r0, [r0], #-0
    1644:	5001f300 	andpl	pc, r1, r0, lsl #6
    1648:	0000b29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    164c:	0000b600 	andeq	fp, r0, r0, lsl #12
    1650:	50000100 	andpl	r0, r0, r0, lsl #2
    1654:	000000b6 	strheq	r0, [r0], -r6
    1658:	000000c0 	andeq	r0, r0, r0, asr #1
    165c:	01f30004 	mvnseq	r0, r4
    1660:	00009f50 	andeq	r9, r0, r0, asr pc
    1664:	00000000 	andeq	r0, r0, r0
    1668:	00c00000 	sbceq	r0, r0, r0
    166c:	00c80000 	sbceq	r0, r8, r0
    1670:	00010000 	andeq	r0, r1, r0
    1674:	0000c850 	andeq	ip, r0, r0, asr r8
    1678:	0000ce00 	andeq	ip, r0, r0, lsl #28
    167c:	f3000400 	vshl.u8	d0, d0, d0
    1680:	ce9f5001 	cdpgt	0, 9, cr5, cr15, cr1, {0}
    1684:	d6000000 	strle	r0, [r0], -r0
    1688:	01000000 	mrseq	r0, (UNDEF: 0)
    168c:	00d65000 	sbcseq	r5, r6, r0
    1690:	00e00000 	rsceq	r0, r0, r0
    1694:	00040000 	andeq	r0, r4, r0
    1698:	9f5001f3 	svcls	0x005001f3
	...
    16a4:	000000c0 	andeq	r0, r0, r0, asr #1
    16a8:	000000d8 	ldrdeq	r0, [r0], -r8
    16ac:	9f300002 	svcls	0x00300002
    16b0:	000000d8 	ldrdeq	r0, [r0], -r8
    16b4:	000000e0 	andeq	r0, r0, r0, ror #1
    16b8:	00500001 	subseq	r0, r0, r1
    16bc:	00000000 	andeq	r0, r0, r0
    16c0:	ec000000 	stc	0, cr0, [r0], {-0}
    16c4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    16c8:	02000001 	andeq	r0, r0, #1
    16cc:	0e9f3400 	cdpeq	4, 9, cr3, cr15, cr0, {0}
    16d0:	14000001 	strne	r0, [r0], #-1
    16d4:	01000001 	tsteq	r0, r1
    16d8:	00005000 	andeq	r5, r0, r0
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	01140000 	tsteq	r4, r0
    16e4:	011b0000 	tsteq	fp, r0
    16e8:	00010000 	andeq	r0, r1, r0
    16ec:	00011b50 	andeq	r1, r1, r0, asr fp
    16f0:	00014a00 	andeq	r4, r1, r0, lsl #20
    16f4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1700:	00000114 	andeq	r0, r0, r4, lsl r1
    1704:	0000011c 	andeq	r0, r0, ip, lsl r1
    1708:	9f340002 	svcls	0x00340002
    170c:	0000011c 	andeq	r0, r0, ip, lsl r1
    1710:	00000137 	andeq	r0, r0, r7, lsr r1
    1714:	38500001 	ldmdacc	r0, {r0}^
    1718:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    171c:	01000001 	tsteq	r0, r1
    1720:	01405000 	mrseq	r5, (UNDEF: 64)
    1724:	014a0000 	mrseq	r0, (UNDEF: 74)
    1728:	00010000 	andeq	r0, r1, r0
    172c:	00000050 	andeq	r0, r0, r0, asr r0
    1730:	00000000 	andeq	r0, r0, r0
    1734:	00014a00 	andeq	r4, r1, r0, lsl #20
    1738:	00015200 	andeq	r5, r1, r0, lsl #4
    173c:	50000100 	andpl	r0, r0, r0, lsl #2
    1740:	00000152 	andeq	r0, r0, r2, asr r1
    1744:	00000186 	andeq	r0, r0, r6, lsl #3
    1748:	86550001 	ldrbhi	r0, [r5], -r1
    174c:	8c000001 	stchi	0, cr0, [r0], {1}
    1750:	04000001 	streq	r0, [r0], #-1
    1754:	5001f300 	andpl	pc, r1, r0, lsl #6
    1758:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    175c:	00000000 	andeq	r0, r0, r0
    1760:	00014a00 	andeq	r4, r1, r0, lsl #20
    1764:	00015600 	andeq	r5, r1, r0, lsl #12
    1768:	34000200 	strcc	r0, [r0], #-512	; 0x200
    176c:	0001569f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    1770:	00016000 	andeq	r6, r1, r0
    1774:	50000100 	andpl	r0, r0, r0, lsl #2
    1778:	00000176 	andeq	r0, r0, r6, ror r1
    177c:	0000018c 	andeq	r0, r0, ip, lsl #3
    1780:	00500001 	subseq	r0, r0, r1
    1784:	00000000 	andeq	r0, r0, r0
    1788:	8c000000 	stchi	0, cr0, [r0], {-0}
    178c:	96000001 	strls	r0, [r0], -r1
    1790:	02000001 	andeq	r0, r0, #1
    1794:	969f3400 	ldrls	r3, [pc], r0, lsl #8
    1798:	a0000001 	andge	r0, r0, r1
    179c:	01000001 	tsteq	r0, r1
    17a0:	01b45000 			; <UNDEFINED> instruction: 0x01b45000
    17a4:	01c80000 	biceq	r0, r8, r0
    17a8:	00010000 	andeq	r0, r1, r0
    17ac:	00000050 	andeq	r0, r0, r0, asr r0
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	0001c800 	andeq	ip, r1, r0, lsl #16
    17b8:	0001d200 	andeq	sp, r1, r0, lsl #4
    17bc:	34000200 	strcc	r0, [r0], #-512	; 0x200
    17c0:	0001d29f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    17c4:	0001de00 	andeq	sp, r1, r0, lsl #28
    17c8:	50000100 	andpl	r0, r0, r0, lsl #2
    17cc:	000001fa 	strdeq	r0, [r0], -sl
    17d0:	00000206 	andeq	r0, r0, r6, lsl #4
    17d4:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    17d8:	38000002 	stmdacc	r0, {r1}
    17dc:	01000002 	tsteq	r0, r2
    17e0:	00005000 	andeq	r5, r0, r0
    17e4:	00000000 	andeq	r0, r0, r0
    17e8:	02380000 	eorseq	r0, r8, #0
    17ec:	023e0000 	eorseq	r0, lr, #0
    17f0:	00010000 	andeq	r0, r1, r0
    17f4:	00023e50 	andeq	r3, r2, r0, asr lr
    17f8:	00027a00 	andeq	r7, r2, r0, lsl #20
    17fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1800:	0000027a 	andeq	r0, r0, sl, ror r2
    1804:	00000280 	andeq	r0, r0, r0, lsl #5
    1808:	01f30004 	mvnseq	r0, r4
    180c:	00009f50 	andeq	r9, r0, r0, asr pc
    1810:	00000000 	andeq	r0, r0, r0
    1814:	02380000 	eorseq	r0, r8, #0
    1818:	02430000 	subeq	r0, r3, #0
    181c:	00010000 	andeq	r0, r1, r0
    1820:	00024351 	andeq	r4, r2, r1, asr r3
    1824:	00026200 	andeq	r6, r2, r0, lsl #4
    1828:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    182c:	00000262 	andeq	r0, r0, r2, ror #4
    1830:	00000280 	andeq	r0, r0, r0, lsl #5
    1834:	01f30004 	mvnseq	r0, r4
    1838:	00009f51 	andeq	r9, r0, r1, asr pc
    183c:	00000000 	andeq	r0, r0, r0
    1840:	02380000 	eorseq	r0, r8, #0
    1844:	02440000 	subeq	r0, r4, #0
    1848:	00020000 	andeq	r0, r2, r0
    184c:	02449f34 	subeq	r9, r4, #52, 30	; 0xd0
    1850:	024c0000 	subeq	r0, ip, #0
    1854:	00010000 	andeq	r0, r1, r0
    1858:	00025c50 	andeq	r5, r2, r0, asr ip
    185c:	00026600 	andeq	r6, r2, r0, lsl #12
    1860:	50000100 	andpl	r0, r0, r0, lsl #2
    1864:	0000026a 	andeq	r0, r0, sl, ror #4
    1868:	00000280 	andeq	r0, r0, r0, lsl #5
    186c:	00500001 	subseq	r0, r0, r1
    1870:	00000000 	andeq	r0, r0, r0
    1874:	80000000 	andhi	r0, r0, r0
    1878:	86000002 	strhi	r0, [r0], -r2
    187c:	01000002 	tsteq	r0, r2
    1880:	02865000 	addeq	r5, r6, #0
    1884:	02b20000 	adcseq	r0, r2, #0
    1888:	00010000 	andeq	r0, r1, r0
    188c:	0002b255 	andeq	fp, r2, r5, asr r2
    1890:	0002b800 	andeq	fp, r2, r0, lsl #16
    1894:	f3000400 	vshl.u8	d0, d0, d0
    1898:	009f5001 	addseq	r5, pc, r1
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	80000000 	andhi	r0, r0, r0
    18a4:	8b000002 	blhi	18b4 <__Stack_Size+0x14b4>
    18a8:	01000002 	tsteq	r0, r2
    18ac:	028b5100 	addeq	r5, fp, #0, 2
    18b0:	02b80000 	adcseq	r0, r8, #0
    18b4:	00040000 	andeq	r0, r4, r0
    18b8:	9f5101f3 	svcls	0x005101f3
	...
    18c4:	00000280 	andeq	r0, r0, r0, lsl #5
    18c8:	0000028c 	andeq	r0, r0, ip, lsl #5
    18cc:	9f340002 	svcls	0x00340002
    18d0:	0000028c 	andeq	r0, r0, ip, lsl #5
    18d4:	00000294 	muleq	r0, r4, r2
    18d8:	a2500001 	subsge	r0, r0, #1
    18dc:	b8000002 	stmdalt	r0, {r1}
    18e0:	01000002 	tsteq	r0, r2
    18e4:	00005000 	andeq	r5, r0, r0
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	02b80000 	adcseq	r0, r8, #0
    18f0:	02be0000 	adcseq	r0, lr, #0
    18f4:	00010000 	andeq	r0, r1, r0
    18f8:	0002be50 	andeq	fp, r2, r0, asr lr
    18fc:	0002f600 	andeq	pc, r2, r0, lsl #12
    1900:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1904:	000002f6 	strdeq	r0, [r0], -r6
    1908:	00000300 	andeq	r0, r0, r0, lsl #6
    190c:	01f30004 	mvnseq	r0, r4
    1910:	00009f50 	andeq	r9, r0, r0, asr pc
    1914:	00000000 	andeq	r0, r0, r0
    1918:	02b80000 	adcseq	r0, r8, #0
    191c:	02c30000 	sbceq	r0, r3, #0
    1920:	00010000 	andeq	r0, r1, r0
    1924:	0002c351 	andeq	ip, r2, r1, asr r3
    1928:	00030000 	andeq	r0, r3, r0
    192c:	f3000400 	vshl.u8	d0, d0, d0
    1930:	009f5101 	addseq	r5, pc, r1, lsl #2
    1934:	00000000 	andeq	r0, r0, r0
    1938:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    193c:	c4000002 	strgt	r0, [r0], #-2
    1940:	02000002 	andeq	r0, r0, #2
    1944:	c49f3400 	ldrgt	r3, [pc], #1024	; 194c <__Stack_Size+0x154c>
    1948:	da000002 	ble	1958 <__Stack_Size+0x1558>
    194c:	01000002 	tsteq	r0, r2
    1950:	02e65000 	rsceq	r5, r6, #0
    1954:	03000000 	movweq	r0, #0
    1958:	00010000 	andeq	r0, r1, r0
    195c:	00000050 	andeq	r0, r0, r0, asr r0
    1960:	00000000 	andeq	r0, r0, r0
    1964:	00030000 	andeq	r0, r3, r0
    1968:	00030400 	andeq	r0, r3, r0, lsl #8
    196c:	50000100 	andpl	r0, r0, r0, lsl #2
    1970:	00000304 	andeq	r0, r0, r4, lsl #6
    1974:	00000306 	andeq	r0, r0, r6, lsl #6
    1978:	00700004 	rsbseq	r0, r0, r4
    197c:	03069f20 	movweq	r9, #28448	; 0x6f20
    1980:	03100000 	tsteq	r0, #0
    1984:	00040000 	andeq	r0, r4, r0
    1988:	9f200074 	svcls	0x00200074
    198c:	00000310 	andeq	r0, r0, r0, lsl r3
    1990:	0000036e 	andeq	r0, r0, lr, ror #6
    1994:	6e540001 	cdpvs	0, 5, cr0, cr4, cr1, {0}
    1998:	a0000003 	andge	r0, r0, r3
    199c:	05000003 	streq	r0, [r0, #-3]
    19a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    19a4:	00009f20 	andeq	r9, r0, r0, lsr #30
    19a8:	00000000 	andeq	r0, r0, r0
    19ac:	03040000 	movweq	r0, #16384	; 0x4000
    19b0:	03060000 	movweq	r0, #24576	; 0x6000
    19b4:	00070000 	andeq	r0, r7, r0
    19b8:	08200070 	stmdaeq	r0!, {r4, r5, r6}
    19bc:	069f1aff 			; <UNDEFINED> instruction: 0x069f1aff
    19c0:	10000003 	andne	r0, r0, r3
    19c4:	07000003 	streq	r0, [r0, -r3]
    19c8:	20007400 	andcs	r7, r0, r0, lsl #8
    19cc:	9f1aff08 	svcls	0x001aff08
    19d0:	00000310 	andeq	r0, r0, r0, lsl r3
    19d4:	0000036e 	andeq	r0, r0, lr, ror #6
    19d8:	00740006 	rsbseq	r0, r4, r6
    19dc:	9f1aff08 	svcls	0x001aff08
    19e0:	0000036e 	andeq	r0, r0, lr, ror #6
    19e4:	000003a0 	andeq	r0, r0, r0, lsr #7
    19e8:	01f30008 	mvnseq	r0, r8
    19ec:	ff082050 			; <UNDEFINED> instruction: 0xff082050
    19f0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	03040000 	movweq	r0, #16384	; 0x4000
    19fc:	03060000 	movweq	r0, #24576	; 0x6000
    1a00:	000a0000 	andeq	r0, sl, r0
    1a04:	0a200070 	beq	801bcc <__Stack_Size+0x8017cc>
    1a08:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    1a0c:	03069f25 	movweq	r9, #28453	; 0x6f25
    1a10:	03100000 	tsteq	r0, #0
    1a14:	000a0000 	andeq	r0, sl, r0
    1a18:	0a200074 	beq	801bf0 <__Stack_Size+0x8017f0>
    1a1c:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    1a20:	03109f25 	tsteq	r0, #37, 30	; 0x94
    1a24:	036e0000 	cmneq	lr, #0
    1a28:	00090000 	andeq	r0, r9, r0
    1a2c:	000a0074 	andeq	r0, sl, r4, ror r0
    1a30:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
    1a34:	00036e9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
    1a38:	0003a000 	andeq	sl, r3, r0
    1a3c:	f3000b00 	vqrdmulh.s<illegal width 8>	d0, d0, d0
    1a40:	0a205001 	beq	815a4c <__Stack_Size+0x81564c>
    1a44:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    1a48:	00009f25 	andeq	r9, r0, r5, lsr #30
    1a4c:	00000000 	andeq	r0, r0, r0
    1a50:	03040000 	movweq	r0, #16384	; 0x4000
    1a54:	03060000 	movweq	r0, #24576	; 0x6000
    1a58:	000b0000 	andeq	r0, fp, r0
    1a5c:	08200070 	stmdaeq	r0!, {r4, r5, r6}
    1a60:	1a2440ff 	bne	911e64 <__Stack_Size+0x911a64>
    1a64:	069f2540 	ldreq	r2, [pc], r0, asr #10
    1a68:	10000003 	andne	r0, r0, r3
    1a6c:	0b000003 	bleq	1a80 <__Stack_Size+0x1680>
    1a70:	20007400 	andcs	r7, r0, r0, lsl #8
    1a74:	2440ff08 	strbcs	pc, [r0], #-3848	; 0xf08	; <UNPREDICTABLE>
    1a78:	9f25401a 	svcls	0x0025401a
    1a7c:	00000310 	andeq	r0, r0, r0, lsl r3
    1a80:	0000036e 	andeq	r0, r0, lr, ror #6
    1a84:	0074000a 	rsbseq	r0, r4, sl
    1a88:	2440ff08 	strbcs	pc, [r0], #-3848	; 0xf08	; <UNPREDICTABLE>
    1a8c:	9f25401a 	svcls	0x0025401a
    1a90:	0000036e 	andeq	r0, r0, lr, ror #6
    1a94:	000003a0 	andeq	r0, r0, r0, lsr #7
    1a98:	01f3000c 	mvnseq	r0, ip
    1a9c:	ff082050 			; <UNDEFINED> instruction: 0xff082050
    1aa0:	401a2440 	andsmi	r2, sl, r0, asr #8
    1aa4:	00009f25 	andeq	r9, r0, r5, lsr #30
    1aa8:	00000000 	andeq	r0, r0, r0
    1aac:	03040000 	movweq	r0, #16384	; 0x4000
    1ab0:	03060000 	movweq	r0, #24576	; 0x6000
    1ab4:	00060000 	andeq	r0, r6, r0
    1ab8:	48200070 	stmdami	r0!, {r4, r5, r6}
    1abc:	03069f25 	movweq	r9, #28453	; 0x6f25
    1ac0:	03100000 	tsteq	r0, #0
    1ac4:	00060000 	andeq	r0, r6, r0
    1ac8:	48200074 	stmdami	r0!, {r2, r4, r5, r6}
    1acc:	03109f25 	tsteq	r0, #37, 30	; 0x94
    1ad0:	036e0000 	cmneq	lr, #0
    1ad4:	00050000 	andeq	r0, r5, r0
    1ad8:	25480074 	strbcs	r0, [r8, #-116]	; 0x74
    1adc:	00036e9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
    1ae0:	0003a000 	andeq	sl, r3, r0
    1ae4:	f3000700 	vabd.u8	d0, d0, d0
    1ae8:	48205001 	stmdami	r0!, {r0, ip, lr}
    1aec:	00009f25 	andeq	r9, r0, r5, lsr #30
    1af0:	00000000 	andeq	r0, r0, r0
    1af4:	03000000 	movweq	r0, #0
    1af8:	030a0000 	movweq	r0, #40960	; 0xa000
    1afc:	00020000 	andeq	r0, r2, r0
    1b00:	030a9f34 	movweq	r9, #44852	; 0xaf34
    1b04:	032e0000 			; <UNDEFINED> instruction: 0x032e0000
    1b08:	00010000 	andeq	r0, r1, r0
    1b0c:	00033450 	andeq	r3, r3, r0, asr r4
    1b10:	00033800 	andeq	r3, r3, r0, lsl #16
    1b14:	50000100 	andpl	r0, r0, r0, lsl #2
    1b18:	0000033e 	andeq	r0, r0, lr, lsr r3
    1b1c:	00000344 	andeq	r0, r0, r4, asr #6
    1b20:	50500001 	subspl	r0, r0, r1
    1b24:	54000003 	strpl	r0, [r0], #-3
    1b28:	01000003 	tsteq	r0, r3
    1b2c:	03685000 	cmneq	r8, #0
    1b30:	036c0000 	cmneq	ip, #0
    1b34:	00010000 	andeq	r0, r1, r0
    1b38:	00038250 	andeq	r8, r3, r0, asr r2
    1b3c:	0003a000 	andeq	sl, r3, r0
    1b40:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1b4c:	000003a0 	andeq	r0, r0, r0, lsr #7
    1b50:	000003a8 	andeq	r0, r0, r8, lsr #7
    1b54:	a8500001 	ldmdage	r0, {r0}^
    1b58:	2c000003 	stccs	0, cr0, [r0], {3}
    1b5c:	04000004 	streq	r0, [r0], #-4
    1b60:	5001f300 	andpl	pc, r1, r0, lsl #6
    1b64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	0003a000 	andeq	sl, r3, r0
    1b70:	0003ac00 	andeq	sl, r3, r0, lsl #24
    1b74:	34000200 	strcc	r0, [r0], #-512	; 0x200
    1b78:	0003ac9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
    1b7c:	0003b800 	andeq	fp, r3, r0, lsl #16
    1b80:	50000100 	andpl	r0, r0, r0, lsl #2
    1b84:	000003d4 	ldrdeq	r0, [r0], -r4
    1b88:	000003fa 	strdeq	r0, [r0], -sl
    1b8c:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
    1b90:	2c000003 	stccs	0, cr0, [r0], {3}
    1b94:	01000004 	tsteq	r0, r4
    1b98:	00005000 	andeq	r5, r0, r0
    1b9c:	00000000 	andeq	r0, r0, r0
    1ba0:	042c0000 	strteq	r0, [ip], #-0
    1ba4:	043e0000 	ldrteq	r0, [lr], #-0
    1ba8:	00010000 	andeq	r0, r1, r0
    1bac:	00043e50 	andeq	r3, r4, r0, asr lr
    1bb0:	00048000 	andeq	r8, r4, r0
    1bb4:	f3000400 	vshl.u8	d0, d0, d0
    1bb8:	009f5001 	addseq	r5, pc, r1
    1bbc:	00000000 	andeq	r0, r0, r0
    1bc0:	2c000000 	stccs	0, cr0, [r0], {-0}
    1bc4:	45000004 	strmi	r0, [r0, #-4]
    1bc8:	01000004 	tsteq	r0, r4
    1bcc:	04455100 	strbeq	r5, [r5], #-256	; 0x100
    1bd0:	04800000 	streq	r0, [r0], #0
    1bd4:	00040000 	andeq	r0, r4, r0
    1bd8:	9f5101f3 	svcls	0x005101f3
	...
    1be4:	0000042c 	andeq	r0, r0, ip, lsr #8
    1be8:	00000445 	andeq	r0, r0, r5, asr #8
    1bec:	45520001 	ldrbmi	r0, [r2, #-1]
    1bf0:	80000004 	andhi	r0, r0, r4
    1bf4:	04000004 	streq	r0, [r0], #-4
    1bf8:	5201f300 	andpl	pc, r1, #0, 6
    1bfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c00:	00000000 	andeq	r0, r0, r0
    1c04:	00042c00 	andeq	r2, r4, r0, lsl #24
    1c08:	00044600 	andeq	r4, r4, r0, lsl #12
    1c0c:	34000200 	strcc	r0, [r0], #-512	; 0x200
    1c10:	0004469f 	muleq	r4, pc, r6	; <UNPREDICTABLE>
    1c14:	00045000 	andeq	r5, r4, r0
    1c18:	50000100 	andpl	r0, r0, r0, lsl #2
    1c1c:	00000464 	andeq	r0, r0, r4, ror #8
    1c20:	00000480 	andeq	r0, r0, r0, lsl #9
    1c24:	00500001 	subseq	r0, r0, r1
	...
    1c30:	24000000 	strcs	r0, [r0], #-0
    1c34:	01000000 	mrseq	r0, (UNDEF: 0)
    1c38:	00245000 	eoreq	r5, r4, r0
    1c3c:	002e0000 	eoreq	r0, lr, r0
    1c40:	00040000 	andeq	r0, r4, r0
    1c44:	9f5001f3 	svcls	0x005001f3
    1c48:	0000002e 	andeq	r0, r0, lr, lsr #32
    1c4c:	00000046 	andeq	r0, r0, r6, asr #32
    1c50:	46500001 	ldrbmi	r0, [r0], -r1
    1c54:	50000000 	andpl	r0, r0, r0
    1c58:	04000000 	streq	r0, [r0], #-0
    1c5c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1c60:	0000509f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c64:	00005200 	andeq	r5, r0, r0, lsl #4
    1c68:	50000100 	andpl	r0, r0, r0, lsl #2
    1c6c:	00000052 	andeq	r0, r0, r2, asr r0
    1c70:	0000005c 	andeq	r0, r0, ip, asr r0
    1c74:	01f30004 	mvnseq	r0, r4
    1c78:	005c9f50 	subseq	r9, ip, r0, asr pc
    1c7c:	005e0000 	subseq	r0, lr, r0
    1c80:	00010000 	andeq	r0, r1, r0
    1c84:	00005e50 	andeq	r5, r0, r0, asr lr
    1c88:	00006800 	andeq	r6, r0, r0, lsl #16
    1c8c:	f3000400 	vshl.u8	d0, d0, d0
    1c90:	689f5001 	ldmvs	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    1c94:	6a000000 	bvs	1c9c <__Stack_Size+0x189c>
    1c98:	01000000 	mrseq	r0, (UNDEF: 0)
    1c9c:	006a5000 	rsbeq	r5, sl, r0
    1ca0:	00740000 	rsbseq	r0, r4, r0
    1ca4:	00040000 	andeq	r0, r4, r0
    1ca8:	9f5001f3 	svcls	0x005001f3
    1cac:	00000074 	andeq	r0, r0, r4, ror r0
    1cb0:	00000076 	andeq	r0, r0, r6, ror r0
    1cb4:	76500001 	ldrbvc	r0, [r0], -r1
    1cb8:	80000000 	andhi	r0, r0, r0
    1cbc:	04000000 	streq	r0, [r0], #-0
    1cc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    1cc4:	0000809f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cc8:	00008400 	andeq	r8, r0, r0, lsl #8
    1ccc:	50000100 	andpl	r0, r0, r0, lsl #2
    1cd0:	00000084 	andeq	r0, r0, r4, lsl #1
    1cd4:	00000098 	muleq	r0, r8, r0
    1cd8:	01f30004 	mvnseq	r0, r4
    1cdc:	00989f50 	addseq	r9, r8, r0, asr pc
    1ce0:	00a40000 	adceq	r0, r4, r0
    1ce4:	00010000 	andeq	r0, r1, r0
    1ce8:	00000050 	andeq	r0, r0, r0, asr r0
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	0000ba00 	andeq	fp, r0, r0, lsl #20
    1cf4:	0000d600 	andeq	sp, r0, r0, lsl #12
    1cf8:	51000100 	mrspl	r0, (UNDEF: 16)
    1cfc:	000000d6 	ldrdeq	r0, [r0], -r6
    1d00:	00000156 	andeq	r0, r0, r6, asr r1
    1d04:	01f30004 	mvnseq	r0, r4
    1d08:	00009f51 	andeq	r9, r0, r1, asr pc
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	00ba0000 	adcseq	r0, sl, r0
    1d14:	00ca0000 	sbceq	r0, sl, r0
    1d18:	00020000 	andeq	r0, r2, r0
    1d1c:	00ca9f30 	sbceq	r9, sl, r0, lsr pc
    1d20:	00ce0000 	sbceq	r0, lr, r0
    1d24:	00060000 	andeq	r0, r6, r0
    1d28:	ff080073 			; <UNDEFINED> instruction: 0xff080073
    1d2c:	00ce9f1a 	sbceq	r9, lr, sl, lsl pc
    1d30:	01560000 	cmpeq	r6, r0
    1d34:	00010000 	andeq	r0, r1, r0
    1d38:	00000053 	andeq	r0, r0, r3, asr r0
    1d3c:	00000000 	andeq	r0, r0, r0
    1d40:	0000ba00 	andeq	fp, r0, r0, lsl #20
    1d44:	0000d800 	andeq	sp, r0, r0, lsl #16
    1d48:	30000200 	andcc	r0, r0, r0, lsl #4
    1d4c:	0000e09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d50:	00011000 	andeq	r1, r1, r0
    1d54:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1d58:	00000124 	andeq	r0, r0, r4, lsr #2
    1d5c:	00000154 	andeq	r0, r0, r4, asr r1
    1d60:	00570001 	subseq	r0, r7, r1
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	ba000000 	blt	1d70 <__Stack_Size+0x1970>
    1d6c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1d70:	02000000 	andeq	r0, r0, #0
    1d74:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    1d78:	10000000 	andne	r0, r0, r0
    1d7c:	01000001 	tsteq	r0, r1
    1d80:	01165400 	tsteq	r6, r0, lsl #8
    1d84:	01180000 	tsteq	r8, r0
    1d88:	00020000 	andeq	r0, r2, r0
    1d8c:	01189f30 	tsteq	r8, r0, lsr pc
    1d90:	01540000 	cmpeq	r4, r0
    1d94:	00010000 	andeq	r0, r1, r0
    1d98:	00000054 	andeq	r0, r0, r4, asr r0
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	0000ba00 	andeq	fp, r0, r0, lsl #20
    1da4:	0000d800 	andeq	sp, r0, r0, lsl #16
    1da8:	30000200 	andcc	r0, r0, r0, lsl #4
    1dac:	0000dc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1db0:	0000e400 	andeq	lr, r0, r0, lsl #8
    1db4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1db8:	000000e4 	andeq	r0, r0, r4, ror #1
    1dbc:	000000e8 	andeq	r0, r0, r8, ror #1
    1dc0:	00740005 	rsbseq	r0, r4, r5
    1dc4:	e89f2432 	ldm	pc, {r1, r4, r5, sl, sp}	; <UNPREDICTABLE>
    1dc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1dcc:	01000001 	tsteq	r0, r1
    1dd0:	01205e00 			; <UNDEFINED> instruction: 0x01205e00
    1dd4:	01280000 			; <UNDEFINED> instruction: 0x01280000
    1dd8:	00010000 	andeq	r0, r1, r0
    1ddc:	00012856 	andeq	r2, r1, r6, asr r8
    1de0:	00012c00 	andeq	r2, r1, r0, lsl #24
    1de4:	74000500 	strvc	r0, [r0], #-1280	; 0x500
    1de8:	9f243200 	svcls	0x00243200
    1dec:	0000012c 	andeq	r0, r0, ip, lsr #2
    1df0:	0000014c 	andeq	r0, r0, ip, asr #2
    1df4:	005e0001 	subseq	r0, lr, r1
    1df8:	00000000 	andeq	r0, r0, r0
    1dfc:	ba000000 	blt	1e04 <__Stack_Size+0x1a04>
    1e00:	d6000000 	strle	r0, [r0], -r0
    1e04:	02000000 	andeq	r0, r0, #0
    1e08:	d69f3000 	ldrle	r3, [pc], r0
    1e0c:	10000000 	andne	r0, r0, r0
    1e10:	01000001 	tsteq	r0, r1
    1e14:	01165100 	tsteq	r6, r0, lsl #2
    1e18:	01540000 	cmpeq	r4, r0
    1e1c:	00010000 	andeq	r0, r1, r0
    1e20:	00000051 	andeq	r0, r0, r1, asr r0
    1e24:	00000000 	andeq	r0, r0, r0
    1e28:	0000ba00 	andeq	fp, r0, r0, lsl #20
    1e2c:	0000d800 	andeq	sp, r0, r0, lsl #16
    1e30:	30000200 	andcc	r0, r0, r0, lsl #4
    1e34:	0000e89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1e38:	0000ee00 	andeq	lr, r0, r0, lsl #28
    1e3c:	3f000500 	svccc	0x00000500
    1e40:	9f24007e 	svcls	0x0024007e
    1e44:	000000ee 	andeq	r0, r0, lr, ror #1
    1e48:	000000f8 	strdeq	r0, [r0], -r8
    1e4c:	f8560001 			; <UNDEFINED> instruction: 0xf8560001
    1e50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e54:	05000001 	streq	r0, [r0, #-1]
    1e58:	007e3f00 	rsbseq	r3, lr, r0, lsl #30
    1e5c:	012c9f24 			; <UNDEFINED> instruction: 0x012c9f24
    1e60:	01320000 	teqeq	r2, r0
    1e64:	00050000 	andeq	r0, r5, r0
    1e68:	24007e3f 	strcs	r7, [r0], #-3647	; 0xe3f
    1e6c:	0001329f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    1e70:	00013c00 	andeq	r3, r1, r0, lsl #24
    1e74:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1e78:	0000013c 	andeq	r0, r0, ip, lsr r1
    1e7c:	0000014c 	andeq	r0, r0, ip, asr #2
    1e80:	7e3f0005 	cdpvc	0, 3, cr0, cr15, cr5, {0}
    1e84:	009f2400 	addseq	r2, pc, r0, lsl #8
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	66000000 	strvs	r0, [r0], -r0
    1e90:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
    1e94:	01000001 	tsteq	r0, r1
    1e98:	016e5000 	cmneq	lr, r0
    1e9c:	01720000 	cmneq	r2, r0
    1ea0:	00040000 	andeq	r0, r4, r0
    1ea4:	9f5001f3 	svcls	0x005001f3
	...
    1eb0:	00000166 	andeq	r0, r0, r6, ror #2
    1eb4:	00000168 	andeq	r0, r0, r8, ror #2
    1eb8:	9f300002 	svcls	0x00300002
    1ebc:	00000168 	andeq	r0, r0, r8, ror #2
    1ec0:	00000172 	andeq	r0, r0, r2, ror r1
    1ec4:	0071000c 	rsbseq	r0, r1, ip
    1ec8:	1affff0a 	bne	1af8 <__Stack_Size+0x16f8>
    1ecc:	301a0073 	andscc	r0, sl, r3, ror r0
    1ed0:	00009f2e 	andeq	r9, r0, lr, lsr #30
    1ed4:	00000000 	andeq	r0, r0, r0
    1ed8:	01720000 	cmneq	r2, r0
    1edc:	01740000 	cmneq	r4, r0
    1ee0:	00010000 	andeq	r0, r1, r0
    1ee4:	00017450 	andeq	r7, r1, r0, asr r4
    1ee8:	00017800 	andeq	r7, r1, r0, lsl #16
    1eec:	f3000400 	vshl.u8	d0, d0, d0
    1ef0:	009f5001 	addseq	r5, pc, r1
    1ef4:	00000000 	andeq	r0, r0, r0
    1ef8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1efc:	80000001 	andhi	r0, r0, r1
    1f00:	01000001 	tsteq	r0, r1
    1f04:	01805000 	orreq	r5, r0, r0
    1f08:	01840000 	orreq	r0, r4, r0
    1f0c:	00040000 	andeq	r0, r4, r0
    1f10:	9f5001f3 	svcls	0x005001f3
	...
    1f1c:	00000178 	andeq	r0, r0, r8, ror r1
    1f20:	0000017a 	andeq	r0, r0, sl, ror r1
    1f24:	9f300002 	svcls	0x00300002
    1f28:	0000017a 	andeq	r0, r0, sl, ror r1
    1f2c:	00000184 	andeq	r0, r0, r4, lsl #3
    1f30:	0071000c 	rsbseq	r0, r1, ip
    1f34:	1affff0a 	bne	1b64 <__Stack_Size+0x1764>
    1f38:	301a0073 	andscc	r0, sl, r3, ror r0
    1f3c:	00009f2e 	andeq	r9, r0, lr, lsr #30
    1f40:	00000000 	andeq	r0, r0, r0
    1f44:	01840000 	orreq	r0, r4, r0
    1f48:	01860000 	orreq	r0, r6, r0
    1f4c:	00010000 	andeq	r0, r1, r0
    1f50:	00018650 	andeq	r8, r1, r0, asr r6
    1f54:	00018a00 	andeq	r8, r1, r0, lsl #20
    1f58:	f3000400 	vshl.u8	d0, d0, d0
    1f5c:	009f5001 	addseq	r5, pc, r1
    1f60:	00000000 	andeq	r0, r0, r0
    1f64:	a0000000 	andge	r0, r0, r0
    1f68:	a4000001 	strge	r0, [r0], #-1
    1f6c:	04000001 	streq	r0, [r0], #-1
    1f70:	243c4000 	ldrtcs	r4, [ip], #-0
    1f74:	0001a49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1f78:	0001ac00 	andeq	sl, r1, r0, lsl #24
    1f7c:	53000100 	movwpl	r0, #256	; 0x100
	...
    1f88:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1f8c:	000001c2 	andeq	r0, r0, r2, asr #3
    1f90:	c2500001 	subsgt	r0, r0, #1
    1f94:	cc000001 	stcgt	0, cr0, [r0], {1}
    1f98:	04000001 	streq	r0, [r0], #-1
    1f9c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1fa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1fa4:	00000000 	andeq	r0, r0, r0
    1fa8:	0001b000 	andeq	fp, r1, r0
    1fac:	0001be00 	andeq	fp, r1, r0, lsl #28
    1fb0:	51000100 	mrspl	r0, (UNDEF: 16)
    1fb4:	000001be 			; <UNDEFINED> instruction: 0x000001be
    1fb8:	000001cc 	andeq	r0, r0, ip, asr #3
    1fbc:	01f30004 	mvnseq	r0, r4
    1fc0:	00009f51 	andeq	r9, r0, r1, asr pc
    1fc4:	00000000 	andeq	r0, r0, r0
    1fc8:	01b00000 	movseq	r0, r0
    1fcc:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    1fd0:	00020000 	andeq	r0, r2, r0
    1fd4:	01b49f30 			; <UNDEFINED> instruction: 0x01b49f30
    1fd8:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1fdc:	000f0000 	andeq	r0, pc, r0
    1fe0:	800a0073 	andhi	r0, sl, r3, ror r0
    1fe4:	00701aff 	ldrshteq	r1, [r0], #-175	; 0xffffff51
    1fe8:	341aff08 	ldrcc	pc, [sl], #-3848	; 0xf08
    1fec:	c29f2124 	addsgt	r2, pc, #36, 2
    1ff0:	cc000001 	stcgt	0, cr0, [r0], {1}
    1ff4:	01000001 	tsteq	r0, r1
    1ff8:	00005000 	andeq	r5, r0, r0
    1ffc:	00000000 	andeq	r0, r0, r0
    2000:	01d80000 	bicseq	r0, r8, r0
    2004:	021a0000 	andseq	r0, sl, #0
    2008:	00010000 	andeq	r0, r1, r0
    200c:	00021a50 	andeq	r1, r2, r0, asr sl
    2010:	00022c00 	andeq	r2, r2, r0, lsl #24
    2014:	f3000400 	vshl.u8	d0, d0, d0
    2018:	009f5001 	addseq	r5, pc, r1
    201c:	00000000 	andeq	r0, r0, r0
    2020:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2024:	e8000001 	stmda	r0, {r0}
    2028:	02000001 	andeq	r0, r0, #1
    202c:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    2030:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    2034:	01000002 	tsteq	r0, r2
    2038:	021e5200 	andseq	r5, lr, #0, 4
    203c:	022c0000 	eoreq	r0, ip, #0
    2040:	00080000 	andeq	r0, r8, r0
    2044:	0a5001f3 	beq	1402818 <__Stack_Size+0x1402418>
    2048:	9f1affff 	svcls	0x001affff
	...
    2054:	000001d8 	ldrdeq	r0, [r0], -r8
    2058:	000001fa 	strdeq	r0, [r0], -sl
    205c:	9f300002 	svcls	0x00300002
    2060:	000001fa 	strdeq	r0, [r0], -sl
    2064:	00000216 	andeq	r0, r0, r6, lsl r2
    2068:	7033000b 	eorsvc	r0, r3, fp
    206c:	243f4e00 	ldrtcs	r4, [pc], #-3584	; 2074 <__Stack_Size+0x1c74>
    2070:	2425401a 	strtcs	r4, [r5], #-26
    2074:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2078:	00000000 	andeq	r0, r0, r0
    207c:	0001d800 	andeq	sp, r1, r0, lsl #16
    2080:	0001e600 	andeq	lr, r1, r0, lsl #12
    2084:	30000200 	andcc	r0, r0, r0, lsl #4
    2088:	0001e69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    208c:	00022c00 	andeq	r2, r2, r0, lsl #24
    2090:	53000100 	movwpl	r0, #256	; 0x100
	...
    209c:	000001d8 	ldrdeq	r0, [r0], -r8
    20a0:	000001e6 	andeq	r0, r0, r6, ror #3
    20a4:	9f300002 	svcls	0x00300002
    20a8:	000001e6 	andeq	r0, r0, r6, ror #3
    20ac:	0000021a 	andeq	r0, r0, sl, lsl r2
    20b0:	00700009 	rsbseq	r0, r0, r9
    20b4:	1a243f4e 	bne	911df4 <__Stack_Size+0x9119f4>
    20b8:	1a9f2540 	bne	fe7cb5c0 <SCS_BASE+0x1e7bd5c0>
    20bc:	2c000002 	stccs	0, cr0, [r0], {2}
    20c0:	0a000002 	beq	20d0 <__Stack_Size+0x1cd0>
    20c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    20c8:	1a243f4e 	bne	911e08 <__Stack_Size+0x911a08>
    20cc:	009f2540 	addseq	r2, pc, r0, asr #10
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	2c000000 	stccs	0, cr0, [r0], {-0}
    20d8:	50000002 	andpl	r0, r0, r2
    20dc:	01000002 	tsteq	r0, r2
    20e0:	02505000 	subseq	r5, r0, #0
    20e4:	02560000 	subseq	r0, r6, #0
    20e8:	00040000 	andeq	r0, r4, r0
    20ec:	9f5001f3 	svcls	0x005001f3
	...
    20f8:	0000022c 	andeq	r0, r0, ip, lsr #4
    20fc:	00000234 	andeq	r0, r0, r4, lsr r2
    2100:	34510001 	ldrbcc	r0, [r1], #-1
    2104:	56000002 	strpl	r0, [r0], -r2
    2108:	04000002 	streq	r0, [r0], #-2
    210c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2110:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2114:	00000000 	andeq	r0, r0, r0
    2118:	00022c00 	andeq	r2, r2, r0, lsl #24
    211c:	00024000 	andeq	r4, r2, r0
    2120:	30000200 	andcc	r0, r0, r0, lsl #4
    2124:	0002409f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    2128:	00024600 	andeq	r4, r2, r0, lsl #12
    212c:	3f000500 	svccc	0x00000500
    2130:	9f240073 	svcls	0x00240073
    2134:	00000246 	andeq	r0, r0, r6, asr #4
    2138:	0000024a 	andeq	r0, r0, sl, asr #4
    213c:	4a520001 	bmi	1482148 <__Stack_Size+0x1481d48>
    2140:	56000002 	strpl	r0, [r0], -r2
    2144:	05000002 	streq	r0, [r0, #-2]
    2148:	00733f00 	rsbseq	r3, r3, r0, lsl #30
    214c:	00009f24 	andeq	r9, r0, r4, lsr #30
	...
    2158:	001c0000 	andseq	r0, ip, r0
    215c:	00020000 	andeq	r0, r2, r0
    2160:	001c9f30 	andseq	r9, ip, r0, lsr pc
    2164:	00340000 	eorseq	r0, r4, r0
    2168:	00010000 	andeq	r0, r1, r0
    216c:	00000052 	andeq	r0, r0, r2, asr r0
    2170:	00000000 	andeq	r0, r0, r0
    2174:	00003400 	andeq	r3, r0, r0, lsl #8
    2178:	00004a00 	andeq	r4, r0, r0, lsl #20
    217c:	30000200 	andcc	r0, r0, r0, lsl #4
    2180:	00004a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    2184:	00004c00 	andeq	r4, r0, r0, lsl #24
    2188:	31000200 	mrscc	r0, R8_usr
    218c:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    2190:	00004e00 	andeq	r4, r0, r0, lsl #28
    2194:	32000200 	andcc	r0, r0, #0, 4
    2198:	00004e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    219c:	00006400 	andeq	r6, r0, r0, lsl #8
    21a0:	33000200 	movwcc	r0, #512	; 0x200
    21a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    21a8:	00000000 	andeq	r0, r0, r0
    21ac:	00006400 	andeq	r6, r0, r0, lsl #8
    21b0:	00006800 	andeq	r6, r0, r0, lsl #16
    21b4:	50000100 	andpl	r0, r0, r0, lsl #2
    21b8:	00000068 	andeq	r0, r0, r8, rrx
    21bc:	00000078 	andeq	r0, r0, r8, ror r0
    21c0:	01f30004 	mvnseq	r0, r4
    21c4:	00009f50 	andeq	r9, r0, r0, asr pc
    21c8:	00000000 	andeq	r0, r0, r0
    21cc:	00780000 	rsbseq	r0, r8, r0
    21d0:	00900000 	addseq	r0, r0, r0
    21d4:	00020000 	andeq	r0, r2, r0
    21d8:	00909f30 	addseq	r9, r0, r0, lsr pc
    21dc:	00980000 	addseq	r0, r8, r0
    21e0:	00010000 	andeq	r0, r1, r0
    21e4:	00009854 	andeq	r9, r0, r4, asr r8
    21e8:	0000ae00 	andeq	sl, r0, r0, lsl #28
    21ec:	51000100 	mrspl	r0, (UNDEF: 16)
    21f0:	000000ae 	andeq	r0, r0, lr, lsr #1
    21f4:	000000c0 	andeq	r0, r0, r0, asr #1
    21f8:	c0520001 	subsgt	r0, r2, r1
    21fc:	c2000000 	andgt	r0, r0, #0
    2200:	06000000 	streq	r0, [r0], -r0
    2204:	71007200 	mrsvc	r7, R8_usr
    2208:	c29f1a00 	addsgt	r1, pc, #0, 20
    220c:	c4000000 	strgt	r0, [r0], #-0
    2210:	01000000 	mrseq	r0, (UNDEF: 0)
    2214:	00de5200 	sbcseq	r5, lr, r0, lsl #4
    2218:	00fc0000 	rscseq	r0, ip, r0
    221c:	00020000 	andeq	r0, r2, r0
    2220:	00009f30 	andeq	r9, r0, r0, lsr pc
    2224:	00000000 	andeq	r0, r0, r0
    2228:	00780000 	rsbseq	r0, r8, r0
    222c:	00b20000 	adcseq	r0, r2, r0
    2230:	00020000 	andeq	r0, r2, r0
    2234:	00bc9f30 	adcseq	r9, ip, r0, lsr pc
    2238:	00c40000 	sbceq	r0, r4, r0
    223c:	00010000 	andeq	r0, r1, r0
    2240:	0000c454 	andeq	ip, r0, r4, asr r4
    2244:	0000cc00 	andeq	ip, r0, r0, lsl #24
    2248:	52000100 	andpl	r0, r0, #0, 2
    224c:	000000de 	ldrdeq	r0, [r0], -lr
    2250:	000000fc 	strdeq	r0, [r0], -ip
    2254:	9f300002 	svcls	0x00300002
	...
    2260:	00000078 	andeq	r0, r0, r8, ror r0
    2264:	000000bc 	strheq	r0, [r0], -ip
    2268:	9f300002 	svcls	0x00300002
    226c:	000000bc 	strheq	r0, [r0], -ip
    2270:	000000ce 	andeq	r0, r0, lr, asr #1
    2274:	ce510001 	cdpgt	0, 5, cr0, cr1, cr1, {0}
    2278:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    227c:	06000000 	streq	r0, [r0], -r0
    2280:	75ff0800 	ldrbvc	r0, [pc, #2048]!	; 2a88 <__Stack_Size+0x2688>
    2284:	de9f2400 	cdple	4, 9, cr2, cr15, cr0, {0}
    2288:	fc000000 	stc2	0, cr0, [r0], {-0}
    228c:	02000000 	andeq	r0, r0, #0
    2290:	009f3000 	addseq	r3, pc, r0
    2294:	00000000 	andeq	r0, r0, r0
    2298:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    229c:	90000000 	andls	r0, r0, r0
    22a0:	02000000 	andeq	r0, r0, #0
    22a4:	909f3000 	addsls	r3, pc, r0
    22a8:	94000000 	strls	r0, [r0], #-0
    22ac:	05000000 	streq	r0, [r0, #-0]
    22b0:	00743400 	rsbseq	r3, r4, r0, lsl #8
    22b4:	00949f1c 	addseq	r9, r4, ip, lsl pc
    22b8:	00980000 	addseq	r0, r8, r0
    22bc:	00010000 	andeq	r0, r1, r0
    22c0:	00009851 	andeq	r9, r0, r1, asr r8
    22c4:	00009e00 	andeq	r9, r0, r0, lsl #28
    22c8:	34000500 	strcc	r0, [r0], #-1280	; 0x500
    22cc:	9f1c0074 	svcls	0x001c0074
    22d0:	000000de 	ldrdeq	r0, [r0], -lr
    22d4:	000000fc 	strdeq	r0, [r0], -ip
    22d8:	9f300002 	svcls	0x00300002
	...
    22e4:	00000078 	andeq	r0, r0, r8, ror r0
    22e8:	00000090 	muleq	r0, r0, r0
    22ec:	9f3f0002 	svcls	0x003f0002
    22f0:	00000090 	muleq	r0, r0, r0
    22f4:	0000009c 	muleq	r0, ip, r0
    22f8:	743f0005 	ldrtvc	r0, [pc], #-5	; 2300 <__Stack_Size+0x1f00>
    22fc:	9c9f2500 	cfldr32ls	mvfx2, [pc], {0}
    2300:	a4000000 	strge	r0, [r0], #-0
    2304:	01000000 	mrseq	r0, (UNDEF: 0)
    2308:	00de5200 	sbcseq	r5, lr, r0, lsl #4
    230c:	00fc0000 	rscseq	r0, ip, r0
    2310:	00020000 	andeq	r0, r2, r0
    2314:	00009f3f 	andeq	r9, r0, pc, lsr pc
    2318:	00000000 	andeq	r0, r0, r0
    231c:	01180000 	tsteq	r8, r0
    2320:	011a0000 	tsteq	sl, r0
    2324:	00010000 	andeq	r0, r1, r0
    2328:	00011a50 	andeq	r1, r1, r0, asr sl
    232c:	00011e00 	andeq	r1, r1, r0, lsl #28
    2330:	f3000400 	vshl.u8	d0, d0, d0
    2334:	009f5001 	addseq	r5, pc, r1
    2338:	00000000 	andeq	r0, r0, r0
    233c:	30000000 	andcc	r0, r0, r0
    2340:	42000001 	andmi	r0, r0, #1
    2344:	01000001 	tsteq	r0, r1
    2348:	01425000 	mrseq	r5, (UNDEF: 66)
    234c:	01500000 	cmpeq	r0, r0
    2350:	00040000 	andeq	r0, r4, r0
    2354:	9f5001f3 	svcls	0x005001f3
	...
    2360:	00000130 	andeq	r0, r0, r0, lsr r1
    2364:	00000142 	andeq	r0, r0, r2, asr #2
    2368:	9f300002 	svcls	0x00300002
    236c:	00000142 	andeq	r0, r0, r2, asr #2
    2370:	00000144 	andeq	r0, r0, r4, asr #2
    2374:	00700009 	rsbseq	r0, r0, r9
    2378:	721a0072 	andsvc	r0, sl, #114	; 0x72
    237c:	009f2900 	addseq	r2, pc, r0, lsl #18
    2380:	00000000 	andeq	r0, r0, r0
    2384:	30000000 	andcc	r0, r0, r0
    2388:	38000001 	stmdacc	r0, {r0}
    238c:	02000001 	andeq	r0, r0, #1
    2390:	389f3000 	ldmcc	pc, {ip, sp}	; <UNPREDICTABLE>
    2394:	50000001 	andpl	r0, r0, r1
    2398:	01000001 	tsteq	r0, r1
    239c:	00005200 	andeq	r5, r0, r0, lsl #4
    23a0:	00000000 	andeq	r0, r0, r0
    23a4:	015c0000 	cmpeq	ip, r0
    23a8:	01640000 	cmneq	r4, r0
    23ac:	00010000 	andeq	r0, r1, r0
    23b0:	00016450 	andeq	r6, r1, r0, asr r4
    23b4:	00017400 	andeq	r7, r1, r0, lsl #8
    23b8:	f3000400 	vshl.u8	d0, d0, d0
    23bc:	009f5001 	addseq	r5, pc, r1
    23c0:	00000000 	andeq	r0, r0, r0
    23c4:	84000000 	strhi	r0, [r0], #-0
    23c8:	96000001 	strls	r0, [r0], -r1
    23cc:	01000001 	tsteq	r0, r1
    23d0:	01965000 	orrseq	r5, r6, r0
    23d4:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    23d8:	00040000 	andeq	r0, r4, r0
    23dc:	9f5001f3 	svcls	0x005001f3
	...
    23e8:	00000184 	andeq	r0, r0, r4, lsl #3
    23ec:	00000196 	muleq	r0, r6, r1
    23f0:	9f300002 	svcls	0x00300002
    23f4:	00000196 	muleq	r0, r6, r1
    23f8:	00000198 	muleq	r0, r8, r1
    23fc:	00700009 	rsbseq	r0, r0, r9
    2400:	721a0072 	andsvc	r0, sl, #114	; 0x72
    2404:	009f2900 	addseq	r2, pc, r0, lsl #18
    2408:	00000000 	andeq	r0, r0, r0
    240c:	84000000 	strhi	r0, [r0], #-0
    2410:	8c000001 	stchi	0, cr0, [r0], {1}
    2414:	02000001 	andeq	r0, r0, #1
    2418:	8c9f3000 	ldchi	0, cr3, [pc], {0}
    241c:	a4000001 	strge	r0, [r0], #-1
    2420:	01000001 	tsteq	r0, r1
    2424:	00005200 	andeq	r5, r0, r0, lsl #4
    2428:	00000000 	andeq	r0, r0, r0
    242c:	01b00000 	movseq	r0, r0
    2430:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    2434:	00010000 	andeq	r0, r1, r0
    2438:	0001bc50 	andeq	fp, r1, r0, asr ip
    243c:	0001c400 	andeq	ip, r1, r0, lsl #8
    2440:	f3000400 	vshl.u8	d0, d0, d0
    2444:	009f5001 	addseq	r5, pc, r1
    2448:	00000000 	andeq	r0, r0, r0
    244c:	b0000000 	andlt	r0, r0, r0
    2450:	b4000001 	strlt	r0, [r0], #-1
    2454:	01000001 	tsteq	r0, r1
    2458:	01b45100 			; <UNDEFINED> instruction: 0x01b45100
    245c:	01c40000 	biceq	r0, r4, r0
    2460:	00040000 	andeq	r0, r4, r0
    2464:	9f5101f3 	svcls	0x005101f3
	...
    2470:	000001e4 	andeq	r0, r0, r4, ror #3
    2474:	000001ec 	andeq	r0, r0, ip, ror #3
    2478:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    247c:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
    2480:	04000001 	streq	r0, [r0], #-1
    2484:	5001f300 	andpl	pc, r1, r0, lsl #6
    2488:	0001ee9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    248c:	0001f200 	andeq	pc, r1, r0, lsl #4
    2490:	50000100 	andpl	r0, r0, r0, lsl #2
    2494:	000001f2 	strdeq	r0, [r0], -r2
    2498:	000001fc 	strdeq	r0, [r0], -ip
    249c:	01f30004 	mvnseq	r0, r4
    24a0:	00009f50 	andeq	r9, r0, r0, asr pc
    24a4:	00000000 	andeq	r0, r0, r0
    24a8:	01fc0000 	mvnseq	r0, r0
    24ac:	02000000 	andeq	r0, r0, #0
    24b0:	00010000 	andeq	r0, r1, r0
    24b4:	00020050 	andeq	r0, r2, r0, asr r0
    24b8:	00021c00 	andeq	r1, r2, r0, lsl #24
    24bc:	f3000400 	vshl.u8	d0, d0, d0
    24c0:	009f5001 	addseq	r5, pc, r1
    24c4:	00000000 	andeq	r0, r0, r0
    24c8:	fc000000 	stc2	0, cr0, [r0], {-0}
    24cc:	0a000001 	beq	24d8 <__Stack_Size+0x20d8>
    24d0:	01000002 	tsteq	r0, r2
    24d4:	020a5100 	andeq	r5, sl, #0, 2
    24d8:	020e0000 	andeq	r0, lr, #0
    24dc:	00040000 	andeq	r0, r4, r0
    24e0:	9f5101f3 	svcls	0x005101f3
    24e4:	0000020e 	andeq	r0, r0, lr, lsl #4
    24e8:	00000210 	andeq	r0, r0, r0, lsl r2
    24ec:	10510001 	subsne	r0, r1, r1
    24f0:	1c000002 	stcne	0, cr0, [r0], {2}
    24f4:	04000002 	streq	r0, [r0], #-2
    24f8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    24fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2500:	00000000 	andeq	r0, r0, r0
    2504:	0001fc00 	andeq	pc, r1, r0, lsl #24
    2508:	00020400 	andeq	r0, r2, r0, lsl #8
    250c:	30000200 	andcc	r0, r0, r0, lsl #4
    2510:	0002049f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    2514:	00020c00 	andeq	r0, r2, r0, lsl #24
    2518:	52000100 	andpl	r0, r0, #0, 2
    251c:	0000020c 	andeq	r0, r0, ip, lsl #4
    2520:	0000020e 	andeq	r0, r0, lr, lsl #4
    2524:	70310005 	eorsvc	r0, r1, r5
    2528:	0e9f2400 	cdpeq	4, 9, cr2, cr15, cr0, {0}
    252c:	14000002 	strne	r0, [r0], #-2
    2530:	01000002 	tsteq	r0, r2
    2534:	02145200 	andseq	r5, r4, #0, 4
    2538:	021c0000 	andseq	r0, ip, #0
    253c:	00050000 	andeq	r0, r5, r0
    2540:	24007031 	strcs	r7, [r0], #-49	; 0x31
    2544:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2548:	00000000 	andeq	r0, r0, r0
    254c:	00021c00 	andeq	r1, r2, r0, lsl #24
    2550:	00023e00 	andeq	r3, r2, r0, lsl #28
    2554:	50000100 	andpl	r0, r0, r0, lsl #2
    2558:	0000023e 	andeq	r0, r0, lr, lsr r2
    255c:	00000268 	andeq	r0, r0, r8, ror #4
    2560:	01f30004 	mvnseq	r0, r4
    2564:	00009f50 	andeq	r9, r0, r0, asr pc
    2568:	00000000 	andeq	r0, r0, r0
    256c:	021c0000 	andseq	r0, ip, #0
    2570:	022e0000 	eoreq	r0, lr, #0
    2574:	00010000 	andeq	r0, r1, r0
    2578:	00022e51 	andeq	r2, r2, r1, asr lr
    257c:	00026800 	andeq	r6, r2, r0, lsl #16
    2580:	f3000400 	vshl.u8	d0, d0, d0
    2584:	009f5101 	addseq	r5, pc, r1, lsl #2
    2588:	00000000 	andeq	r0, r0, r0
    258c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2590:	36000002 	strcc	r0, [r0], -r2
    2594:	01000002 	tsteq	r0, r2
    2598:	02365200 	eorseq	r5, r6, #0, 4
    259c:	02680000 	rsbeq	r0, r8, #0
    25a0:	00040000 	andeq	r0, r4, r0
    25a4:	9f5201f3 	svcls	0x005201f3
	...
    25b0:	0000021c 	andeq	r0, r0, ip, lsl r2
    25b4:	00000228 	andeq	r0, r0, r8, lsr #4
    25b8:	9f300002 	svcls	0x00300002
    25bc:	00000228 	andeq	r0, r0, r8, lsr #4
    25c0:	0000022c 	andeq	r0, r0, ip, lsr #4
    25c4:	73340005 	teqvc	r4, #5
    25c8:	2c9f1c00 	ldccs	12, cr1, [pc], {0}
    25cc:	30000002 	andcc	r0, r0, r2
    25d0:	01000002 	tsteq	r0, r2
    25d4:	02305400 	eorseq	r5, r0, #0, 8
    25d8:	02340000 	eorseq	r0, r4, #0
    25dc:	00050000 	andeq	r0, r5, r0
    25e0:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
    25e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    25e8:	00000000 	andeq	r0, r0, r0
    25ec:	00021c00 	andeq	r1, r2, r0, lsl #24
    25f0:	00022800 	andeq	r2, r2, r0, lsl #16
    25f4:	08000300 	stmdaeq	r0, {r8, r9}
    25f8:	02289fff 	eoreq	r9, r8, #1020	; 0x3fc
    25fc:	02340000 	eorseq	r0, r4, #0
    2600:	00060000 	andeq	r0, r6, r0
    2604:	0073ff08 	rsbseq	pc, r3, r8, lsl #30
    2608:	02349f25 	eorseq	r9, r4, #37, 30	; 0x94
    260c:	023a0000 	eorseq	r0, sl, #0
    2610:	00010000 	andeq	r0, r1, r0
    2614:	00000053 	andeq	r0, r0, r3, asr r0
    2618:	00000000 	andeq	r0, r0, r0
    261c:	00021c00 	andeq	r1, r2, r0, lsl #24
    2620:	00025a00 	andeq	r5, r2, r0, lsl #20
    2624:	30000200 	andcc	r0, r0, r0, lsl #4
    2628:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    262c:	00026800 	andeq	r6, r2, r0, lsl #16
    2630:	08000600 	stmdaeq	r0, {r9, sl}
    2634:	240073ff 	strcs	r7, [r0], #-1023	; 0x3ff
    2638:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    263c:	00000000 	andeq	r0, r0, r0
    2640:	00021c00 	andeq	r1, r2, r0, lsl #24
    2644:	00022800 	andeq	r2, r2, r0, lsl #16
    2648:	30000200 	andcc	r0, r0, r0, lsl #4
    264c:	0002289f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    2650:	00022e00 	andeq	r2, r2, r0, lsl #28
    2654:	53000100 	movwpl	r0, #256	; 0x100
    2658:	0000022e 	andeq	r0, r0, lr, lsr #4
    265c:	0000025a 	andeq	r0, r0, sl, asr r2
    2660:	5a510001 	bpl	144266c <__Stack_Size+0x144226c>
    2664:	5c000002 	stcpl	0, cr0, [r0], {2}
    2668:	06000002 	streq	r0, [r0], -r2
    266c:	73007100 	movwvc	r7, #256	; 0x100
    2670:	5c9f2400 	cfldrspl	mvf2, [pc], {0}
    2674:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    2678:	01000002 	tsteq	r0, r2
    267c:	00005100 	andeq	r5, r0, r0, lsl #2
    2680:	00000000 	andeq	r0, r0, r0
    2684:	02680000 	rsbeq	r0, r8, #0
    2688:	026e0000 	rsbeq	r0, lr, #0
    268c:	00010000 	andeq	r0, r1, r0
    2690:	00026e50 	andeq	r6, r2, r0, asr lr
    2694:	00028400 	andeq	r8, r2, r0, lsl #8
    2698:	f3000400 	vshl.u8	d0, d0, d0
    269c:	009f5001 	addseq	r5, pc, r1
    26a0:	00000000 	andeq	r0, r0, r0
    26a4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    26a8:	74000002 	strvc	r0, [r0], #-2
    26ac:	02000002 	andeq	r0, r0, #2
    26b0:	749f3000 	ldrvc	r3, [pc], #0	; 26b8 <__Stack_Size+0x22b8>
    26b4:	76000002 	strvc	r0, [r0], -r2
    26b8:	09000002 	stmdbeq	r0, {r1}
    26bc:	70007300 	andvc	r7, r0, r0, lsl #6
    26c0:	00731a00 	rsbseq	r1, r3, r0, lsl #20
    26c4:	00009f29 	andeq	r9, r0, r9, lsr #30
    26c8:	00000000 	andeq	r0, r0, r0
    26cc:	02680000 	rsbeq	r0, r8, #0
    26d0:	02740000 	rsbseq	r0, r4, #0
    26d4:	00020000 	andeq	r0, r2, r0
    26d8:	02749f30 	rsbseq	r9, r4, #48, 30	; 0xc0
    26dc:	02760000 	rsbseq	r0, r6, #0
    26e0:	00060000 	andeq	r0, r6, r0
    26e4:	00700073 	rsbseq	r0, r0, r3, ror r0
    26e8:	02769f1a 	rsbseq	r9, r6, #26, 30	; 0x68
    26ec:	027a0000 	rsbseq	r0, sl, #0
    26f0:	00010000 	andeq	r0, r1, r0
    26f4:	00000050 	andeq	r0, r0, r0, asr r0
    26f8:	00000000 	andeq	r0, r0, r0
    26fc:	00026800 	andeq	r6, r2, r0, lsl #16
    2700:	00026e00 	andeq	r6, r2, r0, lsl #28
    2704:	70000700 	andvc	r0, r0, r0, lsl #14
    2708:	3f253a00 	svccc	0x00253a00
    270c:	026e9f1a 	rsbeq	r9, lr, #26, 30	; 0x68
    2710:	02720000 	rsbseq	r0, r2, #0
    2714:	00080000 	andeq	r0, r8, r0
    2718:	3a5001f3 	bcc	1402eec <__Stack_Size+0x1402aec>
    271c:	9f1a3f25 	svcls	0x001a3f25
    2720:	00000272 	andeq	r0, r0, r2, ror r2
    2724:	00000278 	andeq	r0, r0, r8, ror r2
    2728:	78530001 	ldmdavc	r3, {r0}^
    272c:	84000002 	strhi	r0, [r0], #-2
    2730:	09000002 	stmdbeq	r0, {r1}
    2734:	01f33100 	mvnseq	r3, r0, lsl #2
    2738:	24f60950 	ldrbtcs	r0, [r6], #2384	; 0x950
    273c:	00009f24 	andeq	r9, r0, r4, lsr #30
    2740:	00000000 	andeq	r0, r0, r0
    2744:	02840000 	addeq	r0, r4, #0
    2748:	028a0000 	addeq	r0, sl, #0
    274c:	00010000 	andeq	r0, r1, r0
    2750:	00028a50 	andeq	r8, r2, r0, asr sl
    2754:	00029c00 	andeq	r9, r2, r0, lsl #24
    2758:	f3000400 	vshl.u8	d0, d0, d0
    275c:	009f5001 	addseq	r5, pc, r1
    2760:	00000000 	andeq	r0, r0, r0
    2764:	84000000 	strhi	r0, [r0], #-0
    2768:	8a000002 	bhi	2778 <__Stack_Size+0x2378>
    276c:	05000002 	streq	r0, [r0, #-2]
    2770:	4f007000 	svcmi	0x00007000
    2774:	028a9f1a 	addeq	r9, sl, #26, 30	; 0x68
    2778:	029c0000 	addseq	r0, ip, #0
    277c:	00010000 	andeq	r0, r1, r0
    2780:	00000050 	andeq	r0, r0, r0, asr r0
    2784:	00000000 	andeq	r0, r0, r0
    2788:	00029c00 	andeq	r9, r2, r0, lsl #24
    278c:	0002a200 	andeq	sl, r2, r0, lsl #4
    2790:	50000100 	andpl	r0, r0, r0, lsl #2
    2794:	000002a2 	andeq	r0, r0, r2, lsr #5
    2798:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    279c:	01f30004 	mvnseq	r0, r4
    27a0:	00009f50 	andeq	r9, r0, r0, asr pc
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	029c0000 	addseq	r0, ip, #0
    27ac:	02a20000 	adceq	r0, r2, #0
    27b0:	00050000 	andeq	r0, r5, r0
    27b4:	1a4f0070 	bne	13c297c <__Stack_Size+0x13c257c>
    27b8:	0002a29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    27bc:	0002a600 	andeq	sl, r2, r0, lsl #12
    27c0:	50000100 	andpl	r0, r0, r0, lsl #2
    27c4:	000002a6 	andeq	r0, r0, r6, lsr #5
    27c8:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    27cc:	01700003 	cmneq	r0, r3
    27d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    27d4:	00000000 	andeq	r0, r0, r0
    27d8:	0002b400 	andeq	fp, r2, r0, lsl #8
    27dc:	0002ba00 	andeq	fp, r2, r0, lsl #20
    27e0:	50000100 	andpl	r0, r0, r0, lsl #2
    27e4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    27e8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    27ec:	01f30004 	mvnseq	r0, r4
    27f0:	00009f50 	andeq	r9, r0, r0, asr pc
    27f4:	00000000 	andeq	r0, r0, r0
    27f8:	02b40000 	adcseq	r0, r4, #0
    27fc:	02c00000 	sbceq	r0, r0, #0
    2800:	00020000 	andeq	r0, r2, r0
    2804:	02c09f30 	sbceq	r9, r0, #48, 30	; 0xc0
    2808:	02c20000 	sbceq	r0, r2, #0
    280c:	00090000 	andeq	r0, r9, r0
    2810:	00700073 	rsbseq	r0, r0, r3, ror r0
    2814:	2900731a 	stmdbcs	r0, {r1, r3, r4, r8, r9, ip, sp, lr}
    2818:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    281c:	00000000 	andeq	r0, r0, r0
    2820:	0002b400 	andeq	fp, r2, r0, lsl #8
    2824:	0002c000 	andeq	ip, r2, r0
    2828:	30000200 	andcc	r0, r0, r0, lsl #4
    282c:	0002c09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    2830:	0002c200 	andeq	ip, r2, r0, lsl #4
    2834:	73000600 	movwvc	r0, #1536	; 0x600
    2838:	1a007000 	bne	1e840 <__Stack_Size+0x1e440>
    283c:	0002c29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    2840:	0002c600 	andeq	ip, r2, r0, lsl #12
    2844:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2850:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    2854:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2858:	00700007 	rsbseq	r0, r0, r7
    285c:	1a3f253e 	bne	fcbd5c <__Stack_Size+0xfcb95c>
    2860:	0002ba9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    2864:	0002be00 	andeq	fp, r2, r0, lsl #28
    2868:	f3000800 	vsub.i8	d0, d0, d0
    286c:	253e5001 	ldrcs	r5, [lr, #-1]!
    2870:	be9f1a3f 	mrclt	10, 4, r1, cr15, cr15, {1}
    2874:	c4000002 	strgt	r0, [r0], #-2
    2878:	01000002 	tsteq	r0, r2
    287c:	02c45300 	sbceq	r5, r4, #0, 6
    2880:	02d00000 	sbcseq	r0, r0, #0
    2884:	00090000 	andeq	r0, r9, r0
    2888:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    288c:	2424f209 	strtcs	pc, [r4], #-521	; 0x209
    2890:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2894:	00000000 	andeq	r0, r0, r0
    2898:	0002d000 	andeq	sp, r2, r0
    289c:	0002da00 	andeq	sp, r2, r0, lsl #20
    28a0:	50000100 	andpl	r0, r0, r0, lsl #2
    28a4:	000002da 	ldrdeq	r0, [r0], -sl
    28a8:	000002dc 	ldrdeq	r0, [r0], -ip
    28ac:	01f30004 	mvnseq	r0, r4
    28b0:	02dc9f50 	sbcseq	r9, ip, #80, 30	; 0x140
    28b4:	02e60000 	rsceq	r0, r6, #0
    28b8:	00010000 	andeq	r0, r1, r0
    28bc:	0002e650 	andeq	lr, r2, r0, asr r6
    28c0:	0002f600 	andeq	pc, r2, r0, lsl #12
    28c4:	f3000400 	vshl.u8	d0, d0, d0
    28c8:	f69f5001 			; <UNDEFINED> instruction: 0xf69f5001
    28cc:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    28d0:	01000002 	tsteq	r0, r2
    28d4:	02f85000 	rscseq	r5, r8, #0
    28d8:	03000000 	movweq	r0, #0
    28dc:	00040000 	andeq	r0, r4, r0
    28e0:	9f5001f3 	svcls	0x005001f3
	...
    28ec:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    28f0:	000002da 	ldrdeq	r0, [r0], -sl
    28f4:	9f300002 	svcls	0x00300002
    28f8:	000002da 	ldrdeq	r0, [r0], -sl
    28fc:	000002dc 	ldrdeq	r0, [r0], -ip
    2900:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2904:	ea000002 	b	2914 <__Stack_Size+0x2514>
    2908:	02000002 	andeq	r0, r0, #2
    290c:	ea9f3000 	b	fe7ce914 <SCS_BASE+0x1e7c0914>
    2910:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    2914:	01000002 	tsteq	r0, r2
    2918:	02f65000 	rscseq	r5, r6, #0
    291c:	02f80000 	rscseq	r0, r8, #0
    2920:	00020000 	andeq	r0, r2, r0
    2924:	02f89f30 	rscseq	r9, r8, #48, 30	; 0xc0
    2928:	03000000 	movweq	r0, #0
    292c:	00010000 	andeq	r0, r1, r0
    2930:	00000050 	andeq	r0, r0, r0, asr r0
    2934:	00000000 	andeq	r0, r0, r0
    2938:	0002d000 	andeq	sp, r2, r0
    293c:	0002d400 	andeq	sp, r2, r0, lsl #8
    2940:	30000200 	andcc	r0, r0, r0, lsl #4
    2944:	0002d49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    2948:	0002e400 	andeq	lr, r2, r0, lsl #8
    294c:	53000100 	movwpl	r0, #256	; 0x100
    2950:	000002e4 	andeq	r0, r0, r4, ror #5
    2954:	000002e6 	andeq	r0, r0, r6, ror #5
    2958:	00700008 	rsbseq	r0, r0, r8
    295c:	3224f009 	eorcc	pc, r4, #9
    2960:	02e69f25 	rsceq	r9, r6, #37, 30	; 0x94
    2964:	02f60000 	rscseq	r0, r6, #0
    2968:	00090000 	andeq	r0, r9, r0
    296c:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    2970:	253224f0 	ldrcs	r2, [r2, #-1264]!	; 0x4f0
    2974:	0002f69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    2978:	00030000 	andeq	r0, r3, r0
    297c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2988:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    298c:	000002d4 	ldrdeq	r0, [r0], -r4
    2990:	9f300002 	svcls	0x00300002
    2994:	000002d4 	ldrdeq	r0, [r0], -r4
    2998:	000002da 	ldrdeq	r0, [r0], -sl
    299c:	00700007 	rsbseq	r0, r0, r7
    29a0:	1a332544 	bne	ccbeb8 <__Stack_Size+0xccbab8>
    29a4:	0002da9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    29a8:	0002dc00 	andeq	sp, r2, r0, lsl #24
    29ac:	f3000800 	vsub.i8	d0, d0, d0
    29b0:	25445001 	strbcs	r5, [r4, #-1]
    29b4:	dc9f1a33 	vldmiale	pc, {s2-s52}
    29b8:	e6000002 	str	r0, [r0], -r2
    29bc:	07000002 	streq	r0, [r0, -r2]
    29c0:	44007000 	strmi	r7, [r0], #-0
    29c4:	9f1a3325 	svcls	0x001a3325
    29c8:	000002e6 	andeq	r0, r0, r6, ror #5
    29cc:	000002f6 	strdeq	r0, [r0], -r6
    29d0:	01f30008 	mvnseq	r0, r8
    29d4:	33254450 			; <UNDEFINED> instruction: 0x33254450
    29d8:	02f69f1a 	rscseq	r9, r6, #26, 30	; 0x68
    29dc:	02f80000 	rscseq	r0, r8, #0
    29e0:	00070000 	andeq	r0, r7, r0
    29e4:	25440070 	strbcs	r0, [r4, #-112]	; 0x70
    29e8:	f89f1a33 			; <UNDEFINED> instruction: 0xf89f1a33
    29ec:	00000002 	andeq	r0, r0, r2
    29f0:	08000003 	stmdaeq	r0, {r0, r1}
    29f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    29f8:	1a332544 	bne	ccbf10 <__Stack_Size+0xccbb10>
    29fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a00:	00000000 	andeq	r0, r0, r0
    2a04:	00030000 	andeq	r0, r3, r0
    2a08:	00030a00 	andeq	r0, r3, r0, lsl #20
    2a0c:	50000100 	andpl	r0, r0, r0, lsl #2
    2a10:	0000030a 	andeq	r0, r0, sl, lsl #6
    2a14:	00000314 	andeq	r0, r0, r4, lsl r3
    2a18:	01f30004 	mvnseq	r0, r4
    2a1c:	00009f50 	andeq	r9, r0, r0, asr pc
    2a20:	00000000 	andeq	r0, r0, r0
    2a24:	03000000 	movweq	r0, #0
    2a28:	030a0000 	movweq	r0, #40960	; 0xa000
    2a2c:	00020000 	andeq	r0, r2, r0
    2a30:	030a9f30 	movweq	r9, #44848	; 0xaf30
    2a34:	03140000 	tsteq	r4, #0
    2a38:	00010000 	andeq	r0, r1, r0
    2a3c:	00000050 	andeq	r0, r0, r0, asr r0
    2a40:	00000000 	andeq	r0, r0, r0
    2a44:	00030000 	andeq	r0, r3, r0
    2a48:	00030a00 	andeq	r0, r3, r0, lsl #20
    2a4c:	70000700 	andvc	r0, r0, r0, lsl #14
    2a50:	31254600 			; <UNDEFINED> instruction: 0x31254600
    2a54:	030a9f1a 	movweq	r9, #44826	; 0xaf1a
    2a58:	03140000 	tsteq	r4, #0
    2a5c:	00080000 	andeq	r0, r8, r0
    2a60:	465001f3 			; <UNDEFINED> instruction: 0x465001f3
    2a64:	9f1a3125 	svcls	0x001a3125
	...
    2a70:	00000030 	andeq	r0, r0, r0, lsr r0
    2a74:	0000003a 	andeq	r0, r0, sl, lsr r0
    2a78:	3a500001 	bcc	1402a84 <__Stack_Size+0x1402684>
    2a7c:	44000000 	strmi	r0, [r0], #-0
    2a80:	04000000 	streq	r0, [r0], #-0
    2a84:	5001f300 	andpl	pc, r1, r0, lsl #6
    2a88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a8c:	00000000 	andeq	r0, r0, r0
    2a90:	00003000 	andeq	r3, r0, r0
    2a94:	00003400 	andeq	r3, r0, r0, lsl #8
    2a98:	30000200 	andcc	r0, r0, r0, lsl #4
    2a9c:	0000349f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    2aa0:	00003a00 	andeq	r3, r0, r0, lsl #20
    2aa4:	53000100 	movwpl	r0, #256	; 0x100
    2aa8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2aac:	00000044 	andeq	r0, r0, r4, asr #32
    2ab0:	00500001 	subseq	r0, r0, r1
    2ab4:	00000000 	andeq	r0, r0, r0
    2ab8:	50000000 	andpl	r0, r0, r0
    2abc:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    2ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ac4:	005e5000 	subseq	r5, lr, r0
    2ac8:	007c0000 	rsbseq	r0, ip, r0
    2acc:	00040000 	andeq	r0, r4, r0
    2ad0:	9f5001f3 	svcls	0x005001f3
	...
    2adc:	00000050 	andeq	r0, r0, r0, asr r0
    2ae0:	0000006f 	andeq	r0, r0, pc, rrx
    2ae4:	6f510001 	svcvs	0x00510001
    2ae8:	70000000 	andvc	r0, r0, r0
    2aec:	04000000 	streq	r0, [r0], #-0
    2af0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2af4:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2af8:	00007300 	andeq	r7, r0, r0, lsl #6
    2afc:	51000100 	mrspl	r0, (UNDEF: 16)
    2b00:	00000073 	andeq	r0, r0, r3, ror r0
    2b04:	0000007c 	andeq	r0, r0, ip, ror r0
    2b08:	01f30004 	mvnseq	r0, r4
    2b0c:	00009f51 	andeq	r9, r0, r1, asr pc
    2b10:	00000000 	andeq	r0, r0, r0
    2b14:	00500000 	subseq	r0, r0, r0
    2b18:	00560000 	subseq	r0, r6, r0
    2b1c:	00020000 	andeq	r0, r2, r0
    2b20:	00569f30 	subseq	r9, r6, r0, lsr pc
    2b24:	005e0000 	subseq	r0, lr, r0
    2b28:	00010000 	andeq	r0, r1, r0
    2b2c:	00005e53 	andeq	r5, r0, r3, asr lr
    2b30:	00006f00 	andeq	r6, r0, r0, lsl #30
    2b34:	50000100 	andpl	r0, r0, r0, lsl #2
    2b38:	00000070 	andeq	r0, r0, r0, ror r0
    2b3c:	00000073 	andeq	r0, r0, r3, ror r0
    2b40:	00500001 	subseq	r0, r0, r1
    2b44:	00000000 	andeq	r0, r0, r0
    2b48:	a4000000 	strge	r0, [r0], #-0
    2b4c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    2b50:	01000000 	mrseq	r0, (UNDEF: 0)
    2b54:	00ae5000 	adceq	r5, lr, r0
    2b58:	00b80000 	adcseq	r0, r8, r0
    2b5c:	00040000 	andeq	r0, r4, r0
    2b60:	9f5001f3 	svcls	0x005001f3
	...
    2b6c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2b70:	000000a8 	andeq	r0, r0, r8, lsr #1
    2b74:	9f300002 	svcls	0x00300002
    2b78:	000000a8 	andeq	r0, r0, r8, lsr #1
    2b7c:	000000ae 	andeq	r0, r0, lr, lsr #1
    2b80:	00700008 	rsbseq	r0, r0, r8
    2b84:	301a0073 	andscc	r0, sl, r3, ror r0
    2b88:	00ae9f2e 	adceq	r9, lr, lr, lsr #30
    2b8c:	00b80000 	adcseq	r0, r8, r0
    2b90:	00090000 	andeq	r0, r9, r0
    2b94:	735001f3 	cmpvc	r0, #-1073741764	; 0xc000003c
    2b98:	2e301a00 	vaddcs.f32	s2, s0, s0
    2b9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2ba0:	00000000 	andeq	r0, r0, r0
    2ba4:	0000b800 	andeq	fp, r0, r0, lsl #16
    2ba8:	0000c000 	andeq	ip, r0, r0
    2bac:	50000100 	andpl	r0, r0, r0, lsl #2
    2bb0:	000000c0 	andeq	r0, r0, r0, asr #1
    2bb4:	000000c8 	andeq	r0, r0, r8, asr #1
    2bb8:	01f30004 	mvnseq	r0, r4
    2bbc:	00009f50 	andeq	r9, r0, r0, asr pc
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	00740000 	rsbseq	r0, r4, r0
    2bc8:	00800000 	addeq	r0, r0, r0
    2bcc:	00010000 	andeq	r0, r1, r0
    2bd0:	00008050 	andeq	r8, r0, r0, asr r0
    2bd4:	00008800 	andeq	r8, r0, r0, lsl #16
    2bd8:	f3000400 	vshl.u8	d0, d0, d0
    2bdc:	009f5001 	addseq	r5, pc, r1
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	74000000 	strvc	r0, [r0], #-0
    2be8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    2bec:	02000000 	andeq	r0, r0, #0
    2bf0:	789f3000 	ldmvc	pc, {ip, sp}	; <UNPREDICTABLE>
    2bf4:	80000000 	andhi	r0, r0, r0
    2bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bfc:	00805300 	addeq	r5, r0, r0, lsl #6
    2c00:	00880000 	addeq	r0, r8, r0
    2c04:	00010000 	andeq	r0, r1, r0
    2c08:	00000050 	andeq	r0, r0, r0, asr r0
    2c0c:	00000000 	andeq	r0, r0, r0
    2c10:	00009400 	andeq	r9, r0, r0, lsl #8
    2c14:	0000a000 	andeq	sl, r0, r0
    2c18:	50000100 	andpl	r0, r0, r0, lsl #2
    2c1c:	000000a0 	andeq	r0, r0, r0, lsr #1
    2c20:	000000a8 	andeq	r0, r0, r8, lsr #1
    2c24:	01f30004 	mvnseq	r0, r4
    2c28:	00009f50 	andeq	r9, r0, r0, asr pc
    2c2c:	00000000 	andeq	r0, r0, r0
    2c30:	00940000 	addseq	r0, r4, r0
    2c34:	009e0000 	addseq	r0, lr, r0
    2c38:	00010000 	andeq	r0, r1, r0
    2c3c:	00009e51 	andeq	r9, r0, r1, asr lr
    2c40:	0000a800 	andeq	sl, r0, r0, lsl #16
    2c44:	f3000400 	vshl.u8	d0, d0, d0
    2c48:	009f5101 	addseq	r5, pc, r1, lsl #2
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	94000000 	strls	r0, [r0], #-0
    2c54:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    2c58:	02000000 	andeq	r0, r0, #0
    2c5c:	989f3000 	ldmls	pc, {ip, sp}	; <UNPREDICTABLE>
    2c60:	9c000000 	stcls	0, cr0, [r0], {-0}
    2c64:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2c68:	11007300 	mrsne	r7, LR_irq
    2c6c:	7e83ffff 	mcrvc	15, 4, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
    2c70:	009c9f1a 	addseq	r9, ip, sl, lsl pc
    2c74:	00a00000 	adceq	r0, r0, r0
    2c78:	00010000 	andeq	r0, r1, r0
    2c7c:	0000a053 	andeq	sl, r0, r3, asr r0
    2c80:	0000a800 	andeq	sl, r0, r0, lsl #16
    2c84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2c90:	000000b4 	strheq	r0, [r0], -r4
    2c94:	000000be 	strheq	r0, [r0], -lr
    2c98:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
    2c9c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2ca0:	04000000 	streq	r0, [r0], #-0
    2ca4:	5001f300 	andpl	pc, r1, r0, lsl #6
    2ca8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2cac:	00000000 	andeq	r0, r0, r0
    2cb0:	0000b400 	andeq	fp, r0, r0, lsl #8
    2cb4:	0000b800 	andeq	fp, r0, r0, lsl #16
    2cb8:	30000200 	andcc	r0, r0, r0, lsl #4
    2cbc:	0000b89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2cc0:	0000be00 	andeq	fp, r0, r0, lsl #28
    2cc4:	53000100 	movwpl	r0, #256	; 0x100
    2cc8:	000000be 	strheq	r0, [r0], -lr
    2ccc:	000000c8 	andeq	r0, r0, r8, asr #1
    2cd0:	00500001 	subseq	r0, r0, r1
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2cdc:	e2000000 	and	r0, r0, #0
    2ce0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce4:	00e25000 	rsceq	r5, r2, r0
    2ce8:	00ec0000 	rsceq	r0, ip, r0
    2cec:	00040000 	andeq	r0, r4, r0
    2cf0:	9f5001f3 	svcls	0x005001f3
	...
    2cfc:	000000d8 	ldrdeq	r0, [r0], -r8
    2d00:	000000dc 	ldrdeq	r0, [r0], -ip
    2d04:	9f300002 	svcls	0x00300002
    2d08:	000000dc 	ldrdeq	r0, [r0], -ip
    2d0c:	000000e2 	andeq	r0, r0, r2, ror #1
    2d10:	e2530001 	subs	r0, r3, #1
    2d14:	ec000000 	stc	0, cr0, [r0], {-0}
    2d18:	01000000 	mrseq	r0, (UNDEF: 0)
    2d1c:	00005000 	andeq	r5, r0, r0
    2d20:	00000000 	andeq	r0, r0, r0
    2d24:	00ec0000 	rsceq	r0, ip, r0
    2d28:	00f60000 	rscseq	r0, r6, r0
    2d2c:	00010000 	andeq	r0, r1, r0
    2d30:	0000f650 	andeq	pc, r0, r0, asr r6	; <UNPREDICTABLE>
    2d34:	00010000 	andeq	r0, r1, r0
    2d38:	f3000400 	vshl.u8	d0, d0, d0
    2d3c:	009f5001 	addseq	r5, pc, r1
    2d40:	00000000 	andeq	r0, r0, r0
    2d44:	ec000000 	stc	0, cr0, [r0], {-0}
    2d48:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    2d4c:	02000000 	andeq	r0, r0, #0
    2d50:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    2d54:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    2d58:	01000000 	mrseq	r0, (UNDEF: 0)
    2d5c:	00f65300 	rscseq	r5, r6, r0, lsl #6
    2d60:	01000000 	mrseq	r0, (UNDEF: 0)
    2d64:	00010000 	andeq	r0, r1, r0
    2d68:	00000050 	andeq	r0, r0, r0, asr r0
    2d6c:	00000000 	andeq	r0, r0, r0
    2d70:	00010000 	andeq	r0, r1, r0
    2d74:	00010c00 	andeq	r0, r1, r0, lsl #24
    2d78:	50000100 	andpl	r0, r0, r0, lsl #2
    2d7c:	0000010c 	andeq	r0, r0, ip, lsl #2
    2d80:	00000114 	andeq	r0, r0, r4, lsl r1
    2d84:	01f30004 	mvnseq	r0, r4
    2d88:	00009f50 	andeq	r9, r0, r0, asr pc
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	01000000 	mrseq	r0, (UNDEF: 0)
    2d94:	01040000 	mrseq	r0, (UNDEF: 4)
    2d98:	00020000 	andeq	r0, r2, r0
    2d9c:	01049f30 	tsteq	r4, r0, lsr pc
    2da0:	010c0000 	mrseq	r0, (UNDEF: 12)
    2da4:	00010000 	andeq	r0, r1, r0
    2da8:	00010c53 	andeq	r0, r1, r3, asr ip
    2dac:	00011400 	andeq	r1, r1, r0, lsl #8
    2db0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2dbc:	00000114 	andeq	r0, r0, r4, lsl r1
    2dc0:	0000011c 	andeq	r0, r0, ip, lsl r1
    2dc4:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2dc8:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    2dcc:	04000001 	streq	r0, [r0], #-1
    2dd0:	5001f300 	andpl	pc, r1, r0, lsl #6
    2dd4:	00011e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    2dd8:	00012200 	andeq	r2, r1, r0, lsl #4
    2ddc:	50000100 	andpl	r0, r0, r0, lsl #2
    2de0:	00000122 	andeq	r0, r0, r2, lsr #2
    2de4:	0000012c 	andeq	r0, r0, ip, lsr #2
    2de8:	01f30004 	mvnseq	r0, r4
    2dec:	00009f50 	andeq	r9, r0, r0, asr pc
    2df0:	00000000 	andeq	r0, r0, r0
    2df4:	01380000 	teqeq	r8, r0
    2df8:	01420000 	mrseq	r0, (UNDEF: 66)
    2dfc:	00010000 	andeq	r0, r1, r0
    2e00:	00014250 	andeq	r4, r1, r0, asr r2
    2e04:	00014c00 	andeq	r4, r1, r0, lsl #24
    2e08:	f3000400 	vshl.u8	d0, d0, d0
    2e0c:	009f5001 	addseq	r5, pc, r1
    2e10:	00000000 	andeq	r0, r0, r0
    2e14:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2e18:	3c000001 	stccc	0, cr0, [r0], {1}
    2e1c:	02000001 	andeq	r0, r0, #1
    2e20:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    2e24:	42000001 	andmi	r0, r0, #1
    2e28:	01000001 	tsteq	r0, r1
    2e2c:	01425300 	mrseq	r5, SPSR_svc
    2e30:	014c0000 	mrseq	r0, (UNDEF: 76)
    2e34:	00010000 	andeq	r0, r1, r0
    2e38:	00000050 	andeq	r0, r0, r0, asr r0
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	00017800 	andeq	r7, r1, r0, lsl #16
    2e44:	00017e00 	andeq	r7, r1, r0, lsl #28
    2e48:	50000100 	andpl	r0, r0, r0, lsl #2
    2e4c:	0000017e 	andeq	r0, r0, lr, ror r1
    2e50:	00000188 	andeq	r0, r0, r8, lsl #3
    2e54:	01f30004 	mvnseq	r0, r4
    2e58:	00009f50 	andeq	r9, r0, r0, asr pc
    2e5c:	00000000 	andeq	r0, r0, r0
    2e60:	01940000 	orrseq	r0, r4, r0
    2e64:	019a0000 	orrseq	r0, sl, r0
    2e68:	00020000 	andeq	r0, r2, r0
    2e6c:	019a9f30 	orrseq	r9, sl, r0, lsr pc
    2e70:	019e0000 	orrseq	r0, lr, r0
    2e74:	00050000 	andeq	r0, r5, r0
    2e78:	1a3c0073 	bne	f0304c <__Stack_Size+0xf02c4c>
    2e7c:	00019e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    2e80:	0001a800 	andeq	sl, r1, r0, lsl #16
    2e84:	53000100 	movwpl	r0, #256	; 0x100
    2e88:	000001aa 	andeq	r0, r0, sl, lsr #3
    2e8c:	000001ac 	andeq	r0, r0, ip, lsr #3
    2e90:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
    2e94:	d2000001 	andle	r0, r0, #1
    2e98:	08000001 	stmdaeq	r0, {r0}
    2e9c:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    2ea0:	25341af0 	ldrcs	r1, [r4, #-2800]!	; 0xaf0
    2ea4:	0001dc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2ea8:	0001e000 	andeq	lr, r1, r0
    2eac:	74000900 	strvc	r0, [r0], #-2304	; 0x900
    2eb0:	07000a00 	streq	r0, [r0, -r0, lsl #20]
    2eb4:	9f25381a 	svcls	0x0025381a
    2eb8:	000001ea 	andeq	r0, r0, sl, ror #3
    2ebc:	000001ee 	andeq	r0, r0, lr, ror #3
    2ec0:	00740009 	rsbseq	r0, r4, r9
    2ec4:	1a38000a 	bne	e02ef4 <__Stack_Size+0xe02af4>
    2ec8:	f69f253b 			; <UNDEFINED> instruction: 0xf69f253b
    2ecc:	fa000001 	blx	2ed8 <__Stack_Size+0x2ad8>
    2ed0:	09000001 	stmdbeq	r0, {r0}
    2ed4:	0a007200 	beq	1f6dc <__Stack_Size+0x1f2dc>
    2ed8:	3e1ac000 	cdpcc	0, 1, cr12, cr10, cr0, {0}
    2edc:	00009f25 	andeq	r9, r0, r5, lsr #30
    2ee0:	00000000 	andeq	r0, r0, r0
    2ee4:	01940000 	orrseq	r0, r4, r0
    2ee8:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    2eec:	00020000 	andeq	r0, r2, r0
    2ef0:	01ac9f30 			; <UNDEFINED> instruction: 0x01ac9f30
    2ef4:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    2ef8:	00070000 	andeq	r0, r7, r0
    2efc:	414e0073 	hvcmi	57347	; 0xe003
    2f00:	b89f1a24 	ldmlt	pc, {r2, r5, r9, fp, ip}	; <UNPREDICTABLE>
    2f04:	c8000001 	stmdagt	r0, {r0}
    2f08:	01000001 	tsteq	r0, r1
    2f0c:	00005300 	andeq	r5, r0, r0, lsl #6
    2f10:	00000000 	andeq	r0, r0, r0
    2f14:	01940000 	orrseq	r0, r4, r0
    2f18:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    2f1c:	00020000 	andeq	r0, r2, r0
    2f20:	01b89f30 			; <UNDEFINED> instruction: 0x01b89f30
    2f24:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    2f28:	00070000 	andeq	r0, r7, r0
    2f2c:	3c400071 	mcrrcc	0, 7, r0, r0, cr1
    2f30:	009f1a24 	addseq	r1, pc, r4, lsr #20
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	94000000 	strls	r0, [r0], #-0
    2f3c:	cc000001 	stcgt	0, cr0, [r0], {1}
    2f40:	02000001 	andeq	r0, r0, #1
    2f44:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    2f48:	d2000001 	andle	r0, r0, #1
    2f4c:	13000001 	movwne	r0, #1
    2f50:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    2f54:	25341af0 	ldrcs	r1, [r4, #-2800]!	; 0xaf0
    2f58:	00609c03 	rsbeq	r9, r0, r3, lsl #24
    2f5c:	01942208 	orrseq	r2, r4, r8, lsl #4
    2f60:	9f1aff08 	svcls	0x001aff08
    2f64:	000001dc 	ldrdeq	r0, [r0], -ip
    2f68:	000001e0 	andeq	r0, r0, r0, ror #3
    2f6c:	00740014 	rsbseq	r0, r4, r4, lsl r0
    2f70:	1a07000a 	bne	1c2fa0 <__Stack_Size+0x1c2ba0>
    2f74:	9c032538 	cfstr32ls	mvfx2, [r3], {56}	; 0x38
    2f78:	22080060 	andcs	r0, r8, #96	; 0x60
    2f7c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    2f80:	01ea9f1a 	mvneq	r9, sl, lsl pc
    2f84:	01ee0000 	mvneq	r0, r0
    2f88:	00140000 	andseq	r0, r4, r0
    2f8c:	000a0074 	andeq	r0, sl, r4, ror r0
    2f90:	253b1a38 	ldrcs	r1, [fp, #-2616]!	; 0xa38
    2f94:	00609c03 	rsbeq	r9, r0, r3, lsl #24
    2f98:	01942208 	orrseq	r2, r4, r8, lsl #4
    2f9c:	9f1aff08 	svcls	0x001aff08
    2fa0:	000001f6 	strdeq	r0, [r0], -r6
    2fa4:	000001fa 	strdeq	r0, [r0], -sl
    2fa8:	00720014 	rsbseq	r0, r2, r4, lsl r0
    2fac:	1ac0000a 	bne	ff002fdc <SCS_BASE+0x1eff4fdc>
    2fb0:	ac03253e 	cfstr32ge	mvfx2, [r3], {62}	; 0x3e
    2fb4:	22080060 	andcs	r0, r8, #96	; 0x60
    2fb8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    2fbc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2fc0:	00000000 	andeq	r0, r0, r0
    2fc4:	02180000 	andseq	r0, r8, #0
    2fc8:	02200000 	eoreq	r0, r0, #0
    2fcc:	00010000 	andeq	r0, r1, r0
    2fd0:	00022050 	andeq	r2, r2, r0, asr r0
    2fd4:	00022200 	andeq	r2, r2, r0, lsl #4
    2fd8:	f3000400 	vshl.u8	d0, d0, d0
    2fdc:	229f5001 	addscs	r5, pc, #1
    2fe0:	26000002 	strcs	r0, [r0], -r2
    2fe4:	01000002 	tsteq	r0, r2
    2fe8:	02265000 	eoreq	r5, r6, #0
    2fec:	02300000 	eorseq	r0, r0, #0
    2ff0:	00040000 	andeq	r0, r4, r0
    2ff4:	9f5001f3 	svcls	0x005001f3
	...
    3000:	00000230 	andeq	r0, r0, r0, lsr r2
    3004:	00000238 	andeq	r0, r0, r8, lsr r2
    3008:	38500001 	ldmdacc	r0, {r0}^
    300c:	3a000002 	bcc	301c <__Stack_Size+0x2c1c>
    3010:	04000002 	streq	r0, [r0], #-2
    3014:	5001f300 	andpl	pc, r1, r0, lsl #6
    3018:	00023a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    301c:	00023e00 	andeq	r3, r2, r0, lsl #28
    3020:	50000100 	andpl	r0, r0, r0, lsl #2
    3024:	0000023e 	andeq	r0, r0, lr, lsr r2
    3028:	00000248 	andeq	r0, r0, r8, asr #4
    302c:	01f30004 	mvnseq	r0, r4
    3030:	00009f50 	andeq	r9, r0, r0, asr pc
    3034:	00000000 	andeq	r0, r0, r0
    3038:	02480000 	subeq	r0, r8, #0
    303c:	02500000 	subseq	r0, r0, #0
    3040:	00010000 	andeq	r0, r1, r0
    3044:	00025050 	andeq	r5, r2, r0, asr r0
    3048:	00025200 	andeq	r5, r2, r0, lsl #4
    304c:	f3000400 	vshl.u8	d0, d0, d0
    3050:	529f5001 	addspl	r5, pc, #1
    3054:	56000002 	strpl	r0, [r0], -r2
    3058:	01000002 	tsteq	r0, r2
    305c:	02565000 	subseq	r5, r6, #0
    3060:	02600000 	rsbeq	r0, r0, #0
    3064:	00040000 	andeq	r0, r4, r0
    3068:	9f5001f3 	svcls	0x005001f3
	...
    3074:	00000260 	andeq	r0, r0, r0, ror #4
    3078:	00000268 	andeq	r0, r0, r8, ror #4
    307c:	68500001 	ldmdavs	r0, {r0}^
    3080:	6a000002 	bvs	3090 <__Stack_Size+0x2c90>
    3084:	04000002 	streq	r0, [r0], #-2
    3088:	5001f300 	andpl	pc, r1, r0, lsl #6
    308c:	00026a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    3090:	00026e00 	andeq	r6, r2, r0, lsl #28
    3094:	50000100 	andpl	r0, r0, r0, lsl #2
    3098:	0000026e 	andeq	r0, r0, lr, ror #4
    309c:	00000278 	andeq	r0, r0, r8, ror r2
    30a0:	01f30004 	mvnseq	r0, r4
    30a4:	00009f50 	andeq	r9, r0, r0, asr pc
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	02780000 	rsbseq	r0, r8, #0
    30b0:	02800000 	addeq	r0, r0, #0
    30b4:	00010000 	andeq	r0, r1, r0
    30b8:	00028050 	andeq	r8, r2, r0, asr r0
    30bc:	00028200 	andeq	r8, r2, r0, lsl #4
    30c0:	f3000400 	vshl.u8	d0, d0, d0
    30c4:	829f5001 	addshi	r5, pc, #1
    30c8:	86000002 	strhi	r0, [r0], -r2
    30cc:	01000002 	tsteq	r0, r2
    30d0:	02865000 	addeq	r5, r6, #0
    30d4:	02900000 	addseq	r0, r0, #0
    30d8:	00040000 	andeq	r0, r4, r0
    30dc:	9f5001f3 	svcls	0x005001f3
	...
    30e8:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    30ec:	000002cc 	andeq	r0, r0, ip, asr #5
    30f0:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    30f4:	dc000002 	stcle	0, cr0, [r0], {2}
    30f8:	04000002 	streq	r0, [r0], #-2
    30fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3104:	00000000 	andeq	r0, r0, r0
    3108:	0002b400 	andeq	fp, r2, r0, lsl #8
    310c:	0002b600 	andeq	fp, r2, r0, lsl #12
    3110:	30000200 	andcc	r0, r0, r0, lsl #4
    3114:	0002b69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    3118:	0002c800 	andeq	ip, r2, r0, lsl #16
    311c:	72000600 	andvc	r0, r0, #0, 12
    3120:	1aff0800 	bne	fffc5128 <SCS_BASE+0x1ffb7128>
    3124:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    3128:	0002cc00 	andeq	ip, r2, r0, lsl #24
    312c:	70000800 	andvc	r0, r0, r0, lsl #16
    3130:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    3134:	cc9f1aff 	vldmiagt	pc, {s2-s256}
    3138:	dc000002 	stcle	0, cr0, [r0], {2}
    313c:	09000002 	stmdbeq	r0, {r1}
    3140:	5001f300 	andpl	pc, r1, r0, lsl #6
    3144:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    3148:	00009f1a 	andeq	r9, r0, sl, lsl pc
    314c:	00000000 	andeq	r0, r0, r0
    3150:	02b40000 	adcseq	r0, r4, #0
    3154:	02be0000 	adcseq	r0, lr, #0
    3158:	00020000 	andeq	r0, r2, r0
    315c:	02be9f30 	adcseq	r9, lr, #48, 30	; 0xc0
    3160:	02c00000 	sbceq	r0, r0, #0
    3164:	00010000 	andeq	r0, r1, r0
    3168:	0002c053 	andeq	ip, r2, r3, asr r0
    316c:	0002c600 	andeq	ip, r2, r0, lsl #12
    3170:	30000200 	andcc	r0, r0, r0, lsl #4
    3174:	0002c69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    3178:	0002dc00 	andeq	sp, r2, r0, lsl #24
    317c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3188:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    318c:	000002c8 	andeq	r0, r0, r8, asr #5
    3190:	9f300002 	svcls	0x00300002
    3194:	000002c8 	andeq	r0, r0, r8, asr #5
    3198:	000002cc 	andeq	r0, r0, ip, asr #5
    319c:	0073000d 	rsbseq	r0, r3, sp
    31a0:	1a4f0070 	bne	13c3368 <__Stack_Size+0x13c2f68>
    31a4:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    31a8:	cc9f1a31 	vldmiagt	pc, {s2-s50}
    31ac:	dc000002 	stcle	0, cr0, [r0], {2}
    31b0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    31b4:	f3007300 	vcgt.u8	d7, d0, d0
    31b8:	1a4f5001 	bne	13d71c4 <__Stack_Size+0x13d6dc4>
    31bc:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    31c0:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
    31c4:	00000000 	andeq	r0, r0, r0
    31c8:	e2000000 	and	r0, r0, #0
    31cc:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    31d0:	02000002 	andeq	r0, r0, #2
    31d4:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    31d8:	00000002 	andeq	r0, r0, r2
    31dc:	07000003 	streq	r0, [r0, -r3]
    31e0:	48007000 	stmdami	r0, {ip, sp, lr}
    31e4:	9f2e3024 	svcls	0x002e3024
	...
    31f0:	000002e8 	andeq	r0, r0, r8, ror #5
    31f4:	000002fa 	strdeq	r0, [r0], -sl
    31f8:	00500001 	subseq	r0, r0, r1
    31fc:	00000000 	andeq	r0, r0, r0
    3200:	1c000000 	stcne	0, cr0, [r0], {-0}
    3204:	26000003 	strcs	r0, [r0], -r3
    3208:	01000003 	tsteq	r0, r3
    320c:	03265000 			; <UNDEFINED> instruction: 0x03265000
    3210:	03300000 	teqeq	r0, #0
    3214:	00040000 	andeq	r0, r4, r0
    3218:	9f5001f3 	svcls	0x005001f3
	...
    3224:	0000031c 	andeq	r0, r0, ip, lsl r3
    3228:	00000320 	andeq	r0, r0, r0, lsr #6
    322c:	9f300002 	svcls	0x00300002
    3230:	00000320 	andeq	r0, r0, r0, lsr #6
    3234:	00000326 	andeq	r0, r0, r6, lsr #6
    3238:	0070000b 	rsbseq	r0, r0, fp
    323c:	731aff08 	tstvc	sl, #8, 30	; <UNPREDICTABLE>
    3240:	2e301a00 	vaddcs.f32	s2, s0, s0
    3244:	0003269f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    3248:	00033000 	andeq	r3, r3, r0
    324c:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    3250:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    3254:	1a00731a 	bne	1fec4 <__Stack_Size+0x1fac4>
    3258:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    325c:	00000000 	andeq	r0, r0, r0
    3260:	24000000 	strcs	r0, [r0], #-0
    3264:	34000000 	strcc	r0, [r0], #-0
    3268:	01000000 	mrseq	r0, (UNDEF: 0)
    326c:	00345000 	eorseq	r5, r4, r0
    3270:	003c0000 	eorseq	r0, ip, r0
    3274:	00030000 	andeq	r0, r3, r0
    3278:	3c9f7e70 	ldccc	14, cr7, [pc], {112}	; 0x70
    327c:	40000000 	andmi	r0, r0, r0
    3280:	04000000 	streq	r0, [r0], #-0
    3284:	5001f300 	andpl	pc, r1, r0, lsl #6
    3288:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    328c:	00004c00 	andeq	r4, r0, r0, lsl #24
    3290:	70000300 	andvc	r0, r0, r0, lsl #6
    3294:	00009f7e 	andeq	r9, r0, lr, ror pc
    3298:	00000000 	andeq	r0, r0, r0
    329c:	00700000 	rsbseq	r0, r0, r0
    32a0:	00800000 	addeq	r0, r0, r0
    32a4:	00010000 	andeq	r0, r1, r0
    32a8:	00008050 	andeq	r8, r0, r0, asr r0
    32ac:	00008c00 	andeq	r8, r0, r0, lsl #24
    32b0:	f3000400 	vshl.u8	d0, d0, d0
    32b4:	009f5001 	addseq	r5, pc, r1
    32b8:	00000000 	andeq	r0, r0, r0
    32bc:	70000000 	andvc	r0, r0, r0
    32c0:	7a000000 	bvc	32c8 <__Stack_Size+0x2ec8>
    32c4:	02000000 	andeq	r0, r0, #0
    32c8:	7a9f3000 	bvc	fe7cf2d0 <SCS_BASE+0x1e7c12d0>
    32cc:	8c000000 	stchi	0, cr0, [r0], {-0}
    32d0:	01000000 	mrseq	r0, (UNDEF: 0)
    32d4:	00005300 	andeq	r5, r0, r0, lsl #6
    32d8:	00000000 	andeq	r0, r0, r0
    32dc:	00700000 	rsbseq	r0, r0, r0
    32e0:	00800000 	addeq	r0, r0, r0
    32e4:	00080000 	andeq	r0, r8, r0
    32e8:	25330070 	ldrcs	r0, [r3, #-112]!	; 0x70
    32ec:	9f1aff08 	svcls	0x001aff08
    32f0:	00000080 	andeq	r0, r0, r0, lsl #1
    32f4:	0000008c 	andeq	r0, r0, ip, lsl #1
    32f8:	01f30009 	mvnseq	r0, r9
    32fc:	08253350 	stmdaeq	r5!, {r4, r6, r8, r9, ip, sp}
    3300:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    3304:	00000000 	andeq	r0, r0, r0
    3308:	70000000 	andvc	r0, r0, r0
    330c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3310:	02000000 	andeq	r0, r0, #0
    3314:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    3318:	80000000 	andhi	r0, r0, r0
    331c:	0b000000 	bleq	3324 <__Stack_Size+0x2f24>
    3320:	70007300 	andvc	r7, r0, r0, lsl #6
    3324:	1aff0800 	bne	fffc532c <SCS_BASE+0x1ffb732c>
    3328:	9f1a3125 	svcls	0x001a3125
    332c:	00000080 	andeq	r0, r0, r0, lsl #1
    3330:	0000008c 	andeq	r0, r0, ip, lsl #1
    3334:	0073000c 	rsbseq	r0, r3, ip
    3338:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    333c:	31251aff 	strdcc	r1, [r5, -pc]!
    3340:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    334c:	002c0000 	eoreq	r0, ip, r0
    3350:	00010000 	andeq	r0, r1, r0
    3354:	00002c51 	andeq	r2, r0, r1, asr ip
    3358:	00003200 	andeq	r3, r0, r0, lsl #4
    335c:	f3000400 	vshl.u8	d0, d0, d0
    3360:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    336c:	1c000000 	stcne	0, cr0, [r0], {-0}
    3370:	01000000 	mrseq	r0, (UNDEF: 0)
    3374:	001c5200 	andseq	r5, ip, r0, lsl #4
    3378:	00320000 	eorseq	r0, r2, r0
    337c:	00040000 	andeq	r0, r4, r0
    3380:	9f5201f3 	svcls	0x005201f3
	...
    3390:	00000024 	andeq	r0, r0, r4, lsr #32
    3394:	24530001 	ldrbcs	r0, [r3], #-1
    3398:	32000000 	andcc	r0, r0, #0
    339c:	04000000 	streq	r0, [r0], #-0
    33a0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    33a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    33b0:	00001400 	andeq	r1, r0, r0, lsl #8
    33b4:	30000200 	andcc	r0, r0, r0, lsl #4
    33b8:	0000149f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    33bc:	00001600 	andeq	r1, r0, r0, lsl #12
    33c0:	54000100 	strpl	r0, [r0], #-256	; 0x100
    33c4:	00000016 	andeq	r0, r0, r6, lsl r0
    33c8:	0000001a 	andeq	r0, r0, sl, lsl r0
    33cc:	00740007 	rsbseq	r0, r4, r7
    33d0:	1aff0c0b 	bne	fffc6404 <SCS_BASE+0x1ffb8404>
    33d4:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    33d8:	00003200 	andeq	r3, r0, r0, lsl #4
    33dc:	52000100 	andpl	r0, r0, #0, 2
	...
    33ec:	00000016 	andeq	r0, r0, r6, lsl r0
    33f0:	9f300002 	svcls	0x00300002
    33f4:	00000016 	andeq	r0, r0, r6, lsl r0
    33f8:	00000020 	andeq	r0, r0, r0, lsr #32
    33fc:	2c550001 	mrrccs	0, 0, r0, r5, cr1
    3400:	32000000 	andcc	r0, r0, #0
    3404:	01000000 	mrseq	r0, (UNDEF: 0)
    3408:	00005100 	andeq	r5, r0, r0, lsl #2
    340c:	00000000 	andeq	r0, r0, r0
    3410:	00320000 	eorseq	r0, r2, r0
    3414:	00620000 	rsbeq	r0, r2, r0
    3418:	00010000 	andeq	r0, r1, r0
    341c:	00006251 	andeq	r6, r0, r1, asr r2
    3420:	00006c00 	andeq	r6, r0, r0, lsl #24
    3424:	f3000400 	vshl.u8	d0, d0, d0
    3428:	009f5101 	addseq	r5, pc, r1, lsl #2
    342c:	00000000 	andeq	r0, r0, r0
    3430:	32000000 	andcc	r0, r0, #0
    3434:	5a000000 	bpl	343c <__Stack_Size+0x303c>
    3438:	01000000 	mrseq	r0, (UNDEF: 0)
    343c:	005a5200 	subseq	r5, sl, r0, lsl #4
    3440:	006c0000 	rsbeq	r0, ip, r0
    3444:	00040000 	andeq	r0, r4, r0
    3448:	9f5201f3 	svcls	0x005201f3
	...
    3454:	00000032 	andeq	r0, r0, r2, lsr r0
    3458:	0000005e 	andeq	r0, r0, lr, asr r0
    345c:	5e530001 	cdppl	0, 5, cr0, cr3, cr1, {0}
    3460:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3464:	04000000 	streq	r0, [r0], #-0
    3468:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    346c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3470:	00000000 	andeq	r0, r0, r0
    3474:	00003200 	andeq	r3, r0, r0, lsl #4
    3478:	00004200 	andeq	r4, r0, r0, lsl #4
    347c:	30000200 	andcc	r0, r0, r0, lsl #4
    3480:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    3484:	00004800 	andeq	r4, r0, r0, lsl #16
    3488:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    348c:	00000064 	andeq	r0, r0, r4, rrx
    3490:	0000006c 	andeq	r0, r0, ip, rrx
    3494:	00530001 	subseq	r0, r3, r1
    3498:	00000000 	andeq	r0, r0, r0
    349c:	32000000 	andcc	r0, r0, #0
    34a0:	4a000000 	bmi	34a8 <__Stack_Size+0x30a8>
    34a4:	02000000 	andeq	r0, r0, #0
    34a8:	4a9f3000 	bmi	fe7cf4b0 <SCS_BASE+0x1e7c14b0>
    34ac:	52000000 	andpl	r0, r0, #0
    34b0:	01000000 	mrseq	r0, (UNDEF: 0)
    34b4:	00665400 	rsbeq	r5, r6, r0, lsl #8
    34b8:	006c0000 	rsbeq	r0, ip, r0
    34bc:	00010000 	andeq	r0, r1, r0
    34c0:	00000054 	andeq	r0, r0, r4, asr r0
    34c4:	00000000 	andeq	r0, r0, r0
    34c8:	00003200 	andeq	r3, r0, r0, lsl #4
    34cc:	00004a00 	andeq	r4, r0, r0, lsl #20
    34d0:	30000200 	andcc	r0, r0, r0, lsl #4
    34d4:	00004a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    34d8:	00006200 	andeq	r6, r0, r0, lsl #4
    34dc:	71000500 	tstvc	r0, r0, lsl #10
    34e0:	9f243400 	svcls	0x00243400
    34e4:	00000062 	andeq	r0, r0, r2, rrx
    34e8:	0000006c 	andeq	r0, r0, ip, rrx
    34ec:	01f30006 	mvnseq	r0, r6
    34f0:	9f243451 	svcls	0x00243451
	...
    34fc:	0000006c 	andeq	r0, r0, ip, rrx
    3500:	0000008e 	andeq	r0, r0, lr, lsl #1
    3504:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    3508:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    350c:	04000000 	streq	r0, [r0], #-0
    3510:	5001f300 	andpl	pc, r1, r0, lsl #6
    3514:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    3518:	0000be00 	andeq	fp, r0, r0, lsl #28
    351c:	50000100 	andpl	r0, r0, r0, lsl #2
    3520:	000000be 	strheq	r0, [r0], -lr
    3524:	000000ca 	andeq	r0, r0, sl, asr #1
    3528:	01f30004 	mvnseq	r0, r4
    352c:	00ca9f50 	sbceq	r9, sl, r0, asr pc
    3530:	00cc0000 	sbceq	r0, ip, r0
    3534:	00010000 	andeq	r0, r1, r0
    3538:	0000cc50 	andeq	ip, r0, r0, asr ip
    353c:	0000de00 	andeq	sp, r0, r0, lsl #28
    3540:	f3000400 	vshl.u8	d0, d0, d0
    3544:	de9f5001 	cdple	0, 9, cr5, cr15, cr1, {0}
    3548:	e0000000 	and	r0, r0, r0
    354c:	01000000 	mrseq	r0, (UNDEF: 0)
    3550:	00e05000 	rsceq	r5, r0, r0
    3554:	00ea0000 	rsceq	r0, sl, r0
    3558:	00040000 	andeq	r0, r4, r0
    355c:	9f5001f3 	svcls	0x005001f3
    3560:	000000ea 	andeq	r0, r0, sl, ror #1
    3564:	000000ec 	andeq	r0, r0, ip, ror #1
    3568:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    356c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    3570:	04000000 	streq	r0, [r0], #-0
    3574:	5001f300 	andpl	pc, r1, r0, lsl #6
    3578:	0000f69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    357c:	0000f800 	andeq	pc, r0, r0, lsl #16
    3580:	50000100 	andpl	r0, r0, r0, lsl #2
    3584:	000000f8 	strdeq	r0, [r0], -r8
    3588:	00000102 	andeq	r0, r0, r2, lsl #2
    358c:	01f30004 	mvnseq	r0, r4
    3590:	01029f50 	tsteq	r2, r0, asr pc
    3594:	01040000 	mrseq	r0, (UNDEF: 4)
    3598:	00010000 	andeq	r0, r1, r0
    359c:	00010450 	andeq	r0, r1, r0, asr r4
    35a0:	00010e00 	andeq	r0, r1, r0, lsl #28
    35a4:	f3000400 	vshl.u8	d0, d0, d0
    35a8:	0e9f5001 	cdpeq	0, 9, cr5, cr15, cr1, {0}
    35ac:	12000001 	andne	r0, r0, #1
    35b0:	01000001 	tsteq	r0, r1
    35b4:	01125000 	tsteq	r2, r0
    35b8:	01260000 			; <UNDEFINED> instruction: 0x01260000
    35bc:	00040000 	andeq	r0, r4, r0
    35c0:	9f5001f3 	svcls	0x005001f3
    35c4:	00000126 	andeq	r0, r0, r6, lsr #2
    35c8:	00000134 	andeq	r0, r0, r4, lsr r1
    35cc:	00500001 	subseq	r0, r0, r1
    35d0:	00000000 	andeq	r0, r0, r0
    35d4:	70000000 	andvc	r0, r0, r0
    35d8:	aa000001 	bge	35e4 <__Stack_Size+0x31e4>
    35dc:	02000001 	andeq	r0, r0, #1
    35e0:	aa9f3000 	bge	fe7cf5e8 <SCS_BASE+0x1e7c15e8>
    35e4:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    35e8:	01000001 	tsteq	r0, r1
    35ec:	00005600 	andeq	r5, r0, r0, lsl #12
    35f0:	00000000 	andeq	r0, r0, r0
    35f4:	01700000 	cmneq	r0, r0
    35f8:	01800000 	orreq	r0, r0, r0
    35fc:	00020000 	andeq	r0, r2, r0
    3600:	01809f30 	orreq	r9, r0, r0, lsr pc
    3604:	01960000 	orrseq	r0, r6, r0
    3608:	00010000 	andeq	r0, r1, r0
    360c:	0001ac53 	andeq	sl, r1, r3, asr ip
    3610:	0001e400 	andeq	lr, r1, r0, lsl #8
    3614:	53000100 	movwpl	r0, #256	; 0x100
	...
    3620:	00000170 	andeq	r0, r0, r0, ror r1
    3624:	000001aa 	andeq	r0, r0, sl, lsr #3
    3628:	9f300002 	svcls	0x00300002
    362c:	000001aa 	andeq	r0, r0, sl, lsr #3
    3630:	000001cc 	andeq	r0, r0, ip, asr #3
    3634:	cc540001 	mrrcgt	0, 0, r0, r4, cr1
    3638:	d6000001 	strle	r0, [r0], -r1
    363c:	08000001 	stmdaeq	r0, {r0}
    3640:	940c7100 	strls	r7, [ip], #-256	; 0x100
    3644:	21007502 	tstcs	r0, r2, lsl #10
    3648:	0001d69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    364c:	0001de00 	andeq	sp, r1, r0, lsl #28
    3650:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    365c:	000001e4 	andeq	r0, r0, r4, ror #3
    3660:	0000021a 	andeq	r0, r0, sl, lsl r2
    3664:	9f300002 	svcls	0x00300002
    3668:	0000021a 	andeq	r0, r0, sl, lsl r2
    366c:	00000268 	andeq	r0, r0, r8, ror #4
    3670:	00540001 	subseq	r0, r4, r1
    3674:	00000000 	andeq	r0, r0, r0
    3678:	e4000000 	str	r0, [r0], #-0
    367c:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    3680:	02000001 	andeq	r0, r0, #1
    3684:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    3688:	0a000001 	beq	3694 <__Stack_Size+0x3294>
    368c:	01000002 	tsteq	r0, r2
    3690:	021a5300 	andseq	r5, sl, #0, 6
    3694:	021e0000 	andseq	r0, lr, #0
    3698:	00010000 	andeq	r0, r1, r0
    369c:	00022253 	andeq	r2, r2, r3, asr r2
    36a0:	00023600 	andeq	r3, r2, r0, lsl #12
    36a4:	53000100 	movwpl	r0, #256	; 0x100
    36a8:	0000023a 	andeq	r0, r0, sl, lsr r2
    36ac:	0000023e 	andeq	r0, r0, lr, lsr r2
    36b0:	3e530001 	cdpcc	0, 5, cr0, cr3, cr1, {0}
    36b4:	44000002 	strmi	r0, [r0], #-2
    36b8:	01000002 	tsteq	r0, r2
    36bc:	02445200 	subeq	r5, r4, #0, 4
    36c0:	024a0000 	subeq	r0, sl, #0
    36c4:	00010000 	andeq	r0, r1, r0
    36c8:	00025453 	andeq	r5, r2, r3, asr r4
    36cc:	00026c00 	andeq	r6, r2, r0, lsl #24
    36d0:	53000100 	movwpl	r0, #256	; 0x100
	...
    36dc:	000001e4 	andeq	r0, r0, r4, ror #3
    36e0:	0000021a 	andeq	r0, r0, sl, lsl r2
    36e4:	9f300002 	svcls	0x00300002
    36e8:	0000021a 	andeq	r0, r0, sl, lsl r2
    36ec:	00000252 	andeq	r0, r0, r2, asr r2
    36f0:	54550001 	ldrbpl	r0, [r5], #-1
    36f4:	60000002 	andvs	r0, r0, r2
    36f8:	01000002 	tsteq	r0, r2
    36fc:	02605200 	rsbeq	r5, r0, #0, 4
    3700:	02680000 	rsbeq	r0, r8, #0
    3704:	00010000 	andeq	r0, r1, r0
    3708:	00000055 	andeq	r0, r0, r5, asr r0
    370c:	00000000 	andeq	r0, r0, r0
    3710:	00026c00 	andeq	r6, r2, r0, lsl #24
    3714:	00029e00 	andeq	r9, r2, r0, lsl #28
    3718:	30000200 	andcc	r0, r0, r0, lsl #4
    371c:	00029e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    3720:	0002ec00 	andeq	lr, r2, r0, lsl #24
    3724:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3730:	0000026c 	andeq	r0, r0, ip, ror #4
    3734:	0000027c 	andeq	r0, r0, ip, ror r2
    3738:	9f300002 	svcls	0x00300002
    373c:	0000027c 	andeq	r0, r0, ip, ror r2
    3740:	0000028e 	andeq	r0, r0, lr, lsl #5
    3744:	9e530001 	cdpls	0, 5, cr0, cr3, cr1, {0}
    3748:	a2000002 	andge	r0, r0, #2
    374c:	01000002 	tsteq	r0, r2
    3750:	02a65300 	adceq	r5, r6, #0, 6
    3754:	02ba0000 	adcseq	r0, sl, #0
    3758:	00010000 	andeq	r0, r1, r0
    375c:	0002c253 	andeq	ip, r2, r3, asr r2
    3760:	0002c600 	andeq	ip, r2, r0, lsl #12
    3764:	53000100 	movwpl	r0, #256	; 0x100
    3768:	000002c6 	andeq	r0, r0, r6, asr #5
    376c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3770:	d0520001 	subsle	r0, r2, r1
    3774:	dc000002 	stcle	0, cr0, [r0], {2}
    3778:	01000002 	tsteq	r0, r2
    377c:	02e25300 	rsceq	r5, r2, #0, 6
    3780:	02f00000 	rscseq	r0, r0, #0
    3784:	00010000 	andeq	r0, r1, r0
    3788:	00000053 	andeq	r0, r0, r3, asr r0
    378c:	00000000 	andeq	r0, r0, r0
    3790:	00026c00 	andeq	r6, r2, r0, lsl #24
    3794:	00029e00 	andeq	r9, r2, r0, lsl #28
    3798:	30000200 	andcc	r0, r0, r0, lsl #4
    379c:	00029e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    37a0:	0002ce00 	andeq	ip, r2, r0, lsl #28
    37a4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    37a8:	000002e2 	andeq	r0, r0, r2, ror #5
    37ac:	000002e4 	andeq	r0, r0, r4, ror #5
    37b0:	e4550001 	ldrb	r0, [r5], #-1
    37b4:	ec000002 	stc	0, cr0, [r0], {2}
    37b8:	01000002 	tsteq	r0, r2
    37bc:	00005400 	andeq	r5, r0, r0, lsl #8
    37c0:	00000000 	andeq	r0, r0, r0
    37c4:	02f00000 	rscseq	r0, r0, #0
    37c8:	03420000 	movteq	r0, #8192	; 0x2000
    37cc:	00010000 	andeq	r0, r1, r0
    37d0:	00034251 	andeq	r4, r3, r1, asr r2
    37d4:	00035800 	andeq	r5, r3, r0, lsl #16
    37d8:	f3000400 	vshl.u8	d0, d0, d0
    37dc:	009f5101 	addseq	r5, pc, r1, lsl #2
    37e0:	00000000 	andeq	r0, r0, r0
    37e4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    37e8:	24000002 	strcs	r0, [r0], #-2
    37ec:	02000003 	andeq	r0, r0, #3
    37f0:	2c9f3000 	ldccs	0, cr3, [pc], {0}
    37f4:	58000003 	stmdapl	r0, {r0, r1}
    37f8:	01000003 	tsteq	r0, r3
    37fc:	00005200 	andeq	r5, r0, r0, lsl #4
    3800:	00000000 	andeq	r0, r0, r0
    3804:	02f00000 	rscseq	r0, r0, #0
    3808:	03000000 	movweq	r0, #0
    380c:	00020000 	andeq	r0, r2, r0
    3810:	03009f30 	movweq	r9, #3888	; 0xf30
    3814:	03120000 	tsteq	r2, #0
    3818:	00010000 	andeq	r0, r1, r0
    381c:	00033453 	andeq	r3, r3, r3, asr r4
    3820:	00035800 	andeq	r5, r3, r0, lsl #16
    3824:	53000100 	movwpl	r0, #256	; 0x100
	...
    3830:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3834:	00000324 	andeq	r0, r0, r4, lsr #6
    3838:	9f300002 	svcls	0x00300002
    383c:	00000324 	andeq	r0, r0, r4, lsr #6
    3840:	0000034a 	andeq	r0, r0, sl, asr #6
    3844:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    3848:	54000003 	strpl	r0, [r0], #-3
    384c:	01000003 	tsteq	r0, r3
    3850:	00005400 	andeq	r5, r0, r0, lsl #8
    3854:	00000000 	andeq	r0, r0, r0
    3858:	03f60000 	mvnseq	r0, #0
    385c:	03fe0000 	mvnseq	r0, #0
    3860:	00010000 	andeq	r0, r1, r0
    3864:	0003fe51 	andeq	pc, r3, r1, asr lr	; <UNPREDICTABLE>
    3868:	00040000 	andeq	r0, r4, r0
    386c:	f3000400 	vshl.u8	d0, d0, d0
    3870:	009f5101 	addseq	r5, pc, r1, lsl #2
    3874:	04000004 	streq	r0, [r0], #-4
    3878:	01000004 	tsteq	r0, r4
    387c:	04045100 	streq	r5, [r4], #-256	; 0x100
    3880:	04080000 	streq	r0, [r8], #-0
    3884:	00040000 	andeq	r0, r4, r0
    3888:	9f5101f3 	svcls	0x005101f3
	...
    3894:	0000040c 	andeq	r0, r0, ip, lsl #8
    3898:	0000040e 	andeq	r0, r0, lr, lsl #8
    389c:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
    38a0:	14000004 	strne	r0, [r0], #-4
    38a4:	04000004 	streq	r0, [r0], #-4
    38a8:	5201f300 	andpl	pc, r1, #0, 6
    38ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    38b0:	00000000 	andeq	r0, r0, r0
    38b4:	00041400 	andeq	r1, r4, r0, lsl #8
    38b8:	00041c00 	andeq	r1, r4, r0, lsl #24
    38bc:	51000100 	mrspl	r0, (UNDEF: 16)
    38c0:	0000041c 	andeq	r0, r0, ip, lsl r4
    38c4:	0000041e 	andeq	r0, r0, lr, lsl r4
    38c8:	01f30004 	mvnseq	r0, r4
    38cc:	041e9f51 	ldreq	r9, [lr], #-3921	; 0xf51
    38d0:	04220000 	strteq	r0, [r2], #-0
    38d4:	00010000 	andeq	r0, r1, r0
    38d8:	00042251 	andeq	r2, r4, r1, asr r2
    38dc:	00042600 	andeq	r2, r4, r0, lsl #12
    38e0:	f3000400 	vshl.u8	d0, d0, d0
    38e4:	009f5101 	addseq	r5, pc, r1, lsl #2
    38e8:	00000000 	andeq	r0, r0, r0
    38ec:	34000000 	strcc	r0, [r0], #-0
    38f0:	40000004 	andmi	r0, r0, r4
    38f4:	01000004 	tsteq	r0, r4
    38f8:	04405100 	strbeq	r5, [r0], #-256	; 0x100
    38fc:	044e0000 	strbeq	r0, [lr], #-0
    3900:	00040000 	andeq	r0, r4, r0
    3904:	9f5101f3 	svcls	0x005101f3
	...
    3910:	00000434 	andeq	r0, r0, r4, lsr r4
    3914:	00000436 	andeq	r0, r0, r6, lsr r4
    3918:	9f300002 	svcls	0x00300002
    391c:	00000436 	andeq	r0, r0, r6, lsr r4
    3920:	0000043a 	andeq	r0, r0, sl, lsr r4
    3924:	3e530001 	cdpcc	0, 5, cr0, cr3, cr1, {0}
    3928:	40000004 	andmi	r0, r0, r4
    392c:	01000004 	tsteq	r0, r4
    3930:	04405300 	strbeq	r5, [r0], #-768	; 0x300
    3934:	044e0000 	strbeq	r0, [lr], #-0
    3938:	00010000 	andeq	r0, r1, r0
    393c:	00000051 	andeq	r0, r0, r1, asr r0
    3940:	00000000 	andeq	r0, r0, r0
    3944:	00044e00 	andeq	r4, r4, r0, lsl #28
    3948:	00046100 	andeq	r6, r4, r0, lsl #2
    394c:	50000100 	andpl	r0, r0, r0, lsl #2
    3950:	00000461 	andeq	r0, r0, r1, ror #8
    3954:	00000464 	andeq	r0, r0, r4, ror #8
    3958:	64540001 	ldrbvs	r0, [r4], #-1
    395c:	67000004 	strvs	r0, [r0, -r4]
    3960:	01000004 	tsteq	r0, r4
    3964:	04675000 	strbteq	r5, [r7], #-0
    3968:	04820000 	streq	r0, [r2], #0
    396c:	00010000 	andeq	r0, r1, r0
    3970:	00000054 	andeq	r0, r0, r4, asr r0
    3974:	00000000 	andeq	r0, r0, r0
    3978:	00044e00 	andeq	r4, r4, r0, lsl #28
    397c:	00045600 	andeq	r5, r4, r0, lsl #12
    3980:	51000100 	mrspl	r0, (UNDEF: 16)
    3984:	00000456 	andeq	r0, r0, r6, asr r4
    3988:	00000482 	andeq	r0, r0, r2, lsl #9
    398c:	01f30004 	mvnseq	r0, r4
    3990:	00009f51 	andeq	r9, r0, r1, asr pc
    3994:	00000000 	andeq	r0, r0, r0
    3998:	044e0000 	strbeq	r0, [lr], #-0
    399c:	045c0000 	ldrbeq	r0, [ip], #-0
    39a0:	00010000 	andeq	r0, r1, r0
    39a4:	00045c52 	andeq	r5, r4, r2, asr ip
    39a8:	00048200 	andeq	r8, r4, r0, lsl #4
    39ac:	f3000400 	vshl.u8	d0, d0, d0
    39b0:	009f5201 	addseq	r5, pc, r1, lsl #4
    39b4:	00000000 	andeq	r0, r0, r0
    39b8:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    39bc:	61000004 	tstvs	r0, r4
    39c0:	01000004 	tsteq	r0, r4
    39c4:	04615300 	strbteq	r5, [r1], #-768	; 0x300
    39c8:	04640000 	strbteq	r0, [r4], #-0
    39cc:	00040000 	andeq	r0, r4, r0
    39d0:	9f5301f3 	svcls	0x005301f3
    39d4:	00000464 	andeq	r0, r0, r4, ror #8
    39d8:	00000467 	andeq	r0, r0, r7, ror #8
    39dc:	67530001 	ldrbvs	r0, [r3, -r1]
    39e0:	82000004 	andhi	r0, r0, #4
    39e4:	04000004 	streq	r0, [r0], #-4
    39e8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    39ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39f0:	00000000 	andeq	r0, r0, r0
    39f4:	00046800 	andeq	r6, r4, r0, lsl #16
    39f8:	00046a00 	andeq	r6, r4, r0, lsl #20
    39fc:	30000200 	andcc	r0, r0, r0, lsl #4
    3a00:	00046a9f 	muleq	r4, pc, sl	; <UNPREDICTABLE>
    3a04:	00046e00 	andeq	r6, r4, r0, lsl #28
    3a08:	51000100 	mrspl	r0, (UNDEF: 16)
    3a0c:	00000472 	andeq	r0, r0, r2, ror r4
    3a10:	00000482 	andeq	r0, r0, r2, lsl #9
    3a14:	00510001 	subseq	r0, r1, r1
    3a18:	00000000 	andeq	r0, r0, r0
    3a1c:	82000000 	andhi	r0, r0, #0
    3a20:	92000004 	andls	r0, r0, #4
    3a24:	01000004 	tsteq	r0, r4
    3a28:	04925100 	ldreq	r5, [r2], #256	; 0x100
    3a2c:	04960000 	ldreq	r0, [r6], #0
    3a30:	00040000 	andeq	r0, r4, r0
    3a34:	9f5101f3 	svcls	0x005101f3
	...
    3a40:	00000482 	andeq	r0, r0, r2, lsl #9
    3a44:	0000048a 	andeq	r0, r0, sl, lsl #9
    3a48:	8a530001 	bhi	14c3a54 <__Stack_Size+0x14c3654>
    3a4c:	96000004 	strls	r0, [r0], -r4
    3a50:	04000004 	streq	r0, [r0], #-4
    3a54:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3a58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a5c:	00000000 	andeq	r0, r0, r0
    3a60:	00048200 	andeq	r8, r4, r0, lsl #4
    3a64:	00048600 	andeq	r8, r4, r0, lsl #12
    3a68:	30000200 	andcc	r0, r0, r0, lsl #4
    3a6c:	0004869f 	muleq	r4, pc, r6	; <UNPREDICTABLE>
    3a70:	00048c00 	andeq	r8, r4, r0, lsl #24
    3a74:	74000600 	strvc	r0, [r0], #-1536	; 0x600
    3a78:	1aff0800 	bne	fffc5a80 <SCS_BASE+0x1ffb7a80>
    3a7c:	0004929f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    3a80:	00049600 	andeq	r9, r4, r0, lsl #12
    3a84:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3a90:	00000496 	muleq	r0, r6, r4
    3a94:	0000049d 	muleq	r0, sp, r4
    3a98:	9d500001 	ldclls	0, cr0, [r0, #-4]
    3a9c:	b0000004 	andlt	r0, r0, r4
    3aa0:	01000004 	tsteq	r0, r4
    3aa4:	00005400 	andeq	r5, r0, r0, lsl #8
    3aa8:	00000000 	andeq	r0, r0, r0
    3aac:	04960000 	ldreq	r0, [r6], #0
    3ab0:	049d0000 	ldreq	r0, [sp], #0
    3ab4:	00010000 	andeq	r0, r1, r0
    3ab8:	00049d51 	andeq	r9, r4, r1, asr sp
    3abc:	0004b000 	andeq	fp, r4, r0
    3ac0:	f3000400 	vshl.u8	d0, d0, d0
    3ac4:	009f5101 	addseq	r5, pc, r1, lsl #2
    3ac8:	00000000 	andeq	r0, r0, r0
    3acc:	96000000 	strls	r0, [r0], -r0
    3ad0:	9d000004 	stcls	0, cr0, [r0, #-16]
    3ad4:	01000004 	tsteq	r0, r4
    3ad8:	049d5200 	ldreq	r5, [sp], #512	; 0x200
    3adc:	04b00000 	ldrteq	r0, [r0], #0
    3ae0:	00040000 	andeq	r0, r4, r0
    3ae4:	9f5201f3 	svcls	0x005201f3
	...
    3af0:	00000496 	muleq	r0, r6, r4
    3af4:	0000049d 	muleq	r0, sp, r4
    3af8:	9d530001 	ldclls	0, cr0, [r3, #-4]
    3afc:	b0000004 	andlt	r0, r0, r4
    3b00:	04000004 	streq	r0, [r0], #-4
    3b04:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3b08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b0c:	00000000 	andeq	r0, r0, r0
    3b10:	00049600 	andeq	r9, r4, r0, lsl #12
    3b14:	0004a000 	andeq	sl, r4, r0
    3b18:	30000200 	andcc	r0, r0, r0, lsl #4
    3b1c:	0004a09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
    3b20:	0004a400 	andeq	sl, r4, r0, lsl #8
    3b24:	73000500 	movwvc	r0, #1280	; 0x500
    3b28:	9f213700 	svcls	0x00213700
    3b2c:	000004a8 	andeq	r0, r0, r8, lsr #9
    3b30:	000004ac 	andeq	r0, r0, ip, lsr #9
    3b34:	00730005 	rsbseq	r0, r3, r5
    3b38:	ac9f2137 	ldfges	f2, [pc], {55}	; 0x37
    3b3c:	b0000004 	andlt	r0, r0, r4
    3b40:	01000004 	tsteq	r0, r4
    3b44:	00005300 	andeq	r5, r0, r0, lsl #6
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	04b00000 	ldrteq	r0, [r0], #0
    3b50:	04b70000 	ldrteq	r0, [r7], #0
    3b54:	00010000 	andeq	r0, r1, r0
    3b58:	0004b750 	andeq	fp, r4, r0, asr r7
    3b5c:	0004c400 	andeq	ip, r4, r0, lsl #8
    3b60:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    3b6c:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3b70:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3b74:	b7510001 	ldrblt	r0, [r1, -r1]
    3b78:	c4000004 	strgt	r0, [r0], #-4
    3b7c:	04000004 	streq	r0, [r0], #-4
    3b80:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3b84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b88:	00000000 	andeq	r0, r0, r0
    3b8c:	0004b000 	andeq	fp, r4, r0
    3b90:	0004b700 	andeq	fp, r4, r0, lsl #14
    3b94:	52000100 	andpl	r0, r0, #0, 2
    3b98:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3b9c:	000004c4 	andeq	r0, r0, r4, asr #9
    3ba0:	01f30004 	mvnseq	r0, r4
    3ba4:	00009f52 	andeq	r9, r0, r2, asr pc
    3ba8:	00000000 	andeq	r0, r0, r0
    3bac:	04b00000 	ldrteq	r0, [r0], #0
    3bb0:	04b70000 	ldrteq	r0, [r7], #0
    3bb4:	00010000 	andeq	r0, r1, r0
    3bb8:	0004b753 	andeq	fp, r4, r3, asr r7
    3bbc:	0004c400 	andeq	ip, r4, r0, lsl #8
    3bc0:	f3000400 	vshl.u8	d0, d0, d0
    3bc4:	009f5301 	addseq	r5, pc, r1, lsl #6
    3bc8:	00000000 	andeq	r0, r0, r0
    3bcc:	ca000000 	bgt	3bd4 <__Stack_Size+0x37d4>
    3bd0:	d6000004 	strle	r0, [r0], -r4
    3bd4:	01000004 	tsteq	r0, r4
    3bd8:	04d65100 	ldrbeq	r5, [r6], #256	; 0x100
    3bdc:	04da0000 	ldrbeq	r0, [sl], #0
    3be0:	00040000 	andeq	r0, r4, r0
    3be4:	9f5101f3 	svcls	0x005101f3
	...
    3bf0:	000004ca 	andeq	r0, r0, sl, asr #9
    3bf4:	000004cc 	andeq	r0, r0, ip, asr #9
    3bf8:	9f300002 	svcls	0x00300002
    3bfc:	000004cc 	andeq	r0, r0, ip, asr #9
    3c00:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3c04:	d4530001 	ldrble	r0, [r3], #-1
    3c08:	d6000004 	strle	r0, [r0], -r4
    3c0c:	01000004 	tsteq	r0, r4
    3c10:	04d65300 	ldrbeq	r5, [r6], #768	; 0x300
    3c14:	04da0000 	ldrbeq	r0, [sl], #0
    3c18:	00010000 	andeq	r0, r1, r0
    3c1c:	00000051 	andeq	r0, r0, r1, asr r0
    3c20:	00000000 	andeq	r0, r0, r0
    3c24:	0004da00 	andeq	sp, r4, r0, lsl #20
    3c28:	0004e600 	andeq	lr, r4, r0, lsl #12
    3c2c:	51000100 	mrspl	r0, (UNDEF: 16)
    3c30:	000004e6 	andeq	r0, r0, r6, ror #9
    3c34:	000004ea 	andeq	r0, r0, sl, ror #9
    3c38:	01f30004 	mvnseq	r0, r4
    3c3c:	00009f51 	andeq	r9, r0, r1, asr pc
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	04da0000 	ldrbeq	r0, [sl], #0
    3c48:	04dc0000 	ldrbeq	r0, [ip], #0
    3c4c:	00020000 	andeq	r0, r2, r0
    3c50:	04dc9f30 	ldrbeq	r9, [ip], #3888	; 0xf30
    3c54:	04e00000 	strbteq	r0, [r0], #0
    3c58:	00010000 	andeq	r0, r1, r0
    3c5c:	0004e453 	andeq	lr, r4, r3, asr r4
    3c60:	0004e600 	andeq	lr, r4, r0, lsl #12
    3c64:	53000100 	movwpl	r0, #256	; 0x100
    3c68:	000004e6 	andeq	r0, r0, r6, ror #9
    3c6c:	000004ea 	andeq	r0, r0, sl, ror #9
    3c70:	00510001 	subseq	r0, r1, r1
    3c74:	00000000 	andeq	r0, r0, r0
    3c78:	ea000000 	b	3c80 <__Stack_Size+0x3880>
    3c7c:	18000004 	stmdane	r0, {r2}
    3c80:	01000005 	tsteq	r0, r5
    3c84:	05185100 	ldreq	r5, [r8, #-256]	; 0x100
    3c88:	05260000 	streq	r0, [r6, #-0]!
    3c8c:	00040000 	andeq	r0, r4, r0
    3c90:	9f5101f3 	svcls	0x005101f3
	...
    3c9c:	000004ea 	andeq	r0, r0, sl, ror #9
    3ca0:	00000508 	andeq	r0, r0, r8, lsl #10
    3ca4:	08520001 	ldmdaeq	r2, {r0}^
    3ca8:	26000005 	strcs	r0, [r0], -r5
    3cac:	04000005 	streq	r0, [r0], #-5
    3cb0:	5201f300 	andpl	pc, r1, #0, 6
    3cb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3cb8:	00000000 	andeq	r0, r0, r0
    3cbc:	0004ea00 	andeq	lr, r4, r0, lsl #20
    3cc0:	00051600 	andeq	r1, r5, r0, lsl #12
    3cc4:	53000100 	movwpl	r0, #256	; 0x100
    3cc8:	00000516 	andeq	r0, r0, r6, lsl r5
    3ccc:	00000526 	andeq	r0, r0, r6, lsr #10
    3cd0:	01f30004 	mvnseq	r0, r4
    3cd4:	00009f53 	andeq	r9, r0, r3, asr pc
    3cd8:	00000000 	andeq	r0, r0, r0
    3cdc:	04ea0000 	strbteq	r0, [sl], #0
    3ce0:	04ee0000 	strbteq	r0, [lr], #0
    3ce4:	00020000 	andeq	r0, r2, r0
    3ce8:	04ee9f30 	strbteq	r9, [lr], #3888	; 0xf30
    3cec:	05040000 	streq	r0, [r4, #-0]
    3cf0:	00010000 	andeq	r0, r1, r0
    3cf4:	00050e56 	andeq	r0, r5, r6, asr lr
    3cf8:	00051800 	andeq	r1, r5, r0, lsl #16
    3cfc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3d00:	00000518 	andeq	r0, r0, r8, lsl r5
    3d04:	00000526 	andeq	r0, r0, r6, lsr #10
    3d08:	00510001 	subseq	r0, r1, r1
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	ea000000 	b	3d18 <__Stack_Size+0x3918>
    3d14:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    3d18:	02000004 	andeq	r0, r0, #4
    3d1c:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    3d20:	f6000004 			; <UNDEFINED> instruction: 0xf6000004
    3d24:	01000004 	tsteq	r0, r4
    3d28:	051c5400 	ldreq	r5, [ip, #-1024]	; 0x400
    3d2c:	05260000 	streq	r0, [r6, #-0]!
    3d30:	00010000 	andeq	r0, r1, r0
    3d34:	00000054 	andeq	r0, r0, r4, asr r0
    3d38:	00000000 	andeq	r0, r0, r0
    3d3c:	0004ea00 	andeq	lr, r4, r0, lsl #20
    3d40:	0004f800 	andeq	pc, r4, r0, lsl #16
    3d44:	30000200 	andcc	r0, r0, r0, lsl #4
    3d48:	0004f89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
    3d4c:	00050000 	andeq	r0, r5, r0
    3d50:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    3d54:	0000051e 	andeq	r0, r0, lr, lsl r5
    3d58:	00000526 	andeq	r0, r0, r6, lsr #10
    3d5c:	00550001 	subseq	r0, r5, r1
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	26000000 	strcs	r0, [r0], -r0
    3d68:	32000005 	andcc	r0, r0, #5
    3d6c:	01000005 	tsteq	r0, r5
    3d70:	05325100 	ldreq	r5, [r2, #-256]!	; 0x100
    3d74:	05360000 	ldreq	r0, [r6, #-0]!
    3d78:	00040000 	andeq	r0, r4, r0
    3d7c:	9f5101f3 	svcls	0x005101f3
	...
    3d88:	00000526 	andeq	r0, r0, r6, lsr #10
    3d8c:	00000528 	andeq	r0, r0, r8, lsr #10
    3d90:	9f300002 	svcls	0x00300002
    3d94:	00000528 	andeq	r0, r0, r8, lsr #10
    3d98:	0000052c 	andeq	r0, r0, ip, lsr #10
    3d9c:	30530001 	subscc	r0, r3, r1
    3da0:	32000005 	andcc	r0, r0, #5
    3da4:	01000005 	tsteq	r0, r5
    3da8:	05325300 	ldreq	r5, [r2, #-768]!	; 0x300
    3dac:	05360000 	ldreq	r0, [r6, #-0]!
    3db0:	00010000 	andeq	r0, r1, r0
    3db4:	00000051 	andeq	r0, r0, r1, asr r0
    3db8:	00000000 	andeq	r0, r0, r0
    3dbc:	00053600 	andeq	r3, r5, r0, lsl #12
    3dc0:	00054400 	andeq	r4, r5, r0, lsl #8
    3dc4:	51000100 	mrspl	r0, (UNDEF: 16)
    3dc8:	00000544 	andeq	r0, r0, r4, asr #10
    3dcc:	0000054a 	andeq	r0, r0, sl, asr #10
    3dd0:	01f30004 	mvnseq	r0, r4
    3dd4:	00009f51 	andeq	r9, r0, r1, asr pc
    3dd8:	00000000 	andeq	r0, r0, r0
    3ddc:	05360000 	ldreq	r0, [r6, #-0]!
    3de0:	05380000 	ldreq	r0, [r8, #-0]!
    3de4:	00020000 	andeq	r0, r2, r0
    3de8:	05389f30 	ldreq	r9, [r8, #-3888]!	; 0xf30
    3dec:	053c0000 	ldreq	r0, [ip, #-0]!
    3df0:	00010000 	andeq	r0, r1, r0
    3df4:	00054053 	andeq	r4, r5, r3, asr r0
    3df8:	00054600 	andeq	r4, r5, r0, lsl #12
    3dfc:	53000100 	movwpl	r0, #256	; 0x100
    3e00:	00000546 	andeq	r0, r0, r6, asr #10
    3e04:	0000054a 	andeq	r0, r0, sl, asr #10
    3e08:	00510001 	subseq	r0, r1, r1
    3e0c:	00000000 	andeq	r0, r0, r0
    3e10:	4a000000 	bmi	3e18 <__Stack_Size+0x3a18>
    3e14:	56000005 	strpl	r0, [r0], -r5
    3e18:	01000005 	tsteq	r0, r5
    3e1c:	05565100 	ldrbeq	r5, [r6, #-256]	; 0x100
    3e20:	055a0000 	ldrbeq	r0, [sl, #-0]
    3e24:	00040000 	andeq	r0, r4, r0
    3e28:	9f5101f3 	svcls	0x005101f3
	...
    3e34:	0000054a 	andeq	r0, r0, sl, asr #10
    3e38:	0000054c 	andeq	r0, r0, ip, asr #10
    3e3c:	9f300002 	svcls	0x00300002
    3e40:	0000054c 	andeq	r0, r0, ip, asr #10
    3e44:	00000550 	andeq	r0, r0, r0, asr r5
    3e48:	54530001 	ldrbpl	r0, [r3], #-1
    3e4c:	56000005 	strpl	r0, [r0], -r5
    3e50:	01000005 	tsteq	r0, r5
    3e54:	05565300 	ldrbeq	r5, [r6, #-768]	; 0x300
    3e58:	055a0000 	ldrbeq	r0, [sl, #-0]
    3e5c:	00010000 	andeq	r0, r1, r0
    3e60:	00000051 	andeq	r0, r0, r1, asr r0
    3e64:	00000000 	andeq	r0, r0, r0
    3e68:	00055a00 	andeq	r5, r5, r0, lsl #20
    3e6c:	00056800 	andeq	r6, r5, r0, lsl #16
    3e70:	51000100 	mrspl	r0, (UNDEF: 16)
    3e74:	00000568 	andeq	r0, r0, r8, ror #10
    3e78:	0000056e 	andeq	r0, r0, lr, ror #10
    3e7c:	01f30004 	mvnseq	r0, r4
    3e80:	00009f51 	andeq	r9, r0, r1, asr pc
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	055a0000 	ldrbeq	r0, [sl, #-0]
    3e8c:	055c0000 	ldrbeq	r0, [ip, #-0]
    3e90:	00020000 	andeq	r0, r2, r0
    3e94:	055c9f30 	ldrbeq	r9, [ip, #-3888]	; 0xf30
    3e98:	05600000 	strbeq	r0, [r0, #-0]!
    3e9c:	00010000 	andeq	r0, r1, r0
    3ea0:	00056453 	andeq	r6, r5, r3, asr r4
    3ea4:	00056a00 	andeq	r6, r5, r0, lsl #20
    3ea8:	53000100 	movwpl	r0, #256	; 0x100
    3eac:	0000056a 	andeq	r0, r0, sl, ror #10
    3eb0:	0000056e 	andeq	r0, r0, lr, ror #10
    3eb4:	00510001 	subseq	r0, r1, r1
    3eb8:	00000000 	andeq	r0, r0, r0
    3ebc:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    3ec0:	da000005 	ble	3edc <__Stack_Size+0x3adc>
    3ec4:	01000005 	tsteq	r0, r5
    3ec8:	05da5100 	ldrbeq	r5, [sl, #256]	; 0x100
    3ecc:	05de0000 	ldrbeq	r0, [lr]
    3ed0:	00040000 	andeq	r0, r4, r0
    3ed4:	9f5101f3 	svcls	0x005101f3
	...
    3ee0:	000005ce 	andeq	r0, r0, lr, asr #11
    3ee4:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3ee8:	9f300002 	svcls	0x00300002
    3eec:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3ef0:	000005d4 	ldrdeq	r0, [r0], -r4
    3ef4:	d8530001 	ldmdale	r3, {r0}^
    3ef8:	da000005 	ble	3f14 <__Stack_Size+0x3b14>
    3efc:	01000005 	tsteq	r0, r5
    3f00:	05da5300 	ldrbeq	r5, [sl, #768]	; 0x300
    3f04:	05de0000 	ldrbeq	r0, [lr]
    3f08:	00010000 	andeq	r0, r1, r0
    3f0c:	00000051 	andeq	r0, r0, r1, asr r0
    3f10:	00000000 	andeq	r0, r0, r0
    3f14:	0005de00 	andeq	sp, r5, r0, lsl #28
    3f18:	0005ec00 	andeq	lr, r5, r0, lsl #24
    3f1c:	51000100 	mrspl	r0, (UNDEF: 16)
    3f20:	000005ec 	andeq	r0, r0, ip, ror #11
    3f24:	000005f2 	strdeq	r0, [r0], -r2
    3f28:	01f30004 	mvnseq	r0, r4
    3f2c:	00009f51 	andeq	r9, r0, r1, asr pc
    3f30:	00000000 	andeq	r0, r0, r0
    3f34:	05de0000 	ldrbeq	r0, [lr]
    3f38:	05e00000 	strbeq	r0, [r0, #0]!
    3f3c:	00020000 	andeq	r0, r2, r0
    3f40:	05e09f30 	strbeq	r9, [r0, #3888]!	; 0xf30
    3f44:	05e40000 	strbeq	r0, [r4, #0]!
    3f48:	00010000 	andeq	r0, r1, r0
    3f4c:	0005e853 	andeq	lr, r5, r3, asr r8
    3f50:	0005ee00 	andeq	lr, r5, r0, lsl #28
    3f54:	53000100 	movwpl	r0, #256	; 0x100
    3f58:	000005ee 	andeq	r0, r0, lr, ror #11
    3f5c:	000005f2 	strdeq	r0, [r0], -r2
    3f60:	00510001 	subseq	r0, r1, r1
    3f64:	00000000 	andeq	r0, r0, r0
    3f68:	f2000000 	vhadd.s8	d0, d0, d0
    3f6c:	fe000005 	cdp2	0, 0, cr0, cr0, cr5, {0}
    3f70:	01000005 	tsteq	r0, r5
    3f74:	05fe5100 	ldrbeq	r5, [lr, #256]!	; 0x100
    3f78:	06020000 	streq	r0, [r2], -r0
    3f7c:	00040000 	andeq	r0, r4, r0
    3f80:	9f5101f3 	svcls	0x005101f3
	...
    3f8c:	000005f2 	strdeq	r0, [r0], -r2
    3f90:	000005f4 	strdeq	r0, [r0], -r4
    3f94:	9f300002 	svcls	0x00300002
    3f98:	000005f4 	strdeq	r0, [r0], -r4
    3f9c:	000005f8 	strdeq	r0, [r0], -r8
    3fa0:	fc530001 	mrrc2	0, 0, r0, r3, cr1
    3fa4:	fe000005 	cdp2	0, 0, cr0, cr0, cr5, {0}
    3fa8:	01000005 	tsteq	r0, r5
    3fac:	05fe5300 	ldrbeq	r5, [lr, #768]!	; 0x300
    3fb0:	06020000 	streq	r0, [r2], -r0
    3fb4:	00010000 	andeq	r0, r1, r0
    3fb8:	00000051 	andeq	r0, r0, r1, asr r0
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	00060200 	andeq	r0, r6, r0, lsl #4
    3fc4:	00061000 	andeq	r1, r6, r0
    3fc8:	51000100 	mrspl	r0, (UNDEF: 16)
    3fcc:	00000610 	andeq	r0, r0, r0, lsl r6
    3fd0:	00000616 	andeq	r0, r0, r6, lsl r6
    3fd4:	01f30004 	mvnseq	r0, r4
    3fd8:	00009f51 	andeq	r9, r0, r1, asr pc
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	06020000 	streq	r0, [r2], -r0
    3fe4:	06040000 	streq	r0, [r4], -r0
    3fe8:	00020000 	andeq	r0, r2, r0
    3fec:	06049f30 			; <UNDEFINED> instruction: 0x06049f30
    3ff0:	06080000 	streq	r0, [r8], -r0
    3ff4:	00010000 	andeq	r0, r1, r0
    3ff8:	00060c53 	andeq	r0, r6, r3, asr ip
    3ffc:	00061200 	andeq	r1, r6, r0, lsl #4
    4000:	53000100 	movwpl	r0, #256	; 0x100
    4004:	00000612 	andeq	r0, r0, r2, lsl r6
    4008:	00000616 	andeq	r0, r0, r6, lsl r6
    400c:	00510001 	subseq	r0, r1, r1
    4010:	00000000 	andeq	r0, r0, r0
    4014:	16000000 	strne	r0, [r0], -r0
    4018:	22000006 	andcs	r0, r0, #6
    401c:	01000006 	tsteq	r0, r6
    4020:	06225100 	strteq	r5, [r2], -r0, lsl #2
    4024:	06260000 	strteq	r0, [r6], -r0
    4028:	00040000 	andeq	r0, r4, r0
    402c:	9f5101f3 	svcls	0x005101f3
	...
    4038:	00000616 	andeq	r0, r0, r6, lsl r6
    403c:	00000618 	andeq	r0, r0, r8, lsl r6
    4040:	9f300002 	svcls	0x00300002
    4044:	00000618 	andeq	r0, r0, r8, lsl r6
    4048:	0000061c 	andeq	r0, r0, ip, lsl r6
    404c:	20530001 	subscs	r0, r3, r1
    4050:	22000006 	andcs	r0, r0, #6
    4054:	01000006 	tsteq	r0, r6
    4058:	06225300 	strteq	r5, [r2], -r0, lsl #6
    405c:	06260000 	strteq	r0, [r6], -r0
    4060:	00010000 	andeq	r0, r1, r0
    4064:	00000051 	andeq	r0, r0, r1, asr r0
    4068:	00000000 	andeq	r0, r0, r0
    406c:	00062600 	andeq	r2, r6, r0, lsl #12
    4070:	00063400 	andeq	r3, r6, r0, lsl #8
    4074:	51000100 	mrspl	r0, (UNDEF: 16)
    4078:	00000634 	andeq	r0, r0, r4, lsr r6
    407c:	0000063a 	andeq	r0, r0, sl, lsr r6
    4080:	01f30004 	mvnseq	r0, r4
    4084:	00009f51 	andeq	r9, r0, r1, asr pc
    4088:	00000000 	andeq	r0, r0, r0
    408c:	06260000 	strteq	r0, [r6], -r0
    4090:	06280000 	strteq	r0, [r8], -r0
    4094:	00020000 	andeq	r0, r2, r0
    4098:	06289f30 	qasxeq	r9, r8, r0
    409c:	062c0000 	strteq	r0, [ip], -r0
    40a0:	00010000 	andeq	r0, r1, r0
    40a4:	00063053 	andeq	r3, r6, r3, asr r0
    40a8:	00063600 	andeq	r3, r6, r0, lsl #12
    40ac:	53000100 	movwpl	r0, #256	; 0x100
    40b0:	00000636 	andeq	r0, r0, r6, lsr r6
    40b4:	0000063a 	andeq	r0, r0, sl, lsr r6
    40b8:	00510001 	subseq	r0, r1, r1
    40bc:	00000000 	andeq	r0, r0, r0
    40c0:	3a000000 	bcc	40c8 <__Stack_Size+0x3cc8>
    40c4:	46000006 	strmi	r0, [r0], -r6
    40c8:	01000006 	tsteq	r0, r6
    40cc:	06465100 	strbeq	r5, [r6], -r0, lsl #2
    40d0:	064a0000 	strbeq	r0, [sl], -r0
    40d4:	00040000 	andeq	r0, r4, r0
    40d8:	9f5101f3 	svcls	0x005101f3
	...
    40e4:	0000063a 	andeq	r0, r0, sl, lsr r6
    40e8:	0000063c 	andeq	r0, r0, ip, lsr r6
    40ec:	9f300002 	svcls	0x00300002
    40f0:	0000063c 	andeq	r0, r0, ip, lsr r6
    40f4:	00000640 	andeq	r0, r0, r0, asr #12
    40f8:	44530001 	ldrbmi	r0, [r3], #-1
    40fc:	46000006 	strmi	r0, [r0], -r6
    4100:	01000006 	tsteq	r0, r6
    4104:	06465300 	strbeq	r5, [r6], -r0, lsl #6
    4108:	064a0000 	strbeq	r0, [sl], -r0
    410c:	00010000 	andeq	r0, r1, r0
    4110:	00000051 	andeq	r0, r0, r1, asr r0
    4114:	00000000 	andeq	r0, r0, r0
    4118:	00064a00 	andeq	r4, r6, r0, lsl #20
    411c:	00065800 	andeq	r5, r6, r0, lsl #16
    4120:	51000100 	mrspl	r0, (UNDEF: 16)
    4124:	00000658 	andeq	r0, r0, r8, asr r6
    4128:	0000065e 	andeq	r0, r0, lr, asr r6
    412c:	01f30004 	mvnseq	r0, r4
    4130:	00009f51 	andeq	r9, r0, r1, asr pc
    4134:	00000000 	andeq	r0, r0, r0
    4138:	064a0000 	strbeq	r0, [sl], -r0
    413c:	064c0000 	strbeq	r0, [ip], -r0
    4140:	00020000 	andeq	r0, r2, r0
    4144:	064c9f30 			; <UNDEFINED> instruction: 0x064c9f30
    4148:	06500000 	ldrbeq	r0, [r0], -r0
    414c:	00010000 	andeq	r0, r1, r0
    4150:	00065453 	andeq	r5, r6, r3, asr r4
    4154:	00065a00 	andeq	r5, r6, r0, lsl #20
    4158:	53000100 	movwpl	r0, #256	; 0x100
    415c:	0000065a 	andeq	r0, r0, sl, asr r6
    4160:	0000065e 	andeq	r0, r0, lr, asr r6
    4164:	00510001 	subseq	r0, r1, r1
    4168:	00000000 	andeq	r0, r0, r0
    416c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    4170:	6a000006 	bvs	4190 <__Stack_Size+0x3d90>
    4174:	01000006 	tsteq	r0, r6
    4178:	066a5100 	strbteq	r5, [sl], -r0, lsl #2
    417c:	066e0000 	strbteq	r0, [lr], -r0
    4180:	00040000 	andeq	r0, r4, r0
    4184:	9f5101f3 	svcls	0x005101f3
	...
    4190:	0000065e 	andeq	r0, r0, lr, asr r6
    4194:	00000660 	andeq	r0, r0, r0, ror #12
    4198:	9f300002 	svcls	0x00300002
    419c:	00000660 	andeq	r0, r0, r0, ror #12
    41a0:	00000664 	andeq	r0, r0, r4, ror #12
    41a4:	68530001 	ldmdavs	r3, {r0}^
    41a8:	6a000006 	bvs	41c8 <__Stack_Size+0x3dc8>
    41ac:	01000006 	tsteq	r0, r6
    41b0:	066a5300 	strbteq	r5, [sl], -r0, lsl #6
    41b4:	066e0000 	strbteq	r0, [lr], -r0
    41b8:	00010000 	andeq	r0, r1, r0
    41bc:	00000051 	andeq	r0, r0, r1, asr r0
    41c0:	00000000 	andeq	r0, r0, r0
    41c4:	00066e00 	andeq	r6, r6, r0, lsl #28
    41c8:	00067800 	andeq	r7, r6, r0, lsl #16
    41cc:	51000100 	mrspl	r0, (UNDEF: 16)
    41d0:	00000678 	andeq	r0, r0, r8, ror r6
    41d4:	0000067e 	andeq	r0, r0, lr, ror r6
    41d8:	01f30004 	mvnseq	r0, r4
    41dc:	00009f51 	andeq	r9, r0, r1, asr pc
    41e0:	00000000 	andeq	r0, r0, r0
    41e4:	066e0000 	strbteq	r0, [lr], -r0
    41e8:	06700000 	ldrbteq	r0, [r0], -r0
    41ec:	00020000 	andeq	r0, r2, r0
    41f0:	06709f30 	uhasxeq	r9, r0, r0
    41f4:	067a0000 	ldrbteq	r0, [sl], -r0
    41f8:	00010000 	andeq	r0, r1, r0
    41fc:	00067a53 	andeq	r7, r6, r3, asr sl
    4200:	00067e00 	andeq	r7, r6, r0, lsl #28
    4204:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4210:	0000067e 	andeq	r0, r0, lr, ror r6
    4214:	0000068a 	andeq	r0, r0, sl, lsl #13
    4218:	8a510001 	bhi	1444224 <__Stack_Size+0x1443e24>
    421c:	8e000006 	cdphi	0, 0, cr0, cr0, cr6, {0}
    4220:	04000006 	streq	r0, [r0], #-6
    4224:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4228:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    422c:	00000000 	andeq	r0, r0, r0
    4230:	00067e00 	andeq	r7, r6, r0, lsl #28
    4234:	00068000 	andeq	r8, r6, r0
    4238:	30000200 	andcc	r0, r0, r0, lsl #4
    423c:	0006809f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    4240:	00068400 	andeq	r8, r6, r0, lsl #8
    4244:	53000100 	movwpl	r0, #256	; 0x100
    4248:	00000688 	andeq	r0, r0, r8, lsl #13
    424c:	0000068a 	andeq	r0, r0, sl, lsl #13
    4250:	8a530001 	bhi	14c425c <__Stack_Size+0x14c3e5c>
    4254:	8e000006 	cdphi	0, 0, cr0, cr0, cr6, {0}
    4258:	01000006 	tsteq	r0, r6
    425c:	00005100 	andeq	r5, r0, r0, lsl #2
    4260:	00000000 	andeq	r0, r0, r0
    4264:	068e0000 	streq	r0, [lr], r0
    4268:	06980000 	ldreq	r0, [r8], r0
    426c:	00010000 	andeq	r0, r1, r0
    4270:	00069851 	andeq	r9, r6, r1, asr r8
    4274:	00069e00 	andeq	r9, r6, r0, lsl #28
    4278:	f3000400 	vshl.u8	d0, d0, d0
    427c:	009f5101 	addseq	r5, pc, r1, lsl #2
    4280:	00000000 	andeq	r0, r0, r0
    4284:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    4288:	90000006 	andls	r0, r0, r6
    428c:	02000006 	andeq	r0, r0, #6
    4290:	909f3000 	addsls	r3, pc, r0
    4294:	9a000006 	bls	42b4 <__Stack_Size+0x3eb4>
    4298:	01000006 	tsteq	r0, r6
    429c:	069a5300 	ldreq	r5, [sl], r0, lsl #6
    42a0:	069e0000 	ldreq	r0, [lr], r0
    42a4:	00010000 	andeq	r0, r1, r0
    42a8:	00000051 	andeq	r0, r0, r1, asr r0
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	00069e00 	andeq	r9, r6, r0, lsl #28
    42b4:	0006aa00 	andeq	sl, r6, r0, lsl #20
    42b8:	51000100 	mrspl	r0, (UNDEF: 16)
    42bc:	000006aa 	andeq	r0, r0, sl, lsr #13
    42c0:	000006ae 	andeq	r0, r0, lr, lsr #13
    42c4:	01f30004 	mvnseq	r0, r4
    42c8:	00009f51 	andeq	r9, r0, r1, asr pc
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	069e0000 	ldreq	r0, [lr], r0
    42d4:	06a00000 	strteq	r0, [r0], r0
    42d8:	00020000 	andeq	r0, r2, r0
    42dc:	06a09f30 	ssat16eq	r9, #1, r0
    42e0:	06a40000 	strteq	r0, [r4], r0
    42e4:	00010000 	andeq	r0, r1, r0
    42e8:	0006a853 	andeq	sl, r6, r3, asr r8
    42ec:	0006aa00 	andeq	sl, r6, r0, lsl #20
    42f0:	53000100 	movwpl	r0, #256	; 0x100
    42f4:	000006aa 	andeq	r0, r0, sl, lsr #13
    42f8:	000006ae 	andeq	r0, r0, lr, lsr #13
    42fc:	00510001 	subseq	r0, r1, r1
    4300:	00000000 	andeq	r0, r0, r0
    4304:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4308:	ba000006 	blt	4328 <__Stack_Size+0x3f28>
    430c:	01000006 	tsteq	r0, r6
    4310:	06ba5100 	ldrteq	r5, [sl], r0, lsl #2
    4314:	06be0000 	ldrteq	r0, [lr], r0
    4318:	00040000 	andeq	r0, r4, r0
    431c:	9f5101f3 	svcls	0x005101f3
	...
    4328:	000006ae 	andeq	r0, r0, lr, lsr #13
    432c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    4330:	9f300002 	svcls	0x00300002
    4334:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    4338:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    433c:	b8530001 	ldmdalt	r3, {r0}^
    4340:	ba000006 	blt	4360 <__Stack_Size+0x3f60>
    4344:	01000006 	tsteq	r0, r6
    4348:	06ba5300 	ldrteq	r5, [sl], r0, lsl #6
    434c:	06be0000 	ldrteq	r0, [lr], r0
    4350:	00010000 	andeq	r0, r1, r0
    4354:	00000051 	andeq	r0, r0, r1, asr r0
    4358:	00000000 	andeq	r0, r0, r0
    435c:	0006be00 	andeq	fp, r6, r0, lsl #28
    4360:	0006cc00 	andeq	ip, r6, r0, lsl #24
    4364:	51000100 	mrspl	r0, (UNDEF: 16)
    4368:	000006cc 	andeq	r0, r0, ip, asr #13
    436c:	000006d2 	ldrdeq	r0, [r0], -r2
    4370:	01f30004 	mvnseq	r0, r4
    4374:	00009f51 	andeq	r9, r0, r1, asr pc
    4378:	00000000 	andeq	r0, r0, r0
    437c:	06be0000 	ldrteq	r0, [lr], r0
    4380:	06c00000 	strbeq	r0, [r0], r0
    4384:	00020000 	andeq	r0, r2, r0
    4388:	06c09f30 			; <UNDEFINED> instruction: 0x06c09f30
    438c:	06c40000 	strbeq	r0, [r4], r0
    4390:	00010000 	andeq	r0, r1, r0
    4394:	0006c853 	andeq	ip, r6, r3, asr r8
    4398:	0006ce00 	andeq	ip, r6, r0, lsl #28
    439c:	53000100 	movwpl	r0, #256	; 0x100
    43a0:	000006ce 	andeq	r0, r0, lr, asr #13
    43a4:	000006d2 	ldrdeq	r0, [r0], -r2
    43a8:	00510001 	subseq	r0, r1, r1
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	d2000000 	andle	r0, r0, #0
    43b4:	e0000006 	and	r0, r0, r6
    43b8:	01000006 	tsteq	r0, r6
    43bc:	06e05100 	strbteq	r5, [r0], r0, lsl #2
    43c0:	06e60000 	strbteq	r0, [r6], r0
    43c4:	00040000 	andeq	r0, r4, r0
    43c8:	9f5101f3 	svcls	0x005101f3
	...
    43d4:	000006d2 	ldrdeq	r0, [r0], -r2
    43d8:	000006d4 	ldrdeq	r0, [r0], -r4
    43dc:	9f300002 	svcls	0x00300002
    43e0:	000006d4 	ldrdeq	r0, [r0], -r4
    43e4:	000006d8 	ldrdeq	r0, [r0], -r8
    43e8:	dc530001 	mrrcle	0, 0, r0, r3, cr1
    43ec:	e2000006 	and	r0, r0, #6
    43f0:	01000006 	tsteq	r0, r6
    43f4:	06e25300 	strbteq	r5, [r2], r0, lsl #6
    43f8:	06e60000 	strbteq	r0, [r6], r0
    43fc:	00010000 	andeq	r0, r1, r0
    4400:	00000051 	andeq	r0, r0, r1, asr r0
    4404:	00000000 	andeq	r0, r0, r0
    4408:	0006e600 	andeq	lr, r6, r0, lsl #12
    440c:	0006f400 	andeq	pc, r6, r0, lsl #8
    4410:	51000100 	mrspl	r0, (UNDEF: 16)
    4414:	000006f4 	strdeq	r0, [r0], -r4
    4418:	000006fa 	strdeq	r0, [r0], -sl
    441c:	01f30004 	mvnseq	r0, r4
    4420:	00009f51 	andeq	r9, r0, r1, asr pc
    4424:	00000000 	andeq	r0, r0, r0
    4428:	06e60000 	strbteq	r0, [r6], r0
    442c:	06e80000 	strbteq	r0, [r8], r0
    4430:	00020000 	andeq	r0, r2, r0
    4434:	06e89f30 	usat16eq	r9, #8, r0
    4438:	06ec0000 	strbteq	r0, [ip], r0
    443c:	00010000 	andeq	r0, r1, r0
    4440:	0006f053 	andeq	pc, r6, r3, asr r0	; <UNPREDICTABLE>
    4444:	0006f600 	andeq	pc, r6, r0, lsl #12
    4448:	53000100 	movwpl	r0, #256	; 0x100
    444c:	000006f6 	strdeq	r0, [r0], -r6
    4450:	000006fa 	strdeq	r0, [r0], -sl
    4454:	00510001 	subseq	r0, r1, r1
    4458:	00000000 	andeq	r0, r0, r0
    445c:	fa000000 	blx	4464 <__Stack_Size+0x4064>
    4460:	08000006 	stmdaeq	r0, {r1, r2}
    4464:	01000007 	tsteq	r0, r7
    4468:	07085100 	streq	r5, [r8, -r0, lsl #2]
    446c:	070e0000 	streq	r0, [lr, -r0]
    4470:	00040000 	andeq	r0, r4, r0
    4474:	9f5101f3 	svcls	0x005101f3
	...
    4480:	000006fa 	strdeq	r0, [r0], -sl
    4484:	000006fc 	strdeq	r0, [r0], -ip
    4488:	9f300002 	svcls	0x00300002
    448c:	000006fc 	strdeq	r0, [r0], -ip
    4490:	00000700 	andeq	r0, r0, r0, lsl #14
    4494:	04530001 	ldrbeq	r0, [r3], #-1
    4498:	0a000007 	beq	44bc <__Stack_Size+0x40bc>
    449c:	01000007 	tsteq	r0, r7
    44a0:	070a5300 	streq	r5, [sl, -r0, lsl #6]
    44a4:	070e0000 	streq	r0, [lr, -r0]
    44a8:	00010000 	andeq	r0, r1, r0
    44ac:	00000051 	andeq	r0, r0, r1, asr r0
    44b0:	00000000 	andeq	r0, r0, r0
    44b4:	00070e00 	andeq	r0, r7, r0, lsl #28
    44b8:	00071c00 	andeq	r1, r7, r0, lsl #24
    44bc:	51000100 	mrspl	r0, (UNDEF: 16)
    44c0:	0000071c 	andeq	r0, r0, ip, lsl r7
    44c4:	00000722 	andeq	r0, r0, r2, lsr #14
    44c8:	01f30004 	mvnseq	r0, r4
    44cc:	00009f51 	andeq	r9, r0, r1, asr pc
    44d0:	00000000 	andeq	r0, r0, r0
    44d4:	070e0000 	streq	r0, [lr, -r0]
    44d8:	07100000 	ldreq	r0, [r0, -r0]
    44dc:	00020000 	andeq	r0, r2, r0
    44e0:	07109f30 			; <UNDEFINED> instruction: 0x07109f30
    44e4:	07140000 	ldreq	r0, [r4, -r0]
    44e8:	00010000 	andeq	r0, r1, r0
    44ec:	00071853 	andeq	r1, r7, r3, asr r8
    44f0:	00071e00 	andeq	r1, r7, r0, lsl #28
    44f4:	53000100 	movwpl	r0, #256	; 0x100
    44f8:	0000071e 	andeq	r0, r0, lr, lsl r7
    44fc:	00000722 	andeq	r0, r0, r2, lsr #14
    4500:	00510001 	subseq	r0, r1, r1
    4504:	00000000 	andeq	r0, r0, r0
    4508:	22000000 	andcs	r0, r0, #0
    450c:	36000007 	strcc	r0, [r0], -r7
    4510:	01000007 	tsteq	r0, r7
    4514:	07365200 	ldreq	r5, [r6, -r0, lsl #4]!
    4518:	073e0000 	ldreq	r0, [lr, -r0]!
    451c:	00040000 	andeq	r0, r4, r0
    4520:	9f5201f3 	svcls	0x005201f3
	...
    452c:	0000073e 	andeq	r0, r0, lr, lsr r7
    4530:	00000752 	andeq	r0, r0, r2, asr r7
    4534:	52520001 	subspl	r0, r2, #1
    4538:	5a000007 	bpl	455c <__Stack_Size+0x415c>
    453c:	04000007 	streq	r0, [r0], #-7
    4540:	5201f300 	andpl	pc, r1, #0, 6
    4544:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4548:	00000000 	andeq	r0, r0, r0
    454c:	00075a00 	andeq	r5, r7, r0, lsl #20
    4550:	00077000 	andeq	r7, r7, r0
    4554:	50000100 	andpl	r0, r0, r0, lsl #2
    4558:	00000770 	andeq	r0, r0, r0, ror r7
    455c:	0000079e 	muleq	r0, lr, r7
    4560:	68700003 	ldmdavs	r0!, {r0, r1}^
    4564:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4568:	00000000 	andeq	r0, r0, r0
    456c:	00075a00 	andeq	r5, r7, r0, lsl #20
    4570:	00077800 	andeq	r7, r7, r0, lsl #16
    4574:	51000100 	mrspl	r0, (UNDEF: 16)
    4578:	00000778 	andeq	r0, r0, r8, ror r7
    457c:	00000782 	andeq	r0, r0, r2, lsl #15
    4580:	01f30004 	mvnseq	r0, r4
    4584:	07829f51 			; <UNDEFINED> instruction: 0x07829f51
    4588:	07880000 	streq	r0, [r8, r0]
    458c:	00010000 	andeq	r0, r1, r0
    4590:	00078851 	andeq	r8, r7, r1, asr r8
    4594:	00079e00 	andeq	r9, r7, r0, lsl #28
    4598:	f3000400 	vshl.u8	d0, d0, d0
    459c:	009f5101 	addseq	r5, pc, r1, lsl #2
    45a0:	00000000 	andeq	r0, r0, r0
    45a4:	5a000000 	bpl	45ac <__Stack_Size+0x41ac>
    45a8:	90000007 	andls	r0, r0, r7
    45ac:	01000007 	tsteq	r0, r7
    45b0:	07905200 	ldreq	r5, [r0, r0, lsl #4]
    45b4:	079e0000 	ldreq	r0, [lr, r0]
    45b8:	00040000 	andeq	r0, r4, r0
    45bc:	9f5201f3 	svcls	0x005201f3
	...
    45c8:	000007e6 	andeq	r0, r0, r6, ror #15
    45cc:	000007f8 	strdeq	r0, [r0], -r8
    45d0:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
    45d4:	fc000007 	stc2	0, cr0, [r0], {7}
    45d8:	04000007 	streq	r0, [r0], #-7
    45dc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    45e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45e4:	00000000 	andeq	r0, r0, r0
    45e8:	0007fc00 	andeq	pc, r7, r0, lsl #24
    45ec:	00080e00 	andeq	r0, r8, r0, lsl #28
    45f0:	51000100 	mrspl	r0, (UNDEF: 16)
    45f4:	0000080e 	andeq	r0, r0, lr, lsl #16
    45f8:	00000812 	andeq	r0, r0, r2, lsl r8
    45fc:	01f30004 	mvnseq	r0, r4
    4600:	00009f51 	andeq	r9, r0, r1, asr pc
    4604:	00000000 	andeq	r0, r0, r0
    4608:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    460c:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    4610:	00010000 	andeq	r0, r1, r0
    4614:	00082451 	andeq	r2, r8, r1, asr r4
    4618:	00082800 	andeq	r2, r8, r0, lsl #16
    461c:	f3000400 	vshl.u8	d0, d0, d0
    4620:	009f5101 	addseq	r5, pc, r1, lsl #2
    4624:	00000000 	andeq	r0, r0, r0
    4628:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    462c:	3a000008 	bcc	4654 <__Stack_Size+0x4254>
    4630:	01000008 	tsteq	r0, r8
    4634:	083a5100 	ldmdaeq	sl!, {r8, ip, lr}
    4638:	083e0000 	ldmdaeq	lr!, {}	; <UNPREDICTABLE>
    463c:	00040000 	andeq	r0, r4, r0
    4640:	9f5101f3 	svcls	0x005101f3
	...
    464c:	00000858 	andeq	r0, r0, r8, asr r8
    4650:	0000086a 	andeq	r0, r0, sl, ror #16
    4654:	6a510001 	bvs	1444660 <__Stack_Size+0x1444260>
    4658:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
    465c:	04000008 	streq	r0, [r0], #-8
    4660:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4664:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4668:	00000000 	andeq	r0, r0, r0
    466c:	00086e00 	andeq	r6, r8, r0, lsl #28
    4670:	00088200 	andeq	r8, r8, r0, lsl #4
    4674:	51000100 	mrspl	r0, (UNDEF: 16)
    4678:	00000882 	andeq	r0, r0, r2, lsl #17
    467c:	00000888 	andeq	r0, r0, r8, lsl #17
    4680:	01f30004 	mvnseq	r0, r4
    4684:	00009f51 	andeq	r9, r0, r1, asr pc
    4688:	00000000 	andeq	r0, r0, r0
    468c:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
    4690:	08b10000 	ldmeq	r1!, {}	; <UNPREDICTABLE>
    4694:	00010000 	andeq	r0, r1, r0
    4698:	0008b150 	andeq	fp, r8, r0, asr r1
    469c:	0008ce00 	andeq	ip, r8, r0, lsl #28
    46a0:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    46a4:	000008ce 	andeq	r0, r0, lr, asr #17
    46a8:	000008d1 	ldrdeq	r0, [r0], -r1
    46ac:	d1500001 	cmple	r0, r1
    46b0:	d2000008 	andle	r0, r0, #8
    46b4:	04000008 	streq	r0, [r0], #-8
    46b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    46bc:	0008d29f 	muleq	r8, pc, r2	; <UNPREDICTABLE>
    46c0:	0008d500 	andeq	sp, r8, r0, lsl #10
    46c4:	50000100 	andpl	r0, r0, r0, lsl #2
    46c8:	000008d5 	ldrdeq	r0, [r0], -r5
    46cc:	000008f2 	strdeq	r0, [r0], -r2
    46d0:	f2550001 	vhadd.s16	d16, d5, d1
    46d4:	f5000008 			; <UNDEFINED> instruction: 0xf5000008
    46d8:	01000008 	tsteq	r0, r8
    46dc:	08f55000 	ldmeq	r5!, {ip, lr}^
    46e0:	08f60000 	ldmeq	r6!, {}^	; <UNPREDICTABLE>
    46e4:	00040000 	andeq	r0, r4, r0
    46e8:	9f5001f3 	svcls	0x005001f3
	...
    46f4:	00000888 	andeq	r0, r0, r8, lsl #17
    46f8:	0000088e 	andeq	r0, r0, lr, lsl #17
    46fc:	8e510001 	cdphi	0, 5, cr0, cr1, cr1, {0}
    4700:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    4704:	01000008 	tsteq	r0, r8
    4708:	08ce5400 	stmiaeq	lr, {sl, ip, lr}^
    470c:	08d20000 	ldmeq	r2, {}^	; <UNPREDICTABLE>
    4710:	00040000 	andeq	r0, r4, r0
    4714:	9f5101f3 	svcls	0x005101f3
    4718:	000008d2 	ldrdeq	r0, [r0], -r2
    471c:	000008f2 	strdeq	r0, [r0], -r2
    4720:	f2540001 	vhadd.s16	d16, d4, d1
    4724:	f6000008 			; <UNDEFINED> instruction: 0xf6000008
    4728:	04000008 	streq	r0, [r0], #-8
    472c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4730:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4734:	00000000 	andeq	r0, r0, r0
    4738:	00088800 	andeq	r8, r8, r0, lsl #16
    473c:	00089c00 	andeq	r9, r8, r0, lsl #24
    4740:	30000200 	andcc	r0, r0, r0, lsl #4
    4744:	00089c9f 	muleq	r8, pc, ip	; <UNPREDICTABLE>
    4748:	0008ce00 	andeq	ip, r8, r0, lsl #28
    474c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    4750:	000008d2 	ldrdeq	r0, [r0], -r2
    4754:	000008f2 	strdeq	r0, [r0], -r2
    4758:	00570001 	subseq	r0, r7, r1
    475c:	00000000 	andeq	r0, r0, r0
    4760:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    4764:	a6000008 	strge	r0, [r0], -r8
    4768:	02000008 	andeq	r0, r0, #8
    476c:	a69f3100 	ldrge	r3, [pc], r0, lsl #2
    4770:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    4774:	01000008 	tsteq	r0, r8
    4778:	08d25600 	ldmeq	r2, {r9, sl, ip, lr}^
    477c:	08f20000 	ldmeq	r2!, {}^	; <UNPREDICTABLE>
    4780:	00010000 	andeq	r0, r1, r0
    4784:	00000056 	andeq	r0, r0, r6, asr r0
    4788:	00000000 	andeq	r0, r0, r0
    478c:	0008f600 	andeq	pc, r8, r0, lsl #12
    4790:	00090800 	andeq	r0, r9, r0, lsl #16
    4794:	51000100 	mrspl	r0, (UNDEF: 16)
    4798:	00000908 	andeq	r0, r0, r8, lsl #18
    479c:	0000090c 	andeq	r0, r0, ip, lsl #18
    47a0:	01f30004 	mvnseq	r0, r4
    47a4:	00009f51 	andeq	r9, r0, r1, asr pc
    47a8:	00000000 	andeq	r0, r0, r0
    47ac:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    47b0:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    47b4:	00010000 	andeq	r0, r1, r0
    47b8:	00092051 	andeq	r2, r9, r1, asr r0
    47bc:	00092600 	andeq	r2, r9, r0, lsl #12
    47c0:	f3000400 	vshl.u8	d0, d0, d0
    47c4:	009f5101 	addseq	r5, pc, r1, lsl #2
    47c8:	00000000 	andeq	r0, r0, r0
    47cc:	26000000 	strcs	r0, [r0], -r0
    47d0:	39000009 	stmdbcc	r0, {r0, r3}
    47d4:	01000009 	tsteq	r0, r9
    47d8:	09395000 	ldmdbeq	r9!, {ip, lr}
    47dc:	09420000 	stmdbeq	r2, {}^	; <UNPREDICTABLE>
    47e0:	00010000 	andeq	r0, r1, r0
    47e4:	00094254 	andeq	r4, r9, r4, asr r2
    47e8:	00094500 	andeq	r4, r9, r0, lsl #10
    47ec:	50000100 	andpl	r0, r0, r0, lsl #2
    47f0:	00000945 	andeq	r0, r0, r5, asr #18
    47f4:	00000946 	andeq	r0, r0, r6, asr #18
    47f8:	01f30004 	mvnseq	r0, r4
    47fc:	09469f50 	stmdbeq	r6, {r4, r6, r8, r9, sl, fp, ip, pc}^
    4800:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    4804:	00010000 	andeq	r0, r1, r0
    4808:	00094d50 	andeq	r4, r9, r0, asr sp
    480c:	00095600 	andeq	r5, r9, r0, lsl #12
    4810:	54000100 	strpl	r0, [r0], #-256	; 0x100
    4814:	00000956 	andeq	r0, r0, r6, asr r9
    4818:	00000959 	andeq	r0, r0, r9, asr r9
    481c:	59500001 	ldmdbpl	r0, {r0}^
    4820:	5a000009 	bpl	484c <__Stack_Size+0x444c>
    4824:	04000009 	streq	r0, [r0], #-9
    4828:	5001f300 	andpl	pc, r1, r0, lsl #6
    482c:	00095a9f 	muleq	r9, pc, sl	; <UNPREDICTABLE>
    4830:	00099d00 	andeq	r9, r9, r0, lsl #26
    4834:	50000100 	andpl	r0, r0, r0, lsl #2
    4838:	0000099d 	muleq	r0, sp, r9
    483c:	0000099e 	muleq	r0, lr, r9
    4840:	01f30004 	mvnseq	r0, r4
    4844:	099e9f50 	ldmibeq	lr, {r4, r6, r8, r9, sl, fp, ip, pc}
    4848:	09db0000 	ldmibeq	fp, {}^	; <UNPREDICTABLE>
    484c:	00010000 	andeq	r0, r1, r0
    4850:	0009db50 	andeq	sp, r9, r0, asr fp
    4854:	0009dc00 	andeq	sp, r9, r0, lsl #24
    4858:	f3000400 	vshl.u8	d0, d0, d0
    485c:	009f5001 	addseq	r5, pc, r1
    4860:	00000000 	andeq	r0, r0, r0
    4864:	26000000 	strcs	r0, [r0], -r0
    4868:	30000009 	andcc	r0, r0, r9
    486c:	01000009 	tsteq	r0, r9
    4870:	09305100 	ldmdbeq	r0!, {r8, ip, lr}
    4874:	09420000 	stmdbeq	r2, {}^	; <UNPREDICTABLE>
    4878:	00010000 	andeq	r0, r1, r0
    487c:	00094255 	andeq	r4, r9, r5, asr r2
    4880:	00094600 	andeq	r4, r9, r0, lsl #12
    4884:	f3000400 	vshl.u8	d0, d0, d0
    4888:	469f5101 	ldrmi	r5, [pc], r1, lsl #2
    488c:	56000009 	strpl	r0, [r0], -r9
    4890:	01000009 	tsteq	r0, r9
    4894:	09565500 	ldmdbeq	r6, {r8, sl, ip, lr}^
    4898:	095a0000 	ldmdbeq	sl, {}^	; <UNPREDICTABLE>
    489c:	00040000 	andeq	r0, r4, r0
    48a0:	9f5101f3 	svcls	0x005101f3
    48a4:	0000095a 	andeq	r0, r0, sl, asr r9
    48a8:	00000962 	andeq	r0, r0, r2, ror #18
    48ac:	62550001 	subsvs	r0, r5, #1
    48b0:	dc000009 	stcle	0, cr0, [r0], {9}
    48b4:	04000009 	streq	r0, [r0], #-9
    48b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    48bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48c0:	00000000 	andeq	r0, r0, r0
    48c4:	00096400 	andeq	r6, r9, r0, lsl #8
    48c8:	00098200 	andeq	r8, r9, r0, lsl #4
    48cc:	53000100 	movwpl	r0, #256	; 0x100
	...
    48d8:	00000964 	andeq	r0, r0, r4, ror #18
    48dc:	0000098c 	andeq	r0, r0, ip, lsl #19
    48e0:	00520001 	subseq	r0, r2, r1
    48e4:	00000000 	andeq	r0, r0, r0
    48e8:	64000000 	strvs	r0, [r0], #-0
    48ec:	94000009 	strls	r0, [r0], #-9
    48f0:	01000009 	tsteq	r0, r9
    48f4:	00005100 	andeq	r5, r0, r0, lsl #2
    48f8:	00000000 	andeq	r0, r0, r0
    48fc:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    4900:	099d0000 	ldmibeq	sp, {}	; <UNPREDICTABLE>
    4904:	00010000 	andeq	r0, r1, r0
    4908:	00099d50 	andeq	r9, r9, r0, asr sp
    490c:	00099e00 	andeq	r9, r9, r0, lsl #28
    4910:	f3000400 	vshl.u8	d0, d0, d0
    4914:	009f5001 	addseq	r5, pc, r1
    4918:	00000000 	andeq	r0, r0, r0
    491c:	64000000 	strvs	r0, [r0], #-0
    4920:	74000009 	strvc	r0, [r0], #-9
    4924:	02000009 	andeq	r0, r0, #9
    4928:	749f3000 	ldrvc	r3, [pc], #0	; 4930 <__Stack_Size+0x4530>
    492c:	76000009 	strvc	r0, [r0], -r9
    4930:	01000009 	tsteq	r0, r9
    4934:	09765700 	ldmdbeq	r6!, {r8, r9, sl, ip, lr}^
    4938:	097a0000 	ldmdbeq	sl!, {}^	; <UNPREDICTABLE>
    493c:	00070000 	andeq	r0, r7, r0
    4940:	0c0b0077 	stceq	0, cr0, [fp], {119}	; 0x77
    4944:	8c9f1aff 	vldmiahi	pc, {s2-s256}
    4948:	9d000009 	stcls	0, cr0, [r0, #-36]	; 0xffffffdc
    494c:	01000009 	tsteq	r0, r9
    4950:	00005200 	andeq	r5, r0, r0, lsl #4
    4954:	00000000 	andeq	r0, r0, r0
    4958:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    495c:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
    4960:	00020000 	andeq	r0, r2, r0
    4964:	09769f30 	ldmdbeq	r6!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    4968:	097e0000 	ldmdbeq	lr!, {}^	; <UNPREDICTABLE>
    496c:	00010000 	andeq	r0, r1, r0
    4970:	00099056 	andeq	r9, r9, r6, asr r0
    4974:	00099a00 	andeq	r9, r9, r0, lsl #20
    4978:	56000100 	strpl	r0, [r0], -r0, lsl #2
    497c:	0000099a 	muleq	r0, sl, r9
    4980:	0000099d 	muleq	r0, sp, r9
    4984:	20700002 	rsbscs	r0, r0, r2
	...
    4990:	00000964 	andeq	r0, r0, r4, ror #18
    4994:	00000976 	andeq	r0, r0, r6, ror r9
    4998:	9f300002 	svcls	0x00300002
    499c:	00000976 	andeq	r0, r0, r6, ror r9
    49a0:	00000994 	muleq	r0, r4, r9
    49a4:	00710005 	rsbseq	r0, r1, r5
    49a8:	009f2438 	addseq	r2, pc, r8, lsr r4	; <UNPREDICTABLE>
    49ac:	00000000 	andeq	r0, r0, r0
    49b0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    49b4:	c6000009 	strgt	r0, [r0], -r9
    49b8:	01000009 	tsteq	r0, r9
    49bc:	00005300 	andeq	r5, r0, r0, lsl #6
    49c0:	00000000 	andeq	r0, r0, r0
    49c4:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    49c8:	09be0000 	ldmibeq	lr!, {}	; <UNPREDICTABLE>
    49cc:	00010000 	andeq	r0, r1, r0
    49d0:	00000052 	andeq	r0, r0, r2, asr r0
    49d4:	00000000 	andeq	r0, r0, r0
    49d8:	00099e00 	andeq	r9, r9, r0, lsl #28
    49dc:	0009d200 	andeq	sp, r9, r0, lsl #4
    49e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    49ec:	0000099e 	muleq	r0, lr, r9
    49f0:	000009db 	ldrdeq	r0, [r0], -fp
    49f4:	db500001 	blle	1404a00 <__Stack_Size+0x1404600>
    49f8:	dc000009 	stcle	0, cr0, [r0], {9}
    49fc:	04000009 	streq	r0, [r0], #-9
    4a00:	5001f300 	andpl	pc, r1, r0, lsl #6
    4a04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a08:	00000000 	andeq	r0, r0, r0
    4a0c:	00099e00 	andeq	r9, r9, r0, lsl #28
    4a10:	0009aa00 	andeq	sl, r9, r0, lsl #20
    4a14:	30000200 	andcc	r0, r0, r0, lsl #4
    4a18:	0009aa9f 	muleq	r9, pc, sl	; <UNPREDICTABLE>
    4a1c:	0009b400 	andeq	fp, r9, r0, lsl #8
    4a20:	56000100 	strpl	r0, [r0], -r0, lsl #2
    4a24:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    4a28:	000009ca 	andeq	r0, r0, sl, asr #19
    4a2c:	00760007 	rsbseq	r0, r6, r7
    4a30:	1a0cff0a 	bne	344660 <__Stack_Size+0x344260>
    4a34:	0009ca9f 	muleq	r9, pc, sl	; <UNPREDICTABLE>
    4a38:	0009d600 	andeq	sp, r9, r0, lsl #12
    4a3c:	53000100 	movwpl	r0, #256	; 0x100
    4a40:	000009d6 	ldrdeq	r0, [r0], -r6
    4a44:	000009d8 	ldrdeq	r0, [r0], -r8
    4a48:	1c700002 	ldclne	0, cr0, [r0], #-8
	...
    4a54:	0000099e 	muleq	r0, lr, r9
    4a58:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    4a5c:	9f300002 	svcls	0x00300002
    4a60:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    4a64:	000009ca 	andeq	r0, r0, sl, asr #19
    4a68:	ca570001 	bgt	15c4a74 <__Stack_Size+0x15c4674>
    4a6c:	ce000009 	cdpgt	0, 0, cr0, cr0, cr9, {0}
    4a70:	07000009 	streq	r0, [r0, -r9]
    4a74:	0b007700 	bleq	2267c <__Stack_Size+0x2227c>
    4a78:	9f1adfff 	svcls	0x001adfff
    4a7c:	000009ce 	andeq	r0, r0, lr, asr #19
    4a80:	000009db 	ldrdeq	r0, [r0], -fp
    4a84:	00520001 	subseq	r0, r2, r1
    4a88:	00000000 	andeq	r0, r0, r0
    4a8c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4a90:	b4000009 	strlt	r0, [r0], #-9
    4a94:	02000009 	andeq	r0, r0, #9
    4a98:	b49f3000 	ldrlt	r3, [pc], #0	; 4aa0 <__Stack_Size+0x46a0>
    4a9c:	d2000009 	andle	r0, r0, #9
    4aa0:	05000009 	streq	r0, [r0, #-9]
    4aa4:	3c007100 	stfccs	f7, [r0], {-0}
    4aa8:	00009f24 	andeq	r9, r0, r4, lsr #30
    4aac:	00000000 	andeq	r0, r0, r0
    4ab0:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
    4ab4:	09e80000 	stmibeq	r8!, {}^	; <UNPREDICTABLE>
    4ab8:	00010000 	andeq	r0, r1, r0
    4abc:	0009e851 	andeq	lr, r9, r1, asr r8
    4ac0:	0009ec00 	andeq	lr, r9, r0, lsl #24
    4ac4:	f3000400 	vshl.u8	d0, d0, d0
    4ac8:	009f5101 	addseq	r5, pc, r1, lsl #2
    4acc:	00000000 	andeq	r0, r0, r0
    4ad0:	ec000000 	stc	0, cr0, [r0], {-0}
    4ad4:	ee000009 	cdp	0, 0, cr0, cr0, cr9, {0}
    4ad8:	01000009 	tsteq	r0, r9
    4adc:	09ee5000 	stmibeq	lr!, {ip, lr}^
    4ae0:	09f20000 	ldmibeq	r2!, {}^	; <UNPREDICTABLE>
    4ae4:	00040000 	andeq	r0, r4, r0
    4ae8:	9f5001f3 	svcls	0x005001f3
	...
    4af4:	000009f2 	strdeq	r0, [r0], -r2
    4af8:	000009f4 	strdeq	r0, [r0], -r4
    4afc:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    4b00:	f8000009 			; <UNDEFINED> instruction: 0xf8000009
    4b04:	04000009 	streq	r0, [r0], #-9
    4b08:	5001f300 	andpl	pc, r1, r0, lsl #6
    4b0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b10:	00000000 	andeq	r0, r0, r0
    4b14:	0009f800 	andeq	pc, r9, r0, lsl #16
    4b18:	0009fa00 	andeq	pc, r9, r0, lsl #20
    4b1c:	50000100 	andpl	r0, r0, r0, lsl #2
    4b20:	000009fa 	strdeq	r0, [r0], -sl
    4b24:	000009fe 	strdeq	r0, [r0], -lr
    4b28:	01f30004 	mvnseq	r0, r4
    4b2c:	00009f50 	andeq	r9, r0, r0, asr pc
    4b30:	00000000 	andeq	r0, r0, r0
    4b34:	09fe0000 	ldmibeq	lr!, {}^	; <UNPREDICTABLE>
    4b38:	0a020000 	beq	84b40 <__Stack_Size+0x84740>
    4b3c:	00010000 	andeq	r0, r1, r0
    4b40:	000a0250 	andeq	r0, sl, r0, asr r2
    4b44:	000a0600 	andeq	r0, sl, r0, lsl #12
    4b48:	f3000400 	vshl.u8	d0, d0, d0
    4b4c:	009f5001 	addseq	r5, pc, r1
    4b50:	00000000 	andeq	r0, r0, r0
    4b54:	06000000 	streq	r0, [r0], -r0
    4b58:	0800000a 	stmdaeq	r0, {r1, r3}
    4b5c:	0100000a 	tsteq	r0, sl
    4b60:	0a085000 	beq	218b68 <__Stack_Size+0x218768>
    4b64:	0a0c0000 	beq	304b6c <__Stack_Size+0x30476c>
    4b68:	00040000 	andeq	r0, r4, r0
    4b6c:	9f5001f3 	svcls	0x005001f3
	...
    4b78:	00000a0c 	andeq	r0, r0, ip, lsl #20
    4b7c:	00000a0e 	andeq	r0, r0, lr, lsl #20
    4b80:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    4b84:	1200000a 	andne	r0, r0, #10
    4b88:	0400000a 	streq	r0, [r0], #-10
    4b8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4b90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b94:	00000000 	andeq	r0, r0, r0
    4b98:	000a1200 	andeq	r1, sl, r0, lsl #4
    4b9c:	000a1a00 	andeq	r1, sl, r0, lsl #20
    4ba0:	50000100 	andpl	r0, r0, r0, lsl #2
    4ba4:	00000a1a 	andeq	r0, r0, sl, lsl sl
    4ba8:	00000a1e 	andeq	r0, r0, lr, lsl sl
    4bac:	01f30004 	mvnseq	r0, r4
    4bb0:	00009f50 	andeq	r9, r0, r0, asr pc
    4bb4:	00000000 	andeq	r0, r0, r0
    4bb8:	0a120000 	beq	484bc0 <__Stack_Size+0x4847c0>
    4bbc:	0a140000 	beq	504bc4 <__Stack_Size+0x5047c4>
    4bc0:	00020000 	andeq	r0, r2, r0
    4bc4:	0a149f30 	beq	52c88c <__Stack_Size+0x52c48c>
    4bc8:	0a1e0000 	beq	784bd0 <__Stack_Size+0x7847d0>
    4bcc:	000a0000 	andeq	r0, sl, r0
    4bd0:	00730071 	rsbseq	r0, r3, r1, ror r0
    4bd4:	3024401a 	eorcc	r4, r4, sl, lsl r0
    4bd8:	00009f2e 	andeq	r9, r0, lr, lsr #30
    4bdc:	00000000 	andeq	r0, r0, r0
    4be0:	0a1e0000 	beq	784be8 <__Stack_Size+0x7847e8>
    4be4:	0a200000 	beq	804bec <__Stack_Size+0x8047ec>
    4be8:	00010000 	andeq	r0, r1, r0
    4bec:	000a2051 	andeq	r2, sl, r1, asr r0
    4bf0:	000a2600 	andeq	r2, sl, r0, lsl #12
    4bf4:	f3000400 	vshl.u8	d0, d0, d0
    4bf8:	009f5101 	addseq	r5, pc, r1, lsl #2
    4bfc:	00000000 	andeq	r0, r0, r0
    4c00:	26000000 	strcs	r0, [r0], -r0
    4c04:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    4c08:	0100000a 	tsteq	r0, sl
    4c0c:	0a2e5000 	beq	b98c14 <__Stack_Size+0xb98814>
    4c10:	0a3c0000 	beq	f04c18 <__Stack_Size+0xf04818>
    4c14:	00040000 	andeq	r0, r4, r0
    4c18:	9f5001f3 	svcls	0x005001f3
	...
    4c24:	00000a26 	andeq	r0, r0, r6, lsr #20
    4c28:	00000a3a 	andeq	r0, r0, sl, lsr sl
    4c2c:	9f300002 	svcls	0x00300002
    4c30:	00000a3a 	andeq	r0, r0, sl, lsr sl
    4c34:	00000a3c 	andeq	r0, r0, ip, lsr sl
    4c38:	00500001 	subseq	r0, r0, r1
    4c3c:	00000000 	andeq	r0, r0, r0
    4c40:	26000000 	strcs	r0, [r0], -r0
    4c44:	2800000a 	stmdacs	r0, {r1, r3}
    4c48:	0200000a 	andeq	r0, r0, #10
    4c4c:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    4c50:	3c00000a 	stccc	0, cr0, [r0], {10}
    4c54:	0600000a 	streq	r0, [r0], -sl
    4c58:	71007300 	mrsvc	r7, LR_irq
    4c5c:	009f1a00 	addseq	r1, pc, r0, lsl #20
    4c60:	00000000 	andeq	r0, r0, r0
    4c64:	26000000 	strcs	r0, [r0], -r0
    4c68:	3000000a 	andcc	r0, r0, sl
    4c6c:	0200000a 	andeq	r0, r0, #10
    4c70:	309f3000 	addscc	r3, pc, r0
    4c74:	3c00000a 	stccc	0, cr0, [r0], {10}
    4c78:	0600000a 	streq	r0, [r0], -sl
    4c7c:	72007100 	andvc	r7, r0, #0, 2
    4c80:	009f1a00 	addseq	r1, pc, r0, lsl #20
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	3c000000 	stccc	0, cr0, [r0], {-0}
    4c8c:	3e00000a 	cdpcc	0, 0, cr0, cr0, cr10, {0}
    4c90:	0100000a 	tsteq	r0, sl
    4c94:	0a3e5100 	beq	f9909c <__Stack_Size+0xf98c9c>
    4c98:	0a440000 	beq	1104ca0 <__Stack_Size+0x11048a0>
    4c9c:	00040000 	andeq	r0, r4, r0
    4ca0:	9f5101f3 	svcls	0x005101f3
	...
    4cb0:	0000002e 	andeq	r0, r0, lr, lsr #32
    4cb4:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
    4cb8:	42000000 	andmi	r0, r0, #0
    4cbc:	04000000 	streq	r0, [r0], #-0
    4cc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    4cc4:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    4cc8:	00004600 	andeq	r4, r0, r0, lsl #12
    4ccc:	50000100 	andpl	r0, r0, r0, lsl #2
    4cd0:	00000046 	andeq	r0, r0, r6, asr #32
    4cd4:	00000052 	andeq	r0, r0, r2, asr r0
    4cd8:	01f30004 	mvnseq	r0, r4
    4cdc:	00529f50 	subseq	r9, r2, r0, asr pc
    4ce0:	00560000 	subseq	r0, r6, r0
    4ce4:	00010000 	andeq	r0, r1, r0
    4ce8:	00005650 	andeq	r5, r0, r0, asr r6
    4cec:	00006200 	andeq	r6, r0, r0, lsl #4
    4cf0:	f3000400 	vshl.u8	d0, d0, d0
    4cf4:	629f5001 	addsvs	r5, pc, #1
    4cf8:	66000000 	strvs	r0, [r0], -r0
    4cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    4d00:	00665000 	rsbeq	r5, r6, r0
    4d04:	00720000 	rsbseq	r0, r2, r0
    4d08:	00040000 	andeq	r0, r4, r0
    4d0c:	9f5001f3 	svcls	0x005001f3
    4d10:	00000072 	andeq	r0, r0, r2, ror r0
    4d14:	00000076 	andeq	r0, r0, r6, ror r0
    4d18:	76500001 	ldrbvc	r0, [r0], -r1
    4d1c:	8a000000 	bhi	4d24 <__Stack_Size+0x4924>
    4d20:	04000000 	streq	r0, [r0], #-0
    4d24:	5001f300 	andpl	pc, r1, r0, lsl #6
    4d28:	00008a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    4d2c:	00009400 	andeq	r9, r0, r0, lsl #8
    4d30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4d3c:	00000094 	muleq	r0, r4, r0
    4d40:	000000d6 	ldrdeq	r0, [r0], -r6
    4d44:	d6500001 	ldrble	r0, [r0], -r1
    4d48:	16000000 	strne	r0, [r0], -r0
    4d4c:	01000001 	tsteq	r0, r1
    4d50:	01165400 	tsteq	r6, r0, lsl #8
    4d54:	011c0000 	tsteq	ip, r0
    4d58:	00040000 	andeq	r0, r4, r0
    4d5c:	9f5001f3 	svcls	0x005001f3
	...
    4d68:	00000094 	muleq	r0, r4, r0
    4d6c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4d70:	ac510001 	mrrcge	0, 0, r0, r1, cr1
    4d74:	16000000 	strne	r0, [r0], -r0
    4d78:	01000001 	tsteq	r0, r1
    4d7c:	01165500 	tsteq	r6, r0, lsl #10
    4d80:	011c0000 	tsteq	ip, r0
    4d84:	00040000 	andeq	r0, r4, r0
    4d88:	9f5101f3 	svcls	0x005101f3
	...
    4d94:	00000094 	muleq	r0, r4, r0
    4d98:	000000a0 	andeq	r0, r0, r0, lsr #1
    4d9c:	9f300002 	svcls	0x00300002
    4da0:	000000a0 	andeq	r0, r0, r0, lsr #1
    4da4:	000000a4 	andeq	r0, r0, r4, lsr #1
    4da8:	0073000b 	rsbseq	r0, r3, fp
    4dac:	1acfff0b 	bne	ff4049e0 <SCS_BASE+0x1f3f69e0>
    4db0:	1affff0a 	bne	49e0 <__Stack_Size+0x45e0>
    4db4:	0000a69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    4db8:	0000ae00 	andeq	sl, r0, r0, lsl #28
    4dbc:	73000700 	movwvc	r0, #1792	; 0x700
    4dc0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4dc4:	00ae9f1a 	adceq	r9, lr, sl, lsl pc
    4dc8:	00b00000 	adcseq	r0, r0, r0
    4dcc:	00090000 	andeq	r0, r9, r0
    4dd0:	02941070 	addseq	r1, r4, #112	; 0x70
    4dd4:	1affff0a 	bne	4a04 <__Stack_Size+0x4604>
    4dd8:	0000b09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ddc:	0000b800 	andeq	fp, r0, r0, lsl #16
    4de0:	72000b00 	andvc	r0, r0, #0, 22
    4de4:	e9f30b00 	ldmib	r3!, {r8, r9, fp}^
    4de8:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4dec:	00c29f1a 	sbceq	r9, r2, sl, lsl pc
    4df0:	00c60000 	sbceq	r0, r6, r0
    4df4:	00070000 	andeq	r0, r7, r0
    4df8:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    4dfc:	c69f1aff 			; <UNDEFINED> instruction: 0xc69f1aff
    4e00:	ca000000 	bgt	4e08 <__Stack_Size+0x4a08>
    4e04:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4e08:	940c7000 	strls	r7, [ip], #-0
    4e0c:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4e10:	00ca9f1a 	sbceq	r9, sl, sl, lsl pc
    4e14:	00ce0000 	sbceq	r0, lr, r0
    4e18:	000b0000 	andeq	r0, fp, r0
    4e1c:	ff0b0073 			; <UNDEFINED> instruction: 0xff0b0073
    4e20:	ff0a1afc 			; <UNDEFINED> instruction: 0xff0a1afc
    4e24:	d29f1aff 	addsle	r1, pc, #1044480	; 0xff000
    4e28:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    4e2c:	07000000 	streq	r0, [r0, -r0]
    4e30:	0a007300 	beq	21a38 <__Stack_Size+0x21638>
    4e34:	9f1affff 	svcls	0x001affff
    4e38:	000000fa 	strdeq	r0, [r0], -sl
    4e3c:	0000010c 	andeq	r0, r0, ip, lsl #2
    4e40:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4e44:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4e48:	06000001 	streq	r0, [r0], -r1
    4e4c:	70007300 	andvc	r7, r0, r0, lsl #6
    4e50:	0e9f2100 	fmleqe	f2, f7, f0
    4e54:	10000001 	andne	r0, r0, r1
    4e58:	01000001 	tsteq	r0, r1
    4e5c:	01105300 	tsteq	r0, r0, lsl #6
    4e60:	011c0000 	tsteq	ip, r0
    4e64:	00110000 	andseq	r0, r1, r0
    4e68:	25f70072 	ldrbcs	r0, [r7, #114]!	; 0x72
    4e6c:	25f76408 	ldrbcs	r6, [r7, #1032]!	; 0x408
    4e70:	3f00f71b 	svccc	0x0000f71b
    4e74:	2100701a 	tstcs	r0, sl, lsl r0
    4e78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e7c:	00000000 	andeq	r0, r0, r0
    4e80:	00009400 	andeq	r9, r0, r0, lsl #8
    4e84:	0000e600 	andeq	lr, r0, r0, lsl #12
    4e88:	30000200 	andcc	r0, r0, r0, lsl #4
    4e8c:	0000e69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    4e90:	0000ec00 	andeq	lr, r0, r0, lsl #24
    4e94:	52000100 	andpl	r0, r0, #0, 2
    4e98:	000000ec 	andeq	r0, r0, ip, ror #1
    4e9c:	000000fc 	strdeq	r0, [r0], -ip
    4ea0:	68910011 	ldmvs	r1, {r0, r4}
    4ea4:	06649106 	strbteq	r9, [r4], -r6, lsl #2
    4ea8:	00710074 	rsbseq	r0, r1, r4, ror r0
    4eac:	00012829 	andeq	r2, r1, r9, lsr #16
    4eb0:	fc9f1316 	ldc2	3, cr1, [pc], {22}
    4eb4:	16000000 	strne	r0, [r0], -r0
    4eb8:	14000001 	strne	r0, [r0], #-1
    4ebc:	06689100 	strbteq	r9, [r8], -r0, lsl #2
    4ec0:	74066491 	strvc	r6, [r6], #-1169	; 0x491
    4ec4:	38000c00 	stmdacc	r0, {sl, fp}
    4ec8:	28294001 	stmdacs	r9!, {r0, lr}
    4ecc:	13160001 	tstne	r6, #1
    4ed0:	0001169f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    4ed4:	00011c00 	andeq	r1, r1, r0, lsl #24
    4ed8:	7d001500 	cfstr32vc	mvfx1, [r0, #-0]
    4edc:	647d0668 	ldrbtvs	r0, [sp], #-1640	; 0x668
    4ee0:	5001f306 	andpl	pc, r1, r6, lsl #6
    4ee4:	0138000c 	teqeq	r8, ip
    4ee8:	01282940 			; <UNDEFINED> instruction: 0x01282940
    4eec:	9f131600 	svcls	0x00131600
	...
    4ef8:	00000094 	muleq	r0, r4, r0
    4efc:	000000f2 	strdeq	r0, [r0], -r2
    4f00:	9f300002 	svcls	0x00300002
    4f04:	000000f2 	strdeq	r0, [r0], -r2
    4f08:	00000100 	andeq	r0, r0, r0, lsl #2
    4f0c:	00520001 	subseq	r0, r2, r1
    4f10:	16000001 	strne	r0, [r0], -r1
    4f14:	22000001 	andcs	r0, r0, #1
    4f18:	06689100 	strbteq	r9, [r8], -r0, lsl #2
    4f1c:	74066491 	strvc	r6, [r6], #-1169	; 0x491
    4f20:	38000c00 	stmdacc	r0, {sl, fp}
    4f24:	28294001 	stmdacs	r9!, {r0, lr}
    4f28:	13160001 	tstne	r6, #1
    4f2c:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    4f30:	32060075 	andcc	r0, r6, #117	; 0x75
    4f34:	1b25f724 	blne	982bcc <__Stack_Size+0x9827cc>
    4f38:	169f00f7 			; <UNDEFINED> instruction: 0x169f00f7
    4f3c:	1c000001 	stcne	0, cr0, [r0], {1}
    4f40:	24000001 	strcs	r0, [r0], #-1
    4f44:	06687d00 	strbteq	r7, [r8], -r0, lsl #26
    4f48:	f306647d 	vqshl.u8	q3, <illegal reg q14.5>, q3
    4f4c:	000c5001 	andeq	r5, ip, r1
    4f50:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    4f54:	16000128 	strne	r0, [r0], -r8, lsr #2
    4f58:	f71e4913 			; <UNDEFINED> instruction: 0xf71e4913
    4f5c:	5101f325 	tstpl	r1, r5, lsr #6	; <UNPREDICTABLE>
    4f60:	f7243206 			; <UNDEFINED> instruction: 0xf7243206
    4f64:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    4f68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f6c:	00000000 	andeq	r0, r0, r0
    4f70:	00009400 	andeq	r9, r0, r0, lsl #8
    4f74:	0000fa00 	andeq	pc, r0, r0, lsl #20
    4f78:	30000200 	andcc	r0, r0, r0, lsl #4
    4f7c:	0000fa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    4f80:	00010000 	andeq	r0, r1, r0
    4f84:	72000b00 	andvc	r0, r0, #0, 22
    4f88:	34007000 	strcc	r7, [r0], #-0
    4f8c:	1e640825 	cdpne	8, 6, cr0, cr4, cr5, {1}
    4f90:	01009f1c 	tsteq	r0, ip, lsl pc
    4f94:	01020000 	mrseq	r0, (UNDEF: 2)
    4f98:	00010000 	andeq	r0, r1, r0
    4f9c:	00010252 	andeq	r0, r1, r2, asr r2
    4fa0:	00011600 	andeq	r1, r1, r0, lsl #12
    4fa4:	91002a00 	tstls	r0, r0, lsl #20
    4fa8:	64910668 	ldrvs	r0, [r1], #1640	; 0x668
    4fac:	0c007406 	cfstrseq	mvf7, [r0], {6}
    4fb0:	40013800 	andmi	r3, r1, r0, lsl #16
    4fb4:	00012829 	andeq	r2, r1, r9, lsr #16
    4fb8:	1e491316 	mcrne	3, 2, r1, cr9, cr6, {0}
    4fbc:	007525f7 	ldrshteq	r2, [r5], #-87	; 0xffffffa9
    4fc0:	f7243206 			; <UNDEFINED> instruction: 0xf7243206
    4fc4:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    4fc8:	25340070 	ldrcs	r0, [r4, #-112]!	; 0x70
    4fcc:	1c1e6408 	cfldrsne	mvf6, [lr], {8}
    4fd0:	0001169f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    4fd4:	00011c00 	andeq	r1, r1, r0, lsl #24
    4fd8:	7d002c00 	stcvc	12, cr2, [r0, #-0]
    4fdc:	647d0668 	ldrbtvs	r0, [sp], #-1640	; 0x668
    4fe0:	5001f306 	andpl	pc, r1, r6, lsl #6
    4fe4:	0138000c 	teqeq	r8, ip
    4fe8:	01282940 			; <UNDEFINED> instruction: 0x01282940
    4fec:	49131600 	ldmdbmi	r3, {r9, sl, ip}
    4ff0:	f325f71e 	vaba.u32	d15, d5, d14
    4ff4:	32065101 	andcc	r5, r6, #1073741824	; 0x40000000
    4ff8:	1b25f724 	blne	982c90 <__Stack_Size+0x982890>
    4ffc:	007000f7 	ldrshteq	r0, [r0], #-7
    5000:	64082534 	strvs	r2, [r8], #-1332	; 0x534
    5004:	009f1c1e 	addseq	r1, pc, lr, lsl ip	; <UNPREDICTABLE>
    5008:	00000000 	andeq	r0, r0, r0
    500c:	32000000 	andcc	r0, r0, #0
    5010:	40000001 	andmi	r0, r0, r1
    5014:	01000001 	tsteq	r0, r1
    5018:	01405100 	mrseq	r5, (UNDEF: 80)
    501c:	01520000 	cmpeq	r2, r0
    5020:	00040000 	andeq	r0, r4, r0
    5024:	9f5101f3 	svcls	0x005101f3
	...
    5030:	00000132 	andeq	r0, r0, r2, lsr r1
    5034:	00000142 	andeq	r0, r0, r2, asr #2
    5038:	9f300002 	svcls	0x00300002
    503c:	00000142 	andeq	r0, r0, r2, asr #2
    5040:	0000014a 	andeq	r0, r0, sl, asr #2
    5044:	0072000b 	rsbseq	r0, r2, fp
    5048:	1af0ff0b 	bne	ffc44c7c <SCS_BASE+0x1fc36c7c>
    504c:	1affff0a 	bne	4c7c <__Stack_Size+0x487c>
    5050:	00014e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    5054:	00015200 	andeq	r5, r1, r0, lsl #4
    5058:	73000700 	movwvc	r0, #1792	; 0x700
    505c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5060:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5064:	00000000 	andeq	r0, r0, r0
    5068:	01760000 	cmneq	r6, r0
    506c:	018c0000 	orreq	r0, ip, r0
    5070:	00010000 	andeq	r0, r1, r0
    5074:	00018c50 	andeq	r8, r1, r0, asr ip
    5078:	00018e00 	andeq	r8, r1, r0, lsl #28
    507c:	70000300 	andvc	r0, r0, r0, lsl #6
    5080:	018e9f74 	orreq	r9, lr, r4, ror pc
    5084:	01940000 	orrseq	r0, r4, r0
    5088:	00010000 	andeq	r0, r1, r0
    508c:	00019450 	andeq	r9, r1, r0, asr r4
    5090:	0001a800 	andeq	sl, r1, r0, lsl #16
    5094:	f3000400 	vshl.u8	d0, d0, d0
    5098:	009f5001 	addseq	r5, pc, r1
    509c:	00000000 	andeq	r0, r0, r0
    50a0:	76000000 	strvc	r0, [r0], -r0
    50a4:	82000001 	andhi	r0, r0, #1
    50a8:	01000001 	tsteq	r0, r1
    50ac:	01825100 	orreq	r5, r2, r0, lsl #2
    50b0:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    50b4:	00040000 	andeq	r0, r4, r0
    50b8:	9f5101f3 	svcls	0x005101f3
	...
    50c4:	00000176 	andeq	r0, r0, r6, ror r1
    50c8:	0000019a 	muleq	r0, sl, r1
    50cc:	9a520001 	bls	14850d8 <__Stack_Size+0x1484cd8>
    50d0:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
    50d4:	04000001 	streq	r0, [r0], #-1
    50d8:	5201f300 	andpl	pc, r1, #0, 6
    50dc:	00019e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    50e0:	0001a000 	andeq	sl, r1, r0
    50e4:	52000100 	andpl	r0, r0, #0, 2
    50e8:	000001a0 	andeq	r0, r0, r0, lsr #3
    50ec:	000001a8 	andeq	r0, r0, r8, lsr #3
    50f0:	01f30004 	mvnseq	r0, r4
    50f4:	00009f52 	andeq	r9, r0, r2, asr pc
    50f8:	00000000 	andeq	r0, r0, r0
    50fc:	01760000 	cmneq	r6, r0
    5100:	017c0000 	cmneq	ip, r0
    5104:	00020000 	andeq	r0, r2, r0
    5108:	017c9f30 	cmneq	ip, r0, lsr pc
    510c:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    5110:	00060000 	andeq	r0, r6, r0
    5114:	ff080074 			; <UNDEFINED> instruction: 0xff080074
    5118:	00009f1a 	andeq	r9, r0, sl, lsl pc
    511c:	00000000 	andeq	r0, r0, r0
    5120:	01760000 	cmneq	r6, r0
    5124:	017c0000 	cmneq	ip, r0
    5128:	00020000 	andeq	r0, r2, r0
    512c:	017c9f30 	cmneq	ip, r0, lsr pc
    5130:	01820000 	orreq	r0, r2, r0
    5134:	00090000 	andeq	r0, r9, r0
    5138:	1a4f0071 	bne	13c5304 <__Stack_Size+0x13c4f04>
    513c:	1affff0a 	bne	4d6c <__Stack_Size+0x496c>
    5140:	0001829f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    5144:	0001a800 	andeq	sl, r1, r0, lsl #16
    5148:	f3000a00 	vpmax.u8	d0, d0, d0
    514c:	1a4f5101 	bne	13d9558 <__Stack_Size+0x13d9158>
    5150:	1affff0a 	bne	4d80 <__Stack_Size+0x4980>
    5154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5158:	00000000 	andeq	r0, r0, r0
    515c:	00017600 	andeq	r7, r1, r0, lsl #12
    5160:	00018800 	andeq	r8, r1, r0, lsl #16
    5164:	30000200 	andcc	r0, r0, r0, lsl #4
    5168:	0001889f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    516c:	00019c00 	andeq	r9, r1, r0, lsl #24
    5170:	53000100 	movwpl	r0, #256	; 0x100
    5174:	0000019c 	muleq	r0, ip, r1
    5178:	0000019e 	muleq	r0, lr, r1
    517c:	71310005 	teqvc	r1, r5
    5180:	9e9f2400 	cdpls	4, 9, cr2, cr15, cr0, {0}
    5184:	a4000001 	strge	r0, [r0], #-1
    5188:	01000001 	tsteq	r0, r1
    518c:	01a45300 			; <UNDEFINED> instruction: 0x01a45300
    5190:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    5194:	00050000 	andeq	r0, r5, r0
    5198:	24007131 	strcs	r7, [r0], #-305	; 0x131
    519c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51a0:	00000000 	andeq	r0, r0, r0
    51a4:	0001a800 	andeq	sl, r1, r0, lsl #16
    51a8:	0001b000 	andeq	fp, r1, r0
    51ac:	51000100 	mrspl	r0, (UNDEF: 16)
    51b0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    51b4:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    51b8:	01f30004 	mvnseq	r0, r4
    51bc:	01b29f51 			; <UNDEFINED> instruction: 0x01b29f51
    51c0:	01b60000 			; <UNDEFINED> instruction: 0x01b60000
    51c4:	00010000 	andeq	r0, r1, r0
    51c8:	0001b651 	andeq	fp, r1, r1, asr r6
    51cc:	0001ba00 	andeq	fp, r1, r0, lsl #20
    51d0:	f3000400 	vshl.u8	d0, d0, d0
    51d4:	009f5101 	addseq	r5, pc, r1, lsl #2
    51d8:	00000000 	andeq	r0, r0, r0
    51dc:	ba000000 	blt	51e4 <__Stack_Size+0x4de4>
    51e0:	cc000001 	stcgt	0, cr0, [r0], {1}
    51e4:	01000001 	tsteq	r0, r1
    51e8:	01cc5100 	biceq	r5, ip, r0, lsl #2
    51ec:	01d00000 	bicseq	r0, r0, r0
    51f0:	00040000 	andeq	r0, r4, r0
    51f4:	9f5101f3 	svcls	0x005101f3
	...
    5200:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5204:	000001e2 	andeq	r0, r0, r2, ror #3
    5208:	e2510001 	subs	r0, r1, #1
    520c:	e6000001 	str	r0, [r0], -r1
    5210:	04000001 	streq	r0, [r0], #-1
    5214:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5218:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    521c:	00000000 	andeq	r0, r0, r0
    5220:	0001fe00 	andeq	pc, r1, r0, lsl #28
    5224:	00021000 	andeq	r1, r2, r0
    5228:	51000100 	mrspl	r0, (UNDEF: 16)
    522c:	00000210 	andeq	r0, r0, r0, lsl r2
    5230:	00000214 	andeq	r0, r0, r4, lsl r2
    5234:	01f30004 	mvnseq	r0, r4
    5238:	00009f51 	andeq	r9, r0, r1, asr pc
    523c:	00000000 	andeq	r0, r0, r0
    5240:	022c0000 	eoreq	r0, ip, #0
    5244:	02300000 	eorseq	r0, r0, #0
    5248:	00010000 	andeq	r0, r1, r0
    524c:	00023051 	andeq	r3, r2, r1, asr r0
    5250:	00023400 	andeq	r3, r2, r0, lsl #8
    5254:	f3000400 	vshl.u8	d0, d0, d0
    5258:	009f5101 	addseq	r5, pc, r1, lsl #2
    525c:	00000000 	andeq	r0, r0, r0
    5260:	34000000 	strcc	r0, [r0], #-0
    5264:	36000002 	strcc	r0, [r0], -r2
    5268:	01000002 	tsteq	r0, r2
    526c:	02365000 	eorseq	r5, r6, #0
    5270:	023c0000 	eorseq	r0, ip, #0
    5274:	00040000 	andeq	r0, r4, r0
    5278:	9f5001f3 	svcls	0x005001f3
	...
    5284:	00000248 	andeq	r0, r0, r8, asr #4
    5288:	00000256 	andeq	r0, r0, r6, asr r2
    528c:	56510001 	ldrbpl	r0, [r1], -r1
    5290:	5a000002 	bpl	52a0 <__Stack_Size+0x4ea0>
    5294:	04000002 	streq	r0, [r0], #-2
    5298:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    529c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52a0:	00000000 	andeq	r0, r0, r0
    52a4:	00025a00 	andeq	r5, r2, r0, lsl #20
    52a8:	00026800 	andeq	r6, r2, r0, lsl #16
    52ac:	51000100 	mrspl	r0, (UNDEF: 16)
    52b0:	00000268 	andeq	r0, r0, r8, ror #4
    52b4:	0000026c 	andeq	r0, r0, ip, ror #4
    52b8:	01f30004 	mvnseq	r0, r4
    52bc:	00009f51 	andeq	r9, r0, r1, asr pc
    52c0:	00000000 	andeq	r0, r0, r0
    52c4:	02b40000 	adcseq	r0, r4, #0
    52c8:	02c60000 	sbceq	r0, r6, #0
    52cc:	00010000 	andeq	r0, r1, r0
    52d0:	0002c651 	andeq	ip, r2, r1, asr r6
    52d4:	0002ca00 	andeq	ip, r2, r0, lsl #20
    52d8:	f3000400 	vshl.u8	d0, d0, d0
    52dc:	009f5101 	addseq	r5, pc, r1, lsl #2
    52e0:	00000000 	andeq	r0, r0, r0
    52e4:	e2000000 	and	r0, r0, #0
    52e8:	ea000002 	b	52f8 <__Stack_Size+0x4ef8>
    52ec:	01000002 	tsteq	r0, r2
    52f0:	02ea5000 	rsceq	r5, sl, #0
    52f4:	02ee0000 	rsceq	r0, lr, #0
    52f8:	00040000 	andeq	r0, r4, r0
    52fc:	9f5001f3 	svcls	0x005001f3
	...
    5308:	000002e2 	andeq	r0, r0, r2, ror #5
    530c:	000002e4 	andeq	r0, r0, r4, ror #5
    5310:	9f300002 	svcls	0x00300002
    5314:	000002e4 	andeq	r0, r0, r4, ror #5
    5318:	000002ee 	andeq	r0, r0, lr, ror #5
    531c:	0071000a 	rsbseq	r0, r1, sl
    5320:	401a0073 	andsmi	r0, sl, r3, ror r0
    5324:	9f2e3024 	svcls	0x002e3024
	...
    5330:	000002ee 	andeq	r0, r0, lr, ror #5
    5334:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5338:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    533c:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    5340:	04000002 	streq	r0, [r0], #-2
    5344:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5348:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    534c:	00000000 	andeq	r0, r0, r0
    5350:	0002f600 	andeq	pc, r2, r0, lsl #12
    5354:	00032c00 	andeq	r2, r3, r0, lsl #24
    5358:	50000100 	andpl	r0, r0, r0, lsl #2
    535c:	0000032c 	andeq	r0, r0, ip, lsr #6
    5360:	00000330 	andeq	r0, r0, r0, lsr r3
    5364:	01f30004 	mvnseq	r0, r4
    5368:	03309f50 	teqeq	r0, #80, 30	; 0x140
    536c:	03320000 	teqeq	r2, #0
    5370:	00010000 	andeq	r0, r1, r0
    5374:	00033250 	andeq	r3, r3, r0, asr r2
    5378:	00033400 	andeq	r3, r3, r0, lsl #8
    537c:	f3000400 	vshl.u8	d0, d0, d0
    5380:	009f5001 	addseq	r5, pc, r1
    5384:	00000000 	andeq	r0, r0, r0
    5388:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    538c:	22000002 	andcs	r0, r0, #2
    5390:	01000003 	tsteq	r0, r3
    5394:	03225100 			; <UNDEFINED> instruction: 0x03225100
    5398:	03300000 	teqeq	r0, #0
    539c:	00040000 	andeq	r0, r4, r0
    53a0:	9f5101f3 	svcls	0x005101f3
    53a4:	00000330 	andeq	r0, r0, r0, lsr r3
    53a8:	00000334 	andeq	r0, r0, r4, lsr r3
    53ac:	00510001 	subseq	r0, r1, r1
    53b0:	00000000 	andeq	r0, r0, r0
    53b4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    53b8:	1a000002 	bne	53c8 <__Stack_Size+0x4fc8>
    53bc:	02000003 	andeq	r0, r0, #3
    53c0:	1a9f3000 	bne	fe7d13c8 <SCS_BASE+0x1e7c33c8>
    53c4:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    53c8:	0b000003 	bleq	53dc <__Stack_Size+0x4fdc>
    53cc:	00713100 	rsbseq	r3, r1, r0, lsl #2
    53d0:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    53d4:	9f241aff 	svcls	0x00241aff
    53d8:	0000031e 	andeq	r0, r0, lr, lsl r3
    53dc:	00000322 	andeq	r0, r0, r2, lsr #6
    53e0:	71310012 	teqvc	r1, r2, lsl r0
    53e4:	0a253800 	beq	9533ec <__Stack_Size+0x952fec>
    53e8:	241affff 	ldrcs	pc, [sl], #-4095	; 0xfff
    53ec:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    53f0:	9f1a1aff 	svcls	0x001a1aff
    53f4:	00000322 	andeq	r0, r0, r2, lsr #6
    53f8:	00000330 	andeq	r0, r0, r0, lsr r3
    53fc:	f3310013 	vqadd.u64	d0, d1, d3
    5400:	25385101 	ldrcs	r5, [r8, #-257]!	; 0x101
    5404:	1affff0a 	bne	5034 <__Stack_Size+0x4c34>
    5408:	0a007224 	beq	21ca0 <__Stack_Size+0x218a0>
    540c:	1a1affff 	bne	6c5410 <__Stack_Size+0x6c5010>
    5410:	0003309f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    5414:	00033400 	andeq	r3, r3, r0, lsl #8
    5418:	31001200 	mrscc	r1, R8_usr
    541c:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    5420:	1affff0a 	bne	5050 <__Stack_Size+0x4c50>
    5424:	0a007224 	beq	21cbc <__Stack_Size+0x218bc>
    5428:	1a1affff 	bne	6c542c <__Stack_Size+0x6c502c>
    542c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5430:	00000000 	andeq	r0, r0, r0
    5434:	0002f600 	andeq	pc, r2, r0, lsl #12
    5438:	0002fe00 	andeq	pc, r2, r0, lsl #28
    543c:	30000200 	andcc	r0, r0, r0, lsl #4
    5440:	0002fe9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    5444:	00030800 	andeq	r0, r3, r0, lsl #16
    5448:	71000900 	tstvc	r0, r0, lsl #18
    544c:	0a1a4f00 	beq	699054 <__Stack_Size+0x698c54>
    5450:	9f1affff 	svcls	0x001affff
    5454:	00000308 	andeq	r0, r0, r8, lsl #6
    5458:	0000031a 	andeq	r0, r0, sl, lsl r3
    545c:	1a520001 	bne	1485468 <__Stack_Size+0x1485068>
    5460:	24000003 	strcs	r0, [r0], #-3
    5464:	01000003 	tsteq	r0, r3
    5468:	03305300 	teqeq	r0, #0, 6
    546c:	03340000 	teqeq	r4, #0
    5470:	00010000 	andeq	r0, r1, r0
    5474:	00000053 	andeq	r0, r0, r3, asr r0
    5478:	00000000 	andeq	r0, r0, r0
    547c:	0002f600 	andeq	pc, r2, r0, lsl #12
    5480:	0002fe00 	andeq	pc, r2, r0, lsl #28
    5484:	30000200 	andcc	r0, r0, r0, lsl #4
    5488:	0002fe9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    548c:	00033400 	andeq	r3, r3, r0, lsl #8
    5490:	74000600 	strvc	r0, [r0], #-1536	; 0x600
    5494:	1aff0800 	bne	fffc749c <SCS_BASE+0x1ffb949c>
    5498:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    549c:	00000000 	andeq	r0, r0, r0
    54a0:	0002f600 	andeq	pc, r2, r0, lsl #12
    54a4:	00033200 	andeq	r3, r3, r0, lsl #4
    54a8:	30000200 	andcc	r0, r0, r0, lsl #4
    54ac:	0003329f 	muleq	r3, pc, r2	; <UNPREDICTABLE>
    54b0:	00033400 	andeq	r3, r3, r0, lsl #8
    54b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    54c0:	00000334 	andeq	r0, r0, r4, lsr r3
    54c4:	00000336 	andeq	r0, r0, r6, lsr r3
    54c8:	36510001 	ldrbcc	r0, [r1], -r1
    54cc:	42000003 	andmi	r0, r0, #3
    54d0:	04000003 	streq	r0, [r0], #-3
    54d4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    54d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    54dc:	00000000 	andeq	r0, r0, r0
    54e0:	00033400 	andeq	r3, r3, r0, lsl #8
    54e4:	00033600 	andeq	r3, r3, r0, lsl #12
    54e8:	71000500 	tstvc	r0, r0, lsl #10
    54ec:	9f253800 	svcls	0x00253800
    54f0:	00000336 	andeq	r0, r0, r6, lsr r3
    54f4:	00000342 	andeq	r0, r0, r2, asr #6
    54f8:	01f30006 	mvnseq	r0, r6
    54fc:	9f253851 	svcls	0x00253851
	...
    5508:	0000000e 	andeq	r0, r0, lr
    550c:	00000014 	andeq	r0, r0, r4, lsl r0
    5510:	14530001 	ldrbne	r0, [r3], #-1
    5514:	1c000000 	stcne	0, cr0, [r0], {-0}
    5518:	03000000 	movweq	r0, #0
    551c:	9f047300 	svcls	0x00047300
    5520:	0000001c 	andeq	r0, r0, ip, lsl r0
    5524:	0000002c 	andeq	r0, r0, ip, lsr #32
    5528:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    552c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    5530:	03000000 	movweq	r0, #0
    5534:	9f7c7300 	svcls	0x007c7300
    5538:	0000002e 	andeq	r0, r0, lr, lsr #32
    553c:	00000031 	andeq	r0, r0, r1, lsr r0
    5540:	00530001 	subseq	r0, r3, r1
    5544:	00000000 	andeq	r0, r0, r0
    5548:	Address 0x00005548 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08003d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, sp}
   4:	08003d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp, ip, sp}
   8:	08003d20 	stmdaeq	r0, {r5, r8, sl, fp, ip, sp}
   c:	08003d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, ip, sp}
	...
  18:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
  1c:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
  20:	08005f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, ip, lr}
  24:	08005f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
  28:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
  2c:	08005fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
	...
  38:	08005f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, lr}
  3c:	08005f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, ip, lr}
  40:	08005f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
  44:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
  48:	08005fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
  4c:	08005fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, lr}
	...
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	08003dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
  60:	08005f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, lr}
  64:	0800609c 	stmdaeq	r0, {r2, r3, r4, r7, sp, lr}
	...
  70:	0000012e 	andeq	r0, r0, lr, lsr #2
  74:	0000014a 	andeq	r0, r0, sl, asr #2
  78:	00000154 	andeq	r0, r0, r4, asr r1
  7c:	0000021c 	andeq	r0, r0, ip, lsl r2
	...
  88:	00000960 	andeq	r0, r0, r0, ror #18
  8c:	00000962 	andeq	r0, r0, r2, ror #18
  90:	00000964 	andeq	r0, r0, r4, ror #18
  94:	00000992 	muleq	r0, r2, r9
  98:	00000994 	muleq	r0, r4, r9
  9c:	00000996 	muleq	r0, r6, r9
	...
  a8:	0000099e 	muleq	r0, lr, r9
  ac:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  b0:	000009d6 	ldrdeq	r0, [r0], -r6
  b4:	000009d8 	ldrdeq	r0, [r0], -r8
	...
