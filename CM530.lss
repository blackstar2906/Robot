
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flashtext    00000000  08003134  08003134  00008018  2**0
                  CONTENTS
  2 .text         00003040  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000018  20000000  08006174  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000204  20000018  0800618c  00008018  2**2
                  ALLOC
  5 ._usrstack    00000100  2000021c  08006390  00008018  2**0
                  ALLOC
  6 .comment      00000070  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000080c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008cfb  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018c8  00000000  00000000  00010f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000177a  00000000  00000000  0001284b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d54  00000000  00000000  00013fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002fb7  00000000  00000000  00015d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000051de  00000000  00000000  00018cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  0001deb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	andcs	r0, r1, r0
 8003004:	08005d49 	stmdaeq	r0, {r0, r3, r6, r8, sl, fp, ip, lr}
 8003008:	08003c65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, ip, sp}
 800300c:	08003c67 	stmdaeq	r0, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
 8003010:	08003c69 	stmdaeq	r0, {r0, r3, r5, r6, sl, fp, ip, sp}
 8003014:	08003c6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, sl, fp, ip, sp}
 8003018:	08003c6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, ip, sp}
	...
 800302c:	08003c71 	stmdaeq	r0, {r0, r4, r5, r6, sl, fp, ip, sp}
 8003030:	08003c6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, sl, fp, ip, sp}
 8003034:	00000000 	andeq	r0, r0, r0
 8003038:	08003c73 	stmdaeq	r0, {r0, r1, r4, r5, r6, sl, fp, ip, sp}
 800303c:	08003c75 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, fp, ip, sp}
 8003040:	08003c79 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, fp, ip, sp}
 8003044:	08003c7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, sl, fp, ip, sp}
 8003048:	08003c7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, fp, ip, sp}
 800304c:	08003c7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, sl, fp, ip, sp}
 8003050:	08003c81 	stmdaeq	r0, {r0, r7, sl, fp, ip, sp}
 8003054:	08003c83 	stmdaeq	r0, {r0, r1, r7, sl, fp, ip, sp}
 8003058:	08003c85 	stmdaeq	r0, {r0, r2, r7, sl, fp, ip, sp}
 800305c:	08003c87 	stmdaeq	r0, {r0, r1, r2, r7, sl, fp, ip, sp}
 8003060:	08003c89 	stmdaeq	r0, {r0, r3, r7, sl, fp, ip, sp}
 8003064:	08003c8b 	stmdaeq	r0, {r0, r1, r3, r7, sl, fp, ip, sp}
 8003068:	08003c8d 	stmdaeq	r0, {r0, r2, r3, r7, sl, fp, ip, sp}
	...
 8003088:	08003c9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, fp, ip, sp}
 800308c:	08003c9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, sl, fp, ip, sp}
 8003090:	08003ca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, sp}
 8003094:	08003ca3 	stmdaeq	r0, {r0, r1, r5, r7, sl, fp, ip, sp}
 8003098:	08003ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, ip, sp}
 800309c:	08003ca7 	stmdaeq	r0, {r0, r1, r2, r5, r7, sl, fp, ip, sp}
 80030a0:	08003ca9 	stmdaeq	r0, {r0, r3, r5, r7, sl, fp, ip, sp}
 80030a4:	08003cab 	stmdaeq	r0, {r0, r1, r3, r5, r7, sl, fp, ip, sp}
 80030a8:	08003cad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, fp, ip, sp}
 80030ac:	08003caf 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, sl, fp, ip, sp}
 80030b0:	08003cb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp, ip, sp}
 80030b4:	08003cb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, fp, ip, sp}
 80030b8:	08003cb7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, sl, fp, ip, sp}
 80030bc:	08003cb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, fp, ip, sp}
 80030c0:	08003cbb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, sl, fp, ip, sp}
 80030c4:	08003cbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, ip, sp}
 80030c8:	08003cbf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, sl, fp, ip, sp}
 80030cc:	08003cc1 	stmdaeq	r0, {r0, r6, r7, sl, fp, ip, sp}
 80030d0:	08003cc3 	stmdaeq	r0, {r0, r1, r6, r7, sl, fp, ip, sp}
 80030d4:	08003cc5 	stmdaeq	r0, {r0, r2, r6, r7, sl, fp, ip, sp}
 80030d8:	08003cc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, ip, sp}
 80030dc:	08003ccb 	stmdaeq	r0, {r0, r1, r3, r6, r7, sl, fp, ip, sp}
 80030e0:	08003ccd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, fp, ip, sp}
 80030e4:	08003ccf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, sl, fp, ip, sp}
 80030e8:	08003cd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, ip, sp}
 80030ec:	08003cd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sl, fp, ip, sp}
 80030f0:	08003cd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sl, fp, ip, sp}
 80030f4:	08003cd7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, sl, fp, ip, sp}
 80030f8:	08003cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, ip, sp}
 80030fc:	08003cdb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, sl, fp, ip, sp}
 8003100:	08003cdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, ip, sp}
 8003104:	08003cdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, fp, ip, sp}
 8003108:	08003ce1 	stmdaeq	r0, {r0, r5, r6, r7, sl, fp, ip, sp}
 800310c:	08003ce3 	stmdaeq	r0, {r0, r1, r5, r6, r7, sl, fp, ip, sp}
 8003110:	08003ce5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp, ip, sp}
 8003114:	08003ce7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, sl, fp, ip, sp}
 8003118:	08003ce9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, fp, ip, sp}
 800311c:	08003ceb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, sl, fp, ip, sp}
 8003120:	08003ced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, ip, sp}
 8003124:	08003cef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, fp, ip, sp}
 8003128:	08003cf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, fp, ip, sp}
 800312c:	08003cf3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, sl, fp, ip, sp}
 8003130:	0000f85f 	andeq	pc, r0, pc, asr r8	; <UNPREDICTABLE>

Disassembly of section .text:

08003134 <RCC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RCC_Configuration(void)
{
 8003134:	b510      	push	{r4, lr}
  ErrorStatus HSEStartUpStatus;
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();
 8003136:	f001 fd27 	bl	8004b88 <RCC_DeInit>

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
 800313a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800313e:	f001 fd41 	bl	8004bc4 <RCC_HSEConfig>

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003142:	f001 fe8f 	bl	8004e64 <RCC_WaitForHSEStartUp>

  if(HSEStartUpStatus == SUCCESS)
 8003146:	2801      	cmp	r0, #1

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003148:	4604      	mov	r4, r0

  if(HSEStartUpStatus == SUCCESS)
 800314a:	d00d      	beq.n	8003168 <RCC_Configuration+0x34>
    }

  /* Enable peripheral clocks --------------------------------------------------*/

  /* Enable USART1 and GPIOB clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 800314c:	f244 0008 	movw	r0, #16392	; 0x4008
 8003150:	2101      	movs	r1, #1
 8003152:	f001 fe31 	bl	8004db8 <RCC_APB2PeriphClockCmd>

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);
 8003156:	4817      	ldr	r0, [pc, #92]	; (80031b4 <RCC_Configuration+0x80>)
 8003158:	2101      	movs	r1, #1
 800315a:	f001 fe39 	bl	8004dd0 <RCC_APB1PeriphClockCmd>

  PWR_BackupAccessCmd(ENABLE);
}
 800315e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);

  PWR_BackupAccessCmd(ENABLE);
 8003162:	2001      	movs	r0, #1
 8003164:	f001 bcb9 	b.w	8004ada <PWR_BackupAccessCmd>
  HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS)
    {
      /* Enable Prefetch Buffer */
      FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003168:	2010      	movs	r0, #16
 800316a:	f000 ffcb 	bl	8004104 <FLASH_PrefetchBufferCmd>

      /* Flash 2 wait state */
      FLASH_SetLatency(FLASH_Latency_2);
 800316e:	2002      	movs	r0, #2
 8003170:	f000 ffb0 	bl	80040d4 <FLASH_SetLatency>

      /* HCLK = SYSCLK */
      RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8003174:	2000      	movs	r0, #0
 8003176:	f001 fd73 	bl	8004c60 <RCC_HCLKConfig>

      /* PCLK2 = HCLK */
      RCC_PCLK2Config(RCC_HCLK_Div1);
 800317a:	2000      	movs	r0, #0
 800317c:	f001 fd84 	bl	8004c88 <RCC_PCLK2Config>

      /* PCLK1 = HCLK/2 */
      RCC_PCLK1Config(RCC_HCLK_Div2);
 8003180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003184:	f001 fd76 	bl	8004c74 <RCC_PCLK1Config>

      /* PLLCLK = 8MHz * 9 = 72 MHz */
      RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8003188:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800318c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8003190:	f001 fd44 	bl	8004c1c <RCC_PLLConfig>

      /* Enable PLL */
      RCC_PLLCmd(ENABLE);
 8003194:	4620      	mov	r0, r4
 8003196:	f001 fd4b 	bl	8004c30 <RCC_PLLCmd>

      /* Wait till PLL is ready */
      while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 800319a:	2039      	movs	r0, #57	; 0x39
 800319c:	f001 fe4e 	bl	8004e3c <RCC_GetFlagStatus>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0fa      	beq.n	800319a <RCC_Configuration+0x66>
	{
	}

      /* Select PLL as system clock source */
      RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80031a4:	2002      	movs	r0, #2
 80031a6:	f001 fd49 	bl	8004c3c <RCC_SYSCLKConfig>

      /* Wait till PLL is used as system clock source */
      while(RCC_GetSYSCLKSource() != 0x08)
 80031aa:	f001 fd51 	bl	8004c50 <RCC_GetSYSCLKSource>
 80031ae:	2808      	cmp	r0, #8
 80031b0:	d1fb      	bne.n	80031aa <RCC_Configuration+0x76>
 80031b2:	e7cb      	b.n	800314c <RCC_Configuration+0x18>
 80031b4:	00040001 	andeq	r0, r4, r1

080031b8 <NVIC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NVIC_Configuration(void)
{
 80031b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef  VECT_TAB_RAM
  // Set the Vector Table base location at 0x20000000
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
  // Set the Vector Table base location at 0x08003000
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80031ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80031be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031c2:	f001 fbcb 	bl	800495c <NVIC_SetVectorTable>
#endif

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80031c6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80031ca:	f001 fb21 	bl	8004810 <NVIC_PriorityGroupConfig>

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031ce:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031d0:	2401      	movs	r4, #1

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031d2:	2325      	movs	r3, #37	; 0x25
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031d4:	a801      	add	r0, sp, #4

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031d6:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031da:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031de:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031e2:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031e6:	f001 fb1d 	bl	8004824 <NVIC_Init>

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80031ea:	231c      	movs	r3, #28
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031ec:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80031ee:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80031f2:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031f6:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031fa:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031fe:	f001 fb11 	bl	8004824 <NVIC_Init>
}
 8003202:	b003      	add	sp, #12
 8003204:	bd30      	pop	{r4, r5, pc}

08003206 <GPIO_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
 8003206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003208:	4c1e      	ldr	r4, [pc, #120]	; (8003284 <GPIO_Configuration+0x7e>)
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 800320a:	a801      	add	r0, sp, #4
 800320c:	f001 fa4d 	bl	80046aa <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003210:	2604      	movs	r6, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8003212:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003214:	2703      	movs	r7, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003216:	2510      	movs	r5, #16
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003218:	4620      	mov	r0, r4
 800321a:	a901      	add	r1, sp, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 800321c:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003220:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003224:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003228:	f001 f9f1 	bl	800460e <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 800322c:	f44f 6308 	mov.w	r3, #2176	; 0x880
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003230:	4620      	mov	r0, r4
 8003232:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8003236:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800323a:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800323e:	f001 f9e6 	bl	800460e <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8003242:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003246:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800324a:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800324c:	2318      	movs	r3, #24
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800324e:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003252:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003256:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800325a:	f001 f9d8 	bl	800460e <GPIO_Init>

  GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 800325e:	4630      	mov	r0, r6
 8003260:	2101      	movs	r1, #1
 8003262:	f001 fa63 	bl	800472c <GPIO_PinRemapConfig>
  GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <GPIO_Configuration+0x82>)
 8003268:	2101      	movs	r1, #1
 800326a:	f001 fa5f 	bl	800472c <GPIO_PinRemapConfig>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f001 fa36 	bl	80046e2 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 8003276:	4620      	mov	r0, r4
 8003278:	2120      	movs	r1, #32
 800327a:	f001 fa30 	bl	80046de <GPIO_SetBits>
}
 800327e:	b003      	add	sp, #12
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003282:	bf00      	nop
 8003284:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003288:	00300400 	eorseq	r0, r0, r0, lsl #8

0800328c <DisableUSART1>:
    }
}

void DisableUSART1(void)
{
  USART_Cmd(USART1, DISABLE);
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <DisableUSART1+0x8>)
 800328e:	2100      	movs	r1, #0
 8003290:	f002 bc2f 	b.w	8005af2 <USART_Cmd>
 8003294:	40013800 	andmi	r3, r1, r0, lsl #16

08003298 <ClearBuffer256>:
}

void ClearBuffer256(void)
{
  gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <ClearBuffer256+0xc>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	705a      	strb	r2, [r3, #1]
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000018 	andcs	r0, r0, r8, lsl r0

080032a8 <CheckNewArrive>:
}

byte CheckNewArrive(void)
{
  if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <CheckNewArrive+0x10>)
 80032aa:	7858      	ldrb	r0, [r3, #1]
 80032ac:	781b      	ldrb	r3, [r3, #0]
    return 1;
  else
    return 0;
}
 80032ae:	1ac0      	subs	r0, r0, r3
 80032b0:	bf18      	it	ne
 80032b2:	2001      	movne	r0, #1
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000018 	andcs	r0, r0, r8, lsl r0

080032bc <TxDByte_DXL>:

void TxDByte_DXL(byte bTxdData)
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	4604      	mov	r4, r0
  GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80032c0:	2120      	movs	r1, #32
 80032c2:	480d      	ldr	r0, [pc, #52]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032c4:	f001 fa0d 	bl	80046e2 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032ca:	2110      	movs	r1, #16
 80032cc:	f001 fa07 	bl	80046de <GPIO_SetBits>

  USART_SendData(USART1,bTxdData);
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <TxDByte_DXL+0x40>)
 80032d2:	4621      	mov	r1, r4
 80032d4:	f002 fc74 	bl	8005bc0 <USART_SendData>
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <TxDByte_DXL+0x40>)
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	f002 fccb 	bl	8005c76 <USART_GetFlagStatus>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d0f9      	beq.n	80032d8 <TxDByte_DXL+0x1c>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032e6:	2110      	movs	r1, #16
 80032e8:	f001 f9fb 	bl	80046e2 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USART_SendData(USART1,bTxdData);
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032f2:	2120      	movs	r1, #32
 80032f4:	f001 b9f3 	b.w	80046de <GPIO_SetBits>
 80032f8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80032fc:	40013800 	andmi	r3, r1, r0, lsl #16

08003300 <RxDByte_DXL>:
{
  byte bTemp;

  while(1)
    {
      if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <RxDByte_DXL+0x1c>)
 8003302:	7859      	ldrb	r1, [r3, #1]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	4291      	cmp	r1, r2
 8003308:	d0fa      	beq.n	8003300 <RxDByte_DXL>
    }

  bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 800330a:	785a      	ldrb	r2, [r3, #1]
 800330c:	441a      	add	r2, r3
 800330e:	7890      	ldrb	r0, [r2, #2]
  gbRxBufferReadPointer++;
 8003310:	785a      	ldrb	r2, [r3, #1]
 8003312:	3201      	adds	r2, #1
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	705a      	strb	r2, [r3, #1]

  return bTemp;
}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000018 	andcs	r0, r0, r8, lsl r0

08003320 <TxDByte_PC>:
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
  USART_SendData(USART3,bTxdData);
 8003320:	4601      	mov	r1, r0
    bTmp += 7;
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 8003322:	b508      	push	{r3, lr}
  USART_SendData(USART3,bTxdData);
 8003324:	4804      	ldr	r0, [pc, #16]	; (8003338 <TxDByte_PC+0x18>)
 8003326:	f002 fc4b 	bl	8005bc0 <USART_SendData>
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <TxDByte_PC+0x18>)
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	f002 fca2 	bl	8005c76 <USART_GetFlagStatus>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0f9      	beq.n	800332a <TxDByte_PC+0xa>
}
 8003336:	bd08      	pop	{r3, pc}
 8003338:	40004800 	andmi	r4, r0, r0, lsl #16

0800333c <TxDString>:
  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
}

void TxDString(byte *bData)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	1e44      	subs	r4, r0, #1
  while (*bData)
 8003340:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003344:	b110      	cbz	r0, 800334c <TxDString+0x10>
    TxDByte_PC(*bData++);
 8003346:	f7ff ffeb 	bl	8003320 <TxDByte_PC>
 800334a:	e7f9      	b.n	8003340 <TxDString+0x4>
}
 800334c:	bd10      	pop	{r4, pc}

0800334e <infiniteTurn>:
/////////////// AX 12 ////////////////
//////////////////////////////////////

// infinite turn mode activation, see technical docu
// parameter: ID of motor
void infiniteTurn(unsigned char id) {
 800334e:	b510      	push	{r4, lr}
 8003350:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 8003352:	2106      	movs	r1, #6
 8003354:	2200      	movs	r2, #0
 8003356:	f000 fea7 	bl	80040a8 <dxl_write_word>
  int result =  dxl_get_result();
 800335a:	f000 fe1b 	bl	8003f94 <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
 800335e:	4620      	mov	r0, r4
 8003360:	2108      	movs	r1, #8
 8003362:	2200      	movs	r2, #0
 8003364:	f000 fea0 	bl	80040a8 <dxl_write_word>
  result =  dxl_get_result();
 8003368:	f000 fe14 	bl	8003f94 <dxl_get_result>
  TxDString("\nCM5 infinite rotation mode set\n");
}
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void infiniteTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 infinite rotation mode set\n");
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <infiniteTurn+0x2a>)
 8003372:	f7ff bfe3 	b.w	800333c <TxDString>
 8003376:	bf00      	nop
 8003378:	08005ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, lr}

0800337c <normalTurn>:
}


// infinite turn mode desactivation, see technical docu
// parameter: ID of motor
void normalTurn(unsigned char id) {
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 8003380:	2106      	movs	r1, #6
 8003382:	2200      	movs	r2, #0
 8003384:	f000 fe90 	bl	80040a8 <dxl_write_word>
  int result =  dxl_get_result();
 8003388:	f000 fe04 	bl	8003f94 <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
 800338c:	4620      	mov	r0, r4
 800338e:	2108      	movs	r1, #8
 8003390:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003394:	f000 fe88 	bl	80040a8 <dxl_write_word>
  result =  dxl_get_result();
 8003398:	f000 fdfc 	bl	8003f94 <dxl_get_result>
  TxDString("\nCM5 normal rotation mode set\n");
}
 800339c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void normalTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 normal rotation mode set\n");
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <normalTurn+0x2c>)
 80033a2:	f7ff bfcb 	b.w	800333c <TxDString>
 80033a6:	bf00      	nop
 80033a8:	08005f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, lr}

080033ac <PrintCommStatus>:


// Print communication result
void PrintCommStatus(int CommStatus)
{
  switch(CommStatus)
 80033ac:	3802      	subs	r0, #2
 80033ae:	2805      	cmp	r0, #5
 80033b0:	d810      	bhi.n	80033d4 <PrintCommStatus+0x28>
 80033b2:	e8df f000 	tbb	[pc, r0]
 80033b6:	09050703 	stmdbeq	r5, {r0, r1, r8, r9, sl}
 80033ba:	48070d0b 	stmdami	r7, {r0, r1, r3, r8, sl, fp}
    {
    case COMM_TXFAIL:
      TxDString("COMM_TXFAIL: Failed transmit instruction packet!\n");
 80033be:	e00a      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_TXERROR:
      TxDString("COMM_TXERROR: Incorrect instruction packet!\n");
 80033c0:	4807      	ldr	r0, [pc, #28]	; (80033e0 <PrintCommStatus+0x34>)
 80033c2:	e008      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXFAIL:
      TxDString("COMM_RXFAIL: Failed get status packet from device!\n");
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <PrintCommStatus+0x38>)
 80033c6:	e006      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXWAITING:
      TxDString("COMM_RXWAITING: Now recieving status packet!\n");
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <PrintCommStatus+0x3c>)
 80033ca:	e004      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXTIMEOUT:
      TxDString("COMM_RXTIMEOUT: There is no status packet!\n");
 80033cc:	4807      	ldr	r0, [pc, #28]	; (80033ec <PrintCommStatus+0x40>)
 80033ce:	e002      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXCORRUPT:
      TxDString("COMM_RXCORRUPT: Incorrect status packet!\n");
 80033d0:	4807      	ldr	r0, [pc, #28]	; (80033f0 <PrintCommStatus+0x44>)
 80033d2:	e000      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    default:
      TxDString("This is unknown error code!\n");
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <PrintCommStatus+0x48>)
 80033d6:	f7ff bfb1 	b.w	800333c <TxDString>
 80033da:	bf00      	nop
 80033dc:	08005f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, lr}
 80033e0:	08005f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, ip, lr}
 80033e4:	08005f7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 80033e8:	08005fb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, r9, sl, fp, ip, lr}
 80033ec:	08005fe1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80033f0:	0800600d 	stmdaeq	r0, {r0, r2, r3, sp, lr}
 80033f4:	08006037 	stmdaeq	r0, {r0, r1, r2, r4, r5, sp, lr}

080033f8 <PrintErrorCode>:
    }
}

// Print error bit of status packet
void PrintErrorCode()
{
 80033f8:	b508      	push	{r3, lr}
  if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 fde8 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003400:	2801      	cmp	r0, #1
 8003402:	d102      	bne.n	800340a <PrintErrorCode+0x12>
    TxDString("Input voltage error!\n");
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <PrintErrorCode+0x78>)
 8003406:	f7ff ff99 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 800340a:	2002      	movs	r0, #2
 800340c:	f000 fde0 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003410:	2801      	cmp	r0, #1
 8003412:	d102      	bne.n	800341a <PrintErrorCode+0x22>
    TxDString("Angle limit error!\n");
 8003414:	4817      	ldr	r0, [pc, #92]	; (8003474 <PrintErrorCode+0x7c>)
 8003416:	f7ff ff91 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 800341a:	2004      	movs	r0, #4
 800341c:	f000 fdd8 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003420:	2801      	cmp	r0, #1
 8003422:	d102      	bne.n	800342a <PrintErrorCode+0x32>
    TxDString("Overheat error!\n");
 8003424:	4814      	ldr	r0, [pc, #80]	; (8003478 <PrintErrorCode+0x80>)
 8003426:	f7ff ff89 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 800342a:	2008      	movs	r0, #8
 800342c:	f000 fdd0 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003430:	2801      	cmp	r0, #1
 8003432:	d102      	bne.n	800343a <PrintErrorCode+0x42>
    TxDString("Out of range error!\n");
 8003434:	4811      	ldr	r0, [pc, #68]	; (800347c <PrintErrorCode+0x84>)
 8003436:	f7ff ff81 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 800343a:	2010      	movs	r0, #16
 800343c:	f000 fdc8 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003440:	2801      	cmp	r0, #1
 8003442:	d102      	bne.n	800344a <PrintErrorCode+0x52>
    TxDString("Checksum error!\n");
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <PrintErrorCode+0x88>)
 8003446:	f7ff ff79 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 800344a:	2020      	movs	r0, #32
 800344c:	f000 fdc0 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003450:	2801      	cmp	r0, #1
 8003452:	d102      	bne.n	800345a <PrintErrorCode+0x62>
    TxDString("Overload error!\n");
 8003454:	480b      	ldr	r0, [pc, #44]	; (8003484 <PrintErrorCode+0x8c>)
 8003456:	f7ff ff71 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 800345a:	2040      	movs	r0, #64	; 0x40
 800345c:	f000 fdb8 	bl	8003fd0 <dxl_get_rxpacket_error>
 8003460:	2801      	cmp	r0, #1
 8003462:	d104      	bne.n	800346e <PrintErrorCode+0x76>
    TxDString("Instruction code error!\n");
}
 8003464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    TxDString("Overload error!\n");

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
 8003468:	4807      	ldr	r0, [pc, #28]	; (8003488 <PrintErrorCode+0x90>)
 800346a:	f7ff bf67 	b.w	800333c <TxDString>
 800346e:	bd08      	pop	{r3, pc}
 8003470:	08006054 	stmdaeq	r0, {r2, r4, r6, sp, lr}
 8003474:	0800606a 	stmdaeq	r0, {r1, r3, r5, r6, sp, lr}
 8003478:	0800607e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sp, lr}
 800347c:	0800608f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sp, lr}
 8003480:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
 8003484:	080060b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sp, lr}
 8003488:	080060c6 	stmdaeq	r0, {r1, r2, r6, r7, sp, lr}

0800348c <TxDByte16>:
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
}

void TxDByte16(byte bSentData)
{
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 8003490:	0903      	lsrs	r3, r0, #4
 8003492:	f103 0030 	add.w	r0, r3, #48	; 0x30
  if (bTmp > '9')
 8003496:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 8003498:	bf88      	it	hi
 800349a:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 800349e:	f004 040f 	and.w	r4, r4, #15
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034a2:	f7ff ff3d 	bl	8003320 <TxDByte_PC>
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 80034a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
  if (bTmp > '9')
 80034aa:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 80034ac:	bf88      	it	hi
 80034ae:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
  TxDByte_PC(bTmp);
}
 80034b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bTmp += 7;
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034b6:	f7ff bf33 	b.w	8003320 <TxDByte_PC>

080034ba <TxDWord16>:
  while (*bData)
    TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
 80034ba:	b510      	push	{r4, lr}
 80034bc:	4604      	mov	r4, r0
  TxDByte16((wSentData >> 8) & 0xff);
 80034be:	0a00      	lsrs	r0, r0, #8
 80034c0:	f7ff ffe4 	bl	800348c <TxDByte16>
  TxDByte16(wSentData & 0xff);
 80034c4:	b2e0      	uxtb	r0, r4
}
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void TxDWord16(word wSentData)
{
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
 80034ca:	f7ff bfdf 	b.w	800348c <TxDByte16>

080034ce <setSpeed>:
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
  int order;
  if(speed >= 0)
 80034ce:	1e0a      	subs	r2, r1, #0
// set rotation speed of a single motor, only works in infinite turn mode!
// speed is an integer between -1023 and 1023
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
 80034d0:	b510      	push	{r4, lr}
  int order;
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
 80034d2:	bfb8      	it	lt
 80034d4:	f5c2 6280 	rsblt	r2, r2, #1024	; 0x400
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
 80034d8:	2120      	movs	r1, #32
 80034da:	f000 fde5 	bl	80040a8 <dxl_write_word>
  int result =  dxl_get_result();
 80034de:	f000 fd59 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80034e2:	2801      	cmp	r0, #1
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
  int result =  dxl_get_result();
 80034e4:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80034e6:	d00a      	beq.n	80034fe <setSpeed+0x30>
    {
      TxDString("problem, code=");
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <setSpeed+0x32>)
 80034ea:	f7ff ff27 	bl	800333c <TxDString>
      TxDWord16(result);
 80034ee:	b2a0      	uxth	r0, r4
 80034f0:	f7ff ffe3 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("problem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <setSpeed+0x36>)
 80034fa:	f7ff bf1f 	b.w	800333c <TxDString>
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	080060f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sp, lr}
 8003504:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003508 <setAngle>:

// move motor to a given angle, only works when nOt in infinite turn mode
// parameter motor: ID of motor
// parameter: angle is an integer between -1023 and 1023
// no angle should be between 300 and 360 degrees
void setAngle(unsigned char id, int angle, int speed) {
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	460c      	mov	r4, r1
 800350c:	4605      	mov	r5, r0
  setSpeed(id, speed);
 800350e:	4611      	mov	r1, r2
 8003510:	f7ff ffdd 	bl	80034ce <setSpeed>
  int angle_norm;

  if (angle >=0)
 8003514:	2c00      	cmp	r4, #0
    angle_norm = angle;

  else
    angle_norm = 1024 + angle;
 8003516:	bfb8      	it	lt
 8003518:	f504 6480 	addlt.w	r4, r4, #1024	; 0x400

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
 800351c:	4622      	mov	r2, r4
 800351e:	4628      	mov	r0, r5
 8003520:	211e      	movs	r1, #30
 8003522:	f000 fdc1 	bl	80040a8 <dxl_write_word>
  int result =  dxl_get_result();
 8003526:	f000 fd35 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800352a:	2801      	cmp	r0, #1

  else
    angle_norm = 1024 + angle;

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
  int result =  dxl_get_result();
 800352c:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800352e:	d00a      	beq.n	8003546 <setAngle+0x3e>
    {
      TxDString("\nproblem, code==");
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <setAngle+0x40>)
 8003532:	f7ff ff03 	bl	800333c <TxDString>
      TxDWord16(result);
 8003536:	b2a0      	uxth	r0, r4
 8003538:	f7ff ffbf 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 800353c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <setAngle+0x44>)
 8003542:	f7ff befb 	b.w	800333c <TxDString>
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	080060e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, lr}
 800354c:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003550 <lightOn>:
}


// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
 8003550:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
 8003552:	2119      	movs	r1, #25
 8003554:	2201      	movs	r2, #1
 8003556:	f000 fd7d 	bl	8004054 <dxl_write_byte>
  int result =  dxl_get_result();
 800355a:	f000 fd1b 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800355e:	2801      	cmp	r0, #1

// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
  int result =  dxl_get_result();
 8003560:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003562:	d00a      	beq.n	800357a <lightOn+0x2a>
    {
      TxDString("\nproblem, code==");
 8003564:	4805      	ldr	r0, [pc, #20]	; (800357c <lightOn+0x2c>)
 8003566:	f7ff fee9 	bl	800333c <TxDString>
      TxDWord16(result);
 800356a:	b2a0      	uxth	r0, r4
 800356c:	f7ff ffa5 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <lightOn+0x30>)
 8003576:	f7ff bee1 	b.w	800333c <TxDString>
 800357a:	bd10      	pop	{r4, pc}
 800357c:	080060e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, lr}
 8003580:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003584 <lightOff>:
    }
}

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
 8003584:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
 8003586:	2119      	movs	r1, #25
 8003588:	2200      	movs	r2, #0
 800358a:	f000 fd63 	bl	8004054 <dxl_write_byte>
  int result =  dxl_get_result();
 800358e:	f000 fd01 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003592:	2801      	cmp	r0, #1

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
  int result =  dxl_get_result();
 8003594:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003596:	d00a      	beq.n	80035ae <lightOff+0x2a>
    {
      TxDString("\nproblem, code==");
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <lightOff+0x2c>)
 800359a:	f7ff fecf 	bl	800333c <TxDString>
      TxDWord16(result);
 800359e:	b2a0      	uxth	r0, r4
 80035a0:	f7ff ff8b 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80035a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <lightOff+0x30>)
 80035aa:	f7ff bec7 	b.w	800333c <TxDString>
 80035ae:	bd10      	pop	{r4, pc}
 80035b0:	080060e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, lr}
 80035b4:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

080035b8 <getSpeed>:

// returns the current motor's speed
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
 80035b8:	b510      	push	{r4, lr}
 80035ba:	460c      	mov	r4, r1
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
 80035bc:	2120      	movs	r1, #32
 80035be:	f000 fd5b 	bl	8004078 <dxl_read_word>
 80035c2:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 80035c4:	f000 fce6 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80035c8:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
  int result =  dxl_get_result();
 80035ca:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80035cc:	d00a      	beq.n	80035e4 <getSpeed+0x2c>
    {
      TxDString("\nproblem, code=");
 80035ce:	4806      	ldr	r0, [pc, #24]	; (80035e8 <getSpeed+0x30>)
 80035d0:	f7ff feb4 	bl	800333c <TxDString>
      TxDWord16(result);
 80035d4:	b2a0      	uxth	r0, r4
 80035d6:	f7ff ff70 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80035da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80035de:	4803      	ldr	r0, [pc, #12]	; (80035ec <getSpeed+0x34>)
 80035e0:	f7ff beac 	b.w	800333c <TxDString>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 80035ec:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

080035f0 <getAngle>:

// returns the current motor's angle,  infinite turn must be disabled to use this function
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
 80035f0:	b510      	push	{r4, lr}
 80035f2:	460c      	mov	r4, r1
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
 80035f4:	2124      	movs	r1, #36	; 0x24
 80035f6:	f000 fd3f 	bl	8004078 <dxl_read_word>
 80035fa:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 80035fc:	f000 fcca 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003600:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
  int result =  dxl_get_result();
 8003602:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003604:	d00a      	beq.n	800361c <getAngle+0x2c>
    {
      TxDString("\nproblem, code=");
 8003606:	4806      	ldr	r0, [pc, #24]	; (8003620 <getAngle+0x30>)
 8003608:	f7ff fe98 	bl	800333c <TxDString>
      TxDWord16(result);
 800360c:	b2a0      	uxth	r0, r4
 800360e:	f7ff ff54 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003616:	4803      	ldr	r0, [pc, #12]	; (8003624 <getAngle+0x34>)
 8003618:	f7ff be90 	b.w	800333c <TxDString>
 800361c:	bd10      	pop	{r4, pc}
 800361e:	bf00      	nop
 8003620:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 8003624:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003628 <checkObstacle>:
/////////////////////////////////////////////////////

// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
 8003628:	b510      	push	{r4, lr}
 800362a:	460c      	mov	r4, r1
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
 800362c:	2120      	movs	r1, #32
 800362e:	f000 fcfd 	bl	800402c <dxl_read_byte>
 8003632:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 8003634:	f000 fcae 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003638:	2801      	cmp	r0, #1
// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
  int result =  dxl_get_result();
 800363a:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800363c:	d00a      	beq.n	8003654 <checkObstacle+0x2c>
    {
      TxDString("\nproblem, code=");
 800363e:	4806      	ldr	r0, [pc, #24]	; (8003658 <checkObstacle+0x30>)
 8003640:	f7ff fe7c 	bl	800333c <TxDString>
      TxDWord16(result);
 8003644:	b2a0      	uxth	r0, r4
 8003646:	f7ff ff38 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }

}
 800364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 800364e:	4803      	ldr	r0, [pc, #12]	; (800365c <checkObstacle+0x34>)
 8003650:	f7ff be74 	b.w	800333c <TxDString>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 800365c:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003660 <checkLuminosity>:


// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
 8003660:	b510      	push	{r4, lr}
 8003662:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
 8003664:	2121      	movs	r1, #33	; 0x21
 8003666:	f000 fce1 	bl	800402c <dxl_read_byte>
 800366a:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 800366c:	f000 fc92 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003670:	2801      	cmp	r0, #1
// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
   int result =  dxl_get_result();
 8003672:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003674:	d00a      	beq.n	800368c <checkLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 8003676:	4806      	ldr	r0, [pc, #24]	; (8003690 <checkLuminosity+0x30>)
 8003678:	f7ff fe60 	bl	800333c <TxDString>
       TxDWord16(result);
 800367c:	b2a0      	uxth	r0, r4
 800367e:	f7ff ff1c 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }

}
 8003682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003686:	4803      	ldr	r0, [pc, #12]	; (8003694 <checkLuminosity+0x34>)
 8003688:	f7ff be58 	b.w	800333c <TxDString>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	bf00      	nop
 8003690:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 8003694:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003698 <leftInfraRed>:

}
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
 8003698:	b510      	push	{r4, lr}
 800369a:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
 800369c:	211a      	movs	r1, #26
 800369e:	f000 fcc5 	bl	800402c <dxl_read_byte>
 80036a2:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 80036a4:	f000 fc76 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80036a8:	2801      	cmp	r0, #1
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
  int result =  dxl_get_result();
 80036aa:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80036ac:	d00a      	beq.n	80036c4 <leftInfraRed+0x2c>
    {
      TxDString("\nproblem, code=");
 80036ae:	4806      	ldr	r0, [pc, #24]	; (80036c8 <leftInfraRed+0x30>)
 80036b0:	f7ff fe44 	bl	800333c <TxDString>
      TxDWord16(result);
 80036b4:	b2a0      	uxth	r0, r4
 80036b6:	f7ff ff00 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80036ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80036be:	4803      	ldr	r0, [pc, #12]	; (80036cc <leftInfraRed+0x34>)
 80036c0:	f7ff be3c 	b.w	800333c <TxDString>
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	bf00      	nop
 80036c8:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 80036cc:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

080036d0 <centerInfraRed>:
}

// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
 80036d0:	b510      	push	{r4, lr}
 80036d2:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
 80036d4:	211b      	movs	r1, #27
 80036d6:	f000 fca9 	bl	800402c <dxl_read_byte>
 80036da:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 80036dc:	f000 fc5a 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80036e0:	2801      	cmp	r0, #1
// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
   int result =  dxl_get_result();
 80036e2:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80036e4:	d00a      	beq.n	80036fc <centerInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 80036e6:	4806      	ldr	r0, [pc, #24]	; (8003700 <centerInfraRed+0x30>)
 80036e8:	f7ff fe28 	bl	800333c <TxDString>
       TxDWord16(result);
 80036ec:	b2a0      	uxth	r0, r4
 80036ee:	f7ff fee4 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
    }
}
 80036f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80036f6:	4803      	ldr	r0, [pc, #12]	; (8003704 <centerInfraRed+0x34>)
 80036f8:	f7ff be20 	b.w	800333c <TxDString>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 8003704:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003708 <rightInfraRed>:
}

// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
 8003708:	b510      	push	{r4, lr}
 800370a:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
 800370c:	211c      	movs	r1, #28
 800370e:	f000 fc8d 	bl	800402c <dxl_read_byte>
 8003712:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003714:	f000 fc3e 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003718:	2801      	cmp	r0, #1
// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
   int result =  dxl_get_result();
 800371a:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 800371c:	d00a      	beq.n	8003734 <rightInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 800371e:	4806      	ldr	r0, [pc, #24]	; (8003738 <rightInfraRed+0x30>)
 8003720:	f7ff fe0c 	bl	800333c <TxDString>
       TxDWord16(result);
 8003724:	b2a0      	uxth	r0, r4
 8003726:	f7ff fec8 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 800372a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800372e:	4803      	ldr	r0, [pc, #12]	; (800373c <rightInfraRed+0x34>)
 8003730:	f7ff be04 	b.w	800333c <TxDString>
 8003734:	bd10      	pop	{r4, pc}
 8003736:	bf00      	nop
 8003738:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 800373c:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003740 <leftLuminosity>:


// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
 8003740:	b510      	push	{r4, lr}
 8003742:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
 8003744:	211d      	movs	r1, #29
 8003746:	f000 fc71 	bl	800402c <dxl_read_byte>
 800374a:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 800374c:	f000 fc22 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003750:	2801      	cmp	r0, #1
// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
   int result =  dxl_get_result();
 8003752:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003754:	d00a      	beq.n	800376c <leftLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 8003756:	4806      	ldr	r0, [pc, #24]	; (8003770 <leftLuminosity+0x30>)
 8003758:	f7ff fdf0 	bl	800333c <TxDString>
       TxDWord16(result);
 800375c:	b2a0      	uxth	r0, r4
 800375e:	f7ff feac 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003766:	4803      	ldr	r0, [pc, #12]	; (8003774 <leftLuminosity+0x34>)
 8003768:	f7ff bde8 	b.w	800333c <TxDString>
 800376c:	bd10      	pop	{r4, pc}
 800376e:	bf00      	nop
 8003770:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 8003774:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003778 <centerLuminosity>:
}

// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
 8003778:	b510      	push	{r4, lr}
 800377a:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
 800377c:	211e      	movs	r1, #30
 800377e:	f000 fc55 	bl	800402c <dxl_read_byte>
 8003782:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003784:	f000 fc06 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003788:	2801      	cmp	r0, #1
// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
   int result =  dxl_get_result();
 800378a:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 800378c:	d00a      	beq.n	80037a4 <centerLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 800378e:	4806      	ldr	r0, [pc, #24]	; (80037a8 <centerLuminosity+0x30>)
 8003790:	f7ff fdd4 	bl	800333c <TxDString>
       TxDWord16(result);
 8003794:	b2a0      	uxth	r0, r4
 8003796:	f7ff fe90 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 800379a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800379e:	4803      	ldr	r0, [pc, #12]	; (80037ac <centerLuminosity+0x34>)
 80037a0:	f7ff bdcc 	b.w	800333c <TxDString>
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 80037ac:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

080037b0 <rightLuminosity>:
}

// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
 80037b0:	b510      	push	{r4, lr}
 80037b2:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
 80037b4:	211f      	movs	r1, #31
 80037b6:	f000 fc39 	bl	800402c <dxl_read_byte>
 80037ba:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 80037bc:	f000 fbea 	bl	8003f94 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80037c0:	2801      	cmp	r0, #1
// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
  int result =  dxl_get_result();
 80037c2:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80037c4:	d00a      	beq.n	80037dc <rightLuminosity+0x2c>
    {
      TxDString("\nproblem, code=");
 80037c6:	4806      	ldr	r0, [pc, #24]	; (80037e0 <rightLuminosity+0x30>)
 80037c8:	f7ff fdb8 	bl	800333c <TxDString>
      TxDWord16(result);
 80037cc:	b2a0      	uxth	r0, r4
 80037ce:	f7ff fe74 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80037d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80037d6:	4803      	ldr	r0, [pc, #12]	; (80037e4 <rightLuminosity+0x34>)
 80037d8:	f7ff bdb0 	b.w	800333c <TxDString>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	bf00      	nop
 80037e0:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 80037e4:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

080037e8 <dataSound>:
}


// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
 80037e8:	b510      	push	{r4, lr}
 80037ea:	460c      	mov	r4, r1
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
 80037ec:	2123      	movs	r1, #35	; 0x23
 80037ee:	f000 fc43 	bl	8004078 <dxl_read_word>
 80037f2:	6020      	str	r0, [r4, #0]
   int result =  dxl_get_result();
 80037f4:	f000 fbce 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80037f8:	2801      	cmp	r0, #1

// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
   int result =  dxl_get_result();
 80037fa:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80037fc:	d00a      	beq.n	8003814 <dataSound+0x2c>
     {
       TxDString("\nproblem, code=");
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <dataSound+0x30>)
 8003800:	f7ff fd9c 	bl	800333c <TxDString>
       TxDWord16(result);
 8003804:	b2a0      	uxth	r0, r4
 8003806:	f7ff fe58 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 800380a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800380e:	4803      	ldr	r0, [pc, #12]	; (800381c <dataSound+0x34>)
 8003810:	f7ff bd94 	b.w	800333c <TxDString>
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 800381c:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003820 <noteBuzz>:
     }
}


//helper function
void noteBuzz(unsigned char sensor, int note) {
 8003820:	b510      	push	{r4, lr}
 8003822:	460a      	mov	r2, r1
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
 8003824:	2128      	movs	r1, #40	; 0x28
 8003826:	f000 fc15 	bl	8004054 <dxl_write_byte>
   int result =  dxl_get_result();
 800382a:	f000 fbb3 	bl	8003f94 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 800382e:	2801      	cmp	r0, #1


//helper function
void noteBuzz(unsigned char sensor, int note) {
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
   int result =  dxl_get_result();
 8003830:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003832:	d00a      	beq.n	800384a <noteBuzz+0x2a>
     {
       TxDString("\nproblem, code=");
 8003834:	4805      	ldr	r0, [pc, #20]	; (800384c <noteBuzz+0x2c>)
 8003836:	f7ff fd81 	bl	800333c <TxDString>
       TxDWord16(result);
 800383a:	b2a0      	uxth	r0, r4
 800383c:	f7ff fe3d 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003844:	4802      	ldr	r0, [pc, #8]	; (8003850 <noteBuzz+0x30>)
 8003846:	f7ff bd79 	b.w	800333c <TxDString>
 800384a:	bd10      	pop	{r4, pc}
 800384c:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
 8003850:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}

08003854 <timeBuzz>:
     }
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4605      	mov	r5, r0
 8003858:	460c      	mov	r4, r1
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
  {
    dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerTime, time) ;
 800385a:	4628      	mov	r0, r5
 800385c:	2129      	movs	r1, #41	; 0x29
 800385e:	4622      	mov	r2, r4
 8003860:	f000 fbf8 	bl	8004054 <dxl_write_byte>
    result =  dxl_get_result();
 8003864:	f000 fb96 	bl	8003f94 <dxl_get_result>
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
 8003868:	2801      	cmp	r0, #1
 800386a:	d1f6      	bne.n	800385a <timeBuzz+0x6>
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
    }
}
 800386c:	bd38      	pop	{r3, r4, r5, pc}

0800386e <Timer_Configuration>:
  USART_SendData(USART3,bTxdData);
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}

void Timer_Configuration(void)
{
 800386e:	b510      	push	{r4, lr}
 8003870:	b088      	sub	sp, #32
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8003872:	a801      	add	r0, sp, #4
 8003874:	f001 fd29 	bl	80052ca <TIM_TimeBaseStructInit>
  TIM_OCStructInit(&TIM_OCInitStructure);
 8003878:	a804      	add	r0, sp, #16
 800387a:	f001 fd2f 	bl	80052dc <TIM_OCStructInit>

  TIM_DeInit(TIM2);
 800387e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003882:	f001 fb9b 	bl	8004fbc <TIM_DeInit>

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 8003886:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800388a:	2400      	movs	r4, #0
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800388c:	a901      	add	r1, sp, #4
 800388e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_OCStructInit(&TIM_OCInitStructure);

  TIM_DeInit(TIM2);

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 8003892:	f8ad 3008 	strh.w	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003896:	f8ad 4004 	strh.w	r4, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800389a:	f8ad 400a 	strh.w	r4, [sp, #10]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800389e:	f8ad 4006 	strh.w	r4, [sp, #6]

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80038a2:	f001 fbef 	bl	8005084 <TIM_TimeBaseInit>

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 80038a6:	2201      	movs	r2, #1
 80038a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038ac:	f240 21d2 	movw	r1, #722	; 0x2d2
 80038b0:	f001 fdb0 	bl	8005414 <TIM_PrescalerConfig>

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <Timer_Configuration+0x8a>)

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80038b6:	a904      	add	r1, sp, #16

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80038b8:	881b      	ldrh	r3, [r3, #0]

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80038ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80038be:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 80038c2:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 80038c6:	f8ad 4012 	strh.w	r4, [sp, #18]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80038ca:	f8ad 4018 	strh.w	r4, [sp, #24]
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80038ce:	f001 fbf7 	bl	80050c0 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 80038d2:	4621      	mov	r1, r4
 80038d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038d8:	f001 fe21 	bl	800551e <TIM_OC1PreloadConfig>

  /* TIM IT enable */
  TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 80038dc:	2201      	movs	r2, #1
 80038de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038e2:	2102      	movs	r1, #2
 80038e4:	f001 fd2f 	bl	8005346 <TIM_ITConfig>

  /* TIM2 enable counter */
  TIM_Cmd(TIM2, ENABLE);
 80038e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038ec:	2101      	movs	r1, #1
 80038ee:	f001 fd10 	bl	8005312 <TIM_Cmd>
}
 80038f2:	b008      	add	sp, #32
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	bf00      	nop
 80038f8:	20000000 	andcs	r0, r0, r0

080038fc <TimerInterrupt_1ms>:

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 80038fc:	b510      	push	{r4, lr}
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 80038fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003902:	2102      	movs	r1, #2
 8003904:	f002 f837 	bl	8005976 <TIM_GetITStatus>
 8003908:	b1e8      	cbz	r0, 8003946 <TimerInterrupt_1ms+0x4a>
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 800390a:	2102      	movs	r1, #2
 800390c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003910:	f002 f83c 	bl	800598c <TIM_ClearITPendingBit>

      capture = TIM_GetCapture1(TIM2);
 8003914:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003918:	f002 f810 	bl	800593c <TIM_GetCapture1>
 800391c:	4c0a      	ldr	r4, [pc, #40]	; (8003948 <TimerInterrupt_1ms+0x4c>)
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <TimerInterrupt_1ms+0x50>)
{
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);

      capture = TIM_GetCapture1(TIM2);
 8003920:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 8003924:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800392e:	4419      	add	r1, r3
 8003930:	b289      	uxth	r1, r1
 8003932:	f001 ff30 	bl	8005796 <TIM_SetCompare1>

      if(gw1msCounter > 0)
 8003936:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800393a:	b123      	cbz	r3, 8003946 <TimerInterrupt_1ms+0x4a>
	gw1msCounter--;
 800393c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003940:	3b01      	subs	r3, #1
 8003942:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8003946:	bd10      	pop	{r4, pc}
 8003948:	20000018 	andcs	r0, r0, r8, lsl r0
 800394c:	20000000 	andcs	r0, r0, r0

08003950 <RxD0Interrupt>:
    }
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 8003950:	b538      	push	{r3, r4, r5, lr}
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <RxD0Interrupt+0x28>)
 8003954:	f240 5125 	movw	r1, #1317	; 0x525
 8003958:	f002 f997 	bl	8005c8a <USART_GetITStatus>
 800395c:	b158      	cbz	r0, 8003976 <RxD0Interrupt+0x26>
    gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 800395e:	4d07      	ldr	r5, [pc, #28]	; (800397c <RxD0Interrupt+0x2c>)
 8003960:	4805      	ldr	r0, [pc, #20]	; (8003978 <RxD0Interrupt+0x28>)
 8003962:	782b      	ldrb	r3, [r5, #0]
 8003964:	b2dc      	uxtb	r4, r3
 8003966:	1c63      	adds	r3, r4, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	702b      	strb	r3, [r5, #0]
 800396c:	f002 f92c 	bl	8005bc8 <USART_ReceiveData>
 8003970:	442c      	add	r4, r5
 8003972:	b2c0      	uxtb	r0, r0
 8003974:	70a0      	strb	r0, [r4, #2]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	40013800 	andmi	r3, r1, r0, lsl #16
 800397c:	20000018 	andcs	r0, r0, r8, lsl r0

08003980 <SysTick_Configuration>:
}

void SysTick_Configuration(void)
{
 8003980:	b508      	push	{r3, lr}
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);
 8003982:	f242 3028 	movw	r0, #9000	; 0x2328
 8003986:	f001 faa9 	bl	8004edc <SysTick_SetReload>

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
}
 800398a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
 800398e:	2001      	movs	r0, #1
 8003990:	f001 babe 	b.w	8004f10 <SysTick_ITConfig>

08003994 <__ISR_DELAY>:
}

void __ISR_DELAY(void)
{
  if (gwTimingDelay != 0x00)
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <__ISR_DELAY+0x14>)
 8003996:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800399a:	b122      	cbz	r2, 80039a6 <__ISR_DELAY+0x12>
    gwTimingDelay--;
 800399c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80039a0:	3a01      	subs	r2, #1
 80039a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80039a6:	4770      	bx	lr
 80039a8:	20000018 	andcs	r0, r0, r8, lsl r0

080039ac <mDelay>:
}

void mDelay(u32 nTime)
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4604      	mov	r4, r0
  /* Enable the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Enable);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f001 fa99 	bl	8004ee8 <SysTick_CounterCmd>

  gwTimingDelay = nTime;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <mDelay+0x2c>)
 80039b8:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c

  while(gwTimingDelay != 0);
 80039bc:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80039c0:	2c00      	cmp	r4, #0
 80039c2:	d1fb      	bne.n	80039bc <mDelay+0x10>

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
 80039c4:	f06f 0001 	mvn.w	r0, #1
 80039c8:	f001 fa8e 	bl	8004ee8 <SysTick_CounterCmd>
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 80039cc:	4620      	mov	r0, r4
}
 80039ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(gwTimingDelay != 0);

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 80039d2:	f001 ba89 	b.w	8004ee8 <SysTick_CounterCmd>
 80039d6:	bf00      	nop
 80039d8:	20000018 	andcs	r0, r0, r8, lsl r0

080039dc <buzzWithDelay>:
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	4605      	mov	r5, r0
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 80039e2:	21fe      	movs	r1, #254	; 0xfe
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 80039e4:	4616      	mov	r6, r2
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 80039e6:	f7ff ff35 	bl	8003854 <timeBuzz>
  noteBuzz(sensor, note);
 80039ea:	4621      	mov	r1, r4
 80039ec:	4628      	mov	r0, r5
 80039ee:	f7ff ff17 	bl	8003820 <noteBuzz>

  for (k=0; k<time; k++) {
 80039f2:	2400      	movs	r4, #0
 80039f4:	42b4      	cmp	r4, r6
 80039f6:	da04      	bge.n	8003a02 <buzzWithDelay+0x26>
       mDelay(1) ;
 80039f8:	2001      	movs	r0, #1
 80039fa:	f7ff ffd7 	bl	80039ac <mDelay>
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
  noteBuzz(sensor, note);

  for (k=0; k<time; k++) {
 80039fe:	3401      	adds	r4, #1
 8003a00:	e7f8      	b.n	80039f4 <buzzWithDelay+0x18>
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 8003a02:	4628      	mov	r0, r5
  return ;

}
 8003a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  for (k=0; k<time; k++) {
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f7ff bf23 	b.w	8003854 <timeBuzz>

08003a0e <init_music>:
}



// delay ->  
void init_music() { 
 8003a0e:	b508      	push	{r3, lr}
    buzzWithDelay(SENSOR, 22, 250);
 8003a10:	2116      	movs	r1, #22
 8003a12:	22fa      	movs	r2, #250	; 0xfa
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	f7ff ffe1 	bl	80039dc <buzzWithDelay>
    mDelay(250);
 8003a1a:	20fa      	movs	r0, #250	; 0xfa
 8003a1c:	f7ff ffc6 	bl	80039ac <mDelay>
    buzzWithDelay(SENSOR, 24, 250);
 8003a20:	2064      	movs	r0, #100	; 0x64
 8003a22:	2118      	movs	r1, #24
 8003a24:	22fa      	movs	r2, #250	; 0xfa
 8003a26:	f7ff ffd9 	bl	80039dc <buzzWithDelay>
    buzzWithDelay(SENSOR, 20, 250);
 8003a2a:	2114      	movs	r1, #20
 8003a2c:	22fa      	movs	r2, #250	; 0xfa
 8003a2e:	2064      	movs	r0, #100	; 0x64
 8003a30:	f7ff ffd4 	bl	80039dc <buzzWithDelay>
    mDelay(250);
 8003a34:	20fa      	movs	r0, #250	; 0xfa
 8003a36:	f7ff ffb9 	bl	80039ac <mDelay>
    
    buzzWithDelay(SENSOR, 22, 1000);
 8003a3a:	2116      	movs	r1, #22
 8003a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a40:	2064      	movs	r0, #100	; 0x64
 8003a42:	f7ff ffcb 	bl	80039dc <buzzWithDelay>
    mDelay(500);
 8003a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a4a:	f7ff ffaf 	bl	80039ac <mDelay>
    buzzWithDelay(SENSOR, 25, 250);
 8003a4e:	2119      	movs	r1, #25
 8003a50:	22fa      	movs	r2, #250	; 0xfa
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	f7ff ffc2 	bl	80039dc <buzzWithDelay>
    mDelay(250);
 8003a58:	20fa      	movs	r0, #250	; 0xfa
 8003a5a:	f7ff ffa7 	bl	80039ac <mDelay>
    buzzWithDelay(SENSOR, 24, 250);
 8003a5e:	2064      	movs	r0, #100	; 0x64
 8003a60:	2118      	movs	r1, #24
 8003a62:	22fa      	movs	r2, #250	; 0xfa
 8003a64:	f7ff ffba 	bl	80039dc <buzzWithDelay>
    buzzWithDelay(SENSOR, 20, 250);
 8003a68:	2114      	movs	r1, #20
 8003a6a:	22fa      	movs	r2, #250	; 0xfa
 8003a6c:	2064      	movs	r0, #100	; 0x64
 8003a6e:	f7ff ffb5 	bl	80039dc <buzzWithDelay>
    mDelay(250);
 8003a72:	20fa      	movs	r0, #250	; 0xfa
 8003a74:	f7ff ff9a 	bl	80039ac <mDelay>
    buzzWithDelay(SENSOR, 22, 1000);
 8003a78:	2064      	movs	r0, #100	; 0x64
 8003a7a:	2116      	movs	r1, #22
 8003a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a80:	f7ff ffac 	bl	80039dc <buzzWithDelay>
    mDelay(500);
}
 8003a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    mDelay(250);
    buzzWithDelay(SENSOR, 24, 250);
    buzzWithDelay(SENSOR, 20, 250);
    mDelay(250);
    buzzWithDelay(SENSOR, 22, 1000);
    mDelay(500);
 8003a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a8c:	f7ff bf8e 	b.w	80039ac <mDelay>

08003a90 <init_lights>:
}


// delay -> 
void init_lights() {
 8003a90:	b510      	push	{r4, lr}
 8003a92:	2404      	movs	r4, #4
    int z ;
    for(z = 0; z < 4; z++)
    {   
        TxDString("Motor lights on...\n") ;
 8003a94:	4839      	ldr	r0, [pc, #228]	; (8003b7c <init_lights+0xec>)
 8003a96:	f7ff fc51 	bl	800333c <TxDString>
        lightOn(MOTOR_down_left);
 8003a9a:	2004      	movs	r0, #4
 8003a9c:	f7ff fd58 	bl	8003550 <lightOn>
        lightOn(MOTOR_down_right);
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	f7ff fd55 	bl	8003550 <lightOn>

        TxDString("blink!!\n") ;
 8003aa6:	4836      	ldr	r0, [pc, #216]	; (8003b80 <init_lights+0xf0>)
 8003aa8:	f7ff fc48 	bl	800333c <TxDString>
        GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003aac:	4835      	ldr	r0, [pc, #212]	; (8003b84 <init_lights+0xf4>)
 8003aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ab2:	f000 fe14 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aba:	4833      	ldr	r0, [pc, #204]	; (8003b88 <init_lights+0xf8>)
 8003abc:	f000 fe11 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003ac0:	2064      	movs	r0, #100	; 0x64
 8003ac2:	f7ff ff73 	bl	80039ac <mDelay>

        GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003ac6:	4830      	ldr	r0, [pc, #192]	; (8003b88 <init_lights+0xf8>)
 8003ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003acc:	f000 fe07 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ad4:	482c      	ldr	r0, [pc, #176]	; (8003b88 <init_lights+0xf8>)
 8003ad6:	f000 fe04 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003ada:	2064      	movs	r0, #100	; 0x64
 8003adc:	f7ff ff66 	bl	80039ac <mDelay>

        GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003ae0:	4829      	ldr	r0, [pc, #164]	; (8003b88 <init_lights+0xf8>)
 8003ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ae6:	f000 fdfa 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8003aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aee:	4826      	ldr	r0, [pc, #152]	; (8003b88 <init_lights+0xf8>)
 8003af0:	f000 fdf7 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003af4:	2064      	movs	r0, #100	; 0x64
 8003af6:	f7ff ff59 	bl	80039ac <mDelay>

        GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8003afa:	4823      	ldr	r0, [pc, #140]	; (8003b88 <init_lights+0xf8>)
 8003afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b00:	f000 fded 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
 8003b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b08:	481e      	ldr	r0, [pc, #120]	; (8003b84 <init_lights+0xf4>)
 8003b0a:	f000 fdea 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003b0e:	2064      	movs	r0, #100	; 0x64
 8003b10:	f7ff ff4c 	bl	80039ac <mDelay>

        GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);
 8003b14:	481b      	ldr	r0, [pc, #108]	; (8003b84 <init_lights+0xf4>)
 8003b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b1a:	f000 fde0 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);
 8003b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b22:	4818      	ldr	r0, [pc, #96]	; (8003b84 <init_lights+0xf4>)
 8003b24:	f000 fddd 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003b28:	2064      	movs	r0, #100	; 0x64
 8003b2a:	f7ff ff3f 	bl	80039ac <mDelay>

        GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);
 8003b2e:	4815      	ldr	r0, [pc, #84]	; (8003b84 <init_lights+0xf4>)
 8003b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b34:	f000 fdd3 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b3c:	4812      	ldr	r0, [pc, #72]	; (8003b88 <init_lights+0xf8>)
 8003b3e:	f000 fdd0 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003b42:	2064      	movs	r0, #100	; 0x64
 8003b44:	f7ff ff32 	bl	80039ac <mDelay>

        GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003b48:	480f      	ldr	r0, [pc, #60]	; (8003b88 <init_lights+0xf8>)
 8003b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4e:	f000 fdc6 	bl	80046de <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b56:	480b      	ldr	r0, [pc, #44]	; (8003b84 <init_lights+0xf4>)
 8003b58:	f000 fdc3 	bl	80046e2 <GPIO_ResetBits>
        mDelay(100);
 8003b5c:	2064      	movs	r0, #100	; 0x64
 8003b5e:	f7ff ff25 	bl	80039ac <mDelay>

        TxDString("Motor lights oFF...\n") ;
 8003b62:	480a      	ldr	r0, [pc, #40]	; (8003b8c <init_lights+0xfc>)
 8003b64:	f7ff fbea 	bl	800333c <TxDString>
        lightOff(MOTOR_down_left);
 8003b68:	2004      	movs	r0, #4
 8003b6a:	f7ff fd0b 	bl	8003584 <lightOff>
        lightOff(MOTOR_down_right);
 8003b6e:	2003      	movs	r0, #3
 8003b70:	f7ff fd08 	bl	8003584 <lightOff>


// delay -> 
void init_lights() {
    int z ;
    for(z = 0; z < 4; z++)
 8003b74:	3c01      	subs	r4, #1
 8003b76:	d18d      	bne.n	8003a94 <init_lights+0x4>

        TxDString("Motor lights oFF...\n") ;
        lightOff(MOTOR_down_left);
        lightOff(MOTOR_down_right);
    }
}
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	bf00      	nop
 8003b7c:	08006105 	stmdaeq	r0, {r0, r2, r8, sp, lr}
 8003b80:	08006119 	stmdaeq	r0, {r0, r3, r4, r8, sp, lr}
 8003b84:	40011000 	andmi	r1, r1, r0
 8003b88:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003b8c:	08006122 	stmdaeq	r0, {r1, r5, r8, sp, lr}

08003b90 <USART_Configuration>:
{
  USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 8003b90:	b530      	push	{r4, r5, lr}
 8003b92:	460d      	mov	r5, r1
 8003b94:	4604      	mov	r4, r0
 8003b96:	b085      	sub	sp, #20

  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);
 8003b98:	4668      	mov	r0, sp
 8003b9a:	f001 ff89 	bl	8005ab0 <USART_StructInit>


  USART_InitStructure.USART_BaudRate = baudrate;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003ba4:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003ba8:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003bac:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003bb0:	230c      	movs	r3, #12
  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);


  USART_InitStructure.USART_BaudRate = baudrate;
 8003bb2:	9500      	str	r5, [sp, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003bb4:	f8ad 300a 	strh.w	r3, [sp, #10]


  if( PORT == USART_DXL )
 8003bb8:	b98c      	cbnz	r4, 8003bde <USART_Configuration+0x4e>
    {
      USART_DeInit(USART1);
 8003bba:	4812      	ldr	r0, [pc, #72]	; (8003c04 <USART_Configuration+0x74>)
 8003bbc:	f001 feea 	bl	8005994 <USART_DeInit>
      mDelay(10);
 8003bc0:	200a      	movs	r0, #10
 8003bc2:	f7ff fef3 	bl	80039ac <mDelay>
      /* Configure the USART1 */
      USART_Init(USART1, &USART_InitStructure);
 8003bc6:	480f      	ldr	r0, [pc, #60]	; (8003c04 <USART_Configuration+0x74>)
 8003bc8:	4669      	mov	r1, sp
 8003bca:	f001 ff2d 	bl	8005a28 <USART_Init>

      /* Enable USART1 Receive and Transmit interrupts */
      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003bce:	480d      	ldr	r0, [pc, #52]	; (8003c04 <USART_Configuration+0x74>)
 8003bd0:	f240 5125 	movw	r1, #1317	; 0x525
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f001 ff98 	bl	8005b0a <USART_ITConfig>
      //USART_ITConfig(USART1, USART_IT_TC, ENABLE);

      /* Enable the USART1 */
      USART_Cmd(USART1, ENABLE);
 8003bda:	480a      	ldr	r0, [pc, #40]	; (8003c04 <USART_Configuration+0x74>)
 8003bdc:	e00c      	b.n	8003bf8 <USART_Configuration+0x68>
    }

  else if( PORT == USART_PC )
 8003bde:	2c02      	cmp	r4, #2
 8003be0:	d10d      	bne.n	8003bfe <USART_Configuration+0x6e>
    {
      USART_DeInit(USART3);
 8003be2:	4809      	ldr	r0, [pc, #36]	; (8003c08 <USART_Configuration+0x78>)
 8003be4:	f001 fed6 	bl	8005994 <USART_DeInit>
      mDelay(10);
 8003be8:	200a      	movs	r0, #10
 8003bea:	f7ff fedf 	bl	80039ac <mDelay>
      /* Configure the USART3 */
      USART_Init(USART3, &USART_InitStructure);
 8003bee:	4806      	ldr	r0, [pc, #24]	; (8003c08 <USART_Configuration+0x78>)
 8003bf0:	4669      	mov	r1, sp
 8003bf2:	f001 ff19 	bl	8005a28 <USART_Init>
      /* Enable USART3 Receive and Transmit interrupts */
      //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
      //USART_ITConfig(USART3, USART_IT_TC, ENABLE);

      /* Enable the USART3 */
      USART_Cmd(USART3, ENABLE);
 8003bf6:	4804      	ldr	r0, [pc, #16]	; (8003c08 <USART_Configuration+0x78>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	f001 ff7a 	bl	8005af2 <USART_Cmd>
    }
}
 8003bfe:	b005      	add	sp, #20
 8003c00:	bd30      	pop	{r4, r5, pc}
 8003c02:	bf00      	nop
 8003c04:	40013800 	andmi	r3, r1, r0, lsl #16
 8003c08:	40004800 	andmi	r4, r0, r0, lsl #16

08003c0c <init_config>:
*
*
********************************************************/

// DO NOT TOUCH
void init_config() {
 8003c0c:	b508      	push	{r3, lr}
    /* System Clocks Configuration */
    RCC_Configuration();
 8003c0e:	f7ff fa91 	bl	8003134 <RCC_Configuration>

    /* NVIC configuration */
    NVIC_Configuration();
 8003c12:	f7ff fad1 	bl	80031b8 <NVIC_Configuration>

    /* GPIO configuration */
    GPIO_Configuration();
 8003c16:	f7ff faf6 	bl	8003206 <GPIO_Configuration>

    SysTick_Configuration();
 8003c1a:	f7ff feb1 	bl	8003980 <SysTick_Configuration>

    Timer_Configuration();
 8003c1e:	f7ff fe26 	bl	800386e <Timer_Configuration>

    dxl_initialize( 0, 1 );
 8003c22:	2101      	movs	r1, #1
 8003c24:	2000      	movs	r0, #0
 8003c26:	f000 f897 	bl	8003d58 <dxl_initialize>
    USART_Configuration(USART_PC, Baudrate_PC);
 8003c2a:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <init_config+0x2c>)
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	6859      	ldr	r1, [r3, #4]
}
 8003c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SysTick_Configuration();

    Timer_Configuration();

    dxl_initialize( 0, 1 );
    USART_Configuration(USART_PC, Baudrate_PC);
 8003c34:	f7ff bfac 	b.w	8003b90 <USART_Configuration>
 8003c38:	20000000 	andcs	r0, r0, r0

08003c3c <USART1_Configuration>:
  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 8003c3c:	4601      	mov	r1, r0
  USART_Configuration(USART_DXL, baudrate);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7ff bfa6 	b.w	8003b90 <USART_Configuration>

08003c44 <StartDiscount>:
  SysTick_CounterCmd(SysTick_Counter_Clear);
}

void StartDiscount(s32 StartTime)
{
  gw1msCounter = StartTime;
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <StartDiscount+0x8>)
 8003c46:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 8003c4a:	4770      	bx	lr
 8003c4c:	20000018 	andcs	r0, r0, r8, lsl r0

08003c50 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
  // Check timeout
  // Return: 0 is false, 1 is true(timeout occurred)

  if(gw1msCounter == 0)
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <CheckTimeOut+0x10>)
 8003c52:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    return 1;
  else
    return 0;
}
 8003c56:	fab0 f080 	clz	r0, r0
 8003c5a:	0940      	lsrs	r0, r0, #5
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000018 	andcs	r0, r0, r8, lsl r0

08003c64 <NMIException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
 8003c64:	4770      	bx	lr

08003c66 <HardFaultException>:
void HardFaultException(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003c66:	e7fe      	b.n	8003c66 <HardFaultException>

08003c68 <MemManageException>:
void MemManageException(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003c68:	e7fe      	b.n	8003c68 <MemManageException>

08003c6a <BusFaultException>:
void BusFaultException(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003c6a:	e7fe      	b.n	8003c6a <BusFaultException>

08003c6c <UsageFaultException>:
void UsageFaultException(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003c6c:	e7fe      	b.n	8003c6c <UsageFaultException>

08003c6e <DebugMonitor>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
 8003c6e:	4770      	bx	lr

08003c70 <SVCHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
 8003c70:	4770      	bx	lr

08003c72 <PendSVC>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
 8003c72:	4770      	bx	lr

08003c74 <SysTickHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
	__ISR_DELAY();
 8003c74:	f7ff be8e 	b.w	8003994 <__ISR_DELAY>

08003c78 <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 8003c78:	4770      	bx	lr

08003c7a <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 8003c7a:	4770      	bx	lr

08003c7c <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8003c7c:	4770      	bx	lr

08003c7e <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8003c7e:	4770      	bx	lr

08003c80 <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 8003c80:	4770      	bx	lr

08003c82 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8003c82:	4770      	bx	lr

08003c84 <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8003c84:	4770      	bx	lr

08003c86 <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 8003c86:	4770      	bx	lr

08003c88 <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8003c88:	4770      	bx	lr

08003c8a <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8003c8a:	4770      	bx	lr

08003c8c <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8003c8c:	4770      	bx	lr

08003c8e <DMA1_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8003c8e:	4770      	bx	lr

08003c90 <DMA1_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8003c90:	4770      	bx	lr

08003c92 <DMA1_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8003c92:	4770      	bx	lr

08003c94 <DMA1_Channel4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 8003c94:	4770      	bx	lr

08003c96 <DMA1_Channel5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8003c96:	4770      	bx	lr

08003c98 <DMA1_Channel6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 8003c98:	4770      	bx	lr

08003c9a <DMA1_Channel7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8003c9a:	4770      	bx	lr

08003c9c <ADC1_2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8003c9c:	4770      	bx	lr

08003c9e <USB_HP_CAN_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 8003c9e:	4770      	bx	lr

08003ca0 <USB_LP_CAN_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003ca0:	4770      	bx	lr

08003ca2 <CAN_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8003ca2:	4770      	bx	lr

08003ca4 <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8003ca4:	4770      	bx	lr

08003ca6 <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8003ca6:	4770      	bx	lr

08003ca8 <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 8003ca8:	4770      	bx	lr

08003caa <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8003caa:	4770      	bx	lr

08003cac <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 8003cac:	4770      	bx	lr

08003cae <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8003cae:	4770      	bx	lr

08003cb0 <TIM2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
	TimerInterrupt_1ms();
 8003cb0:	f7ff be24 	b.w	80038fc <TimerInterrupt_1ms>

08003cb4 <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 8003cb4:	4770      	bx	lr

08003cb6 <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 8003cb6:	4770      	bx	lr

08003cb8 <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8003cb8:	4770      	bx	lr

08003cba <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8003cba:	4770      	bx	lr

08003cbc <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8003cbc:	4770      	bx	lr

08003cbe <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8003cbe:	4770      	bx	lr

08003cc0 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8003cc0:	4770      	bx	lr

08003cc2 <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8003cc2:	4770      	bx	lr

08003cc4 <USART1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
	RxD0Interrupt();
 8003cc4:	f7ff be44 	b.w	8003950 <RxD0Interrupt>

08003cc8 <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8003cc8:	4770      	bx	lr

08003cca <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8003cca:	4770      	bx	lr

08003ccc <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8003ccc:	4770      	bx	lr

08003cce <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8003cce:	4770      	bx	lr

08003cd0 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8003cd0:	4770      	bx	lr

08003cd2 <TIM8_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
 8003cd2:	4770      	bx	lr

08003cd4 <TIM8_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
 8003cd4:	4770      	bx	lr

08003cd6 <TIM8_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
 8003cd6:	4770      	bx	lr

08003cd8 <TIM8_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
 8003cd8:	4770      	bx	lr

08003cda <ADC3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
 8003cda:	4770      	bx	lr

08003cdc <FSMC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
 8003cdc:	4770      	bx	lr

08003cde <SDIO_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
 8003cde:	4770      	bx	lr

08003ce0 <TIM5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
 8003ce0:	4770      	bx	lr

08003ce2 <SPI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
 8003ce2:	4770      	bx	lr

08003ce4 <UART4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
 8003ce4:	4770      	bx	lr

08003ce6 <UART5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
 8003ce6:	4770      	bx	lr

08003ce8 <TIM6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
 8003ce8:	4770      	bx	lr

08003cea <TIM7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
 8003cea:	4770      	bx	lr

08003cec <DMA2_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
 8003cec:	4770      	bx	lr

08003cee <DMA2_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
 8003cee:	4770      	bx	lr

08003cf0 <DMA2_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
 8003cf0:	4770      	bx	lr

08003cf2 <DMA2_Channel4_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
 8003cf2:	4770      	bx	lr

08003cf4 <dxl_hal_open>:
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 8003cf4:	b508      	push	{r3, lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	f7ff ffa0 	bl	8003c3c <USART1_Configuration>
	return 1;
}
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	bd08      	pop	{r3, pc}

08003d00 <dxl_hal_close>:
void dxl_hal_close()
{
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 8003d00:	f7ff bac4 	b.w	800328c <DisableUSART1>

08003d04 <dxl_hal_clear>:

void dxl_hal_clear(void)
{
	// Clear communication buffer

	ClearBuffer256();
 8003d04:	f7ff bac8 	b.w	8003298 <ClearBuffer256>

08003d08 <dxl_hal_tx>:
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	460c      	mov	r4, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 8003d0e:	2300      	movs	r3, #0
 8003d10:	1c5d      	adds	r5, r3, #1
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	da04      	bge.n	8003d22 <dxl_hal_tx+0x1a>
		TxDByte_DXL(pPacket[i]);
 8003d18:	5cf0      	ldrb	r0, [r6, r3]
 8003d1a:	f7ff facf 	bl	80032bc <TxDByte_DXL>
 8003d1e:	462b      	mov	r3, r5
 8003d20:	e7f6      	b.n	8003d10 <dxl_hal_tx+0x8>

	return numPacket;
}
 8003d22:	4620      	mov	r0, r4
 8003d24:	bd70      	pop	{r4, r5, r6, pc}

08003d26 <dxl_hal_rx>:

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 8003d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d28:	4607      	mov	r7, r0
 8003d2a:	460e      	mov	r6, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003d2c:	2400      	movs	r4, #0
 8003d2e:	b2e5      	uxtb	r5, r4
 8003d30:	42b5      	cmp	r5, r6
 8003d32:	da07      	bge.n	8003d44 <dxl_hal_rx+0x1e>
	{
		if (CheckNewArrive())
 8003d34:	f7ff fab8 	bl	80032a8 <CheckNewArrive>
 8003d38:	3401      	adds	r4, #1
 8003d3a:	b120      	cbz	r0, 8003d46 <dxl_hal_rx+0x20>
			pPacket[i] =  RxDByte_DXL();
 8003d3c:	f7ff fae0 	bl	8003300 <RxDByte_DXL>
 8003d40:	5578      	strb	r0, [r7, r5]
 8003d42:	e7f4      	b.n	8003d2e <dxl_hal_rx+0x8>
 8003d44:	4635      	mov	r5, r6
		else
			return i;
	}
	return numPacket;
}
 8003d46:	4628      	mov	r0, r5
 8003d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d4a <dxl_hal_set_timeout>:
{
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8003d4a:	2364      	movs	r3, #100	; 0x64
 8003d4c:	4358      	muls	r0, r3
 8003d4e:	f7ff bf79 	b.w	8003c44 <StartDiscount>

08003d52 <dxl_hal_timeout>:
int dxl_hal_timeout(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 8003d52:	f7ff bf7d 	b.w	8003c50 <CheckTimeOut>
	...

08003d58 <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003d58:	b508      	push	{r3, lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <dxl_initialize+0x20>)


int dxl_initialize( int devIndex, int baudnum )
{
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
 8003d5c:	3101      	adds	r1, #1
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003d5e:	fb93 f1f1 	sdiv	r1, r3, r1
 8003d62:	f7ff ffc7 	bl	8003cf4 <dxl_hal_open>
 8003d66:	b128      	cbz	r0, 8003d74 <dxl_initialize+0x1c>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <dxl_initialize+0x24>)
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	6018      	str	r0, [r3, #0]
	giBusUsing = 0;
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <dxl_initialize+0x28>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]



	return 1;
}
 8003d74:	bd08      	pop	{r3, pc}
 8003d76:	bf00      	nop
 8003d78:	001e8480 	andseq	r8, lr, r0, lsl #9
 8003d7c:	20000014 	andcs	r0, r0, r4, lsl r0
 8003d80:	20000130 	andcs	r0, r0, r0, lsr r1

08003d84 <dxl_terminate>:

void dxl_terminate()
{
	dxl_hal_close();
 8003d84:	f7ff bfbc 	b.w	8003d00 <dxl_hal_close>

08003d88 <dxl_tx_packet>:
}

void dxl_tx_packet()
{
 8003d88:	b570      	push	{r4, r5, r6, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003d8a:	4c24      	ldr	r4, [pc, #144]	; (8003e1c <dxl_tx_packet+0x94>)
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d043      	beq.n	8003e1a <dxl_tx_packet+0x92>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003d92:	79e2      	ldrb	r2, [r4, #7]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003d94:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003d96:	2a98      	cmp	r2, #152	; 0x98
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003d98:	6023      	str	r3, [r4, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003d9a:	d905      	bls.n	8003da8 <dxl_tx_packet+0x20>
	{
		gbCommStatus = COMM_TXERROR;
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <dxl_tx_packet+0x98>)
 8003d9e:	2204      	movs	r2, #4
 8003da0:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	6023      	str	r3, [r4, #0]
		return;
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8003da8:	7a23      	ldrb	r3, [r4, #8]
 8003daa:	1e59      	subs	r1, r3, #1
 8003dac:	2905      	cmp	r1, #5
 8003dae:	d901      	bls.n	8003db4 <dxl_tx_packet+0x2c>
		&& gbInstructionPacket[INSTRUCTION] != INST_READ
		&& gbInstructionPacket[INSTRUCTION] != INST_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
 8003db0:	2b83      	cmp	r3, #131	; 0x83
 8003db2:	d1f3      	bne.n	8003d9c <dxl_tx_packet+0x14>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003db4:	23ff      	movs	r3, #255	; 0xff
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003db6:	2000      	movs	r0, #0
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003db8:	7123      	strb	r3, [r4, #4]
	gbInstructionPacket[1] = 0xff;
 8003dba:	7163      	strb	r3, [r4, #5]

void dxl_tx_packet()
{
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b2c1      	uxtb	r1, r0
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003dc0:	428a      	cmp	r2, r1
 8003dc2:	f100 0001 	add.w	r0, r0, #1
 8003dc6:	db04      	blt.n	8003dd2 <dxl_tx_packet+0x4a>
		checksum += gbInstructionPacket[i+2];
 8003dc8:	4421      	add	r1, r4
 8003dca:	7989      	ldrb	r1, [r1, #6]
 8003dcc:	440b      	add	r3, r1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e7f5      	b.n	8003dbe <dxl_tx_packet+0x36>
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003dd2:	43db      	mvns	r3, r3
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003dd4:	4d12      	ldr	r5, [pc, #72]	; (8003e20 <dxl_tx_packet+0x98>)
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003dd6:	4422      	add	r2, r4
 8003dd8:	71d3      	strb	r3, [r2, #7]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003dda:	682b      	ldr	r3, [r5, #0]
 8003ddc:	3b06      	subs	r3, #6
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d801      	bhi.n	8003de6 <dxl_tx_packet+0x5e>
	{




		dxl_hal_clear();
 8003de2:	f7ff ff8f 	bl	8003d04 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003de6:	79e4      	ldrb	r4, [r4, #7]
 8003de8:	4e0c      	ldr	r6, [pc, #48]	; (8003e1c <dxl_tx_packet+0x94>)
 8003dea:	3404      	adds	r4, #4
 8003dec:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003dee:	1d30      	adds	r0, r6, #4
 8003df0:	4621      	mov	r1, r4
 8003df2:	f7ff ff89 	bl	8003d08 <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8003df6:	b2c0      	uxtb	r0, r0
 8003df8:	4284      	cmp	r4, r0
 8003dfa:	d004      	beq.n	8003e06 <dxl_tx_packet+0x7e>
	{

		gbCommStatus = COMM_TXFAIL;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	602b      	str	r3, [r5, #0]
		giBusUsing = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	6033      	str	r3, [r6, #0]
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8003e06:	7a33      	ldrb	r3, [r6, #8]
 8003e08:	2b02      	cmp	r3, #2
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003e0a:	bf0a      	itet	eq
 8003e0c:	7ab0      	ldrbeq	r0, [r6, #10]
	else
		dxl_hal_set_timeout( 6 );
 8003e0e:	2006      	movne	r0, #6
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003e10:	3006      	addeq	r0, #6
	else
		dxl_hal_set_timeout( 6 );
 8003e12:	f7ff ff9a 	bl	8003d4a <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8003e16:	2300      	movs	r3, #0
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	20000130 	andcs	r0, r0, r0, lsr r1
 8003e20:	20000014 	andcs	r0, r0, r4, lsl r0

08003e24 <dxl_rx_packet>:
}

void dxl_rx_packet()
{
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8003e26:	4c51      	ldr	r4, [pc, #324]	; (8003f6c <dxl_rx_packet+0x148>)
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 809c 	beq.w	8003f68 <dxl_rx_packet+0x144>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 8003e30:	79a3      	ldrb	r3, [r4, #6]
 8003e32:	4e4f      	ldr	r6, [pc, #316]	; (8003f70 <dxl_rx_packet+0x14c>)
 8003e34:	2bfe      	cmp	r3, #254	; 0xfe
 8003e36:	d101      	bne.n	8003e3c <dxl_rx_packet+0x18>
	{
		gbCommStatus = COMM_RXSUCCESS;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e033      	b.n	8003ea4 <dxl_rx_packet+0x80>
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 8003e3c:	6833      	ldr	r3, [r6, #0]
 8003e3e:	b923      	cbnz	r3, 8003e4a <dxl_rx_packet+0x26>
	{
		gbRxGetLength = 0;
 8003e40:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
		gbRxPacketLength = 6;
 8003e44:	2306      	movs	r3, #6
 8003e46:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003e4a:	4d48      	ldr	r5, [pc, #288]	; (8003f6c <dxl_rx_packet+0x148>)
 8003e4c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003e50:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8003e54:	f105 07a6 	add.w	r7, r5, #166	; 0xa6
 8003e58:	18f8      	adds	r0, r7, r3
 8003e5a:	1ac9      	subs	r1, r1, r3
 8003e5c:	f7ff ff63 	bl	8003d26 <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003e60:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8003e64:	4418      	add	r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003e66:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003e6a:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 8003e6c:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003e6e:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if( gbRxGetLength < gbRxPacketLength )
 8003e72:	d91b      	bls.n	8003eac <dxl_rx_packet+0x88>
	{
		if( dxl_hal_timeout() == 1 )
 8003e74:	f7ff ff6d 	bl	8003d52 <dxl_hal_timeout>
 8003e78:	2801      	cmp	r0, #1
 8003e7a:	d117      	bne.n	8003eac <dxl_rx_packet+0x88>
		{


			if(gbRxGetLength == 0)
 8003e7c:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 8003e80:	b97b      	cbnz	r3, 8003ea2 <dxl_rx_packet+0x7e>
				gbCommStatus = COMM_RXTIMEOUT;
 8003e82:	2306      	movs	r3, #6
 8003e84:	e00e      	b.n	8003ea4 <dxl_rx_packet+0x80>
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 8003e86:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	}

	if( gbRxGetLength < gbRxPacketLength )
 8003e8a:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8003e8e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8003e92:	4d36      	ldr	r5, [pc, #216]	; (8003f6c <dxl_rx_packet+0x148>)
 8003e94:	428b      	cmp	r3, r1
 8003e96:	d84d      	bhi.n	8003f34 <dxl_rx_packet+0x110>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 8003e98:	79aa      	ldrb	r2, [r5, #6]
 8003e9a:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d032      	beq.n	8003f08 <dxl_rx_packet+0xe4>


			if(gbRxGetLength == 0)
				gbCommStatus = COMM_RXTIMEOUT;
			else
				gbCommStatus = COMM_RXCORRUPT;
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	6033      	str	r3, [r6, #0]
			giBusUsing = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6023      	str	r3, [r4, #0]
			return;
 8003eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003eac:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003eb0:	2200      	movs	r2, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003eb2:	1e48      	subs	r0, r1, #1
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003eb4:	f1a1 0e02 	sub.w	lr, r1, #2
 8003eb8:	b2d3      	uxtb	r3, r2
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003eba:	4283      	cmp	r3, r0
 8003ebc:	da09      	bge.n	8003ed2 <dxl_rx_packet+0xae>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8003ebe:	18e5      	adds	r5, r4, r3
 8003ec0:	f895 c0a6 	ldrb.w	ip, [r5, #166]	; 0xa6
 8003ec4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8003ec8:	d107      	bne.n	8003eda <dxl_rx_packet+0xb6>
 8003eca:	f895 50a7 	ldrb.w	r5, [r5, #167]	; 0xa7
 8003ece:	2dff      	cmp	r5, #255	; 0xff
 8003ed0:	d103      	bne.n	8003eda <dxl_rx_packet+0xb6>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0d9      	beq.n	8003e8a <dxl_rx_packet+0x66>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e008      	b.n	8003eec <dxl_rx_packet+0xc8>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003eda:	4573      	cmp	r3, lr
 8003edc:	d104      	bne.n	8003ee8 <dxl_rx_packet+0xc4>
 8003ede:	1825      	adds	r5, r4, r0
 8003ee0:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8003ee4:	2dff      	cmp	r5, #255	; 0xff
 8003ee6:	d0f4      	beq.n	8003ed2 <dxl_rx_packet+0xae>
 8003ee8:	3201      	adds	r2, #1
 8003eea:	e7e5      	b.n	8003eb8 <dxl_rx_packet+0x94>
 8003eec:	b2c2      	uxtb	r2, r0
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8003eee:	1acd      	subs	r5, r1, r3
 8003ef0:	42aa      	cmp	r2, r5
 8003ef2:	f100 0001 	add.w	r0, r0, #1
 8003ef6:	dac6      	bge.n	8003e86 <dxl_rx_packet+0x62>
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8003ef8:	18e5      	adds	r5, r4, r3
 8003efa:	4415      	add	r5, r2
 8003efc:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8003f00:	4422      	add	r2, r4
 8003f02:	f882 50a6 	strb.w	r5, [r2, #166]	; 0xa6
 8003f06:	e7f1      	b.n	8003eec <dxl_rx_packet+0xc8>
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003f08:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	b2db      	uxtb	r3, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003f10:	4299      	cmp	r1, r3
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003f12:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if( gbRxGetLength < gbRxPacketLength )
 8003f16:	d210      	bcs.n	8003f3a <dxl_rx_packet+0x116>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003f18:	1878      	adds	r0, r7, r1
 8003f1a:	1a59      	subs	r1, r3, r1
 8003f1c:	f7ff ff03 	bl	8003d26 <dxl_hal_rx>
		gbRxGetLength += nRead;
 8003f20:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 8003f24:	4418      	add	r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 8003f26:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003f2a:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 8003f2c:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003f2e:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
		if( gbRxGetLength < gbRxPacketLength )
 8003f32:	d902      	bls.n	8003f3a <dxl_rx_packet+0x116>
		gbRxGetLength -= i;		
	}

	if( gbRxGetLength < gbRxPacketLength )
	{
		gbCommStatus = COMM_RXWAITING;
 8003f34:	2305      	movs	r3, #5
 8003f36:	6033      	str	r3, [r6, #0]
 8003f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8003f42:	b2c1      	uxtb	r1, r0
 8003f44:	428a      	cmp	r2, r1
 8003f46:	f100 0001 	add.w	r0, r0, #1
 8003f4a:	db05      	blt.n	8003f58 <dxl_rx_packet+0x134>
		checksum += gbStatusPacket[i+2];
 8003f4c:	4421      	add	r1, r4
 8003f4e:	f891 10a8 	ldrb.w	r1, [r1, #168]	; 0xa8
 8003f52:	440b      	add	r3, r1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e7f4      	b.n	8003f42 <dxl_rx_packet+0x11e>
	checksum = ~checksum;
 8003f58:	43db      	mvns	r3, r3

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 8003f5a:	4422      	add	r2, r4
 8003f5c:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d19d      	bne.n	8003ea2 <dxl_rx_packet+0x7e>
 8003f66:	e767      	b.n	8003e38 <dxl_rx_packet+0x14>
 8003f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000130 	andcs	r0, r0, r0, lsr r1
 8003f70:	20000014 	andcs	r0, r0, r4, lsl r0

08003f74 <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 8003f74:	b510      	push	{r4, lr}

	dxl_tx_packet();
 8003f76:	f7ff ff07 	bl	8003d88 <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <dxl_txrx_packet+0x1c>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	461c      	mov	r4, r3
 8003f80:	b922      	cbnz	r2, 8003f8c <dxl_txrx_packet+0x18>
		return;	

	do{

		dxl_rx_packet();
 8003f82:	f7ff ff4f 	bl	8003e24 <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d0fa      	beq.n	8003f82 <dxl_txrx_packet+0xe>
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000014 	andcs	r0, r0, r4, lsl r0

08003f94 <dxl_get_result>:
}

int dxl_get_result()
{
	return gbCommStatus;
}
 8003f94:	4b01      	ldr	r3, [pc, #4]	; (8003f9c <dxl_get_result+0x8>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000014 	andcs	r0, r0, r4, lsl r0

08003fa0 <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 8003fa0:	4b01      	ldr	r3, [pc, #4]	; (8003fa8 <dxl_set_txpacket_id+0x8>)
 8003fa2:	7198      	strb	r0, [r3, #6]
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000130 	andcs	r0, r0, r0, lsr r1

08003fac <dxl_set_txpacket_instruction>:
}

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 8003fac:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <dxl_set_txpacket_instruction+0x8>)
 8003fae:	7218      	strb	r0, [r3, #8]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000130 	andcs	r0, r0, r0, lsr r1

08003fb8 <dxl_set_txpacket_parameter>:
}

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 8003fb8:	4b01      	ldr	r3, [pc, #4]	; (8003fc0 <dxl_set_txpacket_parameter+0x8>)
 8003fba:	4418      	add	r0, r3
 8003fbc:	7241      	strb	r1, [r0, #9]
 8003fbe:	4770      	bx	lr
 8003fc0:	20000130 	andcs	r0, r0, r0, lsr r1

08003fc4 <dxl_set_txpacket_length>:
}

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 8003fc4:	4b01      	ldr	r3, [pc, #4]	; (8003fcc <dxl_set_txpacket_length+0x8>)
 8003fc6:	71d8      	strb	r0, [r3, #7]
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000130 	andcs	r0, r0, r0, lsr r1

08003fd0 <dxl_get_rxpacket_error>:
}

int dxl_get_rxpacket_error( int errbit )
{
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <dxl_get_rxpacket_error+0x10>)
 8003fd2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003fd6:	4218      	tst	r0, r3
		return 1;

	return 0;
}
 8003fd8:	bf14      	ite	ne
 8003fda:	2001      	movne	r0, #1
 8003fdc:	2000      	moveq	r0, #0
 8003fde:	4770      	bx	lr
 8003fe0:	20000130 	andcs	r0, r0, r0, lsr r1

08003fe4 <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
	return (int)gbStatusPacket[LENGTH];
}
 8003fe4:	4b01      	ldr	r3, [pc, #4]	; (8003fec <dxl_get_rxpacket_length+0x8>)
 8003fe6:	f893 00a9 	ldrb.w	r0, [r3, #169]	; 0xa9
 8003fea:	4770      	bx	lr
 8003fec:	20000130 	andcs	r0, r0, r0, lsr r1

08003ff0 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
	return (int)gbStatusPacket[PARAMETER+index];
 8003ff0:	4b02      	ldr	r3, [pc, #8]	; (8003ffc <dxl_get_rxpacket_parameter+0xc>)
 8003ff2:	4418      	add	r0, r3
}
 8003ff4:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000130 	andcs	r0, r0, r0, lsr r1

08004000 <dxl_makeword>:
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8004000:	eb00 2001 	add.w	r0, r0, r1, lsl #8
	return (int)word;
}
 8004004:	b280      	uxth	r0, r0
 8004006:	4770      	bx	lr

08004008 <dxl_get_lowbyte>:
{
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 8004008:	b2c0      	uxtb	r0, r0
 800400a:	4770      	bx	lr

0800400c <dxl_get_highbyte>:
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
	return (int)temp;
}
 800400c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004010:	4770      	bx	lr

08004012 <dxl_ping>:

void dxl_ping( int id )
{
	while(giBusUsing);
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <dxl_ping+0x16>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	2a00      	cmp	r2, #0
 8004018:	d1fd      	bne.n	8004016 <dxl_ping+0x4>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 800401a:	2201      	movs	r2, #1
 800401c:	721a      	strb	r2, [r3, #8]
	gbInstructionPacket[LENGTH] = 2;
 800401e:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8004020:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 8004022:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
 8004024:	f7ff bfa6 	b.w	8003f74 <dxl_txrx_packet>
 8004028:	20000130 	andcs	r0, r0, r0, lsr r1

0800402c <dxl_read_byte>:
}

int dxl_read_byte( int id, int address )
{
 800402c:	b510      	push	{r4, lr}
	while(giBusUsing);
 800402e:	4c08      	ldr	r4, [pc, #32]	; (8004050 <dxl_read_byte+0x24>)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1fd      	bne.n	8004032 <dxl_read_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8004036:	2302      	movs	r3, #2
 8004038:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 800403e:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8004040:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8004042:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 8004044:	71e3      	strb	r3, [r4, #7]
	
	dxl_txrx_packet();
 8004046:	f7ff ff95 	bl	8003f74 <dxl_txrx_packet>

	return (int)gbStatusPacket[PARAMETER];
}
 800404a:	f894 00ab 	ldrb.w	r0, [r4, #171]	; 0xab
 800404e:	bd10      	pop	{r4, pc}
 8004050:	20000130 	andcs	r0, r0, r0, lsr r1

08004054 <dxl_write_byte>:

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <dxl_write_byte+0x20>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8004056:	b510      	push	{r4, lr}
	while(giBusUsing);
 8004058:	681c      	ldr	r4, [r3, #0]
 800405a:	2c00      	cmp	r4, #0
 800405c:	d1fd      	bne.n	800405a <dxl_write_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
 800405e:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 8004060:	729a      	strb	r2, [r3, #10]
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8004062:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8004064:	2204      	movs	r2, #4
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8004066:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8004068:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 800406a:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 8004070:	f7ff bf80 	b.w	8003f74 <dxl_txrx_packet>
 8004074:	20000130 	andcs	r0, r0, r0, lsr r1

08004078 <dxl_read_word>:
}

int dxl_read_word( int id, int address )
{
 8004078:	b510      	push	{r4, lr}
	while(giBusUsing);
 800407a:	4c0a      	ldr	r4, [pc, #40]	; (80040a4 <dxl_read_word+0x2c>)
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1fd      	bne.n	800407e <dxl_read_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8004082:	2302      	movs	r3, #2
 8004084:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 8004086:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 8004088:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 800408a:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 800408c:	71e3      	strb	r3, [r4, #7]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 800408e:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[LENGTH] = 4;
	



	dxl_txrx_packet();
 8004090:	f7ff ff70 	bl	8003f74 <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 8004094:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
	word = word << 8;
	word = word + lowbyte;
 8004098:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800409c:	eb03 2000 	add.w	r0, r3, r0, lsl #8


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 80040a0:	b280      	uxth	r0, r0
 80040a2:	bd10      	pop	{r4, pc}
 80040a4:	20000130 	andcs	r0, r0, r0, lsr r1

080040a8 <dxl_write_word>:

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <dxl_write_word+0x28>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 80040aa:	b510      	push	{r4, lr}
	while(giBusUsing);
 80040ac:	681c      	ldr	r4, [r3, #0]
 80040ae:	2c00      	cmp	r4, #0
 80040b0:	d1fd      	bne.n	80040ae <dxl_write_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 80040b2:	729a      	strb	r2, [r3, #10]
int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
 80040b4:	f3c2 2207 	ubfx	r2, r2, #8, #8

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80040b8:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 80040ba:	72da      	strb	r2, [r3, #11]
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80040bc:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 80040be:	2205      	movs	r2, #5
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80040c0:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 80040c2:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 80040c4:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 80040c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
	
	dxl_txrx_packet();
 80040ca:	f7ff bf53 	b.w	8003f74 <dxl_txrx_packet>
 80040ce:	bf00      	nop
 80040d0:	20000130 	andcs	r0, r0, r0, lsr r1

080040d4 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <FLASH_SetLatency+0x14>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80040dc:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4310      	orrs	r0, r2
 80040e2:	6018      	str	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40022000 	andmi	r2, r2, r0

080040ec <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <FLASH_HalfCycleAccessCmd+0x14>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	f022 0208 	bic.w	r2, r2, #8
 80040f4:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4310      	orrs	r0, r2
 80040fa:	6018      	str	r0, [r3, #0]
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40022000 	andmi	r2, r2, r0

08004104 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <FLASH_PrefetchBufferCmd+0x14>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	f022 0210 	bic.w	r2, r2, #16
 800410c:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4310      	orrs	r0, r2
 8004112:	6018      	str	r0, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40022000 	andmi	r2, r2, r0

0800411c <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <FLASH_Unlock+0x10>)
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <FLASH_Unlock+0x14>)
 8004120:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8004122:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40022000 	andmi	r2, r2, r0
 8004130:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08004134 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8004134:	4a02      	ldr	r2, [pc, #8]	; (8004140 <FLASH_Lock+0xc>)
 8004136:	6913      	ldr	r3, [r2, #16]
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	6113      	str	r3, [r2, #16]
 800413e:	4770      	bx	lr
 8004140:	40022000 	andmi	r2, r2, r0

08004144 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8004144:	4b01      	ldr	r3, [pc, #4]	; (800414c <FLASH_GetUserOptionByte+0x8>)
 8004146:	69d8      	ldr	r0, [r3, #28]
}
 8004148:	0880      	lsrs	r0, r0, #2
 800414a:	4770      	bx	lr
 800414c:	40022000 	andmi	r2, r2, r0

08004150 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <FLASH_GetWriteProtectionOptionByte+0x8>)
 8004152:	6a18      	ldr	r0, [r3, #32]
}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40022000 	andmi	r2, r2, r0

0800415c <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 800415c:	4b02      	ldr	r3, [pc, #8]	; (8004168 <FLASH_GetReadOutProtectionStatus+0xc>)
 800415e:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8004160:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40022000 	andmi	r2, r2, r0

0800416c <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 800416c:	4b02      	ldr	r3, [pc, #8]	; (8004178 <FLASH_GetPrefetchBufferStatus+0xc>)
 800416e:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8004170:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40022000 	andmi	r2, r2, r0

0800417c <FLASH_ITConfig>:
*                       - FLASH_IT_EOP: FLASH end of operation Interrupt
* Output         : None
* Return         : None 
*******************************************************************************/
void FLASH_ITConfig(u16 FLASH_IT, FunctionalState NewState)
{
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800417e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8004180:	b109      	cbz	r1, 8004186 <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8004182:	4310      	orrs	r0, r2
 8004184:	e001      	b.n	800418a <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 8004186:	ea22 0000 	bic.w	r0, r2, r0
 800418a:	6118      	str	r0, [r3, #16]
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40022000 	andmi	r2, r2, r0

08004194 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8004194:	2801      	cmp	r0, #1
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <FLASH_GetFlagStatus+0x1c>)
 8004198:	d103      	bne.n	80041a2 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 800419a:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 800419c:	f000 0001 	and.w	r0, r0, #1
 80041a0:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4218      	tst	r0, r3
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 80041a6:	bf14      	ite	ne
 80041a8:	2001      	movne	r0, #1
 80041aa:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40022000 	andmi	r2, r2, r0

080041b4 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80041b4:	4b01      	ldr	r3, [pc, #4]	; (80041bc <FLASH_ClearFlag+0x8>)
 80041b6:	60d8      	str	r0, [r3, #12]
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40022000 	andmi	r2, r2, r0

080041c0 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <FLASH_GetStatus+0x24>)
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	07d1      	lsls	r1, r2, #31
 80041c6:	d409      	bmi.n	80041dc <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	0752      	lsls	r2, r2, #29
 80041cc:	d408      	bmi.n	80041e0 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80041d4:	bf14      	ite	ne
 80041d6:	2003      	movne	r0, #3
 80041d8:	2004      	moveq	r0, #4
 80041da:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80041dc:	2001      	movs	r0, #1
 80041de:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 80041e0:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80041e2:	4770      	bx	lr
 80041e4:	40022000 	andmi	r2, r2, r0

080041e8 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80041e8:	b513      	push	{r0, r1, r4, lr}
 80041ea:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80041ec:	f7ff ffe8 	bl	80041c0 <FLASH_GetStatus>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80041f0:	2801      	cmp	r0, #1
 80041f2:	d10f      	bne.n	8004214 <FLASH_WaitForLastOperation+0x2c>
 80041f4:	b164      	cbz	r4, 8004210 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	9301      	str	r3, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80041fa:	23ff      	movs	r3, #255	; 0xff
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	9b01      	ldr	r3, [sp, #4]
 8004200:	b113      	cbz	r3, 8004208 <FLASH_WaitForLastOperation+0x20>
 8004202:	9b01      	ldr	r3, [sp, #4]
 8004204:	3b01      	subs	r3, #1
 8004206:	e7f9      	b.n	80041fc <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 8004208:	f7ff ffda 	bl	80041c0 <FLASH_GetStatus>
    Timeout--;
 800420c:	3c01      	subs	r4, #1
 800420e:	e7ef      	b.n	80041f0 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8004210:	2005      	movs	r0, #5
 8004212:	e002      	b.n	800421a <FLASH_WaitForLastOperation+0x32>
 8004214:	2c00      	cmp	r4, #0
 8004216:	bf08      	it	eq
 8004218:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 800421a:	b002      	add	sp, #8
 800421c:	bd10      	pop	{r4, pc}

0800421e <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 800421e:	b538      	push	{r3, r4, r5, lr}
 8004220:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004222:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004226:	f7ff ffdf 	bl	80041e8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800422a:	2804      	cmp	r0, #4
 800422c:	d114      	bne.n	8004258 <FLASH_ErasePage+0x3a>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800422e:	4c0b      	ldr	r4, [pc, #44]	; (800425c <FLASH_ErasePage+0x3e>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004230:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004234:	6923      	ldr	r3, [r4, #16]
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 800423c:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004244:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004246:	f7ff ffcf 	bl	80041e8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800424a:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 800424c:	bf1f      	itttt	ne
 800424e:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8004252:	6922      	ldrne	r2, [r4, #16]
 8004254:	4013      	andne	r3, r2
 8004256:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8004258:	bd38      	pop	{r3, r4, r5, pc}
 800425a:	bf00      	nop
 800425c:	40022000 	andmi	r2, r2, r0

08004260 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8004260:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004262:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004266:	f7ff ffbf 	bl	80041e8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800426a:	2804      	cmp	r0, #4
 800426c:	d113      	bne.n	8004296 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800426e:	4c0a      	ldr	r4, [pc, #40]	; (8004298 <FLASH_EraseAllPages+0x38>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004270:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004282:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004284:	f7ff ffb0 	bl	80041e8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004288:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 800428a:	bf1f      	itttt	ne
 800428c:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8004290:	6922      	ldrne	r2, [r4, #16]
 8004292:	4013      	andne	r3, r2
 8004294:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8004296:	bd10      	pop	{r4, pc}
 8004298:	40022000 	andmi	r2, r2, r0

0800429c <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 800429c:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800429e:	f640 70ff 	movw	r0, #4095	; 0xfff
 80042a2:	f7ff ffa1 	bl	80041e8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80042a6:	2804      	cmp	r0, #4
 80042a8:	d129      	bne.n	80042fe <FLASH_EraseOptionBytes+0x62>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80042aa:	4c15      	ldr	r4, [pc, #84]	; (8004300 <FLASH_EraseOptionBytes+0x64>)
 80042ac:	4b15      	ldr	r3, [pc, #84]	; (8004304 <FLASH_EraseOptionBytes+0x68>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80042ae:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80042b2:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80042b4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80042b8:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c8:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80042ca:	f7ff ff8d 	bl	80041e8 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80042ce:	2804      	cmp	r0, #4
 80042d0:	d10e      	bne.n	80042f0 <FLASH_EraseOptionBytes+0x54>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80042d2:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80042d6:	6922      	ldr	r2, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042d8:	200f      	movs	r0, #15
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80042da:	4013      	ands	r3, r2
 80042dc:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80042de:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80042e0:	22a5      	movs	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80042e2:	f043 0310 	orr.w	r3, r3, #16
 80042e6:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <FLASH_EraseOptionBytes+0x6c>)
 80042ea:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042ec:	f7ff ff7c 	bl	80041e8 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 80042f0:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80042f2:	bf1f      	itttt	ne
 80042f4:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80042f8:	6922      	ldrne	r2, [r4, #16]
 80042fa:	4013      	andne	r3, r2
 80042fc:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	40022000 	andmi	r2, r2, r0
 8004304:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004308:	1ffff800 	svcne	0x00fff800

0800430c <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004310:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004312:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004314:	f7ff ff68 	bl	80041e8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004318:	2804      	cmp	r0, #4
 800431a:	d117      	bne.n	800434c <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800431c:	4c0c      	ldr	r4, [pc, #48]	; (8004350 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800431e:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004320:	6923      	ldr	r3, [r4, #16]
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8004328:	b2ab      	uxth	r3, r5
 800432a:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800432c:	f7ff ff5c 	bl	80041e8 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8004330:	2804      	cmp	r0, #4
 8004332:	d104      	bne.n	800433e <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8004334:	0c2d      	lsrs	r5, r5, #16
 8004336:	8075      	strh	r5, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004338:	200f      	movs	r0, #15
 800433a:	f7ff ff55 	bl	80041e8 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 800433e:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8004340:	bf1f      	itttt	ne
 8004342:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8004346:	6922      	ldrne	r2, [r4, #16]
 8004348:	4013      	andne	r3, r2
 800434a:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	bf00      	nop
 8004350:	40022000 	andmi	r2, r2, r0

08004354 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004358:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 800435a:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800435c:	f7ff ff44 	bl	80041e8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004360:	2804      	cmp	r0, #4
 8004362:	d10f      	bne.n	8004384 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004364:	4c08      	ldr	r4, [pc, #32]	; (8004388 <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004366:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8004370:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004372:	f7ff ff39 	bl	80041e8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004376:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8004378:	bf1f      	itttt	ne
 800437a:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 800437e:	6922      	ldrne	r2, [r4, #16]
 8004380:	4013      	andne	r3, r2
 8004382:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8004384:	bd70      	pop	{r4, r5, r6, pc}
 8004386:	bf00      	nop
 8004388:	40022000 	andmi	r2, r2, r0

0800438c <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004390:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8004392:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004394:	f7ff ff28 	bl	80041e8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8004398:	2804      	cmp	r0, #4
 800439a:	d115      	bne.n	80043c8 <FLASH_ProgramOptionByteData+0x3c>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800439c:	4c0b      	ldr	r4, [pc, #44]	; (80043cc <FLASH_ProgramOptionByteData+0x40>)
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <FLASH_ProgramOptionByteData+0x44>)
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
 80043a0:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80043a2:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80043a4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80043a8:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80043aa:	6923      	ldr	r3, [r4, #16]
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80043ac:	200f      	movs	r0, #15
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80043ae:	f043 0310 	orr.w	r3, r3, #16
 80043b2:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 80043b4:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80043b6:	f7ff ff17 	bl	80041e8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80043ba:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80043bc:	bf1f      	itttt	ne
 80043be:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80043c2:	6922      	ldrne	r2, [r4, #16]
 80043c4:	4013      	andne	r3, r2
 80043c6:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
 80043ca:	bf00      	nop
 80043cc:	40022000 	andmi	r2, r2, r0
 80043d0:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080043d4 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80043d8:	200f      	movs	r0, #15
 80043da:	f7ff ff05 	bl	80041e8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80043de:	2804      	cmp	r0, #4
 80043e0:	d141      	bne.n	8004466 <FLASH_EnableWriteProtection+0x92>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 80043e2:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80043e4:	4b20      	ldr	r3, [pc, #128]	; (8004468 <FLASH_EnableWriteProtection+0x94>)
 80043e6:	4a21      	ldr	r2, [pc, #132]	; (800446c <FLASH_EnableWriteProtection+0x98>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 80043e8:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80043ea:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80043ec:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80043f0:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 80043f2:	691a      	ldr	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 80043f4:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 80043f6:	f042 0210 	orr.w	r2, r2, #16
 80043fa:	611a      	str	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 80043fc:	d104      	bne.n	8004408 <FLASH_EnableWriteProtection+0x34>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 80043fe:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	d108      	bne.n	8004418 <FLASH_EnableWriteProtection+0x44>
 8004406:	e00f      	b.n	8004428 <FLASH_EnableWriteProtection+0x54>
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <FLASH_EnableWriteProtection+0x9c>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800440a:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 800440c:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800440e:	f7ff feeb 	bl	80041e8 <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004412:	2804      	cmp	r0, #4
 8004414:	d11f      	bne.n	8004456 <FLASH_EnableWriteProtection+0x82>
 8004416:	e7f2      	b.n	80043fe <FLASH_EnableWriteProtection+0x2a>
    {
      OB->WRP1 = WRP1_Data;
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <FLASH_EnableWriteProtection+0x9c>)
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800441a:	b29b      	uxth	r3, r3
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 800441c:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800441e:	200f      	movs	r0, #15
 8004420:	f7ff fee2 	bl	80041e8 <FLASH_WaitForLastOperation>
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8004424:	2804      	cmp	r0, #4
 8004426:	d116      	bne.n	8004456 <FLASH_EnableWriteProtection+0x82>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8004428:	f3c4 4307 	ubfx	r3, r4, #16, #8
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800442c:	2bff      	cmp	r3, #255	; 0xff
 800442e:	d007      	beq.n	8004440 <FLASH_EnableWriteProtection+0x6c>
    {
      OB->WRP2 = WRP2_Data;
 8004430:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <FLASH_EnableWriteProtection+0x9c>)
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8004432:	b29b      	uxth	r3, r3
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8004434:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004436:	200f      	movs	r0, #15
 8004438:	f7ff fed6 	bl	80041e8 <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 800443c:	2804      	cmp	r0, #4
 800443e:	d10a      	bne.n	8004456 <FLASH_EnableWriteProtection+0x82>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8004440:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8004442:	2cff      	cmp	r4, #255	; 0xff
 8004444:	d101      	bne.n	800444a <FLASH_EnableWriteProtection+0x76>
 8004446:	2004      	movs	r0, #4
 8004448:	e007      	b.n	800445a <FLASH_EnableWriteProtection+0x86>
    {
      OB->WRP3 = WRP3_Data;
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <FLASH_EnableWriteProtection+0x9c>)
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 800444c:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 800444e:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004450:	200f      	movs	r0, #15
 8004452:	f7ff fec9 	bl	80041e8 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 8004456:	2801      	cmp	r0, #1
 8004458:	d005      	beq.n	8004466 <FLASH_EnableWriteProtection+0x92>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800445a:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800445e:	4a02      	ldr	r2, [pc, #8]	; (8004468 <FLASH_EnableWriteProtection+0x94>)
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	400b      	ands	r3, r1
 8004464:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8004466:	bd10      	pop	{r4, pc}
 8004468:	40022000 	andmi	r2, r2, r0
 800446c:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004470:	1ffff800 	svcne	0x00fff800

08004474 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004478:	f640 70ff 	movw	r0, #4095	; 0xfff
 800447c:	f7ff feb4 	bl	80041e8 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8004480:	2804      	cmp	r0, #4
 8004482:	d136      	bne.n	80044f2 <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004484:	4c1b      	ldr	r4, [pc, #108]	; (80044f4 <FLASH_ReadOutProtection+0x80>)
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <FLASH_ReadOutProtection+0x84>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004488:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800448c:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800448e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004492:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	f043 0320 	orr.w	r3, r3, #32
 800449a:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a2:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80044a4:	f7ff fea0 	bl	80041e8 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 80044a8:	2804      	cmp	r0, #4
 80044aa:	d11b      	bne.n	80044e4 <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80044ac:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	6123      	str	r3, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	f043 0310 	orr.w	r3, r3, #16
 80044bc:	6123      	str	r3, [r4, #16]
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <FLASH_ReadOutProtection+0x88>)

      if(NewState != DISABLE)
 80044c0:	b10d      	cbz	r5, 80044c6 <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 80044c2:	2200      	movs	r2, #0
 80044c4:	e000      	b.n	80044c8 <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80044c6:	22a5      	movs	r2, #165	; 0xa5
 80044c8:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80044ca:	f640 70ff 	movw	r0, #4095	; 0xfff
 80044ce:	f7ff fe8b 	bl	80041e8 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 80044d2:	2801      	cmp	r0, #1
 80044d4:	d00d      	beq.n	80044f2 <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80044d6:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80044da:	4a06      	ldr	r2, [pc, #24]	; (80044f4 <FLASH_ReadOutProtection+0x80>)
 80044dc:	6911      	ldr	r1, [r2, #16]
 80044de:	400b      	ands	r3, r1
 80044e0:	6113      	str	r3, [r2, #16]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 80044e4:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 80044e6:	bf1f      	itttt	ne
 80044e8:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 80044ec:	6922      	ldrne	r2, [r4, #16]
 80044ee:	4013      	andne	r3, r2
 80044f0:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	40022000 	andmi	r2, r2, r0
 80044f8:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80044fc:	1ffff800 	svcne	0x00fff800

08004500 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004502:	4d11      	ldr	r5, [pc, #68]	; (8004548 <FLASH_UserOptionByteConfig+0x48>)
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <FLASH_UserOptionByteConfig+0x4c>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004506:	4606      	mov	r6, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004508:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800450a:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800450e:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004510:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004512:	460f      	mov	r7, r1
 8004514:	4614      	mov	r4, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004516:	f7ff fe67 	bl	80041e8 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800451a:	2804      	cmp	r0, #4
 800451c:	d113      	bne.n	8004546 <FLASH_UserOptionByteConfig+0x46>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800451e:	692b      	ldr	r3, [r5, #16]
 8004520:	f044 00f8 	orr.w	r0, r4, #248	; 0xf8
 8004524:	f043 0310 	orr.w	r3, r3, #16
 8004528:	612b      	str	r3, [r5, #16]
 800452a:	4338      	orrs	r0, r7
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <FLASH_UserOptionByteConfig+0x50>)
 800452e:	4330      	orrs	r0, r6
 8004530:	8058      	strh	r0, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004532:	200f      	movs	r0, #15
 8004534:	f7ff fe58 	bl	80041e8 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004538:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800453a:	bf1f      	itttt	ne
 800453c:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004540:	692a      	ldrne	r2, [r5, #16]
 8004542:	4013      	andne	r3, r2
 8004544:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8004546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004548:	40022000 	andmi	r2, r2, r0
 800454c:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004550:	1ffff800 	svcne	0x00fff800

08004554 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004554:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <GPIO_DeInit+0x9c>)
 8004558:	4298      	cmp	r0, r3
 800455a:	d02f      	beq.n	80045bc <GPIO_DeInit+0x68>
 800455c:	d811      	bhi.n	8004582 <GPIO_DeInit+0x2e>
 800455e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004562:	4298      	cmp	r0, r3
 8004564:	d01e      	beq.n	80045a4 <GPIO_DeInit+0x50>
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	4298      	cmp	r0, r3
 800456c:	d020      	beq.n	80045b0 <GPIO_DeInit+0x5c>
 800456e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004572:	4298      	cmp	r0, r3
 8004574:	d13a      	bne.n	80045ec <GPIO_DeInit+0x98>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8004576:	2004      	movs	r0, #4
 8004578:	2101      	movs	r1, #1
 800457a:	f000 fc35 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 800457e:	2004      	movs	r0, #4
 8004580:	e02f      	b.n	80045e2 <GPIO_DeInit+0x8e>
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <GPIO_DeInit+0xa0>)
 8004584:	4298      	cmp	r0, r3
 8004586:	d01f      	beq.n	80045c8 <GPIO_DeInit+0x74>
 8004588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458c:	4298      	cmp	r0, r3
 800458e:	d021      	beq.n	80045d4 <GPIO_DeInit+0x80>
 8004590:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004594:	4298      	cmp	r0, r3
 8004596:	d129      	bne.n	80045ec <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8004598:	2040      	movs	r0, #64	; 0x40
 800459a:	2101      	movs	r1, #1
 800459c:	f000 fc24 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80045a0:	2040      	movs	r0, #64	; 0x40
 80045a2:	e01e      	b.n	80045e2 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80045a4:	2008      	movs	r0, #8
 80045a6:	2101      	movs	r1, #1
 80045a8:	f000 fc1e 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80045ac:	2008      	movs	r0, #8
 80045ae:	e018      	b.n	80045e2 <GPIO_DeInit+0x8e>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80045b0:	2010      	movs	r0, #16
 80045b2:	2101      	movs	r1, #1
 80045b4:	f000 fc18 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80045b8:	2010      	movs	r0, #16
 80045ba:	e012      	b.n	80045e2 <GPIO_DeInit+0x8e>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80045bc:	2020      	movs	r0, #32
 80045be:	2101      	movs	r1, #1
 80045c0:	f000 fc12 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80045c4:	2020      	movs	r0, #32
 80045c6:	e00c      	b.n	80045e2 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80045c8:	2080      	movs	r0, #128	; 0x80
 80045ca:	2101      	movs	r1, #1
 80045cc:	f000 fc0c 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80045d0:	2080      	movs	r0, #128	; 0x80
 80045d2:	e006      	b.n	80045e2 <GPIO_DeInit+0x8e>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80045d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045d8:	2101      	movs	r1, #1
 80045da:	f000 fc05 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80045de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045e2:	2100      	movs	r1, #0
      break;                       

    default:
      break;
  }
}
 80045e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80045e8:	f000 bbfe 	b.w	8004de8 <RCC_APB2PeriphResetCmd>
 80045ec:	bd08      	pop	{r3, pc}
 80045ee:	bf00      	nop
 80045f0:	40011400 	andmi	r1, r1, r0, lsl #8
 80045f4:	40011c00 	andmi	r1, r1, r0, lsl #24

080045f8 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 80045f8:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80045fa:	2001      	movs	r0, #1
 80045fc:	4601      	mov	r1, r0
 80045fe:	f000 fbf3 	bl	8004de8 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8004602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8004606:	2001      	movs	r0, #1
 8004608:	2100      	movs	r1, #0
 800460a:	f000 bbed 	b.w	8004de8 <RCC_APB2PeriphResetCmd>

0800460e <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800460e:	78ca      	ldrb	r2, [r1, #3]
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8004612:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8004614:	bf48      	it	mi
 8004616:	788c      	ldrbmi	r4, [r1, #2]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8004618:	880d      	ldrh	r5, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800461a:	f002 030f 	and.w	r3, r2, #15
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 800461e:	bf48      	it	mi
 8004620:	4323      	orrmi	r3, r4
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8004622:	f015 0fff 	tst.w	r5, #255	; 0xff
 8004626:	d01d      	beq.n	8004664 <GPIO_Init+0x56>
  {
    tmpreg = GPIOx->CRL;
 8004628:	6801      	ldr	r1, [r0, #0]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800462a:	2400      	movs	r4, #0
    {
      pos = ((u32)0x01) << pinpos;
 800462c:	2601      	movs	r6, #1
 800462e:	40a6      	lsls	r6, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004630:	ea06 0705 	and.w	r7, r6, r5

      if (currentpin == pos)
 8004634:	42b7      	cmp	r7, r6
 8004636:	d111      	bne.n	800465c <GPIO_Init+0x4e>
      {
        pos = pinpos << 2;
 8004638:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 800463c:	260f      	movs	r6, #15
 800463e:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 8004642:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004646:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004648:	fa03 f60e 	lsl.w	r6, r3, lr
 800464c:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004650:	d101      	bne.n	8004656 <GPIO_Init+0x48>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8004652:	6147      	str	r7, [r0, #20]
 8004654:	e002      	b.n	800465c <GPIO_Init+0x4e>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004656:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8004658:	bf08      	it	eq
 800465a:	6107      	streq	r7, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800465c:	3401      	adds	r4, #1
 800465e:	2c08      	cmp	r4, #8
 8004660:	d1e4      	bne.n	800462c <GPIO_Init+0x1e>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004662:	6001      	str	r1, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004664:	2dff      	cmp	r5, #255	; 0xff
 8004666:	d91f      	bls.n	80046a8 <GPIO_Init+0x9a>
  {
    tmpreg = GPIOx->CRH;
 8004668:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800466a:	2400      	movs	r4, #0
 800466c:	f104 0708 	add.w	r7, r4, #8
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8004670:	2601      	movs	r6, #1
 8004672:	40be      	lsls	r6, r7
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004674:	ea06 0705 	and.w	r7, r6, r5
      if (currentpin == pos)
 8004678:	42b7      	cmp	r7, r6
 800467a:	d111      	bne.n	80046a0 <GPIO_Init+0x92>
      {
        pos = pinpos << 2;
 800467c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8004680:	260f      	movs	r6, #15
 8004682:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 8004686:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800468a:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800468c:	fa03 f60e 	lsl.w	r6, r3, lr
 8004690:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004694:	d101      	bne.n	800469a <GPIO_Init+0x8c>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8004696:	6147      	str	r7, [r0, #20]
 8004698:	e002      	b.n	80046a0 <GPIO_Init+0x92>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800469a:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 800469c:	bf08      	it	eq
 800469e:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80046a0:	3401      	adds	r4, #1
 80046a2:	2c08      	cmp	r4, #8
 80046a4:	d1e2      	bne.n	800466c <GPIO_Init+0x5e>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80046a6:	6041      	str	r1, [r0, #4]
 80046a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046aa <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80046aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046ae:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80046b0:	2302      	movs	r3, #2
 80046b2:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80046b4:	2304      	movs	r3, #4
 80046b6:	70c3      	strb	r3, [r0, #3]
 80046b8:	4770      	bx	lr

080046ba <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 80046ba:	6883      	ldr	r3, [r0, #8]
 80046bc:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80046be:	bf14      	ite	ne
 80046c0:	2001      	movne	r0, #1
 80046c2:	2000      	moveq	r0, #0
 80046c4:	4770      	bx	lr

080046c6 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 80046c6:	6880      	ldr	r0, [r0, #8]
}
 80046c8:	b280      	uxth	r0, r0
 80046ca:	4770      	bx	lr

080046cc <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 80046cc:	68c3      	ldr	r3, [r0, #12]
 80046ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80046d0:	bf14      	ite	ne
 80046d2:	2001      	movne	r0, #1
 80046d4:	2000      	moveq	r0, #0
 80046d6:	4770      	bx	lr

080046d8 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 80046d8:	68c0      	ldr	r0, [r0, #12]
}
 80046da:	b280      	uxth	r0, r0
 80046dc:	4770      	bx	lr

080046de <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80046de:	6101      	str	r1, [r0, #16]
 80046e0:	4770      	bx	lr

080046e2 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80046e2:	6141      	str	r1, [r0, #20]
 80046e4:	4770      	bx	lr

080046e6 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80046e6:	b10a      	cbz	r2, 80046ec <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e8:	6101      	str	r1, [r0, #16]
 80046ea:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80046ec:	6141      	str	r1, [r0, #20]
 80046ee:	4770      	bx	lr

080046f0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80046f0:	60c1      	str	r1, [r0, #12]
 80046f2:	4770      	bx	lr

080046f4 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80046f4:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80046f8:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80046fa:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80046fc:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80046fe:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004700:	6983      	ldr	r3, [r0, #24]
 8004702:	4770      	bx	lr

08004704 <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8004704:	4a05      	ldr	r2, [pc, #20]	; (800471c <GPIO_EventOutputConfig+0x18>)
 8004706:	6813      	ldr	r3, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8004708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	4319      	orrs	r1, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8004712:	ea41 1000 	orr.w	r0, r1, r0, lsl #4

  AFIO->EVCR = tmpreg;
 8004716:	6010      	str	r0, [r2, #0]
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	andmi	r0, r1, r0

08004720 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <GPIO_EventOutputCmd+0x8>)
 8004722:	6018      	str	r0, [r3, #0]
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	4220001c 	eormi	r0, r0, #28

0800472c <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 800472c:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 800472e:	4c13      	ldr	r4, [pc, #76]	; (800477c <GPIO_PinRemapConfig+0x50>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8004730:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8004734:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8004738:	6863      	ldr	r3, [r4, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 800473a:	b282      	uxth	r2, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800473c:	d106      	bne.n	800474c <GPIO_PinRemapConfig+0x20>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800473e:	6865      	ldr	r5, [r4, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8004740:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8004744:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8004748:	6065      	str	r5, [r4, #4]
 800474a:	e00e      	b.n	800476a <GPIO_PinRemapConfig+0x3e>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800474c:	02c4      	lsls	r4, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800474e:	bf55      	itete	pl
 8004750:	0d44      	lsrpl	r4, r0, #21
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 8004752:	2403      	movmi	r4, #3
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004754:	0124      	lslpl	r4, r4, #4
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8004756:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 800475a:	bf4c      	ite	mi
 800475c:	40ac      	lslmi	r4, r5
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800475e:	fa02 f404 	lslpl.w	r4, r2, r4
 8004762:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8004766:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 800476a:	b119      	cbz	r1, 8004774 <GPIO_PinRemapConfig+0x48>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800476c:	0d40      	lsrs	r0, r0, #21
 800476e:	0100      	lsls	r0, r0, #4
 8004770:	4082      	lsls	r2, r0
 8004772:	4313      	orrs	r3, r2
  }

  AFIO->MAPR = tmpreg;
 8004774:	4a01      	ldr	r2, [pc, #4]	; (800477c <GPIO_PinRemapConfig+0x50>)
 8004776:	6053      	str	r3, [r2, #4]
 8004778:	bd30      	pop	{r4, r5, pc}
 800477a:	bf00      	nop
 800477c:	40010000 	andmi	r0, r1, r0

08004780 <GPIO_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004780:	f001 0303 	and.w	r3, r1, #3
 8004784:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8004788:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800478c:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8004790:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004792:	009b      	lsls	r3, r3, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004794:	688c      	ldr	r4, [r1, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004796:	220f      	movs	r2, #15
 8004798:	409a      	lsls	r2, r3

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800479a:	ea24 0202 	bic.w	r2, r4, r2
 800479e:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 80047a0:	688a      	ldr	r2, [r1, #8]
 80047a2:	4098      	lsls	r0, r3
 80047a4:	4302      	orrs	r2, r0
 80047a6:	608a      	str	r2, [r1, #8]
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop

080047ac <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <NVIC_DeInit+0x30>)
  NVIC->ICER[1] = 0x0FFFFFFF;
 80047ae:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80047b2:	f04f 31ff 	mov.w	r1, #4294967295
 80047b6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICER[1] = 0x0FFFFFFF;
 80047ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[0] = 0xFFFFFFFF;
 80047be:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ICPR[1] = 0x0FFFFFFF;
 80047c2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  
  for(index = 0; index < 0x0F; index++)
 80047c6:	2200      	movs	r2, #0
  {
     NVIC->IPR[index] = 0x00000000;
 80047c8:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80047cc:	3201      	adds	r2, #1
  {
     NVIC->IPR[index] = 0x00000000;
 80047ce:	2000      	movs	r0, #0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80047d0:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 80047d2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80047d6:	d1f7      	bne.n	80047c8 <NVIC_DeInit+0x1c>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e100 	and	lr, r0, r0, lsl #2

080047e0 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <NVIC_SCBDeInit+0x28>)
 80047e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 80047e6:	4909      	ldr	r1, [pc, #36]	; (800480c <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 80047e8:	605a      	str	r2, [r3, #4]
  SCB->VTOR = 0x00000000;
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 80047ee:	60d9      	str	r1, [r3, #12]
  SCB->SCR = 0x00000000;
 80047f0:	611a      	str	r2, [r3, #16]
  SCB->CCR = 0x00000000;
 80047f2:	615a      	str	r2, [r3, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 80047f4:	619a      	str	r2, [r3, #24]
 80047f6:	61da      	str	r2, [r3, #28]
 80047f8:	621a      	str	r2, [r3, #32]
  }
  SCB->SHCSR = 0x00000000;
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24
  SCB->CFSR = 0xFFFFFFFF;
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
  SCB->HFSR = 0xFFFFFFFF;
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c
  SCB->DFSR = 0xFFFFFFFF;
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	and	lr, r0, r0, lsl #26
 800480c:	05fa0000 	ldrbeq	r0, [sl, #0]!

08004810 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004810:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <NVIC_PriorityGroupConfig+0x10>)
 8004816:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800481a:	60d8      	str	r0, [r3, #12]
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000ed00 	and	lr, r0, r0, lsl #26

08004824 <NVIC_Init>:
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004824:	78c2      	ldrb	r2, [r0, #3]
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004826:	b530      	push	{r4, r5, lr}
 8004828:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800482a:	b372      	cbz	r2, 800488a <NVIC_Init+0x66>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <NVIC_Init+0x7c>)
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800482e:	f003 0503 	and.w	r5, r3, #3
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004832:	68d4      	ldr	r4, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004834:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004836:	43e4      	mvns	r4, r4
 8004838:	f3c4 2402 	ubfx	r4, r4, #8, #3
    tmppre = (0x4 - tmppriority);
 800483c:	f1c4 0104 	rsb	r1, r4, #4
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004840:	fa02 f101 	lsl.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8004844:	220f      	movs	r2, #15
 8004846:	40e2      	lsrs	r2, r4
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004848:	7884      	ldrb	r4, [r0, #2]
 800484a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800484e:	4022      	ands	r2, r4
 8004850:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004854:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8004858:	430a      	orrs	r2, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 800485a:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800485e:	00ed      	lsls	r5, r5, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8004860:	0112      	lsls	r2, r2, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004862:	21ff      	movs	r1, #255	; 0xff
 8004864:	40a9      	lsls	r1, r5
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004866:	40aa      	lsls	r2, r5
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8004868:	ea24 0401 	bic.w	r4, r4, r1
    tmppriority &= tmpmask;  
 800486c:	400a      	ands	r2, r1
    tmpreg |= tmppriority;
 800486e:	4322      	orrs	r2, r4

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8004870:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004874:	7803      	ldrb	r3, [r0, #0]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004876:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004878:	0959      	lsrs	r1, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004882:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <NVIC_Init+0x80>)
 8004884:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004888:	bd30      	pop	{r4, r5, pc}
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800488a:	095a      	lsrs	r2, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800488c:	2101      	movs	r1, #1
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	4099      	lsls	r1, r3
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004894:	f102 0320 	add.w	r3, r2, #32
 8004898:	4a02      	ldr	r2, [pc, #8]	; (80048a4 <NVIC_Init+0x80>)
 800489a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800489e:	bd30      	pop	{r4, r5, pc}
 80048a0:	e000ed00 	and	lr, r0, r0, lsl #26
 80048a4:	e000e100 	and	lr, r0, r0, lsl #2

080048a8 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 80048a8:	2300      	movs	r3, #0
 80048aa:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 80048ac:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 80048ae:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 80048b0:	70c3      	strb	r3, [r0, #3]
 80048b2:	4770      	bx	lr

080048b4 <NVIC_SETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
  __SETPRIMASK();
 80048b4:	f001 ba35 	b.w	8005d22 <__SETPRIMASK>

080048b8 <NVIC_RESETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
  __RESETPRIMASK();
 80048b8:	f001 ba35 	b.w	8005d26 <__RESETPRIMASK>

080048bc <NVIC_SETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
  __SETFAULTMASK();
 80048bc:	f001 ba35 	b.w	8005d2a <__SETFAULTMASK>

080048c0 <NVIC_RESETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
  __RESETFAULTMASK();
 80048c0:	f001 ba35 	b.w	8005d2e <__RESETFAULTMASK>

080048c4 <NVIC_BASEPRICONFIG>:
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 80048c4:	0100      	lsls	r0, r0, #4
 80048c6:	f001 ba34 	b.w	8005d32 <__BASEPRICONFIG>

080048ca <NVIC_GetBASEPRI>:
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
  return (__GetBASEPRI());
 80048ca:	f001 ba35 	b.w	8005d38 <__GetBASEPRI>

080048ce <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 80048ce:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <NVIC_GetCurrentPendingIRQChannel+0xa>)
 80048d0:	6858      	ldr	r0, [r3, #4]
}
 80048d2:	f3c0 3009 	ubfx	r0, r0, #12, #10
 80048d6:	4770      	bx	lr
 80048d8:	e000ed00 	and	lr, r0, r0, lsl #26

080048dc <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 80048dc:	f000 031f 	and.w	r3, r0, #31
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 80048e4:	4904      	ldr	r1, [pc, #16]	; (80048f8 <NVIC_GetIRQChannelPendingBitStatus+0x1c>)
 80048e6:	0943      	lsrs	r3, r0, #5
 80048e8:	3340      	adds	r3, #64	; 0x40
 80048ea:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80048ee:	4010      	ands	r0, r2
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 80048f0:	1a83      	subs	r3, r0, r2
 80048f2:	4258      	negs	r0, r3
 80048f4:	4158      	adcs	r0, r3
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	and	lr, r0, r0, lsl #2

080048fc <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 80048fc:	4b01      	ldr	r3, [pc, #4]	; (8004904 <NVIC_SetIRQChannelPendingBit+0x8>)
 80048fe:	6018      	str	r0, [r3, #0]
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000ef00 	and	lr, r0, r0, lsl #30

08004908 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8004908:	0943      	lsrs	r3, r0, #5
 800490a:	2201      	movs	r2, #1
 800490c:	f000 001f 	and.w	r0, r0, #31
 8004910:	4902      	ldr	r1, [pc, #8]	; (800491c <NVIC_ClearIRQChannelPendingBit+0x14>)
 8004912:	4082      	lsls	r2, r0
 8004914:	3360      	adds	r3, #96	; 0x60
 8004916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800491a:	4770      	bx	lr
 800491c:	e000e100 	and	lr, r0, r0, lsl #2

08004920 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <NVIC_GetCurrentActiveHandler+0xc>)
 8004922:	6858      	ldr	r0, [r3, #4]
}
 8004924:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000ed00 	and	lr, r0, r0, lsl #26

08004930 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004930:	f000 031f 	and.w	r3, r0, #31
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8004938:	4904      	ldr	r1, [pc, #16]	; (800494c <NVIC_GetIRQChannelActiveBitStatus+0x1c>)
 800493a:	0943      	lsrs	r3, r0, #5
 800493c:	3380      	adds	r3, #128	; 0x80
 800493e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004942:	4010      	ands	r0, r2
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8004944:	1a83      	subs	r3, r0, r2
 8004946:	4258      	negs	r0, r3
 8004948:	4158      	adcs	r0, r3
 800494a:	4770      	bx	lr
 800494c:	e000e100 	and	lr, r0, r0, lsl #2

08004950 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <NVIC_GetCPUID+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000ed00 	and	lr, r0, r0, lsl #26

0800495c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 800495c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004960:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <NVIC_SetVectorTable+0x10>)
 8004966:	4308      	orrs	r0, r1
 8004968:	6098      	str	r0, [r3, #8]
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	and	lr, r0, r0, lsl #26

08004970 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8004970:	4a01      	ldr	r2, [pc, #4]	; (8004978 <NVIC_GenerateSystemReset+0x8>)
 8004972:	4b02      	ldr	r3, [pc, #8]	; (800497c <NVIC_GenerateSystemReset+0xc>)
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	4770      	bx	lr
 8004978:	05fa0004 	ldrbeq	r0, [sl, #4]!
 800497c:	e000ed00 	and	lr, r0, r0, lsl #26

08004980 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8004980:	4a01      	ldr	r2, [pc, #4]	; (8004988 <NVIC_GenerateCoreReset+0x8>)
 8004982:	4b02      	ldr	r3, [pc, #8]	; (800498c <NVIC_GenerateCoreReset+0xc>)
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	4770      	bx	lr
 8004988:	05fa0001 	ldrbeq	r0, [sl, #1]!
 800498c:	e000ed00 	and	lr, r0, r0, lsl #26

08004990 <NVIC_SystemLPConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
{
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8004992:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004994:	b109      	cbz	r1, 800499a <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8004996:	4310      	orrs	r0, r2
 8004998:	e001      	b.n	800499e <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 800499a:	ea22 0000 	bic.w	r0, r2, r0
 800499e:	6118      	str	r0, [r3, #16]
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000ed00 	and	lr, r0, r0, lsl #26

080049a8 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 80049a8:	f000 001f 	and.w	r0, r0, #31
 80049ac:	2201      	movs	r2, #1
 80049ae:	4082      	lsls	r2, r0
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <NVIC_SystemHandlerConfig+0x1c>)

  if (NewState != DISABLE)
 80049b2:	b111      	cbz	r1, 80049ba <NVIC_SystemHandlerConfig+0x12>
  {
    SCB->SHCSR |= tmpreg;
 80049b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049b6:	430a      	orrs	r2, r1
 80049b8:	e002      	b.n	80049c0 <NVIC_SystemHandlerConfig+0x18>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 80049ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049bc:	ea21 0202 	bic.w	r2, r1, r2
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	and	lr, r0, r0, lsl #26

080049c8 <NVIC_SystemHandlerPriorityConfig>:
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <NVIC_SystemHandlerPriorityConfig+0x48>)
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 80049ca:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  tmp1 = (0x4 - tmppriority);
 80049d4:	f1c3 0404 	rsb	r4, r3, #4
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 80049d8:	40a1      	lsls	r1, r4
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
 80049da:	24ff      	movs	r4, #255	; 0xff
 80049dc:	fa24 f303 	lsr.w	r3, r4, r3
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 80049e0:	401a      	ands	r2, r3

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
 80049e2:	f3c0 2301 	ubfx	r3, r0, #8, #2
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 80049e6:	f3c0 1081 	ubfx	r0, r0, #6, #2
 80049ea:	0080      	lsls	r0, r0, #2
 80049ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80049f0:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 80049f4:	4311      	orrs	r1, r2

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 80049f6:	00db      	lsls	r3, r3, #3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 80049f8:	6982      	ldr	r2, [r0, #24]
  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
 80049fa:	409c      	lsls	r4, r3
  
  SCB->SHPR[tmp1] &= ~handlermask;
 80049fc:	ea22 0404 	bic.w	r4, r2, r4
 8004a00:	6184      	str	r4, [r0, #24]
  SCB->SHPR[tmp1] |= tmppriority;
 8004a02:	6982      	ldr	r2, [r0, #24]
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8004a04:	0109      	lsls	r1, r1, #4
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8004a06:	4099      	lsls	r1, r3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	6181      	str	r1, [r0, #24]
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	bf00      	nop
 8004a10:	e000ed00 	and	lr, r0, r0, lsl #26

08004a14 <NVIC_GetSystemHandlerPendingBitStatus>:
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004a14:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <NVIC_GetSystemHandlerPendingBitStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;
 8004a16:	f3c0 2083 	ubfx	r0, r0, #10, #4

  tmppos = (u32)0x01 << tmppos;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004a1e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004a20:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004a22:	1ac3      	subs	r3, r0, r3
 8004a24:	4258      	negs	r0, r3
 8004a26:	4158      	adcs	r0, r3
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000ed00 	and	lr, r0, r0, lsl #26

08004a30 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004a30:	4904      	ldr	r1, [pc, #16]	; (8004a44 <NVIC_SetSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004a32:	f000 001f 	and.w	r0, r0, #31
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004a36:	684b      	ldr	r3, [r1, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4082      	lsls	r2, r0
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	604b      	str	r3, [r1, #4]
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000ed00 	and	lr, r0, r0, lsl #26

08004a48 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004a48:	4904      	ldr	r1, [pc, #16]	; (8004a5c <NVIC_ClearSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004a4a:	f000 001f 	and.w	r0, r0, #31
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004a4e:	684b      	ldr	r3, [r1, #4]
 8004a50:	3801      	subs	r0, #1
 8004a52:	2201      	movs	r2, #1
 8004a54:	4082      	lsls	r2, r0
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
 8004a5a:	4770      	bx	lr
 8004a5c:	e000ed00 	and	lr, r0, r0, lsl #26

08004a60 <NVIC_GetSystemHandlerActiveBitStatus>:
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004a60:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <NVIC_GetSystemHandlerActiveBitStatus+0x18>)
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
 8004a62:	f3c0 3083 	ubfx	r0, r0, #14, #4

  tmppos = (u32)0x01 << tmppos;
 8004a66:	2301      	movs	r3, #1
 8004a68:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004a6a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004a6c:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004a6e:	1ac3      	subs	r3, r0, r3
 8004a70:	4258      	negs	r0, r3
 8004a72:	4158      	adcs	r0, r3
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	e000ed00 	and	lr, r0, r0, lsl #26

08004a7c <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8004a7c:	f3c0 4381 	ubfx	r3, r0, #18, #2
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <NVIC_GetFaultHandlerSources+0x2c>)
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8004a82:	b90b      	cbnz	r3, 8004a88 <NVIC_GetFaultHandlerSources+0xc>
  {
    faultsources = SCB->HFSR;
 8004a84:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004a86:	4770      	bx	lr
  }
  else if (tmpreg == 0x01)
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d10a      	bne.n	8004aa2 <NVIC_GetFaultHandlerSources+0x26>

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004a8c:	f3c0 5301 	ubfx	r3, r0, #20, #2
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004a90:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004a92:	00da      	lsls	r2, r3, #3
 8004a94:	40d0      	lsrs	r0, r2
    if (tmppos != 0x02)
 8004a96:	2b02      	cmp	r3, #2
    {
      faultsources &= (u32)0x0F;
 8004a98:	bf14      	ite	ne
 8004a9a:	f000 000f 	andne.w	r0, r0, #15
    }
    else
    {
      faultsources &= (u32)0xFF;
 8004a9e:	b2c0      	uxtbeq	r0, r0
 8004aa0:	4770      	bx	lr
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8004aa2:	6b10      	ldr	r0, [r2, #48]	; 0x30
  }
  return faultsources;
}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	e000ed00 	and	lr, r0, r0, lsl #26

08004aac <NVIC_GetFaultAddress>:
*                       - SystemHandler_BusFault
* Output         : None
* Return         : Fault address.
*******************************************************************************/
u32 NVIC_GetFaultAddress(u32 SystemHandler)
{
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <NVIC_GetFaultAddress+0x10>)
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8004aae:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8004ab2:	bf0c      	ite	eq
 8004ab4:	6b58      	ldreq	r0, [r3, #52]	; 0x34
  }
  else
  {
    faultaddress = SCB->BFAR;
 8004ab6:	6b98      	ldrne	r0, [r3, #56]	; 0x38
  }
  return faultaddress;
}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	e000ed00 	and	lr, r0, r0, lsl #26

08004ac0 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8004ac0:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8004ac2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	f000 f99a 	bl	8004e00 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 8004acc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004ad0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f000 b993 	b.w	8004e00 <RCC_APB1PeriphResetCmd>

08004ada <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8004ada:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <PWR_BackupAccessCmd+0x6>)
 8004adc:	6018      	str	r0, [r3, #0]
 8004ade:	4770      	bx	lr
 8004ae0:	420e0020 	andmi	r0, lr, #32

08004ae4 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8004ae4:	4b01      	ldr	r3, [pc, #4]	; (8004aec <PWR_PVDCmd+0x8>)
 8004ae6:	6018      	str	r0, [r3, #0]
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	420e0010 	andmi	r0, lr, #16

08004af0 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8004af0:	4a03      	ldr	r2, [pc, #12]	; (8004b00 <PWR_PVDLevelConfig+0x10>)
 8004af2:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8004af4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8004af8:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40007000 	andmi	r7, r0, r0

08004b04 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8004b04:	4b01      	ldr	r3, [pc, #4]	; (8004b0c <PWR_WakeUpPinCmd+0x8>)
 8004b06:	6018      	str	r0, [r3, #0]
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	420e00a0 	andmi	r0, lr, #160	; 0xa0

08004b10 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <PWR_EnterSTOPMode+0x24>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004b12:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004b14:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8004b16:	f023 0303 	bic.w	r3, r3, #3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8004b1a:	ea40 0003 	orr.w	r0, r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004b1e:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004b20:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <PWR_EnterSTOPMode+0x28>)
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	f043 0304 	orr.w	r3, r3, #4
 8004b28:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004b2a:	d101      	bne.n	8004b30 <PWR_EnterSTOPMode+0x20>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004b2c:	f001 b8d4 	b.w	8005cd8 <__WFI>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8004b30:	f001 b8d4 	b.w	8005cdc <__WFE>
 8004b34:	40007000 	andmi	r7, r0, r0
 8004b38:	e000ed10 	and	lr, r0, r0, lsl sp

08004b3c <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <PWR_EnterSTANDBYMode+0x20>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f042 0204 	orr.w	r2, r2, #4
 8004b44:	601a      	str	r2, [r3, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f042 0202 	orr.w	r2, r2, #2
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004b4e:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <PWR_EnterSTANDBYMode+0x24>)
 8004b50:	6813      	ldr	r3, [r2, #0]
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8004b58:	f001 b8be 	b.w	8005cd8 <__WFI>
 8004b5c:	40007000 	andmi	r7, r0, r0
 8004b60:	e000ed10 	and	lr, r0, r0, lsl sp

08004b64 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <PWR_GetFlagStatus+0x10>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004b6a:	bf14      	ite	ne
 8004b6c:	2001      	movne	r0, #1
 8004b6e:	2000      	moveq	r0, #0
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	andmi	r7, r0, r0

08004b78 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8004b78:	4a02      	ldr	r2, [pc, #8]	; (8004b84 <PWR_ClearFlag+0xc>)
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8004b80:	6010      	str	r0, [r2, #0]
 8004b82:	4770      	bx	lr
 8004b84:	40007000 	andmi	r7, r0, r0

08004b88 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <RCC_DeInit+0x34>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <RCC_DeInit+0x38>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ba0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bac:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	4770      	bx	lr
 8004bbc:	40021000 	andmi	r1, r2, r0
 8004bc0:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08004bc4 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <RCC_HSEConfig+0x34>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004bc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bd0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bd8:	601a      	str	r2, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004bda:	d003      	beq.n	8004be4 <RCC_HSEConfig+0x20>
 8004bdc:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004be0:	d004      	beq.n	8004bec <RCC_HSEConfig+0x28>
 8004be2:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bea:	e002      	b.n	8004bf2 <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	andmi	r1, r2, r0

08004bfc <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <RCC_AdjustHSICalibrationValue+0x10>)
 8004bfe:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004c00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004c04:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004c08:	6010      	str	r0, [r2, #0]
 8004c0a:	4770      	bx	lr
 8004c0c:	40021000 	andmi	r1, r2, r0

08004c10 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004c10:	4b01      	ldr	r3, [pc, #4]	; (8004c18 <RCC_HSICmd+0x8>)
 8004c12:	6018      	str	r0, [r3, #0]
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	42420000 	submi	r0, r2, #0

08004c1c <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <RCC_PLLConfig+0x10>)
 8004c1e:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004c20:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004c24:	4319      	orrs	r1, r3

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004c26:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c28:	6050      	str	r0, [r2, #4]
 8004c2a:	4770      	bx	lr
 8004c2c:	40021000 	andmi	r1, r2, r0

08004c30 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004c30:	4b01      	ldr	r3, [pc, #4]	; (8004c38 <RCC_PLLCmd+0x8>)
 8004c32:	6018      	str	r0, [r3, #0]
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	42420060 	submi	r0, r2, #96	; 0x60

08004c3c <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004c3c:	4a03      	ldr	r2, [pc, #12]	; (8004c4c <RCC_SYSCLKConfig+0x10>)
 8004c3e:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004c40:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004c44:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c46:	6050      	str	r0, [r2, #4]
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	andmi	r1, r2, r0

08004c50 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <RCC_GetSYSCLKSource+0xc>)
 8004c52:	6858      	ldr	r0, [r3, #4]
}
 8004c54:	f000 000c 	and.w	r0, r0, #12
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	andmi	r1, r2, r0

08004c60 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004c60:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <RCC_HCLKConfig+0x10>)
 8004c62:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004c68:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c6a:	6050      	str	r0, [r2, #4]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40021000 	andmi	r1, r2, r0

08004c74 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004c74:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <RCC_PCLK1Config+0x10>)
 8004c76:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004c78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004c7c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c7e:	6050      	str	r0, [r2, #4]
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40021000 	andmi	r1, r2, r0

08004c88 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <RCC_PCLK2Config+0x10>)
 8004c8a:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004c8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004c90:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c94:	6050      	str	r0, [r2, #4]
 8004c96:	4770      	bx	lr
 8004c98:	40021000 	andmi	r1, r2, r0

08004c9c <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004c9e:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ca0:	b109      	cbz	r1, 8004ca6 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004ca2:	4310      	orrs	r0, r2
 8004ca4:	e001      	b.n	8004caa <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8004ca6:	ea22 0000 	bic.w	r0, r2, r0
 8004caa:	7018      	strb	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40021009 	andmi	r1, r2, r9

08004cb4 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004cb4:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <RCC_USBCLKConfig+0x8>)
 8004cb6:	6018      	str	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	424200d8 	submi	r0, r2, #216	; 0xd8

08004cc0 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8004cc0:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <RCC_ADCCLKConfig+0x10>)
 8004cc2:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004cc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004cc8:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cca:	6050      	str	r0, [r2, #4]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40021000 	andmi	r1, r2, r0

08004cd4 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <RCC_LSEConfig+0x1c>)
 8004cd6:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004cd8:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004cda:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004cdc:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004cde:	d002      	beq.n	8004ce6 <RCC_LSEConfig+0x12>
 8004ce0:	2804      	cmp	r0, #4
 8004ce2:	d002      	beq.n	8004cea <RCC_LSEConfig+0x16>
 8004ce4:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8004ce6:	7018      	strb	r0, [r3, #0]
      break;
 8004ce8:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004cea:	2205      	movs	r2, #5
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	4770      	bx	lr
 8004cf0:	40021020 	andmi	r1, r2, r0, lsr #32

08004cf4 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8004cf4:	4b01      	ldr	r3, [pc, #4]	; (8004cfc <RCC_LSICmd+0x8>)
 8004cf6:	6018      	str	r0, [r3, #0]
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08004d00 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004d00:	4a02      	ldr	r2, [pc, #8]	; (8004d0c <RCC_RTCCLKConfig+0xc>)
 8004d02:	6a13      	ldr	r3, [r2, #32]
 8004d04:	4318      	orrs	r0, r3
 8004d06:	6210      	str	r0, [r2, #32]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	andmi	r1, r2, r0

08004d10 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004d10:	4b01      	ldr	r3, [pc, #4]	; (8004d18 <RCC_RTCCLKCmd+0x8>)
 8004d12:	6018      	str	r0, [r3, #0]
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

08004d1c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004d1c:	4a1c      	ldr	r2, [pc, #112]	; (8004d90 <RCC_GetClocksFreq+0x74>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004d1e:	b510      	push	{r4, lr}
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004d20:	6853      	ldr	r3, [r2, #4]
 8004d22:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d001      	beq.n	8004d2e <RCC_GetClocksFreq+0x12>
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d001      	beq.n	8004d32 <RCC_GetClocksFreq+0x16>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8004d2e:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <RCC_GetClocksFreq+0x78>)
 8004d30:	e00e      	b.n	8004d50 <RCC_GetClocksFreq+0x34>
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004d32:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004d34:	6851      	ldr	r1, [r2, #4]
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004d36:	f3c3 4383 	ubfx	r3, r3, #18, #4

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004d3a:	03cc      	lsls	r4, r1, #15
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004d3c:	f103 0302 	add.w	r3, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004d40:	d502      	bpl.n	8004d48 <RCC_GetClocksFreq+0x2c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8004d42:	6851      	ldr	r1, [r2, #4]
 8004d44:	0389      	lsls	r1, r1, #14
 8004d46:	d501      	bpl.n	8004d4c <RCC_GetClocksFreq+0x30>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8004d48:	4913      	ldr	r1, [pc, #76]	; (8004d98 <RCC_GetClocksFreq+0x7c>)
 8004d4a:	e000      	b.n	8004d4e <RCC_GetClocksFreq+0x32>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004d4c:	4911      	ldr	r1, [pc, #68]	; (8004d94 <RCC_GetClocksFreq+0x78>)
 8004d4e:	434b      	muls	r3, r1
 8004d50:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004d52:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8004d54:	4911      	ldr	r1, [pc, #68]	; (8004d9c <RCC_GetClocksFreq+0x80>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8004d56:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004d5a:	5ccc      	ldrb	r4, [r1, r3]
 8004d5c:	6803      	ldr	r3, [r0, #0]
 8004d5e:	40e3      	lsrs	r3, r4
 8004d60:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004d62:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8004d64:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004d68:	5d0c      	ldrb	r4, [r1, r4]
 8004d6a:	fa23 f404 	lsr.w	r4, r3, r4
 8004d6e:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004d70:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8004d72:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004d76:	5d0c      	ldrb	r4, [r1, r4]
 8004d78:	40e3      	lsrs	r3, r4
 8004d7a:	60c3      	str	r3, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004d7c:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8004d7e:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8004d82:	440a      	add	r2, r1
 8004d84:	7c12      	ldrb	r2, [r2, #16]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004d86:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d8a:	6103      	str	r3, [r0, #16]
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	bf00      	nop
 8004d90:	40021000 	andmi	r1, r2, r0
 8004d94:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8004d98:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8004d9c:	08005ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, lr}

08004da0 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004da2:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004da4:	b109      	cbz	r1, 8004daa <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004da6:	4310      	orrs	r0, r2
 8004da8:	e001      	b.n	8004dae <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004daa:	ea22 0000 	bic.w	r0, r2, r0
 8004dae:	6158      	str	r0, [r3, #20]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40021000 	andmi	r1, r2, r0

08004db8 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004dba:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004dbc:	b109      	cbz	r1, 8004dc2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004dbe:	4310      	orrs	r0, r2
 8004dc0:	e001      	b.n	8004dc6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004dc2:	ea22 0000 	bic.w	r0, r2, r0
 8004dc6:	6198      	str	r0, [r3, #24]
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40021000 	andmi	r1, r2, r0

08004dd0 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004dd2:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004dd4:	b109      	cbz	r1, 8004dda <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004dd6:	4310      	orrs	r0, r2
 8004dd8:	e001      	b.n	8004dde <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004dda:	ea22 0000 	bic.w	r0, r2, r0
 8004dde:	61d8      	str	r0, [r3, #28]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40021000 	andmi	r1, r2, r0

08004de8 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004dea:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004dec:	b109      	cbz	r1, 8004df2 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004dee:	4310      	orrs	r0, r2
 8004df0:	e001      	b.n	8004df6 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004df2:	ea22 0000 	bic.w	r0, r2, r0
 8004df6:	60d8      	str	r0, [r3, #12]
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	andmi	r1, r2, r0

08004e00 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004e02:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e04:	b109      	cbz	r1, 8004e0a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004e06:	4310      	orrs	r0, r2
 8004e08:	e001      	b.n	8004e0e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004e0a:	ea22 0000 	bic.w	r0, r2, r0
 8004e0e:	6118      	str	r0, [r3, #16]
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40021000 	andmi	r1, r2, r0

08004e18 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8004e18:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <RCC_BackupResetCmd+0x8>)
 8004e1a:	6018      	str	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

08004e24 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8004e24:	4b01      	ldr	r3, [pc, #4]	; (8004e2c <RCC_ClockSecuritySystemCmd+0x8>)
 8004e26:	6018      	str	r0, [r3, #0]
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	4242004c 	submi	r0, r2, #76	; 0x4c

08004e30 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8004e30:	4b01      	ldr	r3, [pc, #4]	; (8004e38 <RCC_MCOConfig+0x8>)
 8004e32:	7018      	strb	r0, [r3, #0]
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021007 	andmi	r1, r2, r7

08004e3c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004e3c:	0942      	lsrs	r2, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8004e3e:	2a01      	cmp	r2, #1
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <RCC_GetFlagStatus+0x24>)
 8004e42:	d101      	bne.n	8004e48 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	e003      	b.n	8004e50 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004e48:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8004e4a:	bf0c      	ite	eq
 8004e4c:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004e4e:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8004e50:	f000 001f 	and.w	r0, r0, #31
 8004e54:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004e58:	f000 0001 	and.w	r0, r0, #1
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40021000 	andmi	r1, r2, r0

08004e64 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004e64:	b507      	push	{r0, r1, r2, lr}
  vu32 StartUpCounter = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8004e6a:	2031      	movs	r0, #49	; 0x31
 8004e6c:	f7ff ffe6 	bl	8004e3c <RCC_GetFlagStatus>
    StartUpCounter++;  
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	3301      	adds	r3, #1
 8004e74:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8004e76:	b918      	cbnz	r0, 8004e80 <RCC_WaitForHSEStartUp+0x1c>
 8004e78:	9b01      	ldr	r3, [sp, #4]
 8004e7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e7e:	d1f4      	bne.n	8004e6a <RCC_WaitForHSEStartUp+0x6>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8004e80:	2031      	movs	r0, #49	; 0x31
 8004e82:	f7ff ffdb 	bl	8004e3c <RCC_GetFlagStatus>
  {
    status = ERROR;
  }  

  return (status);
}
 8004e86:	3000      	adds	r0, #0
 8004e88:	bf18      	it	ne
 8004e8a:	2001      	movne	r0, #1
 8004e8c:	b003      	add	sp, #12
 8004e8e:	f85d fb04 	ldr.w	pc, [sp], #4

08004e92 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8004e92:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <RCC_ClearFlag+0xe>)
 8004e94:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	6253      	str	r3, [r2, #36]	; 0x24
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	andmi	r1, r2, r0

08004ea4 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <RCC_GetITStatus+0x10>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8004eaa:	bf14      	ite	ne
 8004eac:	2001      	movne	r0, #1
 8004eae:	2000      	moveq	r0, #0
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	andmi	r1, r2, r0

08004eb8 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004eb8:	4b01      	ldr	r3, [pc, #4]	; (8004ec0 <RCC_ClearITPendingBit+0x8>)
 8004eba:	7018      	strb	r0, [r3, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	4002100a 	andmi	r1, r2, sl

08004ec4 <SysTick_CLKSourceConfig>:
*                         SysTick clock source.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
 8004ec4:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004ec6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	bf0c      	ite	eq
 8004ecc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8004ed0:	f022 0204 	bicne.w	r2, r2, #4
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	4770      	bx	lr
 8004ed8:	e000e010 	and	lr, r0, r0, lsl r0

08004edc <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8004edc:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <SysTick_SetReload+0x8>)
 8004ede:	6058      	str	r0, [r3, #4]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000e010 	and	lr, r0, r0, lsl r0

08004ee8 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8004ee8:	2801      	cmp	r0, #1
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <SysTick_CounterCmd+0x24>)
 8004eec:	d103      	bne.n	8004ef6 <SysTick_CounterCmd+0xe>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	e004      	b.n	8004f00 <SysTick_CounterCmd+0x18>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8004ef6:	3002      	adds	r0, #2
 8004ef8:	d104      	bne.n	8004f04 <SysTick_CounterCmd+0x1c>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	4770      	bx	lr
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8004f04:	2200      	movs	r2, #0
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e010 	and	lr, r0, r0, lsl r0

08004f10 <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <SysTick_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004f12:	681a      	ldr	r2, [r3, #0]
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f14:	b110      	cbz	r0, 8004f1c <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004f16:	f042 0202 	orr.w	r2, r2, #2
 8004f1a:	e001      	b.n	8004f20 <SysTick_ITConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8004f1c:	f022 0202 	bic.w	r2, r2, #2
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	4770      	bx	lr
 8004f24:	e000e010 	and	lr, r0, r0, lsl r0

08004f28 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8004f28:	4b01      	ldr	r3, [pc, #4]	; (8004f30 <SysTick_GetCounter+0x8>)
 8004f2a:	6898      	ldr	r0, [r3, #8]
}
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e010 	and	lr, r0, r0, lsl r0

08004f34 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004f34:	08c3      	lsrs	r3, r0, #3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <SysTick_GetFlagStatus+0x18>)
  {
    statusreg = SysTick->CTRL;
 8004f3a:	bf0c      	ite	eq
 8004f3c:	681b      	ldreq	r3, [r3, #0]
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 8004f3e:	68db      	ldrne	r3, [r3, #12]
  }

  if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
 8004f40:	fa23 f000 	lsr.w	r0, r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004f44:	f000 0001 	and.w	r0, r0, #1
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e010 	and	lr, r0, r0, lsl r0

08004f50 <TI1_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI1_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 8004f50:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8004f52:	8c04      	ldrh	r4, [r0, #32]
 8004f54:	f024 0401 	bic.w	r4, r4, #1
 8004f58:	0424      	lsls	r4, r4, #16
 8004f5a:	0c24      	lsrs	r4, r4, #16
 8004f5c:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004f60:	8c05      	ldrh	r5, [r0, #32]
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;

  tmpccmr1 = TIMx->CCMR1;
 8004f62:	b2a4      	uxth	r4, r4
  tmpccer = TIMx->CCER;
 8004f64:	b2ad      	uxth	r5, r5

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 8004f66:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 8004f6a:	4322      	orrs	r2, r4
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8004f6c:	f025 0502 	bic.w	r5, r5, #2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8004f70:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8004f74:	f045 0501 	orr.w	r5, r5, #1
 8004f78:	b29a      	uxth	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8004f7a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7c:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f7e:	8401      	strh	r1, [r0, #32]
 8004f80:	bd30      	pop	{r4, r5, pc}

08004f82 <TI2_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI2_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 8004f82:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8004f84:	8c04      	ldrh	r4, [r0, #32]
 8004f86:	f024 0410 	bic.w	r4, r4, #16
 8004f8a:	0424      	lsls	r4, r4, #16
 8004f8c:	0c24      	lsrs	r4, r4, #16
 8004f8e:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8004f90:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004f92:	8c04      	ldrh	r4, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8004f94:	f425 7540 	bic.w	r5, r5, #768	; 0x300

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;

  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8004f98:	b2a4      	uxth	r4, r4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8004f9a:	052d      	lsls	r5, r5, #20
 8004f9c:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
 8004f9e:	f024 0420 	bic.w	r4, r4, #32
 8004fa2:	f044 0410 	orr.w	r4, r4, #16
 8004fa6:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8004faa:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8004fae:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8004fb2:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8004fb4:	b28c      	uxth	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb6:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	8404      	strh	r4, [r0, #32]
 8004fba:	bd30      	pop	{r4, r5, pc}

08004fbc <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8004fbc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8004fbe:	4b2e      	ldr	r3, [pc, #184]	; (8005078 <TIM_DeInit+0xbc>)
 8004fc0:	4298      	cmp	r0, r3
 8004fc2:	d03a      	beq.n	800503a <TIM_DeInit+0x7e>
 8004fc4:	d810      	bhi.n	8004fe8 <TIM_DeInit+0x2c>
 8004fc6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004fca:	4298      	cmp	r0, r3
 8004fcc:	d025      	beq.n	800501a <TIM_DeInit+0x5e>
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	d02b      	beq.n	800502e <TIM_DeInit+0x72>
 8004fd6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004fda:	d14c      	bne.n	8005076 <TIM_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	4601      	mov	r1, r0
 8004fe0:	f7ff ff0e 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	e01d      	b.n	8005024 <TIM_DeInit+0x68>
void TIM_DeInit(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8004fe8:	4b24      	ldr	r3, [pc, #144]	; (800507c <TIM_DeInit+0xc0>)
 8004fea:	4298      	cmp	r0, r3
 8004fec:	d031      	beq.n	8005052 <TIM_DeInit+0x96>
 8004fee:	d804      	bhi.n	8004ffa <TIM_DeInit+0x3e>
 8004ff0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004ff4:	4298      	cmp	r0, r3
 8004ff6:	d026      	beq.n	8005046 <TIM_DeInit+0x8a>
 8004ff8:	bd08      	pop	{r3, pc}
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <TIM_DeInit+0xc4>)
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	d004      	beq.n	800500a <TIM_DeInit+0x4e>
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	4298      	cmp	r0, r3
 8005006:	d02a      	beq.n	800505e <TIM_DeInit+0xa2>
 8005008:	bd08      	pop	{r3, pc}
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800500a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800500e:	2101      	movs	r1, #1
 8005010:	f7ff feea 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8005014:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005018:	e028      	b.n	800506c <TIM_DeInit+0xb0>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800501a:	2002      	movs	r0, #2
 800501c:	2101      	movs	r1, #1
 800501e:	f7ff feef 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005022:	2002      	movs	r0, #2
 8005024:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 8005026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800502a:	f7ff bee9 	b.w	8004e00 <RCC_APB1PeriphResetCmd>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800502e:	2004      	movs	r0, #4
 8005030:	2101      	movs	r1, #1
 8005032:	f7ff fee5 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8005036:	2004      	movs	r0, #4
 8005038:	e7f4      	b.n	8005024 <TIM_DeInit+0x68>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800503a:	2008      	movs	r0, #8
 800503c:	2101      	movs	r1, #1
 800503e:	f7ff fedf 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8005042:	2008      	movs	r0, #8
 8005044:	e7ee      	b.n	8005024 <TIM_DeInit+0x68>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8005046:	2010      	movs	r0, #16
 8005048:	2101      	movs	r1, #1
 800504a:	f7ff fed9 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800504e:	2010      	movs	r0, #16
 8005050:	e7e8      	b.n	8005024 <TIM_DeInit+0x68>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8005052:	2020      	movs	r0, #32
 8005054:	2101      	movs	r1, #1
 8005056:	f7ff fed3 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800505a:	2020      	movs	r0, #32
 800505c:	e7e2      	b.n	8005024 <TIM_DeInit+0x68>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800505e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005062:	2101      	movs	r1, #1
 8005064:	f7ff fec0 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005068:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800506c:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 800506e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005072:	f7ff beb9 	b.w	8004de8 <RCC_APB2PeriphResetCmd>
 8005076:	bd08      	pop	{r3, pc}
 8005078:	40000c00 	andmi	r0, r0, r0, lsl #24
 800507c:	40001400 	andmi	r1, r0, r0, lsl #8
 8005080:	40012c00 	andmi	r2, r1, r0, lsl #24

08005084 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8005084:	8803      	ldrh	r3, [r0, #0]
 8005086:	88ca      	ldrh	r2, [r1, #6]
 8005088:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 800508c:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 800508e:	8803      	ldrh	r3, [r0, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	4313      	orrs	r3, r2
 8005094:	884a      	ldrh	r2, [r1, #2]
 8005096:	4313      	orrs	r3, r2
 8005098:	b29b      	uxth	r3, r3
 800509a:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800509c:	888b      	ldrh	r3, [r1, #4]
 800509e:	8583      	strh	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80050a0:	880b      	ldrh	r3, [r1, #0]
 80050a2:	8503      	strh	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80050a4:	2301      	movs	r3, #1
 80050a6:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <TIM_TimeBaseInit+0x38>)
 80050aa:	4298      	cmp	r0, r3
 80050ac:	d003      	beq.n	80050b6 <TIM_TimeBaseInit+0x32>
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	4298      	cmp	r0, r3
 80050b4:	d101      	bne.n	80050ba <TIM_TimeBaseInit+0x36>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80050b6:	7a0b      	ldrb	r3, [r1, #8]
 80050b8:	8603      	strh	r3, [r0, #48]	; 0x30
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	andmi	r2, r1, r0, lsl #24

080050c0 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80050c0:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80050c2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80050d4:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 80050d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050da:	0412      	lsls	r2, r2, #16
 80050dc:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 80050de:	f023 0502 	bic.w	r5, r3, #2
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80050e2:	4316      	orrs	r6, r2
 80050e4:	884b      	ldrh	r3, [r1, #2]
 80050e6:	890a      	ldrh	r2, [r1, #8]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 80050e8:	042d      	lsls	r5, r5, #16
 80050ea:	4313      	orrs	r3, r2
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80050ec:	88ca      	ldrh	r2, [r1, #6]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 80050ee:	0c2d      	lsrs	r5, r5, #16
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80050f0:	8682      	strh	r2, [r0, #52]	; 0x34
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80050f2:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <TIM_OC1Init+0x70>)

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80050f4:	432b      	orrs	r3, r5
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80050f6:	4290      	cmp	r0, r2
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80050fa:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80050fc:	d003      	beq.n	8005106 <TIM_OC1Init+0x46>
 80050fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005102:	4290      	cmp	r0, r2
 8005104:	d10f      	bne.n	8005126 <TIM_OC1Init+0x66>
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8005106:	f647 45ff 	movw	r5, #31999	; 0x7cff
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800510a:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 800510c:	f023 0308 	bic.w	r3, r3, #8

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8005110:	4313      	orrs	r3, r2

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005112:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 8005114:	f023 0304 	bic.w	r3, r3, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8005118:	4025      	ands	r5, r4

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800511a:	4313      	orrs	r3, r2
 800511c:	89cc      	ldrh	r4, [r1, #14]
 800511e:	898a      	ldrh	r2, [r1, #12]
 8005120:	4314      	orrs	r4, r2

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005122:	432c      	orrs	r4, r5
 8005124:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005126:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005128:	8306      	strh	r6, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512a:	8403      	strh	r3, [r0, #32]
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	bf00      	nop
 8005130:	40012c00 	andmi	r2, r1, r0, lsl #24

08005134 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005134:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005136:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005142:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005148:	880c      	ldrh	r4, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 800514a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800514e:	0412      	lsls	r2, r2, #16
 8005150:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005152:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8005156:	f023 0320 	bic.w	r3, r3, #32
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 800515a:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 800515c:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800515e:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8005160:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005162:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005166:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	b2ad      	uxth	r5, r5

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 800516a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800516e:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005170:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005172:	8702      	strh	r2, [r0, #56]	; 0x38
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <TIM_OC2Init+0x84>)
 8005176:	4290      	cmp	r0, r2
 8005178:	d003      	beq.n	8005182 <TIM_OC2Init+0x4e>
 800517a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517e:	4290      	cmp	r0, r2
 8005180:	d116      	bne.n	80051b0 <TIM_OC2Init+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005186:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8005188:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800518a:	ea43 1202 	orr.w	r2, r3, r2, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 800518e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8005192:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005194:	888a      	ldrh	r2, [r1, #4]
 8005196:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 800519a:	f247 32ff 	movw	r2, #29695	; 0x73ff
 800519e:	402a      	ands	r2, r5

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80051a0:	898d      	ldrh	r5, [r1, #12]

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80051a2:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80051a4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80051a8:	89cd      	ldrh	r5, [r1, #14]
 80051aa:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
 80051ae:	b2ad      	uxth	r5, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b2:	8304      	strh	r4, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	8403      	strh	r3, [r0, #32]
 80051b6:	bd30      	pop	{r4, r5, pc}
 80051b8:	40012c00 	andmi	r2, r1, r0, lsl #24

080051bc <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80051bc:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80051be:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80051c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ce:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80051d0:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 80051d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80051d6:	0412      	lsls	r2, r2, #16
 80051d8:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 80051da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80051de:	4316      	orrs	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 80051e0:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80051e2:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 80051e4:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80051e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 80051ea:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 80051ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80051f2:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 80051f4:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80051f6:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80051f8:	4a10      	ldr	r2, [pc, #64]	; (800523c <TIM_OC3Init+0x80>)
 80051fa:	4290      	cmp	r0, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC3Init+0x4a>
 80051fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005202:	4290      	cmp	r0, r2
 8005204:	d116      	bne.n	8005234 <TIM_OC3Init+0x78>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8005206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800520a:	894a      	ldrh	r2, [r1, #10]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 800520c:	f644 75ff 	movw	r5, #20479	; 0x4fff
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8005210:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005212:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 8005216:	f64f 33ff 	movw	r3, #64511	; 0xfbff
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 800521a:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800521c:	898c      	ldrh	r4, [r1, #12]

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 800521e:	4013      	ands	r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005220:	ea45 1504 	orr.w	r5, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005224:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005226:	89cc      	ldrh	r4, [r1, #14]

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005228:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800522c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005230:	b29b      	uxth	r3, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005232:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	8386      	strh	r6, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005238:	8403      	strh	r3, [r0, #32]
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	40012c00 	andmi	r2, r1, r0, lsl #24

08005240 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005240:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005242:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	0c1b      	lsrs	r3, r3, #16
 800524c:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005252:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005254:	880d      	ldrh	r5, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8005256:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800525a:	0412      	lsls	r2, r2, #16
 800525c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800525e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005262:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8005266:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005268:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800526a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800526c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005270:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005272:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005274:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005278:	88cd      	ldrh	r5, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 800527a:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800527c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005280:	4d08      	ldr	r5, [pc, #32]	; (80052a4 <TIM_OC4Init+0x64>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005282:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005284:	42a8      	cmp	r0, r5
 8005286:	d003      	beq.n	8005290 <TIM_OC4Init+0x50>
 8005288:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800528c:	42a8      	cmp	r0, r5
 800528e:	d105      	bne.n	800529c <TIM_OC4Init+0x5c>

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005290:	8989      	ldrh	r1, [r1, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8005292:	f3c4 040d 	ubfx	r4, r4, #0, #14

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005296:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
 800529a:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800529e:	8382      	strh	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	8403      	strh	r3, [r0, #32]
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	40012c00 	andmi	r2, r1, r0, lsl #24

080052a8 <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80052a8:	884a      	ldrh	r2, [r1, #2]
 80052aa:	880b      	ldrh	r3, [r1, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	888a      	ldrh	r2, [r1, #4]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	88ca      	ldrh	r2, [r1, #6]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	890a      	ldrh	r2, [r1, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	894a      	ldrh	r2, [r1, #10]
 80052bc:	4313      	orrs	r3, r2
 80052be:	898a      	ldrh	r2, [r1, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80052c8:	4770      	bx	lr

080052ca <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80052ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ce:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80052d0:	2300      	movs	r3, #0
 80052d2:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80052d4:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80052d6:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80052d8:	7203      	strb	r3, [r0, #8]
 80052da:	4770      	bx	lr

080052dc <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80052dc:	2300      	movs	r3, #0
 80052de:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80052e0:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80052e2:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80052e4:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80052e6:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80052e8:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80052ea:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80052ec:	81c3      	strh	r3, [r0, #14]
 80052ee:	4770      	bx	lr

080052f0 <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80052f0:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80052f2:	2201      	movs	r2, #1
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80052f4:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80052f6:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80052f8:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80052fa:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80052fc:	8103      	strh	r3, [r0, #8]
 80052fe:	4770      	bx	lr

08005300 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8005300:	2300      	movs	r3, #0
 8005302:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8005304:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8005306:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8005308:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800530a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800530c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800530e:	8183      	strh	r3, [r0, #12]
 8005310:	4770      	bx	lr

08005312 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8005312:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005314:	b119      	cbz	r1, 800531e <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8005316:	b29b      	uxth	r3, r3
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	e003      	b.n	8005326 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	059b      	lsls	r3, r3, #22
 8005324:	0d9b      	lsrs	r3, r3, #22
 8005326:	8003      	strh	r3, [r0, #0]
 8005328:	4770      	bx	lr

0800532a <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 800532a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800532e:	b129      	cbz	r1, 800533c <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 8005330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005338:	b29b      	uxth	r3, r3
 800533a:	e001      	b.n	8005340 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 800533c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005340:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8005344:	4770      	bx	lr

08005346 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005346:	8983      	ldrh	r3, [r0, #12]
 8005348:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800534a:	b10a      	cbz	r2, 8005350 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800534c:	4319      	orrs	r1, r3
 800534e:	e001      	b.n	8005354 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 8005350:	ea23 0101 	bic.w	r1, r3, r1
 8005354:	8181      	strh	r1, [r0, #12]
 8005356:	4770      	bx	lr

08005358 <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8005358:	8281      	strh	r1, [r0, #20]
 800535a:	4770      	bx	lr

0800535c <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800535c:	430a      	orrs	r2, r1
 800535e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8005362:	4770      	bx	lr

08005364 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005364:	8983      	ldrh	r3, [r0, #12]
 8005366:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005368:	b10a      	cbz	r2, 800536e <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800536a:	4319      	orrs	r1, r3
 800536c:	e001      	b.n	8005372 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 800536e:	ea23 0101 	bic.w	r1, r3, r1
 8005372:	8181      	strh	r1, [r0, #12]
 8005374:	4770      	bx	lr

08005376 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 8005376:	8903      	ldrh	r3, [r0, #8]
 8005378:	f023 0307 	bic.w	r3, r3, #7
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	8103      	strh	r3, [r0, #8]
 8005382:	4770      	bx	lr

08005384 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800538e:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005390:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005392:	8903      	ldrh	r3, [r0, #8]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f043 0307 	orr.w	r3, r3, #7
 800539a:	8103      	strh	r3, [r0, #8]
 800539c:	4770      	bx	lr

0800539e <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 800539e:	b538      	push	{r3, r4, r5, lr}
 80053a0:	460d      	mov	r5, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80053a2:	2d60      	cmp	r5, #96	; 0x60
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80053a4:	4611      	mov	r1, r2
 80053a6:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80053a8:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80053ac:	d102      	bne.n	80053b4 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80053ae:	f7ff fde8 	bl	8004f82 <TI2_Config>
 80053b2:	e001      	b.n	80053b8 <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80053b4:	f7ff fdcc 	bl	8004f50 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b8:	8921      	ldrh	r1, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80053ba:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80053be:	0409      	lsls	r1, r1, #16
 80053c0:	0c09      	lsrs	r1, r1, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80053c2:	4329      	orrs	r1, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c4:	8121      	strh	r1, [r4, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80053c6:	8923      	ldrh	r3, [r4, #8]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f043 0307 	orr.w	r3, r3, #7
 80053ce:	8123      	strh	r3, [r4, #8]
 80053d0:	bd38      	pop	{r3, r4, r5, pc}

080053d2 <TIM_ETRConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRConfig(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                   u16 ExtTRGFilter)
{
 80053d2:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80053d4:	8904      	ldrh	r4, [r0, #8]
 80053d6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 80053da:	b2e4      	uxtb	r4, r4
 80053dc:	4323      	orrs	r3, r4
 80053de:	b29b      	uxth	r3, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 80053e0:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	8101      	strh	r1, [r0, #8]
 80053e4:	bd10      	pop	{r4, pc}

080053e6 <TIM_ETRClockMode1Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                             u16 ExtTRGFilter)
{
 80053e6:	b510      	push	{r4, lr}
 80053e8:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80053ea:	f7ff fff2 	bl	80053d2 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ee:	8923      	ldrh	r3, [r4, #8]
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
 80053f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 80053f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fc:	8123      	strh	r3, [r4, #8]
 80053fe:	bd10      	pop	{r4, pc}

08005400 <TIM_ETRClockMode2Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, 
                             u16 TIM_ExtTRGPolarity, u16 ExtTRGFilter)
{
 8005400:	b510      	push	{r4, lr}
 8005402:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8005404:	f7ff ffe5 	bl	80053d2 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 8005408:	8923      	ldrh	r3, [r4, #8]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005410:	8123      	strh	r3, [r4, #8]
 8005412:	bd10      	pop	{r4, pc}

08005414 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8005414:	8501      	strh	r1, [r0, #40]	; 0x28

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8005416:	8282      	strh	r2, [r0, #20]
 8005418:	4770      	bx	lr

0800541a <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800541a:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	059b      	lsls	r3, r3, #22
 8005422:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8005424:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8005426:	8001      	strh	r1, [r0, #0]
 8005428:	4770      	bx	lr

0800542a <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800542a:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005434:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005436:	8101      	strh	r1, [r0, #8]
 8005438:	4770      	bx	lr

0800543a <TIM_EncoderInterfaceConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 800543a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800543c:	8906      	ldrh	r6, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800543e:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005440:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005442:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005448:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
 800544c:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005450:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005454:	0424      	lsls	r4, r4, #16
 8005456:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005458:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 800545a:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 800545c:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 800545e:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005462:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 8005466:	4331      	orrs	r1, r6

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 8005468:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 800546c:	b29d      	uxth	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546e:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005470:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005472:	8405      	strh	r5, [r0, #32]
 8005474:	bd70      	pop	{r4, r5, r6, pc}

08005476 <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 8005476:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8005480:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005482:	8301      	strh	r1, [r0, #24]
 8005484:	4770      	bx	lr

08005486 <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 8005486:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 8005488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548c:	041b      	lsls	r3, r3, #16
 800548e:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 8005490:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005494:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005496:	8301      	strh	r1, [r0, #24]
 8005498:	4770      	bx	lr

0800549a <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800549a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 800549c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80054a4:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80054a6:	8381      	strh	r1, [r0, #28]
 80054a8:	4770      	bx	lr

080054aa <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80054aa:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 80054ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 80054b4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80054b8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80054ba:	8381      	strh	r1, [r0, #28]
 80054bc:	4770      	bx	lr

080054be <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 80054be:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054c0:	b119      	cbz	r1, 80054ca <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c8:	e003      	b.n	80054d2 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 80054ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ce:	059b      	lsls	r3, r3, #22
 80054d0:	0d9b      	lsrs	r3, r3, #22
 80054d2:	8003      	strh	r3, [r0, #0]
 80054d4:	4770      	bx	lr

080054d6 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 80054d6:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054d8:	b119      	cbz	r1, 80054e2 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	e003      	b.n	80054ea <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 80054e2:	f023 0304 	bic.w	r3, r3, #4
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	8083      	strh	r3, [r0, #4]
 80054ec:	4770      	bx	lr

080054ee <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 80054ee:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80054f0:	b119      	cbz	r1, 80054fa <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	e003      	b.n	8005502 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 80054fa:	f023 0308 	bic.w	r3, r3, #8
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	8083      	strh	r3, [r0, #4]
 8005504:	4770      	bx	lr

08005506 <TIM_CCPreloadControl>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 8005506:	8883      	ldrh	r3, [r0, #4]
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005508:	b119      	cbz	r1, 8005512 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 800550a:	b29b      	uxth	r3, r3
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	e003      	b.n	800551a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	8083      	strh	r3, [r0, #4]
 800551c:	4770      	bx	lr

0800551e <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800551e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 8005520:	f023 0308 	bic.w	r3, r3, #8
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005528:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800552a:	8301      	strh	r1, [r0, #24]
 800552c:	4770      	bx	lr

0800552e <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800552e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 8005530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 8005538:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800553c:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800553e:	8301      	strh	r1, [r0, #24]
 8005540:	4770      	bx	lr

08005542 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005542:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 8005544:	f023 0308 	bic.w	r3, r3, #8
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800554c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800554e:	8381      	strh	r1, [r0, #28]
 8005550:	4770      	bx	lr

08005552 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005552:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 8005554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 800555c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005560:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005562:	8381      	strh	r1, [r0, #28]
 8005564:	4770      	bx	lr

08005566 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005566:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 8005568:	f023 0304 	bic.w	r3, r3, #4
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8005570:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005572:	8301      	strh	r1, [r0, #24]
 8005574:	4770      	bx	lr

08005576 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005576:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 8005578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 8005580:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005584:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005586:	8301      	strh	r1, [r0, #24]
 8005588:	4770      	bx	lr

0800558a <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800558a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 800558c:	f023 0304 	bic.w	r3, r3, #4
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8005594:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005596:	8381      	strh	r1, [r0, #28]
 8005598:	4770      	bx	lr

0800559a <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800559a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 800559c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 80055a4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80055a8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80055aa:	8381      	strh	r1, [r0, #28]
 80055ac:	4770      	bx	lr

080055ae <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80055ae:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 80055b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80055b8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80055ba:	8301      	strh	r1, [r0, #24]
 80055bc:	4770      	bx	lr

080055be <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80055be:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 80055c0:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 80055c4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80055c8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	8301      	strh	r1, [r0, #24]
 80055cc:	4770      	bx	lr

080055ce <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80055ce:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 80055d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80055d8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80055da:	8381      	strh	r1, [r0, #28]
 80055dc:	4770      	bx	lr

080055de <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80055de:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 80055e0:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 80055e4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80055e8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80055ea:	8381      	strh	r1, [r0, #28]
 80055ec:	4770      	bx	lr

080055ee <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80055ee:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 80055f0:	f023 0302 	bic.w	r3, r3, #2
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80055f8:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80055fa:	8401      	strh	r1, [r0, #32]
 80055fc:	4770      	bx	lr

080055fe <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80055fe:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 8005600:	f023 0308 	bic.w	r3, r3, #8
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8005608:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800560a:	8401      	strh	r1, [r0, #32]
 800560c:	4770      	bx	lr

0800560e <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800560e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 8005610:	f023 0320 	bic.w	r3, r3, #32
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 8005618:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 800561c:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800561e:	8401      	strh	r1, [r0, #32]
 8005620:	4770      	bx	lr

08005622 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8005622:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 8005624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 800562c:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8005630:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005632:	8401      	strh	r1, [r0, #32]
 8005634:	4770      	bx	lr

08005636 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005636:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 8005638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800563c:	041b      	lsls	r3, r3, #16
 800563e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 8005640:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005644:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005646:	8401      	strh	r1, [r0, #32]
 8005648:	4770      	bx	lr

0800564a <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800564a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 800564c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 8005654:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005658:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800565a:	8401      	strh	r1, [r0, #32]
 800565c:	4770      	bx	lr

0800565e <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800565e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005664:	041b      	lsls	r3, r3, #16
 8005666:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 8005668:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800566c:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800566e:	8401      	strh	r1, [r0, #32]
 8005670:	4770      	bx	lr

08005672 <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005672:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCx)
{
 8005674:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005676:	b29c      	uxth	r4, r3
 8005678:	2301      	movs	r3, #1
 800567a:	408b      	lsls	r3, r1
 800567c:	ea24 0303 	bic.w	r3, r4, r3
 8005680:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 8005682:	8c03      	ldrh	r3, [r0, #32]
 8005684:	408a      	lsls	r2, r1
 8005686:	4313      	orrs	r3, r2
 8005688:	b29b      	uxth	r3, r3
 800568a:	8403      	strh	r3, [r0, #32]
 800568c:	bd10      	pop	{r4, pc}

0800568e <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 800568e:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxNCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCxN)
{
 8005690:	b510      	push	{r4, lr}
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005692:	b29c      	uxth	r4, r3
 8005694:	2304      	movs	r3, #4
 8005696:	408b      	lsls	r3, r1
 8005698:	ea24 0303 	bic.w	r3, r4, r3
 800569c:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 800569e:	8c03      	ldrh	r3, [r0, #32]
 80056a0:	408a      	lsls	r2, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8403      	strh	r3, [r0, #32]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80056aa:	8c03      	ldrh	r3, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 80056ac:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80056ae:	b29c      	uxth	r4, r3
 80056b0:	2301      	movs	r3, #1
 80056b2:	408b      	lsls	r3, r1
 80056b4:	ea24 0303 	bic.w	r3, r4, r3
 80056b8:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80056ba:	f021 0308 	bic.w	r3, r1, #8
 80056be:	3018      	adds	r0, #24
 80056c0:	b93b      	cbnz	r3, 80056d2 <TIM_SelectOCxM+0x28>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 80056c2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80056c6:	0849      	lsrs	r1, r1, #1
 80056c8:	5844      	ldr	r4, [r0, r1]
 80056ca:	4023      	ands	r3, r4
 80056cc:	5043      	str	r3, [r0, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 80056ce:	5843      	ldr	r3, [r0, r1]
 80056d0:	e00a      	b.n	80056e8 <TIM_SelectOCxM+0x3e>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 80056d2:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80056d6:	3904      	subs	r1, #4
 80056d8:	f3c1 014e 	ubfx	r1, r1, #1, #15
 80056dc:	5844      	ldr	r4, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 80056de:	0212      	lsls	r2, r2, #8

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 80056e0:	4023      	ands	r3, r4
 80056e2:	5043      	str	r3, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 80056e4:	5843      	ldr	r3, [r0, r1]
 80056e6:	b292      	uxth	r2, r2
 80056e8:	431a      	orrs	r2, r3
 80056ea:	5042      	str	r2, [r0, r1]
 80056ec:	bd10      	pop	{r4, pc}

080056ee <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 80056ee:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80056f0:	b119      	cbz	r1, 80056fa <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f043 0302 	orr.w	r3, r3, #2
 80056f8:	e003      	b.n	8005702 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 80056fa:	f023 0302 	bic.w	r3, r3, #2
 80056fe:	059b      	lsls	r3, r3, #22
 8005700:	0d9b      	lsrs	r3, r3, #22
 8005702:	8003      	strh	r3, [r0, #0]
 8005704:	4770      	bx	lr

08005706 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 8005706:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8005708:	b119      	cbz	r1, 8005712 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 800570a:	b29b      	uxth	r3, r3
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	e003      	b.n	800571a <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 8005712:	f023 0304 	bic.w	r3, r3, #4
 8005716:	059b      	lsls	r3, r3, #22
 8005718:	0d9b      	lsrs	r3, r3, #22
 800571a:	8003      	strh	r3, [r0, #0]
 800571c:	4770      	bx	lr

0800571e <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 800571e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005720:	b119      	cbz	r1, 800572a <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 8005722:	b29b      	uxth	r3, r3
 8005724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005728:	e003      	b.n	8005732 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 800572a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	8083      	strh	r3, [r0, #4]
 8005734:	4770      	bx	lr

08005736 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 8005736:	8803      	ldrh	r3, [r0, #0]
 8005738:	f023 0308 	bic.w	r3, r3, #8
 800573c:	059b      	lsls	r3, r3, #22
 800573e:	0d9b      	lsrs	r3, r3, #22
 8005740:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8005742:	8803      	ldrh	r3, [r0, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	4319      	orrs	r1, r3
 8005748:	8001      	strh	r1, [r0, #0]
 800574a:	4770      	bx	lr

0800574c <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 800574c:	8883      	ldrh	r3, [r0, #4]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8005758:	8883      	ldrh	r3, [r0, #4]
 800575a:	b29b      	uxth	r3, r3
 800575c:	4319      	orrs	r1, r3
 800575e:	8081      	strh	r1, [r0, #4]
 8005760:	4770      	bx	lr

08005762 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 8005762:	8903      	ldrh	r3, [r0, #8]
 8005764:	f023 0307 	bic.w	r3, r3, #7
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800576e:	8903      	ldrh	r3, [r0, #8]
 8005770:	b29b      	uxth	r3, r3
 8005772:	4319      	orrs	r1, r3
 8005774:	8101      	strh	r1, [r0, #8]
 8005776:	4770      	bx	lr

08005778 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 8005778:	8903      	ldrh	r3, [r0, #8]
 800577a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8005784:	8903      	ldrh	r3, [r0, #8]
 8005786:	b29b      	uxth	r3, r3
 8005788:	4319      	orrs	r1, r3
 800578a:	8101      	strh	r1, [r0, #8]
 800578c:	4770      	bx	lr

0800578e <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800578e:	8481      	strh	r1, [r0, #36]	; 0x24
 8005790:	4770      	bx	lr

08005792 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005792:	8581      	strh	r1, [r0, #44]	; 0x2c
 8005794:	4770      	bx	lr

08005796 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005796:	8681      	strh	r1, [r0, #52]	; 0x34
 8005798:	4770      	bx	lr

0800579a <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800579a:	8701      	strh	r1, [r0, #56]	; 0x38
 800579c:	4770      	bx	lr

0800579e <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800579e:	8781      	strh	r1, [r0, #60]	; 0x3c
 80057a0:	4770      	bx	lr

080057a2 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80057a2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80057a6:	4770      	bx	lr

080057a8 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 80057a8:	8b03      	ldrh	r3, [r0, #24]
 80057aa:	f023 030c 	bic.w	r3, r3, #12
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80057b4:	8b03      	ldrh	r3, [r0, #24]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	4319      	orrs	r1, r3
 80057ba:	8301      	strh	r1, [r0, #24]
 80057bc:	4770      	bx	lr

080057be <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 80057be:	8b03      	ldrh	r3, [r0, #24]
 80057c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 80057ca:	8b03      	ldrh	r3, [r0, #24]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80057d2:	b289      	uxth	r1, r1
 80057d4:	8301      	strh	r1, [r0, #24]
 80057d6:	4770      	bx	lr

080057d8 <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80057dc:	8849      	ldrh	r1, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80057de:	88a2      	ldrh	r2, [r4, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80057e0:	2900      	cmp	r1, #0
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80057e2:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80057e6:	bf0c      	ite	eq
 80057e8:	2702      	moveq	r7, #2
 80057ea:	2700      	movne	r7, #0
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80057ec:	2a01      	cmp	r2, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80057ee:	4605      	mov	r5, r0
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80057f0:	bf0c      	ite	eq
 80057f2:	2602      	moveq	r6, #2
 80057f4:	2601      	movne	r6, #1
 80057f6:	8923      	ldrh	r3, [r4, #8]
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80057f8:	f1be 0f00 	cmp.w	lr, #0
 80057fc:	d111      	bne.n	8005822 <TIM_PWMIConfig+0x4a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80057fe:	f7ff fba7 	bl	8004f50 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005802:	4628      	mov	r0, r5
 8005804:	88e1      	ldrh	r1, [r4, #6]
 8005806:	f7ff ffcf 	bl	80057a8 <TIM_SetIC1Prescaler>

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800580a:	4628      	mov	r0, r5
 800580c:	4639      	mov	r1, r7
 800580e:	4632      	mov	r2, r6
 8005810:	8923      	ldrh	r3, [r4, #8]
 8005812:	f7ff fbb6 	bl	8004f82 <TI2_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005816:	4628      	mov	r0, r5
 8005818:	88e1      	ldrh	r1, [r4, #6]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800581a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800581e:	f7ff bfce 	b.w	80057be <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005822:	f7ff fbae 	bl	8004f82 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005826:	4628      	mov	r0, r5
 8005828:	88e1      	ldrh	r1, [r4, #6]
 800582a:	f7ff ffc8 	bl	80057be <TIM_SetIC2Prescaler>

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800582e:	4628      	mov	r0, r5
 8005830:	4639      	mov	r1, r7
 8005832:	4632      	mov	r2, r6
 8005834:	8923      	ldrh	r3, [r4, #8]
 8005836:	f7ff fb8b 	bl	8004f50 <TI1_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800583a:	4628      	mov	r0, r5
 800583c:	88e1      	ldrh	r1, [r4, #6]
  }
}
 800583e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005842:	f7ff bfb1 	b.w	80057a8 <TIM_SetIC1Prescaler>

08005846 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 8005846:	8b83      	ldrh	r3, [r0, #28]
 8005848:	f023 030c 	bic.w	r3, r3, #12
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	0c1b      	lsrs	r3, r3, #16
 8005850:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8005852:	8b83      	ldrh	r3, [r0, #28]
 8005854:	b29b      	uxth	r3, r3
 8005856:	4319      	orrs	r1, r3
 8005858:	8381      	strh	r1, [r0, #28]
 800585a:	4770      	bx	lr

0800585c <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 800585c:	8b83      	ldrh	r3, [r0, #28]
 800585e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 8005868:	8b83      	ldrh	r3, [r0, #28]
 800586a:	b29b      	uxth	r3, r3
 800586c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005870:	b289      	uxth	r1, r1
 8005872:	8381      	strh	r1, [r0, #28]
 8005874:	4770      	bx	lr

08005876 <TIM_ICInit>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005878:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800587a:	880e      	ldrh	r6, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800587c:	4604      	mov	r4, r0
 800587e:	8849      	ldrh	r1, [r1, #2]
 8005880:	88aa      	ldrh	r2, [r5, #4]
 8005882:	892b      	ldrh	r3, [r5, #8]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005884:	b93e      	cbnz	r6, 8005896 <TIM_ICInit+0x20>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005886:	f7ff fb63 	bl	8004f50 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800588a:	4620      	mov	r0, r4
 800588c:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800588e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005892:	f7ff bf89 	b.w	80057a8 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005896:	2e04      	cmp	r6, #4
 8005898:	d107      	bne.n	80058aa <TIM_ICInit+0x34>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800589a:	f7ff fb72 	bl	8004f82 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800589e:	4620      	mov	r0, r4
 80058a0:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80058a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80058a6:	f7ff bf8a 	b.w	80057be <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80058aa:	2e08      	cmp	r6, #8
 80058ac:	f8b5 e006 	ldrh.w	lr, [r5, #6]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80058b0:	8c05      	ldrh	r5, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80058b2:	d11c      	bne.n	80058ee <TIM_ICInit+0x78>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80058b4:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80058b8:	042d      	lsls	r5, r5, #16
 80058ba:	0c2d      	lsrs	r5, r5, #16
 80058bc:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 80058be:	8b87      	ldrh	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 80058c0:	8c06      	ldrh	r6, [r0, #32]
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;

  tmpccmr2 = TIMx->CCMR2;
 80058c2:	b2bf      	uxth	r7, r7
  tmpccer = TIMx->CCER;
 80058c4:	b2b6      	uxth	r6, r6
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 80058c6:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
 80058ca:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 80058ce:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  tmpccer |= tmp | CCER_CC3E_Set;
 80058d2:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 80058d6:	b29f      	uxth	r7, r3
 80058d8:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80058da:	433a      	orrs	r2, r7

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80058dc:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058e0:	8382      	strh	r2, [r0, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80058e2:	4671      	mov	r1, lr
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 80058e4:	8406      	strh	r6, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80058e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80058ea:	f7ff bfac 	b.w	8005846 <TIM_SetIC3Prescaler>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 80058ee:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80058f2:	042d      	lsls	r5, r5, #16
 80058f4:	0c2d      	lsrs	r5, r5, #16
 80058f6:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 80058f8:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80058fa:	8c07      	ldrh	r7, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80058fc:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8005900:	052d      	lsls	r5, r5, #20

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;

  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8005902:	b2bf      	uxth	r7, r7
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005904:	0d2d      	lsrs	r5, r5, #20
 8005906:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
 800590a:	f427 5200 	bic.w	r2, r7, #8192	; 0x2000
  tmpccer |= tmp | CCER_CC4E_Set;
 800590e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005912:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005916:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005918:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 800591a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800591e:	8383      	strh	r3, [r0, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005920:	4671      	mov	r1, lr
  }
}
 8005922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer ;
 8005926:	8402      	strh	r2, [r0, #32]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005928:	f7ff bf98 	b.w	800585c <TIM_SetIC4Prescaler>

0800592c <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 800592c:	8803      	ldrh	r3, [r0, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005932:	8803      	ldrh	r3, [r0, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	4319      	orrs	r1, r3
 8005938:	8001      	strh	r1, [r0, #0]
 800593a:	4770      	bx	lr

0800593c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800593c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 800593e:	b280      	uxth	r0, r0
 8005940:	4770      	bx	lr

08005942 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005942:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8005944:	b280      	uxth	r0, r0
 8005946:	4770      	bx	lr

08005948 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005948:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 800594a:	b280      	uxth	r0, r0
 800594c:	4770      	bx	lr

0800594e <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800594e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8005952:	b280      	uxth	r0, r0
 8005954:	4770      	bx	lr

08005956 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005956:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8005958:	b280      	uxth	r0, r0
 800595a:	4770      	bx	lr

0800595c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800595c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800595e:	b280      	uxth	r0, r0
 8005960:	4770      	bx	lr

08005962 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 8005962:	8a03      	ldrh	r3, [r0, #16]
 8005964:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005966:	bf14      	ite	ne
 8005968:	2001      	movne	r0, #1
 800596a:	2000      	moveq	r0, #0
 800596c:	4770      	bx	lr

0800596e <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 800596e:	43c9      	mvns	r1, r1
 8005970:	b289      	uxth	r1, r1
 8005972:	8201      	strh	r1, [r0, #16]
 8005974:	4770      	bx	lr

08005976 <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005976:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8005978:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 800597a:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 800597e:	b292      	uxth	r2, r2

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005980:	d003      	beq.n	800598a <TIM_GetITStatus+0x14>
 8005982:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8005984:	bf14      	ite	ne
 8005986:	2001      	movne	r0, #1
 8005988:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800598a:	4770      	bx	lr

0800598c <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 800598c:	43c9      	mvns	r1, r1
 800598e:	b289      	uxth	r1, r1
 8005990:	8201      	strh	r1, [r0, #16]
 8005992:	4770      	bx	lr

08005994 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005994:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8005996:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <USART_DeInit+0x8c>)
 8005998:	4298      	cmp	r0, r3
 800599a:	d02c      	beq.n	80059f6 <USART_DeInit+0x62>
 800599c:	d808      	bhi.n	80059b0 <USART_DeInit+0x1c>
 800599e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80059a2:	4298      	cmp	r0, r3
 80059a4:	d017      	beq.n	80059d6 <USART_DeInit+0x42>
 80059a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059aa:	4298      	cmp	r0, r3
 80059ac:	d01b      	beq.n	80059e6 <USART_DeInit+0x52>
 80059ae:	bd08      	pop	{r3, pc}
 80059b0:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <USART_DeInit+0x90>)
 80059b2:	4298      	cmp	r0, r3
 80059b4:	d027      	beq.n	8005a06 <USART_DeInit+0x72>
 80059b6:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80059ba:	4298      	cmp	r0, r3
 80059bc:	d12f      	bne.n	8005a1e <USART_DeInit+0x8a>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80059be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80059c2:	2101      	movs	r1, #1
 80059c4:	f7ff fa10 	bl	8004de8 <RCC_APB2PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 80059c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  switch (*(u32*)&USARTx)
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80059cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80059d0:	2100      	movs	r1, #0
 80059d2:	f7ff ba09 	b.w	8004de8 <RCC_APB2PeriphResetCmd>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80059d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80059da:	2101      	movs	r1, #1
 80059dc:	f7ff fa10 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80059e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80059e4:	e016      	b.n	8005a14 <USART_DeInit+0x80>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80059e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80059ea:	2101      	movs	r1, #1
 80059ec:	f7ff fa08 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80059f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80059f4:	e00e      	b.n	8005a14 <USART_DeInit+0x80>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80059f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80059fa:	2101      	movs	r1, #1
 80059fc:	f7ff fa00 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8005a00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005a04:	e006      	b.n	8005a14 <USART_DeInit+0x80>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8005a06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	f7ff f9f8 	bl	8004e00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005a10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a14:	2100      	movs	r1, #0
      break;            

    default:
      break;
  }
}
 8005a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005a1a:	f7ff b9f1 	b.w	8004e00 <RCC_APB1PeriphResetCmd>
 8005a1e:	bd08      	pop	{r3, pc}
 8005a20:	40004c00 	andmi	r4, r0, r0, lsl #24
 8005a24:	40005000 	andmi	r5, r0, r0

08005a28 <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005a28:	b530      	push	{r4, r5, lr}
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	4604      	mov	r4, r0
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005a2e:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005a30:	88ca      	ldrh	r2, [r1, #6]
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005a32:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005a34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005a38:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005a3a:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005a3c:	8982      	ldrh	r2, [r0, #12]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005a3e:	8909      	ldrh	r1, [r1, #8]
 8005a40:	88ab      	ldrh	r3, [r5, #4]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005a42:	b292      	uxth	r2, r2

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005a44:	430b      	orrs	r3, r1
 8005a46:	8969      	ldrh	r1, [r5, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005a48:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005a4c:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005a4e:	f022 020c 	bic.w	r2, r2, #12

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005a52:	4313      	orrs	r3, r2
 8005a54:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005a56:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005a58:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005a5a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005a5c:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005a62:	b087      	sub	sp, #28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005a64:	4313      	orrs	r3, r2

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8005a66:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005a68:	a801      	add	r0, sp, #4
 8005a6a:	f7ff f957 	bl	8004d1c <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005a6e:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005a70:	9a04      	ldr	r2, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005a72:	490e      	ldr	r1, [pc, #56]	; (8005aac <USART_Init+0x84>)
 8005a74:	428c      	cmp	r4, r1
 8005a76:	bf18      	it	ne
 8005a78:	461a      	movne	r2, r3
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8005a7a:	2319      	movs	r3, #25
 8005a7c:	4353      	muls	r3, r2
 8005a7e:	682a      	ldr	r2, [r5, #0]
 8005a80:	0092      	lsls	r2, r2, #2
 8005a82:	fbb3 f2f2 	udiv	r2, r3, r2
  tmpreg = (integerdivider / 0x64) << 0x04;
 8005a86:	2364      	movs	r3, #100	; 0x64
 8005a88:	fbb2 f0f3 	udiv	r0, r2, r3
 8005a8c:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8005a8e:	0901      	lsrs	r1, r0, #4
 8005a90:	fb03 2211 	mls	r2, r3, r1, r2
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8005a94:	0112      	lsls	r2, r2, #4
 8005a96:	3232      	adds	r2, #50	; 0x32
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	4303      	orrs	r3, r0

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	8123      	strh	r3, [r4, #8]
}
 8005aa6:	b007      	add	sp, #28
 8005aa8:	bd30      	pop	{r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	40013800 	andmi	r3, r1, r0, lsl #16

08005ab0 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8005ab0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005ab4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005ab6:	220c      	movs	r2, #12
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8005abc:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8005abe:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005ac0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8005ac2:	8183      	strh	r3, [r0, #12]
 8005ac4:	4770      	bx	lr

08005ac6 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005ac6:	880b      	ldrh	r3, [r1, #0]
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005ac8:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005aca:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005acc:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005ace:	4323      	orrs	r3, r4
 8005ad0:	888c      	ldrh	r4, [r1, #4]
 8005ad2:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005ad4:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005ad6:	4323      	orrs	r3, r4
 8005ad8:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005ada:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005ae2:	8203      	strh	r3, [r0, #16]
 8005ae4:	bd10      	pop	{r4, pc}

08005ae6 <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005aea:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005aec:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005aee:	80c3      	strh	r3, [r0, #6]
 8005af0:	4770      	bx	lr

08005af2 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005af2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005af4:	b119      	cbz	r1, 8005afe <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005afc:	e003      	b.n	8005b06 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	0c1b      	lsrs	r3, r3, #16
 8005b06:	8183      	strh	r3, [r0, #12]
 8005b08:	4770      	bx	lr

08005b0a <USART_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005b0a:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005b0c:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005b10:	2301      	movs	r3, #1
 8005b12:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005b16:	2c01      	cmp	r4, #1
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005b18:	fa03 f301 	lsl.w	r3, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005b1c:	d101      	bne.n	8005b22 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8005b1e:	300c      	adds	r0, #12
 8005b20:	e003      	b.n	8005b2a <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005b22:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8005b24:	bf0c      	ite	eq
 8005b26:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005b28:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8005b2a:	b112      	cbz	r2, 8005b32 <USART_ITConfig+0x28>
  {
    *(vu32*)usartxbase  |= itmask;
 8005b2c:	6802      	ldr	r2, [r0, #0]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	e002      	b.n	8005b38 <USART_ITConfig+0x2e>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8005b32:	6802      	ldr	r2, [r0, #0]
 8005b34:	ea22 0303 	bic.w	r3, r2, r3
 8005b38:	6003      	str	r3, [r0, #0]
 8005b3a:	bd10      	pop	{r4, pc}

08005b3c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005b3c:	8a83      	ldrh	r3, [r0, #20]
 8005b3e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005b40:	b10a      	cbz	r2, 8005b46 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005b42:	4319      	orrs	r1, r3
 8005b44:	e001      	b.n	8005b4a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 8005b46:	ea23 0101 	bic.w	r1, r3, r1
 8005b4a:	8281      	strh	r1, [r0, #20]
 8005b4c:	4770      	bx	lr

08005b4e <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8005b4e:	8a03      	ldrh	r3, [r0, #16]
 8005b50:	f023 030f 	bic.w	r3, r3, #15
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005b5a:	8a03      	ldrh	r3, [r0, #16]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4319      	orrs	r1, r3
 8005b60:	8201      	strh	r1, [r0, #16]
 8005b62:	4770      	bx	lr

08005b64 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8005b64:	8983      	ldrh	r3, [r0, #12]
 8005b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005b70:	8983      	ldrh	r3, [r0, #12]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4319      	orrs	r1, r3
 8005b76:	8181      	strh	r1, [r0, #12]
 8005b78:	4770      	bx	lr

08005b7a <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005b7a:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005b7c:	b119      	cbz	r1, 8005b86 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f043 0302 	orr.w	r3, r3, #2
 8005b84:	e003      	b.n	8005b8e <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8005b86:	f023 0302 	bic.w	r3, r3, #2
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	8183      	strh	r3, [r0, #12]
 8005b90:	4770      	bx	lr

08005b92 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8005b92:	8a03      	ldrh	r3, [r0, #16]
 8005b94:	f023 0320 	bic.w	r3, r3, #32
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8005b9e:	8a03      	ldrh	r3, [r0, #16]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	4319      	orrs	r1, r3
 8005ba4:	8201      	strh	r1, [r0, #16]
 8005ba6:	4770      	bx	lr

08005ba8 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005ba8:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005baa:	b119      	cbz	r1, 8005bb4 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb2:	e003      	b.n	8005bbc <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8005bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	8203      	strh	r3, [r0, #16]
 8005bbe:	4770      	bx	lr

08005bc0 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8005bc0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005bc4:	8081      	strh	r1, [r0, #4]
 8005bc6:	4770      	bx	lr

08005bc8 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8005bc8:	8880      	ldrh	r0, [r0, #4]
}
 8005bca:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005bce:	4770      	bx	lr

08005bd0 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8005bd0:	8983      	ldrh	r3, [r0, #12]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	8183      	strh	r3, [r0, #12]
 8005bda:	4770      	bx	lr

08005bdc <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8005bdc:	8b03      	ldrh	r3, [r0, #24]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8005be2:	8b03      	ldrh	r3, [r0, #24]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005bea:	8301      	strh	r1, [r0, #24]
 8005bec:	4770      	bx	lr

08005bee <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8005bee:	8b03      	ldrh	r3, [r0, #24]
 8005bf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bf4:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8005bf6:	8b03      	ldrh	r3, [r0, #24]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4319      	orrs	r1, r3
 8005bfc:	8301      	strh	r1, [r0, #24]
 8005bfe:	4770      	bx	lr

08005c00 <USART_SmartCardCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005c00:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005c02:	b119      	cbz	r1, 8005c0c <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f043 0320 	orr.w	r3, r3, #32
 8005c0a:	e003      	b.n	8005c14 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8005c0c:	f023 0320 	bic.w	r3, r3, #32
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	0c1b      	lsrs	r3, r3, #16
 8005c14:	8283      	strh	r3, [r0, #20]
 8005c16:	4770      	bx	lr

08005c18 <USART_SmartCardNACKCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005c18:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005c1a:	b119      	cbz	r1, 8005c24 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f043 0310 	orr.w	r3, r3, #16
 8005c22:	e003      	b.n	8005c2c <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8005c24:	f023 0310 	bic.w	r3, r3, #16
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	8283      	strh	r3, [r0, #20]
 8005c2e:	4770      	bx	lr

08005c30 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005c30:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005c32:	b119      	cbz	r1, 8005c3c <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f043 0308 	orr.w	r3, r3, #8
 8005c3a:	e003      	b.n	8005c44 <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8005c3c:	f023 0308 	bic.w	r3, r3, #8
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	8283      	strh	r3, [r0, #20]
 8005c46:	4770      	bx	lr

08005c48 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8005c48:	8a83      	ldrh	r3, [r0, #20]
 8005c4a:	f023 0304 	bic.w	r3, r3, #4
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005c54:	8a83      	ldrh	r3, [r0, #20]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4319      	orrs	r1, r3
 8005c5a:	8281      	strh	r1, [r0, #20]
 8005c5c:	4770      	bx	lr

08005c5e <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005c5e:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005c60:	b119      	cbz	r1, 8005c6a <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	e003      	b.n	8005c72 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8005c6a:	f023 0302 	bic.w	r3, r3, #2
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	8283      	strh	r3, [r0, #20]
 8005c74:	4770      	bx	lr

08005c76 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8005c76:	8803      	ldrh	r3, [r0, #0]
 8005c78:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005c7a:	bf14      	ite	ne
 8005c7c:	2001      	movne	r0, #1
 8005c7e:	2000      	moveq	r0, #0
 8005c80:	4770      	bx	lr

08005c82 <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8005c82:	43c9      	mvns	r1, r1
 8005c84:	b289      	uxth	r1, r1
 8005c86:	8001      	strh	r1, [r0, #0]
 8005c88:	4770      	bx	lr

08005c8a <USART_GetITStatus>:
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005c8a:	2301      	movs	r3, #1
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
 8005c8c:	b510      	push	{r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005c8e:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005c92:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005c96:	429c      	cmp	r4, r3
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005c98:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005c9c:	d101      	bne.n	8005ca2 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8005c9e:	8983      	ldrh	r3, [r0, #12]
 8005ca0:	e003      	b.n	8005caa <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005ca2:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8005ca4:	bf0c      	ite	eq
 8005ca6:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005ca8:	8a83      	ldrhne	r3, [r0, #20]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8005cae:	8802      	ldrh	r2, [r0, #0]
 8005cb0:	b292      	uxth	r2, r2

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005cb2:	b13b      	cbz	r3, 8005cc4 <USART_GetITStatus+0x3a>
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8005cb4:	0a09      	lsrs	r1, r1, #8
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	408b      	lsls	r3, r1
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005cba:	4213      	tst	r3, r2
  {
    bitstatus = SET;
 8005cbc:	bf14      	ite	ne
 8005cbe:	2001      	movne	r0, #1
 8005cc0:	2000      	moveq	r0, #0
 8005cc2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8005cc4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <USART_ClearITPendingBit>:
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
 8005cc8:	0a09      	lsrs	r1, r1, #8
 8005cca:	2301      	movs	r3, #1
 8005ccc:	408b      	lsls	r3, r1
  USARTx->SR = (u16)~itmask;
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8003      	strh	r3, [r0, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop

08005cd8 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8005cd8:	bf30      	wfi
    BX r14
 8005cda:	4770      	bx	lr

08005cdc <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8005cdc:	bf20      	wfe
    BX r14
 8005cde:	4770      	bx	lr

08005ce0 <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8005ce0:	bf40      	sev
    BX r14
 8005ce2:	4770      	bx	lr

08005ce4 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8005ce4:	f3bf 8f6f 	isb	sy
    BX r14
 8005ce8:	4770      	bx	lr

08005cea <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8005cea:	f3bf 8f4f 	dsb	sy
    BX r14
 8005cee:	4770      	bx	lr

08005cf0 <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8005cf0:	f3bf 8f5f 	dmb	sy
    BX r14
 8005cf4:	4770      	bx	lr

08005cf6 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8005cf6:	df01      	svc	1
    BX r14
 8005cf8:	4770      	bx	lr

08005cfa <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8005cfa:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8005cfe:	4770      	bx	lr

08005d00 <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8005d00:	f380 8814 	msr	CONTROL, r0
  ISB
 8005d04:	f3bf 8f6f 	isb	sy
  BX r14
 8005d08:	4770      	bx	lr

08005d0a <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8005d0a:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8005d0e:	4770      	bx	lr

08005d10 <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8005d10:	f380 8809 	msr	PSP, r0
    BX r14
 8005d14:	4770      	bx	lr

08005d16 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8005d16:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8005d1a:	4770      	bx	lr

08005d1c <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8005d1c:	f380 8808 	msr	MSP, r0
    BX r14
 8005d20:	4770      	bx	lr

08005d22 <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8005d22:	b672      	cpsid	i
  BX r14
 8005d24:	4770      	bx	lr

08005d26 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8005d26:	b662      	cpsie	i
  BX r14
 8005d28:	4770      	bx	lr

08005d2a <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8005d2a:	b671      	cpsid	f
  BX r14
 8005d2c:	4770      	bx	lr

08005d2e <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8005d2e:	b661      	cpsie	f
  BX r14
 8005d30:	4770      	bx	lr

08005d32 <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8005d32:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8005d36:	4770      	bx	lr

08005d38 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8005d38:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  BX r14
 8005d3c:	4770      	bx	lr

08005d3e <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8005d3e:	ba40      	rev16	r0, r0
  BX r14
 8005d40:	4770      	bx	lr

08005d42 <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8005d42:	ba00      	rev	r0, r0
  BX r14
 8005d44:	4770      	bx	lr
	...

08005d48 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8005d48:	4668      	mov	r0, sp
 8005d4a:	f020 0107 	bic.w	r1, r0, #7
 8005d4e:	468d      	mov	sp, r1
 8005d50:	b501      	push	{r0, lr}
 8005d52:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <Reset_Handler+0x3c>)
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <Reset_Handler+0x40>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8005d56:	490d      	ldr	r1, [pc, #52]	; (8005d8c <Reset_Handler+0x44>)
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	d204      	bcs.n	8005d66 <Reset_Handler+0x1e>
    {
        *(pulDest++) = *(pulSrc++);
 8005d5c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8005d60:	f843 1b04 	str.w	r1, [r3], #4
 8005d64:	e7f7      	b.n	8005d56 <Reset_Handler+0xe>
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <Reset_Handler+0x48>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8005d68:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <Reset_Handler+0x4c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d203      	bcs.n	8005d76 <Reset_Handler+0x2e>
    {
        *(pulDest++) = 0;
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f843 2b04 	str.w	r2, [r3], #4
 8005d74:	e7f8      	b.n	8005d68 <Reset_Handler+0x20>
    }

    //
    // Call the application's entry point.
    //
    main();
 8005d76:	f000 f80f 	bl	8005d98 <main>
}
 8005d7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8005d7e:	4685      	mov	sp, r0
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	08006170 	stmdaeq	r0, {r4, r5, r6, r8, sp, lr}
 8005d88:	20000000 	andcs	r0, r0, r0
 8005d8c:	20000018 	andcs	r0, r0, r8, lsl r0
 8005d90:	20000018 	andcs	r0, r0, r8, lsl r0
 8005d94:	2000021c 	andcs	r0, r0, ip, lsl r2

08005d98 <main>:
//////////////////////////   M A I N   L O O P   ////////////////////////
/////////////////////////////////////////////////////////////////////////


int main(void)
{
 8005d98:	b507      	push	{r0, r1, r2, lr}
    // --------------DO NOT TOUCH!!------------------------ //
    // NEVER!!! EVER!!!

    init_config();
 8005d9a:	f7fd ff37 	bl	8003c0c <init_config>
    // thats why we call it state :-)
    int state;


    state=INIT;
    infiniteTurn(MOTOR_down_left);
 8005d9e:	2004      	movs	r0, #4
 8005da0:	f7fd fad5 	bl	800334e <infiniteTurn>
    infiniteTurn(MOTOR_down_right);
 8005da4:	2003      	movs	r0, #3
 8005da6:	f7fd fad2 	bl	800334e <infiniteTurn>
    unsigned char field;

    setSpeed(MOTOR_down_left, 0);
 8005daa:	2004      	movs	r0, #4
 8005dac:	2100      	movs	r1, #0
 8005dae:	f7fd fb8e 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, 0);
 8005db2:	2100      	movs	r1, #0
 8005db4:	2003      	movs	r0, #3
 8005db6:	f7fd fb8a 	bl	80034ce <setSpeed>
    while(state!=STOP)
    {

        while (state==INIT) {
            // play some music
            init_music();
 8005dba:	f7fd fe28 	bl	8003a0e <init_music>
            // blink some lights
            init_lights();
 8005dbe:	f7fd fe67 	bl	8003a90 <init_lights>
        }


        while (state==GO_TO_CENTER) {  
            // the temporisation should be adapted
            GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8005dc2:	483a      	ldr	r0, [pc, #232]	; (8005eac <main+0x114>)
 8005dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dc8:	f7fe fc89 	bl	80046de <GPIO_SetBits>
            GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8005dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dd0:	4837      	ldr	r0, [pc, #220]	; (8005eb0 <main+0x118>)
 8005dd2:	f7fe fc86 	bl	80046e2 <GPIO_ResetBits>
            TxDString("\nGO TO CENTER\n") ;
 8005dd6:	4837      	ldr	r0, [pc, #220]	; (8005eb4 <main+0x11c>)
 8005dd8:	f7fd fab0 	bl	800333c <TxDString>
            // go straight assuming its a 4_wheeled robot to the center of the field
            setSpeed(MOTOR_down_left, speed_ini);
 8005ddc:	2004      	movs	r0, #4
 8005dde:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005de2:	f7fd fb74 	bl	80034ce <setSpeed>
            // /!\ since the motors are set in opposite directions, the speeds should
            //     be opposite for each side
            setSpeed(MOTOR_down_right, -speed_ini);
 8005de6:	2003      	movs	r0, #3
 8005de8:	4933      	ldr	r1, [pc, #204]	; (8005eb8 <main+0x120>)
 8005dea:	f7fd fb70 	bl	80034ce <setSpeed>

            // advance for 3s, maybe adapt...
            mDelay(3000);
 8005dee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005df2:	f7fd fddb 	bl	80039ac <mDelay>


        // begin the "seeking for an opponent" phase
        while (state==SEEKING) {
            // the robot starts spinning around
            GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8005df6:	482e      	ldr	r0, [pc, #184]	; (8005eb0 <main+0x118>)
 8005df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dfc:	f7fe fc6f 	bl	80046de <GPIO_SetBits>
            GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8005e00:	482b      	ldr	r0, [pc, #172]	; (8005eb0 <main+0x118>)
 8005e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e06:	f7fe fc6a 	bl	80046de <GPIO_SetBits>
            GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8005e0a:	4829      	ldr	r0, [pc, #164]	; (8005eb0 <main+0x118>)
 8005e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e10:	f7fe fc67 	bl	80046e2 <GPIO_ResetBits>
            setSpeed(MOTOR_down_left, speed_ini);
 8005e14:	2004      	movs	r0, #4
 8005e16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e1a:	f7fd fb58 	bl	80034ce <setSpeed>
            setSpeed(MOTOR_down_right, speed_ini);
 8005e1e:	2003      	movs	r0, #3
 8005e20:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e24:	f7fd fb53 	bl	80034ce <setSpeed>
            centerInfraRed(SENSOR, &field);
 8005e28:	f10d 0107 	add.w	r1, sp, #7
 8005e2c:	2064      	movs	r0, #100	; 0x64
 8005e2e:	f7fd fc4f 	bl	80036d0 <centerInfraRed>
            {
                TxDString("\nSEEKING SENSOR VALUE") ;
 8005e32:	4822      	ldr	r0, [pc, #136]	; (8005ebc <main+0x124>)
 8005e34:	f7fd fa82 	bl	800333c <TxDString>
                TxDByte16(field);
 8005e38:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005e3c:	f7fd fb26 	bl	800348c <TxDByte16>
                TxDString("\n") ;
 8005e40:	481f      	ldr	r0, [pc, #124]	; (8005ec0 <main+0x128>)
 8005e42:	f7fd fa7b 	bl	800333c <TxDString>
            }

        // opponent detection will result in an attitude change
        if (field >= thresholdInfrared)  // indeed this condition should be explicit
 8005e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e4a:	2b31      	cmp	r3, #49	; 0x31
 8005e4c:	ddd3      	ble.n	8005df6 <main+0x5e>
        }

        // the robot will focus the opponent and try to push him away,
        // as hard as possible
        while (state==CHASING) {
            GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8005e4e:	4818      	ldr	r0, [pc, #96]	; (8005eb0 <main+0x118>)
 8005e50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e54:	f7fe fc43 	bl	80046de <GPIO_SetBits>
            GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8005e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e5c:	4814      	ldr	r0, [pc, #80]	; (8005eb0 <main+0x118>)
 8005e5e:	f7fe fc40 	bl	80046e2 <GPIO_ResetBits>
            mDelay(100);
 8005e62:	2064      	movs	r0, #100	; 0x64
 8005e64:	f7fd fda2 	bl	80039ac <mDelay>
            setSpeed(MOTOR_down_left, speed_max);
 8005e68:	2004      	movs	r0, #4
 8005e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e6e:	f7fd fb2e 	bl	80034ce <setSpeed>
            setSpeed(MOTOR_down_right, -speed_max);
 8005e72:	2003      	movs	r0, #3
 8005e74:	4913      	ldr	r1, [pc, #76]	; (8005ec4 <main+0x12c>)
 8005e76:	f7fd fb2a 	bl	80034ce <setSpeed>
            centerInfraRed(SENSOR, &field);
 8005e7a:	f10d 0107 	add.w	r1, sp, #7
 8005e7e:	2064      	movs	r0, #100	; 0x64
 8005e80:	f7fd fc26 	bl	80036d0 <centerInfraRed>
            {
                TxDString("\nCHASING SENSOR VALUE") ;
 8005e84:	4810      	ldr	r0, [pc, #64]	; (8005ec8 <main+0x130>)
 8005e86:	f7fd fa59 	bl	800333c <TxDString>
                TxDByte16(field);
 8005e8a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005e8e:	f7fd fafd 	bl	800348c <TxDByte16>
                TxDString("\n") ;
 8005e92:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <main+0x128>)
 8005e94:	f7fd fa52 	bl	800333c <TxDString>
            }

            // if, for whatever reason, the robot does not detect any obstacle anymore
            // it returns to its seeking opponent phase
            if (field<thresholdInfrared/2)
 8005e98:	f89d 3007 	ldrb.w	r3, [sp, #7]
                state=SEEKING;
 8005e9c:	2b18      	cmp	r3, #24
 8005e9e:	bfcc      	ite	gt
 8005ea0:	2303      	movgt	r3, #3
 8005ea2:	2302      	movle	r3, #2

        }

        // the robot will focus the opponent and try to push him away,
        // as hard as possible
        while (state==CHASING) {
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d0d2      	beq.n	8005e4e <main+0xb6>
 8005ea8:	e7a5      	b.n	8005df6 <main+0x5e>
 8005eaa:	bf00      	nop
 8005eac:	40011000 	andmi	r1, r1, r0
 8005eb0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8005eb4:	08006137 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, sp, lr}
 8005eb8:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
 8005ebc:	08006146 	stmdaeq	r0, {r1, r2, r6, r8, sp, lr}
 8005ec0:	080060e2 	stmdaeq	r0, {r1, r5, r6, r7, sp, lr}
 8005ec4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
 8005ec8:	0800615c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sp, lr}

08005ecc <APBAHBPrescTable>:
 8005ecc:	00000000 	andeq	r0, r0, r0
 8005ed0:	04030201 	streq	r0, [r3], #-513	; 0x201
 8005ed4:	04030201 	streq	r0, [r3], #-513	; 0x201
 8005ed8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

08005edc <ADCPrescTable>:
 8005edc:	08060402 	stmdaeq	r6, {r1, sl}
 8005ee0:	354d430a 	strbcc	r4, [sp, #-778]	; 0x30a
 8005ee4:	666e6920 	strbtvs	r6, [lr], -r0, lsr #18
 8005ee8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 8005eec:	6f722065 	svcvs	0x00722065
 8005ef0:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 8005ef4:	6d206e6f 	stcvs	14, cr6, [r0, #-444]!	; 0xfffffe44
 8005ef8:	2065646f 	rsbcs	r6, r5, pc, ror #8
 8005efc:	0a746573 	beq	9d1f4d0 <_etext+0x1d1935c>
 8005f00:	4d430a00 	vstrmi	s1, [r3, #-0]
 8005f04:	6f6e2035 	svcvs	0x006e2035
 8005f08:	6c616d72 	stclvs	13, cr6, [r1], #-456	; 0xfffffe38
 8005f0c:	746f7220 	strbtvc	r7, [pc], #-544	; 8005f14 <ADCPrescTable+0x38>
 8005f10:	6f697461 	svcvs	0x00697461
 8005f14:	6f6d206e 	svcvs	0x006d206e
 8005f18:	73206564 			; <UNDEFINED> instruction: 0x73206564
 8005f1c:	000a7465 	andeq	r7, sl, r5, ror #8
 8005f20:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8005f24:	4658545f 			; <UNDEFINED> instruction: 0x4658545f
 8005f28:	3a4c4941 	bcc	9318434 <_etext+0x13122c0>
 8005f2c:	69614620 	stmdbvs	r1!, {r5, r9, sl, lr}^
 8005f30:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8005f34:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 8005f38:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
 8005f3c:	736e6920 	cmnvc	lr, #32, 18	; 0x80000
 8005f40:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 8005f44:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 8005f48:	63617020 	cmnvs	r1, #32
 8005f4c:	2174656b 	cmncs	r4, fp, ror #10
 8005f50:	4f43000a 	svcmi	0x0043000a
 8005f54:	545f4d4d 	ldrbpl	r4, [pc], #-3405	; 8005f5c <ADCPrescTable+0x80>
 8005f58:	52524558 	subspl	r4, r2, #88, 10	; 0x16000000
 8005f5c:	203a524f 	eorscs	r5, sl, pc, asr #4
 8005f60:	6f636e49 	svcvs	0x00636e49
 8005f64:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 8005f68:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 8005f6c:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 8005f70:	6f697463 	svcvs	0x00697463
 8005f74:	6170206e 	cmnvs	r0, lr, rrx
 8005f78:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8005f7c:	43000a21 	movwmi	r0, #2593	; 0xa21
 8005f80:	5f4d4d4f 	svcpl	0x004d4d4f
 8005f84:	41465852 	cmpmi	r6, r2, asr r8
 8005f88:	203a4c49 	eorscs	r4, sl, r9, asr #24
 8005f8c:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 8005f90:	67206465 	strvs	r6, [r0, -r5, ror #8]!
 8005f94:	73207465 			; <UNDEFINED> instruction: 0x73207465
 8005f98:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 8005f9c:	61702073 	cmnvs	r0, r3, ror r0
 8005fa0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8005fa4:	6f726620 	svcvs	0x00726620
 8005fa8:	6564206d 	strbvs	r2, [r4, #-109]!	; 0x6d
 8005fac:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
 8005fb0:	43000a21 	movwmi	r0, #2593	; 0xa21
 8005fb4:	5f4d4d4f 	svcpl	0x004d4d4f
 8005fb8:	41575852 	cmpmi	r7, r2, asr r8
 8005fbc:	4e495449 	cdpmi	4, 4, cr5, cr9, cr9, {2}
 8005fc0:	4e203a47 	vnmulmi.f32	s6, s0, s14
 8005fc4:	7220776f 	eorvc	r7, r0, #29097984	; 0x1bc0000
 8005fc8:	65696365 	strbvs	r6, [r9, #-869]!	; 0x365
 8005fcc:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
 8005fd0:	61747320 	cmnvs	r4, r0, lsr #6
 8005fd4:	20737574 	rsbscs	r7, r3, r4, ror r5
 8005fd8:	6b636170 	blvs	98de5a0 <_etext+0x18d842c>
 8005fdc:	0a217465 	beq	8863178 <_etext+0x85d004>
 8005fe0:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8005fe8 <ADCPrescTable+0x10c>
 8005fe4:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8005fe8:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
 8005fec:	3a54554f 	bcc	951b530 <_etext+0x15153bc>
 8005ff0:	65685420 	strbvs	r5, [r8, #-1056]!	; 0x420
 8005ff4:	69206572 	stmdbvs	r0!, {r1, r4, r5, r6, r8, sl, sp, lr}
 8005ff8:	6f6e2073 	svcvs	0x006e2073
 8005ffc:	61747320 	cmnvs	r4, r0, lsr #6
 8006000:	20737574 	rsbscs	r7, r3, r4, ror r5
 8006004:	6b636170 	blvs	98de5cc <_etext+0x18d8458>
 8006008:	0a217465 	beq	88631a4 <_etext+0x85d030>
 800600c:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8006014 <ADCPrescTable+0x138>
 8006010:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8006014:	52524f43 	subspl	r4, r2, #268	; 0x10c
 8006018:	3a545055 	bcc	951a174 <_etext+0x1514000>
 800601c:	636e4920 	cmnvs	lr, #32, 18	; 0x80000
 8006020:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
 8006024:	73207463 			; <UNDEFINED> instruction: 0x73207463
 8006028:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 800602c:	61702073 	cmnvs	r0, r3, ror r0
 8006030:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8006034:	54000a21 	strpl	r0, [r0], #-2593	; 0xa21
 8006038:	20736968 	rsbscs	r6, r3, r8, ror #18
 800603c:	75207369 	strvc	r7, [r0, #-873]!	; 0x369
 8006040:	6f6e6b6e 	svcvs	0x006e6b6e
 8006044:	65206e77 	strvs	r6, [r0, #-3703]!	; 0xe77
 8006048:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 800604c:	646f6320 	strbtvs	r6, [pc], #-800	; 8006054 <ADCPrescTable+0x178>
 8006050:	000a2165 	andeq	r2, sl, r5, ror #2
 8006054:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
 8006058:	6f762074 	svcvs	0x00762074
 800605c:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
 8006060:	72652065 	rsbvc	r2, r5, #101	; 0x65
 8006064:	21726f72 	cmncs	r2, r2, ror pc
 8006068:	6e41000a 	cdpvs	0, 4, cr0, cr1, cr10, {0}
 800606c:	20656c67 	rsbcs	r6, r5, r7, ror #24
 8006070:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 8006074:	72652074 	rsbvc	r2, r5, #116	; 0x74
 8006078:	21726f72 	cmncs	r2, r2, ror pc
 800607c:	764f000a 	strbvc	r0, [pc], -sl
 8006080:	65687265 	strbvs	r7, [r8, #-613]!	; 0x265
 8006084:	65207461 	strvs	r7, [r0, #-1121]!	; 0x461
 8006088:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 800608c:	4f000a21 	svcmi	0x00000a21
 8006090:	6f207475 	svcvs	0x00207475
 8006094:	61722066 	cmnvs	r2, r6, rrx
 8006098:	2065676e 	rsbcs	r6, r5, lr, ror #14
 800609c:	6f727265 	svcvs	0x00727265
 80060a0:	000a2172 	andeq	r2, sl, r2, ror r1
 80060a4:	63656843 	cmnvs	r5, #4390912	; 0x430000
 80060a8:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
 80060ac:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 80060b0:	0a21726f 	beq	8862a74 <_etext+0x85c900>
 80060b4:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xf00
 80060b8:	616f6c72 	smcvs	63170	; 0xf6c2
 80060bc:	72652064 	rsbvc	r2, r5, #100	; 0x64
 80060c0:	21726f72 	cmncs	r2, r2, ror pc
 80060c4:	6e49000a 	cdpvs	0, 4, cr0, cr9, cr10, {0}
 80060c8:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 80060cc:	6f697463 	svcvs	0x00697463
 80060d0:	6f63206e 	svcvs	0x0063206e
 80060d4:	65206564 	strvs	r6, [r0, #-1380]!	; 0x564
 80060d8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 80060dc:	21000a21 	tstcs	r0, r1, lsr #20
 80060e0:	000a2121 	andeq	r2, sl, r1, lsr #2
 80060e4:	6f72700a 	svcvs	0x0072700a
 80060e8:	6d656c62 	stclvs	12, cr6, [r5, #-392]!	; 0xfffffe78
 80060ec:	6f63202c 	svcvs	0x0063202c
 80060f0:	3d3d6564 	cfldr32cc	mvfx6, [sp, #-400]!	; 0xfffffe70
 80060f4:	72700a00 	rsbsvc	r0, r0, #0, 20
 80060f8:	656c626f 	strbvs	r6, [ip, #-623]!	; 0x26f
 80060fc:	63202c6d 			; <UNDEFINED> instruction: 0x63202c6d
 8006100:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8006104:	746f4d00 	strbtvc	r4, [pc], #-3328	; 800610c <ADCPrescTable+0x230>
 8006108:	6c20726f 	sfmvs	f7, 4, [r0], #-444	; 0xfffffe44
 800610c:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
 8006110:	6e6f2073 	mcrvs	0, 3, r2, cr15, cr3, {3}
 8006114:	0a2e2e2e 	beq	8b919d4 <_etext+0xb8b860>
 8006118:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
 800611c:	21216b6e 			; <UNDEFINED> instruction: 0x21216b6e
 8006120:	6f4d000a 	svcvs	0x004d000a
 8006124:	20726f74 	rsbscs	r6, r2, r4, ror pc
 8006128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 800612c:	6f207374 	svcvs	0x00207374
 8006130:	2e2e4646 	cfmadda32cs	mvax2, mvax4, mvfx14, mvfx6
 8006134:	0a000a2e 	beq	80089f4 <_etext+0x2880>
 8006138:	54204f47 	strtpl	r4, [r0], #-3911	; 0xf47
 800613c:	4543204f 	strbmi	r2, [r3, #-79]	; 0x4f
 8006140:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
 8006144:	530a000a 	movwpl	r0, #40970	; 0xa00a
 8006148:	494b4545 	stmdbmi	fp, {r0, r2, r6, r8, sl, lr}^
 800614c:	5320474e 			; <UNDEFINED> instruction: 0x5320474e
 8006150:	4f534e45 	svcmi	0x00534e45
 8006154:	41562052 	cmpmi	r6, r2, asr r0
 8006158:	0045554c 	subeq	r5, r5, ip, asr #10
 800615c:	4148430a 	cmpmi	r8, sl, lsl #6
 8006160:	474e4953 	smlsldmi	r4, lr, r3, r9
 8006164:	4e455320 	cdpmi	3, 4, cr5, cr5, cr0, {1}
 8006168:	20524f53 	subscs	r4, r2, r3, asr pc
 800616c:	554c4156 	strbpl	r4, [ip, #-342]	; 0x156
 8006170:	00000045 	andeq	r0, r0, r5, asr #32

Disassembly of section .data:

20000000 <CCR1_Val>:
20000000:	00000064 	andeq	r0, r0, r4, rrx

20000004 <Baudrate_PC>:
20000004:	0000e100 	andeq	lr, r0, r0, lsl #2

20000008 <id>:
20000008:	00000001 	andeq	r0, r0, r1

2000000a <GoalPos>:
2000000a:	03ff0000 	mvnseq	r0, #0
	...

20000010 <Baudrate_DXL>:
20000010:	000f4240 	andeq	r4, pc, r0, asr #4

20000014 <gbCommStatus>:
20000014:	00000001 	andeq	r0, r0, r1

Disassembly of section .bss:

20000018 <_sbss>:
	...

20000019 <gbRxBufferReadPointer>:
	...

2000001a <gbpRxInterruptBuffer>:
	...

2000011c <capture>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <gw1msCounter>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <gwTimingDelay>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <CommStatus>:
	...

20000129 <bMoving>:
	...

2000012a <Voltage>:
	...

2000012b <INDEX>:
	...

2000012c <wPresentPos>:
	...

2000012e <Position>:
	...

20000130 <giBusUsing>:
20000130:	00000000 	andeq	r0, r0, r0

20000134 <gbInstructionPacket>:
	...

200001d4 <gbRxGetLength>:
	...

200001d5 <gbRxPacketLength>:
	...

200001d6 <gbStatusPacket>:
	...

Disassembly of section ._usrstack:

2000021c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30353130 	eorscc	r3, r5, r0, lsr r1
  38:	20393235 	eorscs	r3, r9, r5, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <SCS_BASE+0x1fff12fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
  6c:	005d3737 	subseq	r3, sp, r7, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  14:	00000b30 	andeq	r0, r0, r0, lsr fp
  18:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
  1c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	2bd90002 	blcs	ff64003c <SCS_BASE+0x1f63203c>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
  3c:	00000090 	muleq	r0, r0, r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	315d0002 	cmpcc	sp, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
  5c:	00000062 	andeq	r0, r0, r2, rrx
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	34350002 	ldrtcc	r0, [r5], #-2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
  7c:	0000037c 	andeq	r0, r0, ip, ror r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	3b690002 	blcc	1a4009c <__Stack_Size+0x1a3fc9c>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
  9c:	00000480 	andeq	r0, r0, r0, lsl #9
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	44240002 	strtmi	r0, [r4], #-2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
  bc:	00000256 	andeq	r0, r0, r6, asr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	4b6b0002 	blmi	1ac00dc <__Stack_Size+0x1abfcdc>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	080047ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, lr}
  dc:	00000314 	andeq	r0, r0, r4, lsl r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	54d30002 	ldrbpl	r0, [r3], #2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08004ac0 	stmdaeq	r0, {r6, r7, r9, fp, lr}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	57990002 	ldrpl	r0, [r9, r2]
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	08004b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, lr}
 11c:	0000033c 	andeq	r0, r0, ip, lsr r3
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	600a0002 	andvs	r0, sl, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	62150002 	andsvs	r0, r5, #2
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
 15c:	00000a44 	andeq	r0, r0, r4, asr #20
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	81570002 	cmphi	r7, r2
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
 17c:	00000342 	andeq	r0, r0, r2, asr #6
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	8b830002 	blhi	fe0c019c <SCS_BASE+0x1e0b219c>
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08005cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, lr}
 19c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	8be80002 	blhi	ffa001bc <SCS_BASE+0x1f9f21bc>
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08005d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip, lr}
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00002bd5 	ldrdeq	r2, [r0], -r5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000007e1 	andeq	r0, r0, r1, ror #15
      10:	0003ac01 	andeq	sl, r3, r1, lsl #24
      14:	00010100 	andeq	r0, r1, r0, lsl #2
	...
      24:	33730200 	cmncc	r3, #0, 4
      28:	17020032 	smladxne	r2, r2, r0, r0
      2c:	00000030 	andeq	r0, r0, r0, lsr r0
      30:	3c050403 	cfstrscc	mvf0, [r5], {3}
      34:	03000009 	movweq	r0, #9
      38:	09000502 	stmdbeq	r0, {r1, r8, sl}
      3c:	01030000 	mrseq	r0, (UNDEF: 3)
      40:	000a9d06 	andeq	r9, sl, r6, lsl #26
      44:	33750200 	cmncc	r5, #0, 4
      48:	27020032 	smladxcs	r2, r2, r0, r0
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	62070403 	andvs	r0, r7, #50331648	; 0x3000000
      54:	0200000a 	andeq	r0, r0, #10
      58:	00363175 	eorseq	r3, r6, r5, ror r1
      5c:	00622802 	rsbeq	r2, r2, r2, lsl #16
      60:	02030000 	andeq	r0, r3, #0
      64:	000c5407 	andeq	r5, ip, r7, lsl #8
      68:	38750200 	ldmdacc	r5!, {r9}^
      6c:	73290200 			; <UNDEFINED> instruction: 0x73290200
      70:	03000000 	movweq	r0, #0
      74:	0a9b0801 	beq	fe6c2080 <SCS_BASE+0x1e6b4080>
      78:	b0040000 	andlt	r0, r4, r0
      7c:	02000004 	andeq	r0, r0, #4
      80:	0000852f 	andeq	r8, r0, pc, lsr #10
      84:	00500500 	subseq	r0, r0, r0, lsl #10
      88:	0b040000 	bleq	100090 <__Stack_Size+0xffc90>
      8c:	02000003 	andeq	r0, r0, #3
      90:	00009530 	andeq	r9, r0, r0, lsr r5
      94:	00620500 	rsbeq	r0, r2, r0, lsl #10
      98:	01060000 	mrseq	r0, (UNDEF: 6)
      9c:	00af3902 	adceq	r3, pc, r2, lsl #18
      a0:	8d070000 	stchi	0, cr0, [r7, #-0]
      a4:	00000018 	andeq	r0, r0, r8, lsl r0
      a8:	54455308 	strbpl	r5, [r5], #-776	; 0x308
      ac:	04000100 	streq	r0, [r0], #-256	; 0x100
      b0:	00000884 	andeq	r0, r0, r4, lsl #17
      b4:	009a3902 	addseq	r3, sl, r2, lsl #18
      b8:	15040000 	strne	r0, [r4, #-0]
      bc:	02000020 	andeq	r0, r0, #32
      c0:	00009a39 	andeq	r9, r0, r9, lsr sl
      c4:	02010600 	andeq	r0, r1, #0, 12
      c8:	0000da3b 	andeq	sp, r0, fp, lsr sl
      cc:	05b50700 	ldreq	r0, [r5, #1792]!	; 0x700
      d0:	07000000 	streq	r0, [r0, -r0]
      d4:	00000a3b 	andeq	r0, r0, fp, lsr sl
      d8:	1b040001 	blne	1000e4 <__Stack_Size+0xffce4>
      dc:	02000001 	andeq	r0, r0, #1
      e0:	0000c53b 	andeq	ip, r0, fp, lsr r5
      e4:	02010600 	andeq	r0, r1, #0, 12
      e8:	0000fa3e 	andeq	pc, r0, lr, lsr sl	; <UNPREDICTABLE>
      ec:	00110700 	andseq	r0, r1, r0, lsl #14
      f0:	07000000 	streq	r0, [r0, -r0]
      f4:	0000059a 	muleq	r0, sl, r5
      f8:	53040001 	movwpl	r0, #16385	; 0x4001
      fc:	02000001 	andeq	r0, r0, #1
     100:	0000e53e 	andeq	lr, r0, lr, lsr r5
     104:	07040300 	streq	r0, [r4, -r0, lsl #6]
     108:	00000a59 	andeq	r0, r0, r9, asr sl
     10c:	4e031c09 	cdpmi	12, 0, cr1, cr3, cr9, {0}
     110:	00017101 	andeq	r7, r1, r1, lsl #2
     114:	52430a00 	subpl	r0, r3, #0, 20
     118:	5003004c 	andpl	r0, r3, ip, asr #32
     11c:	00007a01 	andeq	r7, r0, r1, lsl #20
     120:	430a0000 	movwmi	r0, #40960	; 0xa000
     124:	03004852 	movweq	r4, #2130	; 0x852
     128:	007a0151 	rsbseq	r0, sl, r1, asr r1
     12c:	0a040000 	beq	100134 <__Stack_Size+0xffd34>
     130:	00524449 	subseq	r4, r2, r9, asr #8
     134:	7a015203 	bvc	54948 <__Stack_Size+0x54548>
     138:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     13c:	52444f0a 	subpl	r4, r4, #10, 30	; 0x28
     140:	01530300 	cmpeq	r3, r0, lsl #6
     144:	0000007a 	andeq	r0, r0, sl, ror r0
     148:	00760b0c 	rsbseq	r0, r6, ip, lsl #22
     14c:	54030000 	strpl	r0, [r3], #-0
     150:	00007a01 	andeq	r7, r0, r1, lsl #20
     154:	420a1000 	andmi	r1, sl, #0
     158:	03005252 	movweq	r5, #594	; 0x252
     15c:	007a0155 	rsbseq	r0, sl, r5, asr r1
     160:	0b140000 	bleq	500168 <__Stack_Size+0x4ffd68>
     164:	00000d29 	andeq	r0, r0, r9, lsr #26
     168:	7a015603 	bvc	5597c <__Stack_Size+0x5557c>
     16c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     170:	09e40c00 	stmibeq	r4!, {sl, fp}^
     174:	57030000 	strpl	r0, [r3, -r0]
     178:	00010c01 	andeq	r0, r1, r1, lsl #24
     17c:	03500900 	cmpeq	r0, #0, 18
     180:	038e020b 	orreq	r0, lr, #-1342177280	; 0xb0000000
     184:	430a0000 	movwmi	r0, #40960	; 0xa000
     188:	03003152 	movweq	r3, #338	; 0x152
     18c:	008a020d 	addeq	r0, sl, sp, lsl #4
     190:	0b000000 	bleq	198 <_Minimum_Stack_Size+0x98>
     194:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
     198:	57020e03 	strpl	r0, [r2, -r3, lsl #28]
     19c:	02000000 	andeq	r0, r0, #0
     1a0:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
     1a4:	020f0300 	andeq	r0, pc, #0, 6
     1a8:	0000008a 	andeq	r0, r0, sl, lsl #1
     1ac:	08c40b04 	stmiaeq	r4, {r2, r8, r9, fp}^
     1b0:	10030000 	andne	r0, r3, r0
     1b4:	00005702 	andeq	r5, r0, r2, lsl #14
     1b8:	410b0600 	tstmi	fp, r0, lsl #12
     1bc:	03000006 	movweq	r0, #6
     1c0:	008a0211 	addeq	r0, sl, r1, lsl r2
     1c4:	0b080000 	bleq	2001cc <__Stack_Size+0x1ffdcc>
     1c8:	000008ce 	andeq	r0, r0, lr, asr #17
     1cc:	57021203 	strpl	r1, [r2, -r3, lsl #4]
     1d0:	0a000000 	beq	1d8 <_Minimum_Stack_Size+0xd8>
     1d4:	0004df0b 	andeq	sp, r4, fp, lsl #30
     1d8:	02130300 	andseq	r0, r3, #0, 6
     1dc:	0000008a 	andeq	r0, r0, sl, lsl #1
     1e0:	08d80b0c 	ldmeq	r8, {r2, r3, r8, r9, fp}^
     1e4:	14030000 	strne	r0, [r3], #-0
     1e8:	00005702 	andeq	r5, r0, r2, lsl #14
     1ec:	530a0e00 	movwpl	r0, #44544	; 0xae00
     1f0:	15030052 	strne	r0, [r3, #-82]	; 0x52
     1f4:	00008a02 	andeq	r8, r0, r2, lsl #20
     1f8:	e20b1000 	and	r1, fp, #0
     1fc:	03000008 	movweq	r0, #8
     200:	00570216 	subseq	r0, r7, r6, lsl r2
     204:	0a120000 	beq	48020c <__Stack_Size+0x47fe0c>
     208:	00524745 	subseq	r4, r2, r5, asr #14
     20c:	8a021703 	bhi	85e20 <__Stack_Size+0x85a20>
     210:	14000000 	strne	r0, [r0], #-0
     214:	0008ec0b 	andeq	lr, r8, fp, lsl #24
     218:	02180300 	andseq	r0, r8, #0, 6
     21c:	00000057 	andeq	r0, r0, r7, asr r0
     220:	03630b16 	cmneq	r3, #22528	; 0x5800
     224:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     228:	00008a02 	andeq	r8, r0, r2, lsl #20
     22c:	f60b1800 			; <UNDEFINED> instruction: 0xf60b1800
     230:	03000008 	movweq	r0, #8
     234:	0057021a 	subseq	r0, r7, sl, lsl r2
     238:	0b1a0000 	bleq	680240 <__Stack_Size+0x67fe40>
     23c:	00000369 	andeq	r0, r0, r9, ror #6
     240:	8a021b03 	bhi	86e54 <__Stack_Size+0x86a54>
     244:	1c000000 	stcne	0, cr0, [r0], {-0}
     248:	000ce50b 	andeq	lr, ip, fp, lsl #10
     24c:	021c0300 	andseq	r0, ip, #0, 6
     250:	00000057 	andeq	r0, r0, r7, asr r0
     254:	05800b1e 	streq	r0, [r0, #2846]	; 0xb1e
     258:	1d030000 	stcne	0, cr0, [r3, #-0]
     25c:	00008a02 	andeq	r8, r0, r2, lsl #20
     260:	0a0b2000 	beq	2c8268 <__Stack_Size+0x2c7e68>
     264:	03000009 	movweq	r0, #9
     268:	0057021e 	subseq	r0, r7, lr, lsl r2
     26c:	0a220000 	beq	880274 <__Stack_Size+0x87fe74>
     270:	00544e43 	subseq	r4, r4, r3, asr #28
     274:	8a021f03 	bhi	87e88 <__Stack_Size+0x87a88>
     278:	24000000 	strcs	r0, [r0], #-0
     27c:	0009140b 	andeq	r1, r9, fp, lsl #8
     280:	02200300 	eoreq	r0, r0, #0, 6
     284:	00000057 	andeq	r0, r0, r7, asr r0
     288:	53500a26 	cmppl	r0, #155648	; 0x26000
     28c:	21030043 	tstcs	r3, r3, asr #32
     290:	00008a02 	andeq	r8, r0, r2, lsl #20
     294:	170b2800 	strne	r2, [fp, -r0, lsl #16]
     298:	0300000b 	movweq	r0, #11
     29c:	00570222 	subseq	r0, r7, r2, lsr #4
     2a0:	0a2a0000 	beq	a802a8 <__Stack_Size+0xa7fea8>
     2a4:	00525241 	subseq	r5, r2, r1, asr #4
     2a8:	8a022303 	bhi	88ebc <__Stack_Size+0x88abc>
     2ac:	2c000000 	stccs	0, cr0, [r0], {-0}
     2b0:	000b220b 	andeq	r2, fp, fp, lsl #4
     2b4:	02240300 	eoreq	r0, r4, #0, 6
     2b8:	00000057 	andeq	r0, r0, r7, asr r0
     2bc:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
     2c0:	25030052 	strcs	r0, [r3, #-82]	; 0x52
     2c4:	00008a02 	andeq	r8, r0, r2, lsl #20
     2c8:	2d0b3000 	stccs	0, cr3, [fp, #-0]
     2cc:	0300000b 	movweq	r0, #11
     2d0:	00570226 	subseq	r0, r7, r6, lsr #4
     2d4:	0b320000 	bleq	c802dc <__Stack_Size+0xc7fedc>
     2d8:	0000034f 	andeq	r0, r0, pc, asr #6
     2dc:	8a022703 	bhi	89ef0 <__Stack_Size+0x89af0>
     2e0:	34000000 	strcc	r0, [r0], #-0
     2e4:	000b380b 	andeq	r3, fp, fp, lsl #16
     2e8:	02280300 	eoreq	r0, r8, #0, 6
     2ec:	00000057 	andeq	r0, r0, r7, asr r0
     2f0:	03540b36 	cmpeq	r4, #55296	; 0xd800
     2f4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     2f8:	00008a02 	andeq	r8, r0, r2, lsl #20
     2fc:	430b3800 	movwmi	r3, #47104	; 0xb800
     300:	0300000b 	movweq	r0, #11
     304:	0057022a 	subseq	r0, r7, sl, lsr #4
     308:	0b3a0000 	bleq	e80310 <__Stack_Size+0xe7ff10>
     30c:	00000359 	andeq	r0, r0, r9, asr r3
     310:	8a022b03 	bhi	8af24 <__Stack_Size+0x8ab24>
     314:	3c000000 	stccc	0, cr0, [r0], {-0}
     318:	000b4e0b 	andeq	r4, fp, fp, lsl #28
     31c:	022c0300 	eoreq	r0, ip, #0, 6
     320:	00000057 	andeq	r0, r0, r7, asr r0
     324:	035e0b3e 	cmpeq	lr, #63488	; 0xf800
     328:	2d030000 	stccs	0, cr0, [r3, #-0]
     32c:	00008a02 	andeq	r8, r0, r2, lsl #20
     330:	590b4000 	stmdbpl	fp, {lr}
     334:	0300000b 	movweq	r0, #11
     338:	0057022e 	subseq	r0, r7, lr, lsr #4
     33c:	0b420000 	bleq	1080344 <__Stack_Size+0x107ff44>
     340:	00000300 	andeq	r0, r0, r0, lsl #6
     344:	8a022f03 	bhi	8bf58 <__Stack_Size+0x8bb58>
     348:	44000000 	strmi	r0, [r0], #-0
     34c:	000b640b 	andeq	r6, fp, fp, lsl #8
     350:	02300300 	eorseq	r0, r0, #0, 6
     354:	00000057 	andeq	r0, r0, r7, asr r0
     358:	43440a46 	movtmi	r0, #19014	; 0x4a46
     35c:	31030052 	qaddcc	r0, r2, r3
     360:	00008a02 	andeq	r8, r0, r2, lsl #20
     364:	6f0b4800 	svcvs	0x000b4800
     368:	0300000b 	movweq	r0, #11
     36c:	00570232 	subseq	r0, r7, r2, lsr r2
     370:	0b4a0000 	bleq	1280378 <__Stack_Size+0x127ff78>
     374:	00000945 	andeq	r0, r0, r5, asr #18
     378:	8a023303 	bhi	8cf8c <__Stack_Size+0x8cb8c>
     37c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     380:	000b7a0b 	andeq	r7, fp, fp, lsl #20
     384:	02340300 	eorseq	r0, r4, #0, 6
     388:	00000057 	andeq	r0, r0, r7, asr r0
     38c:	970c004e 	strls	r0, [ip, -lr, asr #32]
     390:	03000002 	movweq	r0, #2
     394:	017d0235 	cmneq	sp, r5, lsr r2
     398:	1c090000 	stcne	0, cr0, [r9], {-0}
     39c:	58023803 	stmdapl	r2, {r0, r1, fp, ip, sp}
     3a0:	0a000004 	beq	3b8 <_Minimum_Stack_Size+0x2b8>
     3a4:	03005253 	movweq	r5, #595	; 0x253
     3a8:	008a023a 	addeq	r0, sl, sl, lsr r2
     3ac:	0b000000 	bleq	3b4 <_Minimum_Stack_Size+0x2b4>
     3b0:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
     3b4:	57023b03 	strpl	r3, [r2, -r3, lsl #22]
     3b8:	02000000 	andeq	r0, r0, #0
     3bc:	0052440a 	subseq	r4, r2, sl, lsl #8
     3c0:	8a023c03 	bhi	8f3d4 <__Stack_Size+0x8efd4>
     3c4:	04000000 	streq	r0, [r0], #-0
     3c8:	0008c40b 	andeq	ip, r8, fp, lsl #8
     3cc:	023d0300 	eorseq	r0, sp, #0, 6
     3d0:	00000057 	andeq	r0, r0, r7, asr r0
     3d4:	52420a06 	subpl	r0, r2, #24576	; 0x6000
     3d8:	3e030052 	mcrcc	0, 0, r0, cr3, cr2, {2}
     3dc:	00008a02 	andeq	r8, r0, r2, lsl #20
     3e0:	ce0b0800 	cdpgt	8, 0, cr0, cr11, cr0, {0}
     3e4:	03000008 	movweq	r0, #8
     3e8:	0057023f 	subseq	r0, r7, pc, lsr r2
     3ec:	0a0a0000 	beq	2803f4 <__Stack_Size+0x27fff4>
     3f0:	00315243 	eorseq	r5, r1, r3, asr #4
     3f4:	8a024003 	bhi	90408 <__Stack_Size+0x90008>
     3f8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3fc:	0008d80b 	andeq	sp, r8, fp, lsl #16
     400:	02410300 	subeq	r0, r1, #0, 6
     404:	00000057 	andeq	r0, r0, r7, asr r0
     408:	52430a0e 	subpl	r0, r3, #57344	; 0xe000
     40c:	42030032 	andmi	r0, r3, #50	; 0x32
     410:	00008a02 	andeq	r8, r0, r2, lsl #20
     414:	e20b1000 	and	r1, fp, #0
     418:	03000008 	movweq	r0, #8
     41c:	00570243 	subseq	r0, r7, r3, asr #4
     420:	0a120000 	beq	480428 <__Stack_Size+0x480028>
     424:	00335243 	eorseq	r5, r3, r3, asr #4
     428:	8a024403 	bhi	9143c <__Stack_Size+0x9103c>
     42c:	14000000 	strne	r0, [r0], #-0
     430:	0008ec0b 	andeq	lr, r8, fp, lsl #24
     434:	02450300 	subeq	r0, r5, #0, 6
     438:	00000057 	andeq	r0, r0, r7, asr r0
     43c:	02720b16 	rsbseq	r0, r2, #22528	; 0x5800
     440:	46030000 	strmi	r0, [r3], -r0
     444:	00008a02 	andeq	r8, r0, r2, lsl #20
     448:	f60b1800 			; <UNDEFINED> instruction: 0xf60b1800
     44c:	03000008 	movweq	r0, #8
     450:	00570247 	subseq	r0, r7, r7, asr #4
     454:	001a0000 	andseq	r0, sl, r0
     458:	0005010c 	andeq	r0, r5, ip, lsl #2
     45c:	02480300 	subeq	r0, r8, #0, 6
     460:	0000039a 	muleq	r0, sl, r3
     464:	23040106 	movwcs	r0, #16646	; 0x4106
     468:	0000047f 	andeq	r0, r0, pc, ror r4
     46c:	00036f07 	andeq	r6, r3, r7, lsl #30
     470:	55070100 	strpl	r0, [r7, #-256]	; 0x100
     474:	02000002 	andeq	r0, r0, #2
     478:	000ac407 	andeq	ip, sl, r7, lsl #8
     47c:	04000300 	streq	r0, [r0], #-768	; 0x300
     480:	0000088f 	andeq	r0, r0, pc, lsl #17
     484:	04642704 	strbteq	r2, [r4], #-1796	; 0x704
     488:	01060000 	mrseq	r0, (UNDEF: 6)
     48c:	04c42e04 	strbeq	r2, [r4], #3588	; 0xe04
     490:	ac070000 	stcge	0, cr0, [r7], {-0}
     494:	00000008 	andeq	r0, r0, r8
     498:	000ccf07 	andeq	ip, ip, r7, lsl #30
     49c:	32070400 	andcc	r0, r7, #0, 8
     4a0:	28000004 	stmdacs	r0, {r2}
     4a4:	00045407 	andeq	r5, r4, r7, lsl #8
     4a8:	0700c800 	streq	ip, [r0, -r0, lsl #16]
     4ac:	00000488 	andeq	r0, r0, r8, lsl #9
     4b0:	00000714 	andeq	r0, r0, r4, lsl r7
     4b4:	07100000 	ldreq	r0, [r0, -r0]
     4b8:	00000793 	muleq	r0, r3, r7
     4bc:	092c071c 	stmdbeq	ip!, {r2, r3, r4, r8, r9, sl}
     4c0:	00180000 	andseq	r0, r8, r0
     4c4:	000a0004 	andeq	r0, sl, r4
     4c8:	8a360400 	bhi	d814d0 <__Stack_Size+0xd810d0>
     4cc:	0d000004 	stceq	0, cr0, [r0, #-16]
     4d0:	fc3e0404 	ldc2	4, cr0, [lr], #-16
     4d4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4d8:	000000dd 	ldrdeq	r0, [r0], -sp
     4dc:	00574004 	subseq	r4, r7, r4
     4e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4e4:	0000094a 	andeq	r0, r0, sl, asr #18
     4e8:	047f4104 	ldrbteq	r4, [pc], #-260	; 4f0 <__Stack_Size+0xf0>
     4ec:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     4f0:	000000c4 	andeq	r0, r0, r4, asr #1
     4f4:	04c44204 	strbeq	r4, [r4], #516	; 0x204
     4f8:	00030000 	andeq	r0, r3, r0
     4fc:	000a8a04 	andeq	r8, sl, r4, lsl #20
     500:	cf430400 	svcgt	0x00430400
     504:	0d000004 	stceq	0, cr0, [r0, #-16]
     508:	401a0504 	andsmi	r0, sl, r4, lsl #10
     50c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     510:	00000741 	andeq	r0, r0, r1, asr #14
     514:	00691c05 	rsbeq	r1, r9, r5, lsl #24
     518:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     51c:	00000c9e 	muleq	r0, lr, ip
     520:	00691d05 	rsbeq	r1, r9, r5, lsl #26
     524:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     528:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
     52c:	00691e05 	rsbeq	r1, r9, r5, lsl #28
     530:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     534:	000004cc 	andeq	r0, r0, ip, asr #9
     538:	00da1f05 	sbcseq	r1, sl, r5, lsl #30
     53c:	00030000 	andeq	r0, r3, r0
     540:	00031e04 	andeq	r1, r3, r4, lsl #28
     544:	07200500 	streq	r0, [r0, -r0, lsl #10]!
     548:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     54c:	901b060a 	andsls	r0, fp, sl, lsl #12
     550:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     554:	00000068 	andeq	r0, r0, r8, rrx
     558:	00571d06 	subseq	r1, r7, r6, lsl #26
     55c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     560:	000005fd 	strdeq	r0, [r0], -sp
     564:	00571e06 	subseq	r1, r7, r6, lsl #28
     568:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     56c:	00000751 	andeq	r0, r0, r1, asr r7
     570:	00571f06 	subseq	r1, r7, r6, lsl #30
     574:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     578:	000002cc 	andeq	r0, r0, ip, asr #5
     57c:	00572006 	subseq	r2, r7, r6
     580:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     584:	0000052f 	andeq	r0, r0, pc, lsr #10
     588:	00692106 	rsbeq	r2, r9, r6, lsl #2
     58c:	00080000 	andeq	r0, r8, r0
     590:	000bfd04 	andeq	pc, fp, r4, lsl #26
     594:	4b220600 	blmi	881d9c <__Stack_Size+0x88199c>
     598:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     59c:	04250610 	strteq	r0, [r5], #-1552	; 0x610
     5a0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     5a4:	000008a1 	andeq	r0, r0, r1, lsr #17
     5a8:	00572706 	subseq	r2, r7, r6, lsl #14
     5ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     5b0:	000002de 	ldrdeq	r0, [r0], -lr
     5b4:	00572806 	subseq	r2, r7, r6, lsl #16
     5b8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     5bc:	00000a16 	andeq	r0, r0, r6, lsl sl
     5c0:	00572906 	subseq	r2, r7, r6, lsl #18
     5c4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     5c8:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
     5cc:	00572a06 	subseq	r2, r7, r6, lsl #20
     5d0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     5d4:	000000ce 	andeq	r0, r0, lr, asr #1
     5d8:	00572b06 	subseq	r2, r7, r6, lsl #22
     5dc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     5e0:	0000054c 	andeq	r0, r0, ip, asr #10
     5e4:	00572c06 	subseq	r2, r7, r6, lsl #24
     5e8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     5ec:	00000200 	andeq	r0, r0, r0, lsl #4
     5f0:	00572d06 	subseq	r2, r7, r6, lsl #26
     5f4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     5f8:	000006d7 	ldrdeq	r0, [r0], -r7
     5fc:	00572e06 	subseq	r2, r7, r6, lsl #28
     600:	000e0000 	andeq	r0, lr, r0
     604:	00009b04 	andeq	r9, r0, r4, lsl #22
     608:	9b2f0600 	blls	bc1e10 <__Stack_Size+0xbc1a10>
     60c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     610:	601a0710 	andsvs	r0, sl, r0, lsl r7
     614:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     618:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
     61c:	00451c07 	subeq	r1, r5, r7, lsl #24
     620:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     624:	00000196 	muleq	r0, r6, r1
     628:	00571d07 	subseq	r1, r7, r7, lsl #26
     62c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     630:	000001d9 	ldrdeq	r0, [r0], -r9
     634:	00571e07 	subseq	r1, r7, r7, lsl #28
     638:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     63c:	00000bd9 	ldrdeq	r0, [r0], -r9
     640:	00571f07 	subseq	r1, r7, r7, lsl #30
     644:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     648:	0000060d 	andeq	r0, r0, sp, lsl #12
     64c:	00572007 	subseq	r2, r7, r7
     650:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     654:	00000654 	andeq	r0, r0, r4, asr r6
     658:	00572107 	subseq	r2, r7, r7, lsl #2
     65c:	000c0000 	andeq	r0, ip, r0
     660:	000ba604 	andeq	sl, fp, r4, lsl #12
     664:	0f220700 	svceq	0x00220700
     668:	0f000006 	svceq	0x00000006
     66c:	000006c5 	andeq	r0, r0, r5, asr #13
     670:	3402a901 	strcc	sl, [r2], #-2305	; 0x901
     674:	84080031 	strhi	r0, [r8], #-49	; 0x31
     678:	01000000 	mrseq	r0, (UNDEF: 0)
     67c:	0007c39c 	muleq	r7, ip, r3
     680:	0d181000 	ldceq	0, cr1, [r8, #-0]
     684:	ab010000 	blge	4068c <__Stack_Size+0x4028c>
     688:	0000fa02 	andeq	pc, r0, r2, lsl #20
     68c:	00000000 	andeq	r0, r0, r0
     690:	313a1100 	teqcc	sl, r0, lsl #2
     694:	272a0800 	strcs	r0, [sl, -r0, lsl #16]!
     698:	42120000 	andsmi	r0, r2, #0
     69c:	31080031 	tstcc	r8, r1, lsr r0
     6a0:	af000027 	svcge	0x00000027
     6a4:	13000006 	movwne	r0, #6
     6a8:	40035001 	andmi	r5, r3, r1
     6ac:	1100243c 	tstne	r0, ip, lsr r4
     6b0:	08003146 	stmdaeq	r0, {r1, r2, r6, r8, ip, sp}
     6b4:	00002742 	andeq	r2, r0, r2, asr #14
     6b8:	00315612 	eorseq	r5, r1, r2, lsl r6
     6bc:	00274d08 	eoreq	r4, r7, r8, lsl #26
     6c0:	0006d200 	andeq	sp, r6, r0, lsl #4
     6c4:	51011300 	mrspl	r1, SP_irq
     6c8:	01133101 	tsteq	r3, r1, lsl #2
     6cc:	080a0350 	stmdaeq	sl, {r4, r6, r8, r9}
     6d0:	5e120040 	cdppl	0, 1, cr0, cr2, cr0, {2}
     6d4:	64080031 	strvs	r0, [r8], #-49	; 0x31
     6d8:	ee000027 	cdp	0, 0, cr0, cr0, cr7, {1}
     6dc:	13000006 	movwne	r0, #6
     6e0:	31015101 	tstcc	r1, r1, lsl #2
     6e4:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     6e8:	0400010c 	streq	r0, [r0], #-268	; 0x10c
     6ec:	68140000 	ldmdavs	r4, {}	; <UNPREDICTABLE>
     6f0:	7b080031 	blvc	2007bc <__Stack_Size+0x2003bc>
     6f4:	01000027 	tsteq	r0, r7, lsr #32
     6f8:	13000007 	movwne	r0, #7
     6fc:	31015001 	tstcc	r1, r1
     700:	316e1200 	cmncc	lr, r0, lsl #4
     704:	278c0800 	strcs	r0, [ip, r0, lsl #16]
     708:	07140000 	ldreq	r0, [r4, -r0]
     70c:	01130000 	tsteq	r3, r0
     710:	00400150 	subeq	r0, r0, r0, asr r1
     714:	00317412 	eorseq	r7, r1, r2, lsl r4
     718:	00279d08 	eoreq	r9, r7, r8, lsl #26
     71c:	00072700 	andeq	r2, r7, r0, lsl #14
     720:	50011300 	andpl	r1, r1, r0, lsl #6
     724:	12003201 	andne	r3, r0, #268435456	; 0x10000000
     728:	0800317a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, sp}
     72c:	000027ae 	andeq	r2, r0, lr, lsr #15
     730:	0000073a 	andeq	r0, r0, sl, lsr r7
     734:	01500113 	cmpeq	r0, r3, lsl r1
     738:	80120030 	andshi	r0, r2, r0, lsr r0
     73c:	c0080031 	andgt	r0, r8, r1, lsr r0
     740:	4d000027 	stcmi	0, cr0, [r0, #-156]	; 0xffffff64
     744:	13000007 	movwne	r0, #7
     748:	30015001 	andcc	r5, r1, r1
     74c:	31881200 	orrcc	r1, r8, r0, lsl #4
     750:	27d20800 	ldrbcs	r0, [r2, r0, lsl #16]
     754:	07620000 	strbeq	r0, [r2, -r0]!
     758:	01130000 	tsteq	r3, r0
     75c:	000a0350 	andeq	r0, sl, r0, asr r3
     760:	94120004 	ldrls	r0, [r2], #-4
     764:	e4080031 	str	r0, [r8], #-49	; 0x31
     768:	7e000027 	cdpvc	0, 0, cr0, cr0, cr7, {1}
     76c:	13000007 	movwne	r0, #7
     770:	4c035101 	stfmis	f5, [r3], {1}
     774:	01132440 	tsteq	r3, r0, asr #8
     778:	3c400350 	mcrrcc	3, 5, r0, r0, cr0
     77c:	9a120024 	bls	480814 <__Stack_Size+0x480414>
     780:	fb080031 	blx	20084e <__Stack_Size+0x20044e>
     784:	92000027 	andls	r0, r0, #39	; 0x27
     788:	13000007 	movwne	r0, #7
     78c:	74025001 	strvc	r5, [r2], #-1
     790:	a0120000 	andsge	r0, r2, r0
     794:	0d080031 	stceq	0, cr0, [r8, #-196]	; 0xffffff3c
     798:	a6000028 	strge	r0, [r0], -r8, lsr #32
     79c:	13000007 	movwne	r0, #7
     7a0:	08025001 	stmdaeq	r2, {r0, ip, lr}
     7a4:	aa120039 	bge	480890 <__Stack_Size+0x480490>
     7a8:	23080031 	movwcs	r0, #32817	; 0x8031
     7ac:	b9000028 	stmdblt	r0, {r3, r5}
     7b0:	13000007 	movwne	r0, #7
     7b4:	32015001 	andcc	r5, r1, #1
     7b8:	31ae1100 			; <UNDEFINED> instruction: 0x31ae1100
     7bc:	28350800 	ldmdacs	r5!, {fp}
     7c0:	0f000000 	svceq	0x00000000
     7c4:	00000b04 	andeq	r0, r0, r4, lsl #22
     7c8:	b802ec01 	stmdalt	r2, {r0, sl, fp, sp, lr, pc}
     7cc:	4e080031 	mcrmi	0, 0, r0, cr8, cr1, {1}
     7d0:	01000000 	mrseq	r0, (UNDEF: 0)
     7d4:	00083e9c 	muleq	r8, ip, lr
     7d8:	05a21500 	streq	r1, [r2, #1280]!	; 0x500
     7dc:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
     7e0:	00054002 	andeq	r4, r5, r2
     7e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7e8:	0031c612 	eorseq	ip, r1, r2, lsl r6
     7ec:	00284108 	eoreq	r4, r8, r8, lsl #2
     7f0:	00080400 	andeq	r0, r8, r0, lsl #8
     7f4:	51011300 	mrspl	r1, SP_irq
     7f8:	30000a03 	andcc	r0, r0, r3, lsl #20
     7fc:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
     800:	00244740 	eoreq	r4, r4, r0, asr #14
     804:	0031ce12 	eorseq	ip, r1, r2, lsl lr
     808:	00285808 	eoreq	r5, r8, r8, lsl #16
     80c:	00081900 	andeq	r1, r8, r0, lsl #18
     810:	50011300 	andpl	r1, r1, r0, lsl #6
     814:	05000a03 	streq	r0, [r0, #-2563]	; 0xa03
     818:	31ea1200 	mvncc	r1, r0, lsl #4
     81c:	28690800 	stmdacs	r9!, {fp}^
     820:	082d0000 	stmdaeq	sp!, {}	; <UNPREDICTABLE>
     824:	01130000 	tsteq	r3, r0
     828:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
     82c:	32021600 	andcc	r1, r2, #0, 12
     830:	28690800 	stmdacs	r9!, {fp}^
     834:	01130000 	tsteq	r3, r0
     838:	6c910250 	lfmvs	f0, 4, [r1], {80}	; 0x50
     83c:	850f0000 	strhi	r0, [pc, #-0]	; 844 <__Stack_Size+0x444>
     840:	0100000b 	tsteq	r0, fp
     844:	32060311 	andcc	r0, r6, #1140850688	; 0x44000000
     848:	00860800 	addeq	r0, r6, r0, lsl #16
     84c:	9c010000 	stcls	0, cr0, [r1], {-0}
     850:	00000937 	andeq	r0, r0, r7, lsr r9
     854:	0006f915 	andeq	pc, r6, r5, lsl r9	; <UNPREDICTABLE>
     858:	03130100 	tsteq	r3, #0, 2
     85c:	000004fc 	strdeq	r0, [r0], -ip
     860:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     864:	08003210 	stmdaeq	r0, {r4, r9, ip, sp}
     868:	00002881 	andeq	r2, r0, r1, lsl #17
     86c:	00000877 	andeq	r0, r0, r7, ror r8
     870:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     874:	12006491 	andne	r6, r0, #-1862270976	; 0x91000000
     878:	0800322c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp}
     87c:	00002898 	muleq	r0, r8, r8
     880:	00000891 	muleq	r0, r1, r8
     884:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
     888:	01136491 			; <UNDEFINED> instruction: 0x01136491
     88c:	00740250 	rsbseq	r0, r4, r0, asr r2
     890:	32421200 	subcc	r1, r2, #0, 4
     894:	28980800 	ldmcs	r8, {fp}
     898:	08b10000 	ldmeq	r1!, {}	; <UNPREDICTABLE>
     89c:	01130000 	tsteq	r3, r0
     8a0:	00910851 	addseq	r0, r1, r1, asr r8
     8a4:	08220076 	stmdaeq	r2!, {r1, r2, r4, r5, r6}
     8a8:	01131c20 	tsteq	r3, r0, lsr #24
     8ac:	00740250 	rsbseq	r0, r4, r0, asr r2
     8b0:	325e1200 	subscc	r1, lr, #0, 4
     8b4:	28980800 	ldmcs	r8, {fp}
     8b8:	08d10000 	ldmeq	r1, {}^	; <UNPREDICTABLE>
     8bc:	01130000 	tsteq	r3, r0
     8c0:	00910851 	addseq	r0, r1, r1, asr r8
     8c4:	08220076 	stmdaeq	r2!, {r1, r2, r4, r5, r6}
     8c8:	01131c20 	tsteq	r3, r0, lsr #24
     8cc:	00740250 	rsbseq	r0, r4, r0, asr r2
     8d0:	32661200 	rsbcc	r1, r6, #0, 4
     8d4:	28b40800 	ldmcs	r4!, {fp}
     8d8:	08ea0000 	stmiaeq	sl!, {}^	; <UNPREDICTABLE>
     8dc:	01130000 	tsteq	r3, r0
     8e0:	13310151 	teqne	r1, #1073741844	; 0x40000014
     8e4:	76025001 	strvc	r5, [r2], -r1
     8e8:	6e120000 	cdpvs	0, 1, cr0, cr2, cr0, {0}
     8ec:	b4080032 	strlt	r0, [r8], #-50	; 0x32
     8f0:	06000028 	streq	r0, [r0], -r8, lsr #32
     8f4:	13000009 	movwne	r0, #9
     8f8:	31015101 	tstcc	r1, r1, lsl #2
     8fc:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     900:	3004000c 	andcc	r0, r4, ip
     904:	76120000 	ldrvc	r0, [r2], -r0
     908:	ca080032 	bgt	2009d8 <__Stack_Size+0x2005d8>
     90c:	20000028 	andcs	r0, r0, r8, lsr #32
     910:	13000009 	movwne	r0, #9
     914:	75025101 	strvc	r5, [r2, #-257]	; 0x101
     918:	50011300 	andpl	r1, r1, r0, lsl #6
     91c:	00007402 	andeq	r7, r0, r2, lsl #8
     920:	00327e16 	eorseq	r7, r2, r6, lsl lr
     924:	0028e008 	eoreq	lr, r8, r8
     928:	51011300 	mrspl	r1, SP_irq
     92c:	13200802 			; <UNDEFINED> instruction: 0x13200802
     930:	74025001 	strvc	r5, [r2], #-1
     934:	0f000000 	svceq	0x00000000
     938:	0000096e 	andeq	r0, r0, lr, ror #18
     93c:	8c036001 	stchi	0, cr6, [r3], {1}
     940:	0c080032 	stceq	0, cr0, [r8], {50}	; 0x32
     944:	01000000 	mrseq	r0, (UNDEF: 0)
     948:	0009669c 	muleq	r9, ip, r6
     94c:	32941700 	addscc	r1, r4, #0, 14
     950:	28f60800 	ldmcs	r6!, {fp}^
     954:	01130000 	tsteq	r3, r0
     958:	13300151 	teqne	r0, #1073741844	; 0x40000014
     95c:	0c055001 	stceq	0, cr5, [r5], {1}
     960:	40013800 	andmi	r3, r1, r0, lsl #16
     964:	8c180000 	ldchi	0, cr0, [r8], {-0}
     968:	01000000 	mrseq	r0, (UNDEF: 0)
     96c:	32980365 	addscc	r0, r8, #-1811939327	; 0x94000001
     970:	00100800 	andseq	r0, r0, r0, lsl #16
     974:	9c010000 	stcls	0, cr0, [r1], {-0}
     978:	0005d419 	andeq	sp, r5, r9, lsl r4
     97c:	036a0100 	cmneq	sl, #0, 2
     980:	00000069 	andeq	r0, r0, r9, rrx
     984:	080032a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp}
     988:	00000014 	andeq	r0, r0, r4, lsl r0
     98c:	7c0f9c01 	stcvc	12, cr9, [pc], {1}
     990:	01000004 	tsteq	r0, r4
     994:	32bc0372 	adcscc	r0, ip, #-939524095	; 0xc8000001
     998:	00440800 	subeq	r0, r4, r0, lsl #16
     99c:	9c010000 	stcls	0, cr0, [r1], {-0}
     9a0:	00000a5d 	andeq	r0, r0, sp, asr sl
     9a4:	0001741a 	andeq	r7, r1, sl, lsl r4
     9a8:	03720100 	cmneq	r2, #0, 2
     9ac:	00000069 	andeq	r0, r0, r9, rrx
     9b0:	0000001e 	andeq	r0, r0, lr, lsl r0
     9b4:	0032c812 	eorseq	ip, r2, r2, lsl r8
     9b8:	0028ca08 	eoreq	ip, r8, r8, lsl #20
     9bc:	0009d100 	andeq	sp, r9, r0, lsl #2
     9c0:	51011300 	mrspl	r1, SP_irq
     9c4:	13200802 			; <UNDEFINED> instruction: 0x13200802
     9c8:	0c055001 	stceq	0, cr5, [r5], {1}
     9cc:	40010c00 	andmi	r0, r1, r0, lsl #24
     9d0:	32d01200 	sbcscc	r1, r0, #0, 4
     9d4:	28e00800 	stmiacs	r0!, {fp}^
     9d8:	09ed0000 	stmibeq	sp!, {}^	; <UNPREDICTABLE>
     9dc:	01130000 	tsteq	r3, r0
     9e0:	13400151 	movtne	r0, #337	; 0x151
     9e4:	0c055001 	stceq	0, cr5, [r5], {1}
     9e8:	40010c00 	andmi	r0, r1, r0, lsl #24
     9ec:	32d81200 	sbcscc	r1, r8, #0, 4
     9f0:	29120800 	ldmdbcs	r2, {fp}
     9f4:	0a0a0000 	beq	2809fc <__Stack_Size+0x2805fc>
     9f8:	01130000 	tsteq	r3, r0
     9fc:	00740251 	rsbseq	r0, r4, r1, asr r2
     a00:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     a04:	0138000c 	teqeq	r8, ip
     a08:	e0120040 	ands	r0, r2, r0, asr #32
     a0c:	28080032 	stmdacs	r8, {r1, r4, r5}
     a10:	27000029 	strcs	r0, [r0, -r9, lsr #32]
     a14:	1300000a 	movwne	r0, #10
     a18:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     a1c:	50011340 	andpl	r1, r1, r0, asr #6
     a20:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
     a24:	12004001 	andne	r4, r0, #1
     a28:	080032ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip, sp}
     a2c:	000028ca 	andeq	r2, r0, sl, asr #17
     a30:	00000a43 	andeq	r0, r0, r3, asr #20
     a34:	01510113 	cmpeq	r1, r3, lsl r1
     a38:	50011340 	andpl	r1, r1, r0, asr #6
     a3c:	0c000c05 	stceq	12, cr0, [r0], {5}
     a40:	17004001 	strne	r4, [r0, -r1]
     a44:	080032f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, sp}
     a48:	000028e0 	andeq	r2, r0, r0, ror #17
     a4c:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
     a50:	01132008 	tsteq	r3, r8
     a54:	000c0550 	andeq	r0, ip, r0, asr r5
     a58:	0040010c 	subeq	r0, r0, ip, lsl #2
     a5c:	09621b00 	stmdbeq	r2!, {r8, r9, fp, ip}^
     a60:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     a64:	00006903 	andeq	r6, r0, r3, lsl #18
     a68:	00330000 	eorseq	r0, r3, r0
     a6c:	00002008 	andeq	r2, r0, r8
     a70:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     a74:	1500000a 	strne	r0, [r0, #-10]
     a78:	0000073b 	andeq	r0, r0, fp, lsr r7
     a7c:	69038001 	stmdbvs	r3, {r0, pc}
     a80:	01000000 	mrseq	r0, (UNDEF: 0)
     a84:	800f0050 	andhi	r0, pc, r0, asr r0	; <UNPREDICTABLE>
     a88:	01000003 	tsteq	r0, r3
     a8c:	332003e4 			; <UNDEFINED> instruction: 0x332003e4
     a90:	001c0800 	andseq	r0, ip, r0, lsl #16
     a94:	9c010000 	stcls	0, cr0, [r1], {-0}
     a98:	00000add 	ldrdeq	r0, [r0], -sp
     a9c:	0001741a 	andeq	r7, r1, sl, lsl r4
     aa0:	03e40100 	mvneq	r0, #0, 2
     aa4:	00000069 	andeq	r0, r0, r9, rrx
     aa8:	0000003f 	andeq	r0, r0, pc, lsr r0
     aac:	00332a12 	eorseq	r2, r3, r2, lsl sl
     ab0:	00291208 	eoreq	r1, r9, r8, lsl #4
     ab4:	000ac300 	andeq	ip, sl, r0, lsl #6
     ab8:	50011300 	andpl	r1, r1, r0, lsl #6
     abc:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
     ac0:	16004000 	strne	r4, [r0], -r0
     ac4:	08003332 	stmdaeq	r0, {r1, r4, r5, r8, r9, ip, sp}
     ac8:	00002928 	andeq	r2, r0, r8, lsr #18
     acc:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
     ad0:	01134008 	tsteq	r3, r8
     ad4:	000c0550 	andeq	r0, ip, r0, asr r5
     ad8:	00400048 	subeq	r0, r0, r8, asr #32
     adc:	02770f00 	rsbseq	r0, r7, #0, 30
     ae0:	ca010000 	bgt	40ae8 <__Stack_Size+0x406e8>
     ae4:	00333c03 	eorseq	r3, r3, r3, lsl #24
     ae8:	00001208 	andeq	r1, r0, r8, lsl #4
     aec:	0d9c0100 	ldfeqs	f0, [ip]
     af0:	1a00000b 	bne	b24 <__Stack_Size+0x724>
     af4:	00000305 	andeq	r0, r0, r5, lsl #6
     af8:	0d03ca01 	vstreq	s24, [r3, #-4]
     afc:	6000000b 	andvs	r0, r0, fp
     b00:	11000000 	mrsne	r0, (UNDEF: 0)
     b04:	0800334a 	stmdaeq	r0, {r1, r3, r6, r8, r9, ip, sp}
     b08:	00000a86 	andeq	r0, r0, r6, lsl #21
     b0c:	69041c00 	stmdbvs	r4, {sl, fp, ip}
     b10:	1d000000 	stcne	0, cr0, [r0, #-0]
     b14:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     b18:	334e8d01 	movtcc	r8, #60673	; 0xed01
     b1c:	002e0800 	eoreq	r0, lr, r0, lsl #16
     b20:	9c010000 	stcls	0, cr0, [r1], {-0}
     b24:	00000ba3 	andeq	r0, r0, r3, lsr #23
     b28:	0064691e 	rsbeq	r6, r4, lr, lsl r9
     b2c:	00738d01 	rsbseq	r8, r3, r1, lsl #26
     b30:	00a30000 	adceq	r0, r3, r0
     b34:	341f0000 	ldrcc	r0, [pc], #-0	; b3c <__Stack_Size+0x73c>
     b38:	01000007 	tsteq	r0, r7
     b3c:	000ba38f 	andeq	sl, fp, pc, lsl #7
     b40:	335a1200 	cmpcc	sl, #0, 4
     b44:	29420800 	stmdbcs	r2, {fp}^
     b48:	0b5f0000 	bleq	17c0b50 <__Stack_Size+0x17c0750>
     b4c:	01130000 	tsteq	r3, r0
     b50:	13300152 	teqne	r0, #-2147483628	; 0x80000014
     b54:	36015101 	strcc	r5, [r1], -r1, lsl #2
     b58:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     b5c:	11000074 	tstne	r0, r4, ror r0
     b60:	0800335e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, ip, sp}
     b64:	0000295d 	andeq	r2, r0, sp, asr r9
     b68:	00336812 	eorseq	r6, r3, r2, lsl r8
     b6c:	00294208 	eoreq	r4, r9, r8, lsl #4
     b70:	000b8600 	andeq	r8, fp, r0, lsl #12
     b74:	52011300 	andpl	r1, r1, #0, 6
     b78:	01133001 	tsteq	r3, r1
     b7c:	13380151 	teqne	r8, #1073741844	; 0x40000014
     b80:	74025001 	strvc	r5, [r2], #-1
     b84:	6c110000 	ldcvs	0, cr0, [r1], {-0}
     b88:	5d080033 	stcpl	0, cr0, [r8, #-204]	; 0xffffff34
     b8c:	17000029 	strne	r0, [r0, -r9, lsr #32]
     b90:	08003376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
     b94:	00000add 	ldrdeq	r0, [r0], -sp
     b98:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     b9c:	005ee003 	subseq	lr, lr, r3
     ba0:	20000008 	andcs	r0, r0, r8
     ba4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     ba8:	b91d0074 	ldmdblt	sp, {r2, r4, r5, r6}
     bac:	0100000a 	tsteq	r0, sl
     bb0:	00337c98 	mlaseq	r3, r8, ip, r7
     bb4:	00003008 	andeq	r3, r0, r8
     bb8:	3c9c0100 	ldfccs	f0, [ip], {0}
     bbc:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
     bc0:	01006469 	tsteq	r0, r9, ror #8
     bc4:	00007398 	muleq	r0, r8, r3
     bc8:	0000c400 	andeq	ip, r0, r0, lsl #8
     bcc:	07341f00 	ldreq	r1, [r4, -r0, lsl #30]!
     bd0:	9a010000 	bls	40bd8 <__Stack_Size+0x407d8>
     bd4:	00000ba3 	andeq	r0, r0, r3, lsr #23
     bd8:	00338812 	eorseq	r8, r3, r2, lsl r8
     bdc:	00294208 	eoreq	r4, r9, r8, lsl #4
     be0:	000bf600 	andeq	pc, fp, r0, lsl #12
     be4:	52011300 	andpl	r1, r1, #0, 6
     be8:	01133001 	tsteq	r3, r1
     bec:	13360151 	teqne	r6, #1073741844	; 0x40000014
     bf0:	74025001 	strvc	r5, [r2], #-1
     bf4:	8c110000 	ldchi	0, cr0, [r1], {-0}
     bf8:	5d080033 	stcpl	0, cr0, [r8, #-204]	; 0xffffff34
     bfc:	12000029 	andne	r0, r0, #41	; 0x29
     c00:	08003398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, sp}
     c04:	00002942 	andeq	r2, r0, r2, asr #18
     c08:	00000c1f 	andeq	r0, r0, pc, lsl ip
     c0c:	03520113 	cmpeq	r2, #-1073741820	; 0xc0000004
     c10:	1303ff0a 	movwne	pc, #16138	; 0x3f0a	; <UNPREDICTABLE>
     c14:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
     c18:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     c1c:	11000074 	tstne	r0, r4, ror r0
     c20:	0800339c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, sp}
     c24:	0000295d 	andeq	r2, r0, sp, asr r9
     c28:	0033a617 	eorseq	sl, r3, r7, lsl r6
     c2c:	000add08 	andeq	sp, sl, r8, lsl #26
     c30:	50011300 	andpl	r1, r1, r0, lsl #6
     c34:	5f010305 	svcpl	0x00010305
     c38:	00000800 	andeq	r0, r0, r0, lsl #16
     c3c:	0004220f 	andeq	r2, r4, pc, lsl #4
     c40:	038f0100 	orreq	r0, pc, #0, 2
     c44:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     c48:	0000004c 	andeq	r0, r0, ip, asr #32
     c4c:	0c6c9c01 	stcleq	12, cr9, [ip], #-4
     c50:	431a0000 	tstmi	sl, #0
     c54:	01000013 	tsteq	r0, r3, lsl r0
     c58:	0ba3038f 	bleq	fe8c1a9c <SCS_BASE+0x1e8b3a9c>
     c5c:	00e50000 	rsceq	r0, r5, r0
     c60:	da210000 	ble	840c68 <__Stack_Size+0x840868>
     c64:	dd080033 	stcle	0, cr0, [r8, #-204]	; 0xffffff34
     c68:	0000000a 	andeq	r0, r0, sl
     c6c:	000d090f 	andeq	r0, sp, pc, lsl #18
     c70:	03b20100 			; <UNDEFINED> instruction: 0x03b20100
     c74:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     c78:	00000094 	muleq	r0, r4, r0
     c7c:	0da79c01 	stceq	12, cr9, [r7, #4]!
     c80:	00120000 	andseq	r0, r2, r0
     c84:	68080034 	stmdavs	r8, {r2, r4, r5}
     c88:	95000029 	strls	r0, [r0, #-41]	; 0x29
     c8c:	1300000c 	movwne	r0, #12
     c90:	31015001 	tstcc	r1, r1
     c94:	340a1200 	strcc	r1, [sl], #-512	; 0x200
     c98:	0add0800 	beq	ff742ca0 <SCS_BASE+0x1f734ca0>
     c9c:	0cac0000 	stceq	0, cr0, [ip]
     ca0:	01130000 	tsteq	r3, r0
     ca4:	54030550 	strpl	r0, [r3], #-1360	; 0x550
     ca8:	00080060 	andeq	r0, r8, r0, rrx
     cac:	00341012 	eorseq	r1, r4, r2, lsl r0
     cb0:	00296808 	eoreq	r6, r9, r8, lsl #16
     cb4:	000cbf00 	andeq	fp, ip, r0, lsl #30
     cb8:	50011300 	andpl	r1, r1, r0, lsl #6
     cbc:	12003201 	andne	r3, r0, #268435456	; 0x10000000
     cc0:	0800341a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp}
     cc4:	00000add 	ldrdeq	r0, [r0], -sp
     cc8:	00000cd6 	ldrdeq	r0, [r0], -r6
     ccc:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     cd0:	00606a03 	rsbeq	r6, r0, r3, lsl #20
     cd4:	20120008 	andscs	r0, r2, r8
     cd8:	68080034 	stmdavs	r8, {r2, r4, r5}
     cdc:	e9000029 	stmdb	r0, {r0, r3, r5}
     ce0:	1300000c 	movwne	r0, #12
     ce4:	34015001 	strcc	r5, [r1], #-1
     ce8:	342a1200 	strtcc	r1, [sl], #-512	; 0x200
     cec:	0add0800 	beq	ff742cf4 <SCS_BASE+0x1f734cf4>
     cf0:	0d000000 	stceq	0, cr0, [r0, #-0]
     cf4:	01130000 	tsteq	r3, r0
     cf8:	7e030550 	cfrshl32vc	mvfx3, mvfx0, r0
     cfc:	00080060 	andeq	r0, r8, r0, rrx
     d00:	00343012 	eorseq	r3, r4, r2, lsl r0
     d04:	00296808 	eoreq	r6, r9, r8, lsl #16
     d08:	000d1300 	andeq	r1, sp, r0, lsl #6
     d0c:	50011300 	andpl	r1, r1, r0, lsl #6
     d10:	12003801 	andne	r3, r0, #65536	; 0x10000
     d14:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
     d18:	00000add 	ldrdeq	r0, [r0], -sp
     d1c:	00000d2a 	andeq	r0, r0, sl, lsr #26
     d20:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     d24:	00608f03 	rsbeq	r8, r0, r3, lsl #30
     d28:	40120008 	andsmi	r0, r2, r8
     d2c:	68080034 	stmdavs	r8, {r2, r4, r5}
     d30:	3d000029 	stccc	0, cr0, [r0, #-164]	; 0xffffff5c
     d34:	1300000d 	movwne	r0, #13
     d38:	40015001 	andmi	r5, r1, r1
     d3c:	344a1200 	strbcc	r1, [sl], #-512	; 0x200
     d40:	0add0800 	beq	ff742d48 <SCS_BASE+0x1f734d48>
     d44:	0d540000 	ldcleq	0, cr0, [r4, #-0]
     d48:	01130000 	tsteq	r3, r0
     d4c:	a4030550 	strge	r0, [r3], #-1360	; 0x550
     d50:	00080060 	andeq	r0, r8, r0, rrx
     d54:	00345012 	eorseq	r5, r4, r2, lsl r0
     d58:	00296808 	eoreq	r6, r9, r8, lsl #16
     d5c:	000d6800 	andeq	r6, sp, r0, lsl #16
     d60:	50011300 	andpl	r1, r1, r0, lsl #6
     d64:	00200802 	eoreq	r0, r0, r2, lsl #16
     d68:	00345a12 	eorseq	r5, r4, r2, lsl sl
     d6c:	000add08 	andeq	sp, sl, r8, lsl #26
     d70:	000d7f00 	andeq	r7, sp, r0, lsl #30
     d74:	50011300 	andpl	r1, r1, r0, lsl #6
     d78:	60b50305 	adcsvs	r0, r5, r5, lsl #6
     d7c:	12000800 	andne	r0, r0, #0, 16
     d80:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
     d84:	00002968 	andeq	r2, r0, r8, ror #18
     d88:	00000d93 	muleq	r0, r3, sp
     d8c:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     d90:	17004008 	strne	r4, [r0, -r8]
     d94:	0800346e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp}
     d98:	00000add 	ldrdeq	r0, [r0], -sp
     d9c:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     da0:	0060c603 	rsbeq	ip, r0, r3, lsl #12
     da4:	0f000008 	svceq	0x00000008
     da8:	000007d7 	ldrdeq	r0, [r0], -r7
     dac:	8c03d601 	stchi	6, cr13, [r3], {1}
     db0:	2e080034 	mcrcs	0, 0, r0, cr8, cr4, {1}
     db4:	01000000 	mrseq	r0, (UNDEF: 0)
     db8:	000df09c 	muleq	sp, ip, r0
     dbc:	032f1a00 			; <UNDEFINED> instruction: 0x032f1a00
     dc0:	d6010000 	strle	r0, [r1], -r0
     dc4:	00006903 	andeq	r6, r0, r3, lsl #18
     dc8:	00011300 	andeq	r1, r1, r0, lsl #6
     dcc:	0aa91000 	beq	fea44dd4 <SCS_BASE+0x1ea36dd4>
     dd0:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
     dd4:	00006903 	andeq	r6, r0, r3, lsl #18
     dd8:	00013400 	andeq	r3, r1, r0, lsl #8
     ddc:	34a61100 	strtcc	r1, [r6], #256	; 0x100
     de0:	0a860800 	beq	fe182de8 <SCS_BASE+0x1e174de8>
     de4:	ba210000 	blt	840dec <__Stack_Size+0x8409ec>
     de8:	86080034 			; <UNDEFINED> instruction: 0x86080034
     dec:	0000000a 	andeq	r0, r0, sl
     df0:	0004990f 	andeq	r9, r4, pc, lsl #18
     df4:	03d00100 	bicseq	r0, r0, #0, 2
     df8:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     dfc:	00000014 	andeq	r0, r0, r4, lsl r0
     e00:	0e369c01 	cdpeq	12, 3, cr9, cr6, cr1, {0}
     e04:	a21a0000 	andsge	r0, sl, #0
     e08:	01000003 	tsteq	r0, r3
     e0c:	005703d0 	ldrsbeq	r0, [r7], #-48	; 0xffffffd0
     e10:	01520000 	cmpeq	r2, r0
     e14:	c4120000 	ldrgt	r0, [r2], #-0
     e18:	a7080034 	smladxge	r8, r4, r0, r0
     e1c:	2c00000d 	stccs	0, cr0, [r0], {13}
     e20:	1300000e 	movwne	r0, #14
     e24:	74045001 	strvc	r5, [r4], #-1
     e28:	00253800 	eoreq	r3, r5, r0, lsl #16
     e2c:	0034ce21 	eorseq	ip, r4, r1, lsr #28
     e30:	000da708 	andeq	sl, sp, r8, lsl #14
     e34:	661d0000 	ldrvs	r0, [sp], -r0
     e38:	01000008 	tsteq	r0, r8
     e3c:	0034cea6 	eorseq	ip, r4, r6, lsr #29
     e40:	00003a08 	andeq	r3, r0, r8, lsl #20
     e44:	fa9c0100 	blx	fe70124c <SCS_BASE+0x1e6f324c>
     e48:	1e00000e 	cdpne	0, 0, cr0, cr0, cr14, {0}
     e4c:	01006469 	tsteq	r0, r9, ror #8
     e50:	000073a6 	andeq	r7, r0, r6, lsr #7
     e54:	00017300 	andeq	r7, r1, r0, lsl #6
     e58:	02452200 	subeq	r2, r5, #0, 4
     e5c:	a6010000 	strge	r0, [r1], -r0
     e60:	00000ba3 	andeq	r0, r0, r3, lsr #23
     e64:	00000194 	muleq	r0, r4, r1
     e68:	0005e323 	andeq	lr, r5, r3, lsr #6
     e6c:	a3a70100 			; <UNDEFINED> instruction: 0xa3a70100
     e70:	b500000b 	strlt	r0, [r0, #-11]
     e74:	23000001 	movwcs	r0, #1
     e78:	00000734 	andeq	r0, r0, r4, lsr r7
     e7c:	0ba3ad01 	bleq	fe8ec288 <SCS_BASE+0x1e8de288>
     e80:	01e70000 	mvneq	r0, r0
     e84:	de120000 	cdple	0, 1, cr0, cr2, cr0, {0}
     e88:	42080034 	andmi	r0, r8, #52	; 0x34
     e8c:	b2000029 	andlt	r0, r0, #41	; 0x29
     e90:	1300000e 	movwne	r0, #14
     e94:	0a145201 	beq	5156a0 <__Stack_Size+0x5152a0>
     e98:	01f30400 	mvnseq	r0, r0, lsl #8
     e9c:	01f31c51 	mvnseq	r1, r1, asr ip
     ea0:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
     ea4:	01282d30 			; <UNDEFINED> instruction: 0x01282d30
     ea8:	13131600 	tstne	r3, #0, 12
     eac:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     eb0:	e2110020 	ands	r0, r1, #32
     eb4:	5d080034 	stcpl	0, cr0, [r8, #-208]	; 0xffffff30
     eb8:	12000029 	andne	r0, r0, #41	; 0x29
     ebc:	080034ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, sp}
     ec0:	00000add 	ldrdeq	r0, [r0], -sp
     ec4:	00000ed2 	ldrdeq	r0, [r0], -r2
     ec8:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     ecc:	0060f603 	rsbeq	pc, r0, r3, lsl #12
     ed0:	f4120008 			; <UNDEFINED> instruction: 0xf4120008
     ed4:	f0080034 			; <UNDEFINED> instruction: 0xf0080034
     ed8:	e600000d 	str	r0, [r0], -sp
     edc:	1300000e 	movwne	r0, #14
     ee0:	74025001 	strvc	r5, [r2], #-1
     ee4:	fe170000 	cdp2	0, 1, cr0, cr7, cr0, {0}
     ee8:	dd080034 	stcle	0, cr0, [r8, #-208]	; 0xffffff30
     eec:	1300000a 	movwne	r0, #10
     ef0:	03055001 	movweq	r5, #20481	; 0x5001
     ef4:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}
     ef8:	801d0000 	andshi	r0, sp, r0
     efc:	01000007 	tsteq	r0, r7
     f00:	003508ba 	ldrhteq	r0, [r5], -sl
     f04:	00004808 	andeq	r4, r0, r8, lsl #16
     f08:	db9c0100 	blle	fe701310 <SCS_BASE+0x1e6f3310>
     f0c:	1e00000f 	cdpne	0, 0, cr0, cr0, cr15, {0}
     f10:	01006469 	tsteq	r0, r9, ror #8
     f14:	000073ba 			; <UNDEFINED> instruction: 0x000073ba
     f18:	00021000 	andeq	r1, r2, r0
     f1c:	08772200 	ldmdaeq	r7!, {r9, sp}^
     f20:	ba010000 	blt	40f28 <__Stack_Size+0x40b28>
     f24:	00000ba3 	andeq	r0, r0, r3, lsr #23
     f28:	00000231 	andeq	r0, r0, r1, lsr r2
     f2c:	00024522 	andeq	r4, r2, r2, lsr #10
     f30:	a3ba0100 			; <UNDEFINED> instruction: 0xa3ba0100
     f34:	5d00000b 	stcpl	0, cr0, [r0, #-44]	; 0xffffffd4
     f38:	23000002 	movwcs	r0, #2
     f3c:	0000066e 	andeq	r0, r0, lr, ror #12
     f40:	0ba3bc01 	bleq	fe8eff4c <SCS_BASE+0x1e8e1f4c>
     f44:	027e0000 	rsbseq	r0, lr, #0
     f48:	34230000 	strtcc	r0, [r3], #-0
     f4c:	01000007 	tsteq	r0, r7
     f50:	000ba3c5 	andeq	sl, fp, r5, asr #7
     f54:	0002af00 	andeq	sl, r2, r0, lsl #30
     f58:	35141200 	ldrcc	r1, [r4, #-512]	; 0x200
     f5c:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
     f60:	0f740000 	svceq	0x00740000
     f64:	01130000 	tsteq	r3, r0
     f68:	01f30351 	mvnseq	r0, r1, asr r3
     f6c:	50011352 	andpl	r1, r1, r2, asr r3
     f70:	00007502 	andeq	r7, r0, r2, lsl #10
     f74:	00352612 	eorseq	r2, r5, r2, lsl r6
     f78:	00294208 	eoreq	r4, r9, r8, lsl #4
     f7c:	000f9300 	andeq	r9, pc, r0, lsl #6
     f80:	52011300 	andpl	r1, r1, #0, 6
     f84:	13007402 	movwne	r7, #1026	; 0x402
     f88:	4e015101 	adfmis	f5, f1, f1
     f8c:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     f90:	11000075 	tstne	r0, r5, ror r0
     f94:	0800352a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, sp}
     f98:	0000295d 	andeq	r2, r0, sp, asr r9
     f9c:	00353612 	eorseq	r3, r5, r2, lsl r6
     fa0:	000add08 	andeq	sp, sl, r8, lsl #26
     fa4:	000fb300 	andeq	fp, pc, r0, lsl #6
     fa8:	50011300 	andpl	r1, r1, r0, lsl #6
     fac:	60e40305 	rscvs	r0, r4, r5, lsl #6
     fb0:	12000800 	andne	r0, r0, #0, 16
     fb4:	0800353c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, sp}
     fb8:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fbc:	00000fc7 	andeq	r0, r0, r7, asr #31
     fc0:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
     fc4:	17000074 	smlsdxne	r0, r4, r0, r0
     fc8:	08003546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, sp}
     fcc:	00000add 	ldrdeq	r0, [r0], -sp
     fd0:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
     fd4:	0060df03 	rsbeq	sp, r0, r3, lsl #30
     fd8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
     fdc:	0000086f 	andeq	r0, r0, pc, ror #16
     fe0:	3550d101 	ldrbcc	sp, [r0, #-257]	; 0x101
     fe4:	00340800 	eorseq	r0, r4, r0, lsl #16
     fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fec:	0000106d 	andeq	r1, r0, sp, rrx
     ff0:	0064691e 	rsbeq	r6, r4, lr, lsl r9
     ff4:	0073d101 	rsbseq	sp, r3, r1, lsl #2
     ff8:	02d80000 	sbcseq	r0, r8, #0
     ffc:	34230000 	strtcc	r0, [r3], #-0
    1000:	01000007 	tsteq	r0, r7
    1004:	000ba3d3 	ldrdeq	sl, [fp], -r3
    1008:	0002f900 	andeq	pc, r2, r0, lsl #18
    100c:	355a1200 	ldrbcc	r1, [sl, #-512]	; 0x200
    1010:	297d0800 	ldmdbcs	sp!, {fp}^
    1014:	10250000 	eorne	r0, r5, r0
    1018:	01130000 	tsteq	r3, r0
    101c:	13310152 	teqne	r1, #-2147483628	; 0x80000014
    1020:	49015101 	stmdbmi	r1, {r0, r8, ip, lr}
    1024:	355e1100 	ldrbcc	r1, [lr, #-256]	; 0x100
    1028:	295d0800 	ldmdbcs	sp, {fp}^
    102c:	6a120000 	bvs	481034 <__Stack_Size+0x480c34>
    1030:	dd080035 	stcle	0, cr0, [r8, #-212]	; 0xffffff2c
    1034:	4500000a 	strmi	r0, [r0, #-10]
    1038:	13000010 	movwne	r0, #16
    103c:	03055001 	movweq	r5, #20481	; 0x5001
    1040:	080060e4 	stmdaeq	r0, {r2, r5, r6, r7, sp, lr}
    1044:	35701200 	ldrbcc	r1, [r0, #-512]!	; 0x200
    1048:	0df00800 	ldcleq	8, cr0, [r0]
    104c:	10590000 	subsne	r0, r9, r0
    1050:	01130000 	tsteq	r3, r0
    1054:	00740250 	rsbseq	r0, r4, r0, asr r2
    1058:	357a1700 	ldrbcc	r1, [sl, #-1792]!	; 0x700
    105c:	0add0800 	beq	ff743064 <SCS_BASE+0x1f735064>
    1060:	01130000 	tsteq	r3, r0
    1064:	df030550 	svcle	0x00030550
    1068:	00080060 	andeq	r0, r8, r0, rrx
    106c:	05771d00 	ldrbeq	r1, [r7, #-3328]!	; 0xd00
    1070:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    1074:	08003584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp}
    1078:	00000034 	andeq	r0, r0, r4, lsr r0
    107c:	10ff9c01 	rscsne	r9, pc, r1, lsl #24
    1080:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    1084:	de010064 	cdple	0, 0, cr0, cr1, cr4, {3}
    1088:	00000073 	andeq	r0, r0, r3, ror r0
    108c:	00000322 	andeq	r0, r0, r2, lsr #6
    1090:	00073423 	andeq	r3, r7, r3, lsr #8
    1094:	a3e00100 	mvnge	r0, #0, 2
    1098:	4300000b 	movwmi	r0, #11
    109c:	12000003 	andne	r0, r0, #3
    10a0:	0800358e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, ip, sp}
    10a4:	0000297d 	andeq	r2, r0, sp, ror r9
    10a8:	000010b7 	strheq	r1, [r0], -r7
    10ac:	01520113 	cmpeq	r2, r3, lsl r1
    10b0:	51011330 	tstpl	r1, r0, lsr r3
    10b4:	11004901 	tstne	r0, r1, lsl #18
    10b8:	08003592 	stmdaeq	r0, {r1, r4, r7, r8, sl, ip, sp}
    10bc:	0000295d 	andeq	r2, r0, sp, asr r9
    10c0:	00359e12 	eorseq	r9, r5, r2, lsl lr
    10c4:	000add08 	andeq	sp, sl, r8, lsl #26
    10c8:	0010d700 	andseq	sp, r0, r0, lsl #14
    10cc:	50011300 	andpl	r1, r1, r0, lsl #6
    10d0:	60e40305 	rscvs	r0, r4, r5, lsl #6
    10d4:	12000800 	andne	r0, r0, #0, 16
    10d8:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
    10dc:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10e0:	000010eb 	andeq	r1, r0, fp, ror #1
    10e4:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    10e8:	17000074 	smlsdxne	r0, r4, r0, r0
    10ec:	080035ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, ip, sp}
    10f0:	00000add 	ldrdeq	r0, [r0], -sp
    10f4:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    10f8:	0060df03 	rsbeq	sp, r0, r3, lsl #30
    10fc:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    1100:	00000c95 	muleq	r0, r5, ip
    1104:	35b8ed01 	ldrcc	lr, [r8, #3329]!	; 0xd01
    1108:	00380800 	eorseq	r0, r8, r0, lsl #16
    110c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1110:	0000119c 	muleq	r0, ip, r1
    1114:	0064691e 	rsbeq	r6, r4, lr, lsl r9
    1118:	0073ed01 	rsbseq	lr, r3, r1, lsl #26
    111c:	036c0000 	cmneq	ip, #0
    1120:	db220000 	blle	881128 <__Stack_Size+0x880d28>
    1124:	01000009 	tsteq	r0, r9
    1128:	00119ced 	andseq	r9, r1, sp, ror #25
    112c:	00038d00 	andeq	r8, r3, r0, lsl #26
    1130:	07342300 	ldreq	r2, [r4, -r0, lsl #6]!
    1134:	ef010000 	svc	0x00010000
    1138:	00000ba3 	andeq	r0, r0, r3, lsr #23
    113c:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1140:	0035c212 	eorseq	ip, r5, r2, lsl r2
    1144:	00299808 	eoreq	r9, r9, r8, lsl #16
    1148:	00115400 	andseq	r5, r1, r0, lsl #8
    114c:	51011300 	mrspl	r1, SP_irq
    1150:	00200802 	eoreq	r0, r0, r2, lsl #16
    1154:	0035c811 	eorseq	ip, r5, r1, lsl r8
    1158:	00295d08 	eoreq	r5, r9, r8, lsl #26
    115c:	35d41200 	ldrbcc	r1, [r4, #512]	; 0x200
    1160:	0add0800 	beq	ff743168 <SCS_BASE+0x1f735168>
    1164:	11740000 	cmnne	r4, r0
    1168:	01130000 	tsteq	r3, r0
    116c:	f5030550 			; <UNDEFINED> instruction: 0xf5030550
    1170:	00080060 	andeq	r0, r8, r0, rrx
    1174:	0035da12 	eorseq	sp, r5, r2, lsl sl
    1178:	000df008 	andeq	pc, sp, r8
    117c:	00118800 	andseq	r8, r1, r0, lsl #16
    1180:	50011300 	andpl	r1, r1, r0, lsl #6
    1184:	00007402 	andeq	r7, r0, r2, lsl #8
    1188:	0035e417 	eorseq	lr, r5, r7, lsl r4
    118c:	000add08 	andeq	sp, sl, r8, lsl #26
    1190:	50011300 	andpl	r1, r1, r0, lsl #6
    1194:	60df0305 	sbcsvs	r0, pc, r5, lsl #6
    1198:	00000800 	andeq	r0, r0, r0, lsl #16
    119c:	11a2041c 			; <UNDEFINED> instruction: 0x11a2041c
    11a0:	04030000 	streq	r0, [r3], #-0
    11a4:	000a6707 	andeq	r6, sl, r7, lsl #14
    11a8:	04731d00 	ldrbteq	r1, [r3], #-3328	; 0xd00
    11ac:	fd010000 	stc2	0, cr0, [r1, #-0]
    11b0:	080035f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, sp}
    11b4:	00000038 	andeq	r0, r0, r8, lsr r0
    11b8:	12469c01 	subne	r9, r6, #256	; 0x100
    11bc:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    11c0:	fd010064 	stc2	0, cr0, [r1, #-400]	; 0xfffffe70
    11c4:	00000073 	andeq	r0, r0, r3, ror r0
    11c8:	000003e2 	andeq	r0, r0, r2, ror #7
    11cc:	0001a722 	andeq	sl, r1, r2, lsr #14
    11d0:	9cfd0100 	ldflse	f0, [sp]
    11d4:	03000011 	movweq	r0, #17
    11d8:	23000004 	movwcs	r0, #4
    11dc:	00000734 	andeq	r0, r0, r4, lsr r7
    11e0:	0ba3ff01 	bleq	fe900dec <SCS_BASE+0x1e8f2dec>
    11e4:	042f0000 	strteq	r0, [pc], #-0	; 11ec <__Stack_Size+0xdec>
    11e8:	fa120000 	blx	4811f0 <__Stack_Size+0x480df0>
    11ec:	98080035 	stmdals	r8, {r0, r2, r4, r5}
    11f0:	fe000029 	cdp2	0, 0, cr0, cr0, cr9, {1}
    11f4:	13000011 	movwne	r0, #17
    11f8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    11fc:	00110024 	andseq	r0, r1, r4, lsr #32
    1200:	5d080036 	stcpl	0, cr0, [r8, #-216]	; 0xffffff28
    1204:	12000029 	andne	r0, r0, #41	; 0x29
    1208:	0800360c 	stmdaeq	r0, {r2, r3, r9, sl, ip, sp}
    120c:	00000add 	ldrdeq	r0, [r0], -sp
    1210:	0000121e 	andeq	r1, r0, lr, lsl r2
    1214:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1218:	0060f503 	rsbeq	pc, r0, r3, lsl #10
    121c:	12120008 	andsne	r0, r2, #8
    1220:	f0080036 			; <UNDEFINED> instruction: 0xf0080036
    1224:	3200000d 	andcc	r0, r0, #13
    1228:	13000012 	movwne	r0, #18
    122c:	74025001 	strvc	r5, [r2], #-1
    1230:	1c170000 	ldcne	0, cr0, [r7], {-0}
    1234:	dd080036 	stcle	0, cr0, [r8, #-216]	; 0xffffff28
    1238:	1300000a 	movwne	r0, #10
    123c:	03055001 	movweq	r5, #20481	; 0x5001
    1240:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}
    1244:	330f0000 	movwcc	r0, #61440	; 0xf000
    1248:	01000006 	tsteq	r0, r6
    124c:	3628010f 	strtcc	r0, [r8], -pc, lsl #2
    1250:	00380800 	eorseq	r0, r8, r0, lsl #16
    1254:	9c010000 	stcls	0, cr0, [r1], {-0}
    1258:	000012e8 	andeq	r1, r0, r8, ror #5
    125c:	0005451a 	andeq	r4, r5, sl, lsl r5
    1260:	010f0100 	mrseq	r0, (UNDEF: 31)
    1264:	00000073 	andeq	r0, r0, r3, ror r0
    1268:	00000458 	andeq	r0, r0, r8, asr r4
    126c:	00016b1a 	andeq	r6, r1, sl, lsl fp
    1270:	010f0100 	mrseq	r0, (UNDEF: 31)
    1274:	000012e8 	andeq	r1, r0, r8, ror #5
    1278:	00000479 	andeq	r0, r0, r9, ror r4
    127c:	00073410 	andeq	r3, r7, r0, lsl r4
    1280:	01110100 	tsteq	r1, r0, lsl #2
    1284:	00000ba3 	andeq	r0, r0, r3, lsr #23
    1288:	000004a5 	andeq	r0, r0, r5, lsr #9
    128c:	00363212 	eorseq	r3, r6, r2, lsl r2
    1290:	0029b208 	eoreq	fp, r9, r8, lsl #4
    1294:	0012a000 	andseq	sl, r2, r0
    1298:	51011300 	mrspl	r1, SP_irq
    129c:	00200802 	eoreq	r0, r0, r2, lsl #16
    12a0:	00363811 	eorseq	r3, r6, r1, lsl r8
    12a4:	00295d08 	eoreq	r5, r9, r8, lsl #26
    12a8:	36441200 	strbcc	r1, [r4], -r0, lsl #4
    12ac:	0add0800 	beq	ff7432b4 <SCS_BASE+0x1f7352b4>
    12b0:	12c00000 	sbcne	r0, r0, #0
    12b4:	01130000 	tsteq	r3, r0
    12b8:	f5030550 			; <UNDEFINED> instruction: 0xf5030550
    12bc:	00080060 	andeq	r0, r8, r0, rrx
    12c0:	00364a12 	eorseq	r4, r6, r2, lsl sl
    12c4:	000df008 	andeq	pc, sp, r8
    12c8:	0012d400 	andseq	sp, r2, r0, lsl #8
    12cc:	50011300 	andpl	r1, r1, r0, lsl #6
    12d0:	00007402 	andeq	r7, r0, r2, lsl #8
    12d4:	00365417 	eorseq	r5, r6, r7, lsl r4
    12d8:	000add08 	andeq	sp, sl, r8, lsl #26
    12dc:	50011300 	andpl	r1, r1, r0, lsl #6
    12e0:	60df0305 	sbcsvs	r0, pc, r5, lsl #6
    12e4:	00000800 	andeq	r0, r0, r0, lsl #16
    12e8:	0073041c 	rsbseq	r0, r3, ip, lsl r4
    12ec:	9d0f0000 	stcls	0, cr0, [pc, #-0]	; 12f4 <__Stack_Size+0xef4>
    12f0:	01000009 	tsteq	r0, r9
    12f4:	3660011f 			; <UNDEFINED> instruction: 0x3660011f
    12f8:	00380800 	eorseq	r0, r8, r0, lsl #16
    12fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1300:	00001390 	muleq	r0, r0, r3
    1304:	0005451a 	andeq	r4, r5, sl, lsl r5
    1308:	011f0100 	tsteq	pc, r0, lsl #2
    130c:	00000073 	andeq	r0, r0, r3, ror r0
    1310:	000004ce 	andeq	r0, r0, lr, asr #9
    1314:	0007181a 	andeq	r1, r7, sl, lsl r8
    1318:	011f0100 	tsteq	pc, r0, lsl #2
    131c:	000012e8 	andeq	r1, r0, r8, ror #5
    1320:	000004ef 	andeq	r0, r0, pc, ror #9
    1324:	00073410 	andeq	r3, r7, r0, lsl r4
    1328:	01210100 			; <UNDEFINED> instruction: 0x01210100
    132c:	00000ba3 	andeq	r0, r0, r3, lsr #23
    1330:	0000051b 	andeq	r0, r0, fp, lsl r5
    1334:	00366a12 	eorseq	r6, r6, r2, lsl sl
    1338:	0029b208 	eoreq	fp, r9, r8, lsl #4
    133c:	00134800 	andseq	r4, r3, r0, lsl #16
    1340:	51011300 	mrspl	r1, SP_irq
    1344:	00210802 	eoreq	r0, r1, r2, lsl #16
    1348:	00367011 	eorseq	r7, r6, r1, lsl r0
    134c:	00295d08 	eoreq	r5, r9, r8, lsl #26
    1350:	367c1200 	ldrbtcc	r1, [ip], -r0, lsl #4
    1354:	0add0800 	beq	ff74335c <SCS_BASE+0x1f73535c>
    1358:	13680000 	cmnne	r8, #0
    135c:	01130000 	tsteq	r3, r0
    1360:	f5030550 			; <UNDEFINED> instruction: 0xf5030550
    1364:	00080060 	andeq	r0, r8, r0, rrx
    1368:	00368212 	eorseq	r8, r6, r2, lsl r2
    136c:	000df008 	andeq	pc, sp, r8
    1370:	00137c00 	andseq	r7, r3, r0, lsl #24
    1374:	50011300 	andpl	r1, r1, r0, lsl #6
    1378:	00007402 	andeq	r7, r0, r2, lsl #8
    137c:	00368c17 	eorseq	r8, r6, r7, lsl ip
    1380:	000add08 	andeq	sp, sl, r8, lsl #26
    1384:	50011300 	andpl	r1, r1, r0, lsl #6
    1388:	60df0305 	sbcsvs	r0, pc, r5, lsl #6
    138c:	00000800 	andeq	r0, r0, r0, lsl #16
    1390:	0002650f 	andeq	r6, r2, pc, lsl #10
    1394:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
    1398:	08003698 	stmdaeq	r0, {r3, r4, r7, r9, sl, ip, sp}
    139c:	00000038 	andeq	r0, r0, r8, lsr r0
    13a0:	14319c01 	ldrtne	r9, [r1], #-3073	; 0xc01
    13a4:	451a0000 	ldrmi	r0, [sl, #-0]
    13a8:	01000005 	tsteq	r0, r5
    13ac:	0073012d 	rsbseq	r0, r3, sp, lsr #2
    13b0:	05440000 	strbeq	r0, [r4, #-0]
    13b4:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    13b8:	01000007 	tsteq	r0, r7
    13bc:	12e8012d 	rscne	r0, r8, #1073741835	; 0x4000000b
    13c0:	05650000 	strbeq	r0, [r5, #-0]!
    13c4:	34100000 	ldrcc	r0, [r0], #-0
    13c8:	01000007 	tsteq	r0, r7
    13cc:	0ba3012f 	bleq	fe8c1890 <SCS_BASE+0x1e8b3890>
    13d0:	05910000 	ldreq	r0, [r1]
    13d4:	a2120000 	andsge	r0, r2, #0
    13d8:	b2080036 	andlt	r0, r8, #54	; 0x36
    13dc:	e9000029 	stmdb	r0, {r0, r3, r5}
    13e0:	13000013 	movwne	r0, #19
    13e4:	4a015101 	bmi	557f0 <__Stack_Size+0x553f0>
    13e8:	36a81100 	strtcc	r1, [r8], r0, lsl #2
    13ec:	295d0800 	ldmdbcs	sp, {fp}^
    13f0:	b4120000 	ldrlt	r0, [r2], #-0
    13f4:	dd080036 	stcle	0, cr0, [r8, #-216]	; 0xffffff28
    13f8:	0900000a 	stmdbeq	r0, {r1, r3}
    13fc:	13000014 	movwne	r0, #20
    1400:	03055001 	movweq	r5, #20481	; 0x5001
    1404:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
    1408:	36ba1200 	ldrtcc	r1, [sl], r0, lsl #4
    140c:	0df00800 	ldcleq	8, cr0, [r0]
    1410:	141d0000 	ldrne	r0, [sp], #-0
    1414:	01130000 	tsteq	r3, r0
    1418:	00740250 	rsbseq	r0, r4, r0, asr r2
    141c:	36c41700 	strbcc	r1, [r4], r0, lsl #14
    1420:	0add0800 	beq	ff743428 <SCS_BASE+0x1f735428>
    1424:	01130000 	tsteq	r3, r0
    1428:	df030550 	svcle	0x00030550
    142c:	00080060 	andeq	r0, r8, r0, rrx
    1430:	09f10f00 	ldmibeq	r1!, {r8, r9, sl, fp}^
    1434:	3b010000 	blcc	4143c <__Stack_Size+0x4103c>
    1438:	0036d001 	eorseq	sp, r6, r1
    143c:	00003808 	andeq	r3, r0, r8, lsl #16
    1440:	d29c0100 	addsle	r0, ip, #0, 2
    1444:	1a000014 	bne	149c <__Stack_Size+0x109c>
    1448:	00000545 	andeq	r0, r0, r5, asr #10
    144c:	73013b01 	movwvc	r3, #6913	; 0x1b01
    1450:	ba000000 	blt	1458 <__Stack_Size+0x1058>
    1454:	1a000005 	bne	1470 <__Stack_Size+0x1070>
    1458:	00000718 	andeq	r0, r0, r8, lsl r7
    145c:	e8013b01 	stmda	r1, {r0, r8, r9, fp, ip, sp}
    1460:	db000012 	blle	14b0 <__Stack_Size+0x10b0>
    1464:	10000005 	andne	r0, r0, r5
    1468:	00000734 	andeq	r0, r0, r4, lsr r7
    146c:	a3013d01 	movwge	r3, #7425	; 0x1d01
    1470:	0700000b 	streq	r0, [r0, -fp]
    1474:	12000006 	andne	r0, r0, #6
    1478:	080036da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, ip, sp}
    147c:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    1480:	0000148a 	andeq	r1, r0, sl, lsl #9
    1484:	01510113 	cmpeq	r1, r3, lsl r1
    1488:	e011004b 	ands	r0, r1, fp, asr #32
    148c:	5d080036 	stcpl	0, cr0, [r8, #-216]	; 0xffffff28
    1490:	12000029 	andne	r0, r0, #41	; 0x29
    1494:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
    1498:	00000add 	ldrdeq	r0, [r0], -sp
    149c:	000014aa 	andeq	r1, r0, sl, lsr #9
    14a0:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    14a4:	0060f503 	rsbeq	pc, r0, r3, lsl #10
    14a8:	f2120008 	vhadd.s16	d0, d2, d8
    14ac:	f0080036 			; <UNDEFINED> instruction: 0xf0080036
    14b0:	be00000d 	cdplt	0, 0, cr0, cr0, cr13, {0}
    14b4:	13000014 	movwne	r0, #20
    14b8:	74025001 	strvc	r5, [r2], #-1
    14bc:	fc170000 	ldc2	0, cr0, [r7], {-0}
    14c0:	dd080036 	stcle	0, cr0, [r8, #-216]	; 0xffffff28
    14c4:	1300000a 	movwne	r0, #10
    14c8:	03055001 	movweq	r5, #20481	; 0x5001
    14cc:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}
    14d0:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    14d4:	01000009 	tsteq	r0, r9
    14d8:	37080149 	strcc	r0, [r8, -r9, asr #2]
    14dc:	00380800 	eorseq	r0, r8, r0, lsl #16
    14e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    14e4:	00001573 	andeq	r1, r0, r3, ror r5
    14e8:	0005451a 	andeq	r4, r5, sl, lsl r5
    14ec:	01490100 	mrseq	r0, (UNDEF: 89)
    14f0:	00000073 	andeq	r0, r0, r3, ror r0
    14f4:	00000630 	andeq	r0, r0, r0, lsr r6
    14f8:	0007181a 	andeq	r1, r7, sl, lsl r8
    14fc:	01490100 	mrseq	r0, (UNDEF: 89)
    1500:	000012e8 	andeq	r1, r0, r8, ror #5
    1504:	00000651 	andeq	r0, r0, r1, asr r6
    1508:	00073410 	andeq	r3, r7, r0, lsl r4
    150c:	014b0100 	mrseq	r0, (UNDEF: 91)
    1510:	00000ba3 	andeq	r0, r0, r3, lsr #23
    1514:	0000067d 	andeq	r0, r0, sp, ror r6
    1518:	00371212 	eorseq	r1, r7, r2, lsl r2
    151c:	0029b208 	eoreq	fp, r9, r8, lsl #4
    1520:	00152b00 	andseq	r2, r5, r0, lsl #22
    1524:	51011300 	mrspl	r1, SP_irq
    1528:	11004c01 	tstne	r0, r1, lsl #24
    152c:	08003718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, sp}
    1530:	0000295d 	andeq	r2, r0, sp, asr r9
    1534:	00372412 	eorseq	r2, r7, r2, lsl r4
    1538:	000add08 	andeq	sp, sl, r8, lsl #26
    153c:	00154b00 	andseq	r4, r5, r0, lsl #22
    1540:	50011300 	andpl	r1, r1, r0, lsl #6
    1544:	60f50305 	rscsvs	r0, r5, r5, lsl #6
    1548:	12000800 	andne	r0, r0, #0, 16
    154c:	0800372a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, ip, sp}
    1550:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1554:	0000155f 	andeq	r1, r0, pc, asr r5
    1558:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    155c:	17000074 	smlsdxne	r0, r4, r0, r0
    1560:	08003734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, sp}
    1564:	00000add 	ldrdeq	r0, [r0], -sp
    1568:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    156c:	0060df03 	rsbeq	sp, r0, r3, lsl #30
    1570:	0f000008 	svceq	0x00000008
    1574:	000004e4 	andeq	r0, r0, r4, ror #9
    1578:	40015801 	andmi	r5, r1, r1, lsl #16
    157c:	38080037 	stmdacc	r8, {r0, r1, r2, r4, r5}
    1580:	01000000 	mrseq	r0, (UNDEF: 0)
    1584:	0016149c 	mulseq	r6, ip, r4
    1588:	05451a00 	strbeq	r1, [r5, #-2560]	; 0xa00
    158c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    1590:	00007301 	andeq	r7, r0, r1, lsl #6
    1594:	0006a600 	andeq	sl, r6, r0, lsl #12
    1598:	07181a00 	ldreq	r1, [r8, -r0, lsl #20]
    159c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    15a0:	0012e801 	andseq	lr, r2, r1, lsl #16
    15a4:	0006c700 	andeq	ip, r6, r0, lsl #14
    15a8:	07341000 	ldreq	r1, [r4, -r0]!
    15ac:	5a010000 	bpl	415b4 <__Stack_Size+0x411b4>
    15b0:	000ba301 	andeq	sl, fp, r1, lsl #6
    15b4:	0006f300 	andeq	pc, r6, r0, lsl #6
    15b8:	374a1200 	strbcc	r1, [sl, -r0, lsl #4]
    15bc:	29b20800 	ldmibcs	r2!, {fp}
    15c0:	15cc0000 	strbne	r0, [ip]
    15c4:	01130000 	tsteq	r3, r0
    15c8:	004d0151 	subeq	r0, sp, r1, asr r1
    15cc:	00375011 	eorseq	r5, r7, r1, lsl r0
    15d0:	00295d08 	eoreq	r5, r9, r8, lsl #26
    15d4:	375c1200 	ldrbcc	r1, [ip, -r0, lsl #4]
    15d8:	0add0800 	beq	ff7435e0 <SCS_BASE+0x1f7355e0>
    15dc:	15ec0000 	strbne	r0, [ip, #0]!
    15e0:	01130000 	tsteq	r3, r0
    15e4:	f5030550 			; <UNDEFINED> instruction: 0xf5030550
    15e8:	00080060 	andeq	r0, r8, r0, rrx
    15ec:	00376212 	eorseq	r6, r7, r2, lsl r2
    15f0:	000df008 	andeq	pc, sp, r8
    15f4:	00160000 	andseq	r0, r6, r0
    15f8:	50011300 	andpl	r1, r1, r0, lsl #6
    15fc:	00007402 	andeq	r7, r0, r2, lsl #8
    1600:	00376c17 	eorseq	r6, r7, r7, lsl ip
    1604:	000add08 	andeq	sp, sl, r8, lsl #26
    1608:	50011300 	andpl	r1, r1, r0, lsl #6
    160c:	60df0305 	sbcsvs	r0, pc, r5, lsl #6
    1610:	00000800 	andeq	r0, r0, r0, lsl #16
    1614:	0000570f 	andeq	r5, r0, pc, lsl #14
    1618:	01660100 	cmneq	r6, r0, lsl #2
    161c:	08003778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp}
    1620:	00000038 	andeq	r0, r0, r8, lsr r0
    1624:	16b59c01 	ldrtne	r9, [r5], r1, lsl #24
    1628:	451a0000 	ldrmi	r0, [sl, #-0]
    162c:	01000005 	tsteq	r0, r5
    1630:	00730166 	rsbseq	r0, r3, r6, ror #2
    1634:	071c0000 	ldreq	r0, [ip, -r0]
    1638:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    163c:	01000007 	tsteq	r0, r7
    1640:	12e80166 	rscne	r0, r8, #-2147483623	; 0x80000019
    1644:	073d0000 	ldreq	r0, [sp, -r0]!
    1648:	34100000 	ldrcc	r0, [r0], #-0
    164c:	01000007 	tsteq	r0, r7
    1650:	0ba30168 	bleq	fe8c1bf8 <SCS_BASE+0x1e8b3bf8>
    1654:	07690000 	strbeq	r0, [r9, -r0]!
    1658:	82120000 	andshi	r0, r2, #0
    165c:	b2080037 	andlt	r0, r8, #55	; 0x37
    1660:	6d000029 	stcvs	0, cr0, [r0, #-164]	; 0xffffff5c
    1664:	13000016 	movwne	r0, #22
    1668:	4e015101 	adfmis	f5, f1, f1
    166c:	37881100 	strcc	r1, [r8, r0, lsl #2]
    1670:	295d0800 	ldmdbcs	sp, {fp}^
    1674:	94120000 	ldrls	r0, [r2], #-0
    1678:	dd080037 	stcle	0, cr0, [r8, #-220]	; 0xffffff24
    167c:	8d00000a 	stchi	0, cr0, [r0, #-40]	; 0xffffffd8
    1680:	13000016 	movwne	r0, #22
    1684:	03055001 	movweq	r5, #20481	; 0x5001
    1688:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
    168c:	379a1200 	ldrcc	r1, [sl, r0, lsl #4]
    1690:	0df00800 	ldcleq	8, cr0, [r0]
    1694:	16a10000 	strtne	r0, [r1], r0
    1698:	01130000 	tsteq	r3, r0
    169c:	00740250 	rsbseq	r0, r4, r0, asr r2
    16a0:	37a41700 	strcc	r1, [r4, r0, lsl #14]!
    16a4:	0add0800 	beq	ff7436ac <SCS_BASE+0x1f7356ac>
    16a8:	01130000 	tsteq	r3, r0
    16ac:	df030550 	svcle	0x00030550
    16b0:	00080060 	andeq	r0, r8, r0, rrx
    16b4:	01380f00 	teqeq	r8, r0, lsl #30
    16b8:	74010000 	strvc	r0, [r1], #-0
    16bc:	0037b001 	eorseq	fp, r7, r1
    16c0:	00003808 	andeq	r3, r0, r8, lsl #16
    16c4:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    16c8:	1a000017 	bne	172c <__Stack_Size+0x132c>
    16cc:	00000545 	andeq	r0, r0, r5, asr #10
    16d0:	73017401 	movwvc	r7, #5121	; 0x1401
    16d4:	92000000 	andls	r0, r0, #0
    16d8:	1a000007 	bne	16fc <__Stack_Size+0x12fc>
    16dc:	00000718 	andeq	r0, r0, r8, lsl r7
    16e0:	e8017401 	stmda	r1, {r0, sl, ip, sp, lr}
    16e4:	b3000012 	movwlt	r0, #18
    16e8:	10000007 	andne	r0, r0, r7
    16ec:	00000734 	andeq	r0, r0, r4, lsr r7
    16f0:	a3017601 	movwge	r7, #5633	; 0x1601
    16f4:	df00000b 	svcle	0x0000000b
    16f8:	12000007 	andne	r0, r0, #7
    16fc:	080037ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp}
    1700:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    1704:	0000170e 	andeq	r1, r0, lr, lsl #14
    1708:	01510113 	cmpeq	r1, r3, lsl r1
    170c:	c011004f 	andsgt	r0, r1, pc, asr #32
    1710:	5d080037 	stcpl	0, cr0, [r8, #-220]	; 0xffffff24
    1714:	12000029 	andne	r0, r0, #41	; 0x29
    1718:	080037cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip, sp}
    171c:	00000add 	ldrdeq	r0, [r0], -sp
    1720:	0000172e 	andeq	r1, r0, lr, lsr #14
    1724:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1728:	0060f503 	rsbeq	pc, r0, r3, lsl #10
    172c:	d2120008 	andsle	r0, r2, #8
    1730:	f0080037 			; <UNDEFINED> instruction: 0xf0080037
    1734:	4200000d 	andmi	r0, r0, #13
    1738:	13000017 	movwne	r0, #23
    173c:	74025001 	strvc	r5, [r2], #-1
    1740:	dc170000 	ldcle	0, cr0, [r7], {-0}
    1744:	dd080037 	stcle	0, cr0, [r8, #-220]	; 0xffffff24
    1748:	1300000a 	movwne	r0, #10
    174c:	03055001 	movweq	r5, #20481	; 0x5001
    1750:	080060df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sp, lr}
    1754:	4b0f0000 	blmi	3c175c <__Stack_Size+0x3c135c>
    1758:	01000002 	tsteq	r0, r2
    175c:	37e80182 	strbcc	r0, [r8, r2, lsl #3]!
    1760:	00380800 	eorseq	r0, r8, r0, lsl #16
    1764:	9c010000 	stcls	0, cr0, [r1], {-0}
    1768:	000017f8 	strdeq	r1, [r0], -r8
    176c:	0005451a 	andeq	r4, r5, sl, lsl r5
    1770:	01820100 	orreq	r0, r2, r0, lsl #2
    1774:	00000073 	andeq	r0, r0, r3, ror r0
    1778:	00000808 	andeq	r0, r0, r8, lsl #16
    177c:	0007181a 	andeq	r1, r7, sl, lsl r8
    1780:	01820100 	orreq	r0, r2, r0, lsl #2
    1784:	0000119c 	muleq	r0, ip, r1
    1788:	00000829 	andeq	r0, r0, r9, lsr #16
    178c:	00073410 	andeq	r3, r7, r0, lsl r4
    1790:	01840100 	orreq	r0, r4, r0, lsl #2
    1794:	00000ba3 	andeq	r0, r0, r3, lsr #23
    1798:	00000855 	andeq	r0, r0, r5, asr r8
    179c:	0037f212 	eorseq	pc, r7, r2, lsl r2	; <UNPREDICTABLE>
    17a0:	00299808 	eoreq	r9, r9, r8, lsl #16
    17a4:	0017b000 	andseq	fp, r7, r0
    17a8:	51011300 	mrspl	r1, SP_irq
    17ac:	00230802 	eoreq	r0, r3, r2, lsl #16
    17b0:	0037f811 	eorseq	pc, r7, r1, lsl r8	; <UNPREDICTABLE>
    17b4:	00295d08 	eoreq	r5, r9, r8, lsl #26
    17b8:	38041200 	stmdacc	r4, {r9, ip}
    17bc:	0add0800 	beq	ff7437c4 <SCS_BASE+0x1f7357c4>
    17c0:	17d00000 	ldrbne	r0, [r0, r0]
    17c4:	01130000 	tsteq	r3, r0
    17c8:	f5030550 			; <UNDEFINED> instruction: 0xf5030550
    17cc:	00080060 	andeq	r0, r8, r0, rrx
    17d0:	00380a12 	eorseq	r0, r8, r2, lsl sl
    17d4:	000df008 	andeq	pc, sp, r8
    17d8:	0017e400 	andseq	lr, r7, r0, lsl #8
    17dc:	50011300 	andpl	r1, r1, r0, lsl #6
    17e0:	00007402 	andeq	r7, r0, r2, lsl #8
    17e4:	00381417 	eorseq	r1, r8, r7, lsl r4
    17e8:	000add08 	andeq	sp, sl, r8, lsl #26
    17ec:	50011300 	andpl	r1, r1, r0, lsl #6
    17f0:	60df0305 	sbcsvs	r0, pc, r5, lsl #6
    17f4:	00000800 	andeq	r0, r0, r0, lsl #16
    17f8:	000c670f 	andeq	r6, ip, pc, lsl #14
    17fc:	018f0100 	orreq	r0, pc, r0, lsl #2
    1800:	08003820 	stmdaeq	r0, {r5, fp, ip, sp}
    1804:	00000034 	andeq	r0, r0, r4, lsr r0
    1808:	18a19c01 	stmiane	r1!, {r0, sl, fp, ip, pc}
    180c:	451a0000 	ldrmi	r0, [sl, #-0]
    1810:	01000005 	tsteq	r0, r5
    1814:	0073018f 	rsbseq	r0, r3, pc, lsl #3
    1818:	087e0000 	ldmdaeq	lr!, {}^	; <UNPREDICTABLE>
    181c:	111a0000 	tstne	sl, r0
    1820:	0100000a 	tsteq	r0, sl
    1824:	0ba3018f 	bleq	fe8c1e68 <SCS_BASE+0x1e8b3e68>
    1828:	089f0000 	ldmeq	pc, {}	; <UNPREDICTABLE>
    182c:	34100000 	ldrcc	r0, [r0], #-0
    1830:	01000007 	tsteq	r0, r7
    1834:	0ba30191 	bleq	fe8c1e80 <SCS_BASE+0x1e8b3e80>
    1838:	08cb0000 	stmiaeq	fp, {}^	; <UNPREDICTABLE>
    183c:	2a120000 	bcs	481844 <__Stack_Size+0x481444>
    1840:	7d080038 	stcvc	0, cr0, [r8, #-224]	; 0xffffff20
    1844:	59000029 	stmdbpl	r0, {r0, r3, r5}
    1848:	13000018 	movwne	r0, #24
    184c:	f3035201 	vhsub.u8	d5, d3, d1
    1850:	01135101 	tsteq	r3, r1, lsl #2
    1854:	28080251 	stmdacs	r8, {r0, r4, r6, r9}
    1858:	382e1100 	stmdacc	lr!, {r8, ip}
    185c:	295d0800 	ldmdbcs	sp, {fp}^
    1860:	3a120000 	bcc	481868 <__Stack_Size+0x481468>
    1864:	dd080038 	stcle	0, cr0, [r8, #-224]	; 0xffffff20
    1868:	7900000a 	stmdbvc	r0, {r1, r3}
    186c:	13000018 	movwne	r0, #24
    1870:	03055001 	movweq	r5, #20481	; 0x5001
    1874:	080060f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sp, lr}
    1878:	38401200 	stmdacc	r0, {r9, ip}^
    187c:	0df00800 	ldcleq	8, cr0, [r0]
    1880:	188d0000 	stmne	sp, {}	; <UNPREDICTABLE>
    1884:	01130000 	tsteq	r3, r0
    1888:	00740250 	rsbseq	r0, r4, r0, asr r2
    188c:	384a1700 	stmdacc	sl, {r8, r9, sl, ip}^
    1890:	0add0800 	beq	ff743898 <SCS_BASE+0x1f735898>
    1894:	01130000 	tsteq	r3, r0
    1898:	df030550 	svcle	0x00030550
    189c:	00080060 	andeq	r0, r8, r0, rrx
    18a0:	06a70f00 	strteq	r0, [r7], r0, lsl #30
    18a4:	9b010000 	blls	418ac <__Stack_Size+0x414ac>
    18a8:	00385401 	eorseq	r5, r8, r1, lsl #8
    18ac:	00001a08 	andeq	r1, r0, r8, lsl #20
    18b0:	119c0100 	orrsne	r0, ip, r0, lsl #2
    18b4:	1a000019 	bne	1920 <__Stack_Size+0x1520>
    18b8:	00000545 	andeq	r0, r0, r5, asr #10
    18bc:	73019b01 	movwvc	r9, #6913	; 0x1b01
    18c0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    18c4:	1a000008 	bne	18ec <__Stack_Size+0x14ec>
    18c8:	00000440 	andeq	r0, r0, r0, asr #8
    18cc:	a3019b01 	movwge	r9, #6913	; 0x1b01
    18d0:	1500000b 	strne	r0, [r0, #-11]
    18d4:	10000009 	andne	r0, r0, r9
    18d8:	00000734 	andeq	r0, r0, r4, lsr r7
    18dc:	a3019c01 	movwge	r9, #7169	; 0x1c01
    18e0:	3300000b 	movwcc	r0, #11
    18e4:	12000009 	andne	r0, r0, #9
    18e8:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
    18ec:	0000297d 	andeq	r2, r0, sp, ror r9
    18f0:	00001907 	andeq	r1, r0, r7, lsl #18
    18f4:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    18f8:	01130074 	tsteq	r3, r4, ror r0
    18fc:	29080251 	stmdbcs	r8, {r0, r4, r6, r9}
    1900:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1904:	11000075 	tstne	r0, r5, ror r0
    1908:	08003868 	stmdaeq	r0, {r3, r5, r6, fp, ip, sp}
    190c:	0000295d 	andeq	r2, r0, sp, asr r9
    1910:	07a30f00 	streq	r0, [r3, r0, lsl #30]!
    1914:	ea010000 	b	4191c <__Stack_Size+0x4151c>
    1918:	00386e03 	eorseq	r6, r8, r3, lsl #28
    191c:	00008e08 	andeq	r8, r0, r8, lsl #28
    1920:	2a9c0100 	bcs	fe701d28 <SCS_BASE+0x1e6f3d28>
    1924:	1500001a 	strne	r0, [r0, #-26]
    1928:	00000a74 	andeq	r0, r0, r4, ror sl
    192c:	9003ec01 	andls	lr, r3, r1, lsl #24
    1930:	02000005 	andeq	r0, r0, #5
    1934:	0f155c91 	svceq	0x00155c91
    1938:	01000005 	tsteq	r0, r5
    193c:	060403ed 	streq	r0, [r4], -sp, ror #7
    1940:	91020000 	mrsls	r0, (UNDEF: 2)
    1944:	38781268 	ldmdacc	r8!, {r3, r5, r6, r9, ip}^
    1948:	29cc0800 	stmibcs	ip, {fp}^
    194c:	19590000 	ldmdbne	r9, {}^	; <UNPREDICTABLE>
    1950:	01130000 	tsteq	r3, r0
    1954:	5c910250 	lfmpl	f0, 4, [r1], {80}	; 0x50
    1958:	387e1200 	ldmdacc	lr!, {r9, ip}^
    195c:	29e40800 	stmibcs	r4!, {fp}^
    1960:	196d0000 	stmdbne	sp!, {}^	; <UNPREDICTABLE>
    1964:	01130000 	tsteq	r3, r0
    1968:	68910250 	ldmvs	r1, {r4, r6, r9}
    196c:	38861200 	stmcc	r6, {r9, ip}
    1970:	29fc0800 	ldmibcs	ip!, {fp}^
    1974:	19820000 	stmibne	r2, {}	; <UNPREDICTABLE>
    1978:	01130000 	tsteq	r3, r0
    197c:	4a400350 	bmi	10026c4 <__Stack_Size+0x10022c4>
    1980:	a6120024 	ldrge	r0, [r2], -r4, lsr #32
    1984:	14080038 	strne	r0, [r8], #-56	; 0x38
    1988:	9d00002a 	stcls	0, cr0, [r0, #-168]	; 0xffffff58
    198c:	13000019 	movwne	r0, #25
    1990:	91025101 	tstls	r2, r1, lsl #2
    1994:	5001135c 	andpl	r1, r1, ip, asr r3
    1998:	244a4003 	strbcs	r4, [sl], #-3
    199c:	38b41200 	ldmcc	r4!, {r9, ip}
    19a0:	2a2b0800 	bcs	ac39a8 <__Stack_Size+0xac35a8>
    19a4:	19be0000 	ldmibne	lr!, {}	; <UNPREDICTABLE>
    19a8:	01130000 	tsteq	r3, r0
    19ac:	13310152 	teqne	r1, #-2147483628	; 0x80000014
    19b0:	0a035101 	beq	d5dbc <__Stack_Size+0xd59bc>
    19b4:	011302d2 			; <UNDEFINED> instruction: 0x011302d2
    19b8:	4a400350 	bmi	1002700 <__Stack_Size+0x1002300>
    19bc:	d2120024 	andsle	r0, r2, #36	; 0x24
    19c0:	47080038 	smladxmi	r8, r8, r0, r0
    19c4:	d900002a 	stmdble	r0, {r1, r3, r5}
    19c8:	13000019 	movwne	r0, #25
    19cc:	91025101 	tstls	r2, r1, lsl #2
    19d0:	50011368 	andpl	r1, r1, r8, ror #6
    19d4:	244a4003 	strbcs	r4, [sl], #-3
    19d8:	38dc1200 	ldmcc	ip, {r9, ip}^
    19dc:	2a5e0800 	bcs	17839e4 <__Stack_Size+0x17835e4>
    19e0:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
    19e4:	01130000 	tsteq	r3, r0
    19e8:	00740251 	rsbseq	r0, r4, r1, asr r2
    19ec:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    19f0:	00244a40 	eoreq	r4, r4, r0, asr #20
    19f4:	0038e812 	eorseq	lr, r8, r2, lsl r8
    19f8:	002a7508 	eoreq	r7, sl, r8, lsl #10
    19fc:	001a1300 	andseq	r1, sl, r0, lsl #6
    1a00:	52011300 	andpl	r1, r1, #0, 6
    1a04:	01133101 	tsteq	r3, r1, lsl #2
    1a08:	13320151 	teqne	r2, #1073741844	; 0x40000014
    1a0c:	40035001 	andmi	r5, r3, r1
    1a10:	1600244a 	strne	r2, [r0], -sl, asr #8
    1a14:	080038f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, fp, ip, sp}
    1a18:	00002a91 	muleq	r0, r1, sl
    1a1c:	01510113 	cmpeq	r1, r3, lsl r1
    1a20:	50011331 	andpl	r1, r1, r1, lsr r3
    1a24:	244a4003 	strbcs	r4, [sl], #-3
    1a28:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    1a2c:	01000006 	tsteq	r0, r6
    1a30:	38fc040f 	ldmcc	ip!, {r0, r1, r2, r3, sl}^
    1a34:	00540800 	subseq	r0, r4, r0, lsl #16
    1a38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a3c:	00001a9b 	muleq	r0, fp, sl
    1a40:	00390812 	eorseq	r0, r9, r2, lsl r8
    1a44:	002aa808 	eoreq	sl, sl, r8, lsl #16
    1a48:	001a5a00 	andseq	r5, sl, r0, lsl #20
    1a4c:	51011300 	mrspl	r1, SP_irq
    1a50:	01133201 	tsteq	r3, r1, lsl #4
    1a54:	4a400350 	bmi	100279c <__Stack_Size+0x100239c>
    1a58:	14120024 	ldrne	r0, [r2], #-36	; 0x24
    1a5c:	c3080039 	movwgt	r0, #32825	; 0x8039
    1a60:	7400002a 	strvc	r0, [r0], #-42	; 0x2a
    1a64:	1300001a 	movwne	r0, #26
    1a68:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    1a6c:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    1a70:	00244a40 	eoreq	r4, r4, r0, asr #20
    1a74:	00391c12 	eorseq	r1, r9, r2, lsl ip
    1a78:	002ada08 	eoreq	sp, sl, r8, lsl #20
    1a7c:	001a8900 	andseq	r8, sl, r0, lsl #18
    1a80:	50011300 	andpl	r1, r1, r0, lsl #6
    1a84:	244a4003 	strbcs	r4, [sl], #-3
    1a88:	39361600 	ldmdbcc	r6!, {r9, sl, ip}
    1a8c:	2af00800 	bcs	ffc03a94 <SCS_BASE+0x1fbf5a94>
    1a90:	01130000 	tsteq	r3, r0
    1a94:	4a400350 	bmi	10027dc <__Stack_Size+0x10023dc>
    1a98:	0f000024 	svceq	0x00000024
    1a9c:	00000400 	andeq	r0, r0, r0, lsl #8
    1aa0:	50041e01 	andpl	r1, r4, r1, lsl #28
    1aa4:	30080039 	andcc	r0, r8, r9, lsr r0
    1aa8:	01000000 	mrseq	r0, (UNDEF: 0)
    1aac:	001ae39c 	mulseq	sl, ip, r3
    1ab0:	395c1200 	ldmdbcc	ip, {r9, ip}^
    1ab4:	2b070800 	blcs	1c3abc <__Stack_Size+0x1c36bc>
    1ab8:	1acf0000 	bne	ff3c1ac0 <SCS_BASE+0x1f3b3ac0>
    1abc:	01130000 	tsteq	r3, r0
    1ac0:	250a0351 	strcs	r0, [sl, #-849]	; 0x351
    1ac4:	50011305 	andpl	r1, r1, r5, lsl #6
    1ac8:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    1acc:	16004001 	strne	r4, [r0], -r1
    1ad0:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
    1ad4:	00002b21 	andeq	r2, r0, r1, lsr #22
    1ad8:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    1adc:	0138000c 	teqeq	r8, ip
    1ae0:	0f000040 	svceq	0x00000040
    1ae4:	0000068c 	andeq	r0, r0, ip, lsl #13
    1ae8:	80042401 	andhi	r2, r4, r1, lsl #8
    1aec:	14080039 	strne	r0, [r8], #-57	; 0x39
    1af0:	01000000 	mrseq	r0, (UNDEF: 0)
    1af4:	001b1e9c 	mulseq	fp, ip, lr
    1af8:	398a1200 	stmibcc	sl, {r9, ip}
    1afc:	2b360800 	blcs	d83b04 <__Stack_Size+0xd83704>
    1b00:	1b0e0000 	blne	381b08 <__Stack_Size+0x381708>
    1b04:	01130000 	tsteq	r3, r0
    1b08:	280a0350 	stmdacs	sl, {r4, r6, r8, r9}
    1b0c:	94170023 	ldrls	r0, [r7], #-35	; 0x23
    1b10:	47080039 	smladxmi	r8, r9, r0, r0
    1b14:	1300002b 	movwne	r0, #43	; 0x2b
    1b18:	31015001 	tstcc	r1, r1
    1b1c:	e6180000 	ldr	r0, [r8], -r0
    1b20:	0100000b 	tsteq	r0, fp
    1b24:	3994042d 	ldmibcc	r4, {r0, r2, r3, r5, sl}
    1b28:	00180800 	andseq	r0, r8, r0, lsl #16
    1b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b30:	00055c0f 	andeq	r5, r5, pc, lsl #24
    1b34:	04330100 	ldrteq	r0, [r3], #-256	; 0x100
    1b38:	080039ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, sp}
    1b3c:	00000030 	andeq	r0, r0, r0, lsr r0
    1b40:	1b879c01 	blne	fe1e8b4c <SCS_BASE+0x1e1dab4c>
    1b44:	031a0000 	tsteq	sl, #0
    1b48:	0100000d 	tsteq	r0, sp
    1b4c:	00450433 	subeq	r0, r5, r3, lsr r4
    1b50:	09530000 	ldmdbeq	r3, {}^	; <UNPREDICTABLE>
    1b54:	b6120000 	ldrlt	r0, [r2], -r0
    1b58:	58080039 	stmdapl	r8, {r0, r3, r4, r5}
    1b5c:	6900002b 	stmdbvs	r0, {r0, r1, r3, r5}
    1b60:	1300001b 	movwne	r0, #27
    1b64:	31015001 	tstcc	r1, r1
    1b68:	39cc1200 	stmibcc	ip, {r9, ip}^
    1b6c:	2b580800 	blcs	1603b74 <__Stack_Size+0x1603774>
    1b70:	1b7d0000 	blne	1f41b78 <__Stack_Size+0x1f41778>
    1b74:	01130000 	tsteq	r3, r0
    1b78:	fe090250 	mcr2	2, 0, r0, cr9, cr0, {2}
    1b7c:	39d62100 	ldmibcc	r6, {r8, sp}^
    1b80:	2b580800 	blcs	1603b88 <__Stack_Size+0x1603788>
    1b84:	0f000000 	svceq	0x00000000
    1b88:	00000310 	andeq	r0, r0, r0, lsl r3
    1b8c:	dc01ac01 	stcle	12, cr10, [r1], {1}
    1b90:	32080039 	andcc	r0, r8, #57	; 0x39
    1b94:	01000000 	mrseq	r0, (UNDEF: 0)
    1b98:	001c329c 	mulseq	ip, ip, r2
    1b9c:	05451a00 	strbeq	r1, [r5, #-2560]	; 0xa00
    1ba0:	ac010000 	stcge	0, cr0, [r1], {-0}
    1ba4:	00007301 	andeq	r7, r0, r1, lsl #6
    1ba8:	00098e00 	andeq	r8, r9, r0, lsl #28
    1bac:	0a111a00 	beq	4483b4 <__Stack_Size+0x447fb4>
    1bb0:	ac010000 	stcge	0, cr0, [r1], {-0}
    1bb4:	000ba301 	andeq	sl, fp, r1, lsl #6
    1bb8:	0009af00 	andeq	sl, r9, r0, lsl #30
    1bbc:	04401a00 	strbeq	r1, [r0], #-2560	; 0xa00
    1bc0:	ac010000 	stcge	0, cr0, [r1], {-0}
    1bc4:	000ba301 	andeq	sl, fp, r1, lsl #6
    1bc8:	0009db00 	andeq	sp, r9, r0, lsl #22
    1bcc:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    1bd0:	a301ad01 	movwge	sl, #7425	; 0x1d01
    1bd4:	0700000b 	streq	r0, [r0, -fp]
    1bd8:	1200000a 	andne	r0, r0, #10
    1bdc:	080039ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip, sp}
    1be0:	000018a1 	andeq	r1, r0, r1, lsr #17
    1be4:	00001bf5 	strdeq	r1, [r0], -r5
    1be8:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    1bec:	0113fe08 	tsteq	r3, r8, lsl #28	; <UNPREDICTABLE>
    1bf0:	00750250 	rsbseq	r0, r5, r0, asr r2
    1bf4:	39f21200 	ldmibcc	r2!, {r9, ip}^
    1bf8:	17f80800 	ldrbne	r0, [r8, r0, lsl #16]!
    1bfc:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    1c00:	01130000 	tsteq	r3, r0
    1c04:	00740251 	rsbseq	r0, r4, r1, asr r2
    1c08:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1c0c:	12000075 	andne	r0, r0, #117	; 0x75
    1c10:	080039fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
    1c14:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c18:	00001c22 	andeq	r1, r0, r2, lsr #24
    1c1c:	01500113 	cmpeq	r0, r3, lsl r1
    1c20:	0e170031 	mrceq	0, 0, r0, cr7, cr1, {1}
    1c24:	a108003a 	tstge	r8, sl, lsr r0
    1c28:	13000018 	movwne	r0, #24
    1c2c:	30015101 	andcc	r5, r1, r1, lsl #2
    1c30:	7d250000 	stcvc	0, cr0, [r5, #-0]
    1c34:	01000001 	tsteq	r0, r1
    1c38:	3a0e024a 	bcc	382568 <__Stack_Size+0x382168>
    1c3c:	00820800 	addeq	r0, r2, r0, lsl #16
    1c40:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c44:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    1c48:	003a1a12 	eorseq	r1, sl, r2, lsl sl
    1c4c:	001b8708 	andseq	r8, fp, r8, lsl #14
    1c50:	001c6700 	andseq	r6, ip, r0, lsl #14
    1c54:	52011300 	andpl	r1, r1, #0, 6
    1c58:	13fa0802 	mvnsne	r0, #131072	; 0x20000
    1c5c:	46015101 	strmi	r5, [r1], -r1, lsl #2
    1c60:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1c64:	12006408 	andne	r6, r0, #8, 8	; 0x8000000
    1c68:	08003a20 	stmdaeq	r0, {r5, r9, fp, ip, sp}
    1c6c:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c70:	00001c7b 	andeq	r1, r0, fp, ror ip
    1c74:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1c78:	1200fa08 	andne	pc, r0, #8, 20	; 0x8000
    1c7c:	08003a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, ip, sp}
    1c80:	00001b87 	andeq	r1, r0, r7, lsl #23
    1c84:	00001c9a 	muleq	r0, sl, ip
    1c88:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    1c8c:	0113fa08 	tsteq	r3, r8, lsl #20	; <UNPREDICTABLE>
    1c90:	13480151 	movtne	r0, #33105	; 0x8151
    1c94:	08025001 	stmdaeq	r2, {r0, ip, lr}
    1c98:	34120064 	ldrcc	r0, [r2], #-100	; 0x64
    1c9c:	8708003a 	smladxhi	r8, sl, r0, r0
    1ca0:	b900001b 	stmdblt	r0, {r0, r1, r3, r4}
    1ca4:	1300001c 	movwne	r0, #28
    1ca8:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1cac:	510113fa 	strdpl	r1, [r1, -sl]
    1cb0:	01134401 	tsteq	r3, r1, lsl #8
    1cb4:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1cb8:	3a3a1200 	bcc	e864c0 <__Stack_Size+0xe860c0>
    1cbc:	1b300800 	blne	c03cc4 <__Stack_Size+0xc038c4>
    1cc0:	1ccd0000 	stclne	0, cr0, [sp], {0}
    1cc4:	01130000 	tsteq	r3, r0
    1cc8:	fa080250 	blx	202610 <__Stack_Size+0x202210>
    1ccc:	3a461200 	bcc	11864d4 <__Stack_Size+0x11860d4>
    1cd0:	1b870800 	blne	fe1c3cd8 <SCS_BASE+0x1e1b5cd8>
    1cd4:	1ced0000 	stclne	0, cr0, [sp]
    1cd8:	01130000 	tsteq	r3, r0
    1cdc:	e80a0352 	stmda	sl, {r1, r4, r6, r8, r9}
    1ce0:	51011303 	tstpl	r1, r3, lsl #6
    1ce4:	01134601 	tsteq	r3, r1, lsl #12
    1ce8:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1cec:	3a4e1200 	bcc	13864f4 <__Stack_Size+0x13860f4>
    1cf0:	1b300800 	blne	c03cf8 <__Stack_Size+0xc038f8>
    1cf4:	1d020000 	stcne	0, cr0, [r2, #-0]
    1cf8:	01130000 	tsteq	r3, r0
    1cfc:	f40a0350 	vst2.16	{d0-d3}, [sl :64], r0
    1d00:	58120001 	ldmdapl	r2, {r0}
    1d04:	8708003a 	smladxhi	r8, sl, r0, r0
    1d08:	2100001b 	tstcs	r0, fp, lsl r0
    1d0c:	1300001d 	movwne	r0, #29
    1d10:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    1d14:	510113fa 	strdpl	r1, [r1, -sl]
    1d18:	01134901 	tsteq	r3, r1, lsl #18
    1d1c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1d20:	3a5e1200 	bcc	1786528 <__Stack_Size+0x1786128>
    1d24:	1b300800 	blne	c03d2c <__Stack_Size+0xc0392c>
    1d28:	1d350000 	ldcne	0, cr0, [r5, #-0]
    1d2c:	01130000 	tsteq	r3, r0
    1d30:	fa080250 	blx	202678 <__Stack_Size+0x202278>
    1d34:	3a681200 	bcc	1a0653c <__Stack_Size+0x1a0613c>
    1d38:	1b870800 	blne	fe1c3d40 <SCS_BASE+0x1e1b5d40>
    1d3c:	1d540000 	ldclne	0, cr0, [r4, #-0]
    1d40:	01130000 	tsteq	r3, r0
    1d44:	fa080252 	blx	202694 <__Stack_Size+0x202294>
    1d48:	01510113 	cmpeq	r1, r3, lsl r1
    1d4c:	50011348 	andpl	r1, r1, r8, asr #6
    1d50:	00640802 	rsbeq	r0, r4, r2, lsl #16
    1d54:	003a7212 	eorseq	r7, sl, r2, lsl r2
    1d58:	001b8708 	andseq	r8, fp, r8, lsl #14
    1d5c:	001d7300 	andseq	r7, sp, r0, lsl #6
    1d60:	52011300 	andpl	r1, r1, #0, 6
    1d64:	13fa0802 	mvnsne	r0, #131072	; 0x20000
    1d68:	44015101 	strmi	r5, [r1], #-257	; 0x101
    1d6c:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1d70:	12006408 	andne	r6, r0, #8, 8	; 0x8000000
    1d74:	08003a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, sp}
    1d78:	00001b30 	andeq	r1, r0, r0, lsr fp
    1d7c:	00001d87 	andeq	r1, r0, r7, lsl #27
    1d80:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1d84:	1200fa08 	andne	pc, r0, #8, 20	; 0x8000
    1d88:	08003a84 	stmdaeq	r0, {r2, r7, r9, fp, ip, sp}
    1d8c:	00001b87 	andeq	r1, r0, r7, lsl #23
    1d90:	00001da7 	andeq	r1, r0, r7, lsr #27
    1d94:	03520113 	cmpeq	r2, #-1073741820	; 0xc0000004
    1d98:	1303e80a 	movwne	lr, #14346	; 0x380a
    1d9c:	46015101 	strmi	r5, [r1], -r1, lsl #2
    1da0:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    1da4:	17006408 	strne	r6, [r0, -r8, lsl #8]
    1da8:	08003a90 	stmdaeq	r0, {r4, r7, r9, fp, ip, sp}
    1dac:	00001b30 	andeq	r1, r0, r0, lsr fp
    1db0:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    1db4:	0001f40a 	andeq	pc, r1, sl, lsl #8
    1db8:	05232500 	streq	r2, [r3, #-1280]!	; 0x500
    1dbc:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    1dc0:	003a9002 	eorseq	r9, sl, r2
    1dc4:	00010008 	andeq	r0, r1, r8
    1dc8:	9b9c0100 	blls	fe7021d0 <SCS_BASE+0x1e6f41d0>
    1dcc:	24000020 	strcs	r0, [r0], #-32
    1dd0:	5f01007a 	svcpl	0x0001007a
    1dd4:	000ba302 	andeq	sl, fp, r2, lsl #6
    1dd8:	000a2600 	andeq	r2, sl, r0, lsl #12
    1ddc:	3a9a1200 	bcc	fe6865e4 <SCS_BASE+0x1e6785e4>
    1de0:	0add0800 	beq	ff743de8 <SCS_BASE+0x1f735de8>
    1de4:	1df40000 	ldclne	0, cr0, [r4]
    1de8:	01130000 	tsteq	r3, r0
    1dec:	05030550 	streq	r0, [r3, #-1360]	; 0x550
    1df0:	00080061 	andeq	r0, r8, r1, rrx
    1df4:	003aa012 	eorseq	sl, sl, r2, lsl r0
    1df8:	000fdb08 	andeq	sp, pc, r8, lsl #22
    1dfc:	001e0700 	andseq	r0, lr, r0, lsl #14
    1e00:	50011300 	andpl	r1, r1, r0, lsl #6
    1e04:	12003401 	andne	r3, r0, #16777216	; 0x1000000
    1e08:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
    1e0c:	00000fdb 	ldrdeq	r0, [r0], -fp
    1e10:	00001e1a 	andeq	r1, r0, sl, lsl lr
    1e14:	01500113 	cmpeq	r0, r3, lsl r1
    1e18:	ac120033 	ldcge	0, cr0, [r2], {51}	; 0x33
    1e1c:	dd08003a 	stcle	0, cr0, [r8, #-232]	; 0xffffff18
    1e20:	3100000a 	tstcc	r0, sl
    1e24:	1300001e 	movwne	r0, #30
    1e28:	03055001 	movweq	r5, #20481	; 0x5001
    1e2c:	08006119 	stmdaeq	r0, {r0, r3, r4, r8, sp, lr}
    1e30:	3ab61200 	bcc	fed86638 <SCS_BASE+0x1ed78638>
    1e34:	28e00800 	stmiacs	r0!, {fp}^
    1e38:	1e4f0000 	cdpne	0, 4, cr0, cr15, cr0, {0}
    1e3c:	01130000 	tsteq	r3, r0
    1e40:	000a0351 	andeq	r0, sl, r1, asr r3
    1e44:	50011320 	andpl	r1, r1, r0, lsr #6
    1e48:	10000c05 	andne	r0, r0, r5, lsl #24
    1e4c:	12004001 	andne	r4, r0, #1
    1e50:	08003ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, sp}
    1e54:	000028ca 	andeq	r2, r0, sl, asr #17
    1e58:	00001e6d 	andeq	r1, r0, sp, ror #28
    1e5c:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1e60:	1320000a 			; <UNDEFINED> instruction: 0x1320000a
    1e64:	0c055001 	stceq	0, cr5, [r5], {1}
    1e68:	40010c00 	andmi	r0, r1, r0, lsl #24
    1e6c:	3ac61200 	bcc	ff186674 <SCS_BASE+0x1f178674>
    1e70:	1b300800 	blne	c03e78 <__Stack_Size+0xc03a78>
    1e74:	1e810000 	cdpne	0, 8, cr0, cr1, cr0, {0}
    1e78:	01130000 	tsteq	r3, r0
    1e7c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1e80:	3ad01200 	bcc	ff406688 <SCS_BASE+0x1f3f8688>
    1e84:	28e00800 	stmiacs	r0!, {fp}^
    1e88:	1e9f0000 	cdpne	0, 9, cr0, cr15, cr0, {0}
    1e8c:	01130000 	tsteq	r3, r0
    1e90:	000a0351 	andeq	r0, sl, r1, asr r3
    1e94:	50011320 	andpl	r1, r1, r0, lsr #6
    1e98:	0c000c05 	stceq	12, cr0, [r0], {5}
    1e9c:	12004001 	andne	r4, r0, #1
    1ea0:	08003ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, ip, sp}
    1ea4:	000028ca 	andeq	r2, r0, sl, asr #17
    1ea8:	00001ebd 			; <UNDEFINED> instruction: 0x00001ebd
    1eac:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1eb0:	1340000a 	movtne	r0, #10
    1eb4:	0c055001 	stceq	0, cr5, [r5], {1}
    1eb8:	40010c00 	andmi	r0, r1, r0, lsl #24
    1ebc:	3ae01200 	bcc	ff8066c4 <SCS_BASE+0x1f7f86c4>
    1ec0:	1b300800 	blne	c03ec8 <__Stack_Size+0xc03ac8>
    1ec4:	1ed10000 	cdpne	0, 13, cr0, cr1, cr0, {0}
    1ec8:	01130000 	tsteq	r3, r0
    1ecc:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1ed0:	3aea1200 	bcc	ffa866d8 <SCS_BASE+0x1fa786d8>
    1ed4:	28e00800 	stmiacs	r0!, {fp}^
    1ed8:	1eef0000 	cdpne	0, 14, cr0, cr15, cr0, {0}
    1edc:	01130000 	tsteq	r3, r0
    1ee0:	000a0351 	andeq	r0, sl, r1, asr r3
    1ee4:	50011340 	andpl	r1, r1, r0, asr #6
    1ee8:	0c000c05 	stceq	12, cr0, [r0], {5}
    1eec:	12004001 	andne	r4, r0, #1
    1ef0:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
    1ef4:	000028ca 	andeq	r2, r0, sl, asr #17
    1ef8:	00001f0d 	andeq	r1, r0, sp, lsl #30
    1efc:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1f00:	1380000b 	orrne	r0, r0, #11
    1f04:	0c055001 	stceq	0, cr5, [r5], {1}
    1f08:	40010c00 	andmi	r0, r1, r0, lsl #24
    1f0c:	3afa1200 	bcc	ffe86714 <SCS_BASE+0x1fe78714>
    1f10:	1b300800 	blne	c03f18 <__Stack_Size+0xc03b18>
    1f14:	1f210000 	svcne	0x00210000
    1f18:	01130000 	tsteq	r3, r0
    1f1c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1f20:	3b041200 	blcc	106728 <__Stack_Size+0x106328>
    1f24:	28e00800 	stmiacs	r0!, {fp}^
    1f28:	1f3f0000 	svcne	0x003f0000
    1f2c:	01130000 	tsteq	r3, r0
    1f30:	000b0351 	andeq	r0, fp, r1, asr r3
    1f34:	50011380 	andpl	r1, r1, r0, lsl #7
    1f38:	0c000c05 	stceq	12, cr0, [r0], {5}
    1f3c:	12004001 	andne	r4, r0, #1
    1f40:	08003b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, ip, sp}
    1f44:	000028ca 	andeq	r2, r0, sl, asr #17
    1f48:	00001f5d 	andeq	r1, r0, sp, asr pc
    1f4c:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1f50:	1340000a 	movtne	r0, #10
    1f54:	0c055001 	stceq	0, cr5, [r5], {1}
    1f58:	40011000 	andmi	r1, r1, r0
    1f5c:	3b141200 	blcc	506764 <__Stack_Size+0x506364>
    1f60:	1b300800 	blne	c03f68 <__Stack_Size+0xc03b68>
    1f64:	1f710000 	svcne	0x00710000
    1f68:	01130000 	tsteq	r3, r0
    1f6c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1f70:	3b1e1200 	blcc	786778 <__Stack_Size+0x786378>
    1f74:	28e00800 	stmiacs	r0!, {fp}^
    1f78:	1f8f0000 	svcne	0x008f0000
    1f7c:	01130000 	tsteq	r3, r0
    1f80:	000a0351 	andeq	r0, sl, r1, asr r3
    1f84:	50011340 	andpl	r1, r1, r0, asr #6
    1f88:	10000c05 	andne	r0, r0, r5, lsl #24
    1f8c:	12004001 	andne	r4, r0, #1
    1f90:	08003b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, ip, sp}
    1f94:	000028ca 	andeq	r2, r0, sl, asr #17
    1f98:	00001fad 	andeq	r1, r0, sp, lsr #31
    1f9c:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1fa0:	1380000b 	orrne	r0, r0, #11
    1fa4:	0c055001 	stceq	0, cr5, [r5], {1}
    1fa8:	40011000 	andmi	r1, r1, r0
    1fac:	3b2e1200 	blcc	b867b4 <__Stack_Size+0xb863b4>
    1fb0:	1b300800 	blne	c03fb8 <__Stack_Size+0xc03bb8>
    1fb4:	1fc10000 	svcne	0x00c10000
    1fb8:	01130000 	tsteq	r3, r0
    1fbc:	64080250 	strvs	r0, [r8], #-592	; 0x250
    1fc0:	3b381200 	blcc	e067c8 <__Stack_Size+0xe063c8>
    1fc4:	28e00800 	stmiacs	r0!, {fp}^
    1fc8:	1fdf0000 	svcne	0x00df0000
    1fcc:	01130000 	tsteq	r3, r0
    1fd0:	000b0351 	andeq	r0, fp, r1, asr r3
    1fd4:	50011380 	andpl	r1, r1, r0, lsl #7
    1fd8:	10000c05 	andne	r0, r0, r5, lsl #24
    1fdc:	12004001 	andne	r4, r0, #1
    1fe0:	08003b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip, sp}
    1fe4:	000028ca 	andeq	r2, r0, sl, asr #17
    1fe8:	00001ffd 	strdeq	r1, [r0], -sp
    1fec:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    1ff0:	1310000a 	tstne	r0, #10
    1ff4:	0c055001 	stceq	0, cr5, [r5], {1}
    1ff8:	40010c00 	andmi	r0, r1, r0, lsl #24
    1ffc:	3b481200 	blcc	1206804 <__Stack_Size+0x1206404>
    2000:	1b300800 	blne	c04008 <__Stack_Size+0xc03c08>
    2004:	20110000 	andscs	r0, r1, r0
    2008:	01130000 	tsteq	r3, r0
    200c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2010:	3b521200 	blcc	1486818 <__Stack_Size+0x1486418>
    2014:	28e00800 	stmiacs	r0!, {fp}^
    2018:	202f0000 	eorcs	r0, pc, r0
    201c:	01130000 	tsteq	r3, r0
    2020:	000a0351 	andeq	r0, sl, r1, asr r3
    2024:	50011310 	andpl	r1, r1, r0, lsl r3
    2028:	0c000c05 	stceq	12, cr0, [r0], {5}
    202c:	12004001 	andne	r4, r0, #1
    2030:	08003b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, sp}
    2034:	000028ca 	andeq	r2, r0, sl, asr #17
    2038:	0000204d 	andeq	r2, r0, sp, asr #32
    203c:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    2040:	1320000a 			; <UNDEFINED> instruction: 0x1320000a
    2044:	0c055001 	stceq	0, cr5, [r5], {1}
    2048:	40011000 	andmi	r1, r1, r0
    204c:	3b621200 	blcc	1886854 <__Stack_Size+0x1886454>
    2050:	1b300800 	blne	c04058 <__Stack_Size+0xc03c58>
    2054:	20610000 	rsbcs	r0, r1, r0
    2058:	01130000 	tsteq	r3, r0
    205c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2060:	3b681200 	blcc	1a06868 <__Stack_Size+0x1a06468>
    2064:	0add0800 	beq	ff74406c <SCS_BASE+0x1f73606c>
    2068:	20780000 	rsbscs	r0, r8, r0
    206c:	01130000 	tsteq	r3, r0
    2070:	22030550 	andcs	r0, r3, #80, 10	; 0x14000000
    2074:	00080061 	andeq	r0, r8, r1, rrx
    2078:	003b6e12 	eorseq	r6, fp, r2, lsl lr
    207c:	00106d08 	andseq	r6, r0, r8, lsl #26
    2080:	00208b00 	eoreq	r8, r0, r0, lsl #22
    2084:	50011300 	andpl	r1, r1, r0, lsl #6
    2088:	16003401 	strne	r3, [r0], -r1, lsl #8
    208c:	08003b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip, sp}
    2090:	0000106d 	andeq	r1, r0, sp, rrx
    2094:	01500113 	cmpeq	r0, r3, lsl r1
    2098:	0f000033 	svceq	0x00000033
    209c:	00000ad5 	ldrdeq	r0, [r0], -r5
    20a0:	90033101 	andls	r3, r3, r1, lsl #2
    20a4:	7c08003b 	stcvc	0, cr0, [r8], {59}	; 0x3b
    20a8:	01000000 	mrseq	r0, (UNDEF: 0)
    20ac:	0021b59c 	mlaeq	r1, ip, r5, fp
    20b0:	06a21a00 	strteq	r1, [r2], r0, lsl #20
    20b4:	31010000 	mrscc	r0, (UNDEF: 1)
    20b8:	00006903 	andeq	r6, r0, r3, lsl #18
    20bc:	000a6700 	andeq	r6, sl, r0, lsl #14
    20c0:	00e61a00 	rsceq	r1, r6, r0, lsl #20
    20c4:	31010000 	mrscc	r0, (UNDEF: 1)
    20c8:	00004503 	andeq	r4, r0, r3, lsl #10
    20cc:	000a8800 	andeq	r8, sl, r0, lsl #16
    20d0:	05631500 	strbeq	r1, [r3, #-1280]!	; 0x500
    20d4:	34010000 	strcc	r0, [r1], #-0
    20d8:	00066003 	andeq	r6, r6, r3
    20dc:	60910200 	addsvs	r0, r1, r0, lsl #4
    20e0:	003b9e12 	eorseq	r9, fp, r2, lsl lr
    20e4:	002b6908 	eoreq	r6, fp, r8, lsl #18
    20e8:	0020f400 	eoreq	pc, r0, r0, lsl #8
    20ec:	50011300 	andpl	r1, r1, r0, lsl #6
    20f0:	00007d02 	andeq	r7, r0, r2, lsl #26
    20f4:	003bc012 	eorseq	ip, fp, r2, lsl r0
    20f8:	002b8008 	eoreq	r8, fp, r8
    20fc:	00210b00 	eoreq	r0, r1, r0, lsl #22
    2100:	50011300 	andpl	r1, r1, r0, lsl #6
    2104:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    2108:	12004001 	andne	r4, r0, #1
    210c:	08003bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp, ip, sp}
    2110:	00001b30 	andeq	r1, r0, r0, lsr fp
    2114:	0000211e 	andeq	r2, r0, lr, lsl r1
    2118:	01500113 	cmpeq	r0, r3, lsl r1
    211c:	ce12003a 	mrcgt	0, 0, r0, cr2, cr10, {1}
    2120:	9108003b 	tstls	r8, fp, lsr r0
    2124:	3b00002b 	blcc	21d8 <__Stack_Size+0x1dd8>
    2128:	13000021 	movwne	r0, #33	; 0x21
    212c:	7d025101 	stfvcs	f5, [r2, #-4]
    2130:	50011300 	andpl	r1, r1, r0, lsl #6
    2134:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    2138:	12004001 	andne	r4, r0, #1
    213c:	08003bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, ip, sp}
    2140:	00002ba7 	andeq	r2, r0, r7, lsr #23
    2144:	0000215e 	andeq	r2, r0, lr, asr r1
    2148:	01520113 	cmpeq	r2, r3, lsl r1
    214c:	51011331 	tstpl	r1, r1, lsr r3
    2150:	05250a03 	streq	r0, [r5, #-2563]!	; 0xa03
    2154:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    2158:	0138000c 	teqeq	r8, ip
    215c:	e8120040 	ldmda	r2, {r6}
    2160:	8008003b 	andhi	r0, r8, fp, lsr r0
    2164:	7500002b 	strvc	r0, [r0, #-43]	; 0x2b
    2168:	13000021 	movwne	r0, #33	; 0x21
    216c:	0c055001 	stceq	0, cr5, [r5], {1}
    2170:	40004800 	andmi	r4, r0, r0, lsl #16
    2174:	3bee1200 	blcc	ffb8697c <SCS_BASE+0x1fb7897c>
    2178:	1b300800 	blne	c04180 <__Stack_Size+0xc03d80>
    217c:	21880000 	orrcs	r0, r8, r0
    2180:	01130000 	tsteq	r3, r0
    2184:	003a0150 	eorseq	r0, sl, r0, asr r1
    2188:	003bf612 	eorseq	pc, fp, r2, lsl r6	; <UNPREDICTABLE>
    218c:	002b9108 	eoreq	r9, fp, r8, lsl #2
    2190:	0021a500 	eoreq	sl, r1, r0, lsl #10
    2194:	51011300 	mrspl	r1, SP_irq
    2198:	13007d02 	movwne	r7, #3330	; 0xd02
    219c:	0c055001 	stceq	0, cr5, [r5], {1}
    21a0:	40004800 	andmi	r4, r0, r0, lsl #16
    21a4:	3bfe1600 	blcc	fff879ac <SCS_BASE+0x1ff799ac>
    21a8:	28f60800 	ldmcs	r6!, {fp}^
    21ac:	01130000 	tsteq	r3, r0
    21b0:	00310151 	eorseq	r0, r1, r1, asr r1
    21b4:	015f2500 	cmpeq	pc, r0, lsl #10
    21b8:	35010000 	strcc	r0, [r1, #-0]
    21bc:	003c0c02 	eorseq	r0, ip, r2, lsl #24
    21c0:	00003008 	andeq	r3, r0, r8
    21c4:	209c0100 	addscs	r0, ip, r0, lsl #2
    21c8:	11000022 	tstne	r0, r2, lsr #32
    21cc:	08003c12 	stmdaeq	r0, {r1, r4, sl, fp, ip, sp}
    21d0:	0000066b 	andeq	r0, r0, fp, ror #12
    21d4:	003c1611 	eorseq	r1, ip, r1, lsl r6
    21d8:	0007c308 	andeq	ip, r7, r8, lsl #6
    21dc:	3c1a1100 	ldfccs	f1, [sl], {-0}
    21e0:	083e0800 	ldmdaeq	lr!, {fp}
    21e4:	1e110000 	cdpne	0, 1, cr0, cr1, cr0, {0}
    21e8:	e308003c 	movw	r0, #32828	; 0x803c
    21ec:	1100001a 	tstne	r0, sl, lsl r0
    21f0:	08003c22 	stmdaeq	r0, {r1, r5, sl, fp, ip, sp}
    21f4:	00001911 	andeq	r1, r0, r1, lsl r9
    21f8:	003c2a12 	eorseq	r2, ip, r2, lsl sl
    21fc:	002bc208 	eoreq	ip, fp, r8, lsl #4
    2200:	00221000 	eoreq	r1, r2, r0
    2204:	51011300 	mrspl	r1, SP_irq
    2208:	01133101 	tsteq	r3, r1, lsl #2
    220c:	00300150 	eorseq	r0, r0, r0, asr r1
    2210:	003c3817 	eorseq	r3, ip, r7, lsl r8
    2214:	00209b08 	eoreq	r9, r0, r8, lsl #22
    2218:	50011300 	andpl	r1, r1, r0, lsl #6
    221c:	00003201 	andeq	r3, r0, r1, lsl #4
    2220:	0006180f 	andeq	r1, r6, pc, lsl #16
    2224:	032c0100 			; <UNDEFINED> instruction: 0x032c0100
    2228:	08003c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, sp}
    222c:	00000008 	andeq	r0, r0, r8
    2230:	225d9c01 	subscs	r9, sp, #256	; 0x100
    2234:	e61a0000 	ldr	r0, [sl], -r0
    2238:	01000000 	mrseq	r0, (UNDEF: 0)
    223c:	0045032c 	subeq	r0, r5, ip, lsr #6
    2240:	0ab40000 	beq	fed02248 <SCS_BASE+0x1ecf4248>
    2244:	44170000 	ldrmi	r0, [r7], #-0
    2248:	9b08003c 	blls	202340 <__Stack_Size+0x201f40>
    224c:	13000020 	movwne	r0, #32
    2250:	f3035101 	vrhadd.u8	d5, d3, d1
    2254:	01135001 	tsteq	r3, r1
    2258:	00300150 	eorseq	r0, r0, r0, asr r1
    225c:	0c801b00 	vstmiaeq	r0, {d1-d0}
    2260:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2264:	000ba301 	andeq	sl, fp, r1, lsl #6
    2268:	005d9800 	subseq	r9, sp, r0, lsl #16
    226c:	00013408 	andeq	r3, r1, r8, lsl #8
    2270:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    2274:	26000025 	strcs	r0, [r0], -r5, lsr #32
    2278:	0000015f 	andeq	r0, r0, pc, asr r1
    227c:	a301c601 	movwge	ip, #5633	; 0x1601
    2280:	8900000b 	stmdbhi	r0, {r0, r1, r3}
    2284:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    2288:	098b2800 	stmibeq	fp, {fp, sp}
    228c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2290:	000ba301 	andeq	sl, fp, r1, lsl #6
    2294:	b8103200 	ldmdalt	r0, {r9, ip, sp}
    2298:	0100000b 	tsteq	r0, fp
    229c:	0ba301d0 	bleq	fe8c29e4 <SCS_BASE+0x1e8b49e4>
    22a0:	0ae00000 	beq	ff8022a8 <SCS_BASE+0x1f7f42a8>
    22a4:	45150000 	ldrmi	r0, [r5, #-0]
    22a8:	0100000d 	tsteq	r0, sp
    22ac:	007301d6 	ldrsbteq	r0, [r3], #-22	; 0xffffffea
    22b0:	91020000 	mrsls	r0, (UNDEF: 2)
    22b4:	5dba2977 	ldcpl	9, cr2, [sl, #476]!	; 0x1dc
    22b8:	00080800 	andeq	r0, r8, r0, lsl #16
    22bc:	22f90000 	rscscs	r0, r9, #0
    22c0:	7d260000 	stcvc	0, cr0, [r6, #-0]
    22c4:	01000001 	tsteq	r0, r1
    22c8:	0ba301e2 	bleq	fe8c2a58 <SCS_BASE+0x1e8b4a58>
    22cc:	22d40000 	sbcscs	r0, r4, #0
    22d0:	00270000 	eoreq	r0, r7, r0
    22d4:	00052326 	andeq	r2, r5, r6, lsr #6
    22d8:	01e40100 	mvneq	r0, r0, lsl #2
    22dc:	00000ba3 	andeq	r0, r0, r3, lsr #23
    22e0:	000022e6 	andeq	r2, r0, r6, ror #5
    22e4:	be110027 	cdplt	0, 1, cr0, cr1, cr7, {1}
    22e8:	3208005d 	andcc	r0, r8, #93	; 0x5d
    22ec:	1100001c 	tstne	r0, ip, lsl r0
    22f0:	08005dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, ip, lr}
    22f4:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    22f8:	5d9e1100 	ldfpls	f1, [lr]
    22fc:	21b50800 			; <UNDEFINED> instruction: 0x21b50800
    2300:	a4120000 	ldrge	r0, [r2], #-0
    2304:	1308005d 	movwne	r0, #32861	; 0x805d
    2308:	1500000b 	strne	r0, [r0, #-11]
    230c:	13000023 	movwne	r0, #35	; 0x23
    2310:	34015001 	strcc	r5, [r1], #-1
    2314:	5daa1200 	sfmpl	f1, 4, [sl]
    2318:	0b130800 	bleq	4c4320 <__Stack_Size+0x4c3f20>
    231c:	23280000 			; <UNDEFINED> instruction: 0x23280000
    2320:	01130000 	tsteq	r3, r0
    2324:	00330150 	eorseq	r0, r3, r0, asr r1
    2328:	005db212 	subseq	fp, sp, r2, lsl r2
    232c:	000e3608 	andeq	r3, lr, r8, lsl #12
    2330:	00234000 	eoreq	r4, r3, r0
    2334:	51011300 	mrspl	r1, SP_irq
    2338:	01133001 	tsteq	r3, r1
    233c:	00340150 	eorseq	r0, r4, r0, asr r1
    2340:	005dba12 	subseq	fp, sp, r2, lsl sl
    2344:	000e3608 	andeq	r3, lr, r8, lsl #12
    2348:	00235800 	eoreq	r5, r3, r0, lsl #16
    234c:	51011300 	mrspl	r1, SP_irq
    2350:	01133001 	tsteq	r3, r1
    2354:	00330150 	eorseq	r0, r3, r0, asr r1
    2358:	005dcc12 	subseq	ip, sp, r2, lsl ip
    235c:	0028e008 	eoreq	lr, r8, r8
    2360:	00237600 	eoreq	r7, r3, r0, lsl #12
    2364:	51011300 	mrspl	r1, SP_irq
    2368:	20000a03 	andcs	r0, r0, r3, lsl #20
    236c:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    2370:	0110000c 	tsteq	r0, ip
    2374:	d6120040 	ldrle	r0, [r2], -r0, asr #32
    2378:	ca08005d 	bgt	2024f4 <__Stack_Size+0x2020f4>
    237c:	94000028 	strls	r0, [r0], #-40	; 0x28
    2380:	13000023 	movwne	r0, #35	; 0x23
    2384:	0a035101 	beq	d6790 <__Stack_Size+0xd6390>
    2388:	01132000 	tsteq	r3, r0
    238c:	000c0550 	andeq	r0, ip, r0, asr r5
    2390:	0040010c 	subeq	r0, r0, ip, lsl #2
    2394:	005ddc12 	subseq	sp, sp, r2, lsl ip
    2398:	000add08 	andeq	sp, sl, r8, lsl #26
    239c:	0023ab00 	eoreq	sl, r3, r0, lsl #22
    23a0:	50011300 	andpl	r1, r1, r0, lsl #6
    23a4:	61370305 	teqvs	r7, r5, lsl #6
    23a8:	12000800 	andne	r0, r0, #0, 16
    23ac:	08005de6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, fp, ip, lr}
    23b0:	00000e36 	andeq	r0, r0, r6, lsr lr
    23b4:	000023c5 	andeq	r2, r0, r5, asr #7
    23b8:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    23bc:	1301900a 	movwne	r9, #4106	; 0x100a
    23c0:	34015001 	strcc	r5, [r1], #-1
    23c4:	5dee1200 	sfmpl	f1, 2, [lr]
    23c8:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    23cc:	23df0000 	bicscs	r0, pc, #0
    23d0:	01130000 	tsteq	r3, r0
    23d4:	700b0351 	andvc	r0, fp, r1, asr r3
    23d8:	500113fe 	strdpl	r1, [r1], -lr
    23dc:	12003301 	andne	r3, r0, #67108864	; 0x4000000
    23e0:	08005df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    23e4:	00001b30 	andeq	r1, r0, r0, lsr fp
    23e8:	000023f4 	strdeq	r2, [r0], -r4
    23ec:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    23f0:	000bb80a 	andeq	fp, fp, sl, lsl #16
    23f4:	005e0012 	subseq	r0, lr, r2, lsl r0
    23f8:	0028e008 	eoreq	lr, r8, r8
    23fc:	00241200 	eoreq	r1, r4, r0, lsl #4
    2400:	51011300 	mrspl	r1, SP_irq
    2404:	20000a03 	andcs	r0, r0, r3, lsl #20
    2408:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    240c:	010c000c 	tsteq	ip, ip
    2410:	0a120040 	beq	482518 <__Stack_Size+0x482118>
    2414:	e008005e 	and	r0, r8, lr, asr r0
    2418:	30000028 	andcc	r0, r0, r8, lsr #32
    241c:	13000024 	movwne	r0, #36	; 0x24
    2420:	0b035101 	bleq	d682c <__Stack_Size+0xd642c>
    2424:	01138000 	tsteq	r3, r0
    2428:	000c0550 	andeq	r0, ip, r0, asr r5
    242c:	0040010c 	subeq	r0, r0, ip, lsl #2
    2430:	005e1412 	subseq	r1, lr, r2, lsl r4
    2434:	0028ca08 	eoreq	ip, r8, r8, lsl #20
    2438:	00244e00 	eoreq	r4, r4, r0, lsl #28
    243c:	51011300 	mrspl	r1, SP_irq
    2440:	40000a03 	andmi	r0, r0, r3, lsl #20
    2444:	05500113 	ldrbeq	r0, [r0, #-275]	; 0x113
    2448:	010c000c 	tsteq	ip, ip
    244c:	1e120040 	cdpne	0, 1, cr0, cr2, cr0, {2}
    2450:	3608005e 			; <UNDEFINED> instruction: 0x3608005e
    2454:	6800000e 	stmdavs	r0, {r1, r2, r3}
    2458:	13000024 	movwne	r0, #36	; 0x24
    245c:	0a035101 	beq	d6868 <__Stack_Size+0xd6468>
    2460:	01130190 			; <UNDEFINED> instruction: 0x01130190
    2464:	00340150 	eorseq	r0, r4, r0, asr r1
    2468:	005e2812 	subseq	r2, lr, r2, lsl r8
    246c:	000e3608 	andeq	r3, lr, r8, lsl #12
    2470:	00248200 	eoreq	r8, r4, r0, lsl #4
    2474:	51011300 	mrspl	r1, SP_irq
    2478:	01900a03 	orrseq	r0, r0, r3, lsl #20
    247c:	01500113 	cmpeq	r0, r3, lsl r1
    2480:	32120033 	andscc	r0, r2, #51	; 0x33
    2484:	3108005e 	qaddcc	r0, lr, r8
    2488:	9c000014 	stcls	0, cr0, [r0], {20}
    248c:	13000024 	movwne	r0, #36	; 0x24
    2490:	91025101 	tstls	r2, r1, lsl #2
    2494:	50011377 	andpl	r1, r1, r7, ror r3
    2498:	00640802 	rsbeq	r0, r4, r2, lsl #16
    249c:	005e3812 	subseq	r3, lr, r2, lsl r8
    24a0:	000add08 	andeq	sp, sl, r8, lsl #26
    24a4:	0024b300 	eoreq	fp, r4, r0, lsl #6
    24a8:	50011300 	andpl	r1, r1, r0, lsl #6
    24ac:	61460305 	cmpvs	r6, r5, lsl #6
    24b0:	11000800 	tstne	r0, r0, lsl #16
    24b4:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
    24b8:	00000da7 	andeq	r0, r0, r7, lsr #27
    24bc:	005e4612 	subseq	r4, lr, r2, lsl r6
    24c0:	000add08 	andeq	sp, sl, r8, lsl #26
    24c4:	0024d300 	eoreq	sp, r4, r0, lsl #6
    24c8:	50011300 	andpl	r1, r1, r0, lsl #6
    24cc:	60e20305 	rscvs	r0, r2, r5, lsl #6
    24d0:	12000800 	andne	r0, r0, #0, 16
    24d4:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
    24d8:	000028e0 	andeq	r2, r0, r0, ror #17
    24dc:	000024f1 	strdeq	r2, [r0], -r1
    24e0:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    24e4:	1340000a 	movtne	r0, #10
    24e8:	0c055001 	stceq	0, cr5, [r5], {1}
    24ec:	40010c00 	andmi	r0, r1, r0, lsl #24
    24f0:	5e621200 	cdppl	2, 6, cr1, cr2, cr0, {0}
    24f4:	28ca0800 	stmiacs	sl, {fp}^
    24f8:	250f0000 	strcs	r0, [pc, #-0]	; 2500 <__Stack_Size+0x2100>
    24fc:	01130000 	tsteq	r3, r0
    2500:	000b0351 	andeq	r0, fp, r1, asr r3
    2504:	50011380 	andpl	r1, r1, r0, lsl #7
    2508:	0c000c05 	stceq	12, cr0, [r0], {5}
    250c:	12004001 	andne	r4, r0, #1
    2510:	08005e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, lr}
    2514:	00001b30 	andeq	r1, r0, r0, lsr fp
    2518:	00002523 	andeq	r2, r0, r3, lsr #10
    251c:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    2520:	12006408 	andne	r6, r0, #8, 8	; 0x8000000
    2524:	08005e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, lr}
    2528:	00000e36 	andeq	r0, r0, r6, lsr lr
    252c:	0000253d 	andeq	r2, r0, sp, lsr r5
    2530:	03510113 	cmpeq	r1, #-1073741820	; 0xc0000004
    2534:	1302000a 	movwne	r0, #8202	; 0x200a
    2538:	34015001 	strcc	r5, [r1], #-1
    253c:	5e7a1200 	cdppl	2, 7, cr1, cr10, cr0, {0}
    2540:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    2544:	25570000 	ldrbcs	r0, [r7, #-0]
    2548:	01130000 	tsteq	r3, r0
    254c:	000b0351 	andeq	r0, fp, r1, asr r3
    2550:	500113fe 	strdpl	r1, [r1], -lr
    2554:	12003301 	andne	r3, r0, #67108864	; 0x4000000
    2558:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
    255c:	00001431 	andeq	r1, r0, r1, lsr r4
    2560:	00002571 	andeq	r2, r0, r1, ror r5
    2564:	02510113 	subseq	r0, r1, #-1073741820	; 0xc0000004
    2568:	01137791 			; <UNDEFINED> instruction: 0x01137791
    256c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2570:	5e8a1200 	cdppl	2, 8, cr1, cr10, cr0, {0}
    2574:	0add0800 	beq	ff74457c <SCS_BASE+0x1f73657c>
    2578:	25880000 	strcs	r0, [r8]
    257c:	01130000 	tsteq	r3, r0
    2580:	5c030550 	cfstr32pl	mvfx0, [r3], {80}	; 0x50
    2584:	00080061 	andeq	r0, r8, r1, rrx
    2588:	005e9211 	subseq	r9, lr, r1, lsl r2
    258c:	000da708 	andeq	sl, sp, r8, lsl #14
    2590:	5e981600 	cdppl	6, 9, cr1, cr8, cr0, {0}
    2594:	0add0800 	beq	ff74459c <SCS_BASE+0x1f73659c>
    2598:	01130000 	tsteq	r3, r0
    259c:	e2030550 	and	r0, r3, #80, 10	; 0x14000000
    25a0:	00080060 	andeq	r0, r8, r0, rrx
    25a4:	09cd0f00 	stmibeq	sp, {r8, r9, sl, fp}^
    25a8:	42010000 	andmi	r0, r1, #0
    25ac:	003c4404 	eorseq	r4, ip, r4, lsl #8
    25b0:	00000c08 	andeq	r0, r0, r8, lsl #24
    25b4:	ca9c0100 	bgt	fe7029bc <SCS_BASE+0x1e6f49bc>
    25b8:	2a000025 	bcs	2654 <__Stack_Size+0x2254>
    25bc:	00000028 	andeq	r0, r0, r8, lsr #32
    25c0:	25044201 	strcs	r4, [r4, #-513]	; 0x201
    25c4:	01000000 	mrseq	r0, (UNDEF: 0)
    25c8:	55190050 	ldrpl	r0, [r9, #-80]	; 0x50
    25cc:	01000009 	tsteq	r0, r9
    25d0:	00690447 	rsbeq	r0, r9, r7, asr #8
    25d4:	3c500000 	mracc	r0, r0, acc0
    25d8:	00140800 	andseq	r0, r4, r0, lsl #16
    25dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    25e0:	0000692b 	andeq	r6, r0, fp, lsr #18
    25e4:	0025f000 	eoreq	pc, r5, r0
    25e8:	01052c00 	tsteq	r5, r0, lsl #24
    25ec:	00ff0000 	rscseq	r0, pc, r0
    25f0:	0006b02d 	andeq	fp, r6, sp, lsr #32
    25f4:	01420100 	mrseq	r0, (UNDEF: 82)
    25f8:	05000026 	streq	r0, [r0, #-38]	; 0x26
    25fc:	00001a03 	andeq	r1, r0, r3, lsl #20
    2600:	25e00520 	strbcs	r0, [r0, #1312]!	; 0x520
    2604:	ad2d0000 	stcge	0, cr0, [sp, #-0]
    2608:	01000000 	mrseq	r0, (UNDEF: 0)
    260c:	00261743 	eoreq	r1, r6, r3, asr #14
    2610:	18030500 	stmdane	r3, {r8, sl}
    2614:	05200000 	streq	r0, [r0, #-0]!
    2618:	00000069 	andeq	r0, r0, r9, rrx
    261c:	000c2e2d 	andeq	r2, ip, sp, lsr #28
    2620:	17430100 	strbne	r0, [r3, -r0, lsl #2]
    2624:	05000026 	streq	r0, [r0, #-38]	; 0x26
    2628:	00001903 	andeq	r1, r0, r3, lsl #18
    262c:	04f32d20 	ldrbteq	r2, [r3], #3360	; 0xd20
    2630:	44010000 	strmi	r0, [r1], #-0
    2634:	0000007a 	andeq	r0, r0, sl, ror r0
    2638:	01240305 			; <UNDEFINED> instruction: 0x01240305
    263c:	a32d2000 			; <UNDEFINED> instruction: 0xa32d2000
    2640:	01000004 	tsteq	r0, r4
    2644:	00007a44 	andeq	r7, r0, r4, asr #20
    2648:	20030500 	andcs	r0, r3, r0, lsl #10
    264c:	2d200001 	stccs	0, cr0, [r0, #-4]!
    2650:	0000012b 	andeq	r0, r0, fp, lsr #2
    2654:	00454501 	subeq	r4, r5, r1, lsl #10
    2658:	03050000 	movweq	r0, #20480	; 0x5000
    265c:	20000010 	andcs	r0, r0, r0, lsl r0
    2660:	00058e2d 	andeq	r8, r5, sp, lsr #28
    2664:	45460100 	strbmi	r0, [r6, #-256]	; 0x100
    2668:	05000000 	streq	r0, [r0, #-0]
    266c:	00000403 	andeq	r0, r0, r3, lsl #8
    2670:	023c2d20 	eorseq	r2, ip, #32, 26	; 0x800
    2674:	47010000 	strmi	r0, [r1, -r0]
    2678:	0000008a 	andeq	r0, r0, sl, lsl #1
    267c:	00000305 	andeq	r0, r0, r5, lsl #6
    2680:	8b2d2000 	blhi	b4a688 <__Stack_Size+0xb4a288>
    2684:	01000003 	tsteq	r0, r3
    2688:	00007a48 	andeq	r7, r0, r8, asr #20
    268c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2690:	2b200001 	blcs	80269c <__Stack_Size+0x80229c>
    2694:	00000057 	andeq	r0, r0, r7, asr r0
    2698:	000026a3 	andeq	r2, r0, r3, lsr #13
    269c:	0001052c 	andeq	r0, r1, ip, lsr #10
    26a0:	2d000100 	stfcss	f0, [r0, #-0]
    26a4:	00000c85 	andeq	r0, r0, r5, lsl #25
    26a8:	26934901 	ldrcs	r4, [r3], r1, lsl #18
    26ac:	03050000 	movweq	r0, #20480	; 0x5000
    26b0:	2000000a 	andcs	r0, r0, sl
    26b4:	0005852d 	andeq	r8, r5, sp, lsr #10
    26b8:	574b0100 	strbpl	r0, [fp, -r0, lsl #2]
    26bc:	05000000 	streq	r0, [r0, #-0]
    26c0:	00012e03 	andeq	r2, r1, r3, lsl #28
    26c4:	070c2d20 	streq	r2, [ip, -r0, lsr #26]
    26c8:	4c010000 	stcmi	0, cr0, [r1], {-0}
    26cc:	00000057 	andeq	r0, r0, r7, asr r0
    26d0:	012c0305 			; <UNDEFINED> instruction: 0x012c0305
    26d4:	2d2d2000 	stccs	0, cr2, [sp, #-0]
    26d8:	01000006 	tsteq	r0, r6
    26dc:	0000694d 	andeq	r6, r0, sp, asr #18
    26e0:	2b030500 	blcs	c3ae8 <__Stack_Size+0xc36e8>
    26e4:	2d200001 	stccs	0, cr0, [r0, #-4]!
    26e8:	000003c8 	andeq	r0, r0, r8, asr #7
    26ec:	00694e01 	rsbeq	r4, r9, r1, lsl #28
    26f0:	03050000 	movweq	r0, #20480	; 0x5000
    26f4:	2000012a 	andcs	r0, r0, sl, lsr #2
    26f8:	0064692e 	rsbeq	r6, r4, lr, lsr #18
    26fc:	00694f01 	rsbeq	r4, r9, r1, lsl #30
    2700:	03050000 	movweq	r0, #20480	; 0x5000
    2704:	20000008 	andcs	r0, r0, r8
    2708:	0001b02d 	andeq	fp, r1, sp, lsr #32
    270c:	69500100 	ldmdbvs	r0, {r8}^
    2710:	05000000 	streq	r0, [r0, #-0]
    2714:	00012903 	andeq	r2, r1, r3, lsl #18
    2718:	13432d20 	movtne	r2, #15648	; 0x3d20
    271c:	50010000 	andpl	r0, r1, r0
    2720:	00000069 	andeq	r0, r0, r9, rrx
    2724:	01280305 			; <UNDEFINED> instruction: 0x01280305
    2728:	3c2f2000 	stccc	0, cr2, [pc], #-0	; 2730 <__Stack_Size+0x2330>
    272c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2730:	064630fd 			; <UNDEFINED> instruction: 0x064630fd
    2734:	fe080000 	cdp2	0, 0, cr0, cr8, cr0, {0}
    2738:	00002742 	andeq	r2, r0, r2, asr #14
    273c:	00004531 	andeq	r4, r0, r1, lsr r5
    2740:	81320000 	teqhi	r2, r0
    2744:	08000002 	stmdaeq	r0, {r1}
    2748:	0000faff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
    274c:	04b53300 	ldrteq	r3, [r5], #768	; 0x300
    2750:	12080000 	andne	r0, r8, #0
    2754:	00276401 	eoreq	r6, r7, r1, lsl #8
    2758:	00453100 	subeq	r3, r5, r0, lsl #2
    275c:	da310000 	ble	c42764 <__Stack_Size+0xc42364>
    2760:	00000000 	andeq	r0, r0, r0
    2764:	0005bd33 	andeq	fp, r5, r3, lsr sp
    2768:	01130800 	tsteq	r3, r0, lsl #16
    276c:	0000277b 	andeq	r2, r0, fp, ror r7
    2770:	00004531 	andeq	r4, r0, r1, lsr r5
    2774:	00da3100 	sbcseq	r3, sl, r0, lsl #2
    2778:	30000000 	andcc	r0, r0, r0
    277c:	0000040e 	andeq	r0, r0, lr, lsl #8
    2780:	278c4209 	strcs	r4, [ip, r9, lsl #4]
    2784:	da310000 	ble	c4278c <__Stack_Size+0xc4238c>
    2788:	00000000 	andeq	r0, r0, r0
    278c:	0001e830 	andeq	lr, r1, r0, lsr r8
    2790:	9db60a00 	ldcls	10, cr0, [r6]
    2794:	31000027 	tstcc	r0, r7, lsr #32
    2798:	00000045 	andeq	r0, r0, r5, asr #32
    279c:	07c63000 	strbeq	r3, [r6, r0]
    27a0:	b40a0000 	strlt	r0, [sl], #-0
    27a4:	000027ae 	andeq	r2, r0, lr, lsr #15
    27a8:	00004531 	andeq	r4, r0, r1, lsr r5
    27ac:	1d330000 	ldcne	0, cr0, [r3, #-0]
    27b0:	08000007 	stmdaeq	r0, {r0, r1, r2}
    27b4:	27c00106 	strbcs	r0, [r0, r6, lsl #2]
    27b8:	45310000 	ldrmi	r0, [r1, #-0]!
    27bc:	00000000 	andeq	r0, r0, r0
    27c0:	00022c33 	andeq	r2, r2, r3, lsr ip
    27c4:	01080800 	tsteq	r8, r0, lsl #16
    27c8:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    27cc:	00004531 	andeq	r4, r0, r1, lsr r5
    27d0:	5c330000 	ldcpl	0, cr0, [r3], #-0
    27d4:	08000007 	stmdaeq	r0, {r0, r1, r2}
    27d8:	27e40107 	strbcs	r0, [r4, r7, lsl #2]!
    27dc:	45310000 	ldrmi	r0, [r1, #-0]!
    27e0:	00000000 	andeq	r0, r0, r0
    27e4:	00018833 	andeq	r8, r1, r3, lsr r8
    27e8:	01020800 	tsteq	r2, r0, lsl #16
    27ec:	000027fb 	strdeq	r2, [r0], -fp
    27f0:	00004531 	andeq	r4, r0, r1, lsr r5
    27f4:	00453100 	subeq	r3, r5, r0, lsl #2
    27f8:	33000000 	movwcc	r0, #0
    27fc:	00000bf2 	strdeq	r0, [r0], -r2
    2800:	0d010308 	stceq	3, cr0, [r1, #-32]	; 0xffffffe0
    2804:	31000028 	tstcc	r0, r8, lsr #32
    2808:	000000da 	ldrdeq	r0, [r0], -sl
    280c:	087d3400 	ldmdaeq	sp!, {sl, ip, sp}^
    2810:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    2814:	0000af01 	andeq	sl, r0, r1, lsl #30
    2818:	00282300 	eoreq	r2, r8, r0, lsl #6
    281c:	00693100 	rsbeq	r3, r9, r0, lsl #2
    2820:	33000000 	movwcc	r0, #0
    2824:	00000017 	andeq	r0, r0, r7, lsl r0
    2828:	35010408 	strcc	r0, [r1, #-1032]	; 0x408
    282c:	31000028 	tstcc	r0, r8, lsr #32
    2830:	00000045 	andeq	r0, r0, r5, asr #32
    2834:	0a273500 	beq	9cfc3c <__Stack_Size+0x9cf83c>
    2838:	05080000 	streq	r0, [r8, #-0]
    283c:	00006901 	andeq	r6, r0, r1, lsl #18
    2840:	05e93300 	strbeq	r3, [r9, #768]!	; 0x300
    2844:	0f050000 	svceq	0x00050000
    2848:	00285801 	eoreq	r5, r8, r1, lsl #16
    284c:	00453100 	subeq	r3, r5, r0, lsl #2
    2850:	45310000 	ldrmi	r0, [r1, #-0]!
    2854:	00000000 	andeq	r0, r0, r0
    2858:	000c1530 	andeq	r1, ip, r0, lsr r5
    285c:	69ff0500 	ldmibvs	pc!, {r8, sl}^	; <UNPREDICTABLE>
    2860:	31000028 	tstcc	r0, r8, lsr #32
    2864:	00000045 	andeq	r0, r0, r5, asr #32
    2868:	07893300 	streq	r3, [r9, r0, lsl #6]
    286c:	00050000 	andeq	r0, r5, r0
    2870:	00287b01 	eoreq	r7, r8, r1, lsl #22
    2874:	287b3100 	ldmdacs	fp!, {r8, ip, sp}^
    2878:	1c000000 	stcne	0, cr0, [r0], {-0}
    287c:	00054004 	andeq	r4, r5, r4
    2880:	00473000 	subeq	r3, r7, r0
    2884:	dc040000 	stcle	0, cr0, [r4], {-0}
    2888:	00002892 	muleq	r0, r2, r8
    288c:	00289231 	eoreq	r9, r8, r1, lsr r2
    2890:	041c0000 	ldreq	r0, [ip], #-0
    2894:	000004fc 	strdeq	r0, [r0], -ip
    2898:	00022230 	andeq	r2, r2, r0, lsr r2
    289c:	aedb0400 	cdpge	4, 13, cr0, cr11, cr0, {0}
    28a0:	31000028 	tstcc	r0, r8, lsr #32
    28a4:	000028ae 	andeq	r2, r0, lr, lsr #17
    28a8:	00289231 	eoreq	r9, r8, r1, lsr r2
    28ac:	041c0000 	ldreq	r0, [ip], #-0
    28b0:	00000171 	andeq	r0, r0, r1, ror r1
    28b4:	0003dd30 	andeq	sp, r3, r0, lsr sp
    28b8:	cae80400 	bgt	ffa038c0 <SCS_BASE+0x1f9f58c0>
    28bc:	31000028 	tstcc	r0, r8, lsr #32
    28c0:	00000045 	andeq	r0, r0, r5, asr #32
    28c4:	0000da31 	andeq	sp, r0, r1, lsr sl
    28c8:	b7300000 	ldrlt	r0, [r0, -r0]!
    28cc:	04000007 	streq	r0, [r0], #-7
    28d0:	0028e0e2 	eoreq	lr, r8, r2, ror #1
    28d4:	28ae3100 	stmiacs	lr!, {r8, ip, sp}
    28d8:	57310000 	ldrpl	r0, [r1, -r0]!
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	0003bb30 	andeq	fp, r3, r0, lsr fp
    28e4:	f6e10400 			; <UNDEFINED> instruction: 0xf6e10400
    28e8:	31000028 	tstcc	r0, r8, lsr #32
    28ec:	000028ae 	andeq	r2, r0, lr, lsr #17
    28f0:	00005731 	andeq	r5, r0, r1, lsr r7
    28f4:	32300000 	eorscc	r0, r0, #0
    28f8:	07000000 	streq	r0, [r0, -r0]
    28fc:	00290ce4 	eoreq	r0, r9, r4, ror #25
    2900:	290c3100 	stmdbcs	ip, {r8, ip, sp}
    2904:	da310000 	ble	c4290c <__Stack_Size+0xc4250c>
    2908:	00000000 	andeq	r0, r0, r0
    290c:	0458041c 	ldrbeq	r0, [r8], #-1052	; 0x41c
    2910:	93300000 	teqls	r0, #0
    2914:	07000003 	streq	r0, [r0, -r3]
    2918:	002928ec 	eoreq	r2, r9, ip, ror #17
    291c:	290c3100 	stmdbcs	ip, {r8, ip, sp}
    2920:	57310000 	ldrpl	r0, [r1, -r0]!
    2924:	00000000 	andeq	r0, r0, r0
    2928:	00076c36 	andeq	r6, r7, r6, lsr ip
    292c:	aff60700 	svcge	0x00f60700
    2930:	42000000 	andmi	r0, r0, #0
    2934:	31000029 	tstcc	r0, r9, lsr #32
    2938:	0000290c 	andeq	r2, r0, ip, lsl #18
    293c:	00005731 	andeq	r5, r0, r1, lsr r7
    2940:	45300000 	ldrmi	r0, [r0, #-0]!
    2944:	0b000004 	bleq	295c <__Stack_Size+0x255c>
    2948:	00295d49 	eoreq	r5, r9, r9, asr #26
    294c:	0ba33100 	bleq	fe8ced54 <SCS_BASE+0x1e8c0d54>
    2950:	a3310000 	teqge	r1, #0
    2954:	3100000b 	tstcc	r0, fp
    2958:	00000ba3 	andeq	r0, r0, r3, lsr #23
    295c:	072c3200 	streq	r3, [ip, -r0, lsl #4]!
    2960:	390b0000 	stmdbcc	fp, {}	; <UNPREDICTABLE>
    2964:	00000ba3 	andeq	r0, r0, r3, lsr #23
    2968:	000d2e36 	andeq	r2, sp, r6, lsr lr
    296c:	a3210b00 			; <UNDEFINED> instruction: 0xa3210b00
    2970:	7d00000b 	stcvc	0, cr0, [r0, #-44]	; 0xffffffd4
    2974:	31000029 	tstcc	r0, r9, lsr #32
    2978:	00000ba3 	andeq	r0, r0, r3, lsr #23
    297c:	03f13000 	mvnseq	r3, #0
    2980:	470b0000 	strmi	r0, [fp, -r0]
    2984:	00002998 	muleq	r0, r8, r9
    2988:	000ba331 	andeq	sl, fp, r1, lsr r3
    298c:	0ba33100 	bleq	fe8ced94 <SCS_BASE+0x1e8c0d94>
    2990:	a3310000 	teqge	r1, #0
    2994:	0000000b 	andeq	r0, r0, fp
    2998:	000b9836 	andeq	r9, fp, r6, lsr r8
    299c:	a3480b00 	movtge	r0, #35584	; 0x8b00
    29a0:	b200000b 	andlt	r0, r0, #11
    29a4:	31000029 	tstcc	r0, r9, lsr #32
    29a8:	00000ba3 	andeq	r0, r0, r3, lsr #23
    29ac:	000ba331 	andeq	sl, fp, r1, lsr r3
    29b0:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    29b4:	0b00000a 	bleq	29e4 <__Stack_Size+0x25e4>
    29b8:	000ba346 	andeq	sl, fp, r6, asr #6
    29bc:	0029cc00 	eoreq	ip, r9, r0, lsl #24
    29c0:	0ba33100 	bleq	fe8cedc8 <SCS_BASE+0x1e8c0dc8>
    29c4:	a3310000 	teqge	r1, #0
    29c8:	0000000b 	andeq	r0, r0, fp
    29cc:	000a4233 	andeq	r4, sl, r3, lsr r2
    29d0:	02ac0600 	adceq	r0, ip, #0, 12
    29d4:	000029de 	ldrdeq	r2, [r0], -lr
    29d8:	0029de31 	eoreq	sp, r9, r1, lsr lr
    29dc:	041c0000 	ldreq	r0, [ip], #-0
    29e0:	00000590 	muleq	r0, r0, r5
    29e4:	00007b33 	andeq	r7, r0, r3, lsr fp
    29e8:	02ad0600 	adceq	r0, sp, #0, 12
    29ec:	000029f6 	strdeq	r2, [r0], -r6
    29f0:	0029f631 	eoreq	pc, r9, r1, lsr r6	; <UNPREDICTABLE>
    29f4:	041c0000 	ldreq	r0, [ip], #-0
    29f8:	00000604 	andeq	r0, r0, r4, lsl #12
    29fc:	000aae33 	andeq	sl, sl, r3, lsr lr
    2a00:	02a30600 	adceq	r0, r3, #0, 12
    2a04:	00002a0e 	andeq	r2, r0, lr, lsl #20
    2a08:	002a0e31 	eoreq	r0, sl, r1, lsr lr
    2a0c:	041c0000 	ldreq	r0, [ip], #-0
    2a10:	0000038e 	andeq	r0, r0, lr, lsl #7
    2a14:	0006e833 	andeq	lr, r6, r3, lsr r8
    2a18:	02a40600 	adceq	r0, r4, #0, 12
    2a1c:	00002a2b 	andeq	r2, r0, fp, lsr #20
    2a20:	002a0e31 	eoreq	r0, sl, r1, lsr lr
    2a24:	29de3100 	ldmibcs	lr, {r8, ip, sp}^
    2a28:	33000000 	movwcc	r0, #0
    2a2c:	00000cef 	andeq	r0, r0, pc, ror #25
    2a30:	4702c006 	strmi	ip, [r2, -r6]
    2a34:	3100002a 	tstcc	r0, sl, lsr #32
    2a38:	00002a0e 	andeq	r2, r0, lr, lsl #20
    2a3c:	00005731 	andeq	r5, r0, r1, lsr r7
    2a40:	00573100 	subseq	r3, r7, r0, lsl #2
    2a44:	33000000 	movwcc	r0, #0
    2a48:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2a4c:	5e02a506 	cfsh32pl	mvfx10, mvfx2, #6
    2a50:	3100002a 	tstcc	r0, sl, lsr #32
    2a54:	00002a0e 	andeq	r2, r0, lr, lsl #20
    2a58:	0029f631 	eoreq	pc, r9, r1, lsr r6	; <UNPREDICTABLE>
    2a5c:	c4330000 	ldrtgt	r0, [r3], #-0
    2a60:	06000001 	streq	r0, [r0], -r1
    2a64:	2a7502cd 	bcs	1d435a0 <__Stack_Size+0x1d431a0>
    2a68:	0e310000 	cdpeq	0, 3, cr0, cr1, cr0, {0}
    2a6c:	3100002a 	tstcc	r0, sl, lsr #32
    2a70:	00000057 	andeq	r0, r0, r7, asr r0
    2a74:	09ad3300 	stmibeq	sp!, {r8, r9, ip, sp}
    2a78:	b2060000 	andlt	r0, r6, #0
    2a7c:	002a9102 	eoreq	r9, sl, r2, lsl #2
    2a80:	2a0e3100 	bcs	38ee88 <__Stack_Size+0x38ea88>
    2a84:	57310000 	ldrpl	r0, [r1, -r0]!
    2a88:	31000000 	mrscc	r0, (UNDEF: 0)
    2a8c:	000000da 	ldrdeq	r0, [r0], -sl
    2a90:	0c8d3300 	stceq	3, cr3, [sp], {0}
    2a94:	b0060000 	andlt	r0, r6, r0
    2a98:	002aa802 	eoreq	sl, sl, r2, lsl #16
    2a9c:	2a0e3100 	bcs	38eea4 <__Stack_Size+0x38eaa4>
    2aa0:	da310000 	ble	c42aa8 <__Stack_Size+0xc426a8>
    2aa4:	00000000 	andeq	r0, r0, r0
    2aa8:	000c4434 	andeq	r4, ip, r4, lsr r4
    2aac:	02fd0600 	rscseq	r0, sp, #0, 12
    2ab0:	000000ba 	strheq	r0, [r0], -sl
    2ab4:	00002ac3 	andeq	r2, r0, r3, asr #21
    2ab8:	002a0e31 	eoreq	r0, sl, r1, lsr lr
    2abc:	00573100 	subseq	r3, r7, r0, lsl #2
    2ac0:	33000000 	movwcc	r0, #0
    2ac4:	00000339 	andeq	r0, r0, r9, lsr r3
    2ac8:	da02fe06 	ble	c22e8 <__Stack_Size+0xc1ee8>
    2acc:	3100002a 	tstcc	r0, sl, lsr #32
    2ad0:	00002a0e 	andeq	r2, r0, lr, lsl #20
    2ad4:	00005731 	andeq	r5, r0, r1, lsr r7
    2ad8:	a3340000 	teqge	r4, #0
    2adc:	06000002 	streq	r0, [r0], -r2
    2ae0:	005702f5 	ldrsheq	r0, [r7], #-37	; 0xffffffdb
    2ae4:	2af00000 	bcs	ffc02aec <SCS_BASE+0x1fbf4aec>
    2ae8:	0e310000 	cdpeq	0, 3, cr0, cr1, cr0, {0}
    2aec:	0000002a 	andeq	r0, r0, sl, lsr #32
    2af0:	000c7033 	andeq	r7, ip, r3, lsr r0
    2af4:	02ec0600 	rsceq	r0, ip, #0, 12
    2af8:	00002b07 	andeq	r2, r0, r7, lsl #22
    2afc:	002a0e31 	eoreq	r0, sl, r1, lsr lr
    2b00:	00573100 	subseq	r3, r7, r0, lsl #2
    2b04:	36000000 	strcc	r0, [r0], -r0
    2b08:	000000ef 	andeq	r0, r0, pc, ror #1
    2b0c:	00baf807 	adcseq	pc, sl, r7, lsl #16
    2b10:	2b210000 	blcs	842b18 <__Stack_Size+0x842718>
    2b14:	0c310000 	ldceq	0, cr0, [r1], #-0
    2b18:	31000029 	tstcc	r0, r9, lsr #32
    2b1c:	00000057 	andeq	r0, r0, r7, asr r0
    2b20:	02ee3600 	rsceq	r3, lr, #0, 12
    2b24:	ed070000 	stc	0, cr0, [r7, #-0]
    2b28:	00000057 	andeq	r0, r0, r7, asr r0
    2b2c:	00002b36 	andeq	r2, r0, r6, lsr fp
    2b30:	00290c31 	eoreq	r0, r9, r1, lsr ip
    2b34:	10300000 	eorsne	r0, r0, r0
    2b38:	0c000002 	stceq	0, cr0, [r0], {2}
    2b3c:	002b4738 	eoreq	r4, fp, r8, lsr r7
    2b40:	00453100 	subeq	r3, r5, r0, lsl #2
    2b44:	30000000 	andcc	r0, r0, r0
    2b48:	00000855 	andeq	r0, r0, r5, asr r8
    2b4c:	2b583a0c 	blcs	1611384 <__Stack_Size+0x1610f84>
    2b50:	da310000 	ble	c42b58 <__Stack_Size+0xc42758>
    2b54:	00000000 	andeq	r0, r0, r0
    2b58:	0009ba30 	andeq	fp, r9, r0, lsr sl
    2b5c:	69390c00 	ldmdbvs	r9!, {sl, fp}
    2b60:	3100002b 	tstcc	r0, fp, lsr #32
    2b64:	00000045 	andeq	r0, r0, r5, asr #32
    2b68:	04623000 	strbteq	r3, [r2], #-0
    2b6c:	e1070000 	mrs	r0, (UNDEF: 7)
    2b70:	00002b7a 	andeq	r2, r0, sl, ror fp
    2b74:	002b7a31 	eoreq	r7, fp, r1, lsr sl
    2b78:	041c0000 	ldreq	r0, [ip], #-0
    2b7c:	00000660 	andeq	r0, r0, r0, ror #12
    2b80:	000af730 	andeq	pc, sl, r0, lsr r7	; <UNPREDICTABLE>
    2b84:	91df0700 	bicsls	r0, pc, r0, lsl #14
    2b88:	3100002b 	tstcc	r0, fp, lsr #32
    2b8c:	0000290c 	andeq	r2, r0, ip, lsl #18
    2b90:	01483000 	mrseq	r3, (UNDEF: 72)
    2b94:	e0070000 	and	r0, r7, r0
    2b98:	00002ba7 	andeq	r2, r0, r7, lsr #23
    2b9c:	00290c31 	eoreq	r0, r9, r1, lsr ip
    2ba0:	2b7a3100 	blcs	1e8efa8 <__Stack_Size+0x1e8eba8>
    2ba4:	30000000 	andcc	r0, r0, r0
    2ba8:	0000097c 	andeq	r0, r0, ip, ror r9
    2bac:	2bc2e507 	blcs	ff0bbfd0 <SCS_BASE+0x1f0adfd0>
    2bb0:	0c310000 	ldceq	0, cr0, [r1], #-0
    2bb4:	31000029 	tstcc	r0, r9, lsr #32
    2bb8:	00000057 	andeq	r0, r0, r7, asr r0
    2bbc:	0000da31 	andeq	sp, r0, r1, lsr sl
    2bc0:	c0370000 	eorsgt	r0, r7, r0
    2bc4:	0b00000c 	bleq	2bfc <__Stack_Size+0x27fc>
    2bc8:	000ba30c 	andeq	sl, fp, ip, lsl #6
    2bcc:	0ba33100 	bleq	fe8cefd4 <SCS_BASE+0x1e8c0fd4>
    2bd0:	a3310000 	teqge	r1, #0
    2bd4:	0000000b 	andeq	r0, r0, fp
    2bd8:	00058000 	andeq	r8, r5, r0
    2bdc:	48000400 	stmdami	r0, {sl}
    2be0:	04000003 	streq	r0, [r0], #-3
    2be4:	0007e101 	andeq	lr, r7, r1, lsl #2
    2be8:	122f0100 	eorne	r0, pc, #0, 2
    2bec:	01010000 	mrseq	r0, (UNDEF: 1)
    2bf0:	3c640000 	stclcc	0, cr0, [r4], #-0
    2bf4:	00900800 	addseq	r0, r0, r0, lsl #16
    2bf8:	04390000 	ldrteq	r0, [r9], #-0
    2bfc:	4f020000 	svcmi	0x00020000
    2c00:	0100000f 	tsteq	r0, pc
    2c04:	003c6423 	eorseq	r6, ip, r3, lsr #8
    2c08:	00000208 	andeq	r0, r0, r8, lsl #4
    2c0c:	029c0100 	addseq	r0, ip, #0, 2
    2c10:	00000da2 	andeq	r0, r0, r2, lsr #27
    2c14:	3c662e01 	stclcc	14, cr2, [r6], #-4
    2c18:	00020800 	andeq	r0, r2, r0, lsl #16
    2c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c20:	000f3c02 	andeq	r3, pc, r2, lsl #24
    2c24:	683d0100 	ldmdavs	sp!, {r8}
    2c28:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2c2c:	01000000 	mrseq	r0, (UNDEF: 0)
    2c30:	0d4b029c 	sfmeq	f0, 2, [fp, #-624]	; 0xfffffd90
    2c34:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2c38:	08003c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, ip, sp}
    2c3c:	00000002 	andeq	r0, r0, r2
    2c40:	bc029c01 	stclt	12, cr9, [r2], {1}
    2c44:	0100000f 	tsteq	r0, pc
    2c48:	003c6c5b 	eorseq	r6, ip, fp, asr ip
    2c4c:	00000208 	andeq	r0, r0, r8, lsl #4
    2c50:	029c0100 	addseq	r0, ip, #0, 2
    2c54:	00000e0b 	andeq	r0, r0, fp, lsl #28
    2c58:	3c6e6a01 	stclcc	10, cr6, [lr], #-4
    2c5c:	00020800 	andeq	r0, r2, r0, lsl #16
    2c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c64:	000ed402 	andeq	sp, lr, r2, lsl #8
    2c68:	70750100 	rsbsvc	r0, r5, r0, lsl #2
    2c6c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2c70:	01000000 	mrseq	r0, (UNDEF: 0)
    2c74:	1218029c 	andsne	r0, r8, #156, 4	; 0xc0000009
    2c78:	80010000 	andhi	r0, r1, r0
    2c7c:	08003c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, ip, sp}
    2c80:	00000002 	andeq	r0, r0, r2
    2c84:	20039c01 	andcs	r9, r3, r1, lsl #24
    2c88:	01000012 	tsteq	r0, r2, lsl r0
    2c8c:	003c748b 	eorseq	r7, ip, fp, lsl #9
    2c90:	00000408 	andeq	r0, r0, r8, lsl #8
    2c94:	dd9c0100 	ldfles	f0, [ip]
    2c98:	04000000 	streq	r0, [r0], #-0
    2c9c:	00000be6 	andeq	r0, r0, r6, ror #23
    2ca0:	00dd8d01 	sbcseq	r8, sp, r1, lsl #26
    2ca4:	00d30000 	sbcseq	r0, r3, r0
    2ca8:	00050000 	andeq	r0, r5, r0
    2cac:	003c7806 	eorseq	r7, ip, r6, lsl #16
    2cb0:	00055208 	andeq	r5, r5, r8, lsl #4
    2cb4:	04070000 	streq	r0, [r7], #-0
    2cb8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2cbc:	11d40200 	bicsne	r0, r4, r0, lsl #4
    2cc0:	97010000 	strls	r0, [r1, -r0]
    2cc4:	08003c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
    2cc8:	00000002 	andeq	r0, r0, r2
    2ccc:	93029c01 	movwls	r9, #11265	; 0x2c01
    2cd0:	0100000d 	tsteq	r0, sp
    2cd4:	003c7aa2 	eorseq	r7, ip, r2, lsr #21
    2cd8:	00000208 	andeq	r0, r0, r8, lsl #4
    2cdc:	029c0100 	addseq	r0, ip, #0, 2
    2ce0:	00000dc7 	andeq	r0, r0, r7, asr #27
    2ce4:	3c7cad01 	ldclcc	13, cr10, [ip], #-4
    2ce8:	00020800 	andeq	r0, r2, r0, lsl #16
    2cec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cf0:	000ef102 	andeq	pc, lr, r2, lsl #2
    2cf4:	7eb80100 	frdvce	f0, f0, f0
    2cf8:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    2d00:	0fab029c 	svceq	0x00ab029c
    2d04:	c3010000 	movwgt	r0, #4096	; 0x1000
    2d08:	08003c80 	stmdaeq	r0, {r7, sl, fp, ip, sp}
    2d0c:	00000002 	andeq	r0, r0, r2
    2d10:	d9029c01 	stmdble	r2, {r0, sl, fp, ip, pc}
    2d14:	0100000d 	tsteq	r0, sp
    2d18:	003c82ce 	eorseq	r8, ip, lr, asr #5
    2d1c:	00000208 	andeq	r0, r0, r8, lsl #4
    2d20:	029c0100 	addseq	r0, ip, #0, 2
    2d24:	00000d82 	andeq	r0, r0, r2, lsl #27
    2d28:	3c84d901 	stccc	9, cr13, [r4], {1}
    2d2c:	00020800 	andeq	r0, r2, r0, lsl #16
    2d30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d34:	00108402 	andseq	r8, r0, r2, lsl #8
    2d38:	86e40100 	strbthi	r0, [r4], r0, lsl #2
    2d3c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2d40:	01000000 	mrseq	r0, (UNDEF: 0)
    2d44:	0d5d029c 	lfmeq	f0, 2, [sp, #-624]	; 0xfffffd90
    2d48:	ef010000 	svc	0x00010000
    2d4c:	08003c88 	stmdaeq	r0, {r3, r7, sl, fp, ip, sp}
    2d50:	00000002 	andeq	r0, r0, r2
    2d54:	5c029c01 	stcpl	12, cr9, [r2], {1}
    2d58:	0100000f 	tsteq	r0, pc
    2d5c:	003c8afa 	ldrshteq	r8, [ip], -sl
    2d60:	00000208 	andeq	r0, r0, r8, lsl #4
    2d64:	089c0100 	ldmeq	ip, {r8}
    2d68:	000011f4 	strdeq	r1, [r0], -r4
    2d6c:	8c010501 	cfstr32hi	mvfx0, [r1], {1}
    2d70:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2d74:	01000000 	mrseq	r0, (UNDEF: 0)
    2d78:	0ebb089c 	mrceq	8, 5, r0, cr11, cr12, {4}
    2d7c:	10010000 	andne	r0, r1, r0
    2d80:	003c8e01 	eorseq	r8, ip, r1, lsl #28
    2d84:	00000208 	andeq	r0, r0, r8, lsl #4
    2d88:	089c0100 	ldmeq	ip, {r8}
    2d8c:	00001147 	andeq	r1, r0, r7, asr #2
    2d90:	90011b01 	andls	r1, r1, r1, lsl #22
    2d94:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2d98:	01000000 	mrseq	r0, (UNDEF: 0)
    2d9c:	0e18089c 	mrceq	8, 0, r0, cr8, cr12, {4}
    2da0:	26010000 	strcs	r0, [r1], -r0
    2da4:	003c9201 	eorseq	r9, ip, r1, lsl #4
    2da8:	00000208 	andeq	r0, r0, r8, lsl #4
    2dac:	089c0100 	ldmeq	ip, {r8}
    2db0:	0000105b 	andeq	r1, r0, fp, asr r0
    2db4:	94013101 	strls	r3, [r1], #-257	; 0x101
    2db8:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2dbc:	01000000 	mrseq	r0, (UNDEF: 0)
    2dc0:	125f089c 	subsne	r0, pc, #156, 16	; 0x9c0000
    2dc4:	3c010000 	stccc	0, cr0, [r1], {-0}
    2dc8:	003c9601 	eorseq	r9, ip, r1, lsl #12
    2dcc:	00000208 	andeq	r0, r0, r8, lsl #4
    2dd0:	089c0100 	ldmeq	ip, {r8}
    2dd4:	0000100f 	andeq	r1, r0, pc
    2dd8:	98014701 	stmdals	r1, {r0, r8, r9, sl, lr}
    2ddc:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2de0:	01000000 	mrseq	r0, (UNDEF: 0)
    2de4:	1246089c 	subne	r0, r6, #156, 16	; 0x9c0000
    2de8:	52010000 	andpl	r0, r1, #0
    2dec:	003c9a01 	eorseq	r9, ip, r1, lsl #20
    2df0:	00000208 	andeq	r0, r0, r8, lsl #4
    2df4:	089c0100 	ldmeq	ip, {r8}
    2df8:	00000db5 			; <UNDEFINED> instruction: 0x00000db5
    2dfc:	9c015e01 	stcls	14, cr5, [r1], {1}
    2e00:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2e04:	01000000 	mrseq	r0, (UNDEF: 0)
    2e08:	10f7089c 	smlalsne	r0, r7, ip, r8
    2e0c:	6a010000 	bvs	42e14 <__Stack_Size+0x42a14>
    2e10:	003c9e01 	eorseq	r9, ip, r1, lsl #28
    2e14:	00000208 	andeq	r0, r0, r8, lsl #4
    2e18:	089c0100 	ldmeq	ip, {r8}
    2e1c:	000010dd 	ldrdeq	r1, [r0], -sp
    2e20:	a0017601 	andge	r7, r1, r1, lsl #12
    2e24:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2e28:	01000000 	mrseq	r0, (UNDEF: 0)
    2e2c:	0df8089c 	ldcleq	8, cr0, [r8, #624]!	; 0x270
    2e30:	81010000 	mrshi	r0, (UNDEF: 1)
    2e34:	003ca201 	eorseq	sl, ip, r1, lsl #4
    2e38:	00000208 	andeq	r0, r0, r8, lsl #4
    2e3c:	089c0100 	ldmeq	ip, {r8}
    2e40:	00001048 	andeq	r1, r0, r8, asr #32
    2e44:	a4018c01 	strge	r8, [r1], #-3073	; 0xc01
    2e48:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2e4c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e50:	1205089c 	andne	r0, r5, #156, 16	; 0x9c0000
    2e54:	97010000 	strls	r0, [r1, -r0]
    2e58:	003ca601 	eorseq	sl, ip, r1, lsl #12
    2e5c:	00000208 	andeq	r0, r0, r8, lsl #4
    2e60:	089c0100 	ldmeq	ip, {r8}
    2e64:	00000d6e 	andeq	r0, r0, lr, ror #26
    2e68:	a801a201 	stmdage	r1, {r0, r9, sp, pc}
    2e6c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2e70:	01000000 	mrseq	r0, (UNDEF: 0)
    2e74:	0e31089c 	mrceq	8, 1, r0, cr1, cr12, {4}
    2e78:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2e7c:	003caa01 	eorseq	sl, ip, r1, lsl #20
    2e80:	00000208 	andeq	r0, r0, r8, lsl #4
    2e84:	089c0100 	ldmeq	ip, {r8}
    2e88:	00001193 	muleq	r0, r3, r1
    2e8c:	ac01ba01 	stcge	10, cr11, [r1], {1}
    2e90:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2e94:	01000000 	mrseq	r0, (UNDEF: 0)
    2e98:	0e57089c 	mrceq	8, 2, r0, cr7, cr12, {4}
    2e9c:	c5010000 	strgt	r0, [r1, #-0]
    2ea0:	003cae01 	eorseq	sl, ip, r1, lsl #28
    2ea4:	00000208 	andeq	r0, r0, r8, lsl #4
    2ea8:	099c0100 	ldmibeq	ip, {r8}
    2eac:	00000de8 	andeq	r0, r0, r8, ror #27
    2eb0:	b001d001 	andlt	sp, r1, r1
    2eb4:	0408003c 	streq	r0, [r8], #-60	; 0x3c
    2eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ebc:	0003049c 	muleq	r3, ip, r4
    2ec0:	06790a00 	ldrbteq	r0, [r9], -r0, lsl #20
    2ec4:	d2010000 	andle	r0, r1, #0
    2ec8:	0000dd01 	andeq	sp, r0, r1, lsl #26
    2ecc:	0002fa00 	andeq	pc, r2, r0, lsl #20
    2ed0:	06000500 	streq	r0, [r0], -r0, lsl #10
    2ed4:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
    2ed8:	00000563 	andeq	r0, r0, r3, ror #10
    2edc:	10380800 	eorsne	r0, r8, r0, lsl #16
    2ee0:	dc010000 	stcle	0, cr0, [r1], {-0}
    2ee4:	003cb401 	eorseq	fp, ip, r1, lsl #8
    2ee8:	00000208 	andeq	r0, r0, r8, lsl #4
    2eec:	089c0100 	ldmeq	ip, {r8}
    2ef0:	00001183 	andeq	r1, r0, r3, lsl #3
    2ef4:	b601e701 	strlt	lr, [r1], -r1, lsl #14
    2ef8:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2efc:	01000000 	mrseq	r0, (UNDEF: 0)
    2f00:	0fd0089c 	svceq	0x00d0089c
    2f04:	f2010000 	vhadd.s8	d0, d1, d0
    2f08:	003cb801 	eorseq	fp, ip, r1, lsl #16
    2f0c:	00000208 	andeq	r0, r0, r8, lsl #4
    2f10:	089c0100 	ldmeq	ip, {r8}
    2f14:	00001110 	andeq	r1, r0, r0, lsl r1
    2f18:	ba01fd01 	blt	82324 <__Stack_Size+0x81f24>
    2f1c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2f20:	01000000 	mrseq	r0, (UNDEF: 0)
    2f24:	10a5089c 	umlalne	r0, r5, ip, r8
    2f28:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2f2c:	003cbc02 	eorseq	fp, ip, r2, lsl #24
    2f30:	00000208 	andeq	r0, r0, r8, lsl #4
    2f34:	089c0100 	ldmeq	ip, {r8}
    2f38:	000010b8 	strheq	r1, [r0], -r8
    2f3c:	be021301 	cdplt	3, 0, cr1, cr2, cr1, {0}
    2f40:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2f44:	01000000 	mrseq	r0, (UNDEF: 0)
    2f48:	1123089c 			; <UNDEFINED> instruction: 0x1123089c
    2f4c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2f50:	003cc002 	eorseq	ip, ip, r2
    2f54:	00000208 	andeq	r0, r0, r8, lsl #4
    2f58:	089c0100 	ldmeq	ip, {r8}
    2f5c:	000011e4 	andeq	r1, r0, r4, ror #3
    2f60:	c2022901 	andgt	r2, r2, #16384	; 0x4000
    2f64:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2f68:	01000000 	mrseq	r0, (UNDEF: 0)
    2f6c:	10cb099c 	smullne	r0, fp, ip, r9
    2f70:	34010000 	strcc	r0, [r1], #-0
    2f74:	003cc402 	eorseq	ip, ip, r2, lsl #8
    2f78:	00000408 	andeq	r0, r0, r8, lsl #8
    2f7c:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    2f80:	0a000003 	beq	2f94 <__Stack_Size+0x2b94>
    2f84:	00000400 	andeq	r0, r0, r0, lsl #8
    2f88:	dd023601 	stcle	6, cr3, [r2, #-4]
    2f8c:	bc000000 	stclt	0, cr0, [r0], {-0}
    2f90:	05000003 	streq	r0, [r0, #-3]
    2f94:	3cc80600 	stclcc	6, cr0, [r8], {0}
    2f98:	05750800 	ldrbeq	r0, [r5, #-2048]!	; 0x800
    2f9c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fa0:	00001171 	andeq	r1, r0, r1, ror r1
    2fa4:	c8024001 	stmdagt	r2, {r0, lr}
    2fa8:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2fac:	01000000 	mrseq	r0, (UNDEF: 0)
    2fb0:	0edf089c 	mrceq	8, 6, r0, cr15, cr12, {4}
    2fb4:	4b010000 	blmi	42fbc <__Stack_Size+0x42bbc>
    2fb8:	003cca02 	eorseq	ip, ip, r2, lsl #20
    2fbc:	00000208 	andeq	r0, r0, r8, lsl #4
    2fc0:	089c0100 	ldmeq	ip, {r8}
    2fc4:	00000ea6 	andeq	r0, r0, r6, lsr #29
    2fc8:	cc025601 	stcgt	6, cr5, [r2], {1}
    2fcc:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fd4:	0ffb089c 	svceq	0x00fb089c
    2fd8:	61010000 	mrsvs	r0, (UNDEF: 1)
    2fdc:	003cce02 	eorseq	ip, ip, r2, lsl #28
    2fe0:	00000208 	andeq	r0, r0, r8, lsl #4
    2fe4:	089c0100 	ldmeq	ip, {r8}
    2fe8:	00000f86 	andeq	r0, r0, r6, lsl #31
    2fec:	d0026c01 	andle	r6, r2, r1, lsl #24
    2ff0:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2ff4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ff8:	1133089c 			; <UNDEFINED> instruction: 0x1133089c
    2ffc:	77010000 	strvc	r0, [r1, -r0]
    3000:	003cd202 	eorseq	sp, ip, r2, lsl #4
    3004:	00000208 	andeq	r0, r0, r8, lsl #4
    3008:	089c0100 	ldmeq	ip, {r8}
    300c:	00000e44 	andeq	r0, r0, r4, asr #28
    3010:	d4028301 	strle	r8, [r2], #-769	; 0x301
    3014:	0208003c 	andeq	r0, r8, #60	; 0x3c
    3018:	01000000 	mrseq	r0, (UNDEF: 0)
    301c:	0fe3089c 	svceq	0x00e3089c
    3020:	8f010000 	svchi	0x00010000
    3024:	003cd602 	eorseq	sp, ip, r2, lsl #12
    3028:	00000208 	andeq	r0, r0, r8, lsl #4
    302c:	089c0100 	ldmeq	ip, {r8}
    3030:	00000e6a 	andeq	r0, r0, sl, ror #28
    3034:	d8029a01 	stmdale	r2, {r0, r9, fp, ip, pc}
    3038:	0208003c 	andeq	r0, r8, #60	; 0x3c
    303c:	01000000 	mrseq	r0, (UNDEF: 0)
    3040:	1095089c 	umullsne	r0, r5, ip, r8
    3044:	a5010000 	strge	r0, [r1, #-0]
    3048:	003cda02 	eorseq	sp, ip, r2, lsl #20
    304c:	00000208 	andeq	r0, r0, r8, lsl #4
    3050:	089c0100 	ldmeq	ip, {r8}
    3054:	00001074 	andeq	r1, r0, r4, ror r0
    3058:	dc02b001 	stcle	0, cr11, [r2], {1}
    305c:	0208003c 	andeq	r0, r8, #60	; 0x3c
    3060:	01000000 	mrseq	r0, (UNDEF: 0)
    3064:	0f9b089c 	svceq	0x009b089c
    3068:	bb010000 	bllt	43070 <__Stack_Size+0x42c70>
    306c:	003cde02 	eorseq	sp, ip, r2, lsl #28
    3070:	00000208 	andeq	r0, r0, r8, lsl #4
    3074:	089c0100 	ldmeq	ip, {r8}
    3078:	00000f11 	andeq	r0, r0, r1, lsl pc
    307c:	e002c601 	and	ip, r2, r1, lsl #12
    3080:	0208003c 	andeq	r0, r8, #60	; 0x3c
    3084:	01000000 	mrseq	r0, (UNDEF: 0)
    3088:	1028089c 	mlane	r8, ip, r8, r0
    308c:	d1010000 	mrsle	r0, (UNDEF: 1)
    3090:	003ce202 	eorseq	lr, ip, r2, lsl #4
    3094:	00000208 	andeq	r0, r0, r8, lsl #4
    3098:	089c0100 	ldmeq	ip, {r8}
    309c:	00001160 	andeq	r1, r0, r0, ror #2
    30a0:	e402dc01 	str	sp, [r2], #-3073	; 0xc01
    30a4:	0208003c 	andeq	r0, r8, #60	; 0x3c
    30a8:	01000000 	mrseq	r0, (UNDEF: 0)
    30ac:	0f00089c 	svceq	0x0000089c
    30b0:	e7010000 	str	r0, [r1, -r0]
    30b4:	003ce602 	eorseq	lr, ip, r2, lsl #12
    30b8:	00000208 	andeq	r0, r0, r8, lsl #4
    30bc:	089c0100 	ldmeq	ip, {r8}
    30c0:	00000e96 	muleq	r0, r6, lr
    30c4:	e802f201 	stmda	r2, {r0, r9, ip, sp, lr, pc}
    30c8:	0208003c 	andeq	r0, r8, #60	; 0x3c
    30cc:	01000000 	mrseq	r0, (UNDEF: 0)
    30d0:	11c4089c 			; <UNDEFINED> instruction: 0x11c4089c
    30d4:	fd010000 	stc2	0, cr0, [r1, #-0]
    30d8:	003cea02 	eorseq	lr, ip, r2, lsl #20
    30dc:	00000208 	andeq	r0, r0, r8, lsl #4
    30e0:	089c0100 	ldmeq	ip, {r8}
    30e4:	000011ab 	andeq	r1, r0, fp, lsr #3
    30e8:	ec030801 	stc	8, cr0, [r3], {1}
    30ec:	0208003c 	andeq	r0, r8, #60	; 0x3c
    30f0:	01000000 	mrseq	r0, (UNDEF: 0)
    30f4:	0e7d089c 	mrceq	8, 3, r0, cr13, cr12, {4}
    30f8:	13010000 	movwne	r0, #4096	; 0x1000
    30fc:	003cee03 	eorseq	lr, ip, r3, lsl #28
    3100:	00000208 	andeq	r0, r0, r8, lsl #4
    3104:	089c0100 	ldmeq	ip, {r8}
    3108:	00000f6d 	andeq	r0, r0, sp, ror #30
    310c:	f0031e01 			; <UNDEFINED> instruction: 0xf0031e01
    3110:	0208003c 	andeq	r0, r8, #60	; 0x3c
    3114:	01000000 	mrseq	r0, (UNDEF: 0)
    3118:	0f21089c 	svceq	0x0021089c
    311c:	2a010000 	bcs	43124 <__Stack_Size+0x42d24>
    3120:	003cf203 	eorseq	pc, ip, r3, lsl #4
    3124:	00000208 	andeq	r0, r0, r8, lsl #4
    3128:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    312c:	00000be6 	andeq	r0, r0, r6, ror #23
    3130:	00dd8d01 	sbcseq	r8, sp, r1, lsl #26
    3134:	05630000 	strbeq	r0, [r3, #-0]!
    3138:	00050000 	andeq	r0, r5, r0
    313c:	0006790a 	andeq	r7, r6, sl, lsl #18
    3140:	01d20100 	bicseq	r0, r2, r0, lsl #2
    3144:	000000dd 	ldrdeq	r0, [r0], -sp
    3148:	00000575 	andeq	r0, r0, r5, ror r5
    314c:	000b0005 	andeq	r0, fp, r5
    3150:	01000004 	tsteq	r0, r4
    3154:	00dd0236 	sbcseq	r0, sp, r6, lsr r2
    3158:	00050000 	andeq	r0, r5, r0
    315c:	0002d400 	andeq	sp, r2, r0, lsl #8
    3160:	15000400 	strne	r0, [r0, #-1024]	; 0x400
    3164:	04000004 	streq	r0, [r0], #-4
    3168:	0007e101 	andeq	lr, r7, r1, lsl #2
    316c:	12bb0100 	adcsne	r0, fp, #0, 2
    3170:	01010000 	mrseq	r0, (UNDEF: 1)
    3174:	3cf40000 	ldclcc	0, cr0, [r4]
    3178:	00620800 	rsbeq	r0, r2, r0, lsl #16
    317c:	05620000 	strbeq	r0, [r2, #-0]!
    3180:	06020000 	streq	r0, [r2], -r0
    3184:	01000013 	tsteq	r0, r3, lsl r0
    3188:	00007f04 	andeq	r7, r0, r4, lsl #30
    318c:	003cf400 	eorseq	pc, ip, r0, lsl #8
    3190:	00000c08 	andeq	r0, r0, r8, lsl #24
    3194:	7f9c0100 	svcvc	0x009c0100
    3198:	03000000 	movweq	r0, #0
    319c:	00001288 	andeq	r1, r0, r8, lsl #5
    31a0:	007f0401 	rsbseq	r0, pc, r1, lsl #8
    31a4:	0b230000 	bleq	8c31ac <__Stack_Size+0x8c2dac>
    31a8:	e6030000 	str	r0, [r3], -r0
    31ac:	01000000 	mrseq	r0, (UNDEF: 0)
    31b0:	00007f04 	andeq	r7, r0, r4, lsl #30
    31b4:	000b4400 	andeq	r4, fp, r0, lsl #8
    31b8:	06180400 	ldreq	r0, [r8], -r0, lsl #8
    31bc:	0b010000 	bleq	431c4 <__Stack_Size+0x42dc4>
    31c0:	0000007f 	andeq	r0, r0, pc, ror r0
    31c4:	0000006d 	andeq	r0, r0, sp, rrx
    31c8:	fc060005 	stc2	0, cr0, [r6], {5}
    31cc:	5308003c 	movwpl	r0, #32828	; 0x803c
    31d0:	07000002 	streq	r0, [r0, -r2]
    31d4:	f3035001 	vhadd.u8	d5, d3, d1
    31d8:	00005101 	andeq	r5, r0, r1, lsl #2
    31dc:	69050408 	stmdbvs	r5, {r3, sl}
    31e0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    31e4:	000012cd 	andeq	r1, r0, sp, asr #5
    31e8:	3d000f01 	stccc	15, cr0, [r0, #-4]
    31ec:	00040800 	andeq	r0, r4, r0, lsl #16
    31f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    31f4:	000000b6 	strheq	r0, [r0], -r6
    31f8:	00096e04 	andeq	r6, r9, r4, lsl #28
    31fc:	7f140100 	svcvc	0x00140100
    3200:	ac000000 	stcge	0, cr0, [r0], {-0}
    3204:	05000000 	streq	r0, [r0, #-0]
    3208:	3d040a00 	vstrcc	s0, [r4, #-0]
    320c:	02640800 	rsbeq	r0, r4, #0, 16
    3210:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3214:	00001291 	muleq	r0, r1, r2
    3218:	3d041701 	stccc	7, cr1, [r4, #-4]
    321c:	00040800 	andeq	r0, r4, r0, lsl #16
    3220:	9c010000 	stcls	0, cr0, [r1], {-0}
    3224:	000000e6 	andeq	r0, r0, r6, ror #1
    3228:	00008c04 	andeq	r8, r0, r4, lsl #24
    322c:	7f1b0100 	svcvc	0x001b0100
    3230:	dc000000 	stcle	0, cr0, [r0], {-0}
    3234:	05000000 	streq	r0, [r0, #-0]
    3238:	3d080a00 	vstrcc	s0, [r8, #-0]
    323c:	02750800 	rsbseq	r0, r5, #0, 16
    3240:	02000000 	andeq	r0, r0, #0
    3244:	000012e6 	andeq	r1, r0, r6, ror #5
    3248:	007f1e01 	rsbseq	r1, pc, r1, lsl #28
    324c:	3d080000 	stccc	0, cr0, [r8, #-0]
    3250:	001e0800 	andseq	r0, lr, r0, lsl #16
    3254:	9c010000 	stcls	0, cr0, [r1], {-0}
    3258:	00000145 	andeq	r0, r0, r5, asr #2
    325c:	00129f03 	andseq	r9, r2, r3, lsl #30
    3260:	451e0100 	ldrmi	r0, [lr, #-256]	; 0x100
    3264:	65000001 	strvs	r0, [r0, #-1]
    3268:	0300000b 	movweq	r0, #11
    326c:	000012f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3270:	007f1e01 	rsbseq	r1, pc, r1, lsl #28
    3274:	0b830000 	bleq	fe0c327c <SCS_BASE+0x1e0b527c>
    3278:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    327c:	4b250100 	blmi	943684 <__Stack_Size+0x943284>
    3280:	a1000001 	tstge	r0, r1
    3284:	0400000b 	streq	r0, [r0], #-11
    3288:	0000047c 	andeq	r0, r0, ip, ror r4
    328c:	007f2701 	rsbseq	r2, pc, r1, lsl #14
    3290:	013b0000 	teqeq	fp, r0
    3294:	00050000 	andeq	r0, r5, r0
    3298:	003d1e0c 	eorseq	r1, sp, ip, lsl #28
    329c:	00028608 	andeq	r8, r2, r8, lsl #12
    32a0:	040d0000 	streq	r0, [sp], #-0
    32a4:	0000014b 	andeq	r0, r0, fp, asr #2
    32a8:	9b08010e 	blls	2036e8 <__Stack_Size+0x2032e8>
    32ac:	0200000a 	andeq	r0, r0, #10
    32b0:	000012db 	ldrdeq	r1, [r0], -fp
    32b4:	007f2c01 	rsbseq	r2, pc, r1, lsl #24
    32b8:	3d260000 	stccc	0, cr0, [r6, #-0]
    32bc:	00240800 	eoreq	r0, r4, r0, lsl #16
    32c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    32c4:	000001d5 	ldrdeq	r0, [r0], -r5
    32c8:	00129f03 	andseq	r9, r2, r3, lsl #30
    32cc:	452c0100 	strmi	r0, [ip, #-256]!	; 0x100
    32d0:	d6000001 	strle	r0, [r0], -r1
    32d4:	0300000b 	movweq	r0, #11
    32d8:	000012f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    32dc:	007f2c01 	rsbseq	r2, pc, r1, lsl #24
    32e0:	0bf40000 	bleq	ffd032e8 <SCS_BASE+0x1fcf52e8>
    32e4:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    32e8:	4b330100 	blmi	cc36f0 <__Stack_Size+0xcc32f0>
    32ec:	12000001 	andne	r0, r0, #1
    32f0:	0f00000c 	svceq	0x0000000c
    32f4:	08003d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, ip, sp}
    32f8:	00000010 	andeq	r0, r0, r0, lsl r0
    32fc:	0005d404 	andeq	sp, r5, r4, lsl #8
    3300:	7f360100 	svcvc	0x00360100
    3304:	b0000000 	andlt	r0, r0, r0
    3308:	05000001 	streq	r0, [r0, #-1]
    330c:	09620400 	stmdbeq	r2!, {sl}^
    3310:	37010000 	strcc	r0, [r1, -r0]
    3314:	0000007f 	andeq	r0, r0, pc, ror r0
    3318:	000001c1 	andeq	r0, r0, r1, asr #3
    331c:	380c0005 	stmdacc	ip, {r0, r2}
    3320:	9708003d 	smladxls	r8, sp, r0, r0
    3324:	0c000002 	stceq	0, cr0, [r0], {2}
    3328:	08003d40 	stmdaeq	r0, {r6, r8, sl, fp, ip, sp}
    332c:	000002a8 	andeq	r0, r0, r8, lsr #5
    3330:	a7090000 	strge	r0, [r9, -r0]
    3334:	01000012 	tsteq	r0, r2, lsl r0
    3338:	003d4a3e 	eorseq	r4, sp, lr, lsr sl
    333c:	00000808 	andeq	r0, r0, r8, lsl #16
    3340:	1f9c0100 	svcne	0x009c0100
    3344:	03000002 	movweq	r0, #2
    3348:	000012fb 	strdeq	r1, [r0], -fp
    334c:	007f3e01 	rsbseq	r3, pc, r1, lsl #28
    3350:	0c520000 	mraeq	r0, r2, acc0
    3354:	cd040000 	stcgt	0, cr0, [r4, #-0]
    3358:	01000009 	tsteq	r0, r9
    335c:	00007f44 	andeq	r7, r0, r4, asr #30
    3360:	00020a00 	andeq	r0, r2, r0, lsl #20
    3364:	10000500 	andne	r0, r0, r0, lsl #10
    3368:	08003d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, ip, sp}
    336c:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3370:	06500107 	ldrbeq	r0, [r0], -r7, lsl #2
    3374:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    3378:	00001e64 	andeq	r1, r0, r4, ror #28
    337c:	00127802 	andseq	r7, r2, r2, lsl #16
    3380:	7f470100 	svcvc	0x00470100
    3384:	52000000 	andpl	r0, r0, #0
    3388:	0408003d 	streq	r0, [r8], #-61	; 0x3d
    338c:	01000000 	mrseq	r0, (UNDEF: 0)
    3390:	0002539c 	muleq	r2, ip, r3
    3394:	09550400 	ldmdbeq	r5, {sl}^
    3398:	4c010000 	stcmi	0, cr0, [r1], {-0}
    339c:	0000007f 	andeq	r0, r0, pc, ror r0
    33a0:	00000249 	andeq	r0, r0, r9, asr #4
    33a4:	560a0005 	strpl	r0, [sl], -r5
    33a8:	ca08003d 	bgt	2034a4 <__Stack_Size+0x2030a4>
    33ac:	00000002 	andeq	r0, r0, r2
    33b0:	00061804 	andeq	r1, r6, r4, lsl #16
    33b4:	7f0b0100 	svcvc	0x000b0100
    33b8:	64000000 	strvs	r0, [r0], #-0
    33bc:	05000002 	streq	r0, [r0, #-2]
    33c0:	096e0400 	stmdbeq	lr!, {sl}^
    33c4:	14010000 	strne	r0, [r1], #-0
    33c8:	0000007f 	andeq	r0, r0, pc, ror r0
    33cc:	00000275 	andeq	r0, r0, r5, ror r2
    33d0:	8c040005 	stchi	0, cr0, [r4], {5}
    33d4:	01000000 	mrseq	r0, (UNDEF: 0)
    33d8:	00007f1b 	andeq	r7, r0, fp, lsl pc
    33dc:	00028600 	andeq	r8, r2, r0, lsl #12
    33e0:	04000500 	streq	r0, [r0], #-1280	; 0x500
    33e4:	0000047c 	andeq	r0, r0, ip, ror r4
    33e8:	007f2701 	rsbseq	r2, pc, r1, lsl #14
    33ec:	02970000 	addseq	r0, r7, #0
    33f0:	00050000 	andeq	r0, r5, r0
    33f4:	0005d404 	andeq	sp, r5, r4, lsl #8
    33f8:	7f360100 	svcvc	0x00360100
    33fc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3400:	05000002 	streq	r0, [r0, #-2]
    3404:	09620400 	stmdbeq	r2!, {sl}^
    3408:	37010000 	strcc	r0, [r1, -r0]
    340c:	0000007f 	andeq	r0, r0, pc, ror r0
    3410:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3414:	cd040005 	stcgt	0, cr0, [r4, #-20]	; 0xffffffec
    3418:	01000009 	tsteq	r0, r9
    341c:	00007f44 	andeq	r7, r0, r4, asr #30
    3420:	0002ca00 	andeq	ip, r2, r0, lsl #20
    3424:	11000500 	tstne	r0, r0, lsl #10
    3428:	00000955 	andeq	r0, r0, r5, asr r9
    342c:	007f4c01 	rsbseq	r4, pc, r1, lsl #24
    3430:	00050000 	andeq	r0, r5, r0
    3434:	00073000 	andeq	r3, r7, r0
    3438:	0c000400 	cfstrseq	mvf0, [r0], {-0}
    343c:	04000005 	streq	r0, [r0], #-5
    3440:	0007e101 	andeq	lr, r7, r1, lsl #2
    3444:	13b90100 			; <UNDEFINED> instruction: 0x13b90100
    3448:	01010000 	mrseq	r0, (UNDEF: 1)
    344c:	3d580000 	ldclcc	0, cr0, [r8, #-0]
    3450:	037c0800 	cmneq	ip, #0, 16
    3454:	05c80000 	strbeq	r0, [r8]
    3458:	24020000 	strcs	r0, [r2], #-0
    345c:	01000013 	tsteq	r0, r3, lsl r0
    3460:	005c0128 	subseq	r0, ip, r8, lsr #2
    3464:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    3468:	5c2a0100 	stfpls	f0, [sl], #-0
    346c:	04000000 	streq	r0, [r0], #-0
    3470:	000013d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3474:	005c2b01 	subseq	r2, ip, r1, lsl #22
    3478:	cd040000 	stcgt	0, cr0, [r4, #-0]
    347c:	01000013 	tsteq	r0, r3, lsl r0
    3480:	00005c2b 	andeq	r5, r0, fp, lsr #24
    3484:	13b00400 	movsne	r0, #0, 8
    3488:	2c010000 	stccs	0, cr0, [r1], {-0}
    348c:	0000005c 	andeq	r0, r0, ip, asr r0
    3490:	08010500 	stmdaeq	r1, {r8, sl}
    3494:	00000a9b 	muleq	r0, fp, sl
    3498:	0013a202 	andseq	sl, r3, r2, lsl #4
    349c:	016b0100 	cmneq	fp, r0, lsl #2
    34a0:	00000098 	muleq	r0, r8, r0
    34a4:	01006903 	tsteq	r0, r3, lsl #18
    34a8:	00005c6d 	andeq	r5, r0, sp, ror #24
    34ac:	006a0300 	rsbeq	r0, sl, r0, lsl #6
    34b0:	005c6d01 	subseq	r6, ip, r1, lsl #26
    34b4:	32040000 	andcc	r0, r4, #0
    34b8:	01000013 	tsteq	r0, r3, lsl r0
    34bc:	00005c6d 	andeq	r5, r0, sp, ror #24
    34c0:	13b00400 	movsne	r0, #0, 8
    34c4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    34c8:	0000005c 	andeq	r0, r0, ip, asr r0
    34cc:	14210600 	strtne	r0, [r1], #-1536	; 0x600
    34d0:	d5010000 	strle	r0, [r1, #-0]
    34d4:	14310701 	ldrtne	r0, [r1], #-1793	; 0x701
    34d8:	11010000 	mrsne	r0, (UNDEF: 1)
    34dc:	0000d601 	andeq	sp, r0, r1, lsl #12
    34e0:	00d60100 	sbcseq	r0, r6, r0, lsl #2
    34e4:	9a080000 	bls	2034ec <__Stack_Size+0x2030ec>
    34e8:	01000013 	tsteq	r0, r3, lsl r0
    34ec:	00d60111 	sbcseq	r0, r6, r1, lsl r1
    34f0:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    34f4:	01000013 	tsteq	r0, r3, lsl r0
    34f8:	00d60111 	sbcseq	r0, r6, r1, lsl r1
    34fc:	a1090000 	mrsge	r0, (UNDEF: 9)
    3500:	0100000b 	tsteq	r0, fp
    3504:	00dd0113 	sbcseq	r0, sp, r3, lsl r1
    3508:	0a000000 	beq	3510 <__Stack_Size+0x3110>
    350c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3510:	02050074 	andeq	r0, r5, #116	; 0x74
    3514:	000c5407 	andeq	r5, ip, r7, lsl #8
    3518:	13920700 	orrsne	r0, r2, #0, 14
    351c:	1b010000 	blne	43524 <__Stack_Size+0x43124>
    3520:	0000d601 	andeq	sp, r0, r1, lsl #12
    3524:	010e0100 	mrseq	r0, (UNDEF: 30)
    3528:	a1080000 	mrsge	r0, (UNDEF: 8)
    352c:	0100000b 	tsteq	r0, fp
    3530:	00d6011b 	sbcseq	r0, r6, fp, lsl r1
    3534:	f3090000 	vhadd.u8	d0, d9, d0
    3538:	01000013 	tsteq	r0, r3, lsl r0
    353c:	00dd011d 	sbcseq	r0, sp, sp, lsl r1
    3540:	07000000 	streq	r0, [r0, -r0]
    3544:	00001366 	andeq	r1, r0, r6, ror #6
    3548:	d6012301 	strle	r2, [r1], -r1, lsl #6
    354c:	01000000 	mrseq	r0, (UNDEF: 0)
    3550:	00000138 	andeq	r0, r0, r8, lsr r1
    3554:	000ba108 	andeq	sl, fp, r8, lsl #2
    3558:	01230100 			; <UNDEFINED> instruction: 0x01230100
    355c:	000000d6 	ldrdeq	r0, [r0], -r6
    3560:	0013f309 	andseq	pc, r3, r9, lsl #6
    3564:	01250100 			; <UNDEFINED> instruction: 0x01250100
    3568:	000000dd 	ldrdeq	r0, [r0], -sp
    356c:	0cc00b00 	vstmiaeq	r0, {d16-d15}
    3570:	13010000 	movwne	r0, #4096	; 0x1000
    3574:	000000d6 	ldrdeq	r0, [r0], -r6
    3578:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
    357c:	0000002c 	andeq	r0, r0, ip, lsr #32
    3580:	019f9c01 	orrseq	r9, pc, r1, lsl #24
    3584:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    3588:	01000012 	tsteq	r0, r2, lsl r0
    358c:	0000d613 	andeq	sp, r0, r3, lsl r6
    3590:	000c7300 	andeq	r7, ip, r0, lsl #6
    3594:	14b00c00 	ldrtne	r0, [r0], #3072	; 0xc00
    3598:	13010000 	movwne	r0, #4096	; 0x1000
    359c:	000000d6 	ldrdeq	r0, [r0], -r6
    35a0:	00000c94 	muleq	r0, r4, ip
    35a4:	0000e60d 	andeq	lr, r0, sp, lsl #12
    35a8:	d6150100 	ldrle	r0, [r5], -r0, lsl #2
    35ac:	c2000000 	andgt	r0, r0, #0
    35b0:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    35b4:	08003d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, ip, sp}
    35b8:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    35bc:	0b51010f 	bleq	1443a00 <__Stack_Size+0x1443600>
    35c0:	1e84800c 	cdpne	0, 8, cr8, cr4, cr12, {0}
    35c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    35c8:	0f1b0123 	svceq	0x001b0123
    35cc:	f3035001 	vhadd.u8	d5, d3, d1
    35d0:	00005001 	andeq	r5, r0, r1
    35d4:	0014b810 	andseq	fp, r4, r0, lsl r8
    35d8:	84230100 	strthi	r0, [r3], #-256	; 0x100
    35dc:	0408003d 	streq	r0, [r8], #-61	; 0x3d
    35e0:	01000000 	mrseq	r0, (UNDEF: 0)
    35e4:	0001be9c 	muleq	r1, ip, lr
    35e8:	3d881100 	stfccs	f1, [r8]
    35ec:	06cf0800 	strbeq	r0, [pc], r0, lsl #16
    35f0:	12000000 	andne	r0, r0, #0
    35f4:	00000025 	andeq	r0, r0, r5, lsr #32
    35f8:	08003d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip, sp}
    35fc:	0000009c 	muleq	r0, ip, r0
    3600:	02449c01 	subeq	r9, r4, #256	; 0x100
    3604:	31130000 	tstcc	r3, r0
    3608:	11000000 	mrsne	r0, (UNDEF: 0)
    360c:	1400000d 	strne	r0, [r0], #-13
    3610:	0000003a 	andeq	r0, r0, sl, lsr r0
    3614:	00004514 	andeq	r4, r0, r4, lsl r5
    3618:	00501300 	subseq	r1, r0, r0, lsl #6
    361c:	0d510000 	ldcleq	0, cr0, [r1, #-0]
    3620:	e6150000 	ldr	r0, [r5], -r0
    3624:	3e08003d 	mcrcc	0, 0, r0, cr8, cr13, {1}
    3628:	3a000000 	bcc	3630 <__Stack_Size+0x3230>
    362c:	14000002 	strne	r0, [r0], #-2
    3630:	00000031 	andeq	r0, r0, r1, lsr r0
    3634:	00003a13 	andeq	r3, r0, r3, lsl sl
    3638:	000d7b00 	andeq	r7, sp, r0, lsl #22
    363c:	00451300 	subeq	r1, r5, r0, lsl #6
    3640:	0d8e0000 	stceq	0, cr0, [lr]
    3644:	50140000 	andspl	r0, r4, r0
    3648:	16000000 	strne	r0, [r0], -r0
    364c:	08003df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    3650:	000006d6 	ldrdeq	r0, [r0], -r6
    3654:	00000230 	andeq	r0, r0, r0, lsr r2
    3658:	0251010f 	subseq	r0, r1, #-1073741821	; 0xc0000003
    365c:	010f0074 	tsteq	pc, r4, ror r0	; <UNPREDICTABLE>
    3660:	04760250 	ldrbteq	r0, [r6], #-592	; 0x250
    3664:	3e161700 	cdpcc	7, 1, cr1, cr6, cr0, {0}
    3668:	06f60800 	ldrbteq	r0, [r6], r0, lsl #16
    366c:	17000000 	strne	r0, [r0, -r0]
    3670:	08003de6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, fp, ip, sp}
    3674:	00000707 	andeq	r0, r0, r7, lsl #14
    3678:	00631200 	rsbeq	r1, r3, r0, lsl #4
    367c:	3e240000 	cdpcc	0, 2, cr0, cr4, cr0, {0}
    3680:	01500800 	cmpeq	r0, r0, lsl #16
    3684:	9c010000 	stcls	0, cr0, [r1], {-0}
    3688:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    368c:	00006f14 	andeq	r6, r0, r4, lsl pc
    3690:	00781400 	rsbseq	r1, r8, r0, lsl #8
    3694:	81130000 	tsthi	r3, r0
    3698:	a1000000 	mrsge	r0, (UNDEF: 0)
    369c:	1800000d 	stmdane	r0, {r0, r2, r3}
    36a0:	0000008c 	andeq	r0, r0, ip, lsl #1
    36a4:	00181900 	andseq	r1, r8, r0, lsl #18
    36a8:	02a70000 	adceq	r0, r7, #0
    36ac:	6f130000 	svcvs	0x00130000
    36b0:	b4000000 	strlt	r0, [r0], #-0
    36b4:	1300000d 	movwne	r0, #13
    36b8:	00000078 	andeq	r0, r0, r8, ror r0
    36bc:	00000e23 	andeq	r0, r0, r3, lsr #28
    36c0:	00008113 	andeq	r8, r0, r3, lsl r1
    36c4:	000e5700 	andeq	r5, lr, r0, lsl #14
    36c8:	008c1300 	addeq	r1, ip, r0, lsl #6
    36cc:	0e6a0000 	cdpeq	0, 6, cr0, cr10, cr0, {0}
    36d0:	20170000 	andscs	r0, r7, r0
    36d4:	0e08003f 	mcreq	0, 0, r0, cr8, cr15, {1}
    36d8:	00000007 	andeq	r0, r0, r7
    36dc:	003e6017 	eorseq	r6, lr, r7, lsl r0
    36e0:	00070e08 	andeq	r0, r7, r8, lsl #28
    36e4:	3e781700 	cdpcc	7, 7, cr1, cr8, cr0, {0}
    36e8:	07280800 	streq	r0, [r8, -r0, lsl #16]!
    36ec:	12000000 	andne	r0, r0, #0
    36f0:	00000098 	muleq	r0, r8, r0
    36f4:	08003f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    36f8:	00000020 	andeq	r0, r0, r0, lsr #32
    36fc:	02e09c01 	rsceq	r9, r0, #256	; 0x100
    3700:	7a170000 	bvc	5c3708 <__Stack_Size+0x5c3308>
    3704:	2508003f 	strcs	r0, [r8, #-63]	; 0x3f
    3708:	17000000 	strne	r0, [r0, -r0]
    370c:	08003f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip, sp}
    3710:	00000063 	andeq	r0, r0, r3, rrx
    3714:	072c1a00 	streq	r1, [ip, -r0, lsl #20]!
    3718:	e6010000 	str	r0, [r1], -r0
    371c:	000000d6 	ldrdeq	r0, [r0], -r6
    3720:	08003f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, sp}
    3724:	0000000c 	andeq	r0, r0, ip
    3728:	f8109c01 			; <UNDEFINED> instruction: 0xf8109c01
    372c:	01000013 	tsteq	r0, r3, lsl r0
    3730:	003fa0eb 	eorseq	sl, pc, fp, ror #1
    3734:	00000c08 	andeq	r0, r0, r8, lsl #24
    3738:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    373c:	1b000003 	blne	3750 <__Stack_Size+0x3350>
    3740:	01006469 	tsteq	r0, r9, ror #8
    3744:	0000d6eb 	andeq	sp, r0, fp, ror #13
    3748:	00500100 	subseq	r0, r0, r0, lsl #2
    374c:	00146710 	andseq	r6, r4, r0, lsl r7
    3750:	acf00100 	ldfgee	f0, [r0]
    3754:	0c08003f 	stceq	0, cr0, [r8], {63}	; 0x3f
    3758:	01000000 	mrseq	r0, (UNDEF: 0)
    375c:	00033a9c 	muleq	r3, ip, sl
    3760:	14781c00 	ldrbtne	r1, [r8], #-3072	; 0xc00
    3764:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    3768:	000000d6 	ldrdeq	r0, [r0], -r6
    376c:	10005001 	andne	r5, r0, r1
    3770:	00001377 	andeq	r1, r0, r7, ror r3
    3774:	3fb8f501 	svccc	0x00b8f501
    3778:	000c0800 	andeq	r0, ip, r0, lsl #16
    377c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3780:	0000036c 	andeq	r0, r0, ip, ror #6
    3784:	0014960c 	andseq	r9, r4, ip, lsl #12
    3788:	d6f50100 	ldrbtle	r0, [r5], r0, lsl #2
    378c:	96000000 	strls	r0, [r0], -r0
    3790:	1c00000e 	stcne	0, cr0, [r0], {14}
    3794:	0000141b 	andeq	r1, r0, fp, lsl r4
    3798:	00d6f501 	sbcseq	pc, r6, r1, lsl #10
    379c:	51010000 	mrspl	r0, (UNDEF: 1)
    37a0:	13db1000 	bicsne	r1, fp, #0
    37a4:	fa010000 	blx	437ac <__Stack_Size+0x433ac>
    37a8:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
    37ac:	0000000c 	andeq	r0, r0, ip
    37b0:	038f9c01 	orreq	r9, pc, #256	; 0x100
    37b4:	5f1c0000 	svcpl	0x001c0000
    37b8:	01000013 	tsteq	r0, r3, lsl r0
    37bc:	0000d6fa 	strdeq	sp, [r0], -sl
    37c0:	00500100 	subseq	r0, r0, r0, lsl #2
    37c4:	000d2e0b 	andeq	r2, sp, fp, lsl #28
    37c8:	d6ff0100 	ldrbtle	r0, [pc], r0, lsl #2
    37cc:	d0000000 	andle	r0, r0, r0
    37d0:	1408003f 	strne	r0, [r8], #-63	; 0x3f
    37d4:	01000000 	mrseq	r0, (UNDEF: 0)
    37d8:	0003b89c 	muleq	r3, ip, r8
    37dc:	14840c00 	strne	r0, [r4], #3072	; 0xc00
    37e0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    37e4:	000000d6 	ldrdeq	r0, [r0], -r6
    37e8:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    37ec:	134e1d00 	movtne	r1, #60672	; 0xed00
    37f0:	07010000 	streq	r0, [r1, -r0]
    37f4:	0000d601 	andeq	sp, r0, r1, lsl #12
    37f8:	003fe400 	eorseq	lr, pc, r0, lsl #8
    37fc:	00000c08 	andeq	r0, r0, r8, lsl #24
    3800:	1e9c0100 	fmlnee	f0, f4, f0
    3804:	0000143e 	andeq	r1, r0, lr, lsr r4
    3808:	d6010c01 	strle	r0, [r1], -r1, lsl #24
    380c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    3810:	1008003f 	andne	r0, r8, pc, lsr r0
    3814:	01000000 	mrseq	r0, (UNDEF: 0)
    3818:	0003f99c 	muleq	r3, ip, r9
    381c:	14961f00 	ldrne	r1, [r6], #3840	; 0xf00
    3820:	0c010000 	stceq	0, cr0, [r1], {-0}
    3824:	0000d601 	andeq	sp, r0, r1, lsl #12
    3828:	000edd00 	andeq	sp, lr, r0, lsl #26
    382c:	a0120000 	andsge	r0, r2, r0
    3830:	00000000 	andeq	r0, r0, r0
    3834:	08080040 	stmdaeq	r8, {r6}
    3838:	01000000 	mrseq	r0, (UNDEF: 0)
    383c:	0004269c 	muleq	r4, ip, r6
    3840:	00b12000 	adcseq	r2, r1, r0
    3844:	0f110000 	svceq	0x00110000
    3848:	bd210000 	stclt	0, cr0, [r1, #-0]
    384c:	01000000 	mrseq	r0, (UNDEF: 0)
    3850:	00c91351 	sbceq	r1, r9, r1, asr r3
    3854:	0f320000 	svceq	0x00320000
    3858:	12000000 	andne	r0, r0, #0
    385c:	000000e4 	andeq	r0, r0, r4, ror #1
    3860:	08004008 	stmdaeq	r0, {r3, lr}
    3864:	00000004 	andeq	r0, r0, r4
    3868:	044c9c01 	strbeq	r9, [ip], #-3073	; 0xc01
    386c:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
    3870:	67000000 	strvs	r0, [r0, -r0]
    3874:	1300000f 	movwne	r0, #15
    3878:	00000101 	andeq	r0, r0, r1, lsl #2
    387c:	00000f88 	andeq	r0, r0, r8, lsl #31
    3880:	010e1200 	mrseq	r1, LR_fiq
    3884:	400c0000 	andmi	r0, ip, r0
    3888:	00060800 	andeq	r0, r6, r0, lsl #16
    388c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3890:	00000472 	andeq	r0, r0, r2, ror r4
    3894:	00011f20 	andeq	r1, r1, r0, lsr #30
    3898:	000fb100 	andeq	fp, pc, r0, lsl #2
    389c:	012b1300 			; <UNDEFINED> instruction: 0x012b1300
    38a0:	0fd20000 	svceq	0x00d20000
    38a4:	22000000 	andcs	r0, r0, #0
    38a8:	00001338 	andeq	r1, r0, r8, lsr r3
    38ac:	12012c01 	andne	r2, r1, #256	; 0x100
    38b0:	1a080040 	bne	2039b8 <__Stack_Size+0x2035b8>
    38b4:	01000000 	mrseq	r0, (UNDEF: 0)
    38b8:	0004a19c 	muleq	r4, ip, r1
    38bc:	64692300 	strbtvs	r2, [r9], #-768	; 0x300
    38c0:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    38c4:	000000d6 	ldrdeq	r0, [r0], -r6
    38c8:	00001001 	andeq	r1, r0, r1
    38cc:	00402811 	subeq	r2, r0, r1, lsl r8
    38d0:	00009808 	andeq	r9, r0, r8, lsl #16
    38d4:	e91e0000 	ldmdb	lr, {}	; <UNPREDICTABLE>
    38d8:	0100000a 	tsteq	r0, sl
    38dc:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    38e0:	402c0000 	eormi	r0, ip, r0
    38e4:	00280800 	eoreq	r0, r8, r0, lsl #16
    38e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    38ec:	000004e4 	andeq	r0, r0, r4, ror #9
    38f0:	00646923 	rsbeq	r6, r4, r3, lsr #18
    38f4:	d6013701 	strle	r3, [r1], -r1, lsl #14
    38f8:	22000000 	andcs	r0, r0, #0
    38fc:	1f000010 	svcne	0x00000010
    3900:	00001aed 	andeq	r1, r0, sp, ror #21
    3904:	d6013701 	strle	r3, [r1], -r1, lsl #14
    3908:	43000000 	movwmi	r0, #0
    390c:	17000010 	smladne	r0, r0, r0, r0
    3910:	0800404a 	stmdaeq	r0, {r1, r3, r6, lr}
    3914:	00000098 	muleq	r0, r8, r0
    3918:	03f12200 	mvnseq	r2, #0, 4
    391c:	46010000 	strmi	r0, [r1], -r0
    3920:	00405401 	subeq	r5, r0, r1, lsl #8
    3924:	00002408 	andeq	r2, r0, r8, lsl #8
    3928:	339c0100 	orrscc	r0, ip, #0, 2
    392c:	23000005 	movwcs	r0, #5
    3930:	01006469 	tsteq	r0, r9, ror #8
    3934:	00d60146 	sbcseq	r0, r6, r6, asr #2
    3938:	10640000 	rsbne	r0, r4, r0
    393c:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 3944 <__Stack_Size+0x3544>
    3940:	0100001a 	tsteq	r0, sl, lsl r0
    3944:	00d60146 	sbcseq	r0, r6, r6, asr #2
    3948:	10850000 	addne	r0, r5, r0
    394c:	1b1f0000 	blne	7c3954 <__Stack_Size+0x7c3554>
    3950:	01000014 	tsteq	r0, r4, lsl r0
    3954:	00d60146 	sbcseq	r0, r6, r6, asr #2
    3958:	10a60000 	adcne	r0, r6, r0
    395c:	74110000 	ldrvc	r0, [r1], #-0
    3960:	98080040 	stmdals	r8, {r6}
    3964:	00000000 	andeq	r0, r0, r0
    3968:	000b981e 	andeq	r9, fp, lr, lsl r8
    396c:	01530100 	cmpeq	r3, r0, lsl #2
    3970:	000000d6 	ldrdeq	r0, [r0], -r6
    3974:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
    3978:	00000030 	andeq	r0, r0, r0, lsr r0
    397c:	05b09c01 	ldreq	r9, [r0, #3073]!	; 0xc01
    3980:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3984:	53010064 	movwpl	r0, #4196	; 0x1064
    3988:	0000d601 	andeq	sp, r0, r1, lsl #12
    398c:	0010c700 	andseq	ip, r0, r0, lsl #14
    3990:	1aed1f00 	bne	ffb4b598 <SCS_BASE+0x1fb3d598>
    3994:	53010000 	movwpl	r0, #4096	; 0x1000
    3998:	0000d601 	andeq	sp, r0, r1, lsl #12
    399c:	0010e800 	andseq	lr, r0, r0, lsl #16
    39a0:	00a02400 	adceq	r2, r0, r0, lsl #8
    39a4:	40940000 	addsmi	r0, r4, r0
    39a8:	000c0800 	andeq	r0, ip, r0, lsl #16
    39ac:	62010000 	andvs	r0, r1, #0
    39b0:	0005a601 	andeq	sl, r5, r1, lsl #12
    39b4:	00bd2000 	adcseq	r2, sp, r0
    39b8:	11090000 	mrsne	r0, (UNDEF: 9)
    39bc:	b1200000 			; <UNDEFINED> instruction: 0xb1200000
    39c0:	46000000 	strmi	r0, [r0], -r0
    39c4:	25000011 	strcs	r0, [r0, #-17]
    39c8:	08004094 	stmdaeq	r0, {r2, r4, r7, lr}
    39cc:	0000000c 	andeq	r0, r0, ip
    39d0:	0000c913 	andeq	ip, r0, r3, lsl r9
    39d4:	00116e00 	andseq	r6, r1, r0, lsl #28
    39d8:	17000000 	strne	r0, [r0, -r0]
    39dc:	08004094 	stmdaeq	r0, {r2, r4, r7, lr}
    39e0:	00000098 	muleq	r0, r8, r0
    39e4:	04452200 	strbeq	r2, [r5], #-512	; 0x200
    39e8:	65010000 	strvs	r0, [r1, #-0]
    39ec:	0040a801 	subeq	sl, r0, r1, lsl #16
    39f0:	00002c08 	andeq	r2, r0, r8, lsl #24
    39f4:	289c0100 	ldmcs	ip, {r8}
    39f8:	23000006 	movwcs	r0, #6
    39fc:	01006469 	tsteq	r0, r9, ror #8
    3a00:	00d60165 	sbcseq	r0, r6, r5, ror #2
    3a04:	11b20000 			; <UNDEFINED> instruction: 0x11b20000
    3a08:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 3a10 <__Stack_Size+0x3610>
    3a0c:	0100001a 	tsteq	r0, sl, lsl r0
    3a10:	00d60165 	sbcseq	r0, r6, r5, ror #2
    3a14:	11d30000 	bicsne	r0, r3, r0
    3a18:	1b1f0000 	blne	7c3a20 <__Stack_Size+0x7c3620>
    3a1c:	01000014 	tsteq	r0, r4, lsl r0
    3a20:	00d60165 	sbcseq	r0, r6, r5, ror #2
    3a24:	11f40000 	mvnsne	r0, r0
    3a28:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3a2c:	b4000001 	strlt	r0, [r0], #-1
    3a30:	04080040 	streq	r0, [r8], #-64	; 0x40
    3a34:	01000000 	mrseq	r0, (UNDEF: 0)
    3a38:	061e016d 	ldreq	r0, [lr], -sp, ror #2
    3a3c:	1f260000 	svcne	0x00260000
    3a40:	25000001 	strcs	r0, [r0, #-1]
    3a44:	080040b4 	stmdaeq	r0, {r2, r4, r5, r7, lr}
    3a48:	00000004 	andeq	r0, r0, r4
    3a4c:	00012b14 	andeq	r2, r1, r4, lsl fp
    3a50:	11000000 	mrsne	r0, (UNDEF: 0)
    3a54:	080040ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, lr}
    3a58:	00000098 	muleq	r0, r8, r0
    3a5c:	005c2700 	subseq	r2, ip, r0, lsl #14
    3a60:	06380000 	ldrteq	r0, [r8], -r0
    3a64:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    3a68:	9f000006 	svcls	0x00000006
    3a6c:	07040500 	streq	r0, [r4, -r0, lsl #10]
    3a70:	00000a59 	andeq	r0, r0, r9, asr sl
    3a74:	00149c29 	andseq	r9, r4, r9, lsr #24
    3a78:	280b0100 	stmdacs	fp, {r8}
    3a7c:	05000006 	streq	r0, [r0, #-6]
    3a80:	00013403 	andeq	r3, r1, r3, lsl #8
    3a84:	005c2720 	subseq	r2, ip, r0, lsr #14
    3a88:	06600000 	strbteq	r0, [r0], -r0
    3a8c:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    3a90:	45000006 	strmi	r0, [r0, #-6]
    3a94:	140c2900 	strne	r2, [ip], #-2304	; 0x900
    3a98:	0c010000 	stceq	0, cr0, [r1], {-0}
    3a9c:	00000650 	andeq	r0, r0, r0, asr r6
    3aa0:	01d60305 	bicseq	r0, r6, r5, lsl #6
    3aa4:	13292000 			; <UNDEFINED> instruction: 0x13292000
    3aa8:	01000013 	tsteq	r0, r3, lsl r0
    3aac:	00005c0d 	andeq	r5, r0, sp, lsl #24
    3ab0:	d5030500 	strle	r0, [r3, #-1280]	; 0x500
    3ab4:	29200001 	stmdbcs	r0!, {r0}
    3ab8:	00001459 	andeq	r1, r0, r9, asr r4
    3abc:	005c0e01 	subseq	r0, ip, r1, lsl #28
    3ac0:	03050000 	movweq	r0, #20480	; 0x5000
    3ac4:	200001d4 	ldrdcs	r0, [r0], -r4
    3ac8:	00134129 	andseq	r4, r3, r9, lsr #2
    3acc:	d60f0100 	strle	r0, [pc], -r0, lsl #2
    3ad0:	05000000 	streq	r0, [r0, #-0]
    3ad4:	00001403 	andeq	r1, r0, r3, lsl #8
    3ad8:	148b2920 	strne	r2, [fp], #2336	; 0x920
    3adc:	10010000 	andne	r0, r1, r0
    3ae0:	000000d6 	ldrdeq	r0, [r0], -r6
    3ae4:	01300305 	teqeq	r0, r5, lsl #6
    3ae8:	062a2000 	strteq	r2, [sl], -r0
    3aec:	02000013 	andeq	r0, r0, #19
    3af0:	0000d60b 	andeq	sp, r0, fp, lsl #12
    3af4:	0006cf00 	andeq	ip, r6, r0, lsl #30
    3af8:	00d62b00 	sbcseq	r2, r6, r0, lsl #22
    3afc:	d62b0000 	strtle	r0, [fp], -r0
    3b00:	00000000 	andeq	r0, r0, r0
    3b04:	0012cd2c 	andseq	ip, r2, ip, lsr #26
    3b08:	2a0c0200 	bcs	304310 <__Stack_Size+0x303f10>
    3b0c:	000012e6 	andeq	r1, r0, r6, ror #5
    3b10:	00d60e02 	sbcseq	r0, r6, r2, lsl #28
    3b14:	06f00000 	ldrbteq	r0, [r0], r0
    3b18:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    3b1c:	2b000006 	blcs	3b3c <__Stack_Size+0x373c>
    3b20:	000000d6 	ldrdeq	r0, [r0], -r6
    3b24:	5c042d00 	stcpl	13, cr2, [r4], {-0}
    3b28:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3b2c:	000012a7 	andeq	r1, r0, r7, lsr #5
    3b30:	07071002 	streq	r1, [r7, -r2]
    3b34:	d62b0000 	strtle	r0, [fp], -r0
    3b38:	00000000 	andeq	r0, r0, r0
    3b3c:	0012912c 	andseq	r9, r2, ip, lsr #2
    3b40:	2a0d0200 	bcs	344348 <__Stack_Size+0x343f48>
    3b44:	000012db 	ldrdeq	r1, [r0], -fp
    3b48:	00d60f02 	sbcseq	r0, r6, r2, lsl #30
    3b4c:	07280000 	streq	r0, [r8, -r0]!
    3b50:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    3b54:	2b000006 	blcs	3b74 <__Stack_Size+0x3774>
    3b58:	000000d6 	ldrdeq	r0, [r0], -r6
    3b5c:	12782f00 	rsbsne	r2, r8, #0, 30
    3b60:	11020000 	mrsne	r0, (UNDEF: 2)
    3b64:	000000d6 	ldrdeq	r0, [r0], -r6
    3b68:	0008b700 	andeq	fp, r8, r0, lsl #14
    3b6c:	cb000400 	blgt	4b74 <__Stack_Size+0x4774>
    3b70:	04000007 	streq	r0, [r0], #-7
    3b74:	0007e101 	andeq	lr, r7, r1, lsl #2
    3b78:	165b0100 	ldrbne	r0, [fp], -r0, lsl #2
    3b7c:	01010000 	mrseq	r0, (UNDEF: 1)
    3b80:	40d40000 	sbcsmi	r0, r4, r0
    3b84:	04800800 	streq	r0, [r0], #2048	; 0x800
    3b88:	07200000 	streq	r0, [r0, -r0]!
    3b8c:	04020000 	streq	r0, [r2], #-0
    3b90:	00093c05 	andeq	r3, r9, r5, lsl #24
    3b94:	05020200 	streq	r0, [r2, #-512]	; 0x200
    3b98:	00000900 	andeq	r0, r0, r0, lsl #18
    3b9c:	9d060102 	stflss	f0, [r6, #-8]
    3ba0:	0300000a 	movweq	r0, #10
    3ba4:	00323375 	eorseq	r3, r2, r5, ror r3
    3ba8:	00452702 	subeq	r2, r5, r2, lsl #14
    3bac:	04020000 	streq	r0, [r2], #-0
    3bb0:	000a6207 	andeq	r6, sl, r7, lsl #4
    3bb4:	31750300 	cmncc	r5, r0, lsl #6
    3bb8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    3bbc:	00000057 	andeq	r0, r0, r7, asr r0
    3bc0:	54070202 	strpl	r0, [r7], #-514	; 0x202
    3bc4:	0300000c 	movweq	r0, #12
    3bc8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    3bcc:	00006829 	andeq	r6, r0, r9, lsr #16
    3bd0:	08010200 	stmdaeq	r1, {r9}
    3bd4:	00000a9b 	muleq	r0, fp, sl
    3bd8:	0004b004 	andeq	fp, r4, r4
    3bdc:	7a2f0200 	bvc	bc43e4 <__Stack_Size+0xbc3fe4>
    3be0:	05000000 	streq	r0, [r0, #-0]
    3be4:	00000045 	andeq	r0, r0, r5, asr #32
    3be8:	00030b04 	andeq	r0, r3, r4, lsl #22
    3bec:	8a300200 	bhi	c043f4 <__Stack_Size+0xc03ff4>
    3bf0:	05000000 	streq	r0, [r0, #-0]
    3bf4:	00000057 	andeq	r0, r0, r7, asr r0
    3bf8:	39020106 	stmdbcc	r2, {r1, r2, r8}
    3bfc:	000000a4 	andeq	r0, r0, r4, lsr #1
    3c00:	00188d07 	andseq	r8, r8, r7, lsl #26
    3c04:	53080000 	movwpl	r0, #32768	; 0x8000
    3c08:	01005445 	tsteq	r0, r5, asr #8
    3c0c:	08840400 	stmeq	r4, {sl}
    3c10:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    3c14:	0000008f 	andeq	r0, r0, pc, lsl #1
    3c18:	3b020106 	blcc	84038 <__Stack_Size+0x83c38>
    3c1c:	000000c4 	andeq	r0, r0, r4, asr #1
    3c20:	0005b507 	andeq	fp, r5, r7, lsl #10
    3c24:	3b070000 	blcc	1c3c2c <__Stack_Size+0x1c382c>
    3c28:	0100000a 	tsteq	r0, sl
    3c2c:	011b0400 	tsteq	fp, r0, lsl #8
    3c30:	3b020000 	blcc	83c38 <__Stack_Size+0x83838>
    3c34:	000000af 	andeq	r0, r0, pc, lsr #1
    3c38:	59070402 	stmdbpl	r7, {r1, sl}
    3c3c:	0900000a 	stmdbeq	r0, {r1, r3}
    3c40:	010c0324 	tsteq	ip, r4, lsr #6
    3c44:	00000152 	andeq	r0, r0, r2, asr r1
    3c48:	5243410a 	subpl	r4, r3, #-2147483646	; 0x80000002
    3c4c:	010e0300 	mrseq	r0, ELR_hyp
    3c50:	0000006f 	andeq	r0, r0, pc, rrx
    3c54:	15d40b00 	ldrbne	r0, [r4, #2816]	; 0xb00
    3c58:	0f030000 	svceq	0x00030000
    3c5c:	00006f01 	andeq	r6, r0, r1, lsl #30
    3c60:	d10b0400 	tstle	fp, r0, lsl #8
    3c64:	03000015 	movweq	r0, #21
    3c68:	006f0110 	rsbeq	r0, pc, r0, lsl r1	; <UNPREDICTABLE>
    3c6c:	0a080000 	beq	203c74 <__Stack_Size+0x203874>
    3c70:	03005253 	movweq	r5, #595	; 0x253
    3c74:	006f0111 	rsbeq	r0, pc, r1, lsl r1	; <UNPREDICTABLE>
    3c78:	0a0c0000 	beq	303c80 <__Stack_Size+0x303880>
    3c7c:	03005243 	movweq	r5, #579	; 0x243
    3c80:	006f0112 	rsbeq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    3c84:	0a100000 	beq	403c8c <__Stack_Size+0x40388c>
    3c88:	03005241 	movweq	r5, #577	; 0x241
    3c8c:	006f0113 	rsbeq	r0, pc, r3, lsl r1	; <UNPREDICTABLE>
    3c90:	0b140000 	bleq	503c98 <__Stack_Size+0x503898>
    3c94:	00001804 	andeq	r1, r0, r4, lsl #16
    3c98:	6f011403 	svcvs	0x00011403
    3c9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3ca0:	52424f0a 	subpl	r4, r2, #10, 30	; 0x28
    3ca4:	01150300 	tsteq	r5, r0, lsl #6
    3ca8:	0000006f 	andeq	r0, r0, pc, rrx
    3cac:	155e0b1c 	ldrbne	r0, [lr, #-2844]	; 0xb1c
    3cb0:	16030000 	strne	r0, [r3], -r0
    3cb4:	00006f01 	andeq	r6, r0, r1, lsl #30
    3cb8:	0c002000 	stceq	0, cr2, [r0], {-0}
    3cbc:	0000180d 	andeq	r1, r0, sp, lsl #16
    3cc0:	d6011703 	strle	r1, [r1], -r3, lsl #14
    3cc4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3cc8:	01190310 	tsteq	r9, r0, lsl r3
    3ccc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3cd0:	5044520a 	subpl	r5, r4, sl, lsl #4
    3cd4:	011b0300 	tsteq	fp, r0, lsl #6
    3cd8:	0000007f 	andeq	r0, r0, pc, ror r0
    3cdc:	17cc0b00 	strbne	r0, [ip, r0, lsl #22]
    3ce0:	1c030000 	stcne	0, cr0, [r3], {-0}
    3ce4:	00007f01 	andeq	r7, r0, r1, lsl #30
    3ce8:	d10b0200 	mrsle	r0, R11_fiq
    3cec:	03000017 	movweq	r0, #23
    3cf0:	007f011d 	rsbseq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    3cf4:	0b040000 	bleq	103cfc <__Stack_Size+0x1038fc>
    3cf8:	000017d7 	ldrdeq	r1, [r0], -r7
    3cfc:	7f011e03 	svcvc	0x00011e03
    3d00:	06000000 	streq	r0, [r0], -r0
    3d04:	00159a0b 	andseq	r9, r5, fp, lsl #20
    3d08:	011f0300 	tsteq	pc, r0, lsl #6
    3d0c:	0000007f 	andeq	r0, r0, pc, ror r0
    3d10:	159f0b08 	ldrne	r0, [pc, #2824]	; 4820 <__Stack_Size+0x4420>
    3d14:	20030000 	andcs	r0, r3, r0
    3d18:	00007f01 	andeq	r7, r0, r1, lsl #30
    3d1c:	a40b0a00 	strge	r0, [fp], #-2560	; 0xa00
    3d20:	03000015 	movweq	r0, #21
    3d24:	007f0121 	rsbseq	r0, pc, r1, lsr #2
    3d28:	0b0c0000 	bleq	303d30 <__Stack_Size+0x303930>
    3d2c:	000015a9 	andeq	r1, r0, r9, lsr #11
    3d30:	7f012203 	svcvc	0x00012203
    3d34:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3d38:	17370c00 	ldrne	r0, [r7, -r0, lsl #24]!
    3d3c:	23030000 	movwcs	r0, #12288	; 0x3000
    3d40:	00015e01 	andeq	r5, r1, r1, lsl #28
    3d44:	04010600 	streq	r0, [r1], #-1536	; 0x600
    3d48:	0002031d 	andeq	r0, r2, sp, lsl r3
    3d4c:	16b20700 	ldrtne	r0, [r2], r0, lsl #14
    3d50:	07010000 	streq	r0, [r1, -r0]
    3d54:	00001637 	andeq	r1, r0, r7, lsr r6
    3d58:	150c0702 	strne	r0, [ip, #-1794]	; 0x702
    3d5c:	07030000 	streq	r0, [r3, -r0]
    3d60:	000016a3 	andeq	r1, r0, r3, lsr #13
    3d64:	16c70704 	strbne	r0, [r7], r4, lsl #14
    3d68:	00050000 	andeq	r0, r5, r0
    3d6c:	00158404 	andseq	r8, r5, r4, lsl #8
    3d70:	dc230400 	cfstrsle	mvf0, [r3], #-0
    3d74:	0d000001 	stceq	0, cr0, [r0, #-4]
    3d78:	00001727 	andeq	r1, r0, r7, lsr #14
    3d7c:	03033f01 	movweq	r3, #16129	; 0x3f01
    3d80:	01000002 	tsteq	r0, r2
    3d84:	0000022c 	andeq	r0, r0, ip, lsr #4
    3d88:	0016140e 	andseq	r1, r6, lr, lsl #8
    3d8c:	03410100 	movteq	r0, #4352	; 0x1100
    3d90:	00000203 	andeq	r0, r0, r3, lsl #4
    3d94:	07c60f00 	strbeq	r0, [r6, r0, lsl #30]
    3d98:	56010000 	strpl	r0, [r1], -r0
    3d9c:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
    3da0:	00000018 	andeq	r0, r0, r8, lsl r0
    3da4:	02519c01 	subseq	r9, r1, #256	; 0x100
    3da8:	2c100000 	ldccs	0, cr0, [r0], {-0}
    3dac:	01000015 	tsteq	r0, r5, lsl r0
    3db0:	00003a56 	andeq	r3, r0, r6, asr sl
    3db4:	00121500 	andseq	r1, r2, r0, lsl #10
    3db8:	420f0000 	andmi	r0, pc, #0
    3dbc:	01000017 	tsteq	r0, r7, lsl r0
    3dc0:	0040ec6a 	subeq	lr, r0, sl, ror #24
    3dc4:	00001808 	andeq	r1, r0, r8, lsl #16
    3dc8:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    3dcc:	10000002 	andne	r0, r0, r2
    3dd0:	00001711 	andeq	r1, r0, r1, lsl r7
    3dd4:	003a6a01 	eorseq	r6, sl, r1, lsl #20
    3dd8:	12360000 	eorsne	r0, r6, #0
    3ddc:	0f000000 	svceq	0x00000000
    3de0:	000001e8 	andeq	r0, r0, r8, ror #3
    3de4:	41047e01 	tstmi	r4, r1, lsl #28
    3de8:	00180800 	andseq	r0, r8, r0, lsl #16
    3dec:	9c010000 	stcls	0, cr0, [r1], {-0}
    3df0:	0000029b 	muleq	r0, fp, r2
    3df4:	00183610 	andseq	r3, r8, r0, lsl r6
    3df8:	3a7e0100 	bcc	1f84200 <__Stack_Size+0x1f83e00>
    3dfc:	57000000 	strpl	r0, [r0, -r0]
    3e00:	00000012 	andeq	r0, r0, r2, lsl r0
    3e04:	00156311 	andseq	r6, r5, r1, lsl r3
    3e08:	1c900100 	ldfnes	f0, [r0], {0}
    3e0c:	18080041 	stmdane	r8, {r0, r6}
    3e10:	01000000 	mrseq	r0, (UNDEF: 0)
    3e14:	1646119c 			; <UNDEFINED> instruction: 0x1646119c
    3e18:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    3e1c:	08004134 	stmdaeq	r0, {r2, r4, r5, r8, lr}
    3e20:	00000010 	andeq	r0, r0, r0, lsl r0
    3e24:	77129c01 	ldrvc	r9, [r2, -r1, lsl #24]
    3e28:	01000017 	tsteq	r0, r7, lsl r0
    3e2c:	003a0296 	mlaseq	sl, r6, r2, r0
    3e30:	41440000 	mrsmi	r0, (UNDEF: 68)
    3e34:	000c0800 	andeq	r0, ip, r0, lsl #16
    3e38:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e3c:	0015ae12 	andseq	sl, r5, r2, lsl lr
    3e40:	02a30100 	adceq	r0, r3, #0, 2
    3e44:	0000003a 	andeq	r0, r0, sl, lsr r0
    3e48:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
    3e4c:	0000000c 	andeq	r0, r0, ip
    3e50:	dd139c01 	ldcle	12, cr9, [r3, #-4]
    3e54:	01000016 	tsteq	r0, r6, lsl r0
    3e58:	00a402b1 	strhteq	r0, [r4], r1
    3e5c:	415c0000 	cmpmi	ip, r0
    3e60:	00100800 	andseq	r0, r0, r0, lsl #16
    3e64:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e68:	00000314 	andeq	r0, r0, r4, lsl r3
    3e6c:	0014fe14 	andseq	pc, r4, r4, lsl lr	; <UNPREDICTABLE>
    3e70:	02b30100 	adcseq	r0, r3, #0, 2
    3e74:	000000a4 	andeq	r0, r0, r4, lsr #1
    3e78:	00001278 	andeq	r1, r0, r8, ror r2
    3e7c:	153a1300 	ldrne	r1, [sl, #-768]!	; 0x300
    3e80:	c7010000 	strgt	r0, [r1, -r0]
    3e84:	0000a402 	andeq	sl, r0, r2, lsl #8
    3e88:	00416c00 	subeq	r6, r1, r0, lsl #24
    3e8c:	00001008 	andeq	r1, r0, r8
    3e90:	3f9c0100 	svccc	0x009c0100
    3e94:	14000003 	strne	r0, [r0], #-3
    3e98:	00001620 	andeq	r1, r0, r0, lsr #12
    3e9c:	a402c901 	strge	ip, [r2], #-2305	; 0x901
    3ea0:	9d000000 	stcls	0, cr0, [r0, #-0]
    3ea4:	00000012 	andeq	r0, r0, r2, lsl r0
    3ea8:	0014c615 	andseq	ip, r4, r5, lsl r6
    3eac:	02e20100 	rsceq	r0, r2, #0, 2
    3eb0:	0800417c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, lr}
    3eb4:	00000018 	andeq	r0, r0, r8, lsl r0
    3eb8:	03749c01 	cmneq	r4, #256	; 0x100
    3ebc:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    3ec0:	01000017 	tsteq	r0, r7, lsl r0
    3ec4:	004c02e2 	subeq	r0, ip, r2, ror #5
    3ec8:	12c30000 	sbcne	r0, r3, #0
    3ecc:	91170000 	tstls	r7, r0
    3ed0:	01000015 	tsteq	r0, r5, lsl r0
    3ed4:	00c402e2 	sbceq	r0, r4, r2, ror #5
    3ed8:	51010000 	mrspl	r0, (UNDEF: 1)
    3edc:	167f1300 	ldrbtne	r1, [pc], -r0, lsl #6
    3ee0:	01010000 	mrseq	r0, (UNDEF: 1)
    3ee4:	0000a403 	andeq	sl, r0, r3, lsl #8
    3ee8:	00419400 	subeq	r9, r1, r0, lsl #8
    3eec:	00002008 	andeq	r2, r0, r8
    3ef0:	af9c0100 	svcge	0x009c0100
    3ef4:	16000003 	strne	r0, [r0], -r3
    3ef8:	000017a5 	andeq	r1, r0, r5, lsr #15
    3efc:	4c030101 	stfmis	f0, [r3], {1}
    3f00:	fd000000 	stc2	0, cr0, [r0, #-0]
    3f04:	14000012 	strne	r0, [r0], #-18
    3f08:	00001620 	andeq	r1, r0, r0, lsr #12
    3f0c:	a4030301 	strge	r0, [r3], #-769	; 0x301
    3f10:	37000000 	strcc	r0, [r0, -r0]
    3f14:	00000013 	andeq	r0, r0, r3, lsl r0
    3f18:	00169315 	andseq	r9, r6, r5, lsl r3
    3f1c:	032e0100 			; <UNDEFINED> instruction: 0x032e0100
    3f20:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
    3f24:	0000000c 	andeq	r0, r0, ip
    3f28:	03d49c01 	bicseq	r9, r4, #256	; 0x100
    3f2c:	a5170000 	ldrge	r0, [r7, #-0]
    3f30:	01000017 	tsteq	r0, r7, lsl r0
    3f34:	004c032e 	subeq	r0, ip, lr, lsr #6
    3f38:	50010000 	andpl	r0, r1, r0
    3f3c:	020e1800 	andeq	r1, lr, #0, 16
    3f40:	41c00000 	bicmi	r0, r0, r0
    3f44:	00280800 	eoreq	r0, r8, r0, lsl #16
    3f48:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f4c:	00000400 	andeq	r0, r0, r0, lsl #8
    3f50:	00021f19 	andeq	r1, r2, r9, lsl pc
    3f54:	00135600 	andseq	r5, r3, r0, lsl #12
    3f58:	41ce1a00 	bicmi	r1, lr, r0, lsl #20
    3f5c:	000e0800 	andeq	r0, lr, r0, lsl #16
    3f60:	1f1b0000 	svcne	0x001b0000
    3f64:	00000002 	andeq	r0, r0, r2
    3f68:	15581c00 	ldrbne	r1, [r8, #-3072]	; 0xc00
    3f6c:	85010000 	strhi	r0, [r1, #-0]
    3f70:	04180103 	ldreq	r0, [r8], #-259	; 0x103
    3f74:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    3f78:	03870100 	orreq	r0, r7, #0, 2
    3f7c:	0000006f 	andeq	r0, r0, pc, rrx
    3f80:	181b1300 	ldmdane	fp, {r8, r9, ip}
    3f84:	66010000 	strvs	r0, [r1], -r0
    3f88:	00020303 	andeq	r0, r2, r3, lsl #6
    3f8c:	0041e800 	subeq	lr, r1, r0, lsl #16
    3f90:	00003608 	andeq	r3, r0, r8, lsl #12
    3f94:	8c9c0100 	ldfhis	f0, [ip], {0}
    3f98:	16000004 	strne	r0, [r0], -r4
    3f9c:	000016d5 	ldrdeq	r1, [r0], -r5
    3fa0:	3a036601 	bcc	dd7ac <__Stack_Size+0xdd3ac>
    3fa4:	75000000 	strvc	r0, [r0, #-0]
    3fa8:	14000013 	strne	r0, [r0], #-19
    3fac:	00001619 	andeq	r1, r0, r9, lsl r6
    3fb0:	03036801 	movweq	r6, #14337	; 0x3801
    3fb4:	93000002 	movwls	r0, #2
    3fb8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    3fbc:	00000400 	andeq	r0, r0, r0, lsl #8
    3fc0:	080041f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, lr}
    3fc4:	00000012 	andeq	r0, r0, r2, lsl r0
    3fc8:	79037001 	stmdbvc	r3, {r0, ip, sp, lr}
    3fcc:	1a000004 	bne	3fe4 <__Stack_Size+0x3be4>
    3fd0:	080041f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, lr}
    3fd4:	00000012 	andeq	r0, r0, r2, lsl r0
    3fd8:	00040d1f 	andeq	r0, r4, pc, lsl sp
    3fdc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3fe0:	f0200000 			; <UNDEFINED> instruction: 0xf0200000
    3fe4:	0e080041 	cdpeq	0, 0, cr0, cr8, cr1, {2}
    3fe8:	20000002 	andcs	r0, r0, r2
    3fec:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
    3ff0:	0000020e 	andeq	r0, r0, lr, lsl #4
    3ff4:	151c2100 	ldrne	r2, [ip, #-256]	; 0x100
    3ff8:	ad010000 	stcge	0, cr0, [r1, #-0]
    3ffc:	00000203 	andeq	r0, r0, r3, lsl #4
    4000:	0800421e 	stmdaeq	r0, {r1, r2, r3, r4, r9, lr}
    4004:	00000042 	andeq	r0, r0, r2, asr #32
    4008:	04ea9c01 	strbteq	r9, [sl], #3073	; 0xc01
    400c:	2a100000 	bcs	404014 <__Stack_Size+0x403c14>
    4010:	01000016 	tsteq	r0, r6, lsl r0
    4014:	00003aad 	andeq	r3, r0, sp, lsr #21
    4018:	0013c800 	andseq	ip, r3, r0, lsl #16
    401c:	16192200 	ldrne	r2, [r9], -r0, lsl #4
    4020:	af010000 	svcge	0x00010000
    4024:	00000203 	andeq	r0, r0, r3, lsl #4
    4028:	000013f4 	strdeq	r1, [r0], -r4
    402c:	00422a23 	subeq	r2, r2, r3, lsr #20
    4030:	00041808 	andeq	r1, r4, r8, lsl #16
    4034:	0004d800 	andeq	sp, r4, r0, lsl #16
    4038:	50012400 	andpl	r2, r1, r0, lsl #8
    403c:	0fff0a03 	svceq	0x00ff0a03
    4040:	424a2500 	submi	r2, sl, #0, 10
    4044:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4048:	01240000 			; <UNDEFINED> instruction: 0x01240000
    404c:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    4050:	2100000f 	tstcs	r0, pc
    4054:	00001570 	andeq	r1, r0, r0, ror r5
    4058:	0203d401 	andeq	sp, r3, #16777216	; 0x1000000
    405c:	42600000 	rsbmi	r0, r0, #0
    4060:	003c0800 	eorseq	r0, ip, r0, lsl #16
    4064:	9c010000 	stcls	0, cr0, [r1], {-0}
    4068:	00000539 	andeq	r0, r0, r9, lsr r5
    406c:	00161922 	andseq	r1, r6, r2, lsr #18
    4070:	03d60100 	bicseq	r0, r6, #0, 2
    4074:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    4078:	23000014 	movwcs	r0, #20
    407c:	0800426a 	stmdaeq	r0, {r1, r3, r5, r6, r9, lr}
    4080:	00000418 	andeq	r0, r0, r8, lsl r4
    4084:	00000527 	andeq	r0, r0, r7, lsr #10
    4088:	03500124 	cmpeq	r0, #36, 2
    408c:	000fff0a 	andeq	pc, pc, sl, lsl #30
    4090:	00428825 	subeq	r8, r2, r5, lsr #16
    4094:	00041808 	andeq	r1, r4, r8, lsl #16
    4098:	50012400 	andpl	r2, r1, r0, lsl #8
    409c:	0fff0a03 	svceq	0x00ff0a03
    40a0:	e7210000 	str	r0, [r1, -r0]!
    40a4:	01000014 	tsteq	r0, r4, lsl r0
    40a8:	000203f7 	strdeq	r0, [r2], -r7
    40ac:	00429c00 	subeq	r9, r2, r0, lsl #24
    40b0:	00007008 	andeq	r7, r0, r8
    40b4:	9b9c0100 	blls	fe7044bc <SCS_BASE+0x1e6f64bc>
    40b8:	22000005 	andcs	r0, r0, #5
    40bc:	00001619 	andeq	r1, r0, r9, lsl r6
    40c0:	0203f901 	andeq	pc, r3, #16384	; 0x4000
    40c4:	14480000 	strbne	r0, [r8], #-0
    40c8:	a6230000 	strtge	r0, [r3], -r0
    40cc:	18080042 	stmdane	r8, {r1, r6}
    40d0:	76000004 	strvc	r0, [r0], -r4
    40d4:	24000005 	strcs	r0, [r0], #-5
    40d8:	0a035001 	beq	d80e4 <__Stack_Size+0xd7ce4>
    40dc:	23000fff 	movwcs	r0, #4095	; 0xfff
    40e0:	080042ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, lr}
    40e4:	00000418 	andeq	r0, r0, r8, lsl r4
    40e8:	0000058b 	andeq	r0, r0, fp, lsl #11
    40ec:	03500124 	cmpeq	r0, #36, 2
    40f0:	000fff0a 	andeq	pc, pc, sl, lsl #30
    40f4:	0042f025 	subeq	pc, r2, r5, lsr #32
    40f8:	00041808 	andeq	r1, r4, r8, lsl #16
    40fc:	50012400 	andpl	r2, r1, r0, lsl #8
    4100:	00003f01 	andeq	r3, r0, r1, lsl #30
    4104:	0017f213 	andseq	pc, r7, r3, lsl r2	; <UNPREDICTABLE>
    4108:	01360100 	teqeq	r6, r0, lsl #2
    410c:	00000203 	andeq	r0, r0, r3, lsl #4
    4110:	0800430c 	stmdaeq	r0, {r2, r3, r8, r9, lr}
    4114:	00000048 	andeq	r0, r0, r8, asr #32
    4118:	061b9c01 	ldreq	r9, [fp], -r1, lsl #24
    411c:	13160000 	tstne	r6, #0
    4120:	0100002e 	tsteq	r0, lr, lsr #32
    4124:	003a0136 	eorseq	r0, sl, r6, lsr r1
    4128:	147d0000 	ldrbtne	r0, [sp], #-0
    412c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    4130:	01000017 	tsteq	r0, r7, lsl r0
    4134:	003a0136 	eorseq	r0, sl, r6, lsr r1
    4138:	14a90000 	strtne	r0, [r9], #0
    413c:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    4140:	01000016 	tsteq	r0, r6, lsl r0
    4144:	02030138 	andeq	r0, r3, #56, 2
    4148:	14d50000 	ldrbne	r0, [r5], #0
    414c:	18230000 	stmdane	r3!, {}	; <UNPREDICTABLE>
    4150:	18080043 	stmdane	r8, {r0, r1, r6}
    4154:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    4158:	24000005 	strcs	r0, [r0], #-5
    415c:	3f015001 	svccc	0x00015001
    4160:	43302300 	teqmi	r0, #0, 6
    4164:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4168:	060b0000 	streq	r0, [fp], -r0
    416c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4170:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4174:	00433e25 	subeq	r3, r3, r5, lsr #28
    4178:	00041808 	andeq	r1, r4, r8, lsl #16
    417c:	50012400 	andpl	r2, r1, r0, lsl #8
    4180:	00003f01 	andeq	r3, r0, r1, lsl #30
    4184:	00178f13 	andseq	r8, r7, r3, lsl pc
    4188:	01710100 	cmneq	r1, r0, lsl #2
    418c:	00000203 	andeq	r0, r0, r3, lsl #4
    4190:	08004354 	stmdaeq	r0, {r2, r4, r6, r8, r9, lr}
    4194:	00000038 	andeq	r0, r0, r8, lsr r0
    4198:	06889c01 	streq	r9, [r8], r1, lsl #24
    419c:	13160000 	tstne	r6, #0
    41a0:	0100002e 	tsteq	r0, lr, lsr #32
    41a4:	003a0171 	eorseq	r0, sl, r1, ror r1
    41a8:	150a0000 	strne	r0, [sl, #-0]
    41ac:	0c160000 	ldceq	0, cr0, [r6], {-0}
    41b0:	01000017 	tsteq	r0, r7, lsl r0
    41b4:	004c0171 	subeq	r0, ip, r1, ror r1
    41b8:	15360000 	ldrne	r0, [r6, #-0]!
    41bc:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    41c0:	01000016 	tsteq	r0, r6, lsl r0
    41c4:	02030173 	andeq	r0, r3, #-1073741796	; 0xc000001c
    41c8:	15570000 	ldrbne	r0, [r7, #-0]
    41cc:	60230000 	eorvs	r0, r3, r0
    41d0:	18080043 	stmdane	r8, {r0, r1, r6}
    41d4:	78000004 	stmdavc	r0, {r2}
    41d8:	24000006 	strcs	r0, [r0], #-6
    41dc:	3f015001 	svccc	0x00015001
    41e0:	43762500 	cmnmi	r6, #0, 10
    41e4:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    41e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
    41ec:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    41f0:	175b1300 	ldrbne	r1, [fp, -r0, lsl #6]
    41f4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    41f8:	00020301 	andeq	r0, r2, r1, lsl #6
    41fc:	00438c00 	subeq	r8, r3, r0, lsl #24
    4200:	00004808 	andeq	r4, r0, r8, lsl #16
    4204:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    4208:	16000006 	strne	r0, [r0], -r6
    420c:	00002e13 	andeq	r2, r0, r3, lsl lr
    4210:	3a019901 	bcc	6a61c <__Stack_Size+0x6a21c>
    4214:	81000000 	mrshi	r0, (UNDEF: 0)
    4218:	16000015 			; <UNDEFINED> instruction: 0x16000015
    421c:	0000170c 	andeq	r1, r0, ip, lsl #14
    4220:	5e019901 	cdppl	9, 0, cr9, cr1, cr1, {0}
    4224:	ad000000 	stcge	0, cr0, [r0, #-0]
    4228:	14000015 	strne	r0, [r0], #-21
    422c:	00001619 	andeq	r1, r0, r9, lsl r6
    4230:	03019b01 	movweq	r9, #6913	; 0x1b01
    4234:	ce000002 	cdpgt	0, 0, cr0, cr0, cr2, {0}
    4238:	23000015 	movwcs	r0, #21
    423c:	08004398 	stmdaeq	r0, {r3, r4, r7, r8, r9, lr}
    4240:	00000418 	andeq	r0, r0, r8, lsl r4
    4244:	000006e5 	andeq	r0, r0, r5, ror #13
    4248:	01500124 	cmpeq	r0, r4, lsr #2
    424c:	ba25003f 	blt	944350 <__Stack_Size+0x943f50>
    4250:	18080043 	stmdane	r8, {r0, r1, r6}
    4254:	24000004 	strcs	r0, [r0], #-4
    4258:	3f015001 	svccc	0x00015001
    425c:	b0130000 	andslt	r0, r3, r0
    4260:	01000017 	tsteq	r0, r7, lsl r0
    4264:	020301ca 	andeq	r0, r3, #-2147483598	; 0x80000032
    4268:	43d40000 	bicsmi	r0, r4, #0
    426c:	00a00800 	adceq	r0, r0, r0, lsl #16
    4270:	9c010000 	stcls	0, cr0, [r1], {-0}
    4274:	000007cb 	andeq	r0, r0, fp, asr #15
    4278:	0017dd16 	andseq	sp, r7, r6, lsl sp
    427c:	01ca0100 	biceq	r0, sl, r0, lsl #2
    4280:	0000003a 	andeq	r0, r0, sl, lsr r0
    4284:	000015f8 	strdeq	r1, [r0], -r8
    4288:	00170714 	andseq	r0, r7, r4, lsl r7
    428c:	01cc0100 	biceq	r0, ip, r0, lsl #2
    4290:	0000004c 	andeq	r0, r0, ip, asr #32
    4294:	00001641 	andeq	r1, r0, r1, asr #12
    4298:	0016bd14 	andseq	fp, r6, r4, lsl sp
    429c:	01cc0100 	biceq	r0, ip, r0, lsl #2
    42a0:	0000004c 	andeq	r0, r0, ip, asr #32
    42a4:	0000168d 	andeq	r1, r0, sp, lsl #13
    42a8:	0014d514 	andseq	sp, r4, r4, lsl r5
    42ac:	01cc0100 	biceq	r0, ip, r0, lsl #2
    42b0:	0000004c 	andeq	r0, r0, ip, asr #32
    42b4:	000016e5 	andeq	r1, r0, r5, ror #13
    42b8:	00165114 	andseq	r5, r6, r4, lsl r1
    42bc:	01cc0100 	biceq	r0, ip, r0, lsl #2
    42c0:	0000004c 	andeq	r0, r0, ip, asr #32
    42c4:	00001741 	andeq	r1, r0, r1, asr #14
    42c8:	00161914 	andseq	r1, r6, r4, lsl r9
    42cc:	01ce0100 	biceq	r0, lr, r0, lsl #2
    42d0:	00000203 	andeq	r0, r0, r3, lsl #4
    42d4:	00001789 	andeq	r1, r0, r9, lsl #15
    42d8:	0043de23 	subeq	sp, r3, r3, lsr #28
    42dc:	00041808 	andeq	r1, r4, r8, lsl #16
    42e0:	00078200 	andeq	r8, r7, r0, lsl #4
    42e4:	50012400 	andpl	r2, r1, r0, lsl #8
    42e8:	23003f01 	movwcs	r3, #3841	; 0xf01
    42ec:	08004412 	stmdaeq	r0, {r1, r4, sl, lr}
    42f0:	00000418 	andeq	r0, r0, r8, lsl r4
    42f4:	00000795 	muleq	r0, r5, r7
    42f8:	01500124 	cmpeq	r0, r4, lsr #2
    42fc:	2423003f 	strtcs	r0, [r3], #-63	; 0x3f
    4300:	18080044 	stmdane	r8, {r2, r6}
    4304:	a8000004 	stmdage	r0, {r2}
    4308:	24000007 	strcs	r0, [r0], #-7
    430c:	3f015001 	svccc	0x00015001
    4310:	443c2300 	ldrtmi	r2, [ip], #-768	; 0x300
    4314:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4318:	07bb0000 	ldreq	r0, [fp, r0]!
    431c:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4320:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4324:	00445625 	subeq	r5, r4, r5, lsr #12
    4328:	00041808 	andeq	r1, r4, r8, lsl #16
    432c:	50012400 	andpl	r2, r1, r0, lsl #8
    4330:	00003f01 	andeq	r3, r0, r1, lsl #30
    4334:	0015fc13 	andseq	pc, r5, r3, lsl ip	; <UNPREDICTABLE>
    4338:	02190100 	andseq	r0, r9, #0, 2
    433c:	00000203 	andeq	r0, r0, r3, lsl #4
    4340:	08004474 	stmdaeq	r0, {r2, r4, r5, r6, sl, lr}
    4344:	0000008c 	andeq	r0, r0, ip, lsl #1
    4348:	08419c01 	stmdaeq	r1, {r0, sl, fp, ip, pc}^
    434c:	91160000 	tstls	r6, r0
    4350:	01000015 	tsteq	r0, r5, lsl r0
    4354:	00c40219 	sbceq	r0, r4, r9, lsl r2
    4358:	17df0000 	ldrbne	r0, [pc, r0]
    435c:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    4360:	01000016 	tsteq	r0, r6, lsl r0
    4364:	0203021b 	andeq	r0, r3, #-1342177279	; 0xb0000001
    4368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    436c:	80230000 	eorhi	r0, r3, r0
    4370:	18080044 	stmdane	r8, {r2, r6}
    4374:	1a000004 	bne	438c <__Stack_Size+0x3f8c>
    4378:	24000008 	strcs	r0, [r0], #-8
    437c:	0a035001 	beq	d8388 <__Stack_Size+0xd7f88>
    4380:	23000fff 	movwcs	r0, #4095	; 0xfff
    4384:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
    4388:	00000418 	andeq	r0, r0, r8, lsl r4
    438c:	0000082f 	andeq	r0, r0, pc, lsr #16
    4390:	03500124 	cmpeq	r0, #36, 2
    4394:	000fff0a 	andeq	pc, pc, sl, lsl #30
    4398:	0044d225 	subeq	sp, r4, r5, lsr #4
    439c:	00041808 	andeq	r1, r4, r8, lsl #16
    43a0:	50012400 	andpl	r2, r1, r0, lsl #8
    43a4:	0fff0a03 	svceq	0x00ff0a03
    43a8:	d9260000 	stmdble	r6!, {}	; <UNPREDICTABLE>
    43ac:	01000015 	tsteq	r0, r5, lsl r0
    43b0:	0203026a 	andeq	r0, r3, #-1610612730	; 0xa0000006
    43b4:	45000000 	strmi	r0, [r0, #-0]
    43b8:	00540800 	subseq	r0, r4, r0, lsl #16
    43bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    43c0:	0015f416 	andseq	pc, r5, r6, lsl r4	; <UNPREDICTABLE>
    43c4:	026a0100 	rsbeq	r0, sl, #0, 2
    43c8:	0000004c 	andeq	r0, r0, ip, asr #32
    43cc:	00001835 	andeq	r1, r0, r5, lsr r8
    43d0:	0014df16 	andseq	sp, r4, r6, lsl pc
    43d4:	026a0100 	rsbeq	r0, sl, #0, 2
    43d8:	0000004c 	andeq	r0, r0, ip, asr #32
    43dc:	00001856 	andeq	r1, r0, r6, asr r8
    43e0:	0016fe16 	andseq	pc, r6, r6, lsl lr	; <UNPREDICTABLE>
    43e4:	026a0100 	rsbeq	r0, sl, #0, 2
    43e8:	0000004c 	andeq	r0, r0, ip, asr #32
    43ec:	00001877 	andeq	r1, r0, r7, ror r8
    43f0:	00161914 	andseq	r1, r6, r4, lsl r9
    43f4:	026c0100 	rsbeq	r0, ip, #0, 2
    43f8:	00000203 	andeq	r0, r0, r3, lsl #4
    43fc:	00001898 	muleq	r0, r8, r8
    4400:	00451a23 	subeq	r1, r5, r3, lsr #20
    4404:	00041808 	andeq	r1, r4, r8, lsl #16
    4408:	0008aa00 	andeq	sl, r8, r0, lsl #20
    440c:	50012400 	andpl	r2, r1, r0, lsl #8
    4410:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    4414:	08004538 	stmdaeq	r0, {r3, r4, r5, r8, sl, lr}
    4418:	00000418 	andeq	r0, r0, r8, lsl r4
    441c:	01500124 	cmpeq	r0, r4, lsr #2
    4420:	0000003f 	andeq	r0, r0, pc, lsr r0
    4424:	00000743 	andeq	r0, r0, r3, asr #14
    4428:	0a190004 	beq	644440 <__Stack_Size+0x644040>
    442c:	01040000 	mrseq	r0, (UNDEF: 4)
    4430:	000007e1 	andeq	r0, r0, r1, ror #15
    4434:	0018a801 	andseq	sl, r8, r1, lsl #16
    4438:	00010100 	andeq	r0, r1, r0, lsl #2
    443c:	00455400 	subeq	r5, r5, r0, lsl #8
    4440:	00025608 	andeq	r5, r2, r8, lsl #12
    4444:	00092a00 	andeq	r2, r9, r0, lsl #20
    4448:	05040200 	streq	r0, [r4, #-512]	; 0x200
    444c:	0000093c 	andeq	r0, r0, ip, lsr r9
    4450:	00050202 	andeq	r0, r5, r2, lsl #4
    4454:	02000009 	andeq	r0, r0, #9
    4458:	0a9d0601 	beq	fe745c64 <SCS_BASE+0x1e737c64>
    445c:	75030000 	strvc	r0, [r3, #-0]
    4460:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    4464:	00004527 	andeq	r4, r0, r7, lsr #10
    4468:	07040200 	streq	r0, [r4, -r0, lsl #4]
    446c:	00000a62 	andeq	r0, r0, r2, ror #20
    4470:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    4474:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    4478:	02000000 	andeq	r0, r0, #0
    447c:	0c540702 	mrrceq	7, 0, r0, r4, cr2
    4480:	75030000 	strvc	r0, [r3, #-0]
    4484:	29020038 	stmdbcs	r2, {r3, r4, r5}
    4488:	00000068 	andeq	r0, r0, r8, rrx
    448c:	9b080102 	blls	20489c <__Stack_Size+0x20449c>
    4490:	0400000a 	streq	r0, [r0], #-10
    4494:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    4498:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    449c:	45050000 	strmi	r0, [r5, #-0]
    44a0:	06000000 	streq	r0, [r0], -r0
    44a4:	943b0201 	ldrtls	r0, [fp], #-513	; 0x201
    44a8:	07000000 	streq	r0, [r0, -r0]
    44ac:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    44b0:	0a3b0700 	beq	ec60b8 <__Stack_Size+0xec5cb8>
    44b4:	00010000 	andeq	r0, r1, r0
    44b8:	00011b04 	andeq	r1, r1, r4, lsl #22
    44bc:	7f3b0200 	svcvc	0x003b0200
    44c0:	02000000 	andeq	r0, r0, #0
    44c4:	0a590704 	beq	16460dc <__Stack_Size+0x1645cdc>
    44c8:	1c080000 	stcne	0, cr0, [r8], {-0}
    44cc:	0b014e03 	bleq	57ce0 <__Stack_Size+0x578e0>
    44d0:	09000001 	stmdbeq	r0, {r0}
    44d4:	004c5243 	subeq	r5, ip, r3, asr #4
    44d8:	6f015003 	svcvs	0x00015003
    44dc:	00000000 	andeq	r0, r0, r0
    44e0:	48524309 	ldmdami	r2, {r0, r3, r8, r9, lr}^
    44e4:	01510300 	cmpeq	r1, r0, lsl #6
    44e8:	0000006f 	andeq	r0, r0, pc, rrx
    44ec:	44490904 	strbmi	r0, [r9], #-2308	; 0x904
    44f0:	52030052 	andpl	r0, r3, #82	; 0x52
    44f4:	00006f01 	andeq	r6, r0, r1, lsl #30
    44f8:	4f090800 	svcmi	0x00090800
    44fc:	03005244 	movweq	r5, #580	; 0x244
    4500:	006f0153 	rsbeq	r0, pc, r3, asr r1	; <UNPREDICTABLE>
    4504:	0a0c0000 	beq	30450c <__Stack_Size+0x30410c>
    4508:	00000076 	andeq	r0, r0, r6, ror r0
    450c:	6f015403 	svcvs	0x00015403
    4510:	10000000 	andne	r0, r0, r0
    4514:	52524209 	subspl	r4, r2, #-1879048192	; 0x90000000
    4518:	01550300 	cmpeq	r5, r0, lsl #6
    451c:	0000006f 	andeq	r0, r0, pc, rrx
    4520:	0d290a14 	vstmdbeq	r9!, {s0-s19}
    4524:	56030000 	strpl	r0, [r3], -r0
    4528:	00006f01 	andeq	r6, r0, r1, lsl #30
    452c:	0b001800 	bleq	a534 <__Stack_Size+0xa134>
    4530:	000009e4 	andeq	r0, r0, r4, ror #19
    4534:	a6015703 	strge	r5, [r1], -r3, lsl #14
    4538:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    453c:	01590318 	cmpeq	r9, r8, lsl r3
    4540:	00000148 	andeq	r0, r0, r8, asr #2
    4544:	0019f70a 	andseq	pc, r9, sl, lsl #14
    4548:	015b0300 	cmpeq	fp, r0, lsl #6
    454c:	0000006f 	andeq	r0, r0, pc, rrx
    4550:	19dc0a00 	ldmibne	ip, {r9, fp}^
    4554:	5c030000 	stcpl	0, cr0, [r3], {-0}
    4558:	00006f01 	andeq	r6, r0, r1, lsl #30
    455c:	a10a0400 	tstge	sl, r0, lsl #8
    4560:	03000018 	movweq	r0, #24
    4564:	0158015d 	cmpeq	r8, sp, asr r1
    4568:	00080000 	andeq	r0, r8, r0
    456c:	00006f0c 	andeq	r6, r0, ip, lsl #30
    4570:	00015800 	andeq	r5, r1, r0, lsl #16
    4574:	009f0d00 	addseq	r0, pc, r0, lsl #26
    4578:	00030000 	andeq	r0, r3, r0
    457c:	00014805 	andeq	r4, r1, r5, lsl #16
    4580:	19c50b00 	stmibne	r5, {r8, r9, fp}^
    4584:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    4588:	00011701 	andeq	r1, r1, r1, lsl #14
    458c:	04010600 	streq	r0, [r1], #-1536	; 0x600
    4590:	00018423 	andeq	r8, r1, r3, lsr #8
    4594:	036f0700 	cmneq	pc, #0, 14
    4598:	07010000 	streq	r0, [r1, -r0]
    459c:	00000255 	andeq	r0, r0, r5, asr r2
    45a0:	0ac40702 	beq	ff1061b0 <SCS_BASE+0x1f0f81b0>
    45a4:	00030000 	andeq	r0, r3, r0
    45a8:	00088f04 	andeq	r8, r8, r4, lsl #30
    45ac:	69270400 	stmdbvs	r7!, {sl}
    45b0:	06000001 	streq	r0, [r0], -r1
    45b4:	c92e0401 	stmdbgt	lr!, {r0, sl}
    45b8:	07000001 	streq	r0, [r0, -r1]
    45bc:	000008ac 	andeq	r0, r0, ip, lsr #17
    45c0:	0ccf0700 	stcleq	7, cr0, [pc], {0}
    45c4:	07040000 	streq	r0, [r4, -r0]
    45c8:	00000432 	andeq	r0, r0, r2, lsr r4
    45cc:	04540728 	ldrbeq	r0, [r4], #-1832	; 0x728
    45d0:	00c80000 	sbceq	r0, r8, r0
    45d4:	00048807 	andeq	r8, r4, r7, lsl #16
    45d8:	00071400 	andeq	r1, r7, r0, lsl #8
    45dc:	10000000 	andne	r0, r0, r0
    45e0:	00079307 	andeq	r9, r7, r7, lsl #6
    45e4:	2c071c00 	stccs	12, cr1, [r7], {-0}
    45e8:	18000009 	stmdane	r0, {r0, r3}
    45ec:	0a000400 	beq	55f4 <__Stack_Size+0x51f4>
    45f0:	36040000 	strcc	r0, [r4], -r0
    45f4:	0000018f 	andeq	r0, r0, pc, lsl #3
    45f8:	3e04040e 	cdpcc	4, 0, cr0, cr4, cr14, {0}
    45fc:	00000201 	andeq	r0, r0, r1, lsl #4
    4600:	0000dd0f 	andeq	sp, r0, pc, lsl #26
    4604:	4c400400 	cfstrdmi	mvd0, [r0], {-0}
    4608:	00000000 	andeq	r0, r0, r0
    460c:	00094a0f 	andeq	r4, r9, pc, lsl #20
    4610:	84410400 	strbhi	r0, [r1], #-1024	; 0x400
    4614:	02000001 	andeq	r0, r0, #1
    4618:	0000c40f 	andeq	ip, r0, pc, lsl #8
    461c:	c9420400 	stmdbgt	r2, {sl}^
    4620:	03000001 	movweq	r0, #1
    4624:	0a8a0400 	beq	fe28562c <SCS_BASE+0x1e27762c>
    4628:	43040000 	movwmi	r0, #16384	; 0x4000
    462c:	000001d4 	ldrdeq	r0, [r0], -r4
    4630:	47040106 	strmi	r0, [r4, -r6, lsl #2]
    4634:	00000221 	andeq	r0, r0, r1, lsr #4
    4638:	00188907 	andseq	r8, r8, r7, lsl #18
    463c:	52070000 	andpl	r0, r7, #0
    4640:	01000018 	tsteq	r0, r8, lsl r0
    4644:	19d20400 	ldmibne	r2, {sl}^
    4648:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    464c:	0000020c 	andeq	r0, r0, ip, lsl #4
    4650:	0018e310 	andseq	lr, r8, r0, lsl r3
    4654:	54330100 	ldrtpl	r0, [r3], #-256	; 0x100
    4658:	a4080045 	strge	r0, [r8], #-69	; 0x45
    465c:	01000000 	mrseq	r0, (UNDEF: 0)
    4660:	00030d9c 	muleq	r3, ip, sp
    4664:	19e11100 	stmibne	r1!, {r8, ip}^
    4668:	33010000 	movwcc	r0, #4096	; 0x1000
    466c:	0000030d 	andeq	r0, r0, sp, lsl #6
    4670:	000018c2 	andeq	r1, r0, r2, asr #17
    4674:	00457e12 	subeq	r7, r5, r2, lsl lr
    4678:	00073308 	andeq	r3, r7, r8, lsl #6
    467c:	00026800 	andeq	r6, r2, r0, lsl #16
    4680:	51011300 	mrspl	r1, SP_irq
    4684:	01133101 	tsteq	r3, r1, lsl #2
    4688:	00340150 	eorseq	r0, r4, r0, asr r1
    468c:	0045a012 	subeq	sl, r5, r2, lsl r0
    4690:	00073308 	andeq	r3, r7, r8, lsl #6
    4694:	00028100 	andeq	r8, r2, r0, lsl #2
    4698:	51011300 	mrspl	r1, SP_irq
    469c:	01133101 	tsteq	r3, r1, lsl #2
    46a0:	40080250 	andmi	r0, r8, r0, asr r2
    46a4:	45ac1200 	strmi	r1, [ip, #512]!	; 0x200
    46a8:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    46ac:	02990000 	addseq	r0, r9, #0
    46b0:	01130000 	tsteq	r3, r0
    46b4:	13310151 	teqne	r1, #1073741844	; 0x40000014
    46b8:	38015001 	stmdacc	r1, {r0, ip, lr}
    46bc:	45b81200 	ldrmi	r1, [r8, #512]!	; 0x200
    46c0:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    46c4:	02b10000 	adcseq	r0, r1, #0
    46c8:	01130000 	tsteq	r3, r0
    46cc:	13310151 	teqne	r1, #1073741844	; 0x40000014
    46d0:	40015001 	andmi	r5, r1, r1
    46d4:	45c41200 	strbmi	r1, [r4, #512]	; 0x200
    46d8:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    46dc:	02ca0000 	sbceq	r0, sl, #0
    46e0:	01130000 	tsteq	r3, r0
    46e4:	13310151 	teqne	r1, #1073741844	; 0x40000014
    46e8:	08025001 	stmdaeq	r2, {r0, ip, lr}
    46ec:	d0120020 	andsle	r0, r2, r0, lsr #32
    46f0:	33080045 	movwcc	r0, #32837	; 0x8045
    46f4:	e3000007 	movw	r0, #7
    46f8:	13000002 	movwne	r0, #2
    46fc:	31015101 	tstcc	r1, r1, lsl #2
    4700:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    4704:	12008008 	andne	r8, r0, #8
    4708:	080045de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, lr}
    470c:	00000733 	andeq	r0, r0, r3, lsr r7
    4710:	000002fd 	strdeq	r0, [r0], -sp
    4714:	01510113 	cmpeq	r1, r3, lsl r1
    4718:	50011331 	andpl	r1, r1, r1, lsr r3
    471c:	01000a03 	tsteq	r0, r3, lsl #20
    4720:	45ec1400 	strbmi	r1, [ip, #1024]!	; 0x400
    4724:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    4728:	01130000 	tsteq	r3, r0
    472c:	00300151 	eorseq	r0, r0, r1, asr r1
    4730:	0b041500 	bleq	109b38 <__Stack_Size+0x109738>
    4734:	10000001 	andne	r0, r0, r1
    4738:	00001a13 	andeq	r1, r0, r3, lsl sl
    473c:	45f86b01 	ldrbmi	r6, [r8, #2817]!	; 0xb01
    4740:	00160800 	andseq	r0, r6, r0, lsl #16
    4744:	9c010000 	stcls	0, cr0, [r1], {-0}
    4748:	00000355 	andeq	r0, r0, r5, asr r3
    474c:	00460212 	subeq	r0, r6, r2, lsl r2
    4750:	00073308 	andeq	r3, r7, r8, lsl #6
    4754:	00034000 	andeq	r4, r3, r0
    4758:	51011300 	mrspl	r1, SP_irq
    475c:	01133101 	tsteq	r3, r1, lsl #2
    4760:	00310150 	eorseq	r0, r1, r0, asr r1
    4764:	00460e14 	subeq	r0, r6, r4, lsl lr
    4768:	00073308 	andeq	r3, r7, r8, lsl #6
    476c:	51011300 	mrspl	r1, SP_irq
    4770:	01133001 	tsteq	r3, r1
    4774:	00310150 	eorseq	r0, r1, r0, asr r1
    4778:	02221000 	eoreq	r1, r2, #0
    477c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4780:	0800460e 	stmdaeq	r0, {r1, r2, r3, r9, sl, lr}
    4784:	0000009c 	muleq	r0, ip, r0
    4788:	03e19c01 	mvneq	r9, #256	; 0x100
    478c:	e1160000 	tst	r6, r0
    4790:	01000019 	tsteq	r0, r9, lsl r0
    4794:	00030d7c 	andeq	r0, r3, ip, ror sp
    4798:	11500100 	cmpne	r0, r0, lsl #2
    479c:	000019e7 	andeq	r1, r0, r7, ror #19
    47a0:	03e17c01 	mvneq	r7, #256	; 0x100
    47a4:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
    47a8:	36170000 	ldrcc	r0, [r7], -r0
    47ac:	01000019 	tsteq	r0, r9, lsl r0
    47b0:	00003a7e 	andeq	r3, r0, lr, ror sl
    47b4:	0019a500 	andseq	sl, r9, r0, lsl #10
    47b8:	19961700 	ldmibne	r6, {r8, r9, sl, ip}
    47bc:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    47c0:	0000003a 	andeq	r0, r0, sl, lsr r0
    47c4:	000019d4 	ldrdeq	r1, [r0], -r4
    47c8:	00184b17 	andseq	r4, r8, r7, lsl fp
    47cc:	3a7e0100 	bcc	1f84bd4 <__Stack_Size+0x1f847d4>
    47d0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    47d4:	18000019 	stmdane	r0, {r0, r3, r4}
    47d8:	00736f70 	rsbseq	r6, r3, r0, ror pc
    47dc:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    47e0:	1a340000 	bne	d047e8 <__Stack_Size+0xd043e8>
    47e4:	27170000 	ldrcs	r0, [r7, -r0]
    47e8:	01000019 	tsteq	r0, r9, lsl r0
    47ec:	00003a7f 	andeq	r3, r0, pc, ror sl
    47f0:	001a9200 	andseq	r9, sl, r0, lsl #4
    47f4:	18cb1700 	stmiane	fp, {r8, r9, sl, ip}^
    47f8:	7f010000 	svcvc	0x00010000
    47fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    4800:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
    4804:	01041500 	tsteq	r4, r0, lsl #10
    4808:	10000002 	andne	r0, r0, r2
    480c:	00000047 	andeq	r0, r0, r7, asr #32
    4810:	46aae501 	strtmi	lr, [sl], r1, lsl #10
    4814:	00100800 	andseq	r0, r0, r0, lsl #16
    4818:	9c010000 	stcls	0, cr0, [r1], {-0}
    481c:	0000040a 	andeq	r0, r0, sl, lsl #8
    4820:	0019e716 	andseq	lr, r9, r6, lsl r7
    4824:	e1e50100 	mvn	r0, r0, lsl #2
    4828:	01000003 	tsteq	r0, r3
    482c:	11190050 	tstne	r9, r0, asr r0
    4830:	01000019 	tsteq	r0, r9, lsl r0
    4834:	00005ef6 	strdeq	r5, [r0], -r6
    4838:	0046ba00 	subeq	fp, r6, r0, lsl #20
    483c:	00000c08 	andeq	r0, r0, r8, lsl #24
    4840:	4f9c0100 	svcmi	0x009c0100
    4844:	11000004 	tstne	r0, r4
    4848:	000019e1 	andeq	r1, r0, r1, ror #19
    484c:	030df601 	movweq	pc, #54785	; 0xd601	; <UNPREDICTABLE>
    4850:	1b220000 	blne	884858 <__Stack_Size+0x884458>
    4854:	dd160000 	ldcle	0, cr0, [r6, #-0]
    4858:	01000000 	mrseq	r0, (UNDEF: 0)
    485c:	00004cf6 	strdeq	r4, [r0], -r6
    4860:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    4864:	00001620 	andeq	r1, r0, r0, lsr #12
    4868:	005ef801 	subseq	pc, lr, r1, lsl #16
    486c:	1b430000 	blne	10c4874 <__Stack_Size+0x10c4474>
    4870:	1a000000 	bne	4878 <__Stack_Size+0x4478>
    4874:	00001968 	andeq	r1, r0, r8, ror #18
    4878:	4c011001 	stcmi	0, cr1, [r1], {1}
    487c:	c6000000 	strgt	r0, [r0], -r0
    4880:	06080046 	streq	r0, [r8], -r6, asr #32
    4884:	01000000 	mrseq	r0, (UNDEF: 0)
    4888:	00047a9c 	muleq	r4, ip, sl
    488c:	19e11b00 	stmibne	r1!, {r8, r9, fp, ip}^
    4890:	10010000 	andne	r0, r1, r0
    4894:	00030d01 	andeq	r0, r3, r1, lsl #26
    4898:	001b6d00 	andseq	r6, fp, r0, lsl #26
    489c:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
    48a0:	01000019 	tsteq	r0, r9, lsl r0
    48a4:	005e0121 	subseq	r0, lr, r1, lsr #2
    48a8:	46cc0000 	strbmi	r0, [ip], r0
    48ac:	000c0800 	andeq	r0, ip, r0, lsl #16
    48b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    48b4:	000004c3 	andeq	r0, r0, r3, asr #9
    48b8:	0019e11b 	andseq	lr, r9, fp, lsl r1
    48bc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    48c0:	0000030d 	andeq	r0, r0, sp, lsl #6
    48c4:	00001b8e 	andeq	r1, r0, lr, lsl #23
    48c8:	0000dd1c 	andeq	sp, r0, ip, lsl sp
    48cc:	01210100 			; <UNDEFINED> instruction: 0x01210100
    48d0:	0000004c 	andeq	r0, r0, ip, asr #32
    48d4:	201d5101 	andscs	r5, sp, r1, lsl #2
    48d8:	01000016 	tsteq	r0, r6, lsl r0
    48dc:	005e0123 	subseq	r0, lr, r3, lsr #2
    48e0:	1baf0000 	blne	febc48e8 <SCS_BASE+0x1ebb68e8>
    48e4:	1a000000 	bne	48ec <__Stack_Size+0x44ec>
    48e8:	0000185a 	andeq	r1, r0, sl, asr r8
    48ec:	4c013b01 	stcmi	11, cr3, [r1], {1}
    48f0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    48f4:	06080046 	streq	r0, [r8], -r6, asr #32
    48f8:	01000000 	mrseq	r0, (UNDEF: 0)
    48fc:	0004ee9c 	muleq	r4, ip, lr
    4900:	19e11b00 	stmibne	r1!, {r8, r9, fp, ip}^
    4904:	3b010000 	blcc	4490c <__Stack_Size+0x4450c>
    4908:	00030d01 	andeq	r0, r3, r1, lsl #26
    490c:	001bd900 	andseq	sp, fp, r0, lsl #18
    4910:	bb1e0000 	bllt	784918 <__Stack_Size+0x784518>
    4914:	01000003 	tsteq	r0, r3
    4918:	46de014d 	ldrbmi	r0, [lr], sp, asr #2
    491c:	00040800 	andeq	r0, r4, r0, lsl #16
    4920:	9c010000 	stcls	0, cr0, [r1], {-0}
    4924:	00000521 	andeq	r0, r0, r1, lsr #10
    4928:	0019e11c 	andseq	lr, r9, ip, lsl r1
    492c:	014d0100 	mrseq	r0, (UNDEF: 93)
    4930:	0000030d 	andeq	r0, r0, sp, lsl #6
    4934:	dd1c5001 	ldcle	0, cr5, [ip, #-4]
    4938:	01000000 	mrseq	r0, (UNDEF: 0)
    493c:	004c014d 	subeq	r0, ip, sp, asr #2
    4940:	51010000 	mrspl	r0, (UNDEF: 1)
    4944:	07b71e00 	ldreq	r1, [r7, r0, lsl #28]!
    4948:	60010000 	andvs	r0, r1, r0
    494c:	0046e201 	subeq	lr, r6, r1, lsl #4
    4950:	00000408 	andeq	r0, r0, r8, lsl #8
    4954:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    4958:	1c000005 	stcne	0, cr0, [r0], {5}
    495c:	000019e1 	andeq	r1, r0, r1, ror #19
    4960:	0d016001 	stceq	0, cr6, [r1, #-4]
    4964:	01000003 	tsteq	r0, r3
    4968:	00dd1c50 	sbcseq	r1, sp, r0, asr ip
    496c:	60010000 	andvs	r0, r1, r0
    4970:	00004c01 	andeq	r4, r0, r1, lsl #24
    4974:	00510100 	subseq	r0, r1, r0, lsl #2
    4978:	0018931e 	andseq	r9, r8, lr, lsl r3
    497c:	01760100 	cmneq	r6, r0, lsl #2
    4980:	080046e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, lr}
    4984:	0000000a 	andeq	r0, r0, sl
    4988:	05959c01 	ldreq	r9, [r5, #3073]	; 0xc01
    498c:	e11c0000 	tst	ip, r0
    4990:	01000019 	tsteq	r0, r9, lsl r0
    4994:	030d0176 	movweq	r0, #53622	; 0xd176
    4998:	50010000 	andpl	r0, r1, r0
    499c:	0000dd1c 	andeq	sp, r0, ip, lsl sp
    49a0:	01760100 	cmneq	r6, r0, lsl #2
    49a4:	0000004c 	andeq	r0, r0, ip, asr #32
    49a8:	821c5101 	andshi	r5, ip, #1073741824	; 0x40000000
    49ac:	01000018 	tsteq	r0, r8, lsl r0
    49b0:	02210176 	eoreq	r0, r1, #-2147483619	; 0x8000001d
    49b4:	52010000 	andpl	r0, r1, #0
    49b8:	19a11e00 	stmibne	r1!, {r9, sl, fp, ip}
    49bc:	90010000 	andls	r0, r1, r0
    49c0:	0046f001 	subeq	pc, r6, r1
    49c4:	00000408 	andeq	r0, r0, r8, lsl #8
    49c8:	c89c0100 	ldmgt	ip, {r8}
    49cc:	1c000005 	stcne	0, cr0, [r0], {5}
    49d0:	000019e1 	andeq	r1, r0, r1, ror #19
    49d4:	0d019001 	stceq	0, cr9, [r1, #-4]
    49d8:	01000003 	tsteq	r0, r3
    49dc:	192e1c50 	stmdbne	lr!, {r4, r6, sl, fp, ip}
    49e0:	90010000 	andls	r0, r1, r0
    49e4:	00004c01 	andeq	r4, r0, r1, lsl #24
    49e8:	00510100 	subseq	r0, r1, r0, lsl #2
    49ec:	0019831e 	andseq	r8, r9, lr, lsl r3
    49f0:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    49f4:	080046f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, lr}
    49f8:	00000010 	andeq	r0, r0, r0, lsl r0
    49fc:	060b9c01 	streq	r9, [fp], -r1, lsl #24
    4a00:	e11c0000 	tst	ip, r0
    4a04:	01000019 	tsteq	r0, r9, lsl r0
    4a08:	030d01a2 	movweq	r0, #53666	; 0xd1a2
    4a0c:	50010000 	andpl	r0, r1, r0
    4a10:	0000dd1c 	andeq	sp, r0, ip, lsl sp
    4a14:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    4a18:	0000004c 	andeq	r0, r0, ip, asr #32
    4a1c:	741f5101 	ldrvc	r5, [pc], #-257	; 4a24 <__Stack_Size+0x4624>
    4a20:	0100706d 	tsteq	r0, sp, rrx
    4a24:	003a01a4 	eorseq	r0, sl, r4, lsr #3
    4a28:	1bfa0000 	blne	ffe84a30 <SCS_BASE+0x1fe76a30>
    4a2c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4a30:	000018ef 	andeq	r1, r0, pc, ror #17
    4a34:	0401c301 	streq	ip, [r1], #-769	; 0x301
    4a38:	1c080047 	stcne	0, cr0, [r8], {71}	; 0x47
    4a3c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a40:	0006529c 	muleq	r6, ip, r2
    4a44:	18d31b00 	ldmne	r3, {r8, r9, fp, ip}^
    4a48:	c3010000 	movwgt	r0, #4096	; 0x1000
    4a4c:	00005e01 	andeq	r5, r0, r1, lsl #28
    4a50:	001c1b00 	andseq	r1, ip, r0, lsl #22
    4a54:	19421b00 	stmdbne	r2, {r8, r9, fp, ip}^
    4a58:	c3010000 	movwgt	r0, #4096	; 0x1000
    4a5c:	00005e01 	andeq	r5, r0, r1, lsl #28
    4a60:	001c3c00 	andseq	r3, ip, r0, lsl #24
    4a64:	19271d00 	stmdbne	r7!, {r8, sl, fp, ip}
    4a68:	c5010000 	strgt	r0, [r1, #-0]
    4a6c:	00003a01 	andeq	r3, r0, r1, lsl #20
    4a70:	001c5d00 	andseq	r5, ip, r0, lsl #26
    4a74:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    4a78:	01000018 	tsteq	r0, r8, lsl r0
    4a7c:	472001dc 			; <UNDEFINED> instruction: 0x472001dc
    4a80:	000c0800 	andeq	r0, ip, r0, lsl #16
    4a84:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a88:	00000677 	andeq	r0, r0, r7, ror r6
    4a8c:	0015911c 	andseq	r9, r5, ip, lsl r1
    4a90:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    4a94:	00000094 	muleq	r0, r4, r0
    4a98:	1e005001 	cdpne	0, 0, cr5, cr0, cr1, {0}
    4a9c:	000003dd 	ldrdeq	r0, [r0], -sp
    4aa0:	2c020701 	stccs	7, cr0, [r2], {1}
    4aa4:	54080047 	strpl	r0, [r8], #-71	; 0x47
    4aa8:	01000000 	mrseq	r0, (UNDEF: 0)
    4aac:	0006ec9c 	muleq	r6, ip, ip
    4ab0:	19061b00 	stmdbne	r6, {r8, r9, fp, ip}
    4ab4:	07010000 	streq	r0, [r1, -r0]
    4ab8:	00003a02 	andeq	r3, r0, r2, lsl #20
    4abc:	001c9500 	andseq	r9, ip, r0, lsl #10
    4ac0:	15911c00 	ldrne	r1, [r1, #3072]	; 0xc00
    4ac4:	07010000 	streq	r0, [r1, -r0]
    4ac8:	00009402 	andeq	r9, r0, r2, lsl #8
    4acc:	1f510100 	svcne	0x00510100
    4ad0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4ad4:	3a020901 	bcc	86ee0 <__Stack_Size+0x86ae0>
    4ad8:	b6000000 	strlt	r0, [r0], -r0
    4adc:	1d00001c 	stcne	0, cr0, [r0, #-112]	; 0xffffff90
    4ae0:	000019ac 	andeq	r1, r0, ip, lsr #19
    4ae4:	3a020901 	bcc	86ef0 <__Stack_Size+0x86af0>
    4ae8:	e7000000 	str	r0, [r0, -r0]
    4aec:	1d00001c 	stcne	0, cr0, [r0, #-112]	; 0xffffff90
    4af0:	00001927 	andeq	r1, r0, r7, lsr #18
    4af4:	3a020901 	bcc	86f00 <__Stack_Size+0x86b00>
    4af8:	10000000 	andne	r0, r0, r0
    4afc:	1d00001d 	stcne	0, cr0, [r0, #-116]	; 0xffffff8c
    4b00:	0000197b 	andeq	r1, r0, fp, ror r9
    4b04:	3a020901 	bcc	86f10 <__Stack_Size+0x86b10>
    4b08:	2f000000 	svccs	0x00000000
    4b0c:	0000001d 	andeq	r0, r0, sp, lsl r0
    4b10:	0019b11e 	andseq	fp, r9, lr, lsl r1
    4b14:	02390100 	eorseq	r0, r9, #0, 2
    4b18:	08004780 	stmdaeq	r0, {r7, r8, r9, sl, lr}
    4b1c:	0000002a 	andeq	r0, r0, sl, lsr #32
    4b20:	07339c01 	ldreq	r9, [r3, -r1, lsl #24]!
    4b24:	d31b0000 	tstle	fp, #0
    4b28:	01000018 	tsteq	r0, r8, lsl r0
    4b2c:	005e0239 	subseq	r0, lr, r9, lsr r2
    4b30:	1d6a0000 	stclne	0, cr0, [sl, #-0]
    4b34:	421b0000 	andsmi	r0, fp, #0
    4b38:	01000019 	tsteq	r0, r9, lsl r0
    4b3c:	005e0239 	subseq	r0, lr, r9, lsr r2
    4b40:	1d8b0000 	stcne	0, cr0, [fp]
    4b44:	741f0000 	ldrvc	r0, [pc], #-0	; 4b4c <__Stack_Size+0x474c>
    4b48:	0100706d 	tsteq	r0, sp, rrx
    4b4c:	003a023b 	eorseq	r0, sl, fp, lsr r2
    4b50:	1dac0000 	stcne	0, cr0, [ip]
    4b54:	20000000 	andcs	r0, r0, r0
    4b58:	00001951 	andeq	r1, r0, r1, asr r9
    4b5c:	21011405 	tstcs	r1, r5, lsl #8
    4b60:	0000003a 	andeq	r0, r0, sl, lsr r0
    4b64:	00009421 	andeq	r9, r0, r1, lsr #8
    4b68:	64000000 	strvs	r0, [r0], #-0
    4b6c:	04000009 	streq	r0, [r0], #-9
    4b70:	000c0100 	andeq	r0, ip, r0, lsl #2
    4b74:	e1010400 	tst	r1, r0, lsl #8
    4b78:	01000007 	tsteq	r0, r7
    4b7c:	00001b23 	andeq	r1, r0, r3, lsr #22
    4b80:	00000101 	andeq	r0, r0, r1, lsl #2
    4b84:	080047ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, lr}
    4b88:	00000314 	andeq	r0, r0, r4, lsl r3
    4b8c:	00000aac 	andeq	r0, r0, ip, lsr #21
    4b90:	3c050402 	cfstrscc	mvf0, [r5], {2}
    4b94:	02000009 	andeq	r0, r0, #9
    4b98:	09000502 	stmdbeq	r0, {r1, r8, sl}
    4b9c:	01020000 	mrseq	r0, (UNDEF: 2)
    4ba0:	000a9d06 	andeq	r9, sl, r6, lsl #26
    4ba4:	33750300 	cmncc	r5, #0, 6
    4ba8:	27020032 	smladxcs	r2, r2, r0, r0
    4bac:	00000045 	andeq	r0, r0, r5, asr #32
    4bb0:	62070402 	andvs	r0, r7, #33554432	; 0x2000000
    4bb4:	0300000a 	movweq	r0, #10
    4bb8:	00363175 	eorseq	r3, r6, r5, ror r1
    4bbc:	00572802 	subseq	r2, r7, r2, lsl #16
    4bc0:	02020000 	andeq	r0, r2, #0
    4bc4:	000c5407 	andeq	r5, ip, r7, lsl #8
    4bc8:	38750300 	ldmdacc	r5!, {r8, r9}^
    4bcc:	68290200 	stmdavs	r9!, {r9}
    4bd0:	02000000 	andeq	r0, r0, #0
    4bd4:	0a9b0801 	beq	fe6c6be0 <SCS_BASE+0x1e6b8be0>
    4bd8:	b0040000 	andlt	r0, r4, r0
    4bdc:	02000004 	andeq	r0, r0, #4
    4be0:	00007a2f 	andeq	r7, r0, pc, lsr #20
    4be4:	00450500 	subeq	r0, r5, r0, lsl #10
    4be8:	bb040000 	bllt	104bf0 <__Stack_Size+0x1047f0>
    4bec:	0200001d 	andeq	r0, r0, #29
    4bf0:	00008a33 	andeq	r8, r0, r3, lsr sl
    4bf4:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    4bf8:	01070000 	mrseq	r0, (UNDEF: 7)
    4bfc:	00a43902 	adceq	r3, r4, r2, lsl #18
    4c00:	8d080000 	stchi	0, cr0, [r8, #-0]
    4c04:	00000018 	andeq	r0, r0, r8, lsl r0
    4c08:	54455309 	strbpl	r5, [r5], #-777	; 0x309
    4c0c:	04000100 	streq	r0, [r0], #-256	; 0x100
    4c10:	00002015 	andeq	r2, r0, r5, lsl r0
    4c14:	008f3902 	addeq	r3, pc, r2, lsl #18
    4c18:	01070000 	mrseq	r0, (UNDEF: 7)
    4c1c:	00c43b02 	sbceq	r3, r4, r2, lsl #22
    4c20:	b5080000 	strlt	r0, [r8, #-0]
    4c24:	00000005 	andeq	r0, r0, r5
    4c28:	000a3b08 	andeq	r3, sl, r8, lsl #22
    4c2c:	04000100 	streq	r0, [r0], #-256	; 0x100
    4c30:	0000011b 	andeq	r0, r0, fp, lsl r1
    4c34:	00af3b02 	adceq	r3, pc, r2, lsl #22
    4c38:	04020000 	streq	r0, [r2], #-0
    4c3c:	000a5907 	andeq	r5, sl, r7, lsl #18
    4c40:	033c0a00 	teqeq	ip, #0, 20
    4c44:	77018103 	strvc	r8, [r1, -r3, lsl #2]
    4c48:	0b000001 	bleq	4c54 <__Stack_Size+0x4854>
    4c4c:	00001d41 	andeq	r1, r0, r1, asr #26
    4c50:	87018303 	strhi	r8, [r1, -r3, lsl #6]
    4c54:	00000001 	andeq	r0, r0, r1
    4c58:	0008ba0b 	andeq	fp, r8, fp, lsl #20
    4c5c:	01840300 	orreq	r0, r4, r0, lsl #6
    4c60:	0000018c 	andeq	r0, r0, ip, lsl #3
    4c64:	1d050b08 	vstrne	d0, [r5, #-32]	; 0xffffffe0
    4c68:	85030000 	strhi	r0, [r3, #-0]
    4c6c:	00019c01 	andeq	r9, r1, r1, lsl #24
    4c70:	9a0b8000 	bls	2e4c78 <__Stack_Size+0x2e4878>
    4c74:	0300001c 	movweq	r0, #28
    4c78:	018c0186 	orreq	r0, ip, r6, lsl #3
    4c7c:	0c880000 	stceq	0, cr0, [r8], {0}
    4c80:	00001d1b 	andeq	r1, r0, fp, lsl sp
    4c84:	a1018703 	tstge	r1, r3, lsl #14
    4c88:	00000001 	andeq	r0, r0, r1
    4c8c:	08ce0c01 	stmiaeq	lr, {r0, sl, fp}^
    4c90:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    4c94:	00018c01 	andeq	r8, r1, r1, lsl #24
    4c98:	0c010800 	stceq	8, cr0, [r1], {-0}
    4c9c:	00001c5d 	andeq	r1, r0, sp, asr ip
    4ca0:	a6018903 	strge	r8, [r1], -r3, lsl #18
    4ca4:	80000001 	andhi	r0, r0, r1
    4ca8:	08d80c01 	ldmeq	r8, {r0, sl, fp}^
    4cac:	8a030000 	bhi	c4cb4 <__Stack_Size+0xc48b4>
    4cb0:	00018c01 	andeq	r8, r1, r1, lsl #24
    4cb4:	0c018800 	stceq	8, cr8, [r1], {-0}
    4cb8:	00001a23 	andeq	r1, r0, r3, lsr #20
    4cbc:	ab018b03 	blge	678d0 <__Stack_Size+0x674d0>
    4cc0:	00000001 	andeq	r0, r0, r1
    4cc4:	08e20c02 	stmiaeq	r2!, {r1, sl, fp}^
    4cc8:	8c030000 	stchi	0, cr0, [r3], {-0}
    4ccc:	0001b001 	andeq	fp, r1, r1
    4cd0:	0d020800 	stceq	8, cr0, [r2, #-0]
    4cd4:	00525049 	subseq	r5, r2, r9, asr #32
    4cd8:	d0018d03 	andle	r8, r1, r3, lsl #26
    4cdc:	00000001 	andeq	r0, r0, r1
    4ce0:	6f0e0003 	svcvs	0x000e0003
    4ce4:	87000000 	strhi	r0, [r0, -r0]
    4ce8:	0f000001 	svceq	0x00000001
    4cec:	000000cf 	andeq	r0, r0, pc, asr #1
    4cf0:	77050001 	strvc	r0, [r5, -r1]
    4cf4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4cf8:	0000003a 	andeq	r0, r0, sl, lsr r0
    4cfc:	0000019c 	muleq	r0, ip, r1
    4d00:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    4d04:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    4d08:	00000177 	andeq	r0, r0, r7, ror r1
    4d0c:	00017705 	andeq	r7, r1, r5, lsl #14
    4d10:	01770500 	cmneq	r7, r0, lsl #10
    4d14:	77050000 	strvc	r0, [r5, -r0]
    4d18:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4d1c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4d20:	000001c0 	andeq	r0, r0, r0, asr #3
    4d24:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    4d28:	0e003d00 	cdpeq	13, 0, cr3, cr0, cr0, {0}
    4d2c:	0000006f 	andeq	r0, r0, pc, rrx
    4d30:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4d34:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    4d38:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    4d3c:	000001c0 	andeq	r0, r0, r0, asr #3
    4d40:	001c7d10 	andseq	r7, ip, r0, lsl sp
    4d44:	018e0300 	orreq	r0, lr, r0, lsl #6
    4d48:	000000d6 	ldrdeq	r0, [r0], -r6
    4d4c:	90034011 	andls	r4, r3, r1, lsl r0
    4d50:	0002a101 	andeq	sl, r2, r1, lsl #2
    4d54:	1b4e0b00 	blne	138795c <__Stack_Size+0x138755c>
    4d58:	92030000 	andls	r0, r3, #0
    4d5c:	00007f01 	andeq	r7, r0, r1, lsl #30
    4d60:	a60b0000 	strge	r0, [fp], -r0
    4d64:	0300001b 	movweq	r0, #27
    4d68:	006f0193 	mlseq	pc, r3, r1, r0	; <UNPREDICTABLE>
    4d6c:	0b040000 	bleq	104d74 <__Stack_Size+0x104974>
    4d70:	00001d16 	andeq	r1, r0, r6, lsl sp
    4d74:	6f019403 	svcvs	0x00019403
    4d78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4d7c:	001c570b 	andseq	r5, ip, fp, lsl #14
    4d80:	01950300 	orrseq	r0, r5, r0, lsl #6
    4d84:	0000006f 	andeq	r0, r0, pc, rrx
    4d88:	4353120c 	cmpmi	r3, #12, 4	; 0xc0000000
    4d8c:	96030052 			; <UNDEFINED> instruction: 0x96030052
    4d90:	00006f01 	andeq	r6, r0, r1, lsl #30
    4d94:	43121000 	tstmi	r2, #0
    4d98:	03005243 	movweq	r5, #579	; 0x243
    4d9c:	006f0197 	mlseq	pc, r7, r1, r0	; <UNPREDICTABLE>
    4da0:	0b140000 	bleq	504da8 <__Stack_Size+0x5049a8>
    4da4:	00001c72 	andeq	r1, r0, r2, ror ip
    4da8:	b1019803 	tstlt	r1, r3, lsl #16
    4dac:	18000002 	stmdane	r0, {r1}
    4db0:	001c770b 	andseq	r7, ip, fp, lsl #14
    4db4:	01990300 	orrseq	r0, r9, r0, lsl #6
    4db8:	0000006f 	andeq	r0, r0, pc, rrx
    4dbc:	1c320b24 	ldcne	11, cr0, [r2], #-144	; 0xffffff70
    4dc0:	9a030000 	bls	c4dc8 <__Stack_Size+0xc49c8>
    4dc4:	00006f01 	andeq	r6, r0, r1, lsl #30
    4dc8:	250b2800 	strcs	r2, [fp, #-2048]	; 0x800
    4dcc:	0300001d 	movweq	r0, #29
    4dd0:	006f019b 	mlseq	pc, fp, r1, r0	; <UNPREDICTABLE>
    4dd4:	0b2c0000 	bleq	b04ddc <__Stack_Size+0xb049dc>
    4dd8:	00001d20 	andeq	r1, r0, r0, lsr #26
    4ddc:	6f019c03 	svcvs	0x00019c03
    4de0:	30000000 	andcc	r0, r0, r0
    4de4:	001cb40b 	andseq	fp, ip, fp, lsl #8
    4de8:	019d0300 	orrseq	r0, sp, r0, lsl #6
    4dec:	0000006f 	andeq	r0, r0, pc, rrx
    4df0:	1c090b34 	stcne	11, cr0, [r9], {52}	; 0x34
    4df4:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    4df8:	00006f01 	andeq	r6, r0, r1, lsl #30
    4dfc:	3c0b3800 	stccc	8, cr3, [fp], {-0}
    4e00:	0300001d 	movweq	r0, #29
    4e04:	006f019f 	mlseq	pc, pc, r1, r0	; <UNPREDICTABLE>
    4e08:	003c0000 	eorseq	r0, ip, r0
    4e0c:	00006f0e 	andeq	r6, r0, lr, lsl #30
    4e10:	0002b100 	andeq	fp, r2, r0, lsl #2
    4e14:	00cf0f00 	sbceq	r0, pc, r0, lsl #30
    4e18:	00020000 	andeq	r0, r2, r0
    4e1c:	0002a105 	andeq	sl, r2, r5, lsl #2
    4e20:	1d621000 	stclne	0, cr1, [r2, #-0]
    4e24:	a0030000 	andge	r0, r3, r0
    4e28:	0001e101 	andeq	lr, r1, r1, lsl #2
    4e2c:	04041300 	streq	r1, [r4], #-768	; 0x300
    4e30:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    4e34:	07411400 	strbeq	r1, [r1, -r0, lsl #8]
    4e38:	1c040000 	stcne	0, cr0, [r4], {-0}
    4e3c:	0000005e 	andeq	r0, r0, lr, asr r0
    4e40:	0c9e1400 	cfldrseq	mvf1, [lr], {0}
    4e44:	1d040000 	stcne	0, cr0, [r4, #-0]
    4e48:	0000005e 	andeq	r0, r0, lr, asr r0
    4e4c:	0bbe1401 	bleq	fef89e58 <SCS_BASE+0x1ef7be58>
    4e50:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    4e54:	0000005e 	andeq	r0, r0, lr, asr r0
    4e58:	04cc1402 	strbeq	r1, [ip], #1026	; 0x402
    4e5c:	1f040000 	svcne	0x00040000
    4e60:	000000c4 	andeq	r0, r0, r4, asr #1
    4e64:	1e040003 	cdpne	0, 0, cr0, cr4, cr3, {0}
    4e68:	04000003 	streq	r0, [r0], #-3
    4e6c:	0002c220 	andeq	ip, r2, r0, lsr #4
    4e70:	1ea01500 	cdpne	5, 10, cr1, cr0, cr0, {0}
    4e74:	24010000 	strcs	r0, [r1], #-0
    4e78:	080047ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, lr}
    4e7c:	00000034 	andeq	r0, r0, r4, lsr r0
    4e80:	032b9c01 			; <UNDEFINED> instruction: 0x032b9c01
    4e84:	96160000 	ldrls	r0, [r6], -r0
    4e88:	01000014 	tsteq	r0, r4, lsl r0
    4e8c:	00003a26 	andeq	r3, r0, r6, lsr #20
    4e90:	001de900 	andseq	lr, sp, r0, lsl #18
    4e94:	11150000 	tstne	r5, r0
    4e98:	0100001e 	tsteq	r0, lr, lsl r0
    4e9c:	0047e03b 	subeq	lr, r7, fp, lsr r0
    4ea0:	00003008 	andeq	r3, r0, r8
    4ea4:	509c0100 	addspl	r0, ip, r0, lsl #2
    4ea8:	16000003 	strne	r0, [r0], -r3
    4eac:	00001496 	muleq	r0, r6, r4
    4eb0:	003a3d01 	eorseq	r3, sl, r1, lsl #26
    4eb4:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    4eb8:	15000000 	strne	r0, [r0, #-0]
    4ebc:	00000c15 	andeq	r0, r0, r5, lsl ip
    4ec0:	48106101 	ldmdami	r0, {r0, r8, sp, lr}
    4ec4:	00140800 	andseq	r0, r4, r0, lsl #16
    4ec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ecc:	00000375 	andeq	r0, r0, r5, ror r3
    4ed0:	001b5417 	andseq	r5, fp, r7, lsl r4
    4ed4:	3a610100 	bcc	18452dc <__Stack_Size+0x1844edc>
    4ed8:	40000000 	andmi	r0, r0, r0
    4edc:	0000001e 	andeq	r0, r0, lr, lsl r0
    4ee0:	00078915 	andeq	r8, r7, r5, lsl r9
    4ee4:	24740100 	ldrbtcs	r0, [r4], #-256	; 0x100
    4ee8:	84080048 	strhi	r0, [r8], #-72	; 0x48
    4eec:	01000000 	mrseq	r0, (UNDEF: 0)
    4ef0:	0003e39c 	muleq	r3, ip, r3
    4ef4:	1a471800 	bne	11caefc <__Stack_Size+0x11caafc>
    4ef8:	74010000 	strvc	r0, [r1], #-0
    4efc:	000003e3 	andeq	r0, r0, r3, ror #7
    4f00:	0a165001 	beq	598f0c <__Stack_Size+0x598b0c>
    4f04:	0100001d 	tsteq	r0, sp, lsl r0
    4f08:	00003a76 	andeq	r3, r0, r6, ror sl
    4f0c:	001e6100 	andseq	r6, lr, r0, lsl #2
    4f10:	19271600 	stmdbne	r7!, {r9, sl, ip}
    4f14:	76010000 	strvc	r0, [r1], -r0
    4f18:	0000003a 	andeq	r0, r0, sl, lsr r0
    4f1c:	00001ebd 			; <UNDEFINED> instruction: 0x00001ebd
    4f20:	00197b16 	andseq	r7, r9, r6, lsl fp
    4f24:	3a760100 	bcc	1d8532c <__Stack_Size+0x1d84f2c>
    4f28:	f3000000 	vhadd.u8	d0, d0, d0
    4f2c:	1600001e 			; <UNDEFINED> instruction: 0x1600001e
    4f30:	00001acf 	andeq	r1, r0, pc, asr #21
    4f34:	003a7701 	eorseq	r7, sl, r1, lsl #14
    4f38:	1f2e0000 	svcne	0x002e0000
    4f3c:	ba160000 	blt	584f44 <__Stack_Size+0x584b44>
    4f40:	0100001c 	tsteq	r0, ip, lsl r0
    4f44:	00003a77 	andeq	r3, r0, r7, ror sl
    4f48:	001f7700 	andseq	r7, pc, r0, lsl #14
    4f4c:	04190000 	ldreq	r0, [r9], #-0
    4f50:	000002fb 	strdeq	r0, [r0], -fp
    4f54:	001cf515 	andseq	pc, ip, r5, lsl r5	; <UNPREDICTABLE>
    4f58:	a8a80100 	stmiage	r8!, {r8}
    4f5c:	0c080048 	stceq	0, cr0, [r8], {72}	; 0x48
    4f60:	01000000 	mrseq	r0, (UNDEF: 0)
    4f64:	00040c9c 	muleq	r4, ip, ip
    4f68:	1a471800 	bne	11caf70 <__Stack_Size+0x11cab70>
    4f6c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    4f70:	000003e3 	andeq	r0, r0, r3, ror #7
    4f74:	15005001 	strne	r5, [r0, #-1]
    4f78:	00001aa6 	andeq	r1, r0, r6, lsr #21
    4f7c:	48b4b801 	ldmmi	r4!, {r0, fp, ip, sp, pc}
    4f80:	00040800 	andeq	r0, r4, r0, lsl #16
    4f84:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f88:	0000042b 	andeq	r0, r0, fp, lsr #8
    4f8c:	0048b81a 	subeq	fp, r8, sl, lsl r8
    4f90:	00092f08 	andeq	r2, r9, r8, lsl #30
    4f94:	d6150000 	ldrle	r0, [r5], -r0
    4f98:	0100001a 	tsteq	r0, sl, lsl r0
    4f9c:	0048b8c4 	subeq	fp, r8, r4, asr #17
    4fa0:	00000408 	andeq	r0, r0, r8, lsl #8
    4fa4:	4a9c0100 	bmi	fe7053ac <SCS_BASE+0x1e6f73ac>
    4fa8:	1a000004 	bne	4fc0 <__Stack_Size+0x4bc0>
    4fac:	080048bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, lr}
    4fb0:	00000936 	andeq	r0, r0, r6, lsr r9
    4fb4:	1d2a1500 	cfstr32ne	mvfx1, [sl, #-0]
    4fb8:	d0010000 	andle	r0, r1, r0
    4fbc:	080048bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, lr}
    4fc0:	00000004 	andeq	r0, r0, r4
    4fc4:	04699c01 	strbteq	r9, [r9], #-3073	; 0xc01
    4fc8:	c01a0000 	andsgt	r0, sl, r0
    4fcc:	3d080048 	stccc	0, cr0, [r8, #-288]	; 0xfffffee0
    4fd0:	00000009 	andeq	r0, r0, r9
    4fd4:	001b6715 	andseq	r6, fp, r5, lsl r7
    4fd8:	c0dc0100 	sbcsgt	r0, ip, r0, lsl #2
    4fdc:	04080048 	streq	r0, [r8], #-72	; 0x48
    4fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    4fe4:	0004889c 	muleq	r4, ip, r8
    4fe8:	48c41a00 	stmiami	r4, {r9, fp, ip}^
    4fec:	09440800 	stmdbeq	r4, {fp}^
    4ff0:	15000000 	strne	r0, [r0, #-0]
    4ff4:	00001bf6 	strdeq	r1, [r0], -r6
    4ff8:	48c4ea01 	stmiami	r4, {r0, r9, fp, sp, lr, pc}^
    4ffc:	00060800 	andeq	r0, r6, r0, lsl #16
    5000:	9c010000 	stcls	0, cr0, [r1], {-0}
    5004:	000004c0 	andeq	r0, r0, r0, asr #9
    5008:	001e2017 	andseq	r2, lr, r7, lsl r0
    500c:	3aea0100 	bcc	ffa85414 <SCS_BASE+0x1fa77414>
    5010:	b1000000 	mrslt	r0, (UNDEF: 0)
    5014:	1b00001f 	blne	5098 <__Stack_Size+0x4c98>
    5018:	080048ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, lr}
    501c:	0000094b 	andeq	r0, r0, fp, asr #18
    5020:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    5024:	345001f3 	ldrbcc	r0, [r0], #-499	; 0x1f3
    5028:	1d000024 	stcne	0, cr0, [r0, #-144]	; 0xffffff70
    502c:	00001c8a 	andeq	r1, r0, sl, lsl #25
    5030:	003af901 	eorseq	pc, sl, r1, lsl #18
    5034:	48ca0000 	stmiami	sl, {}^	; <UNPREDICTABLE>
    5038:	00040800 	andeq	r0, r4, r0, lsl #16
    503c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5040:	000004e3 	andeq	r0, r0, r3, ror #9
    5044:	0048ce1a 	subeq	ip, r8, sl, lsl lr
    5048:	00095c08 	andeq	r5, r9, r8, lsl #24
    504c:	571e0000 	ldrpl	r0, [lr, -r0]
    5050:	0100001a 	tsteq	r0, sl, lsl r0
    5054:	004c0105 	subeq	r0, ip, r5, lsl #2
    5058:	48ce0000 	stmiami	lr, {}^	; <UNPREDICTABLE>
    505c:	000e0800 	andeq	r0, lr, r0, lsl #16
    5060:	9c010000 	stcls	0, cr0, [r1], {-0}
    5064:	001dee1f 	andseq	lr, sp, pc, lsl lr
    5068:	01120100 	tsteq	r2, r0, lsl #2
    506c:	000000a4 	andeq	r0, r0, r4, lsr #1
    5070:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    5074:	00000020 	andeq	r0, r0, r0, lsr #32
    5078:	05449c01 	strbeq	r9, [r4, #-3073]	; 0xc01
    507c:	41200000 			; <UNDEFINED> instruction: 0x41200000
    5080:	01000007 	tsteq	r0, r7
    5084:	005e0112 	subseq	r0, lr, r2, lsl r1
    5088:	1fd20000 	svcne	0x00d20000
    508c:	ac210000 	stcge	0, cr0, [r1], #-0
    5090:	0100001e 	tsteq	r0, lr, lsl r0
    5094:	00a40114 	adceq	r0, r4, r4, lsl r1
    5098:	1ff30000 	svcne	0x00f30000
    509c:	74220000 	strtvc	r0, [r2], #-0
    50a0:	0100706d 	tsteq	r0, sp, rrx
    50a4:	003a0115 	eorseq	r0, sl, r5, lsl r1
    50a8:	201a0000 	andscs	r0, sl, r0
    50ac:	23000000 	movwcs	r0, #0
    50b0:	00001c0e 	andeq	r1, r0, lr, lsl #24
    50b4:	fc012e01 	stc2	14, cr2, [r1], {1}
    50b8:	0c080048 	stceq	0, cr0, [r8], {72}	; 0x48
    50bc:	01000000 	mrseq	r0, (UNDEF: 0)
    50c0:	0005699c 	muleq	r5, ip, r9
    50c4:	07412400 	strbeq	r2, [r1, -r0, lsl #8]
    50c8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    50cc:	00005e01 	andeq	r5, r0, r1, lsl #28
    50d0:	00500100 	subseq	r0, r0, r0, lsl #2
    50d4:	001a2823 	andseq	r2, sl, r3, lsr #16
    50d8:	013d0100 	teqeq	sp, r0, lsl #2
    50dc:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    50e0:	00000018 	andeq	r0, r0, r8, lsl r0
    50e4:	05909c01 	ldreq	r9, [r0, #3073]	; 0xc01
    50e8:	41200000 			; <UNDEFINED> instruction: 0x41200000
    50ec:	01000007 	tsteq	r0, r7
    50f0:	005e013d 	subseq	r0, lr, sp, lsr r1
    50f4:	20390000 	eorscs	r0, r9, r0
    50f8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    50fc:	00001b7b 	andeq	r1, r0, fp, ror fp
    5100:	4c014d01 	stcmi	13, cr4, [r1], {1}
    5104:	20000000 	andcs	r0, r0, r0
    5108:	10080049 	andne	r0, r8, r9, asr #32
    510c:	01000000 	mrseq	r0, (UNDEF: 0)
    5110:	1e7e1f9c 	mrcne	15, 3, r1, cr14, cr12, {4}
    5114:	5a010000 	bpl	4511c <__Stack_Size+0x44d1c>
    5118:	0000a401 	andeq	sl, r0, r1, lsl #8
    511c:	00493000 	subeq	r3, r9, r0
    5120:	00002008 	andeq	r2, r0, r8
    5124:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    5128:	20000005 	andcs	r0, r0, r5
    512c:	00000741 	andeq	r0, r0, r1, asr #14
    5130:	5e015a01 	vmlapl.f32	s10, s2, s2
    5134:	5a000000 	bpl	513c <__Stack_Size+0x4d3c>
    5138:	21000020 	tstcs	r0, r0, lsr #32
    513c:	00001e39 	andeq	r1, r0, r9, lsr lr
    5140:	a4015c01 	strge	r5, [r1], #-3073	; 0xc01
    5144:	7b000000 	blvc	514c <__Stack_Size+0x4d4c>
    5148:	22000020 	andcs	r0, r0, #32
    514c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    5150:	3a015d01 	bcc	5c55c <__Stack_Size+0x5c15c>
    5154:	a2000000 	andge	r0, r0, #0
    5158:	00000020 	andeq	r0, r0, r0, lsr #32
    515c:	001b461e 	andseq	r4, fp, lr, lsl r6
    5160:	01770100 	cmneq	r7, r0, lsl #2
    5164:	0000003a 	andeq	r0, r0, sl, lsr r0
    5168:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    516c:	0000000c 	andeq	r0, r0, ip
    5170:	e9239c01 	stmdb	r3!, {r0, sl, fp, ip, pc}
    5174:	01000005 	tsteq	r0, r5
    5178:	495c0189 	ldmdbmi	ip, {r0, r3, r7, r8}^
    517c:	00140800 	andseq	r0, r4, r0, lsl #16
    5180:	9c010000 	stcls	0, cr0, [r1], {-0}
    5184:	0000063e 	andeq	r0, r0, lr, lsr r6
    5188:	001e2c20 	andseq	r2, lr, r0, lsr #24
    518c:	01890100 	orreq	r0, r9, r0, lsl #2
    5190:	0000003a 	andeq	r0, r0, sl, lsr r0
    5194:	000020c1 	andeq	r2, r0, r1, asr #1
    5198:	001cee20 	andseq	lr, ip, r0, lsr #28
    519c:	01890100 	orreq	r0, r9, r0, lsl #2
    51a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    51a4:	000020e2 	andeq	r2, r0, r2, ror #1
    51a8:	1ab62500 	bne	fed8e5b0 <SCS_BASE+0x1ed805b0>
    51ac:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    51b0:	00497001 	subeq	r7, r9, r1
    51b4:	00001008 	andeq	r1, r0, r8
    51b8:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    51bc:	00001bba 			; <UNDEFINED> instruction: 0x00001bba
    51c0:	8001a501 	andhi	sl, r1, r1, lsl #10
    51c4:	10080049 	andne	r0, r8, r9, asr #32
    51c8:	01000000 	mrseq	r0, (UNDEF: 0)
    51cc:	1cda239c 	ldclne	3, cr2, [sl], {156}	; 0x9c
    51d0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    51d4:	00499001 	subeq	r9, r9, r1
    51d8:	00001808 	andeq	r1, r0, r8, lsl #16
    51dc:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    51e0:	20000006 	andcs	r0, r0, r6
    51e4:	00001e71 	andeq	r1, r0, r1, ror lr
    51e8:	5e01b801 	cdppl	8, 0, cr11, cr1, cr1, {0}
    51ec:	03000000 	movweq	r0, #0
    51f0:	24000021 	strcs	r0, [r0], #-33	; 0x21
    51f4:	00001591 	muleq	r0, r1, r5
    51f8:	c401b801 	strgt	fp, [r1], #-2049	; 0x801
    51fc:	01000000 	mrseq	r0, (UNDEF: 0)
    5200:	c1230051 	qsubgt	r0, r1, r3
    5204:	0100001c 	tsteq	r0, ip, lsl r0
    5208:	49a801d6 	stmibmi	r8!, {r1, r2, r4, r6, r7, r8}
    520c:	00200800 	eoreq	r0, r0, r0, lsl #16
    5210:	9c010000 	stcls	0, cr0, [r1], {-0}
    5214:	000006de 	ldrdeq	r0, [r0], -lr
    5218:	001b9820 	andseq	r9, fp, r0, lsr #16
    521c:	01d60100 	bicseq	r0, r6, r0, lsl #2
    5220:	0000003a 	andeq	r0, r0, sl, lsr r0
    5224:	0000213d 	andeq	r2, r0, sp, lsr r1
    5228:	00159120 	andseq	r9, r5, r0, lsr #2
    522c:	01d60100 	bicseq	r0, r6, r0, lsl #2
    5230:	000000c4 	andeq	r0, r0, r4, asr #1
    5234:	0000215e 	andeq	r2, r0, lr, asr r1
    5238:	00192721 	andseq	r2, r9, r1, lsr #14
    523c:	01d80100 	bicseq	r0, r8, r0, lsl #2
    5240:	0000003a 	andeq	r0, r0, sl, lsr r0
    5244:	00002198 	muleq	r0, r8, r1
    5248:	1af52300 	bne	ffd4de50 <SCS_BASE+0x1fd3fe50>
    524c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    5250:	0049c801 	subeq	ip, r9, r1, lsl #16
    5254:	00004c08 	andeq	r4, r0, r8, lsl #24
    5258:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    525c:	20000007 	andcs	r0, r0, r7
    5260:	00001b98 	muleq	r0, r8, fp
    5264:	3a01fe01 	bcc	84a70 <__Stack_Size+0x84670>
    5268:	e0000000 	and	r0, r0, r0
    526c:	20000021 	andcs	r0, r0, r1, lsr #32
    5270:	00001dce 	andeq	r1, r0, lr, asr #27
    5274:	5e01fe01 	cdppl	14, 0, cr15, cr1, cr1, {0}
    5278:	01000000 	mrseq	r0, (UNDEF: 0)
    527c:	20000022 	andcs	r0, r0, r2, lsr #32
    5280:	00001a8d 	andeq	r1, r0, sp, lsl #21
    5284:	5e01ff01 	cdppl	15, 0, cr15, cr1, cr1, {0}
    5288:	22000000 	andcs	r0, r0, #0
    528c:	21000022 	tstcs	r0, r2, lsr #32
    5290:	000019ac 	andeq	r1, r0, ip, lsr #19
    5294:	3a020101 	bcc	856a0 <__Stack_Size+0x852a0>
    5298:	43000000 	movwmi	r0, #0
    529c:	21000022 	tstcs	r0, r2, lsr #32
    52a0:	00001d6e 	andeq	r1, r0, lr, ror #26
    52a4:	3a020101 	bcc	856b0 <__Stack_Size+0x852b0>
    52a8:	80000000 	andhi	r0, r0, r0
    52ac:	21000022 	tstcs	r0, r2, lsr #32
    52b0:	00001e56 	andeq	r1, r0, r6, asr lr
    52b4:	3a020101 	bcc	856c0 <__Stack_Size+0x852c0>
    52b8:	b0000000 	andlt	r0, r0, r0
    52bc:	21000022 	tstcs	r0, r2, lsr #32
    52c0:	00001d0a 	andeq	r1, r0, sl, lsl #26
    52c4:	3a020201 	bcc	85ad0 <__Stack_Size+0x856d0>
    52c8:	d4000000 	strle	r0, [r0], #-0
    52cc:	00000022 	andeq	r0, r0, r2, lsr #32
    52d0:	001d731f 	andseq	r7, sp, pc, lsl r3
    52d4:	02280100 	eoreq	r0, r8, #0, 2
    52d8:	000000a4 	andeq	r0, r0, r4, lsr #1
    52dc:	08004a14 	stmdaeq	r0, {r2, r4, r9, fp, lr}
    52e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    52e4:	07c09c01 	strbeq	r9, [r0, r1, lsl #24]
    52e8:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
    52ec:	0100001b 	tsteq	r0, fp, lsl r0
    52f0:	003a0228 	eorseq	r0, sl, r8, lsr #4
    52f4:	23190000 	tstcs	r9, #0
    52f8:	20210000 	eorcs	r0, r1, r0
    52fc:	01000016 	tsteq	r0, r6, lsl r0
    5300:	00a4022a 	adceq	r0, r4, sl, lsr #4
    5304:	233a0000 	teqcs	sl, #0
    5308:	74220000 	strtvc	r0, [r2], #-0
    530c:	0100706d 	tsteq	r0, sp, rrx
    5310:	003a022b 	eorseq	r0, sl, fp, lsr #4
    5314:	23610000 	cmncs	r1, #0
    5318:	2b210000 	blcs	845320 <__Stack_Size+0x844f20>
    531c:	0100001c 	tsteq	r0, ip, lsl r0
    5320:	003a022b 	eorseq	r0, sl, fp, lsr #4
    5324:	23900000 	orrscs	r0, r0, #0
    5328:	23000000 	movwcs	r0, #0
    532c:	00001c37 	andeq	r1, r0, r7, lsr ip
    5330:	30024e01 	andcc	r4, r2, r1, lsl #28
    5334:	1808004a 	stmdane	r8, {r1, r3, r6}
    5338:	01000000 	mrseq	r0, (UNDEF: 0)
    533c:	0007f79c 	muleq	r7, ip, r7
    5340:	1b982000 	blne	fe60d348 <SCS_BASE+0x1e5ff348>
    5344:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    5348:	00003a02 	andeq	r3, r0, r2, lsl #20
    534c:	0023d900 	eoreq	sp, r3, r0, lsl #18
    5350:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    5354:	50010070 	andpl	r0, r1, r0, ror r0
    5358:	00003a02 	andeq	r3, r0, r2, lsl #20
    535c:	0023fa00 	eoreq	pc, r3, r0, lsl #20
    5360:	99230000 	stmdbls	r3!, {}	; <UNPREDICTABLE>
    5364:	0100001d 	tsteq	r0, sp, lsl r0
    5368:	4a480266 	bmi	1205d08 <__Stack_Size+0x1205908>
    536c:	00180800 	andseq	r0, r8, r0, lsl #16
    5370:	9c010000 	stcls	0, cr0, [r1], {-0}
    5374:	0000082e 	andeq	r0, r0, lr, lsr #16
    5378:	001b9820 	andseq	r9, fp, r0, lsr #16
    537c:	02660100 	rsbeq	r0, r6, #0, 2
    5380:	0000003a 	andeq	r0, r0, sl, lsr r0
    5384:	0000241c 	andeq	r2, r0, ip, lsl r4
    5388:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    538c:	02680100 	rsbeq	r0, r8, #0, 2
    5390:	0000003a 	andeq	r0, r0, sl, lsr r0
    5394:	0000243d 	andeq	r2, r0, sp, lsr r4
    5398:	1bd11f00 	blne	ff44cfa0 <SCS_BASE+0x1f43efa0>
    539c:	84010000 	strhi	r0, [r1], #-0
    53a0:	0000a402 	andeq	sl, r0, r2, lsl #8
    53a4:	004a6000 	subeq	r6, sl, r0
    53a8:	00001c08 	andeq	r1, r0, r8, lsl #24
    53ac:	899c0100 	ldmibhi	ip, {r8}
    53b0:	20000008 	andcs	r0, r0, r8
    53b4:	00001b98 	muleq	r0, r8, fp
    53b8:	3a028401 	bcc	a63c4 <__Stack_Size+0xa5fc4>
    53bc:	6c000000 	stcvs	0, cr0, [r0], {-0}
    53c0:	21000024 	tstcs	r0, r4, lsr #32
    53c4:	00001620 	andeq	r1, r0, r0, lsr #12
    53c8:	a4028601 	strge	r8, [r2], #-1537	; 0x601
    53cc:	8d000000 	stchi	0, cr0, [r0, #-0]
    53d0:	22000024 	andcs	r0, r0, #36	; 0x24
    53d4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    53d8:	3a028801 	bcc	a73e4 <__Stack_Size+0xa6fe4>
    53dc:	b4000000 	strlt	r0, [r0], #-0
    53e0:	21000024 	tstcs	r0, r4, lsr #32
    53e4:	00001c2b 	andeq	r1, r0, fp, lsr #24
    53e8:	3a028801 	bcc	a73f4 <__Stack_Size+0xa6ff4>
    53ec:	e3000000 	movw	r0, #0
    53f0:	00000024 	andeq	r0, r0, r4, lsr #32
    53f4:	001d461f 	andseq	r4, sp, pc, lsl r6
    53f8:	02ac0100 	adceq	r0, ip, #0, 2
    53fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    5400:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
    5404:	00000030 	andeq	r0, r0, r0, lsr r0
    5408:	08e49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}^
    540c:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
    5410:	0100001b 	tsteq	r0, fp, lsl r0
    5414:	003a02ac 	eorseq	r0, sl, ip, lsr #5
    5418:	252c0000 	strcs	r0, [ip, #-0]!
    541c:	c1210000 			; <UNDEFINED> instruction: 0xc1210000
    5420:	0100001d 	tsteq	r0, sp, lsl r0
    5424:	003a02ae 	eorseq	r0, sl, lr, lsr #5
    5428:	257f0000 	ldrbcs	r0, [pc, #-0]!	; 5430 <__Stack_Size+0x5030>
    542c:	27210000 	strcs	r0, [r1, -r0]!
    5430:	01000019 	tsteq	r0, r9, lsl r0
    5434:	003a02af 	eorseq	r0, sl, pc, lsr #5
    5438:	25cc0000 	strbcs	r0, [ip]
    543c:	2b210000 	blcs	845444 <__Stack_Size+0x845044>
    5440:	0100001c 	tsteq	r0, ip, lsl r0
    5444:	003a02af 	eorseq	r0, sl, pc, lsr #5
    5448:	261b0000 	ldrcs	r0, [fp], -r0
    544c:	1f000000 	svcne	0x00000000
    5450:	00001a78 	andeq	r1, r0, r8, ror sl
    5454:	3a02da01 	bcc	bbc60 <__Stack_Size+0xbb860>
    5458:	ac000000 	stcge	0, cr0, [r0], {-0}
    545c:	1408004a 	strne	r0, [r8], #-74	; 0x4a
    5460:	01000000 	mrseq	r0, (UNDEF: 0)
    5464:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    5468:	1b982000 	blne	fe60d470 <SCS_BASE+0x1e5ff470>
    546c:	da010000 	ble	45474 <__Stack_Size+0x45074>
    5470:	00003a02 	andeq	r3, r0, r2, lsl #20
    5474:	00269800 	eoreq	r9, r6, r0, lsl #16
    5478:	1ae82100 	bne	ffa0d880 <SCS_BASE+0x1f9ff880>
    547c:	dc010000 	stcle	0, cr0, [r1], {-0}
    5480:	00003a02 	andeq	r3, r0, r2, lsl #20
    5484:	0026b900 	eoreq	fp, r6, r0, lsl #18
    5488:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    548c:	dd010070 	stcle	0, cr0, [r1, #-448]	; 0xfffffe40
    5490:	00003a02 	andeq	r3, r0, r2, lsl #20
    5494:	0026d800 	eoreq	sp, r6, r0, lsl #16
    5498:	49260000 	stmdbmi	r6!, {}	; <UNPREDICTABLE>
    549c:	0500001e 	streq	r0, [r0, #-30]
    54a0:	1e622629 	cdpne	6, 6, cr2, cr2, cr9, {1}
    54a4:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    54a8:	001bab26 	andseq	sl, fp, r6, lsr #22
    54ac:	262c0500 	strtcs	r0, [ip], -r0, lsl #10
    54b0:	00001ca3 	andeq	r1, r0, r3, lsr #25
    54b4:	62272b05 	eorvs	r2, r7, #5120	; 0x1400
    54b8:	0500001c 	streq	r0, [r0, #-28]
    54bc:	00095c2e 	andeq	r5, r9, lr, lsr #24
    54c0:	003a2800 	eorseq	r2, sl, r0, lsl #16
    54c4:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    54c8:	00001b16 	andeq	r1, r0, r6, lsl fp
    54cc:	003a2f05 	eorseq	r2, sl, r5, lsl #30
    54d0:	c2000000 	andgt	r0, r0, #0
    54d4:	04000002 	streq	r0, [r0], #-2
    54d8:	000e6e00 	andeq	r6, lr, r0, lsl #28
    54dc:	e1010400 	tst	r1, r0, lsl #8
    54e0:	01000007 	tsteq	r0, r7
    54e4:	00001f26 	andeq	r1, r0, r6, lsr #30
    54e8:	00000101 	andeq	r0, r0, r1, lsl #2
    54ec:	08004ac0 	stmdaeq	r0, {r6, r7, r9, fp, lr}
    54f0:	000000c8 	andeq	r0, r0, r8, asr #1
    54f4:	00000c7e 	andeq	r0, r0, lr, ror ip
    54f8:	3c050402 	cfstrscc	mvf0, [r5], {2}
    54fc:	02000009 	andeq	r0, r0, #9
    5500:	09000502 	stmdbeq	r0, {r1, r8, sl}
    5504:	01020000 	mrseq	r0, (UNDEF: 2)
    5508:	000a9d06 	andeq	r9, sl, r6, lsl #26
    550c:	33750300 	cmncc	r5, #0, 6
    5510:	27020032 	smladxcs	r2, r2, r0, r0
    5514:	00000045 	andeq	r0, r0, r5, asr #32
    5518:	62070402 	andvs	r0, r7, #33554432	; 0x2000000
    551c:	0200000a 	andeq	r0, r0, #10
    5520:	0c540702 	mrrceq	7, 0, r0, r4, cr2
    5524:	75030000 	strvc	r0, [r3, #-0]
    5528:	29020038 	stmdbcs	r2, {r3, r4, r5}
    552c:	0000005d 	andeq	r0, r0, sp, asr r0
    5530:	9b080102 	blls	205940 <__Stack_Size+0x205540>
    5534:	0400000a 	streq	r0, [r0], #-10
    5538:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    553c:	006f2f02 	rsbeq	r2, pc, r2, lsl #30
    5540:	45050000 	strmi	r0, [r5, #-0]
    5544:	06000000 	streq	r0, [r0], -r0
    5548:	89390201 	ldmdbhi	r9!, {r0, r9}
    554c:	07000000 	streq	r0, [r0, -r0]
    5550:	0000188d 	andeq	r1, r0, sp, lsl #17
    5554:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    5558:	00010054 	andeq	r0, r1, r4, asr r0
    555c:	00088404 	andeq	r8, r8, r4, lsl #8
    5560:	74390200 	ldrtvc	r0, [r9], #-512	; 0x200
    5564:	06000000 	streq	r0, [r0], -r0
    5568:	a93b0201 	ldmdbge	fp!, {r0, r9}
    556c:	07000000 	streq	r0, [r0, -r0]
    5570:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    5574:	0a3b0700 	beq	ec717c <__Stack_Size+0xec6d7c>
    5578:	00010000 	andeq	r0, r1, r0
    557c:	00011b04 	andeq	r1, r1, r4, lsl #22
    5580:	943b0200 	ldrtls	r0, [fp], #-512	; 0x200
    5584:	02000000 	andeq	r0, r0, #0
    5588:	0a590704 	beq	16471a0 <__Stack_Size+0x1646da0>
    558c:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    5590:	de01a303 	cdple	3, 0, cr10, cr1, cr3, {0}
    5594:	0a000000 	beq	559c <__Stack_Size+0x519c>
    5598:	03005243 	movweq	r5, #579	; 0x243
    559c:	006401a5 	rsbeq	r0, r4, r5, lsr #3
    55a0:	0a000000 	beq	55a8 <__Stack_Size+0x51a8>
    55a4:	00525343 	subseq	r5, r2, r3, asr #6
    55a8:	6401a603 	strvs	sl, [r1], #-1539	; 0x603
    55ac:	04000000 	streq	r0, [r0], #-0
    55b0:	1f0f0b00 	svcne	0x000f0b00
    55b4:	a7030000 	strge	r0, [r3, -r0]
    55b8:	0000bb01 	andeq	fp, r0, r1, lsl #22
    55bc:	1ee00c00 	cdpne	12, 14, cr0, cr0, cr0, {0}
    55c0:	43010000 	movwmi	r0, #4096	; 0x1000
    55c4:	08004ac0 	stmdaeq	r0, {r6, r7, r9, fp, lr}
    55c8:	0000001a 	andeq	r0, r0, sl, lsl r0
    55cc:	01309c01 	teqeq	r0, r1, lsl #24
    55d0:	cc0d0000 	stcgt	0, cr0, [sp], {-0}
    55d4:	a008004a 	andge	r0, r8, sl, asr #32
    55d8:	19000002 	stmdbne	r0, {r1}
    55dc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    55e0:	31015101 	tstcc	r1, r1, lsl #2
    55e4:	0350010e 	cmpeq	r0, #-2147483645	; 0x80000003
    55e8:	00244840 	eoreq	r4, r4, r0, asr #16
    55ec:	004ada0f 	subeq	sp, sl, pc, lsl #20
    55f0:	0002a008 	andeq	sl, r2, r8
    55f4:	51010e00 	tstpl	r1, r0, lsl #28
    55f8:	010e3001 	tsteq	lr, r1
    55fc:	48400350 	stmdami	r0, {r4, r6, r8, r9}^
    5600:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    5604:	0000040e 	andeq	r0, r0, lr, lsl #8
    5608:	4ada5101 	bmi	ff699a14 <SCS_BASE+0x1f68ba14>
    560c:	000a0800 	andeq	r0, sl, r0, lsl #16
    5610:	9c010000 	stcls	0, cr0, [r1], {-0}
    5614:	00000153 	andeq	r0, r0, r3, asr r1
    5618:	00159110 	andseq	r9, r5, r0, lsl r1
    561c:	a9510100 	ldmdbge	r1, {r8}^
    5620:	01000000 	mrseq	r0, (UNDEF: 0)
    5624:	1b0c0050 	blne	30576c <__Stack_Size+0x30536c>
    5628:	0100001f 	tsteq	r0, pc, lsl r0
    562c:	004ae461 	subeq	lr, sl, r1, ror #8
    5630:	00000c08 	andeq	r0, r0, r8, lsl #24
    5634:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    5638:	10000001 	andne	r0, r0, r1
    563c:	00001591 	muleq	r0, r1, r5
    5640:	00a96101 	adceq	r6, r9, r1, lsl #2
    5644:	50010000 	andpl	r0, r1, r0
    5648:	1f480c00 	svcne	0x00480c00
    564c:	7a010000 	bvc	45654 <__Stack_Size+0x45254>
    5650:	08004af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, lr}
    5654:	00000014 	andeq	r0, r0, r4, lsl r0
    5658:	01aa9c01 			; <UNDEFINED> instruction: 0x01aa9c01
    565c:	f9110000 			; <UNDEFINED> instruction: 0xf9110000
    5660:	0100001e 	tsteq	r0, lr, lsl r0
    5664:	00003a7a 	andeq	r3, r0, sl, ror sl
    5668:	00270300 	eoreq	r0, r7, r0, lsl #6
    566c:	19271200 	stmdbne	r7!, {r9, ip}
    5670:	7c010000 	stcvc	0, cr0, [r1], {-0}
    5674:	0000003a 	andeq	r0, r0, sl, lsr r0
    5678:	00002724 	andeq	r2, r0, r4, lsr #14
    567c:	1fb00c00 	svcne	0x00b00c00
    5680:	95010000 	strls	r0, [r1, #-0]
    5684:	08004b04 	stmdaeq	r0, {r2, r8, r9, fp, lr}
    5688:	0000000c 	andeq	r0, r0, ip
    568c:	01cd9c01 	biceq	r9, sp, r1, lsl #24
    5690:	91100000 	tstls	r0, r0
    5694:	01000015 	tsteq	r0, r5, lsl r0
    5698:	0000a995 	muleq	r0, r5, r9
    569c:	00500100 	subseq	r0, r0, r0, lsl #2
    56a0:	001f790c 	andseq	r7, pc, ip, lsl #18
    56a4:	10ad0100 	adcne	r0, sp, r0, lsl #2
    56a8:	2c08004b 	stccs	0, cr0, [r8], {75}	; 0x4b
    56ac:	01000000 	mrseq	r0, (UNDEF: 0)
    56b0:	0002229c 	muleq	r2, ip, r2
    56b4:	1eeb1100 	cdpne	1, 14, cr1, cr11, cr0, {0}
    56b8:	ad010000 	stcge	0, cr0, [r1, #-0]
    56bc:	0000003a 	andeq	r0, r0, sl, lsr r0
    56c0:	0000274e 	andeq	r2, r0, lr, asr #14
    56c4:	001fa211 	andseq	sl, pc, r1, lsl r2	; <UNPREDICTABLE>
    56c8:	53ad0100 			; <UNDEFINED> instruction: 0x53ad0100
    56cc:	6f000000 	svcvs	0x00000000
    56d0:	12000027 	andne	r0, r0, #39	; 0x27
    56d4:	00001927 	andeq	r1, r0, r7, lsr #18
    56d8:	003aaf01 	eorseq	sl, sl, r1, lsl #30
    56dc:	27a90000 	strcs	r0, [r9, r0]!
    56e0:	30130000 	andscc	r0, r3, r0
    56e4:	b708004b 	strlt	r0, [r8, -fp, asr #32]
    56e8:	13000002 	movwne	r0, #2
    56ec:	08004b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, lr}
    56f0:	000002be 			; <UNDEFINED> instruction: 0x000002be
    56f4:	1ebd0c00 	cdpne	12, 11, cr0, cr13, cr0, {0}
    56f8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    56fc:	08004b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, lr}
    5700:	00000028 	andeq	r0, r0, r8, lsr #32
    5704:	02419c01 	subeq	r9, r1, #256	; 0x100
    5708:	5c130000 	ldcpl	0, cr0, [r3], {-0}
    570c:	b708004b 	strlt	r0, [r8, -fp, asr #32]
    5710:	00000002 	andeq	r0, r0, r2
    5714:	001f5b14 	andseq	r5, pc, r4, lsl fp	; <UNPREDICTABLE>
    5718:	89f20100 	ldmibhi	r2!, {r8}^
    571c:	64000000 	strvs	r0, [r0], #-0
    5720:	1408004b 	strne	r0, [r8], #-75	; 0x4b
    5724:	01000000 	mrseq	r0, (UNDEF: 0)
    5728:	0002799c 	muleq	r2, ip, r9
    572c:	1f061100 	svcne	0x00061100
    5730:	f2010000 	vhadd.s8	d0, d1, d0
    5734:	0000003a 	andeq	r0, r0, sl, lsr r0
    5738:	000027de 	ldrdeq	r2, [r0], -lr
    573c:	00162012 	andseq	r2, r6, r2, lsl r0
    5740:	89f40100 	ldmibhi	r4!, {r8}^
    5744:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    5748:	00000027 	andeq	r0, r0, r7, lsr #32
    574c:	001ed215 	andseq	sp, lr, r5, lsl r2
    5750:	01100100 	tsteq	r0, r0, lsl #2
    5754:	08004b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, lr}
    5758:	00000010 	andeq	r0, r0, r0, lsl r0
    575c:	02a09c01 	adceq	r9, r0, #256	; 0x100
    5760:	06160000 	ldreq	r0, [r6], -r0
    5764:	0100001f 	tsteq	r0, pc, lsl r0
    5768:	003a0110 	eorseq	r0, sl, r0, lsl r1
    576c:	28380000 	ldmdacs	r8!, {}	; <UNPREDICTABLE>
    5770:	17000000 	strne	r0, [r0, -r0]
    5774:	00001f8b 	andeq	r1, r0, fp, lsl #31
    5778:	b7011505 	strlt	r1, [r1, -r5, lsl #10]
    577c:	18000002 	stmdane	r0, {r1}
    5780:	0000003a 	andeq	r0, r0, sl, lsr r0
    5784:	0000a918 	andeq	sl, r0, r8, lsl r9
    5788:	73190000 	tstvc	r9, #0
    578c:	0400001f 	streq	r0, [r0], #-31
    5790:	1f6d191b 	svcne	0x006d191b
    5794:	1c040000 	stcne	0, cr0, [r4], {-0}
    5798:	00086d00 	andeq	r6, r8, r0, lsl #26
    579c:	e2000400 	and	r0, r0, #0, 8
    57a0:	0400000f 	streq	r0, [r0], #-15
    57a4:	0007e101 	andeq	lr, r7, r1, lsl #2
    57a8:	22410100 	subcs	r0, r1, #0, 2
    57ac:	01010000 	mrseq	r0, (UNDEF: 1)
    57b0:	4b880000 	blmi	fe2057b8 <SCS_BASE+0x1e1f77b8>
    57b4:	033c0800 	teqeq	ip, #0, 16
    57b8:	0d690000 	stcleq	0, cr0, [r9, #-0]
    57bc:	04020000 	streq	r0, [r2], #-0
    57c0:	00093c05 	andeq	r3, r9, r5, lsl #24
    57c4:	05020200 	streq	r0, [r2, #-512]	; 0x200
    57c8:	00000900 	andeq	r0, r0, r0, lsl #18
    57cc:	9d060102 	stflss	f0, [r6, #-8]
    57d0:	0300000a 	movweq	r0, #10
    57d4:	00323375 	eorseq	r3, r2, r5, ror r3
    57d8:	00452702 	subeq	r2, r5, r2, lsl #14
    57dc:	04020000 	streq	r0, [r2], #-0
    57e0:	000a6207 	andeq	r6, sl, r7, lsl #4
    57e4:	31750300 	cmncc	r5, r0, lsl #6
    57e8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    57ec:	00000057 	andeq	r0, r0, r7, asr r0
    57f0:	54070202 	strpl	r0, [r7], #-514	; 0x202
    57f4:	0300000c 	movweq	r0, #12
    57f8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    57fc:	00006829 	andeq	r6, r0, r9, lsr #16
    5800:	08010200 	stmdaeq	r1, {r9}
    5804:	00000a9b 	muleq	r0, fp, sl
    5808:	38637503 	stmdacc	r3!, {r0, r1, r8, sl, ip, sp, lr}^
    580c:	7a2d0200 	bvc	b46014 <__Stack_Size+0xb45c14>
    5810:	04000000 	streq	r0, [r0], #-0
    5814:	00000068 	andeq	r0, r0, r8, rrx
    5818:	0004b005 	andeq	fp, r4, r5
    581c:	8a2f0200 	bhi	bc6024 <__Stack_Size+0xbc5c24>
    5820:	06000000 	streq	r0, [r0], -r0
    5824:	00000045 	andeq	r0, r0, r5, asr #32
    5828:	38757603 	ldmdacc	r5!, {r0, r1, r9, sl, ip, sp, lr}^
    582c:	9a310200 	bls	c46034 <__Stack_Size+0xc45c34>
    5830:	06000000 	streq	r0, [r0], -r0
    5834:	00000068 	andeq	r0, r0, r8, rrx
    5838:	39020107 	stmdbcc	r2, {r0, r1, r2, r8}
    583c:	000000b4 	strheq	r0, [r0], -r4
    5840:	00188d08 	andseq	r8, r8, r8, lsl #26
    5844:	53090000 	movwpl	r0, #36864	; 0x9000
    5848:	01005445 	tsteq	r0, r5, asr #8
    584c:	08840500 	stmeq	r4, {r8, sl}
    5850:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    5854:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5858:	00201505 	eoreq	r1, r0, r5, lsl #10
    585c:	9f390200 	svcls	0x00390200
    5860:	07000000 	streq	r0, [r0, -r0]
    5864:	df3b0201 	svcle	0x003b0201
    5868:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    586c:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    5870:	0a3b0800 	beq	ec7878 <__Stack_Size+0xec7478>
    5874:	00010000 	andeq	r0, r1, r0
    5878:	00011b05 	andeq	r1, r1, r5, lsl #22
    587c:	ca3b0200 	bgt	ec6084 <__Stack_Size+0xec5c84>
    5880:	07000000 	streq	r0, [r0, -r0]
    5884:	ff3e0201 			; <UNDEFINED> instruction: 0xff3e0201
    5888:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    588c:	00000011 	andeq	r0, r0, r1, lsl r0
    5890:	059a0800 	ldreq	r0, [sl, #2048]	; 0x800
    5894:	00010000 	andeq	r0, r1, r0
    5898:	00015305 	andeq	r5, r1, r5, lsl #6
    589c:	ea3e0200 	b	f860a4 <__Stack_Size+0xf85ca4>
    58a0:	02000000 	andeq	r0, r0, #0
    58a4:	0a590704 	beq	16474bc <__Stack_Size+0x16470bc>
    58a8:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    58ac:	9c01aa03 	stcls	10, cr10, [r1], {3}
    58b0:	0b000001 	bleq	58bc <__Stack_Size+0x54bc>
    58b4:	03005243 	movweq	r5, #579	; 0x243
    58b8:	007f01ac 	rsbseq	r0, pc, ip, lsr #3
    58bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    58c0:	0000206f 	andeq	r2, r0, pc, rrx
    58c4:	7f01ad03 	svcvc	0x0001ad03
    58c8:	04000000 	streq	r0, [r0], #-0
    58cc:	5249430b 	subpl	r4, r9, #738197504	; 0x2c000000
    58d0:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    58d4:	0000007f 	andeq	r0, r0, pc, ror r0
    58d8:	20ce0c08 	sbccs	r0, lr, r8, lsl #24
    58dc:	af030000 	svcge	0x00030000
    58e0:	00007f01 	andeq	r7, r0, r1, lsl #30
    58e4:	cd0c0c00 	stcgt	12, cr0, [ip, #-0]
    58e8:	0300001f 	movweq	r0, #31
    58ec:	007f01b0 	ldrhteq	r0, [pc], #-16
    58f0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    58f4:	000020f0 	strdeq	r2, [r0], -r0
    58f8:	7f01b103 	svcvc	0x0001b103
    58fc:	14000000 	strne	r0, [r0], #-0
    5900:	0021010c 	eoreq	r0, r1, ip, lsl #2
    5904:	01b20300 			; <UNDEFINED> instruction: 0x01b20300
    5908:	0000007f 	andeq	r0, r0, pc, ror r0
    590c:	20830c18 	addcs	r0, r3, r8, lsl ip
    5910:	b3030000 	movwlt	r0, #12288	; 0x3000
    5914:	00007f01 	andeq	r7, r0, r1, lsl #30
    5918:	1e0c1c00 	cdpne	12, 0, cr1, cr12, cr0, {0}
    591c:	03000020 	movweq	r0, #32
    5920:	007f01b4 	ldrhteq	r0, [pc], #-20
    5924:	0b200000 	bleq	80592c <__Stack_Size+0x80552c>
    5928:	00525343 	subseq	r5, r2, r3, asr #6
    592c:	7f01b503 	svcvc	0x0001b503
    5930:	24000000 	strcs	r0, [r0], #-0
    5934:	1fc10d00 	svcne	0x00c10d00
    5938:	b6030000 	strlt	r0, [r3], -r0
    593c:	00011101 	andeq	r1, r1, r1, lsl #2
    5940:	04140e00 	ldreq	r0, [r4], #-3584	; 0xe00
    5944:	0001ed19 	andeq	lr, r1, r9, lsl sp
    5948:	21b60f00 			; <UNDEFINED> instruction: 0x21b60f00
    594c:	1b040000 	blne	105954 <__Stack_Size+0x105554>
    5950:	0000003a 	andeq	r0, r0, sl, lsr r0
    5954:	20740f00 	rsbscs	r0, r4, r0, lsl #30
    5958:	1c040000 	stcne	0, cr0, [r4], {-0}
    595c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5960:	220e0f04 	andcs	r0, lr, #4, 30
    5964:	1d040000 	stcne	0, cr0, [r4, #-0]
    5968:	0000003a 	andeq	r0, r0, sl, lsr r0
    596c:	21d20f08 	bicscs	r0, r2, r8, lsl #30
    5970:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    5974:	0000003a 	andeq	r0, r0, sl, lsr r0
    5978:	21490f0c 	cmpcs	r9, ip, lsl #30
    597c:	1f040000 	svcne	0x00040000
    5980:	0000003a 	andeq	r0, r0, sl, lsr r0
    5984:	3c050010 	stccc	0, cr0, [r5], {16}
    5988:	04000020 	streq	r0, [r0], #-32
    598c:	0001a820 	andeq	sl, r1, r0, lsr #16
    5990:	003c1000 	eorseq	r1, ip, r0
    5994:	7c010000 	stcvc	0, cr0, [r1], {-0}
    5998:	08004b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, lr}
    599c:	0000003c 	andeq	r0, r0, ip, lsr r0
    59a0:	46119c01 	ldrmi	r9, [r1], -r1, lsl #24
    59a4:	01000006 	tsteq	r0, r6
    59a8:	004bc49f 	umaaleq	ip, fp, pc, r4	; <UNPREDICTABLE>
    59ac:	00003808 	andeq	r3, r0, r8, lsl #16
    59b0:	2c9c0100 	ldfcss	f0, [ip], {0}
    59b4:	12000002 	andne	r0, r0, #2
    59b8:	000021f5 	strdeq	r2, [r0], -r5
    59bc:	003a9f01 	eorseq	r9, sl, r1, lsl #30
    59c0:	50010000 	andpl	r0, r1, r0
    59c4:	212b1100 			; <UNDEFINED> instruction: 0x212b1100
    59c8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    59cc:	08004bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
    59d0:	00000014 	andeq	r0, r0, r4, lsl r0
    59d4:	02609c01 	rsbeq	r9, r0, #256	; 0x100
    59d8:	35130000 	ldrcc	r0, [r3, #-0]
    59dc:	01000021 	tsteq	r0, r1, lsr #32
    59e0:	00005ee9 	andeq	r5, r0, r9, ror #29
    59e4:	00285900 	eoreq	r5, r8, r0, lsl #18
    59e8:	19271400 	stmdbne	r7!, {sl, ip}
    59ec:	eb010000 	bl	459f4 <__Stack_Size+0x455f4>
    59f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    59f4:	0000287a 	andeq	r2, r0, sl, ror r8
    59f8:	229a1500 	addscs	r1, sl, #0, 10
    59fc:	06010000 	streq	r0, [r1], -r0
    5a00:	004c1001 	subeq	r1, ip, r1
    5a04:	00000c08 	andeq	r0, r0, r8, lsl #24
    5a08:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    5a0c:	16000002 	strne	r0, [r0], -r2
    5a10:	00001591 	muleq	r0, r1, r5
    5a14:	df010601 	svcle	0x00010601
    5a18:	01000000 	mrseq	r0, (UNDEF: 0)
    5a1c:	88150050 	ldmdahi	r5, {r4, r6}
    5a20:	01000001 	tsteq	r0, r1
    5a24:	4c1c011f 	ldfmis	f0, [ip], {31}
    5a28:	00140800 	andseq	r0, r4, r0, lsl #16
    5a2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a30:	000002cc 	andeq	r0, r0, ip, asr #5
    5a34:	00216317 	eoreq	r6, r1, r7, lsl r3
    5a38:	011f0100 	tsteq	pc, r0, lsl #2
    5a3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a40:	000028a4 	andeq	r2, r0, r4, lsr #17
    5a44:	00204e17 	eoreq	r4, r0, r7, lsl lr
    5a48:	011f0100 	tsteq	pc, r0, lsl #2
    5a4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a50:	000028c5 	andeq	r2, r0, r5, asr #17
    5a54:	00192718 	andseq	r2, r9, r8, lsl r7
    5a58:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5a5c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a60:	000028e6 	andeq	r2, r0, r6, ror #17
    5a64:	0bf21500 	bleq	ffc8ae6c <SCS_BASE+0x1fc7ce6c>
    5a68:	3c010000 	stccc	0, cr0, [r1], {-0}
    5a6c:	004c3001 	subeq	r3, ip, r1
    5a70:	00000c08 	andeq	r0, r0, r8, lsl #24
    5a74:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    5a78:	16000002 	strne	r0, [r0], -r2
    5a7c:	00001591 	muleq	r0, r1, r5
    5a80:	df013c01 	svcle	0x00013c01
    5a84:	01000000 	mrseq	r0, (UNDEF: 0)
    5a88:	17150050 			; <UNDEFINED> instruction: 0x17150050
    5a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    5a90:	4c3c014f 	ldfmis	f0, [ip], #-316	; 0xfffffec4
    5a94:	00140800 	andseq	r0, r4, r0, lsl #16
    5a98:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a9c:	00000328 	andeq	r0, r0, r8, lsr #6
    5aa0:	0021fd17 	eoreq	pc, r1, r7, lsl sp	; <UNPREDICTABLE>
    5aa4:	014f0100 	mrseq	r0, (UNDEF: 95)
    5aa8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5aac:	00002923 	andeq	r2, r0, r3, lsr #18
    5ab0:	00192718 	andseq	r2, r9, r8, lsl r7
    5ab4:	01510100 	cmpeq	r1, r0, lsl #2
    5ab8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5abc:	00002944 	andeq	r2, r0, r4, asr #18
    5ac0:	0a271900 	beq	9cbec8 <__Stack_Size+0x9cbac8>
    5ac4:	6d010000 	stcvs	0, cr0, [r1, #-0]
    5ac8:	00005e01 	andeq	r5, r0, r1, lsl #28
    5acc:	004c5000 	subeq	r5, ip, r0
    5ad0:	00001008 	andeq	r1, r0, r8
    5ad4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    5ad8:	0000071d 	andeq	r0, r0, sp, lsl r7
    5adc:	60018401 	andvs	r8, r1, r1, lsl #8
    5ae0:	1408004c 	strne	r0, [r8], #-76	; 0x4c
    5ae4:	01000000 	mrseq	r0, (UNDEF: 0)
    5ae8:	0003759c 	muleq	r3, ip, r5
    5aec:	21a11700 			; <UNDEFINED> instruction: 0x21a11700
    5af0:	84010000 	strhi	r0, [r1], #-0
    5af4:	00003a01 	andeq	r3, r0, r1, lsl #20
    5af8:	00296e00 	eoreq	r6, r9, r0, lsl #28
    5afc:	19271800 	stmdbne	r7!, {fp, ip}
    5b00:	86010000 	strhi	r0, [r1], -r0
    5b04:	00003a01 	andeq	r3, r0, r1, lsl #20
    5b08:	00298f00 	eoreq	r8, r9, r0, lsl #30
    5b0c:	5c150000 	ldcpl	0, cr0, [r5], {-0}
    5b10:	01000007 	tsteq	r0, r7
    5b14:	4c7401a5 	ldfmie	f0, [r4], #-660	; 0xfffffd6c
    5b18:	00140800 	andseq	r0, r4, r0, lsl #16
    5b1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b20:	000003ac 	andeq	r0, r0, ip, lsr #7
    5b24:	001fd617 	andseq	sp, pc, r7, lsl r6	; <UNPREDICTABLE>
    5b28:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    5b2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5b30:	000029b9 			; <UNDEFINED> instruction: 0x000029b9
    5b34:	00192718 	andseq	r2, r9, r8, lsl r7
    5b38:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    5b3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5b40:	000029da 	ldrdeq	r2, [r0], -sl
    5b44:	022c1500 	eoreq	r1, ip, #0, 10
    5b48:	c6010000 	strgt	r0, [r1], -r0
    5b4c:	004c8801 	subeq	r8, ip, r1, lsl #16
    5b50:	00001408 	andeq	r1, r0, r8, lsl #8
    5b54:	e39c0100 	orrs	r0, ip, #0, 2
    5b58:	17000003 	strne	r0, [r0, -r3]
    5b5c:	00001fd6 	ldrdeq	r1, [r0], -r6
    5b60:	3a01c601 	bcc	7736c <__Stack_Size+0x76f6c>
    5b64:	04000000 	streq	r0, [r0], #-0
    5b68:	1800002a 	stmdane	r0, {r1, r3, r5}
    5b6c:	00001927 	andeq	r1, r0, r7, lsr #18
    5b70:	3a01c801 	bcc	77b7c <__Stack_Size+0x7777c>
    5b74:	25000000 	strcs	r0, [r0, #-0]
    5b78:	0000002a 	andeq	r0, r0, sl, lsr #32
    5b7c:	0021e215 	eoreq	lr, r1, r5, lsl r2
    5b80:	01e90100 	mvneq	r0, r0, lsl #2
    5b84:	08004c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, lr}
    5b88:	00000018 	andeq	r0, r0, r8, lsl r0
    5b8c:	04189c01 	ldreq	r9, [r8], #-3073	; 0xc01
    5b90:	ad170000 	ldcge	0, cr0, [r7, #-0]
    5b94:	01000022 	tsteq	r0, r2, lsr #32
    5b98:	005e01e9 	subseq	r0, lr, r9, ror #3
    5b9c:	2a4f0000 	bcs	13c5ba4 <__Stack_Size+0x13c57a4>
    5ba0:	91160000 	tstls	r6, r0
    5ba4:	01000015 	tsteq	r0, r5, lsl r0
    5ba8:	00df01e9 	sbcseq	r0, pc, r9, ror #3
    5bac:	51010000 	mrspl	r0, (UNDEF: 1)
    5bb0:	20b21500 	adcscs	r1, r2, r0, lsl #10
    5bb4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5bb8:	004cb402 	subeq	fp, ip, r2, lsl #8
    5bbc:	00000c08 	andeq	r0, r0, r8, lsl #24
    5bc0:	3d9c0100 	ldfccs	f0, [ip]
    5bc4:	16000004 	strne	r0, [r0], -r4
    5bc8:	00002182 	andeq	r2, r0, r2, lsl #3
    5bcc:	3a020801 	bcc	87bd8 <__Stack_Size+0x877d8>
    5bd0:	01000000 	mrseq	r0, (UNDEF: 0)
    5bd4:	df150050 	svcle	0x00150050
    5bd8:	0100001f 	tsteq	r0, pc, lsl r0
    5bdc:	4cc0021d 	sfmmi	f0, 2, [r0], {29}
    5be0:	00140800 	andseq	r0, r4, r0, lsl #16
    5be4:	9c010000 	stcls	0, cr0, [r1], {-0}
    5be8:	00000474 	andeq	r0, r0, r4, ror r4
    5bec:	00203217 	eoreq	r3, r0, r7, lsl r2
    5bf0:	021d0100 	andseq	r0, sp, #0, 2
    5bf4:	0000003a 	andeq	r0, r0, sl, lsr r0
    5bf8:	00002a89 	andeq	r2, r0, r9, lsl #21
    5bfc:	00192718 	andseq	r2, r9, r8, lsl r7
    5c00:	021f0100 	andseq	r0, pc, #0, 2
    5c04:	0000003a 	andeq	r0, r0, sl, lsr r0
    5c08:	00002aaa 	andeq	r2, r0, sl, lsr #21
    5c0c:	22631500 	rsbcs	r1, r3, #0, 10
    5c10:	3c010000 	stccc	0, cr0, [r1], {-0}
    5c14:	004cd402 	subeq	sp, ip, r2, lsl #8
    5c18:	00002008 	andeq	r2, r0, r8
    5c1c:	999c0100 	ldmibls	ip, {r8}
    5c20:	16000004 	strne	r0, [r0], -r4
    5c24:	00002006 	andeq	r2, r0, r6
    5c28:	5e023c01 	cdppl	12, 0, cr3, cr2, cr1, {0}
    5c2c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c30:	c3150050 	tstgt	r5, #80	; 0x50
    5c34:	01000020 	tsteq	r0, r0, lsr #32
    5c38:	4cf40263 	lfmmi	f0, 2, [r4], #396	; 0x18c
    5c3c:	000c0800 	andeq	r0, ip, r0, lsl #16
    5c40:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c44:	000004be 			; <UNDEFINED> instruction: 0x000004be
    5c48:	00159116 	andseq	r9, r5, r6, lsl r1
    5c4c:	02630100 	rsbeq	r0, r3, #0, 2
    5c50:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5c54:	15005001 	strne	r5, [r0, #-1]
    5c58:	00002171 	andeq	r2, r0, r1, ror r1
    5c5c:	00027901 	andeq	r7, r2, r1, lsl #18
    5c60:	1008004d 	andne	r0, r8, sp, asr #32
    5c64:	01000000 	mrseq	r0, (UNDEF: 0)
    5c68:	0004e59c 	muleq	r4, ip, r5
    5c6c:	20991700 	addscs	r1, r9, r0, lsl #14
    5c70:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    5c74:	00003a02 	andeq	r3, r0, r2, lsl #20
    5c78:	002ad400 	eoreq	sp, sl, r0, lsl #8
    5c7c:	71150000 	tstvc	r5, r0
    5c80:	01000022 	tsteq	r0, r2, lsr #32
    5c84:	4d10028c 	lfmmi	f0, 4, [r0, #-560]	; 0xfffffdd0
    5c88:	000c0800 	andeq	r0, ip, r0, lsl #16
    5c8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c90:	0000050a 	andeq	r0, r0, sl, lsl #10
    5c94:	00159116 	andseq	r9, r5, r6, lsl r1
    5c98:	028c0100 	addeq	r0, ip, #0, 2
    5c9c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5ca0:	15005001 	strne	r5, [r0, #-1]
    5ca4:	0000222f 	andeq	r2, r0, pc, lsr #4
    5ca8:	1c029c01 	stcne	12, cr9, [r2], {1}
    5cac:	8408004d 	strhi	r0, [r8], #-77	; 0x4d
    5cb0:	01000000 	mrseq	r0, (UNDEF: 0)
    5cb4:	00056f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    5cb8:	21c71600 	biccs	r1, r7, r0, lsl #12
    5cbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5cc0:	00056f02 	andeq	r6, r5, r2, lsl #30
    5cc4:	1a500100 	bne	14060cc <__Stack_Size+0x1405ccc>
    5cc8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    5ccc:	3a029e01 	bcc	ad4d8 <__Stack_Size+0xad0d8>
    5cd0:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    5cd4:	1800002a 	stmdane	r0, {r1, r3, r5}
    5cd8:	000020aa 	andeq	r2, r0, sl, lsr #1
    5cdc:	3a029e01 	bcc	ad4e8 <__Stack_Size+0xad0e8>
    5ce0:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    5ce4:	1800002b 	stmdane	r0, {r0, r1, r3, r5}
    5ce8:	000020e6 	andeq	r2, r0, r6, ror #1
    5cec:	3a029e01 	bcc	ad4f8 <__Stack_Size+0xad0f8>
    5cf0:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    5cf4:	1800002b 	stmdane	r0, {r0, r1, r3, r5}
    5cf8:	000021ef 	andeq	r2, r0, pc, ror #3
    5cfc:	3a029e01 	bcc	ad508 <__Stack_Size+0xad108>
    5d00:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    5d04:	0000002b 	andeq	r0, r0, fp, lsr #32
    5d08:	01ed041b 	mvneq	r0, fp, lsl r4
    5d0c:	59150000 	ldmdbpl	r5, {}	; <UNPREDICTABLE>
    5d10:	01000020 	tsteq	r0, r0, lsr #32
    5d14:	4da00300 	stcmi	3, cr0, [r0]
    5d18:	00180800 	andseq	r0, r8, r0, lsl #16
    5d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d20:	000005aa 	andeq	r0, r0, sl, lsr #11
    5d24:	0022b417 	eoreq	fp, r2, r7, lsl r4
    5d28:	03000100 	movweq	r0, #256	; 0x100
    5d2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5d30:	00002c59 	andeq	r2, r0, r9, asr ip
    5d34:	00159116 	andseq	r9, r5, r6, lsl r1
    5d38:	03000100 	movweq	r0, #256	; 0x100
    5d3c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5d40:	15005101 	strne	r5, [r0, #-257]	; 0x101
    5d44:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    5d48:	b8032101 	stmdalt	r3, {r0, r8, sp}
    5d4c:	1808004d 	stmdane	r8, {r0, r2, r3, r6}
    5d50:	01000000 	mrseq	r0, (UNDEF: 0)
    5d54:	0005df9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    5d58:	20231700 	eorcs	r1, r3, r0, lsl #14
    5d5c:	21010000 	mrscs	r0, (UNDEF: 1)
    5d60:	00003a03 	andeq	r3, r0, r3, lsl #20
    5d64:	002c9300 	eoreq	r9, ip, r0, lsl #6
    5d68:	15911600 	ldrne	r1, [r1, #1536]	; 0x600
    5d6c:	21010000 	mrscs	r0, (UNDEF: 1)
    5d70:	0000df03 	andeq	sp, r0, r3, lsl #30
    5d74:	00510100 	subseq	r0, r1, r0, lsl #2
    5d78:	0005bd15 	andeq	fp, r5, r5, lsl sp
    5d7c:	03430100 	movteq	r0, #12544	; 0x3100
    5d80:	08004dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, lr}
    5d84:	00000018 	andeq	r0, r0, r8, lsl r0
    5d88:	06149c01 	ldreq	r9, [r4], -r1, lsl #24
    5d8c:	d7170000 	ldrle	r0, [r7, -r0]
    5d90:	01000020 	tsteq	r0, r0, lsr #32
    5d94:	003a0343 	eorseq	r0, sl, r3, asr #6
    5d98:	2ccd0000 	stclcs	0, cr0, [sp], {0}
    5d9c:	91160000 	tstls	r6, r0
    5da0:	01000015 	tsteq	r0, r5, lsl r0
    5da4:	00df0343 	sbcseq	r0, pc, r3, asr #6
    5da8:	51010000 	mrspl	r0, (UNDEF: 1)
    5dac:	19511500 	ldmdbne	r1, {r8, sl, ip}^
    5db0:	63010000 	movwvs	r0, #4096	; 0x1000
    5db4:	004de803 	subeq	lr, sp, r3, lsl #16
    5db8:	00001808 	andeq	r1, r0, r8, lsl #16
    5dbc:	499c0100 	ldmibmi	ip, {r8}
    5dc0:	17000006 	strne	r0, [r0, -r6]
    5dc4:	00002023 	andeq	r2, r0, r3, lsr #32
    5dc8:	3a036301 	bcc	de9d4 <__Stack_Size+0xde5d4>
    5dcc:	07000000 	streq	r0, [r0, -r0]
    5dd0:	1600002d 	strne	r0, [r0], -sp, lsr #32
    5dd4:	00001591 	muleq	r0, r1, r5
    5dd8:	df036301 	svcle	0x00036301
    5ddc:	01000000 	mrseq	r0, (UNDEF: 0)
    5de0:	8b150051 	blhi	545f2c <__Stack_Size+0x545b2c>
    5de4:	0100001f 	tsteq	r0, pc, lsl r0
    5de8:	4e000384 	cdpmi	3, 0, cr0, cr0, cr4, {4}
    5dec:	00180800 	andseq	r0, r8, r0, lsl #16
    5df0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5df4:	0000067e 	andeq	r0, r0, lr, ror r6
    5df8:	0020d717 	eoreq	sp, r0, r7, lsl r7
    5dfc:	03840100 	orreq	r0, r4, #0, 2
    5e00:	0000003a 	andeq	r0, r0, sl, lsr r0
    5e04:	00002d41 	andeq	r2, r0, r1, asr #26
    5e08:	00159116 	andseq	r9, r5, r6, lsl r1
    5e0c:	03840100 	orreq	r0, r4, #0, 2
    5e10:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5e14:	15005101 	strne	r5, [r0, #-257]	; 0x101
    5e18:	00002118 	andeq	r2, r0, r8, lsl r1
    5e1c:	18039c01 	stmdane	r3, {r0, sl, fp, ip, pc}
    5e20:	0c08004e 	stceq	0, cr0, [r8], {78}	; 0x4e
    5e24:	01000000 	mrseq	r0, (UNDEF: 0)
    5e28:	0006a39c 	muleq	r6, ip, r3
    5e2c:	15911600 	ldrne	r1, [r1, #1536]	; 0x600
    5e30:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e34:	0000df03 	andeq	sp, r0, r3, lsl #30
    5e38:	00500100 	subseq	r0, r0, r0, lsl #2
    5e3c:	00227f15 	eoreq	r7, r2, r5, lsl pc
    5e40:	03ac0100 			; <UNDEFINED> instruction: 0x03ac0100
    5e44:	08004e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, lr}
    5e48:	0000000c 	andeq	r0, r0, ip
    5e4c:	06c89c01 	strbeq	r9, [r8], r1, lsl #24
    5e50:	91160000 	tstls	r6, r0
    5e54:	01000015 	tsteq	r0, r5, lsl r0
    5e58:	00df03ac 	sbcseq	r0, pc, ip, lsr #7
    5e5c:	50010000 	andpl	r0, r1, r0
    5e60:	208b1500 	addcs	r1, fp, r0, lsl #10
    5e64:	c1010000 	mrsgt	r0, (UNDEF: 1)
    5e68:	004e3003 	subeq	r3, lr, r3
    5e6c:	00000c08 	andeq	r0, r0, r8, lsl #24
    5e70:	ed9c0100 	ldfs	f0, [ip]
    5e74:	16000006 	strne	r0, [r0], -r6
    5e78:	000022a5 	andeq	r2, r0, r5, lsr #5
    5e7c:	5e03c101 	mvfpls	f4, f1
    5e80:	01000000 	mrseq	r0, (UNDEF: 0)
    5e84:	7d1c0050 	ldcvc	0, cr0, [ip, #-320]	; 0xfffffec0
    5e88:	01000008 	tsteq	r0, r8
    5e8c:	00b403dd 	ldrsbteq	r0, [r4], sp
    5e90:	4e3c0000 	cdpmi	0, 3, cr0, cr12, cr0, {0}
    5e94:	00280800 	eoreq	r0, r8, r0, lsl #16
    5e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e9c:	00000748 	andeq	r0, r0, r8, asr #14
    5ea0:	00215a17 	eoreq	r5, r1, r7, lsl sl
    5ea4:	03dd0100 	bicseq	r0, sp, #0, 2
    5ea8:	0000005e 	andeq	r0, r0, lr, asr r0
    5eac:	00002d7b 	andeq	r2, r0, fp, ror sp
    5eb0:	706d741a 	rsbvc	r7, sp, sl, lsl r4
    5eb4:	03df0100 	bicseq	r0, pc, #0, 2
    5eb8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5ebc:	00002d9c 	muleq	r0, ip, sp
    5ec0:	0020f718 	eoreq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
    5ec4:	03e00100 	mvneq	r0, #0, 2
    5ec8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5ecc:	00002de5 	andeq	r2, r0, r5, ror #27
    5ed0:	00162018 	andseq	r2, r6, r8, lsl r0
    5ed4:	03e10100 	mvneq	r0, #0, 2
    5ed8:	000000b4 	strheq	r0, [r0], -r4
    5edc:	00002e1b 	andeq	r2, r0, fp, lsl lr
    5ee0:	02811d00 	addeq	r1, r1, #0, 26
    5ee4:	c6010000 	strgt	r0, [r1], -r0
    5ee8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5eec:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
    5ef0:	0000002e 	andeq	r0, r0, lr, lsr #32
    5ef4:	07b29c01 	ldreq	r9, [r2, r1, lsl #24]!
    5ef8:	091e0000 	ldmdbeq	lr, {}	; <UNPREDICTABLE>
    5efc:	01000021 	tsteq	r0, r1, lsr #32
    5f00:	00007fc8 	andeq	r7, r0, r8, asr #31
    5f04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5f08:	00161914 	andseq	r1, r6, r4, lsl r9
    5f0c:	ffc90100 			; <UNDEFINED> instruction: 0xffc90100
    5f10:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    5f14:	1400002e 	strne	r0, [r0], #-46	; 0x2e
    5f18:	000021ac 	andeq	r2, r0, ip, lsr #3
    5f1c:	00b4ca01 	adcseq	ip, r4, r1, lsl #20
    5f20:	2e830000 	cdpcs	0, 8, cr0, cr3, cr0, {0}
    5f24:	701f0000 	andsvc	r0, pc, r0
    5f28:	ed08004e 	stc	0, cr0, [r8, #-312]	; 0xfffffec8
    5f2c:	a1000006 	tstge	r0, r6
    5f30:	20000007 	andcs	r0, r0, r7
    5f34:	08025001 	stmdaeq	r2, {r0, ip, lr}
    5f38:	86210031 			; <UNDEFINED> instruction: 0x86210031
    5f3c:	ed08004e 	stc	0, cr0, [r8, #-312]	; 0xfffffec8
    5f40:	20000006 	andcs	r0, r0, r6
    5f44:	08025001 	stmdaeq	r2, {r0, ip, lr}
    5f48:	22000031 	andcs	r0, r0, #49	; 0x31
    5f4c:	00002193 	muleq	r0, r3, r1
    5f50:	92041001 	andls	r1, r4, #1
    5f54:	1208004e 	andne	r0, r8, #78	; 0x4e
    5f58:	01000000 	mrseq	r0, (UNDEF: 0)
    5f5c:	200e1c9c 	mulcs	lr, ip, ip
    5f60:	24010000 	strcs	r0, [r1], #-0
    5f64:	0000bf04 	andeq	fp, r0, r4, lsl #30
    5f68:	004ea400 	subeq	sl, lr, r0, lsl #8
    5f6c:	00001408 	andeq	r1, r0, r8, lsl #8
    5f70:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    5f74:	17000007 	strne	r0, [r0, -r7]
    5f78:	000022ad 	andeq	r2, r0, sp, lsr #5
    5f7c:	5e042401 	cdppl	4, 0, cr2, cr4, cr1, {0}
    5f80:	96000000 	strls	r0, [r0], -r0
    5f84:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    5f88:	00001620 	andeq	r1, r0, r0, lsr #12
    5f8c:	bf042601 	svclt	0x00042601
    5f90:	b7000000 	strlt	r0, [r0, -r0]
    5f94:	0000002e 	andeq	r0, r0, lr, lsr #32
    5f98:	001ff015 	andseq	pc, pc, r5, lsl r0	; <UNPREDICTABLE>
    5f9c:	04470100 	strbeq	r0, [r7], #-256	; 0x100
    5fa0:	08004eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, lr}
    5fa4:	0000000c 	andeq	r0, r0, ip
    5fa8:	08249c01 	stmdaeq	r4!, {r0, sl, fp, ip, pc}
    5fac:	ad160000 	ldcge	0, cr0, [r6, #-0]
    5fb0:	01000022 	tsteq	r0, r2, lsr #32
    5fb4:	005e0447 	subseq	r0, lr, r7, asr #8
    5fb8:	50010000 	andpl	r0, r1, r0
    5fbc:	006f2300 	rsbeq	r2, pc, r0, lsl #6
    5fc0:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    5fc4:	0a240000 	beq	905fcc <__Stack_Size+0x905bcc>
    5fc8:	0f000001 	svceq	0x00000001
    5fcc:	221e1e00 	andscs	r1, lr, #0, 28
    5fd0:	6f010000 	svcvs	0x00010000
    5fd4:	00000845 	andeq	r0, r0, r5, asr #16
    5fd8:	5ecc0305 	cdppl	3, 12, cr0, cr12, cr5, {0}
    5fdc:	24040800 	strcs	r0, [r4], #-2048	; 0x800
    5fe0:	23000008 	movwcs	r0, #8
    5fe4:	0000006f 	andeq	r0, r0, pc, rrx
    5fe8:	0000085a 	andeq	r0, r0, sl, asr r8
    5fec:	00010a24 	andeq	r0, r1, r4, lsr #20
    5ff0:	1e000300 	cdpne	3, 0, cr0, cr0, cr0, {0}
    5ff4:	000022c2 	andeq	r2, r0, r2, asr #5
    5ff8:	086b7001 	stmdaeq	fp!, {r0, ip, sp, lr}^
    5ffc:	03050000 	movweq	r0, #20480	; 0x5000
    6000:	08005edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, lr}
    6004:	00084a04 	andeq	r4, r8, r4, lsl #20
    6008:	02070000 	andeq	r0, r7, #0
    600c:	00040000 	andeq	r0, r4, r0
    6010:	00001209 	andeq	r1, r0, r9, lsl #4
    6014:	07e10104 	strbeq	r0, [r1, r4, lsl #2]!
    6018:	0c010000 	stceq	0, cr0, [r1], {-0}
    601c:	01000023 	tsteq	r0, r3, lsr #32
    6020:	c4000001 	strgt	r0, [r0], #-1
    6024:	8c08004e 	stchi	0, cr0, [r8], {78}	; 0x4e
    6028:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    602c:	0200000f 	andeq	r0, r0, #15
    6030:	093c0504 	ldmdbeq	ip!, {r2, r8, sl}
    6034:	02020000 	andeq	r0, r2, #0
    6038:	00090005 	andeq	r0, r9, r5
    603c:	06010200 	streq	r0, [r1], -r0, lsl #4
    6040:	00000a9d 	muleq	r0, sp, sl
    6044:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    6048:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    604c:	02000000 	andeq	r0, r0, #0
    6050:	0a620704 	beq	1887c68 <__Stack_Size+0x1887868>
    6054:	02020000 	andeq	r0, r2, #0
    6058:	000c5407 	andeq	r5, ip, r7, lsl #8
    605c:	38750300 	ldmdacc	r5!, {r8, r9}^
    6060:	5d290200 	sfmpl	f0, 4, [r9, #-0]
    6064:	02000000 	andeq	r0, r0, #0
    6068:	0a9b0801 	beq	fe6c8074 <SCS_BASE+0x1e6ba074>
    606c:	b0040000 	andlt	r0, r4, r0
    6070:	02000004 	andeq	r0, r0, #4
    6074:	00006f2f 	andeq	r6, r0, pc, lsr #30
    6078:	00450500 	subeq	r0, r5, r0, lsl #10
    607c:	bb040000 	bllt	106084 <__Stack_Size+0x105c84>
    6080:	0200001d 	andeq	r0, r0, #29
    6084:	00007f33 	andeq	r7, r0, r3, lsr pc
    6088:	006f0600 	rsbeq	r0, pc, r0, lsl #12
    608c:	01070000 	mrseq	r0, (UNDEF: 7)
    6090:	00993902 	addseq	r3, r9, r2, lsl #18
    6094:	8d080000 	stchi	0, cr0, [r8, #-0]
    6098:	00000018 	andeq	r0, r0, r8, lsl r0
    609c:	54455309 	strbpl	r5, [r5], #-777	; 0x309
    60a0:	04000100 	streq	r0, [r0], #-256	; 0x100
    60a4:	00000884 	andeq	r0, r0, r4, lsl #17
    60a8:	00843902 	addeq	r3, r4, r2, lsl #18
    60ac:	01070000 	mrseq	r0, (UNDEF: 7)
    60b0:	00b93b02 	adcseq	r3, r9, r2, lsl #22
    60b4:	b5080000 	strlt	r0, [r8, #-0]
    60b8:	00000005 	andeq	r0, r0, r5
    60bc:	000a3b08 	andeq	r3, sl, r8, lsl #22
    60c0:	04000100 	streq	r0, [r0], #-256	; 0x100
    60c4:	0000011b 	andeq	r0, r0, fp, lsl r1
    60c8:	00a43b02 	adceq	r3, r4, r2, lsl #22
    60cc:	04020000 	streq	r0, [r2], #-0
    60d0:	000a5907 	andeq	r5, sl, r7, lsl #18
    60d4:	03100a00 	tsteq	r0, #0, 20
    60d8:	01090202 	tsteq	r9, r2, lsl #4
    60dc:	320b0000 	andcc	r0, fp, #0
    60e0:	03000023 	movweq	r0, #35	; 0x23
    60e4:	00640204 	rsbeq	r0, r4, r4, lsl #4
    60e8:	0b000000 	bleq	60f0 <__Stack_Size+0x5cf0>
    60ec:	0000235f 	andeq	r2, r0, pc, asr r3
    60f0:	64020503 	strvs	r0, [r2], #-1283	; 0x503
    60f4:	04000000 	streq	r0, [r0], #-0
    60f8:	4c41560c 	mcrrmi	6, 0, r5, r1, cr12
    60fc:	02060300 	andeq	r0, r6, #0, 6
    6100:	00000064 	andeq	r0, r0, r4, rrx
    6104:	23060b08 	movwcs	r0, #27400	; 0x6b08
    6108:	07030000 	streq	r0, [r3, -r0]
    610c:	00007402 	andeq	r7, r0, r2, lsl #8
    6110:	0d000c00 	stceq	12, cr0, [r0, #-0]
    6114:	00002364 	andeq	r2, r0, r4, ror #6
    6118:	cb020803 	blgt	8812c <__Stack_Size+0x87d2c>
    611c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6120:	00002347 	andeq	r2, r0, r7, asr #6
    6124:	4ec42b01 	vdivmi.f64	d18, d4, d1
    6128:	00180800 	andseq	r0, r8, r0, lsl #16
    612c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6130:	00000138 	andeq	r0, r0, r8, lsr r1
    6134:	0023740f 	eoreq	r7, r3, pc, lsl #8
    6138:	3a2b0100 	bcc	ac6540 <__Stack_Size+0xac6140>
    613c:	01000000 	mrseq	r0, (UNDEF: 0)
    6140:	100e0050 	andne	r0, lr, r0, asr r0
    6144:	01000002 	tsteq	r0, r2
    6148:	004edc42 	subeq	sp, lr, r2, asr #24
    614c:	00000c08 	andeq	r0, r0, r8, lsl #24
    6150:	5b9c0100 	blpl	fe706558 <SCS_BASE+0x1e6f8558>
    6154:	0f000001 	svceq	0x00000001
    6158:	0000021b 	andeq	r0, r0, fp, lsl r2
    615c:	003a4201 	eorseq	r4, sl, r1, lsl #4
    6160:	50010000 	andpl	r0, r1, r0
    6164:	09ba0e00 	ldmibeq	sl!, {r9, sl, fp}
    6168:	55010000 	strpl	r0, [r1, #-0]
    616c:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
    6170:	00000028 	andeq	r0, r0, r8, lsr #32
    6174:	01809c01 	orreq	r9, r0, r1, lsl #24
    6178:	37100000 	ldrcc	r0, [r0, -r0]
    617c:	01000023 	tsteq	r0, r3, lsr #32
    6180:	00003a55 	andeq	r3, r0, r5, asr sl
    6184:	002ef600 	eoreq	pc, lr, r0, lsl #12
    6188:	550e0000 	strpl	r0, [lr, #-0]
    618c:	01000008 	tsteq	r0, r8
    6190:	004f1070 	subeq	r1, pc, r0, ror r0	; <UNPREDICTABLE>
    6194:	00001808 	andeq	r1, r0, r8, lsl #16
    6198:	a39c0100 	orrsge	r0, ip, #0, 2
    619c:	0f000001 	svceq	0x00000001
    61a0:	00001591 	muleq	r0, r1, r5
    61a4:	00b97001 	adcseq	r7, r9, r1
    61a8:	50010000 	andpl	r0, r1, r0
    61ac:	22d01100 	sbcscs	r1, r0, #0, 2
    61b0:	86010000 	strhi	r0, [r1], -r0
    61b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    61b8:	08004f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, lr}
    61bc:	0000000c 	andeq	r0, r0, ip
    61c0:	e3129c01 	tst	r2, #256	; 0x100
    61c4:	01000022 	tsteq	r0, r2, lsr #32
    61c8:	00009996 	muleq	r0, r6, r9
    61cc:	004f3400 	subeq	r3, pc, r0, lsl #8
    61d0:	00001c08 	andeq	r1, r0, r8, lsl #24
    61d4:	109c0100 	addsne	r0, ip, r0, lsl #2
    61d8:	000022f9 	strdeq	r2, [r0], -r9
    61dc:	00539601 	subseq	r9, r3, r1, lsl #12
    61e0:	2f310000 	svccs	0x00310000
    61e4:	f7130000 			; <UNDEFINED> instruction: 0xf7130000
    61e8:	01000020 	tsteq	r0, r0, lsr #32
    61ec:	00003a98 	muleq	r0, r8, sl
    61f0:	002f5200 	eoreq	r5, pc, r0, lsl #4
    61f4:	6d741400 	cfldrdvs	mvd1, [r4, #-0]
    61f8:	98010070 	stmdals	r1, {r4, r5, r6}
    61fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    6200:	00002f71 	andeq	r2, r0, r1, ror pc
    6204:	00162013 	andseq	r2, r6, r3, lsl r0
    6208:	99990100 	ldmibls	r9, {r8}
    620c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    6210:	0000002f 	andeq	r0, r0, pc, lsr #32
    6214:	001f3e00 	andseq	r3, pc, r0, lsl #28
    6218:	31000400 	tstcc	r0, r0, lsl #8
    621c:	04000013 	streq	r0, [r0], #-19
    6220:	0007e101 	andeq	lr, r7, r1, lsl #2
    6224:	266e0100 	strbtcs	r0, [lr], -r0, lsl #2
    6228:	01010000 	mrseq	r0, (UNDEF: 1)
    622c:	4f500000 	svcmi	0x00500000
    6230:	0a440800 	beq	1108238 <__Stack_Size+0x1107e38>
    6234:	0fbe0000 	svceq	0x00be0000
    6238:	04020000 	streq	r0, [r2], #-0
    623c:	00093c05 	andeq	r3, r9, r5, lsl #24
    6240:	05020200 	streq	r0, [r2, #-512]	; 0x200
    6244:	00000900 	andeq	r0, r0, r0, lsl #18
    6248:	9d060102 	stflss	f0, [r6, #-8]
    624c:	0300000a 	movweq	r0, #10
    6250:	00323375 	eorseq	r3, r2, r5, ror r3
    6254:	00452702 	subeq	r2, r5, r2, lsl #14
    6258:	04020000 	streq	r0, [r2], #-0
    625c:	000a6207 	andeq	r6, sl, r7, lsl #4
    6260:	31750300 	cmncc	r5, r0, lsl #6
    6264:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    6268:	00000057 	andeq	r0, r0, r7, asr r0
    626c:	54070202 	strpl	r0, [r7], #-514	; 0x202
    6270:	0300000c 	movweq	r0, #12
    6274:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    6278:	00006829 	andeq	r6, r0, r9, lsr #16
    627c:	08010200 	stmdaeq	r1, {r9}
    6280:	00000a9b 	muleq	r0, fp, sl
    6284:	0004b004 	andeq	fp, r4, r4
    6288:	7a2f0200 	bvc	bc6a90 <__Stack_Size+0xbc6690>
    628c:	05000000 	streq	r0, [r0, #-0]
    6290:	00000045 	andeq	r0, r0, r5, asr #32
    6294:	00030b04 	andeq	r0, r3, r4, lsl #22
    6298:	8a300200 	bhi	c06aa0 <__Stack_Size+0xc066a0>
    629c:	05000000 	streq	r0, [r0, #-0]
    62a0:	00000057 	andeq	r0, r0, r7, asr r0
    62a4:	39020106 	stmdbcc	r2, {r1, r2, r8}
    62a8:	000000a4 	andeq	r0, r0, r4, lsr #1
    62ac:	00188d07 	andseq	r8, r8, r7, lsl #26
    62b0:	53080000 	movwpl	r0, #32768	; 0x8000
    62b4:	01005445 	tsteq	r0, r5, asr #8
    62b8:	08840400 	stmeq	r4, {sl}
    62bc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    62c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    62c4:	00201504 	eoreq	r1, r0, r4, lsl #10
    62c8:	8f390200 	svchi	0x00390200
    62cc:	06000000 	streq	r0, [r0], -r0
    62d0:	cf3b0201 	svcgt	0x003b0201
    62d4:	07000000 	streq	r0, [r0, -r0]
    62d8:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    62dc:	0a3b0700 	beq	ec7ee4 <__Stack_Size+0xec7ae4>
    62e0:	00010000 	andeq	r0, r1, r0
    62e4:	00011b04 	andeq	r1, r1, r4, lsl #22
    62e8:	ba3b0200 	blt	ec6af0 <__Stack_Size+0xec66f0>
    62ec:	02000000 	andeq	r0, r0, #0
    62f0:	0a590704 	beq	1647f08 <__Stack_Size+0x1647b08>
    62f4:	50090000 	andpl	r0, r9, r0
    62f8:	f2020b03 	vqdmulh.s<illegal width 8>	d0, d2, d3
    62fc:	0a000002 	beq	630c <__Stack_Size+0x5f0c>
    6300:	00315243 	eorseq	r5, r1, r3, asr #4
    6304:	7f020d03 	svcvc	0x00020d03
    6308:	00000000 	andeq	r0, r0, r0
    630c:	0008ba0b 	andeq	fp, r8, fp, lsl #20
    6310:	020e0300 	andeq	r0, lr, #0, 6
    6314:	0000004c 	andeq	r0, r0, ip, asr #32
    6318:	52430a02 	subpl	r0, r3, #8192	; 0x2000
    631c:	0f030032 	svceq	0x00030032
    6320:	00007f02 	andeq	r7, r0, r2, lsl #30
    6324:	c40b0400 	strgt	r0, [fp], #-1024	; 0x400
    6328:	03000008 	movweq	r0, #8
    632c:	004c0210 	subeq	r0, ip, r0, lsl r2
    6330:	0b060000 	bleq	186338 <__Stack_Size+0x185f38>
    6334:	00000641 	andeq	r0, r0, r1, asr #12
    6338:	7f021103 	svcvc	0x00021103
    633c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6340:	0008ce0b 	andeq	ip, r8, fp, lsl #28
    6344:	02120300 	andseq	r0, r2, #0, 6
    6348:	0000004c 	andeq	r0, r0, ip, asr #32
    634c:	04df0b0a 	ldrbeq	r0, [pc], #2826	; 6354 <__Stack_Size+0x5f54>
    6350:	13030000 	movwne	r0, #12288	; 0x3000
    6354:	00007f02 	andeq	r7, r0, r2, lsl #30
    6358:	d80b0c00 	stmdale	fp, {sl, fp}
    635c:	03000008 	movweq	r0, #8
    6360:	004c0214 	subeq	r0, ip, r4, lsl r2
    6364:	0a0e0000 	beq	38636c <__Stack_Size+0x385f6c>
    6368:	03005253 	movweq	r5, #595	; 0x253
    636c:	007f0215 	rsbseq	r0, pc, r5, lsl r2	; <UNPREDICTABLE>
    6370:	0b100000 	bleq	406378 <__Stack_Size+0x405f78>
    6374:	000008e2 	andeq	r0, r0, r2, ror #17
    6378:	4c021603 	stcmi	6, cr1, [r2], {3}
    637c:	12000000 	andne	r0, r0, #0
    6380:	5247450a 	subpl	r4, r7, #41943040	; 0x2800000
    6384:	02170300 	andseq	r0, r7, #0, 6
    6388:	0000007f 	andeq	r0, r0, pc, ror r0
    638c:	08ec0b14 	stmiaeq	ip!, {r2, r4, r8, r9, fp}^
    6390:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    6394:	00004c02 	andeq	r4, r0, r2, lsl #24
    6398:	630b1600 	movwvs	r1, #46592	; 0xb600
    639c:	03000003 	movweq	r0, #3
    63a0:	007f0219 	rsbseq	r0, pc, r9, lsl r2	; <UNPREDICTABLE>
    63a4:	0b180000 	bleq	6063ac <__Stack_Size+0x605fac>
    63a8:	000008f6 	strdeq	r0, [r0], -r6
    63ac:	4c021a03 	stcmi	10, cr1, [r2], {3}
    63b0:	1a000000 	bne	63b8 <__Stack_Size+0x5fb8>
    63b4:	0003690b 	andeq	r6, r3, fp, lsl #18
    63b8:	021b0300 	andseq	r0, fp, #0, 6
    63bc:	0000007f 	andeq	r0, r0, pc, ror r0
    63c0:	0ce50b1c 	vstmiaeq	r5!, {d16-d29}
    63c4:	1c030000 	stcne	0, cr0, [r3], {-0}
    63c8:	00004c02 	andeq	r4, r0, r2, lsl #24
    63cc:	800b1e00 	andhi	r1, fp, r0, lsl #28
    63d0:	03000005 	movweq	r0, #5
    63d4:	007f021d 	rsbseq	r0, pc, sp, lsl r2	; <UNPREDICTABLE>
    63d8:	0b200000 	bleq	8063e0 <__Stack_Size+0x805fe0>
    63dc:	0000090a 	andeq	r0, r0, sl, lsl #18
    63e0:	4c021e03 	stcmi	14, cr1, [r2], {3}
    63e4:	22000000 	andcs	r0, r0, #0
    63e8:	544e430a 	strbpl	r4, [lr], #-778	; 0x30a
    63ec:	021f0300 	andseq	r0, pc, #0, 6
    63f0:	0000007f 	andeq	r0, r0, pc, ror r0
    63f4:	09140b24 	ldmdbeq	r4, {r2, r5, r8, r9, fp}
    63f8:	20030000 	andcs	r0, r3, r0
    63fc:	00004c02 	andeq	r4, r0, r2, lsl #24
    6400:	500a2600 	andpl	r2, sl, r0, lsl #12
    6404:	03004353 	movweq	r4, #851	; 0x353
    6408:	007f0221 	rsbseq	r0, pc, r1, lsr #4
    640c:	0b280000 	bleq	a06414 <__Stack_Size+0xa06014>
    6410:	00000b17 	andeq	r0, r0, r7, lsl fp
    6414:	4c022203 	sfmmi	f2, 4, [r2], {3}
    6418:	2a000000 	bcs	6420 <__Stack_Size+0x6020>
    641c:	5252410a 	subspl	r4, r2, #-2147483646	; 0x80000002
    6420:	02230300 	eoreq	r0, r3, #0, 6
    6424:	0000007f 	andeq	r0, r0, pc, ror r0
    6428:	0b220b2c 	bleq	8890e0 <__Stack_Size+0x888ce0>
    642c:	24030000 	strcs	r0, [r3], #-0
    6430:	00004c02 	andeq	r4, r0, r2, lsl #24
    6434:	520a2e00 	andpl	r2, sl, #0, 28
    6438:	03005243 	movweq	r5, #579	; 0x243
    643c:	007f0225 	rsbseq	r0, pc, r5, lsr #4
    6440:	0b300000 	bleq	c06448 <__Stack_Size+0xc06048>
    6444:	00000b2d 	andeq	r0, r0, sp, lsr #22
    6448:	4c022603 	stcmi	6, cr2, [r2], {3}
    644c:	32000000 	andcc	r0, r0, #0
    6450:	00034f0b 	andeq	r4, r3, fp, lsl #30
    6454:	02270300 	eoreq	r0, r7, #0, 6
    6458:	0000007f 	andeq	r0, r0, pc, ror r0
    645c:	0b380b34 	bleq	e09134 <__Stack_Size+0xe08d34>
    6460:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    6464:	00004c02 	andeq	r4, r0, r2, lsl #24
    6468:	540b3600 	strpl	r3, [fp], #-1536	; 0x600
    646c:	03000003 	movweq	r0, #3
    6470:	007f0229 	rsbseq	r0, pc, r9, lsr #4
    6474:	0b380000 	bleq	e0647c <__Stack_Size+0xe0607c>
    6478:	00000b43 	andeq	r0, r0, r3, asr #22
    647c:	4c022a03 	stcmi	10, cr2, [r2], {3}
    6480:	3a000000 	bcc	6488 <__Stack_Size+0x6088>
    6484:	0003590b 	andeq	r5, r3, fp, lsl #18
    6488:	022b0300 	eoreq	r0, fp, #0, 6
    648c:	0000007f 	andeq	r0, r0, pc, ror r0
    6490:	0b4e0b3c 	bleq	1389188 <__Stack_Size+0x1388d88>
    6494:	2c030000 	stccs	0, cr0, [r3], {-0}
    6498:	00004c02 	andeq	r4, r0, r2, lsl #24
    649c:	5e0b3e00 	cdppl	14, 0, cr3, cr11, cr0, {0}
    64a0:	03000003 	movweq	r0, #3
    64a4:	007f022d 	rsbseq	r0, pc, sp, lsr #4
    64a8:	0b400000 	bleq	10064b0 <__Stack_Size+0x10060b0>
    64ac:	00000b59 	andeq	r0, r0, r9, asr fp
    64b0:	4c022e03 	stcmi	14, cr2, [r2], {3}
    64b4:	42000000 	andmi	r0, r0, #0
    64b8:	0003000b 	andeq	r0, r3, fp
    64bc:	022f0300 	eoreq	r0, pc, #0, 6
    64c0:	0000007f 	andeq	r0, r0, pc, ror r0
    64c4:	0b640b44 	bleq	19091dc <__Stack_Size+0x1908ddc>
    64c8:	30030000 	andcc	r0, r3, r0
    64cc:	00004c02 	andeq	r4, r0, r2, lsl #24
    64d0:	440a4600 	strmi	r4, [sl], #-1536	; 0x600
    64d4:	03005243 	movweq	r5, #579	; 0x243
    64d8:	007f0231 	rsbseq	r0, pc, r1, lsr r2	; <UNPREDICTABLE>
    64dc:	0b480000 	bleq	12064e4 <__Stack_Size+0x12060e4>
    64e0:	00000b6f 	andeq	r0, r0, pc, ror #22
    64e4:	4c023203 	sfmmi	f3, 4, [r2], {3}
    64e8:	4a000000 	bmi	64f0 <__Stack_Size+0x60f0>
    64ec:	0009450b 	andeq	r4, r9, fp, lsl #10
    64f0:	02330300 	eorseq	r0, r3, #0, 6
    64f4:	0000007f 	andeq	r0, r0, pc, ror r0
    64f8:	0b7a0b4c 	bleq	1e89230 <__Stack_Size+0x1e88e30>
    64fc:	34030000 	strcc	r0, [r3], #-0
    6500:	00004c02 	andeq	r4, r0, r2, lsl #24
    6504:	0c004e00 	stceq	14, cr4, [r0], {-0}
    6508:	00000297 	muleq	r0, r7, r2
    650c:	e1023503 	tst	r2, r3, lsl #10
    6510:	0d000000 	stceq	0, cr0, [r0, #-0]
    6514:	431b040a 	tstmi	fp, #167772160	; 0xa000000
    6518:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    651c:	00000068 	andeq	r0, r0, r8, rrx
    6520:	004c1d04 	subeq	r1, ip, r4, lsl #26
    6524:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6528:	000005fd 	strdeq	r0, [r0], -sp
    652c:	004c1e04 	subeq	r1, ip, r4, lsl #28
    6530:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6534:	00000751 	andeq	r0, r0, r1, asr r7
    6538:	004c1f04 	subeq	r1, ip, r4, lsl #30
    653c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6540:	000002cc 	andeq	r0, r0, ip, asr #5
    6544:	004c2004 	subeq	r2, ip, r4
    6548:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    654c:	0000052f 	andeq	r0, r0, pc, lsr #10
    6550:	005e2104 	subseq	r2, lr, r4, lsl #2
    6554:	00080000 	andeq	r0, r8, r0
    6558:	000bfd04 	andeq	pc, fp, r4, lsl #26
    655c:	fe220400 	cdp2	4, 2, cr0, cr2, cr0, {0}
    6560:	0d000002 	stceq	0, cr0, [r0, #-8]
    6564:	b7250410 			; <UNDEFINED> instruction: 0xb7250410
    6568:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    656c:	000008a1 	andeq	r0, r0, r1, lsr #17
    6570:	004c2704 	subeq	r2, ip, r4, lsl #14
    6574:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6578:	000002de 	ldrdeq	r0, [r0], -lr
    657c:	004c2804 	subeq	r2, ip, r4, lsl #16
    6580:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6584:	00000a16 	andeq	r0, r0, r6, lsl sl
    6588:	004c2904 	subeq	r2, ip, r4, lsl #18
    658c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6590:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6594:	004c2a04 	subeq	r2, ip, r4, lsl #20
    6598:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    659c:	000000ce 	andeq	r0, r0, lr, asr #1
    65a0:	004c2b04 	subeq	r2, ip, r4, lsl #22
    65a4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    65a8:	0000054c 	andeq	r0, r0, ip, asr #10
    65ac:	004c2c04 	subeq	r2, ip, r4, lsl #24
    65b0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    65b4:	00000200 	andeq	r0, r0, r0, lsl #4
    65b8:	004c2d04 	subeq	r2, ip, r4, lsl #26
    65bc:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    65c0:	000006d7 	ldrdeq	r0, [r0], -r7
    65c4:	004c2e04 	subeq	r2, ip, r4, lsl #28
    65c8:	000e0000 	andeq	r0, lr, r0
    65cc:	00009b04 	andeq	r9, r0, r4, lsl #22
    65d0:	4e2f0400 	cdpmi	4, 2, cr0, cr15, cr0, {0}
    65d4:	0d000003 	stceq	0, cr0, [r0, #-12]
    65d8:	0732040a 	ldreq	r0, [r2, -sl, lsl #8]!
    65dc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    65e0:	0000298c 	andeq	r2, r0, ip, lsl #19
    65e4:	004c3404 	subeq	r3, ip, r4, lsl #8
    65e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    65ec:	00002a73 	andeq	r2, r0, r3, ror sl
    65f0:	004c3504 	subeq	r3, ip, r4, lsl #10
    65f4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    65f8:	00002a17 	andeq	r2, r0, r7, lsl sl
    65fc:	004c3604 	subeq	r3, ip, r4, lsl #12
    6600:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6604:	00002761 	andeq	r2, r0, r1, ror #14
    6608:	004c3704 	subeq	r3, ip, r4, lsl #14
    660c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    6610:	00002c08 	andeq	r2, r0, r8, lsl #24
    6614:	004c3804 	subeq	r3, ip, r4, lsl #16
    6618:	00080000 	andeq	r0, r8, r0
    661c:	00245e04 	eoreq	r5, r4, r4, lsl #28
    6620:	c2390400 	eorsgt	r0, r9, #0, 8
    6624:	0d000003 	stceq	0, cr0, [r0, #-12]
    6628:	6f3c040e 	svcvs	0x003c040e
    662c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    6630:	00002a65 	andeq	r2, r0, r5, ror #20
    6634:	004c3e04 	subeq	r3, ip, r4, lsl #28
    6638:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    663c:	0000257e 	andeq	r2, r0, lr, ror r5
    6640:	004c3f04 	subeq	r3, ip, r4, lsl #30
    6644:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6648:	00002734 	andeq	r2, r0, r4, lsr r7
    664c:	004c4004 	subeq	r4, ip, r4
    6650:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6654:	00002b46 	andeq	r2, r0, r6, asr #22
    6658:	004c4104 	subeq	r4, ip, r4, lsl #2
    665c:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    6660:	0000282a 	andeq	r2, r0, sl, lsr #16
    6664:	004c4204 	subeq	r4, ip, r4, lsl #4
    6668:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    666c:	000026d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6670:	004c4304 	subeq	r4, ip, r4, lsl #6
    6674:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    6678:	00002af6 	strdeq	r2, [r0], -r6
    667c:	004c4404 	subeq	r4, ip, r4, lsl #8
    6680:	000c0000 	andeq	r0, ip, r0
    6684:	0027b704 	eoreq	fp, r7, r4, lsl #14
    6688:	12450400 	subne	r0, r5, #0, 8
    668c:	0f000004 	svceq	0x00000004
    6690:	00002c3d 	andeq	r2, r0, sp, lsr ip
    6694:	01051801 	tsteq	r5, r1, lsl #16
    6698:	000004ac 	andeq	r0, r0, ip, lsr #9
    669c:	00253610 	eoreq	r3, r5, r0, lsl r6
    66a0:	05180100 	ldreq	r0, [r8, #-256]	; 0x100
    66a4:	000004ac 	andeq	r0, r0, ip, lsr #9
    66a8:	00247010 	eoreq	r7, r4, r0, lsl r0
    66ac:	05180100 	ldreq	r0, [r8, #-256]	; 0x100
    66b0:	0000004c 	andeq	r0, r0, ip, asr #32
    66b4:	00251c11 	eoreq	r1, r5, r1, lsl ip
    66b8:	051a0100 	ldreq	r0, [sl, #-256]	; 0x100
    66bc:	0000004c 	andeq	r0, r0, ip, asr #32
    66c0:	f2041200 	vhsub.s8	d1, d4, d0
    66c4:	13000002 	movwne	r0, #2
    66c8:	000025b7 			; <UNDEFINED> instruction: 0x000025b7
    66cc:	500bed01 	andpl	lr, fp, r1, lsl #26
    66d0:	3208004f 	andcc	r0, r8, #79	; 0x4f
    66d4:	01000000 	mrseq	r0, (UNDEF: 0)
    66d8:	0005279c 	muleq	r5, ip, r7
    66dc:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    66e0:	ed010000 	stc	0, cr0, [r1, #-0]
    66e4:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    66e8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    66ec:	00002a73 	andeq	r2, r0, r3, ror sl
    66f0:	4c0bed01 	stcmi	13, cr14, [fp], {1}
    66f4:	dd000000 	stcle	0, cr0, [r0, #-0]
    66f8:	1500002f 	strne	r0, [r0, #-47]	; 0x2f
    66fc:	00002a17 	andeq	r2, r0, r7, lsl sl
    6700:	4c0bed01 	stcmi	13, cr14, [fp], {1}
    6704:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    6708:	1500002f 	strne	r0, [r0, #-47]	; 0x2f
    670c:	00002c08 	andeq	r2, r0, r8, lsl #24
    6710:	4c0bee01 	stcmi	14, cr14, [fp], {1}
    6714:	1f000000 	svcne	0x00000000
    6718:	16000030 			; <UNDEFINED> instruction: 0x16000030
    671c:	0000297a 	andeq	r2, r0, sl, ror r9
    6720:	4c0bf001 	stcmi	0, cr15, [fp], {1}
    6724:	40000000 	andmi	r0, r0, r0
    6728:	16000030 			; <UNDEFINED> instruction: 0x16000030
    672c:	000026a3 	andeq	r2, r0, r3, lsr #13
    6730:	4c0bf001 	stcmi	0, cr15, [fp], {1}
    6734:	7b000000 	blvc	673c <__Stack_Size+0x633c>
    6738:	00000030 	andeq	r0, r0, r0, lsr r0
    673c:	00244013 	eoreq	r4, r4, r3, lsl r0
    6740:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    6744:	08004f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, lr}
    6748:	0000003a 	andeq	r0, r0, sl, lsr r0
    674c:	05ac9c01 	streq	r9, [ip, #3073]!	; 0xc01
    6750:	36140000 	ldrcc	r0, [r4], -r0
    6754:	01000025 	tsteq	r0, r5, lsr #32
    6758:	04ac0c1b 	strteq	r0, [ip], #3099	; 0xc1b
    675c:	50010000 	andpl	r0, r1, r0
    6760:	002a7315 	eoreq	r7, sl, r5, lsl r3
    6764:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    6768:	0000004c 	andeq	r0, r0, ip, asr #32
    676c:	000030a5 	andeq	r3, r0, r5, lsr #1
    6770:	002a1715 	eoreq	r1, sl, r5, lsl r7
    6774:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    6778:	0000004c 	andeq	r0, r0, ip, asr #32
    677c:	000030c6 	andeq	r3, r0, r6, asr #1
    6780:	002c0815 	eoreq	r0, ip, r5, lsl r8
    6784:	0c1c0100 	ldfeqs	f0, [ip], {-0}
    6788:	0000004c 	andeq	r0, r0, ip, asr #32
    678c:	000030e7 	andeq	r3, r0, r7, ror #1
    6790:	00297a16 	eoreq	r7, r9, r6, lsl sl
    6794:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    6798:	0000004c 	andeq	r0, r0, ip, asr #32
    679c:	00003108 	andeq	r3, r0, r8, lsl #2
    67a0:	0026a316 	eoreq	sl, r6, r6, lsl r3
    67a4:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    67a8:	0000004c 	andeq	r0, r0, ip, asr #32
    67ac:	00003132 	andeq	r3, r0, r2, lsr r1
    67b0:	706d7417 	rsbvc	r7, sp, r7, lsl r4
    67b4:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    67b8:	0000004c 	andeq	r0, r0, ip, asr #32
    67bc:	0000315c 	andeq	r3, r0, ip, asr r1
    67c0:	0aae1800 	beq	feb8c7c8 <SCS_BASE+0x1eb7e7c8>
    67c4:	86010000 	strhi	r0, [r1], -r0
    67c8:	08004fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, lr}
    67cc:	000000c8 	andeq	r0, r0, r8, asr #1
    67d0:	06b89c01 	ldrteq	r9, [r8], r1, lsl #24
    67d4:	36190000 	ldrcc	r0, [r9], -r0
    67d8:	01000025 	tsteq	r0, r5, lsr #32
    67dc:	0004ac86 	andeq	sl, r4, r6, lsl #25
    67e0:	00318f00 	eorseq	r8, r1, r0, lsl #30
    67e4:	4fe41a00 	svcmi	0x00e41a00
    67e8:	1f170800 	svcne	0x00170800
    67ec:	05e80000 	strbeq	r0, [r8, #0]!
    67f0:	011b0000 	tsteq	fp, r0
    67f4:	1b310151 	blne	c46d40 <__Stack_Size+0xc46940>
    67f8:	31015001 	tstcc	r1, r1
    67fc:	50141a00 	andspl	r1, r4, r0, lsl #20
    6800:	1f2e0800 	svcne	0x002e0800
    6804:	06020000 	streq	r0, [r2], -r0
    6808:	011b0000 	tsteq	fp, r0
    680c:	1b310151 	blne	c46d58 <__Stack_Size+0xc46958>
    6810:	0a035001 	beq	da81c <__Stack_Size+0xda41c>
    6814:	1a000800 	bne	881c <__Stack_Size+0x841c>
    6818:	08005022 	stmdaeq	r0, {r1, r5, ip, lr}
    681c:	00001f17 	andeq	r1, r0, r7, lsl pc
    6820:	0000061a 	andeq	r0, r0, sl, lsl r6
    6824:	0151011b 	cmpeq	r1, fp, lsl r1
    6828:	50011b31 	andpl	r1, r1, r1, lsr fp
    682c:	1c003201 	sfmne	f3, 4, [r0], {1}
    6830:	0800502e 	stmdaeq	r0, {r1, r2, r3, r5, ip, lr}
    6834:	00001f17 	andeq	r1, r0, r7, lsl pc
    6838:	0000062d 	andeq	r0, r0, sp, lsr #12
    683c:	0151011b 	cmpeq	r1, fp, lsl r1
    6840:	361a0030 			; <UNDEFINED> instruction: 0x361a0030
    6844:	17080050 	smlsdne	r8, r0, r0, r0
    6848:	4500001f 	strmi	r0, [r0, #-31]
    684c:	1b000006 	blne	686c <__Stack_Size+0x646c>
    6850:	31015101 	tstcc	r1, r1, lsl #2
    6854:	0150011b 	cmpeq	r0, fp, lsl r1
    6858:	421a0034 	andsmi	r0, sl, #52	; 0x34
    685c:	17080050 	smlsdne	r8, r0, r0, r0
    6860:	5d00001f 	stcpl	0, cr0, [r0, #-124]	; 0xffffff84
    6864:	1b000006 	blne	6884 <__Stack_Size+0x6484>
    6868:	31015101 	tstcc	r1, r1, lsl #2
    686c:	0150011b 	cmpeq	r0, fp, lsl r1
    6870:	4e1a0038 	mrcmi	0, 0, r0, cr10, cr8, {1}
    6874:	17080050 	smlsdne	r8, r0, r0, r0
    6878:	7500001f 	strvc	r0, [r0, #-31]
    687c:	1b000006 	blne	689c <__Stack_Size+0x649c>
    6880:	31015101 	tstcc	r1, r1, lsl #2
    6884:	0150011b 	cmpeq	r0, fp, lsl r1
    6888:	5a1a0040 	bpl	686990 <__Stack_Size+0x686590>
    688c:	17080050 	smlsdne	r8, r0, r0, r0
    6890:	8e00001f 	mcrhi	0, 0, r0, cr0, cr15, {0}
    6894:	1b000006 	blne	68b4 <__Stack_Size+0x64b4>
    6898:	31015101 	tstcc	r1, r1, lsl #2
    689c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    68a0:	1a002008 	bne	e8c8 <__Stack_Size+0xe4c8>
    68a4:	08005068 	stmdaeq	r0, {r3, r5, r6, ip, lr}
    68a8:	00001f2e 	andeq	r1, r0, lr, lsr #30
    68ac:	000006a8 	andeq	r0, r0, r8, lsr #13
    68b0:	0151011b 	cmpeq	r1, fp, lsl r1
    68b4:	50011b31 	andpl	r1, r1, r1, lsr fp
    68b8:	20000a03 	andcs	r0, r0, r3, lsl #20
    68bc:	50761d00 	rsbspl	r1, r6, r0, lsl #26
    68c0:	1f2e0800 	svcne	0x002e0800
    68c4:	011b0000 	tsteq	fp, r0
    68c8:	00300151 	eorseq	r0, r0, r1, asr r1
    68cc:	06e81800 	strbteq	r1, [r8], r0, lsl #16
    68d0:	c6010000 	strgt	r0, [r1], -r0
    68d4:	08005084 	stmdaeq	r0, {r2, r7, ip, lr}
    68d8:	0000003c 	andeq	r0, r0, ip, lsr r0
    68dc:	06e89c01 	strbteq	r9, [r8], r1, lsl #24
    68e0:	361e0000 	ldrcc	r0, [lr], -r0
    68e4:	01000025 	tsteq	r0, r5, lsr #32
    68e8:	0004acc6 	andeq	sl, r4, r6, asr #25
    68ec:	1e500100 	rdfnes	f0, f0, f0
    68f0:	000026fc 	strdeq	r2, [r0], -ip
    68f4:	06e8c601 	strbteq	ip, [r8], r1, lsl #12
    68f8:	51010000 	mrspl	r0, (UNDEF: 1)
    68fc:	43041200 	movwmi	r1, #16896	; 0x4200
    6900:	18000003 	stmdane	r0, {r0, r1}
    6904:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    6908:	50c0ed01 	sbcpl	lr, r0, r1, lsl #26
    690c:	00740800 	rsbseq	r0, r4, r0, lsl #16
    6910:	9c010000 	stcls	0, cr0, [r1], {-0}
    6914:	0000074b 	andeq	r0, r0, fp, asr #14
    6918:	0025361e 	eoreq	r3, r5, lr, lsl r6
    691c:	aced0100 	stfgee	f0, [sp]
    6920:	01000004 	tsteq	r0, r4
    6924:	28f71e50 	ldmcs	r7!, {r4, r6, r9, sl, fp, ip}^
    6928:	ed010000 	stc	0, cr0, [r1, #-0]
    692c:	0000074b 	andeq	r0, r0, fp, asr #14
    6930:	221f5101 	andscs	r5, pc, #1073741824	; 0x40000000
    6934:	01000027 	tsteq	r0, r7, lsr #32
    6938:	00004cef 	andeq	r4, r0, pc, ror #25
    693c:	00326a00 	eorseq	r6, r2, r0, lsl #20
    6940:	26a31f00 	strtcs	r1, [r3], r0, lsl #30
    6944:	ef010000 	svc	0x00010000
    6948:	0000004c 	andeq	r0, r0, ip, asr #32
    694c:	00003289 	andeq	r3, r0, r9, lsl #5
    6950:	002bdb1f 	eoreq	sp, fp, pc, lsl fp
    6954:	4cef0100 	stfmie	f0, [pc]	; 695c <__Stack_Size+0x655c>
    6958:	b3000000 	movwlt	r0, #0
    695c:	00000032 	andeq	r0, r0, r2, lsr r0
    6960:	03b70412 			; <UNDEFINED> instruction: 0x03b70412
    6964:	93200000 	nopls	{0}	; <UNPREDICTABLE>
    6968:	01000025 	tsteq	r0, r5, lsr #32
    696c:	51340148 	teqpl	r4, r8, asr #2
    6970:	00880800 	addeq	r0, r8, r0, lsl #16
    6974:	9c010000 	stcls	0, cr0, [r1], {-0}
    6978:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    697c:	00253614 	eoreq	r3, r5, r4, lsl r6
    6980:	01480100 	mrseq	r0, (UNDEF: 88)
    6984:	000004ac 	andeq	r0, r0, ip, lsr #9
    6988:	f7145001 			; <UNDEFINED> instruction: 0xf7145001
    698c:	01000028 	tsteq	r0, r8, lsr #32
    6990:	074b0148 	strbeq	r0, [fp, -r8, asr #2]
    6994:	51010000 	mrspl	r0, (UNDEF: 1)
    6998:	00272216 	eoreq	r2, r7, r6, lsl r2
    699c:	014a0100 	mrseq	r0, (UNDEF: 90)
    69a0:	0000004c 	andeq	r0, r0, ip, asr #32
    69a4:	000032ef 	andeq	r3, r0, pc, ror #5
    69a8:	0026a316 	eoreq	sl, r6, r6, lsl r3
    69ac:	014a0100 	mrseq	r0, (UNDEF: 90)
    69b0:	0000004c 	andeq	r0, r0, ip, asr #32
    69b4:	0000330e 	andeq	r3, r0, lr, lsl #6
    69b8:	002bdb16 	eoreq	sp, fp, r6, lsl fp
    69bc:	014a0100 	mrseq	r0, (UNDEF: 90)
    69c0:	0000004c 	andeq	r0, r0, ip, asr #32
    69c4:	0000336f 	andeq	r3, r0, pc, ror #6
    69c8:	26132000 	ldrcs	r2, [r3], -r0
    69cc:	a4010000 	strge	r0, [r1], #-0
    69d0:	0051bc01 	subseq	fp, r1, r1, lsl #24
    69d4:	00008408 	andeq	r8, r0, r8, lsl #8
    69d8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    69dc:	14000008 	strne	r0, [r0], #-8
    69e0:	00002536 	andeq	r2, r0, r6, lsr r5
    69e4:	ac01a401 	cfstrsge	mvf10, [r1], {1}
    69e8:	01000004 	tsteq	r0, r4
    69ec:	28f71450 	ldmcs	r7!, {r4, r6, sl, ip}^
    69f0:	a4010000 	strge	r0, [r1], #-0
    69f4:	00074b01 	andeq	r4, r7, r1, lsl #22
    69f8:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    69fc:	00002722 	andeq	r2, r0, r2, lsr #14
    6a00:	4c01a601 	stcmi	6, cr10, [r1], {1}
    6a04:	a4000000 	strge	r0, [r0], #-0
    6a08:	16000033 			; <UNDEFINED> instruction: 0x16000033
    6a0c:	000026a3 	andeq	r2, r0, r3, lsr #13
    6a10:	4c01a601 	stcmi	6, cr10, [r1], {1}
    6a14:	c3000000 	movwgt	r0, #0
    6a18:	16000033 			; <UNDEFINED> instruction: 0x16000033
    6a1c:	00002bdb 	ldrdeq	r2, [r0], -fp
    6a20:	4c01a601 	stcmi	6, cr10, [r1], {1}
    6a24:	24000000 	strcs	r0, [r0], #-0
    6a28:	00000034 	andeq	r0, r0, r4, lsr r0
    6a2c:	0028c820 	eoreq	ip, r8, r0, lsr #16
    6a30:	02000100 	andeq	r0, r0, #0, 2
    6a34:	08005240 	stmdaeq	r0, {r6, r9, ip, lr}
    6a38:	00000068 	andeq	r0, r0, r8, rrx
    6a3c:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    6a40:	36140000 	ldrcc	r0, [r4], -r0
    6a44:	01000025 	tsteq	r0, r5, lsr #32
    6a48:	04ac0200 	strteq	r0, [ip], #512	; 0x200
    6a4c:	50010000 	andpl	r0, r1, r0
    6a50:	0028f715 	eoreq	pc, r8, r5, lsl r7	; <UNPREDICTABLE>
    6a54:	02000100 	andeq	r0, r0, #0, 2
    6a58:	0000074b 	andeq	r0, r0, fp, asr #14
    6a5c:	00003459 	andeq	r3, r0, r9, asr r4
    6a60:	00272216 	eoreq	r2, r7, r6, lsl r2
    6a64:	02020100 	andeq	r0, r2, #0, 2
    6a68:	0000004c 	andeq	r0, r0, ip, asr #32
    6a6c:	0000347a 	andeq	r3, r0, sl, ror r4
    6a70:	0026a316 	eoreq	sl, r6, r6, lsl r3
    6a74:	02020100 	andeq	r0, r2, #0, 2
    6a78:	0000004c 	andeq	r0, r0, ip, asr #32
    6a7c:	00003499 	muleq	r0, r9, r4
    6a80:	002bdb16 	eoreq	sp, fp, r6, lsl fp
    6a84:	02020100 	andeq	r0, r2, #0, 2
    6a88:	0000004c 	andeq	r0, r0, ip, asr #32
    6a8c:	000034c3 	andeq	r3, r0, r3, asr #9
    6a90:	2aa82000 	bcs	fea0ea98 <SCS_BASE+0x1ea00a98>
    6a94:	d1010000 	mrsle	r0, (UNDEF: 1)
    6a98:	0052a802 	subseq	sl, r2, r2, lsl #16
    6a9c:	00002208 	andeq	r2, r0, r8, lsl #4
    6aa0:	af9c0100 	svcge	0x009c0100
    6aa4:	14000008 	strne	r0, [r0], #-8
    6aa8:	00002536 	andeq	r2, r0, r6, lsr r5
    6aac:	ac02d101 	stfged	f5, [r2], {1}
    6ab0:	01000004 	tsteq	r0, r4
    6ab4:	26901450 			; <UNDEFINED> instruction: 0x26901450
    6ab8:	d1010000 	mrsle	r0, (UNDEF: 1)
    6abc:	0008af02 	andeq	sl, r8, r2, lsl #30
    6ac0:	00510100 	subseq	r0, r1, r0, lsl #2
    6ac4:	046f0412 	strbteq	r0, [pc], #-1042	; 6acc <__Stack_Size+0x66cc>
    6ac8:	42200000 	eormi	r0, r0, #0
    6acc:	0100000a 	tsteq	r0, sl
    6ad0:	52ca02ee 	sbcpl	r0, sl, #-536870898	; 0xe000000e
    6ad4:	00120800 	andseq	r0, r2, r0, lsl #16
    6ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    6adc:	000008da 	ldrdeq	r0, [r0], -sl
    6ae0:	0026fc14 	eoreq	pc, r6, r4, lsl ip	; <UNPREDICTABLE>
    6ae4:	02ee0100 	rsceq	r0, lr, #0, 2
    6ae8:	000006e8 	andeq	r0, r0, r8, ror #13
    6aec:	20005001 	andcs	r5, r0, r1
    6af0:	0000007b 	andeq	r0, r0, fp, ror r0
    6af4:	dc030001 	stcle	0, cr0, [r3], {1}
    6af8:	14080052 	strne	r0, [r8], #-82	; 0x52
    6afc:	01000000 	mrseq	r0, (UNDEF: 0)
    6b00:	0008ff9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    6b04:	28f71400 	ldmcs	r7!, {sl, ip}^
    6b08:	00010000 	andeq	r0, r1, r0
    6b0c:	00074b03 	andeq	r4, r7, r3, lsl #22
    6b10:	00500100 	subseq	r0, r0, r0, lsl #2
    6b14:	0023ae20 	eoreq	sl, r3, r0, lsr #28
    6b18:	03150100 	tsteq	r5, #0, 2
    6b1c:	080052f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, lr}
    6b20:	00000010 	andeq	r0, r0, r0, lsl r0
    6b24:	09249c01 	stmdbeq	r4!, {r0, sl, fp, ip, pc}
    6b28:	76140000 	ldrvc	r0, [r4], -r0
    6b2c:	01000028 	tsteq	r0, r8, lsr #32
    6b30:	09240315 	stmdbeq	r4!, {r0, r2, r4, r8, r9}
    6b34:	50010000 	andpl	r0, r1, r0
    6b38:	07041200 	streq	r1, [r4, -r0, lsl #4]
    6b3c:	20000004 	andcs	r0, r0, r4
    6b40:	00002b80 	andeq	r2, r0, r0, lsl #23
    6b44:	00032701 	andeq	r2, r3, r1, lsl #14
    6b48:	12080053 	andne	r0, r8, #83	; 0x53
    6b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    6b50:	00094f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    6b54:	26901400 	ldrcs	r1, [r0], r0, lsl #8
    6b58:	27010000 	strcs	r0, [r1, -r0]
    6b5c:	0008af03 	andeq	sl, r8, r3, lsl #30
    6b60:	00500100 	subseq	r0, r0, r0, lsl #2
    6b64:	000c8d20 	andeq	r8, ip, r0, lsr #26
    6b68:	033c0100 	teqeq	ip, #0, 2
    6b6c:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
    6b70:	00000018 	andeq	r0, r0, r8, lsl r0
    6b74:	09829c01 	stmibeq	r2, {r0, sl, fp, ip, pc}
    6b78:	36140000 	ldrcc	r0, [r4], -r0
    6b7c:	01000025 	tsteq	r0, r5, lsr #32
    6b80:	04ac033c 	strteq	r0, [ip], #828	; 0x33c
    6b84:	50010000 	andpl	r0, r1, r0
    6b88:	00159114 	andseq	r9, r5, r4, lsl r1
    6b8c:	033c0100 	teqeq	ip, #0, 2
    6b90:	000000cf 	andeq	r0, r0, pc, asr #1
    6b94:	20005101 	andcs	r5, r0, r1, lsl #2
    6b98:	00002a82 	andeq	r2, r0, r2, lsl #21
    6b9c:	2a035701 	bcs	dc7a8 <__Stack_Size+0xdc3a8>
    6ba0:	1c080053 	stcne	0, cr0, [r8], {83}	; 0x53
    6ba4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ba8:	0009b59c 	muleq	r9, ip, r5
    6bac:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    6bb0:	57010000 	strpl	r0, [r1, -r0]
    6bb4:	0004ac03 	andeq	sl, r4, r3, lsl #24
    6bb8:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    6bbc:	00001591 	muleq	r0, r1, r5
    6bc0:	cf035701 	svcgt	0x00035701
    6bc4:	01000000 	mrseq	r0, (UNDEF: 0)
    6bc8:	ad200051 	stcge	0, cr0, [r0, #-324]!	; 0xfffffebc
    6bcc:	01000009 	tsteq	r0, r9
    6bd0:	5346037d 	movtpl	r0, #25469	; 0x637d
    6bd4:	00120800 	andseq	r0, r2, r0, lsl #16
    6bd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    6bdc:	000009f8 	strdeq	r0, [r0], -r8
    6be0:	00253614 	eoreq	r3, r5, r4, lsl r6
    6be4:	037d0100 	cmneq	sp, #0, 2
    6be8:	000004ac 	andeq	r0, r0, ip, lsr #9
    6bec:	e2155001 	ands	r5, r5, #1
    6bf0:	0100002b 	tsteq	r0, fp, lsr #32
    6bf4:	004c037d 	subeq	r0, ip, sp, ror r3
    6bf8:	34ed0000 	strbtcc	r0, [sp], #0
    6bfc:	91140000 	tstls	r4, r0
    6c00:	01000015 	tsteq	r0, r5, lsl r0
    6c04:	00cf037d 	sbceq	r0, pc, sp, ror r3	; <UNPREDICTABLE>
    6c08:	52010000 	andpl	r0, r1, #0
    6c0c:	27e02000 	strbcs	r2, [r0, r0]!
    6c10:	a0010000 	andge	r0, r1, r0
    6c14:	00535803 	subseq	r5, r3, r3, lsl #16
    6c18:	00000408 	andeq	r0, r0, r8, lsl #8
    6c1c:	2b9c0100 	blcs	fe707024 <SCS_BASE+0x1e6f9024>
    6c20:	1400000a 	strne	r0, [r0], #-10
    6c24:	00002536 	andeq	r2, r0, r6, lsr r5
    6c28:	ac03a001 	stcge	0, cr10, [r3], {1}
    6c2c:	01000004 	tsteq	r0, r4
    6c30:	296a1450 	stmdbcs	sl!, {r4, r6, sl, ip}^
    6c34:	a0010000 	andge	r0, r1, r0
    6c38:	00004c03 	andeq	r4, r0, r3, lsl #24
    6c3c:	00510100 	subseq	r0, r1, r0, lsl #2
    6c40:	00264b20 	eoreq	r4, r6, r0, lsr #22
    6c44:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    6c48:	0800535c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip, lr}
    6c4c:	00000008 	andeq	r0, r0, r8
    6c50:	0a6e9c01 	beq	1badc5c <__Stack_Size+0x1bad85c>
    6c54:	36140000 	ldrcc	r0, [r4], -r0
    6c58:	01000025 	tsteq	r0, r5, lsr #32
    6c5c:	04ac03bf 	strteq	r0, [ip], #959	; 0x3bf
    6c60:	50010000 	andpl	r0, r1, r0
    6c64:	0027ab14 	eoreq	sl, r7, r4, lsl fp
    6c68:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    6c6c:	0000004c 	andeq	r0, r0, ip, asr #32
    6c70:	f2155101 	vrhadd.s16	d5, d5, d1
    6c74:	01000025 	tsteq	r0, r5, lsr #32
    6c78:	004c03bf 	strheq	r0, [ip], #-63	; 0xffffffc1
    6c7c:	35270000 	strcc	r0, [r7, #-0]!
    6c80:	20000000 	andcs	r0, r0, r0
    6c84:	00002b1c 	andeq	r2, r0, ip, lsl fp
    6c88:	6403dc01 	strvs	sp, [r3], #-3073	; 0xc01
    6c8c:	12080053 	andne	r0, r8, #83	; 0x53
    6c90:	01000000 	mrseq	r0, (UNDEF: 0)
    6c94:	000ab19c 	muleq	sl, ip, r1
    6c98:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    6c9c:	dc010000 	stcle	0, cr0, [r1], {-0}
    6ca0:	0004ac03 	andeq	sl, r4, r3, lsl #24
    6ca4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6ca8:	00002c15 	andeq	r2, r0, r5, lsl ip
    6cac:	4c03dc01 	stcmi	12, cr13, [r3], {1}
    6cb0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    6cb4:	14000035 	strne	r0, [r0], #-53	; 0x35
    6cb8:	00001591 	muleq	r0, r1, r5
    6cbc:	cf03dc01 	svcgt	0x0003dc01
    6cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cc4:	cf200052 	svcgt	0x00200052
    6cc8:	01000029 	tsteq	r0, r9, lsr #32
    6ccc:	537603f8 	cmnpl	r6, #248, 6	; 0xe0000003
    6cd0:	000e0800 	andeq	r0, lr, r0, lsl #16
    6cd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    6cd8:	00000ad6 	ldrdeq	r0, [r0], -r6
    6cdc:	00253614 	eoreq	r3, r5, r4, lsl r6
    6ce0:	03f80100 	mvnseq	r0, #0, 2
    6ce4:	000004ac 	andeq	r0, r0, ip, lsr #9
    6ce8:	20005001 	andcs	r5, r0, r1
    6cec:	0000262f 	andeq	r2, r0, pc, lsr #12
    6cf0:	84040e01 	strhi	r0, [r4], #-3585	; 0xe01
    6cf4:	1a080053 	bne	206e48 <__Stack_Size+0x206a48>
    6cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    6cfc:	000b3f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    6d00:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    6d04:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6d08:	0004ac04 	andeq	sl, r4, r4, lsl #24
    6d0c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6d10:	00002470 	andeq	r2, r0, r0, ror r4
    6d14:	4c040e01 	stcmi	14, cr0, [r4], {1}
    6d18:	82000000 	andhi	r0, r0, #0
    6d1c:	21000035 	tstcs	r0, r5, lsr r0
    6d20:	0000047a 	andeq	r0, r0, sl, ror r4
    6d24:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
    6d28:	0000000e 	andeq	r0, r0, lr
    6d2c:	22041501 	andcs	r1, r4, #4194304	; 0x400000
    6d30:	00000493 	muleq	r0, r3, r4
    6d34:	00003582 	andeq	r3, r0, r2, lsl #11
    6d38:	00048723 	andeq	r8, r4, r3, lsr #14
    6d3c:	24500100 	ldrbcs	r0, [r0], #-256	; 0x100
    6d40:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
    6d44:	0000000e 	andeq	r0, r0, lr
    6d48:	00049f25 	andeq	r9, r4, r5, lsr #30
    6d4c:	0035a300 	eorseq	sl, r5, r0, lsl #6
    6d50:	00000000 	andeq	r0, r0, r0
    6d54:	002ac720 	eoreq	ip, sl, r0, lsr #14
    6d58:	042d0100 	strteq	r0, [sp], #-256	; 0x100
    6d5c:	0800539e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, ip, lr}
    6d60:	00000034 	andeq	r0, r0, r4, lsr r0
    6d64:	0bee9c01 	bleq	ffbadd70 <SCS_BASE+0x1fb9fd70>
    6d68:	36150000 	ldrcc	r0, [r5], -r0
    6d6c:	01000025 	tsteq	r0, r5, lsr #32
    6d70:	04ac042d 	strteq	r0, [ip], #1069	; 0x42d
    6d74:	35d80000 	ldrbcc	r0, [r8]
    6d78:	34150000 	ldrcc	r0, [r5], #-0
    6d7c:	01000028 	tsteq	r0, r8, lsr #32
    6d80:	004c042d 	subeq	r0, ip, sp, lsr #8
    6d84:	360c0000 	strcc	r0, [ip], -r0
    6d88:	73150000 	tstvc	r5, #0
    6d8c:	0100002a 	tsteq	r0, sl, lsr #32
    6d90:	004c042e 	subeq	r0, ip, lr, lsr #8
    6d94:	362d0000 	strtcc	r0, [sp], -r0
    6d98:	0c150000 	ldceq	0, cr0, [r5], {-0}
    6d9c:	0100002c 	tsteq	r0, ip, lsr #32
    6da0:	004c042e 	subeq	r0, ip, lr, lsr #8
    6da4:	364e0000 	strbcc	r0, [lr], -r0
    6da8:	7a260000 	bvc	986db0 <__Stack_Size+0x9869b0>
    6dac:	b8000004 	stmdalt	r0, {r2}
    6db0:	0e080053 	mcreq	0, 0, r0, cr8, cr3, {2}
    6db4:	01000000 	mrseq	r0, (UNDEF: 0)
    6db8:	0bcb0441 	bleq	ff2c7ec4 <SCS_BASE+0x1f2b9ec4>
    6dbc:	93230000 			; <UNDEFINED> instruction: 0x93230000
    6dc0:	01000004 	tsteq	r0, r4
    6dc4:	04872355 	streq	r2, [r7], #853	; 0x355
    6dc8:	54010000 	strpl	r0, [r1], #-0
    6dcc:	0053b824 	subseq	fp, r3, r4, lsr #16
    6dd0:	00000e08 	andeq	r0, r0, r8, lsl #28
    6dd4:	049f2500 	ldreq	r2, [pc], #1280	; 6ddc <__Stack_Size+0x69dc>
    6dd8:	36880000 	strcc	r0, [r8], r0
    6ddc:	00000000 	andeq	r0, r0, r0
    6de0:	0053b21a 	subseq	fp, r3, sl, lsl r2
    6de4:	00052708 	andeq	r2, r5, r8, lsl #14
    6de8:	000be400 	andeq	lr, fp, r0, lsl #8
    6dec:	52011b00 	andpl	r1, r1, #0, 22
    6df0:	011b3101 	tsteq	fp, r1, lsl #2
    6df4:	00740250 	rsbseq	r0, r4, r0, asr r2
    6df8:	53b82700 			; <UNDEFINED> instruction: 0x53b82700
    6dfc:	04b20800 	ldrteq	r0, [r2], #2048	; 0x800
    6e00:	20000000 	andcs	r0, r0, r0
    6e04:	0000293b 	andeq	r2, r0, fp, lsr r9
    6e08:	d204b101 	andle	fp, r4, #1073741824	; 0x40000000
    6e0c:	14080053 	strne	r0, [r8], #-83	; 0x53
    6e10:	01000000 	mrseq	r0, (UNDEF: 0)
    6e14:	000c519c 	muleq	ip, ip, r1
    6e18:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    6e1c:	b1010000 	mrslt	r0, (UNDEF: 1)
    6e20:	0004ac04 	andeq	sl, r4, r4, lsl #24
    6e24:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6e28:	00002487 	andeq	r2, r0, r7, lsl #9
    6e2c:	4c04b101 	stfmid	f3, [r4], {1}
    6e30:	b2000000 	andlt	r0, r0, #0
    6e34:	14000036 	strne	r0, [r0], #-54	; 0x36
    6e38:	00002bb9 			; <UNDEFINED> instruction: 0x00002bb9
    6e3c:	4c04b101 	stfmid	f3, [r4], {1}
    6e40:	01000000 	mrseq	r0, (UNDEF: 0)
    6e44:	29081552 	stmdbcs	r8, {r1, r4, r6, r8, sl, ip}
    6e48:	b2010000 	andlt	r0, r1, #0
    6e4c:	00004c04 	andeq	r4, r0, r4, lsl #24
    6e50:	0036d300 	eorseq	sp, r6, r0, lsl #6
    6e54:	251c1600 	ldrcs	r1, [ip, #-1536]	; 0x600
    6e58:	b4010000 	strlt	r0, [r1], #-0
    6e5c:	00004c04 	andeq	r4, r0, r4, lsl #24
    6e60:	0036f400 	eorseq	pc, r6, r0, lsl #8
    6e64:	27200000 	strcs	r0, [r0, -r0]!
    6e68:	0100002a 	tsteq	r0, sl, lsr #32
    6e6c:	53e6045b 	mvnpl	r0, #1526726656	; 0x5b000000
    6e70:	001a0800 	andseq	r0, sl, r0, lsl #16
    6e74:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e78:	00000cc8 	andeq	r0, r0, r8, asr #25
    6e7c:	00253615 	eoreq	r3, r5, r5, lsl r6
    6e80:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    6e84:	000004ac 	andeq	r0, r0, ip, lsr #9
    6e88:	00003723 	andeq	r3, r0, r3, lsr #14
    6e8c:	00248715 	eoreq	r8, r4, r5, lsl r7
    6e90:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    6e94:	0000004c 	andeq	r0, r0, ip, asr #32
    6e98:	00003741 	andeq	r3, r0, r1, asr #14
    6e9c:	002bb915 	eoreq	fp, fp, r5, lsl r9
    6ea0:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    6ea4:	0000004c 	andeq	r0, r0, ip, asr #32
    6ea8:	00003762 	andeq	r3, r0, r2, ror #14
    6eac:	00290815 	eoreq	r0, r9, r5, lsl r8
    6eb0:	045c0100 	ldrbeq	r0, [ip], #-256	; 0x100
    6eb4:	0000004c 	andeq	r0, r0, ip, asr #32
    6eb8:	00003783 	andeq	r3, r0, r3, lsl #15
    6ebc:	00251c16 	eoreq	r1, r5, r6, lsl ip
    6ec0:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    6ec4:	0000004c 	andeq	r0, r0, ip, asr #32
    6ec8:	000037a4 	andeq	r3, r0, r4, lsr #15
    6ecc:	0053ee28 	subseq	lr, r3, r8, lsr #28
    6ed0:	000bee08 	andeq	lr, fp, r8, lsl #28
    6ed4:	50011b00 	andpl	r1, r1, r0, lsl #22
    6ed8:	00007402 	andeq	r7, r0, r2, lsl #8
    6edc:	259f2000 	ldrcs	r2, [pc]	; 6ee4 <__Stack_Size+0x6ae4>
    6ee0:	8d010000 	stchi	0, cr0, [r1, #-0]
    6ee4:	00540004 	subseq	r0, r4, r4
    6ee8:	00001408 	andeq	r1, r0, r8, lsl #8
    6eec:	2f9c0100 	svccs	0x009c0100
    6ef0:	1500000d 	strne	r0, [r0, #-13]
    6ef4:	00002536 	andeq	r2, r0, r6, lsr r5
    6ef8:	ac048d01 	stcge	13, cr8, [r4], {1}
    6efc:	e1000004 	tst	r0, r4
    6f00:	15000037 	strne	r0, [r0, #-55]	; 0x37
    6f04:	00002487 	andeq	r2, r0, r7, lsl #9
    6f08:	4c048d01 	stcmi	13, cr8, [r4], {1}
    6f0c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    6f10:	15000037 	strne	r0, [r0, #-55]	; 0x37
    6f14:	00002bb9 			; <UNDEFINED> instruction: 0x00002bb9
    6f18:	4c048e01 	stcmi	14, cr8, [r4], {1}
    6f1c:	20000000 	andcs	r0, r0, r0
    6f20:	15000038 	strne	r0, [r0, #-56]	; 0x38
    6f24:	00002908 	andeq	r2, r0, r8, lsl #18
    6f28:	4c048e01 	stcmi	14, cr8, [r4], {1}
    6f2c:	41000000 	mrsmi	r0, (UNDEF: 0)
    6f30:	28000038 	stmdacs	r0, {r3, r4, r5}
    6f34:	08005408 	stmdaeq	r0, {r3, sl, ip, lr}
    6f38:	00000bee 	andeq	r0, r0, lr, ror #23
    6f3c:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    6f40:	00000074 	andeq	r0, r0, r4, ror r0
    6f44:	000cef20 	andeq	lr, ip, r0, lsr #30
    6f48:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    6f4c:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
    6f50:	00000006 	andeq	r0, r0, r6
    6f54:	0d709c01 	ldcleq	12, cr9, [r0, #-4]!
    6f58:	36140000 	ldrcc	r0, [r4], -r0
    6f5c:	01000025 	tsteq	r0, r5, lsr #32
    6f60:	04ac04d6 	strteq	r0, [ip], #1238	; 0x4d6
    6f64:	50010000 	andpl	r0, r1, r0
    6f68:	0029f114 	eoreq	pc, r9, r4, lsl r1	; <UNPREDICTABLE>
    6f6c:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    6f70:	0000004c 	andeq	r0, r0, ip, asr #32
    6f74:	7d145101 	ldfvcs	f5, [r4, #-4]
    6f78:	01000027 	tsteq	r0, r7, lsr #32
    6f7c:	004c04d6 	ldrdeq	r0, [ip], #-70	; 0xffffffba
    6f80:	52010000 	andpl	r0, r1, #0
    6f84:	28922000 	ldmcs	r2, {sp}
    6f88:	f2010000 	vhadd.s8	d0, d1, d0
    6f8c:	00541a04 	subseq	r1, r4, r4, lsl #20
    6f90:	00001008 	andeq	r1, r0, r8
    6f94:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    6f98:	1400000d 	strne	r0, [r0], #-13
    6f9c:	00002536 	andeq	r2, r0, r6, lsr r5
    6fa0:	ac04f201 	sfmge	f7, 1, [r4], {1}
    6fa4:	01000004 	tsteq	r0, r4
    6fa8:	05fd1550 	ldrbeq	r1, [sp, #1360]!	; 0x550
    6fac:	f2010000 	vhadd.s8	d0, d1, d0
    6fb0:	00004c04 	andeq	r4, r0, r4, lsl #24
    6fb4:	00386200 	eorseq	r6, r8, r0, lsl #4
    6fb8:	258c1600 	strcs	r1, [ip, #1536]	; 0x600
    6fbc:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    6fc0:	00004c04 	andeq	r4, r0, r4, lsl #24
    6fc4:	00388300 	eorseq	r8, r8, r0, lsl #6
    6fc8:	7a290000 	bvc	a46fd0 <__Stack_Size+0xa46bd0>
    6fcc:	2a000004 	bcs	6fe4 <__Stack_Size+0x6be4>
    6fd0:	10080054 	andne	r0, r8, r4, asr r0
    6fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    6fd8:	000de29c 	muleq	sp, ip, r2
    6fdc:	04872300 	streq	r2, [r7], #768	; 0x300
    6fe0:	50010000 	andpl	r0, r1, r0
    6fe4:	00049322 	andeq	r9, r4, r2, lsr #6
    6fe8:	0038b800 	eorseq	fp, r8, r0, lsl #16
    6fec:	049f2500 	ldreq	r2, [pc], #1280	; 6ff4 <__Stack_Size+0x6bf4>
    6ff0:	38d90000 	ldmcc	r9, {}^	; <UNPREDICTABLE>
    6ff4:	20000000 	andcs	r0, r0, r0
    6ff8:	00002806 	andeq	r2, r0, r6, lsl #16
    6ffc:	3a054501 	bcc	158408 <__Stack_Size+0x158008>
    7000:	3c080054 	stccc	0, cr0, [r8], {84}	; 0x54
    7004:	01000000 	mrseq	r0, (UNDEF: 0)
    7008:	000e679c 	muleq	lr, ip, r7
    700c:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7010:	45010000 	strmi	r0, [r1, #-0]
    7014:	0004ac05 	andeq	sl, r4, r5, lsl #24
    7018:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    701c:	00002751 	andeq	r2, r0, r1, asr r7
    7020:	4c054501 	cfstr32mi	mvfx4, [r5], {1}
    7024:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7028:	15000039 	strne	r0, [r0, #-57]	; 0x39
    702c:	0000250c 	andeq	r2, r0, ip, lsl #10
    7030:	4c054601 	stcmi	6, cr4, [r5], {1}
    7034:	2f000000 	svccs	0x00000000
    7038:	15000039 	strne	r0, [r0, #-57]	; 0x39
    703c:	0000254c 	andeq	r2, r0, ip, asr #10
    7040:	4c054601 	stcmi	6, cr4, [r5], {1}
    7044:	50000000 	andpl	r0, r0, r0
    7048:	16000039 			; <UNDEFINED> instruction: 0x16000039
    704c:	0000251c 	andeq	r2, r0, ip, lsl r5
    7050:	4c054801 	stcmi	8, cr4, [r5], {1}
    7054:	71000000 	mrsvc	r0, (UNDEF: 0)
    7058:	16000039 			; <UNDEFINED> instruction: 0x16000039
    705c:	0000297a 	andeq	r2, r0, sl, ror r9
    7060:	4c054901 	stcmi	9, cr4, [r5], {1}
    7064:	a6000000 	strge	r0, [r0], -r0
    7068:	16000039 			; <UNDEFINED> instruction: 0x16000039
    706c:	000026a3 	andeq	r2, r0, r3, lsr #13
    7070:	4c054a01 	stcmi	10, cr4, [r5], {1}
    7074:	d0000000 	andle	r0, r0, r0
    7078:	00000039 	andeq	r0, r0, r9, lsr r0
    707c:	002b2720 	eoreq	r2, fp, r0, lsr #14
    7080:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 6f88 <__Stack_Size+0x6b88>
    7084:	08005476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, lr}
    7088:	00000010 	andeq	r0, r0, r0, lsl r0
    708c:	0eac9c01 	cdpeq	12, 10, cr9, cr12, cr1, {0}
    7090:	36140000 	ldrcc	r0, [r4], -r0
    7094:	01000025 	tsteq	r0, r5, lsr #32
    7098:	04ac057f 	strteq	r0, [ip], #1407	; 0x57f
    709c:	50010000 	andpl	r0, r1, r0
    70a0:	00253b15 	eoreq	r3, r5, r5, lsl fp
    70a4:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 6fac <__Stack_Size+0x6bac>
    70a8:	0000004c 	andeq	r0, r0, ip, asr #32
    70ac:	000039fa 	strdeq	r3, [r0], -sl
    70b0:	00297a16 	eoreq	r7, r9, r6, lsl sl
    70b4:	05810100 	streq	r0, [r1, #256]	; 0x100
    70b8:	0000004c 	andeq	r0, r0, ip, asr #32
    70bc:	00003a1b 	andeq	r3, r0, fp, lsl sl
    70c0:	24c52000 	strbcs	r2, [r5], #0
    70c4:	a1010000 	mrsge	r0, (UNDEF: 1)
    70c8:	00548605 	subseq	r8, r4, r5, lsl #12
    70cc:	00001408 	andeq	r1, r0, r8, lsl #8
    70d0:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    70d4:	1400000e 	strne	r0, [r0], #-14
    70d8:	00002536 	andeq	r2, r0, r6, lsr r5
    70dc:	ac05a101 	stfged	f2, [r5], {1}
    70e0:	01000004 	tsteq	r0, r4
    70e4:	253b1550 	ldrcs	r1, [fp, #-1360]!	; 0x550
    70e8:	a1010000 	mrsge	r0, (UNDEF: 1)
    70ec:	00004c05 	andeq	r4, r0, r5, lsl #24
    70f0:	003a5000 	eorseq	r5, sl, r0
    70f4:	297a1600 	ldmdbcs	sl!, {r9, sl, ip}^
    70f8:	a3010000 	movwge	r0, #4096	; 0x1000
    70fc:	00004c05 	andeq	r4, r0, r5, lsl #24
    7100:	003a7100 	eorseq	r7, sl, r0, lsl #2
    7104:	e9200000 	stmdb	r0!, {}	; <UNPREDICTABLE>
    7108:	0100002b 	tsteq	r0, fp, lsr #32
    710c:	549a05c3 	ldrpl	r0, [sl], #1475	; 0x5c3
    7110:	00100800 	andseq	r0, r0, r0, lsl #16
    7114:	9c010000 	stcls	0, cr0, [r1], {-0}
    7118:	00000f36 	andeq	r0, r0, r6, lsr pc
    711c:	00253614 	eoreq	r3, r5, r4, lsl r6
    7120:	05c30100 	strbeq	r0, [r3, #256]	; 0x100
    7124:	000004ac 	andeq	r0, r0, ip, lsr #9
    7128:	3b155001 	blcc	55b134 <__Stack_Size+0x55ad34>
    712c:	01000025 	tsteq	r0, r5, lsr #32
    7130:	004c05c3 	subeq	r0, ip, r3, asr #11
    7134:	3aa60000 	bcc	fe98713c <SCS_BASE+0x1e97913c>
    7138:	83160000 	tsthi	r6, #0
    713c:	01000029 	tsteq	r0, r9, lsr #32
    7140:	004c05c5 	subeq	r0, ip, r5, asr #11
    7144:	3ac70000 	bcc	ff1c714c <SCS_BASE+0x1f1b914c>
    7148:	20000000 	andcs	r0, r0, r0
    714c:	000028d4 	ldrdeq	r2, [r0], -r4
    7150:	aa05e501 	bge	18055c <__Stack_Size+0x18015c>
    7154:	14080054 	strne	r0, [r8], #-84	; 0x54
    7158:	01000000 	mrseq	r0, (UNDEF: 0)
    715c:	000f7b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
    7160:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7164:	e5010000 	str	r0, [r1, #-0]
    7168:	0004ac05 	andeq	sl, r4, r5, lsl #24
    716c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7170:	0000253b 	andeq	r2, r0, fp, lsr r5
    7174:	4c05e501 	cfstr32mi	mvfx14, [r5], {1}
    7178:	fc000000 	stc2	0, cr0, [r0], {-0}
    717c:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    7180:	00002983 	andeq	r2, r0, r3, lsl #19
    7184:	4c05e701 	stcmi	7, cr14, [r5], {1}
    7188:	1d000000 	stcne	0, cr0, [r0, #-0]
    718c:	0000003b 	andeq	r0, r0, fp, lsr r0
    7190:	00265920 	eoreq	r5, r6, r0, lsr #18
    7194:	06020100 	streq	r0, [r2], -r0, lsl #2
    7198:	080054be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip, lr}
    719c:	00000018 	andeq	r0, r0, r8, lsl r0
    71a0:	0fae9c01 	svceq	0x00ae9c01
    71a4:	36140000 	ldrcc	r0, [r4], -r0
    71a8:	01000025 	tsteq	r0, r5, lsr #32
    71ac:	04ac0602 	strteq	r0, [ip], #1538	; 0x602
    71b0:	50010000 	andpl	r0, r1, r0
    71b4:	00159114 	andseq	r9, r5, r4, lsl r1
    71b8:	06020100 	streq	r0, [r2], -r0, lsl #2
    71bc:	000000cf 	andeq	r0, r0, pc, asr #1
    71c0:	20005101 	andcs	r5, r0, r1, lsl #2
    71c4:	00002998 	muleq	r0, r8, r9
    71c8:	d6061d01 	strle	r1, [r6], -r1, lsl #26
    71cc:	18080054 	stmdane	r8, {r2, r4, r6}
    71d0:	01000000 	mrseq	r0, (UNDEF: 0)
    71d4:	000fe19c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    71d8:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    71dc:	1d010000 	stcne	0, cr0, [r1, #-0]
    71e0:	0004ac06 	andeq	sl, r4, r6, lsl #24
    71e4:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    71e8:	00001591 	muleq	r0, r1, r5
    71ec:	cf061d01 	svcgt	0x00061d01
    71f0:	01000000 	mrseq	r0, (UNDEF: 0)
    71f4:	f1200051 			; <UNDEFINED> instruction: 0xf1200051
    71f8:	01000024 	tsteq	r0, r4, lsr #32
    71fc:	54ee0639 	strbtpl	r0, [lr], #1593	; 0x639
    7200:	00180800 	andseq	r0, r8, r0, lsl #16
    7204:	9c010000 	stcls	0, cr0, [r1], {-0}
    7208:	00001014 	andeq	r1, r0, r4, lsl r0
    720c:	00253614 	eoreq	r3, r5, r4, lsl r6
    7210:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    7214:	000004ac 	andeq	r0, r0, ip, lsr #9
    7218:	91145001 	tstls	r4, r1
    721c:	01000015 	tsteq	r0, r5, lsl r0
    7220:	00cf0639 	sbceq	r0, pc, r9, lsr r6	; <UNPREDICTABLE>
    7224:	51010000 	mrspl	r0, (UNDEF: 1)
    7228:	29a62000 	stmibcs	r6!, {sp}
    722c:	55010000 	strpl	r0, [r1, #-0]
    7230:	00550606 	subseq	r0, r5, r6, lsl #12
    7234:	00001808 	andeq	r1, r0, r8, lsl #16
    7238:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    723c:	14000010 	strne	r0, [r0], #-16
    7240:	00002536 	andeq	r2, r0, r6, lsr r5
    7244:	ac065501 	cfstr32ge	mvfx5, [r6], {1}
    7248:	01000004 	tsteq	r0, r4
    724c:	15911450 	ldrne	r1, [r1, #1104]	; 0x450
    7250:	55010000 	strpl	r0, [r1, #-0]
    7254:	0000cf06 	andeq	ip, r0, r6, lsl #30
    7258:	00510100 	subseq	r0, r1, r0, lsl #2
    725c:	0001c420 	andeq	ip, r1, r0, lsr #8
    7260:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    7264:	0800551e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, lr}
    7268:	00000010 	andeq	r0, r0, r0, lsl r0
    726c:	108c9c01 	addne	r9, ip, r1, lsl #24
    7270:	36140000 	ldrcc	r0, [r4], -r0
    7274:	01000025 	tsteq	r0, r5, lsr #32
    7278:	04ac0674 	strteq	r0, [ip], #1652	; 0x674
    727c:	50010000 	andpl	r0, r1, r0
    7280:	00240b15 	eoreq	r0, r4, r5, lsl fp
    7284:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    7288:	0000004c 	andeq	r0, r0, ip, asr #32
    728c:	00003b52 	andeq	r3, r0, r2, asr fp
    7290:	00297a16 	eoreq	r7, r9, r6, lsl sl
    7294:	06760100 	ldrbteq	r0, [r6], -r0, lsl #2
    7298:	0000004c 	andeq	r0, r0, ip, asr #32
    729c:	00003b73 	andeq	r3, r0, r3, ror fp
    72a0:	24b02000 	ldrtcs	r2, [r0], #0
    72a4:	95010000 	strls	r0, [r1, #-0]
    72a8:	00552e06 	subseq	r2, r5, r6, lsl #28
    72ac:	00001408 	andeq	r1, r0, r8, lsl #8
    72b0:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    72b4:	14000010 	strne	r0, [r0], #-16
    72b8:	00002536 	andeq	r2, r0, r6, lsr r5
    72bc:	ac069501 	cfstr32ge	mvfx9, [r6], {1}
    72c0:	01000004 	tsteq	r0, r4
    72c4:	240b1550 	strcs	r1, [fp], #-1360	; 0x550
    72c8:	95010000 	strls	r0, [r1, #-0]
    72cc:	00004c06 	andeq	r4, r0, r6, lsl #24
    72d0:	003ba800 	eorseq	sl, fp, r0, lsl #16
    72d4:	297a1600 	ldmdbcs	sl!, {r9, sl, ip}^
    72d8:	97010000 	strls	r0, [r1, -r0]
    72dc:	00004c06 	andeq	r4, r0, r6, lsl #24
    72e0:	003bc900 	eorseq	ip, fp, r0, lsl #18
    72e4:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    72e8:	01000024 	tsteq	r0, r4, lsr #32
    72ec:	554206b6 	strbpl	r0, [r2, #-1718]	; 0x6b6
    72f0:	00100800 	andseq	r0, r0, r0, lsl #16
    72f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    72f8:	00001116 	andeq	r1, r0, r6, lsl r1
    72fc:	00253614 	eoreq	r3, r5, r4, lsl r6
    7300:	06b60100 	ldrteq	r0, [r6], r0, lsl #2
    7304:	000004ac 	andeq	r0, r0, ip, lsr #9
    7308:	0b155001 	bleq	55b314 <__Stack_Size+0x55af14>
    730c:	01000024 	tsteq	r0, r4, lsr #32
    7310:	004c06b6 	strheq	r0, [ip], #-102	; 0xffffff9a
    7314:	3bfe0000 	blcc	fff8731c <SCS_BASE+0x1ff7931c>
    7318:	83160000 	tsthi	r6, #0
    731c:	01000029 	tsteq	r0, r9, lsr #32
    7320:	004c06b8 	strheq	r0, [ip], #-104	; 0xffffff98
    7324:	3c1f0000 	ldccc	0, cr0, [pc], {-0}
    7328:	20000000 	andcs	r0, r0, r0
    732c:	000023bf 			; <UNDEFINED> instruction: 0x000023bf
    7330:	5206d701 	andpl	sp, r6, #262144	; 0x40000
    7334:	14080055 	strne	r0, [r8], #-85	; 0x55
    7338:	01000000 	mrseq	r0, (UNDEF: 0)
    733c:	00115b9c 	mulseq	r1, ip, fp
    7340:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7344:	d7010000 	strle	r0, [r1, -r0]
    7348:	0004ac06 	andeq	sl, r4, r6, lsl #24
    734c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7350:	0000240b 	andeq	r2, r0, fp, lsl #8
    7354:	4c06d701 	stcmi	7, cr13, [r6], {1}
    7358:	54000000 	strpl	r0, [r0], #-0
    735c:	1600003c 			; <UNDEFINED> instruction: 0x1600003c
    7360:	00002983 	andeq	r2, r0, r3, lsl #19
    7364:	4c06d901 	stcmi	9, cr13, [r6], {1}
    7368:	75000000 	strvc	r0, [r0, #-0]
    736c:	0000003c 	andeq	r0, r0, ip, lsr r0
    7370:	00292920 	eoreq	r2, r9, r0, lsr #18
    7374:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    7378:	08005566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, lr}
    737c:	00000010 	andeq	r0, r0, r0, lsl r0
    7380:	11a09c01 	lslne	r9, r1, #24
    7384:	36140000 	ldrcc	r0, [r4], -r0
    7388:	01000025 	tsteq	r0, r5, lsr #32
    738c:	04ac06f7 	strteq	r0, [ip], #1783	; 0x6f7
    7390:	50010000 	andpl	r0, r1, r0
    7394:	00244b15 	eoreq	r4, r4, r5, lsl fp
    7398:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    739c:	0000004c 	andeq	r0, r0, ip, asr #32
    73a0:	00003caa 	andeq	r3, r0, sl, lsr #25
    73a4:	00297a16 	eoreq	r7, r9, r6, lsl sl
    73a8:	06f90100 	ldrbteq	r0, [r9], r0, lsl #2
    73ac:	0000004c 	andeq	r0, r0, ip, asr #32
    73b0:	00003ccb 	andeq	r3, r0, fp, asr #25
    73b4:	26c02000 	strbcs	r2, [r0], r0
    73b8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    73bc:	00557607 	subseq	r7, r5, r7, lsl #12
    73c0:	00001408 	andeq	r1, r0, r8, lsl #8
    73c4:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    73c8:	14000011 	strne	r0, [r0], #-17
    73cc:	00002536 	andeq	r2, r0, r6, lsr r5
    73d0:	ac071801 	stcge	8, cr1, [r7], {1}
    73d4:	01000004 	tsteq	r0, r4
    73d8:	244b1550 	strbcs	r1, [fp], #-1360	; 0x550
    73dc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    73e0:	00004c07 	andeq	r4, r0, r7, lsl #24
    73e4:	003d0000 	eorseq	r0, sp, r0
    73e8:	297a1600 	ldmdbcs	sl!, {r9, sl, ip}^
    73ec:	1a010000 	bne	473f4 <__Stack_Size+0x46ff4>
    73f0:	00004c07 	andeq	r4, r0, r7, lsl #24
    73f4:	003d2100 	eorseq	r2, sp, r0, lsl #2
    73f8:	24200000 	strtcs	r0, [r0], #-0
    73fc:	01000025 	tsteq	r0, r5, lsr #32
    7400:	558a0739 	strpl	r0, [sl, #1849]	; 0x739
    7404:	00100800 	andseq	r0, r0, r0, lsl #16
    7408:	9c010000 	stcls	0, cr0, [r1], {-0}
    740c:	0000122a 	andeq	r1, r0, sl, lsr #4
    7410:	00253614 	eoreq	r3, r5, r4, lsl r6
    7414:	07390100 	ldreq	r0, [r9, -r0, lsl #2]!
    7418:	000004ac 	andeq	r0, r0, ip, lsr #9
    741c:	4b155001 	blmi	55b428 <__Stack_Size+0x55b028>
    7420:	01000024 	tsteq	r0, r4, lsr #32
    7424:	004c0739 	subeq	r0, ip, r9, lsr r7
    7428:	3d560000 	ldclcc	0, cr0, [r6, #-0]
    742c:	83160000 	tsthi	r6, #0
    7430:	01000029 	tsteq	r0, r9, lsr #32
    7434:	004c073b 	subeq	r0, ip, fp, lsr r7
    7438:	3d770000 	ldclcc	0, cr0, [r7, #-0]
    743c:	20000000 	andcs	r0, r0, r0
    7440:	00002386 	andeq	r2, r0, r6, lsl #7
    7444:	9a075a01 	bls	1ddc50 <__Stack_Size+0x1dd850>
    7448:	14080055 	strne	r0, [r8], #-85	; 0x55
    744c:	01000000 	mrseq	r0, (UNDEF: 0)
    7450:	00126f9c 	mulseq	r2, ip, pc	; <UNPREDICTABLE>
    7454:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7458:	5a010000 	bpl	47460 <__Stack_Size+0x47060>
    745c:	0004ac07 	andeq	sl, r4, r7, lsl #24
    7460:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7464:	0000244b 	andeq	r2, r0, fp, asr #8
    7468:	4c075a01 	stcmi	10, cr5, [r7], {1}
    746c:	ac000000 	stcge	0, cr0, [r0], {-0}
    7470:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    7474:	00002983 	andeq	r2, r0, r3, lsl #19
    7478:	4c075c01 	stcmi	12, cr5, [r7], {1}
    747c:	cd000000 	stcgt	0, cr0, [r0, #-0]
    7480:	0000003d 	andeq	r0, r0, sp, lsr r0
    7484:	002b9320 	eoreq	r9, fp, r0, lsr #6
    7488:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    748c:	080055ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr}
    7490:	00000010 	andeq	r0, r0, r0, lsl r0
    7494:	12b49c01 	adcsne	r9, r4, #256	; 0x100
    7498:	36140000 	ldrcc	r0, [r4], -r0
    749c:	01000025 	tsteq	r0, r5, lsr #32
    74a0:	04ac077b 	strteq	r0, [ip], #1915	; 0x77b
    74a4:	50010000 	andpl	r0, r1, r0
    74a8:	00277115 	eoreq	r7, r7, r5, lsl r1
    74ac:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    74b0:	0000004c 	andeq	r0, r0, ip, asr #32
    74b4:	00003e02 	andeq	r3, r0, r2, lsl #28
    74b8:	00297a16 	eoreq	r7, r9, r6, lsl sl
    74bc:	077d0100 	ldrbeq	r0, [sp, -r0, lsl #2]!
    74c0:	0000004c 	andeq	r0, r0, ip, asr #32
    74c4:	00003e23 	andeq	r3, r0, r3, lsr #28
    74c8:	2ab72000 	bcs	fedcf4d0 <SCS_BASE+0x1edc14d0>
    74cc:	9b010000 	blls	474d4 <__Stack_Size+0x470d4>
    74d0:	0055be07 	subseq	fp, r5, r7, lsl #28
    74d4:	00001008 	andeq	r1, r0, r8
    74d8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    74dc:	14000012 	strne	r0, [r0], #-18
    74e0:	00002536 	andeq	r2, r0, r6, lsr r5
    74e4:	ac079b01 	stcge	11, cr9, [r7], {1}
    74e8:	01000004 	tsteq	r0, r4
    74ec:	27711550 			; <UNDEFINED> instruction: 0x27711550
    74f0:	9b010000 	blls	474f8 <__Stack_Size+0x470f8>
    74f4:	00004c07 	andeq	r4, r0, r7, lsl #24
    74f8:	003e5800 	eorseq	r5, lr, r0, lsl #16
    74fc:	297a1600 	ldmdbcs	sl!, {r9, sl, ip}^
    7500:	9d010000 	stcls	0, cr0, [r1, #-0]
    7504:	00004c07 	andeq	r4, r0, r7, lsl #24
    7508:	003e7900 	eorseq	r7, lr, r0, lsl #18
    750c:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
    7510:	01000028 	tsteq	r0, r8, lsr #32
    7514:	55ce07bb 	strbpl	r0, [lr, #1979]	; 0x7bb
    7518:	00100800 	andseq	r0, r0, r0, lsl #16
    751c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7520:	0000133e 	andeq	r1, r0, lr, lsr r3
    7524:	00253614 	eoreq	r3, r5, r4, lsl r6
    7528:	07bb0100 	ldreq	r0, [fp, r0, lsl #2]!
    752c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7530:	71155001 	tstvc	r5, r1
    7534:	01000027 	tsteq	r0, r7, lsr #32
    7538:	004c07bb 	strheq	r0, [ip], #-123	; 0xffffff85
    753c:	3ea30000 	cdpcc	0, 10, cr0, cr3, cr0, {0}
    7540:	83160000 	tsthi	r6, #0
    7544:	01000029 	tsteq	r0, r9, lsr #32
    7548:	004c07bd 	strheq	r0, [ip], #-125	; 0xffffff83
    754c:	3ec40000 	cdpcc	0, 12, cr0, cr4, cr0, {0}
    7550:	20000000 	andcs	r0, r0, r0
    7554:	0000261f 	andeq	r2, r0, pc, lsl r6
    7558:	de07db01 	vmlale.f64	d13, d7, d1
    755c:	10080055 	andne	r0, r8, r5, asr r0
    7560:	01000000 	mrseq	r0, (UNDEF: 0)
    7564:	0013839c 	mulseq	r3, ip, r3
    7568:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    756c:	db010000 	blle	47574 <__Stack_Size+0x47174>
    7570:	0004ac07 	andeq	sl, r4, r7, lsl #24
    7574:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7578:	00002771 	andeq	r2, r0, r1, ror r7
    757c:	4c07db01 	stcmi	11, cr13, [r7], {1}
    7580:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    7584:	1600003e 			; <UNDEFINED> instruction: 0x1600003e
    7588:	00002983 	andeq	r2, r0, r3, lsl #19
    758c:	4c07dd01 	stcmi	13, cr13, [r7], {1}
    7590:	1a000000 	bne	7598 <__Stack_Size+0x7198>
    7594:	0000003f 	andeq	r0, r0, pc, lsr r0
    7598:	00239820 	eoreq	r9, r3, r0, lsr #16
    759c:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    75a0:	080055ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, ip, lr}
    75a4:	00000010 	andeq	r0, r0, r0, lsl r0
    75a8:	13c89c01 	bicne	r9, r8, #256	; 0x100
    75ac:	36140000 	ldrcc	r0, [r4], -r0
    75b0:	01000025 	tsteq	r0, r5, lsr #32
    75b4:	04ac07fb 	strteq	r0, [ip], #2043	; 0x7fb
    75b8:	50010000 	andpl	r0, r1, r0
    75bc:	0000ce15 	andeq	ip, r0, r5, lsl lr
    75c0:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    75c4:	0000004c 	andeq	r0, r0, ip, asr #32
    75c8:	00003f44 	andeq	r3, r0, r4, asr #30
    75cc:	0026a316 	eoreq	sl, r6, r6, lsl r3
    75d0:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    75d4:	0000004c 	andeq	r0, r0, ip, asr #32
    75d8:	00003f65 	andeq	r3, r0, r5, ror #30
    75dc:	29492000 	stmdbcs	r9, {sp}^
    75e0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    75e4:	0055fe08 	subseq	pc, r5, r8, lsl #28
    75e8:	00001008 	andeq	r1, r0, r8
    75ec:	0d9c0100 	ldfeqs	f0, [ip]
    75f0:	14000014 	strne	r0, [r0], #-20
    75f4:	00002536 	andeq	r2, r0, r6, lsr r5
    75f8:	ac081801 	stcge	8, cr1, [r8], {1}
    75fc:	01000004 	tsteq	r0, r4
    7600:	054c1550 	strbeq	r1, [ip, #-1360]	; 0x550
    7604:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    7608:	00004c08 	andeq	r4, r0, r8, lsl #24
    760c:	003f9a00 	eorseq	r9, pc, r0, lsl #20
    7610:	26a31600 	strtcs	r1, [r3], r0, lsl #12
    7614:	1a010000 	bne	4761c <__Stack_Size+0x4721c>
    7618:	00004c08 	andeq	r4, r0, r8, lsl #24
    761c:	003fbb00 	eorseq	fp, pc, r0, lsl #22
    7620:	54200000 	strtpl	r0, [r0], #-0
    7624:	0100002c 	tsteq	r0, ip, lsr #32
    7628:	560e0836 			; <UNDEFINED> instruction: 0x560e0836
    762c:	00140800 	andseq	r0, r4, r0, lsl #16
    7630:	9c010000 	stcls	0, cr0, [r1], {-0}
    7634:	00001452 	andeq	r1, r0, r2, asr r4
    7638:	00253614 	eoreq	r3, r5, r4, lsl r6
    763c:	08360100 	ldmdaeq	r6!, {r8}
    7640:	000004ac 	andeq	r0, r0, ip, lsr #9
    7644:	ce155001 	cdpgt	0, 1, cr5, cr5, cr1, {0}
    7648:	01000000 	mrseq	r0, (UNDEF: 0)
    764c:	004c0836 	subeq	r0, ip, r6, lsr r8
    7650:	3ff00000 	svccc	0x00f00000	; IMB
    7654:	a3160000 	tstge	r6, #0
    7658:	01000026 	tsteq	r0, r6, lsr #32
    765c:	004c0838 	subeq	r0, ip, r8, lsr r8
    7660:	40110000 	andsmi	r0, r1, r0
    7664:	20000000 	andcs	r0, r0, r0
    7668:	00002b53 	andeq	r2, r0, r3, asr fp
    766c:	22085301 	andcs	r5, r8, #67108864	; 0x4000000
    7670:	14080056 	strne	r0, [r8], #-86	; 0x56
    7674:	01000000 	mrseq	r0, (UNDEF: 0)
    7678:	0014979c 	mulseq	r4, ip, r7
    767c:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7680:	53010000 	movwpl	r0, #4096	; 0x1000
    7684:	0004ac08 	andeq	sl, r4, r8, lsl #24
    7688:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    768c:	0000054c 	andeq	r0, r0, ip, asr #10
    7690:	4c085301 	stcmi	3, cr5, [r8], {1}
    7694:	46000000 	strmi	r0, [r0], -r0
    7698:	16000040 	strne	r0, [r0], -r0, asr #32
    769c:	000026a3 	andeq	r2, r0, r3, lsr #13
    76a0:	4c085501 	cfstr32mi	mvfx5, [r8], {1}
    76a4:	67000000 	strvs	r0, [r0, -r0]
    76a8:	00000040 	andeq	r0, r0, r0, asr #32
    76ac:	002ba320 	eoreq	sl, fp, r0, lsr #6
    76b0:	08710100 	ldmdaeq	r1!, {r8}^
    76b4:	08005636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, ip, lr}
    76b8:	00000014 	andeq	r0, r0, r4, lsl r0
    76bc:	14dc9c01 	ldrbne	r9, [ip], #3073	; 0xc01
    76c0:	36140000 	ldrcc	r0, [r4], -r0
    76c4:	01000025 	tsteq	r0, r5, lsr #32
    76c8:	04ac0871 	strteq	r0, [ip], #2161	; 0x871
    76cc:	50010000 	andpl	r0, r1, r0
    76d0:	0000ce15 	andeq	ip, r0, r5, lsl lr
    76d4:	08710100 	ldmdaeq	r1!, {r8}^
    76d8:	0000004c 	andeq	r0, r0, ip, asr #32
    76dc:	0000409c 	muleq	r0, ip, r0
    76e0:	0026a316 	eoreq	sl, r6, r6, lsl r3
    76e4:	08730100 	ldmdaeq	r3!, {r8}^
    76e8:	0000004c 	andeq	r0, r0, ip, asr #32
    76ec:	000040bd 	strheq	r4, [r0], -sp
    76f0:	23f42000 	mvnscs	r2, #0
    76f4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    76f8:	00564a08 	subseq	r4, r6, r8, lsl #20
    76fc:	00001408 	andeq	r1, r0, r8, lsl #8
    7700:	219c0100 	orrscs	r0, ip, r0, lsl #2
    7704:	14000015 	strne	r0, [r0], #-21
    7708:	00002536 	andeq	r2, r0, r6, lsr r5
    770c:	ac088e01 	stcge	14, cr8, [r8], {1}
    7710:	01000004 	tsteq	r0, r4
    7714:	054c1550 	strbeq	r1, [ip, #-1360]	; 0x550
    7718:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    771c:	00004c08 	andeq	r4, r0, r8, lsl #24
    7720:	0040f200 	subeq	pc, r0, r0, lsl #4
    7724:	26a31600 	strtcs	r1, [r3], r0, lsl #12
    7728:	90010000 	andls	r0, r1, r0
    772c:	00004c08 	andeq	r4, r0, r8, lsl #24
    7730:	00411300 	subeq	r1, r1, r0, lsl #6
    7734:	6a200000 	bvs	80773c <__Stack_Size+0x80733c>
    7738:	0100002b 	tsteq	r0, fp, lsr #32
    773c:	565e08ac 	ldrbpl	r0, [lr], -ip, lsr #17
    7740:	00140800 	andseq	r0, r4, r0, lsl #16
    7744:	9c010000 	stcls	0, cr0, [r1], {-0}
    7748:	00001566 	andeq	r1, r0, r6, ror #10
    774c:	00253614 	eoreq	r3, r5, r4, lsl r6
    7750:	08ac0100 	stmiaeq	ip!, {r8}
    7754:	000004ac 	andeq	r0, r0, ip, lsr #9
    7758:	ce155001 	cdpgt	0, 1, cr5, cr5, cr1, {0}
    775c:	01000000 	mrseq	r0, (UNDEF: 0)
    7760:	004c08ac 	subeq	r0, ip, ip, lsr #17
    7764:	41480000 	mrsmi	r0, (UNDEF: 72)
    7768:	a3160000 	tstge	r6, #0
    776c:	01000026 	tsteq	r0, r6, lsr #32
    7770:	004c08ae 	subeq	r0, ip, lr, lsr #17
    7774:	41690000 	cmnmi	r9, r0
    7778:	20000000 	andcs	r0, r0, r0
    777c:	0000278f 	andeq	r2, r0, pc, lsl #15
    7780:	7208ce01 	andvc	ip, r8, #1, 28
    7784:	1c080056 	stcne	0, cr0, [r8], {86}	; 0x56
    7788:	01000000 	mrseq	r0, (UNDEF: 0)
    778c:	0015a99c 	mulseq	r5, ip, r9
    7790:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7794:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7798:	0004ac08 	andeq	sl, r4, r8, lsl #24
    779c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    77a0:	0000298c 	andeq	r2, r0, ip, lsl #19
    77a4:	4c08ce01 	stcmi	14, cr12, [r8], {1}
    77a8:	01000000 	mrseq	r0, (UNDEF: 0)
    77ac:	29fb1551 	ldmibcs	fp!, {r0, r4, r6, r8, sl, ip}^
    77b0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    77b4:	00004c08 	andeq	r4, r0, r8, lsl #24
    77b8:	00419e00 	subeq	r9, r1, r0, lsl #28
    77bc:	9b200000 	blls	8077c4 <__Stack_Size+0x8073c4>
    77c0:	01000024 	tsteq	r0, r4, lsr #32
    77c4:	568e08ea 	strpl	r0, [lr], sl, ror #17
    77c8:	001c0800 	andseq	r0, ip, r0, lsl #16
    77cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    77d0:	000015ec 	andeq	r1, r0, ip, ror #11
    77d4:	00253614 	eoreq	r3, r5, r4, lsl r6
    77d8:	08ea0100 	stmiaeq	sl!, {r8}^
    77dc:	000004ac 	andeq	r0, r0, ip, lsr #9
    77e0:	8c145001 	ldchi	0, cr5, [r4], {1}
    77e4:	01000029 	tsteq	r0, r9, lsr #32
    77e8:	004c08ea 	subeq	r0, ip, sl, ror #17
    77ec:	51010000 	mrspl	r0, (UNDEF: 1)
    77f0:	00282115 	eoreq	r2, r8, r5, lsl r1
    77f4:	08ea0100 	stmiaeq	sl!, {r8}^
    77f8:	0000004c 	andeq	r0, r0, ip, asr #32
    77fc:	000041bf 			; <UNDEFINED> instruction: 0x000041bf
    7800:	27132000 	ldrcs	r2, [r3, -r0]
    7804:	12010000 	andne	r0, r1, #0
    7808:	0056aa09 	subseq	sl, r6, r9, lsl #20
    780c:	00004408 	andeq	r4, r0, r8, lsl #8
    7810:	339c0100 	orrscc	r0, ip, #0, 2
    7814:	15000016 	strne	r0, [r0, #-22]
    7818:	00002536 	andeq	r2, r0, r6, lsr r5
    781c:	ac091201 	sfmge	f1, 4, [r9], {1}
    7820:	e0000004 	and	r0, r0, r4
    7824:	15000041 	strne	r0, [r0, #-65]	; 0x41
    7828:	0000298c 	andeq	r2, r0, ip, lsl #19
    782c:	4c091201 	sfmmi	f1, 4, [r9], {1}
    7830:	00000000 	andeq	r0, r0, r0
    7834:	15000042 	strne	r0, [r0, #-66]	; 0x42
    7838:	000008a1 	andeq	r0, r0, r1, lsr #17
    783c:	4c091201 	sfmmi	f1, 4, [r9], {1}
    7840:	3a000000 	bcc	7848 <__Stack_Size+0x7448>
    7844:	00000042 	andeq	r0, r0, r2, asr #32
    7848:	00284d20 	eoreq	r4, r8, r0, lsr #26
    784c:	09380100 	ldmdbeq	r8!, {r8}
    7850:	080056ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, lr}
    7854:	00000018 	andeq	r0, r0, r8, lsl r0
    7858:	16669c01 	strbtne	r9, [r6], -r1, lsl #24
    785c:	36140000 	ldrcc	r0, [r4], -r0
    7860:	01000025 	tsteq	r0, r5, lsr #32
    7864:	04ac0938 	strteq	r0, [ip], #2360	; 0x938
    7868:	50010000 	andpl	r0, r1, r0
    786c:	00159114 	andseq	r9, r5, r4, lsl r1
    7870:	09380100 	ldmdbeq	r8!, {r8}
    7874:	000000cf 	andeq	r0, r0, pc, asr #1
    7878:	20005101 	andcs	r5, r0, r1, lsl #2
    787c:	000024d9 	ldrdeq	r2, [r0], -r9
    7880:	06095501 	streq	r5, [r9], -r1, lsl #10
    7884:	18080057 	stmdane	r8, {r0, r1, r2, r4, r6}
    7888:	01000000 	mrseq	r0, (UNDEF: 0)
    788c:	0016999c 	mulseq	r6, ip, r9
    7890:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7894:	55010000 	strpl	r0, [r1, #-0]
    7898:	0004ac09 	andeq	sl, r4, r9, lsl #24
    789c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    78a0:	00002865 	andeq	r2, r0, r5, ror #16
    78a4:	4c095501 	cfstr32mi	mvfx5, [r9], {1}
    78a8:	01000000 	mrseq	r0, (UNDEF: 0)
    78ac:	cb200051 	blgt	8079f8 <__Stack_Size+0x8075f8>
    78b0:	01000027 	tsteq	r0, r7, lsr #32
    78b4:	571e0970 			; <UNDEFINED> instruction: 0x571e0970
    78b8:	00180800 	andseq	r0, r8, r0, lsl #16
    78bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    78c0:	000016cc 	andeq	r1, r0, ip, asr #13
    78c4:	00253614 	eoreq	r3, r5, r4, lsl r6
    78c8:	09700100 	ldmdbeq	r0!, {r8}^
    78cc:	000004ac 	andeq	r0, r0, ip, lsr #9
    78d0:	91145001 	tstls	r4, r1
    78d4:	01000015 	tsteq	r0, r5, lsl r0
    78d8:	00cf0970 	sbceq	r0, pc, r0, ror r9	; <UNPREDICTABLE>
    78dc:	51010000 	mrspl	r0, (UNDEF: 1)
    78e0:	2a3f2000 	bcs	fcf8e8 <__Stack_Size+0xfcf4e8>
    78e4:	8d010000 	stchi	0, cr0, [r1, #-0]
    78e8:	00573609 	subseq	r3, r7, r9, lsl #12
    78ec:	00001608 	andeq	r1, r0, r8, lsl #12
    78f0:	019c0100 	orrseq	r0, ip, r0, lsl #2
    78f4:	14000017 	strne	r0, [r0], #-23
    78f8:	00002536 	andeq	r2, r0, r6, lsr r5
    78fc:	ac098d01 	stcge	13, cr8, [r9], {1}
    7900:	01000004 	tsteq	r0, r4
    7904:	25011550 	strcs	r1, [r1, #-1360]	; 0x550
    7908:	8d010000 	stchi	0, cr0, [r1, #-0]
    790c:	00004c09 	andeq	r4, r0, r9, lsl #24
    7910:	00425b00 	subeq	r5, r2, r0, lsl #22
    7914:	e4200000 	strt	r0, [r0], #-0
    7918:	01000026 	tsteq	r0, r6, lsr #32
    791c:	574c09ae 	strbpl	r0, [ip, -lr, lsr #19]
    7920:	00160800 	andseq	r0, r6, r0, lsl #16
    7924:	9c010000 	stcls	0, cr0, [r1], {-0}
    7928:	00001736 	andeq	r1, r0, r6, lsr r7
    792c:	00253614 	eoreq	r3, r5, r4, lsl r6
    7930:	09ae0100 	stmibeq	lr!, {r8}
    7934:	000004ac 	andeq	r0, r0, ip, lsr #9
    7938:	56155001 	ldrpl	r5, [r5], -r1
    793c:	0100002a 	tsteq	r0, sl, lsr #32
    7940:	004c09ae 	subeq	r0, ip, lr, lsr #19
    7944:	427c0000 	rsbsmi	r0, ip, #0
    7948:	20000000 	andcs	r0, r0, r0
    794c:	00002915 	andeq	r2, r0, r5, lsl r9
    7950:	6209ca01 	andvs	ip, r9, #4096	; 0x1000
    7954:	16080057 			; <UNDEFINED> instruction: 0x16080057
    7958:	01000000 	mrseq	r0, (UNDEF: 0)
    795c:	00176b9c 	mulseq	r7, ip, fp
    7960:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7964:	ca010000 	bgt	4796c <__Stack_Size+0x4756c>
    7968:	0004ac09 	andeq	sl, r4, r9, lsl #24
    796c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7970:	00002570 	andeq	r2, r0, r0, ror r5
    7974:	4c09ca01 	stcmi	10, cr12, [r9], {1}
    7978:	9d000000 	stcls	0, cr0, [r0, #-0]
    797c:	00000042 	andeq	r0, r0, r2, asr #32
    7980:	002c2320 	eoreq	r2, ip, r0, lsr #6
    7984:	09e40100 	stmibeq	r4!, {r8}^
    7988:	08005778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, lr}
    798c:	00000016 	andeq	r0, r0, r6, lsl r0
    7990:	17a09c01 	strne	r9, [r0, r1, lsl #24]!
    7994:	36140000 	ldrcc	r0, [r4], -r0
    7998:	01000025 	tsteq	r0, r5, lsr #32
    799c:	04ac09e4 	strteq	r0, [ip], #2532	; 0x9e4
    79a0:	50010000 	andpl	r0, r1, r0
    79a4:	002ae215 	eoreq	lr, sl, r5, lsl r2
    79a8:	09e40100 	stmibeq	r4!, {r8}^
    79ac:	0000004c 	andeq	r0, r0, ip, asr #32
    79b0:	000042be 			; <UNDEFINED> instruction: 0x000042be
    79b4:	27422000 	strbcs	r2, [r2, -r0]
    79b8:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    79bc:	00578e09 	subseq	r8, r7, r9, lsl #28
    79c0:	00000408 	andeq	r0, r0, r8, lsl #8
    79c4:	d39c0100 	orrsle	r0, ip, #0, 2
    79c8:	14000017 	strne	r0, [r0], #-23
    79cc:	00002536 	andeq	r2, r0, r6, lsr r5
    79d0:	ac09f901 	stcge	9, cr15, [r9], {1}
    79d4:	01000004 	tsteq	r0, r4
    79d8:	233f1450 	teqcs	pc, #80, 8	; 0x50000000
    79dc:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    79e0:	00004c09 	andeq	r4, r0, r9, lsl #24
    79e4:	00510100 	subseq	r0, r1, r0, lsl #2
    79e8:	002b0a20 	eoreq	r0, fp, r0, lsr #20
    79ec:	0a0a0100 	beq	287df4 <__Stack_Size+0x2879f4>
    79f0:	08005792 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, ip, lr}
    79f4:	00000004 	andeq	r0, r0, r4
    79f8:	18069c01 	stmdane	r6, {r0, sl, fp, ip, pc}
    79fc:	36140000 	ldrcc	r0, [r4], -r0
    7a00:	01000025 	tsteq	r0, r5, lsr #32
    7a04:	04ac0a0a 	strteq	r0, [ip], #2570	; 0xa0a
    7a08:	50010000 	andpl	r0, r1, r0
    7a0c:	002b1114 	eoreq	r1, fp, r4, lsl r1
    7a10:	0a0a0100 	beq	287e18 <__Stack_Size+0x287a18>
    7a14:	0000004c 	andeq	r0, r0, ip, asr #32
    7a18:	20005101 	andcs	r5, r0, r1, lsl #2
    7a1c:	00000c70 	andeq	r0, r0, r0, ror ip
    7a20:	960a1c01 	strls	r1, [sl], -r1, lsl #24
    7a24:	04080057 	streq	r0, [r8], #-87	; 0x57
    7a28:	01000000 	mrseq	r0, (UNDEF: 0)
    7a2c:	0018399c 	mulseq	r8, ip, r9
    7a30:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7a34:	1c010000 	stcne	0, cr0, [r1], {-0}
    7a38:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    7a3c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    7a40:	00000c77 	andeq	r0, r0, r7, ror ip
    7a44:	4c0a1c01 	stcmi	12, cr1, [sl], {1}
    7a48:	01000000 	mrseq	r0, (UNDEF: 0)
    7a4c:	d4200051 	strtle	r0, [r0], #-81	; 0x51
    7a50:	01000023 	tsteq	r0, r3, lsr #32
    7a54:	579a0a2e 	ldrpl	r0, [sl, lr, lsr #20]
    7a58:	00040800 	andeq	r0, r4, r0, lsl #16
    7a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7a60:	0000186c 	andeq	r1, r0, ip, ror #16
    7a64:	00253614 	eoreq	r3, r5, r4, lsl r6
    7a68:	0a2e0100 	beq	b87e70 <__Stack_Size+0xb87a70>
    7a6c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7a70:	db145001 	blle	51ba7c <__Stack_Size+0x51b67c>
    7a74:	01000023 	tsteq	r0, r3, lsr #32
    7a78:	004c0a2e 	subeq	r0, ip, lr, lsr #20
    7a7c:	51010000 	mrspl	r0, (UNDEF: 1)
    7a80:	28a82000 	stmiacs	r8!, {sp}
    7a84:	40010000 	andmi	r0, r1, r0
    7a88:	00579e0a 	subseq	r9, r7, sl, lsl #28
    7a8c:	00000408 	andeq	r0, r0, r8, lsl #8
    7a90:	9f9c0100 	svcls	0x009c0100
    7a94:	14000018 	strne	r0, [r0], #-24
    7a98:	00002536 	andeq	r2, r0, r6, lsr r5
    7a9c:	ac0a4001 	stcge	0, cr4, [sl], {1}
    7aa0:	01000004 	tsteq	r0, r4
    7aa4:	28af1450 	stmiacs	pc!, {r4, r6, sl, ip}	; <UNPREDICTABLE>
    7aa8:	40010000 	andmi	r0, r1, r0
    7aac:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7ab0:	00510100 	subseq	r0, r1, r0, lsl #2
    7ab4:	0023e420 	eoreq	lr, r3, r0, lsr #8
    7ab8:	0a520100 	beq	1487ec0 <__Stack_Size+0x1487ac0>
    7abc:	080057a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, ip, lr}
    7ac0:	00000006 	andeq	r0, r0, r6
    7ac4:	18d29c01 	ldmne	r2, {r0, sl, fp, ip, pc}^
    7ac8:	36140000 	ldrcc	r0, [r4], -r0
    7acc:	01000025 	tsteq	r0, r5, lsr #32
    7ad0:	04ac0a52 	strteq	r0, [ip], #2642	; 0xa52
    7ad4:	50010000 	andpl	r0, r1, r0
    7ad8:	0023eb14 	eoreq	lr, r3, r4, lsl fp
    7adc:	0a520100 	beq	1487ee4 <__Stack_Size+0x1487ae4>
    7ae0:	0000004c 	andeq	r0, r0, ip, asr #32
    7ae4:	20005101 	andcs	r5, r0, r1, lsl #2
    7ae8:	000029e7 	andeq	r2, r0, r7, ror #19
    7aec:	a80a6a01 	stmdage	sl, {r0, r9, fp, sp, lr}
    7af0:	16080057 			; <UNDEFINED> instruction: 0x16080057
    7af4:	01000000 	mrseq	r0, (UNDEF: 0)
    7af8:	0019079c 	mulseq	r9, ip, r7
    7afc:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7b00:	6a010000 	bvs	47b08 <__Stack_Size+0x47708>
    7b04:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    7b08:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7b0c:	00002960 	andeq	r2, r0, r0, ror #18
    7b10:	4c0a6a01 	stcmi	10, cr6, [sl], {1}
    7b14:	df000000 	svcle	0x00000000
    7b18:	00000042 	andeq	r0, r0, r2, asr #32
    7b1c:	0027f220 	eoreq	pc, r7, r0, lsr #4
    7b20:	0a860100 	beq	fe187f28 <SCS_BASE+0x1e179f28>
    7b24:	080057be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    7b28:	0000001a 	andeq	r0, r0, sl, lsl r0
    7b2c:	193c9c01 	ldmdbne	ip!, {r0, sl, fp, ip, pc}
    7b30:	36140000 	ldrcc	r0, [r4], -r0
    7b34:	01000025 	tsteq	r0, r5, lsr #32
    7b38:	04ac0a86 	strteq	r0, [ip], #2694	; 0xa86
    7b3c:	50010000 	andpl	r0, r1, r0
    7b40:	00296015 	eoreq	r6, r9, r5, lsl r0
    7b44:	0a860100 	beq	fe187f4c <SCS_BASE+0x1e179f4c>
    7b48:	0000004c 	andeq	r0, r0, ip, asr #32
    7b4c:	00004300 	andeq	r4, r0, r0, lsl #6
    7b50:	2bcc2000 	blcs	ff30fb58 <SCS_BASE+0x1f301b58>
    7b54:	8a010000 	bhi	47b5c <__Stack_Size+0x4775c>
    7b58:	0057d802 	subseq	sp, r7, r2, lsl #16
    7b5c:	00006e08 	andeq	r6, r0, r8, lsl #28
    7b60:	3e9c0100 	fmlcce	f0, f4, f0
    7b64:	1500001a 	strne	r0, [r0, #-26]
    7b68:	00002536 	andeq	r2, r0, r6, lsr r5
    7b6c:	ac028a01 	stcge	10, cr8, [r2], {1}
    7b70:	21000004 	tstcs	r0, r4
    7b74:	15000043 	strne	r0, [r0, #-67]	; 0x43
    7b78:	00002876 	andeq	r2, r0, r6, ror r8
    7b7c:	24028a01 	strcs	r8, [r2], #-2561	; 0xa01
    7b80:	87000009 	strhi	r0, [r0, -r9]
    7b84:	16000043 	strne	r0, [r0], -r3, asr #32
    7b88:	00002a95 	muleq	r0, r5, sl
    7b8c:	4c028c01 	stcmi	12, cr8, [r2], {1}
    7b90:	cc000000 	stcgt	0, cr0, [r0], {-0}
    7b94:	16000043 	strne	r0, [r0], -r3, asr #32
    7b98:	000029bb 			; <UNDEFINED> instruction: 0x000029bb
    7b9c:	4c028d01 	stcmi	13, cr8, [r2], {1}
    7ba0:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    7ba4:	1a000043 	bne	7cb8 <__Stack_Size+0x78b8>
    7ba8:	08005802 	stmdaeq	r0, {r1, fp, ip, lr}
    7bac:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    7bb0:	000019a6 	andeq	r1, r0, r6, lsr #19
    7bb4:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    7bb8:	1a000075 	bne	7d94 <__Stack_Size+0x7994>
    7bbc:	0800580a 	stmdaeq	r0, {r1, r3, fp, ip, lr}
    7bc0:	000018d2 	ldrdeq	r1, [r0], -r2
    7bc4:	000019ba 			; <UNDEFINED> instruction: 0x000019ba
    7bc8:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    7bcc:	1a000075 	bne	7da8 <__Stack_Size+0x79a8>
    7bd0:	08005816 	stmdaeq	r0, {r1, r2, r4, fp, ip, lr}
    7bd4:	00000527 	andeq	r0, r0, r7, lsr #10
    7bd8:	000019da 	ldrdeq	r1, [r0], -sl
    7bdc:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    7be0:	011b0076 	tsteq	fp, r6, ror r0
    7be4:	00770251 	rsbseq	r0, r7, r1, asr r2
    7be8:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    7bec:	1c000075 	stcne	0, cr0, [r0], {117}	; 0x75
    7bf0:	08005822 	stmdaeq	r0, {r1, r5, fp, ip, lr}
    7bf4:	00001907 	andeq	r1, r0, r7, lsl #18
    7bf8:	000019ef 	andeq	r1, r0, pc, ror #19
    7bfc:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7c00:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    7c04:	00582627 	subseq	r2, r8, r7, lsr #12
    7c08:	00052708 	andeq	r2, r5, r8, lsl #14
    7c0c:	582e1a00 	stmdapl	lr!, {r9, fp, ip}
    7c10:	19070800 	stmdbne	r7, {fp}
    7c14:	1a0c0000 	bne	307c1c <__Stack_Size+0x30781c>
    7c18:	011b0000 	tsteq	fp, r0
    7c1c:	00750250 	rsbseq	r0, r5, r0, asr r2
    7c20:	583a1a00 	ldmdapl	sl!, {r9, fp, ip}
    7c24:	04b20800 	ldrteq	r0, [r2], #2048	; 0x800
    7c28:	1a2c0000 	bne	b07c30 <__Stack_Size+0xb07830>
    7c2c:	011b0000 	tsteq	fp, r0
    7c30:	00760252 	rsbseq	r0, r6, r2, asr r2
    7c34:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    7c38:	011b0077 	tsteq	fp, r7, ror r0
    7c3c:	00750250 	rsbseq	r0, r5, r0, asr r2
    7c40:	58461d00 	stmdapl	r6, {r8, sl, fp, ip}^
    7c44:	18d20800 	ldmne	r2, {fp}^
    7c48:	011b0000 	tsteq	fp, r0
    7c4c:	01f30350 	mvnseq	r0, r0, asr r3
    7c50:	20000050 	andcs	r0, r0, r0, asr r0
    7c54:	00002a03 	andeq	r2, r0, r3, lsl #20
    7c58:	460aa201 	strmi	sl, [sl], -r1, lsl #4
    7c5c:	16080058 			; <UNDEFINED> instruction: 0x16080058
    7c60:	01000000 	mrseq	r0, (UNDEF: 0)
    7c64:	001a739c 	mulseq	sl, ip, r3
    7c68:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    7c6c:	a2010000 	andge	r0, r1, #0
    7c70:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    7c74:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7c78:	00002960 	andeq	r2, r0, r0, ror #18
    7c7c:	4c0aa201 	sfmmi	f2, 1, [sl], {1}
    7c80:	20000000 	andcs	r0, r0, r0
    7c84:	00000044 	andeq	r0, r0, r4, asr #32
    7c88:	00255c20 	eoreq	r5, r5, r0, lsr #24
    7c8c:	0abe0100 	beq	fef88094 <SCS_BASE+0x1ef7a094>
    7c90:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    7c94:	0000001a 	andeq	r0, r0, sl, lsl r0
    7c98:	1aa89c01 	bne	fea2eca4 <SCS_BASE+0x1ea20ca4>
    7c9c:	36140000 	ldrcc	r0, [r4], -r0
    7ca0:	01000025 	tsteq	r0, r5, lsr #32
    7ca4:	04ac0abe 	strteq	r0, [ip], #2750	; 0xabe
    7ca8:	50010000 	andpl	r0, r1, r0
    7cac:	00296015 	eoreq	r6, r9, r5, lsl r0
    7cb0:	0abe0100 	beq	fef880b8 <SCS_BASE+0x1ef7a0b8>
    7cb4:	0000004c 	andeq	r0, r0, ip, asr #32
    7cb8:	00004441 	andeq	r4, r0, r1, asr #8
    7cbc:	28872a00 	stmcs	r7, {r9, fp, sp}
    7cc0:	4b010000 	blmi	47cc8 <__Stack_Size+0x478c8>
    7cc4:	1b0a010c 	blne	2880fc <__Stack_Size+0x287cfc>
    7cc8:	36100000 	ldrcc	r0, [r0], -r0
    7ccc:	01000025 	tsteq	r0, r5, lsr #32
    7cd0:	04ac0c4b 	strteq	r0, [ip], #3147	; 0xc4b
    7cd4:	73100000 	tstvc	r0, #0
    7cd8:	0100002a 	tsteq	r0, sl, lsr #32
    7cdc:	004c0c4b 	subeq	r0, ip, fp, asr #24
    7ce0:	17100000 	ldrne	r0, [r0, -r0]
    7ce4:	0100002a 	tsteq	r0, sl, lsr #32
    7ce8:	004c0c4b 	subeq	r0, ip, fp, asr #24
    7cec:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    7cf0:	0100002c 	tsteq	r0, ip, lsr #32
    7cf4:	004c0c4c 	subeq	r0, ip, ip, asr #24
    7cf8:	83110000 	tsthi	r1, #0
    7cfc:	01000029 	tsteq	r0, r9, lsr #32
    7d00:	004c0c4e 	subeq	r0, ip, lr, asr #24
    7d04:	a3110000 	tstge	r1, #0
    7d08:	01000026 	tsteq	r0, r6, lsr #32
    7d0c:	004c0c4e 	subeq	r0, ip, lr, asr #24
    7d10:	742b0000 	strtvc	r0, [fp], #-0
    7d14:	0100706d 	tsteq	r0, sp, rrx
    7d18:	004c0c4e 	subeq	r0, ip, lr, asr #24
    7d1c:	2a000000 	bcs	7d24 <__Stack_Size+0x7924>
    7d20:	00002b3b 	andeq	r2, r0, fp, lsr fp
    7d24:	010c7a01 	tsteq	ip, r1, lsl #20
    7d28:	00001b6c 	andeq	r1, r0, ip, ror #22
    7d2c:	00253610 	eoreq	r3, r5, r0, lsl r6
    7d30:	0c7a0100 	ldfeqe	f0, [sl], #-0
    7d34:	000004ac 	andeq	r0, r0, ip, lsr #9
    7d38:	002a7310 	eoreq	r7, sl, r0, lsl r3
    7d3c:	0c7a0100 	ldfeqe	f0, [sl], #-0
    7d40:	0000004c 	andeq	r0, r0, ip, asr #32
    7d44:	002a1710 	eoreq	r1, sl, r0, lsl r7
    7d48:	0c7a0100 	ldfeqe	f0, [sl], #-0
    7d4c:	0000004c 	andeq	r0, r0, ip, asr #32
    7d50:	002c0810 	eoreq	r0, ip, r0, lsl r8
    7d54:	0c7b0100 	ldfeqe	f0, [fp], #-0
    7d58:	0000004c 	andeq	r0, r0, ip, asr #32
    7d5c:	00298311 	eoreq	r8, r9, r1, lsl r3
    7d60:	0c7d0100 	ldfeqe	f0, [sp], #-0
    7d64:	0000004c 	andeq	r0, r0, ip, asr #32
    7d68:	0026a311 	eoreq	sl, r6, r1, lsl r3
    7d6c:	0c7d0100 	ldfeqe	f0, [sp], #-0
    7d70:	0000004c 	andeq	r0, r0, ip, asr #32
    7d74:	706d742b 	rsbvc	r7, sp, fp, lsr #8
    7d78:	0c7d0100 	ldfeqe	f0, [sp], #-0
    7d7c:	0000004c 	andeq	r0, r0, ip, asr #32
    7d80:	2bfd2000 	blcs	fff4fd88 <SCS_BASE+0x1ff41d88>
    7d84:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    7d88:	00587602 	subseq	r7, r8, r2, lsl #12
    7d8c:	0000b608 	andeq	fp, r0, r8, lsl #12
    7d90:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    7d94:	1500001c 	strne	r0, [r0, #-28]
    7d98:	00002536 	andeq	r2, r0, r6, lsr r5
    7d9c:	ac024901 	stcge	9, cr4, [r2], {1}
    7da0:	62000004 	andvs	r0, r0, #4
    7da4:	15000044 	strne	r0, [r0, #-68]	; 0x44
    7da8:	00002876 	andeq	r2, r0, r6, ror r8
    7dac:	24024901 	strcs	r4, [r2], #-2305	; 0x901
    7db0:	fa000009 	blx	7ddc <__Stack_Size+0x79dc>
    7db4:	2c000044 	stccs	0, cr0, [r0], {68}	; 0x44
    7db8:	00001aa8 	andeq	r1, r0, r8, lsr #21
    7dbc:	080058b0 	stmdaeq	r0, {r4, r5, r7, fp, ip, lr}
    7dc0:	00000030 	andeq	r0, r0, r0, lsr r0
    7dc4:	fc026a01 	stc2	10, cr6, [r2], {1}
    7dc8:	2200001b 	andcs	r0, r0, #27
    7dcc:	00001ad9 	ldrdeq	r1, [r0], -r9
    7dd0:	00004558 	andeq	r4, r0, r8, asr r5
    7dd4:	001acd22 	andseq	ip, sl, r2, lsr #26
    7dd8:	00456b00 	subeq	r6, r5, r0, lsl #22
    7ddc:	1ac12200 	bne	ff0505e4 <SCS_BASE+0x1f0425e4>
    7de0:	457e0000 	ldrbmi	r0, [lr, #-0]!
    7de4:	b5220000 	strlt	r0, [r2, #-0]!
    7de8:	9100001a 	tstls	r0, sl, lsl r0
    7dec:	2d000045 	stccs	0, cr0, [r0, #-276]	; 0xfffffeec
    7df0:	00000030 	andeq	r0, r0, r0, lsr r0
    7df4:	001ae525 	andseq	lr, sl, r5, lsr #10
    7df8:	0045b200 	subeq	fp, r5, r0, lsl #4
    7dfc:	1af12500 	bne	ffc51204 <SCS_BASE+0x1fc43204>
    7e00:	45ed0000 	strbmi	r0, [sp, #0]!
    7e04:	fd250000 	stc2	0, cr0, [r5, #-0]
    7e08:	2300001a 	movwcs	r0, #26
    7e0c:	00000046 	andeq	r0, r0, r6, asr #32
    7e10:	1b0a2c00 	blne	292e18 <__Stack_Size+0x292a18>
    7e14:	58ee0000 	stmiapl	lr!, {}^	; <UNPREDICTABLE>
    7e18:	00500800 	subseq	r0, r0, r0, lsl #16
    7e1c:	74010000 	strvc	r0, [r1], #-0
    7e20:	001c5602 	andseq	r5, ip, r2, lsl #12
    7e24:	1b3b2200 	blne	ed062c <__Stack_Size+0xed022c>
    7e28:	46460000 	strbmi	r0, [r6], -r0
    7e2c:	2f220000 	svccs	0x00220000
    7e30:	5900001b 	stmdbpl	r0, {r0, r1, r3, r4}
    7e34:	22000046 	andcs	r0, r0, #70	; 0x46
    7e38:	00001b23 	andeq	r1, r0, r3, lsr #22
    7e3c:	0000466c 	andeq	r4, r0, ip, ror #12
    7e40:	001b1722 	andseq	r1, fp, r2, lsr #14
    7e44:	00467f00 	subeq	r7, r6, r0, lsl #30
    7e48:	00502d00 	subseq	r2, r0, r0, lsl #26
    7e4c:	47250000 	strmi	r0, [r5, -r0]!
    7e50:	a000001b 	andge	r0, r0, fp, lsl r0
    7e54:	25000046 	strcs	r0, [r0, #-70]	; 0x46
    7e58:	00001b53 	andeq	r1, r0, r3, asr fp
    7e5c:	000046e7 	andeq	r4, r0, r7, ror #13
    7e60:	001b5f25 	andseq	r5, fp, r5, lsr #30
    7e64:	00472200 	subeq	r2, r7, r0, lsl #4
    7e68:	1a000000 	bne	7e70 <__Stack_Size+0x7a70>
    7e6c:	0800588a 	stmdaeq	r0, {r1, r3, r7, fp, ip, lr}
    7e70:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    7e74:	00001c6a 	andeq	r1, r0, sl, ror #24
    7e78:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    7e7c:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    7e80:	08005896 	stmdaeq	r0, {r1, r2, r4, r7, fp, ip, lr}
    7e84:	000018d2 	ldrdeq	r1, [r0], -r2
    7e88:	00001c7f 	andeq	r1, r0, pc, ror ip
    7e8c:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7e90:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    7e94:	00589e27 	subseq	r9, r8, r7, lsr #28
    7e98:	00052708 	andeq	r2, r5, r8, lsl #14
    7e9c:	58aa1c00 	stmiapl	sl!, {sl, fp, ip}
    7ea0:	19070800 	stmdbne	r7, {fp}
    7ea4:	1c9d0000 	ldcne	0, cr0, [sp], {0}
    7ea8:	011b0000 	tsteq	fp, r0
    7eac:	01f30350 	mvnseq	r0, r0, asr r3
    7eb0:	ee1c0050 	mrc	0, 0, r0, cr12, cr0, {2}
    7eb4:	3e080058 	mcrcc	0, 0, r0, cr8, cr8, {2}
    7eb8:	b200001a 	andlt	r0, r0, #26
    7ebc:	1b00001c 	blne	7f34 <__Stack_Size+0x7b34>
    7ec0:	f3035001 	vhadd.u8	d5, d3, d1
    7ec4:	1d005001 	stcne	0, cr5, [r0, #-4]
    7ec8:	0800592c 	stmdaeq	r0, {r2, r3, r5, r8, fp, ip, lr}
    7ecc:	00001a73 	andeq	r1, r0, r3, ror sl
    7ed0:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    7ed4:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    7ed8:	26ab2000 	strtcs	r2, [fp], r0
    7edc:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    7ee0:	00592c0a 	subseq	r2, r9, sl, lsl #24
    7ee4:	00001008 	andeq	r1, r0, r8
    7ee8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    7eec:	1400001c 	strne	r0, [r0], #-28
    7ef0:	00002536 	andeq	r2, r0, r6, lsr r5
    7ef4:	ac0ad801 	stcge	8, cr13, [sl], {1}
    7ef8:	01000004 	tsteq	r0, r4
    7efc:	24561550 	ldrbcs	r1, [r6], #-1360	; 0x550
    7f00:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    7f04:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7f08:	00474500 	subeq	r4, r7, r0, lsl #10
    7f0c:	a32e0000 			; <UNDEFINED> instruction: 0xa32e0000
    7f10:	01000002 	tsteq	r0, r2
    7f14:	004c0aec 	subeq	r0, ip, ip, ror #21
    7f18:	593c0000 	ldmdbpl	ip!, {}	; <UNPREDICTABLE>
    7f1c:	00060800 	andeq	r0, r6, r0, lsl #16
    7f20:	9c010000 	stcls	0, cr0, [r1], {-0}
    7f24:	00001d24 	andeq	r1, r0, r4, lsr #26
    7f28:	00253615 	eoreq	r3, r5, r5, lsl r6
    7f2c:	0aec0100 	beq	ffb08334 <SCS_BASE+0x1fafa334>
    7f30:	000004ac 	andeq	r0, r0, ip, lsr #9
    7f34:	00004766 	andeq	r4, r0, r6, ror #14
    7f38:	25c22e00 	strbcs	r2, [r2, #3584]	; 0xe00
    7f3c:	fd010000 	stc2	0, cr0, [r1, #-0]
    7f40:	00004c0a 	andeq	r4, r0, sl, lsl #24
    7f44:	00594200 	subseq	r4, r9, r0, lsl #4
    7f48:	00000608 	andeq	r0, r0, r8, lsl #12
    7f4c:	4f9c0100 	svcmi	0x009c0100
    7f50:	1500001d 	strne	r0, [r0, #-29]
    7f54:	00002536 	andeq	r2, r0, r6, lsr r5
    7f58:	ac0afd01 	stcge	13, cr15, [sl], {1}
    7f5c:	87000004 	strhi	r0, [r0, -r4]
    7f60:	00000047 	andeq	r0, r0, r7, asr #32
    7f64:	0025d22e 	eoreq	sp, r5, lr, lsr #4
    7f68:	0b0e0100 	bleq	388370 <__Stack_Size+0x387f70>
    7f6c:	0000004c 	andeq	r0, r0, ip, asr #32
    7f70:	08005948 	stmdaeq	r0, {r3, r6, r8, fp, ip, lr}
    7f74:	00000006 	andeq	r0, r0, r6
    7f78:	1d7a9c01 	ldclne	12, cr9, [sl, #-4]!
    7f7c:	36150000 	ldrcc	r0, [r5], -r0
    7f80:	01000025 	tsteq	r0, r5, lsr #32
    7f84:	04ac0b0e 	strteq	r0, [ip], #2830	; 0xb0e
    7f88:	47a80000 	strmi	r0, [r8, r0]!
    7f8c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    7f90:	000025e2 	andeq	r2, r0, r2, ror #11
    7f94:	4c0b1f01 	stcmi	15, cr1, [fp], {1}
    7f98:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    7f9c:	08080059 	stmdaeq	r8, {r0, r3, r4, r6}
    7fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fa4:	001da59c 	mulseq	sp, ip, r5
    7fa8:	25361500 	ldrcs	r1, [r6, #-1280]!	; 0x500
    7fac:	1f010000 	svcne	0x00010000
    7fb0:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    7fb4:	0047c900 	subeq	ip, r7, r0, lsl #18
    7fb8:	e82e0000 	stmda	lr!, {}	; <UNPREDICTABLE>
    7fbc:	01000028 	tsteq	r0, r8, lsr #32
    7fc0:	004c0b2f 	subeq	r0, ip, pc, lsr #22
    7fc4:	59560000 	ldmdbpl	r6, {}^	; <UNPREDICTABLE>
    7fc8:	00060800 	andeq	r0, r6, r0, lsl #16
    7fcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7fd0:	00001dd0 	ldrdeq	r1, [r0], -r0
    7fd4:	00253615 	eoreq	r3, r5, r5, lsl r6
    7fd8:	0b2f0100 	bleq	bc83e0 <__Stack_Size+0xbc7fe0>
    7fdc:	000004ac 	andeq	r0, r0, ip, lsr #9
    7fe0:	000047ea 	andeq	r4, r0, sl, ror #15
    7fe4:	279a2e00 	ldrcs	r2, [sl, r0, lsl #28]
    7fe8:	3f010000 	svccc	0x00010000
    7fec:	00004c0b 	andeq	r4, r0, fp, lsl #24
    7ff0:	00595c00 	subseq	r5, r9, r0, lsl #24
    7ff4:	00000608 	andeq	r0, r0, r8, lsl #12
    7ff8:	fb9c0100 	blx	fe708402 <SCS_BASE+0x1e6fa402>
    7ffc:	1500001d 	strne	r0, [r0, #-29]
    8000:	00002536 	andeq	r2, r0, r6, lsr r5
    8004:	ac0b3f01 	stcge	15, cr3, [fp], {1}
    8008:	0b000004 	bleq	8020 <__Stack_Size+0x7c20>
    800c:	00000048 	andeq	r0, r0, r8, asr #32
    8010:	00242e2e 	eoreq	r2, r4, lr, lsr #28
    8014:	0b5d0100 	bleq	174841c <__Stack_Size+0x174801c>
    8018:	000000a4 	andeq	r0, r0, r4, lsr #1
    801c:	08005962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip, lr}
    8020:	0000000c 	andeq	r0, r0, ip
    8024:	1e449c01 	cdpne	12, 4, cr9, cr4, cr1, {0}
    8028:	36150000 	ldrcc	r0, [r5], -r0
    802c:	01000025 	tsteq	r0, r5, lsr #32
    8030:	04ac0b5d 	strteq	r0, [ip], #2909	; 0xb5d
    8034:	482c0000 	stmdami	ip!, {}	; <UNPREDICTABLE>
    8038:	2b140000 	blcs	508040 <__Stack_Size+0x507c40>
    803c:	01000027 	tsteq	r0, r7, lsr #32
    8040:	004c0b5d 	subeq	r0, ip, sp, asr fp
    8044:	51010000 	mrspl	r0, (UNDEF: 1)
    8048:	00162016 	andseq	r2, r6, r6, lsl r0
    804c:	0b5f0100 	bleq	17c8454 <__Stack_Size+0x17c8054>
    8050:	000000af 	andeq	r0, r0, pc, lsr #1
    8054:	0000484d 	andeq	r4, r0, sp, asr #16
    8058:	26052000 	strcs	r2, [r5], -r0
    805c:	86010000 	strhi	r0, [r1], -r0
    8060:	00596e0b 	subseq	r6, r9, fp, lsl #28
    8064:	00000808 	andeq	r0, r0, r8, lsl #16
    8068:	799c0100 	ldmibvc	ip, {r8}
    806c:	1400001e 	strne	r0, [r0], #-30
    8070:	00002536 	andeq	r2, r0, r6, lsr r5
    8074:	ac0b8601 	stcge	6, cr8, [fp], {1}
    8078:	01000004 	tsteq	r0, r4
    807c:	272b1550 			; <UNDEFINED> instruction: 0x272b1550
    8080:	86010000 	strhi	r0, [r1], -r0
    8084:	00004c0b 	andeq	r4, r0, fp, lsl #24
    8088:	00487500 	subeq	r7, r8, r0, lsl #10
    808c:	442e0000 	strtmi	r0, [lr], #-0
    8090:	0100000c 	tsteq	r0, ip
    8094:	00af0ba2 	adceq	r0, pc, r2, lsr #23
    8098:	59760000 	ldmdbpl	r6!, {}^	; <UNPREDICTABLE>
    809c:	00160800 	andseq	r0, r6, r0, lsl #16
    80a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    80a4:	00001ee2 	andeq	r1, r0, r2, ror #29
    80a8:	00253615 	eoreq	r3, r5, r5, lsl r6
    80ac:	0ba20100 	bleq	fe8884b4 <SCS_BASE+0x1e87a4b4>
    80b0:	000004ac 	andeq	r0, r0, ip, lsr #9
    80b4:	00004896 	muleq	r0, r6, r8
    80b8:	002be214 	eoreq	lr, fp, r4, lsl r2
    80bc:	0ba20100 	bleq	fe8884c4 <SCS_BASE+0x1e87a4c4>
    80c0:	0000004c 	andeq	r0, r0, ip, asr #32
    80c4:	20165101 	andscs	r5, r6, r1, lsl #2
    80c8:	01000016 	tsteq	r0, r6, lsl r0
    80cc:	00af0ba4 	adceq	r0, pc, r4, lsr #23
    80d0:	48b70000 	ldmmi	r7!, {}	; <UNPREDICTABLE>
    80d4:	21160000 	tstcs	r6, r0
    80d8:	01000016 	tsteq	r0, r6, lsl r0
    80dc:	004c0ba5 	subeq	r0, ip, r5, lsr #23
    80e0:	48d60000 	ldmmi	r6, {}^	; <UNPREDICTABLE>
    80e4:	a7160000 	ldrge	r0, [r6, -r0]
    80e8:	01000024 	tsteq	r0, r4, lsr #32
    80ec:	004c0ba5 	subeq	r0, ip, r5, lsr #23
    80f0:	48fa0000 	ldmmi	sl!, {}^	; <UNPREDICTABLE>
    80f4:	20000000 	andcs	r0, r0, r0
    80f8:	00000339 	andeq	r0, r0, r9, lsr r3
    80fc:	8c0bcd01 	stchi	13, cr12, [fp], {1}
    8100:	08080059 	stmdaeq	r8, {r0, r3, r4, r6}
    8104:	01000000 	mrseq	r0, (UNDEF: 0)
    8108:	001f179c 	mulseq	pc, ip, r7	; <UNPREDICTABLE>
    810c:	25361400 	ldrcs	r1, [r6, #-1024]!	; 0x400
    8110:	cd010000 	stcgt	0, cr0, [r1, #-0]
    8114:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    8118:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    811c:	00002be2 	andeq	r2, r0, r2, ror #23
    8120:	4c0bcd01 	stcmi	13, cr12, [fp], {1}
    8124:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8128:	00000049 	andeq	r0, r0, r9, asr #32
    812c:	001f8b2f 	andseq	r8, pc, pc, lsr #22
    8130:	01150500 	tsteq	r5, r0, lsl #10
    8134:	00001f2e 	andeq	r1, r0, lr, lsr #30
    8138:	00003a30 	andeq	r3, r0, r0, lsr sl
    813c:	00cf3000 	sbceq	r3, pc, r0
    8140:	31000000 	mrscc	r0, (UNDEF: 0)
    8144:	00001951 	andeq	r1, r0, r1, asr r9
    8148:	30011405 	andcc	r1, r1, r5, lsl #8
    814c:	0000003a 	andeq	r0, r0, sl, lsr r0
    8150:	0000cf30 	andeq	ip, r0, r0, lsr pc
    8154:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8158:	0400000a 	streq	r0, [r0], #-10
    815c:	0015ef00 	andseq	lr, r5, r0, lsl #30
    8160:	e1010400 	tst	r1, r0, lsl #8
    8164:	01000007 	tsteq	r0, r7
    8168:	00002f11 	andeq	r2, r0, r1, lsl pc
    816c:	00000101 	andeq	r0, r0, r1, lsl #2
    8170:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    8174:	00000342 	andeq	r0, r0, r2, asr #6
    8178:	00001499 	muleq	r0, r9, r4
    817c:	67070402 	strvs	r0, [r7, -r2, lsl #8]
    8180:	0200000a 	andeq	r0, r0, #10
    8184:	093c0504 	ldmdbeq	ip!, {r2, r8, sl}
    8188:	02020000 	andeq	r0, r2, #0
    818c:	00090005 	andeq	r0, r9, r5
    8190:	06010200 	streq	r0, [r1], -r0, lsl #4
    8194:	00000a9d 	muleq	r0, sp, sl
    8198:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    819c:	4c270200 	sfmmi	f0, 4, [r7], #-0
    81a0:	02000000 	andeq	r0, r0, #0
    81a4:	0a620704 	beq	1889dbc <__Stack_Size+0x18899bc>
    81a8:	75030000 	strvc	r0, [r3, #-0]
    81ac:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    81b0:	00005e28 	andeq	r5, r0, r8, lsr #28
    81b4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    81b8:	00000c54 	andeq	r0, r0, r4, asr ip
    81bc:	00387503 	eorseq	r7, r8, r3, lsl #10
    81c0:	006f2902 	rsbeq	r2, pc, r2, lsl #18
    81c4:	01020000 	mrseq	r0, (UNDEF: 2)
    81c8:	000a9b08 	andeq	r9, sl, r8, lsl #22
    81cc:	04b00400 	ldrteq	r0, [r0], #1024	; 0x400
    81d0:	2f020000 	svccs	0x00020000
    81d4:	00000081 	andeq	r0, r0, r1, lsl #1
    81d8:	00004c05 	andeq	r4, r0, r5, lsl #24
    81dc:	030b0400 	movweq	r0, #46080	; 0xb400
    81e0:	30020000 	andcc	r0, r2, r0
    81e4:	00000091 	muleq	r0, r1, r0
    81e8:	00005e05 	andeq	r5, r0, r5, lsl #28
    81ec:	02010600 	andeq	r0, r1, #0, 12
    81f0:	0000ab39 	andeq	sl, r0, r9, lsr fp
    81f4:	188d0700 	stmne	sp, {r8, r9, sl}
    81f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    81fc:	00544553 	subseq	r4, r4, r3, asr r5
    8200:	84040001 	strhi	r0, [r4], #-1
    8204:	02000008 	andeq	r0, r0, #8
    8208:	00009639 	andeq	r9, r0, r9, lsr r6
    820c:	20150400 	andscs	r0, r5, r0, lsl #8
    8210:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    8214:	00000096 	muleq	r0, r6, r0
    8218:	3b020106 	blcc	88638 <__Stack_Size+0x88238>
    821c:	000000d6 	ldrdeq	r0, [r0], -r6
    8220:	0005b507 	andeq	fp, r5, r7, lsl #10
    8224:	3b070000 	blcc	1c822c <__Stack_Size+0x1c7e2c>
    8228:	0100000a 	tsteq	r0, sl
    822c:	011b0400 	tsteq	fp, r0, lsl #8
    8230:	3b020000 	blcc	88238 <__Stack_Size+0x87e38>
    8234:	000000c1 	andeq	r0, r0, r1, asr #1
    8238:	59070402 	stmdbpl	r7, {r1, sl}
    823c:	0900000a 	stmdbeq	r0, {r1, r3}
    8240:	0238031c 	eorseq	r0, r8, #28, 6	; 0x70000000
    8244:	000001a6 	andeq	r0, r0, r6, lsr #3
    8248:	0052530a 	subseq	r5, r2, sl, lsl #6
    824c:	86023a03 	strhi	r3, [r2], -r3, lsl #20
    8250:	00000000 	andeq	r0, r0, r0
    8254:	0008ba0b 	andeq	fp, r8, fp, lsl #20
    8258:	023b0300 	eorseq	r0, fp, #0, 6
    825c:	00000053 	andeq	r0, r0, r3, asr r0
    8260:	52440a02 	subpl	r0, r4, #8192	; 0x2000
    8264:	023c0300 	eorseq	r0, ip, #0, 6
    8268:	00000086 	andeq	r0, r0, r6, lsl #1
    826c:	08c40b04 	stmiaeq	r4, {r2, r8, r9, fp}^
    8270:	3d030000 	stccc	0, cr0, [r3, #-0]
    8274:	00005302 	andeq	r5, r0, r2, lsl #6
    8278:	420a0600 	andmi	r0, sl, #0, 12
    827c:	03005252 	movweq	r5, #594	; 0x252
    8280:	0086023e 	addeq	r0, r6, lr, lsr r2
    8284:	0b080000 	bleq	20828c <__Stack_Size+0x207e8c>
    8288:	000008ce 	andeq	r0, r0, lr, asr #17
    828c:	53023f03 	movwpl	r3, #12035	; 0x2f03
    8290:	0a000000 	beq	8298 <__Stack_Size+0x7e98>
    8294:	3152430a 	cmpcc	r2, sl, lsl #6
    8298:	02400300 	subeq	r0, r0, #0, 6
    829c:	00000086 	andeq	r0, r0, r6, lsl #1
    82a0:	08d80b0c 	ldmeq	r8, {r2, r3, r8, r9, fp}^
    82a4:	41030000 	mrsmi	r0, (UNDEF: 3)
    82a8:	00005302 	andeq	r5, r0, r2, lsl #6
    82ac:	430a0e00 	movwmi	r0, #44544	; 0xae00
    82b0:	03003252 	movweq	r3, #594	; 0x252
    82b4:	00860242 	addeq	r0, r6, r2, asr #4
    82b8:	0b100000 	bleq	4082c0 <__Stack_Size+0x407ec0>
    82bc:	000008e2 	andeq	r0, r0, r2, ror #17
    82c0:	53024303 	movwpl	r4, #8963	; 0x2303
    82c4:	12000000 	andne	r0, r0, #0
    82c8:	3352430a 	cmpcc	r2, #671088640	; 0x28000000
    82cc:	02440300 	subeq	r0, r4, #0, 6
    82d0:	00000086 	andeq	r0, r0, r6, lsl #1
    82d4:	08ec0b14 	stmiaeq	ip!, {r2, r4, r8, r9, fp}^
    82d8:	45030000 	strmi	r0, [r3, #-0]
    82dc:	00005302 	andeq	r5, r0, r2, lsl #6
    82e0:	720b1600 	andvc	r1, fp, #0, 12
    82e4:	03000002 	movweq	r0, #2
    82e8:	00860246 	addeq	r0, r6, r6, asr #4
    82ec:	0b180000 	bleq	6082f4 <__Stack_Size+0x607ef4>
    82f0:	000008f6 	strdeq	r0, [r0], -r6
    82f4:	53024703 	movwpl	r4, #9987	; 0x2703
    82f8:	1a000000 	bne	8300 <__Stack_Size+0x7f00>
    82fc:	05010c00 	streq	r0, [r1, #-3072]	; 0xc00
    8300:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
    8304:	0000e802 	andeq	lr, r0, r2, lsl #16
    8308:	04100d00 	ldreq	r0, [r0], #-3328	; 0xd00
    830c:	0002031a 	andeq	r0, r2, sl, lsl r3
    8310:	02bd0e00 	adcseq	r0, sp, #0, 28
    8314:	1c040000 	stcne	0, cr0, [r4], {-0}
    8318:	00000041 	andeq	r0, r0, r1, asr #32
    831c:	01960e00 	orrseq	r0, r6, r0, lsl #28
    8320:	1d040000 	stcne	0, cr0, [r4, #-0]
    8324:	00000053 	andeq	r0, r0, r3, asr r0
    8328:	01d90e04 	bicseq	r0, r9, r4, lsl #28
    832c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    8330:	00000053 	andeq	r0, r0, r3, asr r0
    8334:	0bd90e06 	bleq	ff64bb54 <SCS_BASE+0x1f63db54>
    8338:	1f040000 	svcne	0x00040000
    833c:	00000053 	andeq	r0, r0, r3, asr r0
    8340:	060d0e08 	streq	r0, [sp], -r8, lsl #28
    8344:	20040000 	andcs	r0, r4, r0
    8348:	00000053 	andeq	r0, r0, r3, asr r0
    834c:	06540e0a 	ldrbeq	r0, [r4], -sl, lsl #28
    8350:	21040000 	mrscs	r0, (UNDEF: 4)
    8354:	00000053 	andeq	r0, r0, r3, asr r0
    8358:	a604000c 	strge	r0, [r4], -ip
    835c:	0400000b 	streq	r0, [r0], #-11
    8360:	0001b222 	andeq	fp, r1, r2, lsr #4
    8364:	04080d00 	streq	r0, [r8], #-3328	; 0xd00
    8368:	00024725 	andeq	r4, r2, r5, lsr #14
    836c:	2e430e00 	cdpcs	14, 4, cr0, cr3, cr0, {0}
    8370:	27040000 	strcs	r0, [r4, -r0]
    8374:	00000053 	andeq	r0, r0, r3, asr r0
    8378:	2ef10e00 	cdpcs	14, 15, cr0, cr1, cr0, {0}
    837c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    8380:	00000053 	andeq	r0, r0, r3, asr r0
    8384:	2c790e02 	ldclcs	14, cr0, [r9], #-8
    8388:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    838c:	00000053 	andeq	r0, r0, r3, asr r0
    8390:	2f030e04 	svccs	0x00030e04
    8394:	2a040000 	bcs	10839c <__Stack_Size+0x107f9c>
    8398:	00000053 	andeq	r0, r0, r3, asr r0
    839c:	b2040006 	andlt	r0, r4, #6
    83a0:	0400002c 	streq	r0, [r0], #-44	; 0x2c
    83a4:	00020e2b 	andeq	r0, r2, fp, lsr #28
    83a8:	05140d00 	ldreq	r0, [r4, #-3328]	; 0xd00
    83ac:	00029719 	andeq	r9, r2, r9, lsl r7
    83b0:	21b60e00 			; <UNDEFINED> instruction: 0x21b60e00
    83b4:	1b050000 	blne	1483bc <__Stack_Size+0x147fbc>
    83b8:	00000041 	andeq	r0, r0, r1, asr #32
    83bc:	20740e00 	rsbscs	r0, r4, r0, lsl #28
    83c0:	1c050000 	stcne	0, cr0, [r5], {-0}
    83c4:	00000041 	andeq	r0, r0, r1, asr #32
    83c8:	220e0e04 	andcs	r0, lr, #4, 28	; 0x40
    83cc:	1d050000 	stcne	0, cr0, [r5, #-0]
    83d0:	00000041 	andeq	r0, r0, r1, asr #32
    83d4:	21d20e08 	bicscs	r0, r2, r8, lsl #28
    83d8:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
    83dc:	00000041 	andeq	r0, r0, r1, asr #32
    83e0:	21490e0c 	cmpcs	r9, ip, lsl #28
    83e4:	1f050000 	svcne	0x00050000
    83e8:	00000041 	andeq	r0, r0, r1, asr #32
    83ec:	3c040010 	stccc	0, cr0, [r4], {16}
    83f0:	05000020 	streq	r0, [r0, #-32]
    83f4:	00025220 	andeq	r5, r2, r0, lsr #4
    83f8:	0af70f00 	beq	ffdcc000 <SCS_BASE+0x1fdbe000>
    83fc:	5a010000 	bpl	48404 <__Stack_Size+0x48004>
    8400:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    8404:	00000094 	muleq	r0, r4, r0
    8408:	03729c01 	cmneq	r2, #256	; 0x100
    840c:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    8410:	0100002d 	tsteq	r0, sp, lsr #32
    8414:	0003725a 	andeq	r7, r3, sl, asr r2
    8418:	00493f00 	subeq	r3, r9, r0, lsl #30
    841c:	59c81100 	stmibpl	r8, {r8, ip}^
    8420:	09e50800 	stmibeq	r5!, {fp}^
    8424:	02e00000 	rsceq	r0, r0, #0
    8428:	01120000 	tsteq	r2, r0
    842c:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    8430:	0a035001 	beq	dc43c <__Stack_Size+0xdc03c>
    8434:	13004000 	movwne	r4, #0
    8438:	080059d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, ip, lr}
    843c:	000009e5 	andeq	r0, r0, r5, ror #19
    8440:	000002fa 	strdeq	r0, [r0], -sl
    8444:	01510112 	cmpeq	r1, r2, lsl r1
    8448:	50011230 	andpl	r1, r1, r0, lsr r2
    844c:	40000a03 	andmi	r0, r0, r3, lsl #20
    8450:	59e01100 	stmibpl	r0!, {r8, ip}^
    8454:	09fc0800 	ldmibeq	ip!, {fp}^
    8458:	03140000 	tsteq	r4, #0
    845c:	01120000 	tsteq	r2, r0
    8460:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    8464:	40035001 	andmi	r5, r3, r1
    8468:	1100243d 	tstne	r0, sp, lsr r4
    846c:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
    8470:	000009fc 	strdeq	r0, [r0], -ip
    8474:	0000032e 	andeq	r0, r0, lr, lsr #6
    8478:	01510112 	cmpeq	r1, r2, lsl r1
    847c:	50011231 	andpl	r1, r1, r1, lsr r2
    8480:	243e4003 	ldrtcs	r4, [lr], #-3
    8484:	5a001100 	bpl	c88c <__Stack_Size+0xc48c>
    8488:	09fc0800 	ldmibeq	ip!, {fp}^
    848c:	03480000 	movteq	r0, #32768	; 0x8000
    8490:	01120000 	tsteq	r2, r0
    8494:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    8498:	40035001 	andmi	r5, r3, r1
    849c:	1100243f 	tstne	r0, pc, lsr r4
    84a0:	08005a10 	stmdaeq	r0, {r4, r9, fp, ip, lr}
    84a4:	000009fc 	strdeq	r0, [r0], -ip
    84a8:	00000362 	andeq	r0, r0, r2, ror #6
    84ac:	01510112 	cmpeq	r1, r2, lsl r1
    84b0:	50011231 	andpl	r1, r1, r1, lsr r2
    84b4:	24404003 	strbcs	r4, [r0], #-3
    84b8:	5a1e1400 	bpl	78d4c0 <__Stack_Size+0x78d0c0>
    84bc:	09fc0800 	ldmibeq	ip!, {fp}^
    84c0:	01120000 	tsteq	r2, r0
    84c4:	00300151 	eorseq	r0, r0, r1, asr r1
    84c8:	a6041500 	strge	r1, [r4], -r0, lsl #10
    84cc:	0f000001 	svceq	0x00000001
    84d0:	00000148 	andeq	r0, r0, r8, asr #2
    84d4:	5a288c01 	bpl	a2b4e0 <__Stack_Size+0xa2b0e0>
    84d8:	00880800 	addeq	r0, r8, r0, lsl #16
    84dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    84e0:	00000415 	andeq	r0, r0, r5, lsl r4
    84e4:	002df510 	eoreq	pc, sp, r0, lsl r5	; <UNPREDICTABLE>
    84e8:	728c0100 	addvc	r0, ip, #0, 2
    84ec:	cf000003 	svcgt	0x00000003
    84f0:	10000049 	andne	r0, r0, r9, asr #32
    84f4:	00002dfc 	strdeq	r2, [r0], -ip
    84f8:	04158c01 	ldreq	r8, [r5], #-3073	; 0xc01
    84fc:	49fb0000 	ldmibmi	fp!, {}^	; <UNPREDICTABLE>
    8500:	27160000 	ldrcs	r0, [r6, -r0]
    8504:	01000019 	tsteq	r0, r9, lsl r0
    8508:	0000418e 	andeq	r4, r0, lr, lsl #3
    850c:	004a2700 	subeq	r2, sl, r0, lsl #14
    8510:	2d0f1600 	stccs	6, cr1, [pc, #-0]	; 8518 <__Stack_Size+0x8118>
    8514:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    8518:	00000041 	andeq	r0, r0, r1, asr #32
    851c:	00004b14 	andeq	r4, r0, r4, lsl fp
    8520:	002c6a16 	eoreq	r6, ip, r6, lsl sl
    8524:	418f0100 	orrmi	r0, pc, r0, lsl #2
    8528:	8b000000 	blhi	8530 <__Stack_Size+0x8130>
    852c:	1600004b 	strne	r0, [r0], -fp, asr #32
    8530:	00002e82 	andeq	r2, r0, r2, lsl #29
    8534:	00419001 	subeq	r9, r1, r1
    8538:	4c040000 	stcmi	0, cr0, [r4], {-0}
    853c:	a5160000 	ldrge	r0, [r6, #-0]
    8540:	0100002d 	tsteq	r0, sp, lsr #32
    8544:	00004191 	muleq	r0, r1, r1
    8548:	0049cf00 	subeq	ip, r9, r0, lsl #30
    854c:	2db01700 	ldccs	7, cr1, [r0]
    8550:	92010000 	andls	r0, r1, #0
    8554:	00000297 	muleq	r0, r7, r2
    8558:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
    855c:	08005a6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, fp, ip, lr}
    8560:	00000a13 	andeq	r0, r0, r3, lsl sl
    8564:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    8568:	00005c91 	muleq	r0, r1, ip
    856c:	02030415 	andeq	r0, r3, #352321536	; 0x15000000
    8570:	620f0000 	andvs	r0, pc, #0
    8574:	01000004 	tsteq	r0, r4
    8578:	005ab0e8 	subseq	fp, sl, r8, ror #1
    857c:	00001608 	andeq	r1, r0, r8, lsl #12
    8580:	3e9c0100 	fmlcce	f0, f4, f0
    8584:	19000004 	stmdbne	r0, {r2}
    8588:	00002dfc 	strdeq	r2, [r0], -ip
    858c:	0415e801 	ldreq	lr, [r5], #-2049	; 0x801
    8590:	50010000 	andpl	r0, r1, r0
    8594:	2ebe0f00 	cdpcs	15, 11, cr0, cr14, cr0, {0}
    8598:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    859c:	08005ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip, lr}
    85a0:	00000020 	andeq	r0, r0, r0, lsr #32
    85a4:	04809c01 	streq	r9, [r0], #3073	; 0xc01
    85a8:	f5190000 			; <UNDEFINED> instruction: 0xf5190000
    85ac:	0100002d 	tsteq	r0, sp, lsr #32
    85b0:	000372ff 	strdeq	r7, [r3], -pc	; <UNPREDICTABLE>
    85b4:	10500100 	subsne	r0, r0, r0, lsl #2
    85b8:	00002d6c 	andeq	r2, r0, ip, ror #26
    85bc:	0480ff01 	streq	pc, [r0], #3841	; 0xf01
    85c0:	4ca20000 	stcmi	0, cr0, [r2]
    85c4:	271a0000 	ldrcs	r0, [sl, -r0]
    85c8:	01000019 	tsteq	r0, r9, lsl r0
    85cc:	00410101 	subeq	r0, r1, r1, lsl #2
    85d0:	4cc30000 	stclmi	0, cr0, [r3], {0}
    85d4:	15000000 	strne	r0, [r0, #-0]
    85d8:	00024704 	andeq	r4, r2, r4, lsl #14
    85dc:	2d8f1b00 	vstrcs	d1, [pc]	; 85e4 <__Stack_Size+0x81e4>
    85e0:	23010000 	movwcs	r0, #4096	; 0x1000
    85e4:	005ae601 	subseq	lr, sl, r1, lsl #12
    85e8:	00000c08 	andeq	r0, r0, r8, lsl #24
    85ec:	ab9c0100 	blge	fe7089f4 <SCS_BASE+0x1e6fa9f4>
    85f0:	1c000004 	stcne	0, cr0, [r0], {4}
    85f4:	00002d6c 	andeq	r2, r0, ip, ror #26
    85f8:	80012301 	andhi	r2, r1, r1, lsl #6
    85fc:	01000004 	tsteq	r0, r4
    8600:	321b0050 	andscc	r0, fp, #80	; 0x50
    8604:	01000000 	mrseq	r0, (UNDEF: 0)
    8608:	5af20137 	bpl	ffc88aec <SCS_BASE+0x1fc7aaec>
    860c:	00180800 	andseq	r0, r8, r0, lsl #16
    8610:	9c010000 	stcls	0, cr0, [r1], {-0}
    8614:	000004de 	ldrdeq	r0, [r0], -lr
    8618:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    861c:	01370100 	teqeq	r7, r0, lsl #2
    8620:	00000372 	andeq	r0, r0, r2, ror r3
    8624:	911c5001 	tstls	ip, r1
    8628:	01000015 	tsteq	r0, r5, lsl r0
    862c:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    8630:	51010000 	mrspl	r0, (UNDEF: 1)
    8634:	097c1b00 	ldmdbeq	ip!, {r8, r9, fp, ip}^
    8638:	62010000 	andvs	r0, r1, #0
    863c:	005b0a01 	subseq	r0, fp, r1, lsl #20
    8640:	00003208 	andeq	r3, r0, r8, lsl #4
    8644:	639c0100 	orrsvs	r0, ip, #0, 2
    8648:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    864c:	00002df5 	strdeq	r2, [r0], -r5
    8650:	72016201 	andvc	r6, r1, #268435456	; 0x10000000
    8654:	fd000003 	stc2	0, cr0, [r0, #-12]
    8658:	1d00004c 	stcne	0, cr0, [r0, #-304]	; 0xfffffed0
    865c:	00002cf7 	strdeq	r2, [r0], -r7
    8660:	53016201 	movwpl	r6, #4609	; 0x1201
    8664:	36000000 	strcc	r0, [r0], -r0
    8668:	1d00004d 	stcne	0, cr0, [r0, #-308]	; 0xfffffecc
    866c:	00001591 	muleq	r0, r1, r5
    8670:	d6016201 	strle	r6, [r1], -r1, lsl #4
    8674:	57000000 	strpl	r0, [r0, -r0]
    8678:	1a00004d 	bne	87b4 <__Stack_Size+0x83b4>
    867c:	00002f35 	andeq	r2, r0, r5, lsr pc
    8680:	41016401 	tstmi	r1, r1, lsl #8
    8684:	91000000 	mrsls	r0, (UNDEF: 0)
    8688:	1a00004d 	bne	87c4 <__Stack_Size+0x83c4>
    868c:	00002e1c 	andeq	r2, r0, ip, lsl lr
    8690:	41016401 	tstmi	r1, r1, lsl #8
    8694:	b5000000 	strlt	r0, [r0, #-0]
    8698:	1a00004d 	bne	87d4 <__Stack_Size+0x83d4>
    869c:	00002efc 	strdeq	r2, [r0], -ip
    86a0:	41016401 	tstmi	r1, r1, lsl #8
    86a4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    86a8:	1e00004d 	cdpne	0, 0, cr0, cr0, cr13, {2}
    86ac:	00002da5 	andeq	r2, r0, r5, lsr #27
    86b0:	41016501 	tstmi	r1, r1, lsl #10
    86b4:	01000000 	mrseq	r0, (UNDEF: 0)
    86b8:	ea1b0050 	b	6c8800 <__Stack_Size+0x6c8400>
    86bc:	0100002c 	tsteq	r0, ip, lsr #32
    86c0:	5b3c019d 	blpl	f08d3c <__Stack_Size+0xf0893c>
    86c4:	00120800 	andseq	r0, r2, r0, lsl #16
    86c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    86cc:	000005a6 	andeq	r0, r0, r6, lsr #11
    86d0:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    86d4:	019d0100 	orrseq	r0, sp, r0, lsl #2
    86d8:	00000372 	andeq	r0, r0, r2, ror r3
    86dc:	821d5001 	andshi	r5, sp, #1
    86e0:	0100002d 	tsteq	r0, sp, lsr #32
    86e4:	0053019d 			; <UNDEFINED> instruction: 0x0053019d
    86e8:	4e380000 	cdpmi	0, 3, cr0, cr8, cr0, {0}
    86ec:	911c0000 	tstls	ip, r0
    86f0:	01000015 	tsteq	r0, r5, lsl r0
    86f4:	00d6019d 	smullseq	r0, r6, sp, r1
    86f8:	52010000 	andpl	r0, r1, #0
    86fc:	2dc11b00 	vstrcs	d17, [r1]
    8700:	bc010000 	stclt	0, cr0, [r1], {-0}
    8704:	005b4e01 	subseq	r4, fp, r1, lsl #28
    8708:	00001608 	andeq	r1, r0, r8, lsl #12
    870c:	db9c0100 	blle	fe708b14 <SCS_BASE+0x1e6fab14>
    8710:	1c000005 	stcne	0, cr0, [r0], {5}
    8714:	00002df5 	strdeq	r2, [r0], -r5
    8718:	7201bc01 	andvc	fp, r1, #256	; 0x100
    871c:	01000003 	tsteq	r0, r3
    8720:	2e0d1d50 	mcrcs	13, 0, r1, cr13, cr0, {2}
    8724:	bc010000 	stclt	0, cr0, [r1], {-0}
    8728:	00006501 	andeq	r6, r0, r1, lsl #10
    872c:	004e7200 	subeq	r7, lr, r0, lsl #4
    8730:	ce1b0000 	cdpgt	0, 1, cr0, cr11, cr0, {0}
    8734:	0100002e 	tsteq	r0, lr, lsr #32
    8738:	5b6401d5 	blpl	1908e94 <__Stack_Size+0x1908a94>
    873c:	00160800 	andseq	r0, r6, r0, lsl #16
    8740:	9c010000 	stcls	0, cr0, [r1], {-0}
    8744:	00000610 	andeq	r0, r0, r0, lsl r6
    8748:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    874c:	01d50100 	bicseq	r0, r5, r0, lsl #2
    8750:	00000372 	andeq	r0, r0, r2, ror r3
    8754:	dd1d5001 	ldcle	0, cr5, [sp, #-4]
    8758:	0100002c 	tsteq	r0, ip, lsr #32
    875c:	005301d5 	ldrsbeq	r0, [r3], #-21	; 0xffffffeb
    8760:	4e930000 	cdpmi	0, 9, cr0, cr3, cr0, {0}
    8764:	1b000000 	blne	876c <__Stack_Size+0x836c>
    8768:	00002e4f 	andeq	r2, r0, pc, asr #28
    876c:	7a01ea01 	bvc	82f78 <__Stack_Size+0x82b78>
    8770:	1808005b 	stmdane	r8, {r0, r1, r3, r4, r6}
    8774:	01000000 	mrseq	r0, (UNDEF: 0)
    8778:	0006439c 	muleq	r6, ip, r3
    877c:	2df51c00 	ldclcs	12, cr1, [r5]
    8780:	ea010000 	b	48788 <__Stack_Size+0x48388>
    8784:	00037201 	andeq	r7, r3, r1, lsl #4
    8788:	1c500100 	ldfnee	f0, [r0], {-0}
    878c:	00001591 	muleq	r0, r1, r5
    8790:	d601ea01 	strle	lr, [r1], -r1, lsl #20
    8794:	01000000 	mrseq	r0, (UNDEF: 0)
    8798:	401b0051 	andsmi	r0, fp, r1, asr r0
    879c:	0100002d 	tsteq	r0, sp, lsr #32
    87a0:	5b92020a 	blpl	fe488fd0 <SCS_BASE+0x1e47afd0>
    87a4:	00160800 	andseq	r0, r6, r0, lsl #16
    87a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    87ac:	00000678 	andeq	r0, r0, r8, ror r6
    87b0:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    87b4:	020a0100 	andeq	r0, sl, #0, 2
    87b8:	00000372 	andeq	r0, r0, r2, ror r3
    87bc:	971d5001 	ldrls	r5, [sp, -r1]
    87c0:	0100002c 	tsteq	r0, ip, lsr #32
    87c4:	0053020a 	subseq	r0, r3, sl, lsl #4
    87c8:	4eb40000 	cdpmi	0, 11, cr0, cr4, cr0, {0}
    87cc:	1b000000 	blne	87d4 <__Stack_Size+0x83d4>
    87d0:	00002e75 	andeq	r2, r0, r5, ror lr
    87d4:	a8021f01 	stmdage	r2, {r0, r8, r9, sl, fp, ip}
    87d8:	1808005b 	stmdane	r8, {r0, r1, r3, r4, r6}
    87dc:	01000000 	mrseq	r0, (UNDEF: 0)
    87e0:	0006ab9c 	muleq	r6, ip, fp
    87e4:	2df51c00 	ldclcs	12, cr1, [r5]
    87e8:	1f010000 	svcne	0x00010000
    87ec:	00037202 	andeq	r7, r3, r2, lsl #4
    87f0:	1c500100 	ldfnee	f0, [r0], {-0}
    87f4:	00001591 	muleq	r0, r1, r5
    87f8:	d6021f01 	strle	r1, [r2], -r1, lsl #30
    87fc:	01000000 	mrseq	r0, (UNDEF: 0)
    8800:	931b0051 	tstls	fp, #81	; 0x51
    8804:	01000003 	tsteq	r0, r3
    8808:	5bc0023b 	blpl	ff0090fc <SCS_BASE+0x1effb0fc>
    880c:	00080800 	andeq	r0, r8, r0, lsl #16
    8810:	9c010000 	stcls	0, cr0, [r1], {-0}
    8814:	000006e0 	andeq	r0, r0, r0, ror #13
    8818:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    881c:	023b0100 	eorseq	r0, fp, #0, 2
    8820:	00000372 	andeq	r0, r0, r2, ror r3
    8824:	0c1d5001 	ldceq	0, cr5, [sp], {1}
    8828:	01000017 	tsteq	r0, r7, lsl r0
    882c:	0053023b 	subseq	r0, r3, fp, lsr r2
    8830:	4ed50000 	cdpmi	0, 13, cr0, cr5, cr0, {0}
    8834:	1f000000 	svcne	0x00000000
    8838:	000002ee 	andeq	r0, r0, lr, ror #5
    883c:	53024e01 	movwpl	r4, #11777	; 0x2e01
    8840:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    8844:	0808005b 	stmdaeq	r8, {r0, r1, r3, r4, r6}
    8848:	01000000 	mrseq	r0, (UNDEF: 0)
    884c:	00070b9c 	muleq	r7, ip, fp
    8850:	2df51d00 	ldclcs	13, cr1, [r5]
    8854:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    8858:	00037202 	andeq	r7, r3, r2, lsl #4
    885c:	004ef600 	subeq	pc, lr, r0, lsl #12
    8860:	e51b0000 	ldr	r0, [fp, #-0]
    8864:	0100002d 	tsteq	r0, sp, lsr #32
    8868:	5bd00260 	blpl	ff4091f0 <SCS_BASE+0x1f3fb1f0>
    886c:	000c0800 	andeq	r0, ip, r0, lsl #16
    8870:	9c010000 	stcls	0, cr0, [r1], {-0}
    8874:	00000730 	andeq	r0, r0, r0, lsr r7
    8878:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    887c:	02600100 	rsbeq	r0, r0, #0, 2
    8880:	00000372 	andeq	r0, r0, r2, ror r3
    8884:	1b005001 	blne	1c890 <__Stack_Size+0x1c490>
    8888:	00002dd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    888c:	dc027301 	stcle	3, cr7, [r2], {1}
    8890:	1208005b 	andne	r0, r8, #91	; 0x5b
    8894:	01000000 	mrseq	r0, (UNDEF: 0)
    8898:	0007659c 	muleq	r7, ip, r5
    889c:	2df51c00 	ldclcs	12, cr1, [r5]
    88a0:	73010000 	movwvc	r0, #4096	; 0x1000
    88a4:	00037202 	andeq	r7, r3, r2, lsl #4
    88a8:	1d500100 	ldfnee	f0, [r0, #-0]
    88ac:	00002d30 	andeq	r2, r0, r0, lsr sp
    88b0:	65027301 	strvs	r7, [r2, #-769]	; 0x301
    88b4:	17000000 	strne	r0, [r0, -r0]
    88b8:	0000004f 	andeq	r0, r0, pc, asr #32
    88bc:	002c841b 	eoreq	r8, ip, fp, lsl r4
    88c0:	02890100 	addeq	r0, r9, #0, 2
    88c4:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    88c8:	00000012 	andeq	r0, r0, r2, lsl r0
    88cc:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    88d0:	f51c0000 			; <UNDEFINED> instruction: 0xf51c0000
    88d4:	0100002d 	tsteq	r0, sp, lsr #32
    88d8:	03720289 	cmneq	r2, #-1879048184	; 0x90000008
    88dc:	50010000 	andpl	r0, r1, r0
    88e0:	002ee11d 	eoreq	lr, lr, sp, lsl r1
    88e4:	02890100 	addeq	r0, r9, #0, 2
    88e8:	00000065 	andeq	r0, r0, r5, rrx
    88ec:	00004f38 	andeq	r4, r0, r8, lsr pc
    88f0:	2eab1b00 	vfmacs.f64	d1, d11, d0
    88f4:	9f010000 	svcls	0x00010000
    88f8:	005c0002 	subseq	r0, ip, r2
    88fc:	00001808 	andeq	r1, r0, r8, lsl #16
    8900:	cd9c0100 	ldfgts	f0, [ip]
    8904:	1c000007 	stcne	0, cr0, [r0], {7}
    8908:	00002df5 	strdeq	r2, [r0], -r5
    890c:	72029f01 	andvc	r9, r2, #1, 30
    8910:	01000003 	tsteq	r0, r3
    8914:	15911c50 	ldrne	r1, [r1, #3152]	; 0xc50
    8918:	9f010000 	svcls	0x00010000
    891c:	0000d602 	andeq	sp, r0, r2, lsl #12
    8920:	00510100 	subseq	r0, r1, r0, lsl #2
    8924:	002e941b 	eoreq	r9, lr, fp, lsl r4
    8928:	02bc0100 	adcseq	r0, ip, #0, 2
    892c:	08005c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, lr}
    8930:	00000018 	andeq	r0, r0, r8, lsl r0
    8934:	08009c01 	stmdaeq	r0, {r0, sl, fp, ip, pc}
    8938:	f51c0000 			; <UNDEFINED> instruction: 0xf51c0000
    893c:	0100002d 	tsteq	r0, sp, lsr #32
    8940:	037202bc 	cmneq	r2, #188, 4	; 0xc000000b
    8944:	50010000 	andpl	r0, r1, r0
    8948:	0015911c 	andseq	r9, r5, ip, lsl r1
    894c:	02bc0100 	adcseq	r0, ip, #0, 2
    8950:	000000d6 	ldrdeq	r0, [r0], -r6
    8954:	1b005101 	blne	1cd60 <__Stack_Size+0x1c960>
    8958:	00002cc9 	andeq	r2, r0, r9, asr #25
    895c:	3002d901 	andcc	sp, r2, r1, lsl #18
    8960:	1808005c 	stmdane	r8, {r2, r3, r4, r6}
    8964:	01000000 	mrseq	r0, (UNDEF: 0)
    8968:	0008339c 	muleq	r8, ip, r3
    896c:	2df51c00 	ldclcs	12, cr1, [r5]
    8970:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    8974:	00037202 	andeq	r7, r3, r2, lsl #4
    8978:	1c500100 	ldfnee	f0, [r0], {-0}
    897c:	00001591 	muleq	r0, r1, r5
    8980:	d602d901 	strle	sp, [r2], -r1, lsl #18
    8984:	01000000 	mrseq	r0, (UNDEF: 0)
    8988:	321b0051 	andscc	r0, fp, #81	; 0x51
    898c:	0100002e 	tsteq	r0, lr, lsr #32
    8990:	5c4802f8 	sfmpl	f0, 2, [r8], {248}	; 0xf8
    8994:	00160800 	andseq	r0, r6, r0, lsl #16
    8998:	9c010000 	stcls	0, cr0, [r1], {-0}
    899c:	00000868 	andeq	r0, r0, r8, ror #16
    89a0:	002df51c 	eoreq	pc, sp, ip, lsl r5	; <UNPREDICTABLE>
    89a4:	02f80100 	rscseq	r0, r8, #0, 2
    89a8:	00000372 	andeq	r0, r0, r2, ror r3
    89ac:	001d5001 	andseq	r5, sp, r1
    89b0:	0100002d 	tsteq	r0, sp, lsr #32
    89b4:	005302f8 	ldrsheq	r0, [r3], #-40	; 0xffffffd8
    89b8:	4f590000 	svcmi	0x00590000
    89bc:	1b000000 	blne	89c4 <__Stack_Size+0x85c4>
    89c0:	00002e67 	andeq	r2, r0, r7, ror #28
    89c4:	5e030d01 	cdppl	13, 0, cr0, cr3, cr1, {0}
    89c8:	1808005c 	stmdane	r8, {r2, r3, r4, r6}
    89cc:	01000000 	mrseq	r0, (UNDEF: 0)
    89d0:	00089b9c 	muleq	r8, ip, fp
    89d4:	2df51c00 	ldclcs	12, cr1, [r5]
    89d8:	0d010000 	stceq	0, cr0, [r1, #-0]
    89dc:	00037203 	andeq	r7, r3, r3, lsl #4
    89e0:	1c500100 	ldfnee	f0, [r0], {-0}
    89e4:	00001591 	muleq	r0, r1, r5
    89e8:	d6030d01 	strle	r0, [r3], -r1, lsl #26
    89ec:	01000000 	mrseq	r0, (UNDEF: 0)
    89f0:	6c1f0051 	ldcvs	0, cr0, [pc], {81}	; 0x51
    89f4:	01000007 	tsteq	r0, r7
    89f8:	00ab0335 	adceq	r0, fp, r5, lsr r3
    89fc:	5c760000 	ldclpl	0, cr0, [r6], #-0
    8a00:	000c0800 	andeq	r0, ip, r0, lsl #16
    8a04:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a08:	000008e4 	andeq	r0, r0, r4, ror #17
    8a0c:	002df51d 	eoreq	pc, sp, sp, lsl r5	; <UNPREDICTABLE>
    8a10:	03350100 	teqeq	r5, #0, 2
    8a14:	00000372 	andeq	r0, r0, r2, ror r3
    8a18:	00004f7a 	andeq	r4, r0, sl, ror pc
    8a1c:	002d611c 	eoreq	r6, sp, ip, lsl r1
    8a20:	03350100 	teqeq	r5, #0, 2
    8a24:	00000053 	andeq	r0, r0, r3, asr r0
    8a28:	201a5101 	andscs	r5, sl, r1, lsl #2
    8a2c:	01000016 	tsteq	r0, r6, lsl r0
    8a30:	00ab0337 	adceq	r0, fp, r7, lsr r3
    8a34:	4f9b0000 	svcmi	0x009b0000
    8a38:	1b000000 	blne	8a40 <__Stack_Size+0x8640>
    8a3c:	00002e22 	andeq	r2, r0, r2, lsr #28
    8a40:	82036901 	andhi	r6, r3, #16384	; 0x4000
    8a44:	0808005c 	stmdaeq	r8, {r2, r3, r4, r6}
    8a48:	01000000 	mrseq	r0, (UNDEF: 0)
    8a4c:	0009199c 	muleq	r9, ip, r9
    8a50:	2df51c00 	ldclcs	12, cr1, [r5]
    8a54:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    8a58:	00037203 	andeq	r7, r3, r3, lsl #4
    8a5c:	1d500100 	ldfnee	f0, [r0, #-0]
    8a60:	00002d61 	andeq	r2, r0, r1, ror #26
    8a64:	53036901 	movwpl	r6, #14593	; 0x3901
    8a68:	c3000000 	movwgt	r0, #0
    8a6c:	0000004f 	andeq	r0, r0, pc, asr #32
    8a70:	0000ef1f 	andeq	lr, r0, pc, lsl pc
    8a74:	038a0100 	orreq	r0, sl, #0, 2
    8a78:	000000b6 	strheq	r0, [r0], -r6
    8a7c:	08005c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, lr}
    8a80:	0000003e 	andeq	r0, r0, lr, lsr r0
    8a84:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    8a88:	f51d0000 			; <UNDEFINED> instruction: 0xf51d0000
    8a8c:	0100002d 	tsteq	r0, sp, lsr #32
    8a90:	0372038a 	cmneq	r2, #671088642	; 0x28000002
    8a94:	4fe40000 	svcmi	0x00e40000
    8a98:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    8a9c:	0100002c 	tsteq	r0, ip, lsr #32
    8aa0:	0053038a 	subseq	r0, r3, sl, lsl #7
    8aa4:	501e0000 	andspl	r0, lr, r0
    8aa8:	1b1a0000 	blne	688ab0 <__Stack_Size+0x6886b0>
    8aac:	0100002e 	tsteq	r0, lr, lsr #32
    8ab0:	0041038c 	subeq	r0, r1, ip, lsl #7
    8ab4:	504a0000 	subpl	r0, sl, r0
    8ab8:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
    8abc:	0100002e 	tsteq	r0, lr, lsr #32
    8ac0:	0041038c 	subeq	r0, r1, ip, lsl #7
    8ac4:	50c80000 	sbcpl	r0, r8, r0
    8ac8:	351a0000 	ldrcc	r0, [sl, #-0]
    8acc:	0100002f 	tsteq	r0, pc, lsr #32
    8ad0:	0041038c 	subeq	r0, r1, ip, lsl #7
    8ad4:	51100000 	tstpl	r0, r0
    8ad8:	201a0000 	andscs	r0, sl, r0
    8adc:	01000016 	tsteq	r0, r6, lsl r0
    8ae0:	00b6038d 	adcseq	r0, r6, sp, lsl #7
    8ae4:	51340000 	teqpl	r4, r0
    8ae8:	1b000000 	blne	8af0 <__Stack_Size+0x86f0>
    8aec:	00002d18 	andeq	r2, r0, r8, lsl sp
    8af0:	c803da01 	stmdagt	r3, {r0, r9, fp, ip, lr, pc}
    8af4:	0e08005c 	mcreq	0, 0, r0, cr8, cr12, {2}
    8af8:	01000000 	mrseq	r0, (UNDEF: 0)
    8afc:	0009e59c 	muleq	r9, ip, r5
    8b00:	2df51c00 	ldclcs	12, cr1, [r5]
    8b04:	da010000 	ble	48b0c <__Stack_Size+0x4870c>
    8b08:	00037203 	andeq	r7, r3, r3, lsl #4
    8b0c:	1d500100 	ldfnee	f0, [r0, #-0]
    8b10:	00002cf7 	strdeq	r2, [r0], -r7
    8b14:	5303da01 	movwpl	sp, #14849	; 0x3a01
    8b18:	53000000 	movwpl	r0, #0
    8b1c:	1a000051 	bne	8c68 <__Stack_Size+0x8868>
    8b20:	00002e1b 	andeq	r2, r0, fp, lsl lr
    8b24:	5303dc01 	movwpl	sp, #15361	; 0x3c01
    8b28:	74000000 	strvc	r0, [r0], #-0
    8b2c:	20000051 	andcs	r0, r0, r1, asr r0
    8b30:	00002efc 	strdeq	r2, [r0], -ip
    8b34:	5303dc01 	movwpl	sp, #15361	; 0x3c01
    8b38:	00000000 	andeq	r0, r0, r0
    8b3c:	00195121 	andseq	r5, r9, r1, lsr #2
    8b40:	01140500 	tsteq	r4, r0, lsl #10
    8b44:	000009fc 	strdeq	r0, [r0], -ip
    8b48:	00004122 	andeq	r4, r0, r2, lsr #2
    8b4c:	00d62200 	sbcseq	r2, r6, r0, lsl #4
    8b50:	21000000 	mrscs	r0, (UNDEF: 0)
    8b54:	00001f8b 	andeq	r1, r0, fp, lsl #31
    8b58:	13011505 	movwne	r1, #5381	; 0x1505
    8b5c:	2200000a 	andcs	r0, r0, #10
    8b60:	00000041 	andeq	r0, r0, r1, asr #32
    8b64:	0000d622 	andeq	sp, r0, r2, lsr #12
    8b68:	2f210000 	svccs	0x00210000
    8b6c:	05000022 	streq	r0, [r0, #-34]	; 0x22
    8b70:	0a250110 	beq	948fb8 <__Stack_Size+0x948bb8>
    8b74:	25220000 	strcs	r0, [r2, #-0]!
    8b78:	0000000a 	andeq	r0, r0, sl
    8b7c:	02970415 	addseq	r0, r7, #352321536	; 0x15000000
    8b80:	61000000 	mrsvs	r0, (UNDEF: 0)
    8b84:	02000000 	andeq	r0, r0, #0
    8b88:	0017dc00 	andseq	sp, r7, r0, lsl #24
    8b8c:	73010400 	movwvc	r0, #5120	; 0x1400
    8b90:	d8000016 	stmdale	r0, {r1, r2, r4}
    8b94:	4608005c 			; <UNDEFINED> instruction: 0x4608005c
    8b98:	7308005d 	movwvc	r0, #32861	; 0x805d
    8b9c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    8ba0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    8ba4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    8ba8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    8bac:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    8bb0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    8bb4:	616d5f33 	cmnvs	sp, r3, lsr pc
    8bb8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    8bbc:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    8bc0:	2f656d6f 	svccs	0x00656d6f
    8bc4:	6d656c63 	stclvs	12, cr6, [r5, #-396]!	; 0xfffffe74
    8bc8:	2f746e65 	svccs	0x00746e65
    8bcc:	30314f4d 	eorscc	r4, r1, sp, asr #30
    8bd0:	6f522f33 	svcvs	0x00522f33
    8bd4:	00746f62 	rsbseq	r6, r4, r2, ror #30
    8bd8:	20554e47 	subscs	r4, r5, r7, asr #28
    8bdc:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    8be0:	2e34322e 	cdpcs	2, 3, cr3, cr4, cr14, {1}
    8be4:	80010030 	andhi	r0, r1, r0, lsr r0
    8be8:	0000010f 	andeq	r0, r0, pc, lsl #2
    8bec:	17f00004 	ldrbne	r0, [r0, r4]!
    8bf0:	01040000 	mrseq	r0, (UNDEF: 4)
    8bf4:	000007e1 	andeq	r0, r0, r1, ror #15
    8bf8:	002f7801 	eoreq	r7, pc, r1, lsl #16
    8bfc:	00010100 	andeq	r0, r1, r0, lsl #2
    8c00:	005d4800 	subseq	r4, sp, r0, lsl #16
    8c04:	00005008 	andeq	r5, r0, r8
    8c08:	00171700 	andseq	r1, r7, r0, lsl #14
    8c0c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    8c10:	0000093c 	andeq	r0, r0, ip, lsr r9
    8c14:	00050202 	andeq	r0, r5, r2, lsl #4
    8c18:	02000009 	andeq	r0, r0, #9
    8c1c:	0a9d0601 	beq	fe74a428 <SCS_BASE+0x1e73c428>
    8c20:	04020000 	streq	r0, [r2], #-0
    8c24:	000a6207 	andeq	r6, sl, r7, lsl #4
    8c28:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8c2c:	00000c54 	andeq	r0, r0, r4, asr ip
    8c30:	9b080102 	blls	209040 <__Stack_Size+0x208c40>
    8c34:	0200000a 	andeq	r0, r0, #10
    8c38:	0a590704 	beq	164a850 <__Stack_Size+0x164a450>
    8c3c:	4d030000 	stcmi	0, cr0, [r3, #-0]
    8c40:	0100002f 	tsteq	r0, pc, lsr #32
    8c44:	005d4891 			; <UNDEFINED> instruction: 0x005d4891
    8c48:	00005008 	andeq	r5, r0, r8
    8c4c:	8f9c0100 	svchi	0x009c0100
    8c50:	04000000 	streq	r0, [r0], #-0
    8c54:	00002faa 	andeq	r2, r0, sl, lsr #31
    8c58:	008f9301 	addeq	r9, pc, r1, lsl #6
    8c5c:	5b050000 	blpl	148c64 <__Stack_Size+0x148864>
    8c60:	0100002f 	tsteq	r0, pc, lsr #32
    8c64:	00008f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    8c68:	00519b00 	subseq	r9, r1, r0, lsl #22
    8c6c:	5d7a0600 	ldclpl	6, cr0, [sl, #-0]
    8c70:	01000800 	tsteq	r0, r0, lsl #16
    8c74:	07000000 	streq	r0, [r0, -r0]
    8c78:	00003a04 	andeq	r3, r0, r4, lsl #20
    8c7c:	2f630800 	svccs	0x00630800
    8c80:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    8c84:	0000003a 	andeq	r0, r0, sl, lsr r0
    8c88:	002f4608 	eoreq	r4, pc, r8, lsl #12
    8c8c:	3a1b0100 	bcc	6c9094 <__Stack_Size+0x6c8c94>
    8c90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8c94:	00002f71 	andeq	r2, r0, r1, ror pc
    8c98:	003a1d01 	eorseq	r1, sl, r1, lsl #26
    8c9c:	b1080000 	mrslt	r0, (UNDEF: 8)
    8ca0:	0100002f 	tsteq	r0, pc, lsr #32
    8ca4:	00003a20 	andeq	r3, r0, r0, lsr #20
    8ca8:	2f6b0800 	svccs	0x006b0800
    8cac:	22010000 	andcs	r0, r1, #0
    8cb0:	0000003a 	andeq	r0, r0, sl, lsr r0
    8cb4:	002f3e09 	eoreq	r3, pc, r9, lsl #28
    8cb8:	0a250100 	beq	9490c0 <__Stack_Size+0x948cc0>
    8cbc:	000000e3 	andeq	r0, r0, r3, ror #1
    8cc0:	000000e3 	andeq	r0, r0, r3, ror #1
    8cc4:	00004f0b 	andeq	r4, r0, fp, lsl #30
    8cc8:	07004c00 	streq	r4, [r0, -r0, lsl #24]
    8ccc:	0000e904 	andeq	lr, r0, r4, lsl #18
    8cd0:	9d0d0c00 	stcls	12, cr0, [sp, #-0]
    8cd4:	0100002f 	tsteq	r0, pc, lsr #32
    8cd8:	0000fb39 	andeq	pc, r0, r9, lsr fp	; <UNPREDICTABLE>
    8cdc:	00030500 	andeq	r0, r3, r0, lsl #10
    8ce0:	0e080030 	mcreq	0, 0, r0, cr8, cr0, {1}
    8ce4:	000000d3 	ldrdeq	r0, [r0], -r3
    8ce8:	000c800f 	andeq	r8, ip, pc
    8cec:	0b2c0100 	bleq	b090f4 <__Stack_Size+0xb08cf4>
    8cf0:	10000001 	andne	r0, r0, r1
    8cf4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8cf8:	Address 0x00008cf8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	08030016 	stmdaeq	r3, {r1, r2, r4}
      18:	0b3b0b3a 	bleq	ec2d08 <__Stack_Size+0xec2908>
      1c:	00001349 	andeq	r1, r0, r9, asr #6
      20:	0b002403 	bleq	9034 <__Stack_Size+0x8c34>
      24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      28:	0400000e 	streq	r0, [r0], #-14
      2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      30:	0b3b0b3a 	bleq	ec2d20 <__Stack_Size+0xec2920>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      40:	0b0b0104 	bleq	2c0458 <__Stack_Size+0x2c0058>
      44:	0b3b0b3a 	bleq	ec2d34 <__Stack_Size+0xec2934>
      48:	00001301 	andeq	r1, r0, r1, lsl #6
      4c:	03002807 	movweq	r2, #2055	; 0x807
      50:	000d1c0e 	andeq	r1, sp, lr, lsl #24
      54:	00280800 	eoreq	r0, r8, r0, lsl #16
      58:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      5c:	13090000 	movwne	r0, #36864	; 0x9000
      60:	3a0b0b01 	bcc	2c2c6c <__Stack_Size+0x2c286c>
      64:	01053b0b 	tsteq	r5, fp, lsl #22
      68:	0a000013 	beq	bc <_Minimum_Stack_Size-0x44>
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      74:	0b381349 	bleq	e04da0 <__Stack_Size+0xe049a0>
      78:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      7c:	3a0e0300 	bcc	380c84 <__Stack_Size+0x380884>
      80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      84:	000b3813 	andeq	r3, fp, r3, lsl r8
      88:	00160c00 	andseq	r0, r6, r0, lsl #24
      8c:	0b3a0e03 	bleq	e838a0 <__Stack_Size+0xe834a0>
      90:	1349053b 	movtne	r0, #38203	; 0x953b
      94:	130d0000 	movwne	r0, #53248	; 0xd000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c28a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2998>
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe049d8>
      b0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
      b4:	03193f01 	tsteq	r9, #1, 30
      b8:	3b0b3a0e 	blcc	2ce8f8 <__Stack_Size+0x2ce4f8>
      bc:	11192705 	tstne	r9, r5, lsl #14
      c0:	40061201 	andmi	r1, r6, r1, lsl #4
      c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      c8:	00001301 	andeq	r1, r0, r1, lsl #6
      cc:	03003410 	movweq	r3, #1040	; 0x410
      d0:	3b0b3a0e 	blcc	2ce910 <__Stack_Size+0x2ce510>
      d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
      d8:	11000017 	tstne	r0, r7, lsl r0
      dc:	00018289 	andeq	r8, r1, r9, lsl #5
      e0:	13310111 	teqne	r1, #1073741828	; 0x40000004
      e4:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
      e8:	11010182 	smlabbne	r1, r2, r1, r0
      ec:	01133101 	tsteq	r3, r1, lsl #2
      f0:	13000013 	movwne	r0, #19
      f4:	0001828a 	andeq	r8, r1, sl, lsl #5
      f8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
      fc:	14000018 	strne	r0, [r0], #-24
     100:	01018289 	smlabbeq	r1, r9, r2, r8
     104:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     108:	01133119 	tsteq	r3, r9, lsl r1
     10c:	15000013 	strne	r0, [r0, #-19]
     110:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     118:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     11c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     120:	11010182 	smlabbne	r1, r2, r1, r0
     124:	00133101 	andseq	r3, r3, r1, lsl #2
     128:	82891700 	addhi	r1, r9, #0, 14
     12c:	01110101 	tsteq	r1, r1, lsl #2
     130:	31194295 			; <UNDEFINED> instruction: 0x31194295
     134:	18000013 	stmdane	r0, {r0, r1, r4}
     138:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     13c:	0b3a0e03 	bleq	e83950 <__Stack_Size+0xe83550>
     140:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     144:	06120111 			; <UNDEFINED> instruction: 0x06120111
     148:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     14c:	19000019 	stmdbne	r0, {r0, r3, r4}
     150:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     154:	0b3a0e03 	bleq	e83968 <__Stack_Size+0xe83568>
     158:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     15c:	01111349 	tsteq	r1, r9, asr #6
     160:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     164:	00194297 	mulseq	r9, r7, r2
     168:	00051a00 	andeq	r1, r5, r0, lsl #20
     16c:	0b3a0e03 	bleq	e83980 <__Stack_Size+0xe83580>
     170:	1349053b 	movtne	r0, #38203	; 0x953b
     174:	00001702 	andeq	r1, r0, r2, lsl #14
     178:	3f012e1b 	svccc	0x00012e1b
     17c:	3a0e0319 	bcc	380de8 <__Stack_Size+0x3809e8>
     180:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     184:	11134919 	tstne	r3, r9, lsl r9
     188:	40061201 	andmi	r1, r6, r1, lsl #4
     18c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     190:	00001301 	andeq	r1, r0, r1, lsl #6
     194:	0b000f1c 	bleq	3e0c <__Stack_Size+0x3a0c>
     198:	0013490b 	andseq	r4, r3, fp, lsl #18
     19c:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     1a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1a4:	0b3b0b3a 	bleq	ec2e94 <__Stack_Size+0xec2a94>
     1a8:	01111927 	tsteq	r1, r7, lsr #18
     1ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     1b4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     1b8:	08030005 	stmdaeq	r3, {r0, r2}
     1bc:	0b3b0b3a 	bleq	ec2eac <__Stack_Size+0xec2aac>
     1c0:	17021349 	strne	r1, [r2, -r9, asr #6]
     1c4:	341f0000 	ldrcc	r0, [pc], #-0	; 1cc <_Minimum_Stack_Size+0xcc>
     1c8:	3a0e0300 	bcc	380dd0 <__Stack_Size+0x3809d0>
     1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1d0:	20000013 	andcs	r0, r0, r3, lsl r0
     1d4:	0b0b0024 	bleq	2c026c <__Stack_Size+0x2bfe6c>
     1d8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1dc:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
     1e0:	11000182 	smlabbne	r0, r2, r1, r0
     1e4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     1e8:	00001331 	andeq	r1, r0, r1, lsr r3
     1ec:	03000522 	movweq	r0, #1314	; 0x522
     1f0:	3b0b3a0e 	blcc	2cea30 <__Stack_Size+0x2ce630>
     1f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1f8:	23000017 	movwcs	r0, #23
     1fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     200:	0b3b0b3a 	bleq	ec2ef0 <__Stack_Size+0xec2af0>
     204:	17021349 	strne	r1, [r2, -r9, asr #6]
     208:	34240000 	strtcc	r0, [r4], #-0
     20c:	3a080300 	bcc	200e14 <__Stack_Size+0x200a14>
     210:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     214:	00170213 	andseq	r0, r7, r3, lsl r2
     218:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
     21c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	06120111 			; <UNDEFINED> instruction: 0x06120111
     228:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     22c:	00130119 	andseq	r0, r3, r9, lsl r1
     230:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     234:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     238:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     23c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     240:	00001301 	andeq	r1, r0, r1, lsl #6
     244:	00001827 	andeq	r1, r0, r7, lsr #16
     248:	00342800 	eorseq	r2, r4, r0, lsl #16
     24c:	0b3a0e03 	bleq	e83a60 <__Stack_Size+0xe83660>
     250:	1349053b 	movtne	r0, #38203	; 0x953b
     254:	00000b1c 	andeq	r0, r0, ip, lsl fp
     258:	11010b29 	tstne	r1, r9, lsr #22
     25c:	01061201 	tsteq	r6, r1, lsl #4
     260:	2a000013 	bcs	2b4 <_Minimum_Stack_Size+0x1b4>
     264:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     268:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     26c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     270:	012b0000 			; <UNDEFINED> instruction: 0x012b0000
     274:	01134901 	tsteq	r3, r1, lsl #18
     278:	2c000013 	stccs	0, cr0, [r0], {19}
     27c:	13490021 	movtne	r0, #36897	; 0x9021
     280:	00000b2f 	andeq	r0, r0, pc, lsr #22
     284:	0300342d 	movweq	r3, #1069	; 0x42d
     288:	3b0b3a0e 	blcc	2ceac8 <__Stack_Size+0x2ce6c8>
     28c:	3f13490b 	svccc	0x0013490b
     290:	00180219 	andseq	r0, r8, r9, lsl r2
     294:	00342e00 	eorseq	r2, r4, r0, lsl #28
     298:	0b3a0803 	bleq	e822ac <__Stack_Size+0xe81eac>
     29c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2a0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2a4:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
     2a8:	03193f00 	tsteq	r9, #0, 30
     2ac:	3b0b3a0e 	blcc	2ceaec <__Stack_Size+0x2ce6ec>
     2b0:	3c19270b 	ldccc	7, cr2, [r9], {11}
     2b4:	30000019 	andcc	r0, r0, r9, lsl r0
     2b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     2bc:	0b3a0e03 	bleq	e83ad0 <__Stack_Size+0xe836d0>
     2c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2c4:	1301193c 	movwne	r1, #6460	; 0x193c
     2c8:	05310000 	ldreq	r0, [r1, #-0]!
     2cc:	00134900 	andseq	r4, r3, r0, lsl #18
     2d0:	002e3200 	eoreq	r3, lr, r0, lsl #4
     2d4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2d8:	0b3b0b3a 	bleq	ec2fc8 <__Stack_Size+0xec2bc8>
     2dc:	13491927 	movtne	r1, #39207	; 0x9927
     2e0:	0000193c 	andeq	r1, r0, ip, lsr r9
     2e4:	3f012e33 	svccc	0x00012e33
     2e8:	3a0e0319 	bcc	380f54 <__Stack_Size+0x380b54>
     2ec:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f0:	01193c19 	tsteq	r9, r9, lsl ip
     2f4:	34000013 	strcc	r0, [r0], #-19
     2f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     2fc:	0b3a0e03 	bleq	e83b10 <__Stack_Size+0xe83710>
     300:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     304:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     308:	00001301 	andeq	r1, r0, r1, lsl #6
     30c:	3f002e35 	svccc	0x00002e35
     310:	3a0e0319 	bcc	380f7c <__Stack_Size+0x380b7c>
     314:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     318:	3c134919 	ldccc	9, cr4, [r3], {25}
     31c:	36000019 			; <UNDEFINED> instruction: 0x36000019
     320:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     324:	0b3a0e03 	bleq	e83b38 <__Stack_Size+0xe83738>
     328:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     32c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     330:	00001301 	andeq	r1, r0, r1, lsl #6
     334:	3f012e37 	svccc	0x00012e37
     338:	3a0e0319 	bcc	380fa4 <__Stack_Size+0x380ba4>
     33c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     340:	3c134919 	ldccc	9, cr4, [r3], {25}
     344:	00000019 	andeq	r0, r0, r9, lsl r0
     348:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     34c:	030b130e 	movweq	r1, #45838	; 0xb30e
     350:	110e1b0e 	tstne	lr, lr, lsl #22
     354:	10061201 	andne	r1, r6, r1, lsl #4
     358:	02000017 	andeq	r0, r0, #23
     35c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     360:	0b3a0e03 	bleq	e83b74 <__Stack_Size+0xe83774>
     364:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     368:	06120111 			; <UNDEFINED> instruction: 0x06120111
     36c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     370:	03000019 	movweq	r0, #25
     374:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     378:	0b3a0e03 	bleq	e83b8c <__Stack_Size+0xe8378c>
     37c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     380:	06120111 			; <UNDEFINED> instruction: 0x06120111
     384:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     388:	00130119 	andseq	r0, r3, r9, lsl r1
     38c:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
     390:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     394:	0b3b0b3a 	bleq	ec3084 <__Stack_Size+0xec2c84>
     398:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     39c:	00001301 	andeq	r1, r0, r1, lsl #6
     3a0:	00001805 	andeq	r1, r0, r5, lsl #16
     3a4:	82890600 	addhi	r0, r9, #0, 12
     3a8:	01110001 	tsteq	r1, r1
     3ac:	31194295 			; <UNDEFINED> instruction: 0x31194295
     3b0:	07000013 	smladeq	r0, r3, r0, r0
     3b4:	0b0b0024 	bleq	2c044c <__Stack_Size+0x2c004c>
     3b8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3bc:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     3c0:	03193f00 	tsteq	r9, #0, 30
     3c4:	3b0b3a0e 	blcc	2cec04 <__Stack_Size+0x2ce804>
     3c8:	11192705 	tstne	r9, r5, lsl #14
     3cc:	40061201 	andmi	r1, r6, r1, lsl #4
     3d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3d4:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
     3d8:	03193f01 	tsteq	r9, #1, 30
     3dc:	3b0b3a0e 	blcc	2cec1c <__Stack_Size+0x2ce81c>
     3e0:	11192705 	tstne	r9, r5, lsl #14
     3e4:	40061201 	andmi	r1, r6, r1, lsl #4
     3e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     3ec:	00001301 	andeq	r1, r0, r1, lsl #6
     3f0:	3f012e0a 	svccc	0x00012e0a
     3f4:	3a0e0319 	bcc	381060 <__Stack_Size+0x380c60>
     3f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3fc:	01193c13 	tsteq	r9, r3, lsl ip
     400:	0b000013 	bleq	454 <__Stack_Size+0x54>
     404:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     408:	0b3a0e03 	bleq	e83c1c <__Stack_Size+0xe8381c>
     40c:	1349053b 	movtne	r0, #38203	; 0x953b
     410:	0000193c 	andeq	r1, r0, ip, lsr r9
     414:	01110100 	tsteq	r1, r0, lsl #2
     418:	0b130e25 	bleq	4c3cb4 <__Stack_Size+0x4c38b4>
     41c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     420:	06120111 			; <UNDEFINED> instruction: 0x06120111
     424:	00001710 	andeq	r1, r0, r0, lsl r7
     428:	3f012e02 	svccc	0x00012e02
     42c:	3a0e0319 	bcc	381098 <__Stack_Size+0x380c98>
     430:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     434:	11134919 	tstne	r3, r9, lsl r9
     438:	40061201 	andmi	r1, r6, r1, lsl #4
     43c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     440:	00001301 	andeq	r1, r0, r1, lsl #6
     444:	03000503 	movweq	r0, #1283	; 0x503
     448:	3b0b3a0e 	blcc	2cec88 <__Stack_Size+0x2ce888>
     44c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     450:	04000017 	streq	r0, [r0], #-23
     454:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     458:	0b3a0e03 	bleq	e83c6c <__Stack_Size+0xe8386c>
     45c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     460:	1301193c 	movwne	r1, #6460	; 0x193c
     464:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     468:	06000000 	streq	r0, [r0], -r0
     46c:	01018289 	smlabbeq	r1, r9, r2, r8
     470:	13310111 	teqne	r1, #1073741828	; 0x40000004
     474:	8a070000 	bhi	1c047c <__Stack_Size+0x1c007c>
     478:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     47c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     480:	24080000 	strcs	r0, [r8], #-0
     484:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     488:	0008030b 	andeq	r0, r8, fp, lsl #6
     48c:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
     490:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     494:	0b3b0b3a 	bleq	ec3184 <__Stack_Size+0xec2d84>
     498:	01111927 	tsteq	r1, r7, lsr #18
     49c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4a0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     4a4:	0a000013 	beq	4f8 <__Stack_Size+0xf8>
     4a8:	00018289 	andeq	r8, r1, r9, lsl #5
     4ac:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     4b0:	00133119 	andseq	r3, r3, r9, lsl r1
     4b4:	00340b00 	eorseq	r0, r4, r0, lsl #22
     4b8:	0b3a0803 	bleq	e824cc <__Stack_Size+0xe820cc>
     4bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4c0:	00001702 	andeq	r1, r0, r2, lsl #14
     4c4:	0182890c 	orreq	r8, r2, ip, lsl #18
     4c8:	31011100 	mrscc	r1, (UNDEF: 17)
     4cc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     4d0:	0b0b000f 	bleq	2c0514 <__Stack_Size+0x2c0114>
     4d4:	00001349 	andeq	r1, r0, r9, asr #6
     4d8:	0b00240e 	bleq	9518 <__Stack_Size+0x9118>
     4dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4e0:	0f00000e 	svceq	0x0000000e
     4e4:	0111010b 	tsteq	r1, fp, lsl #2
     4e8:	00000612 	andeq	r0, r0, r2, lsl r6
     4ec:	01828910 	orreq	r8, r2, r0, lsl r9
     4f0:	95011101 	strls	r1, [r1, #-257]	; 0x101
     4f4:	13311942 	teqne	r1, #1081344	; 0x108000
     4f8:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     4fc:	03193f01 	tsteq	r9, #1, 30
     500:	3b0b3a0e 	blcc	2ced40 <__Stack_Size+0x2ce940>
     504:	3c13490b 	ldccc	9, cr4, [r3], {11}
     508:	00000019 	andeq	r0, r0, r9, lsl r0
     50c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     510:	030b130e 	movweq	r1, #45838	; 0xb30e
     514:	110e1b0e 	tstne	lr, lr, lsl #22
     518:	10061201 	andne	r1, r6, r1, lsl #4
     51c:	02000017 	andeq	r0, r0, #23
     520:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     524:	0b3a0e03 	bleq	e83d38 <__Stack_Size+0xe83938>
     528:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     52c:	13010b20 	movwne	r0, #6944	; 0x1b20
     530:	34030000 	strcc	r0, [r3], #-0
     534:	3a080300 	bcc	20113c <__Stack_Size+0x200d3c>
     538:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     53c:	04000013 	streq	r0, [r0], #-19
     540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     544:	0b3b0b3a 	bleq	ec3234 <__Stack_Size+0xec2e34>
     548:	00001349 	andeq	r1, r0, r9, asr #6
     54c:	0b002405 	bleq	9568 <__Stack_Size+0x9168>
     550:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     554:	0600000e 	streq	r0, [r0], -lr
     558:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     55c:	0b3a0e03 	bleq	e83d70 <__Stack_Size+0xe83970>
     560:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     564:	00000b20 	andeq	r0, r0, r0, lsr #22
     568:	3f012e07 	svccc	0x00012e07
     56c:	3a0e0319 	bcc	3811d8 <__Stack_Size+0x380dd8>
     570:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     574:	20134919 	andscs	r4, r3, r9, lsl r9
     578:	0013010b 	andseq	r0, r3, fp, lsl #2
     57c:	00050800 	andeq	r0, r5, r0, lsl #16
     580:	0b3a0e03 	bleq	e83d94 <__Stack_Size+0xe83994>
     584:	1349053b 	movtne	r0, #38203	; 0x953b
     588:	34090000 	strcc	r0, [r9], #-0
     58c:	3a0e0300 	bcc	381194 <__Stack_Size+0x380d94>
     590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	0a000013 	beq	5e8 <__Stack_Size+0x1e8>
     598:	0b0b0024 	bleq	2c0630 <__Stack_Size+0x2c0230>
     59c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     5a0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     5a4:	03193f01 	tsteq	r9, #1, 30
     5a8:	3b0b3a0e 	blcc	2cede8 <__Stack_Size+0x2ce9e8>
     5ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5b4:	97184006 	ldrls	r4, [r8, -r6]
     5b8:	13011942 	movwne	r1, #6466	; 0x1942
     5bc:	050c0000 	streq	r0, [ip, #-0]
     5c0:	3a0e0300 	bcc	3811c8 <__Stack_Size+0x380dc8>
     5c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5c8:	00170213 	andseq	r0, r7, r3, lsl r2
     5cc:	00340d00 	eorseq	r0, r4, r0, lsl #26
     5d0:	0b3a0e03 	bleq	e83de4 <__Stack_Size+0xe839e4>
     5d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5d8:	00001702 	andeq	r1, r0, r2, lsl #14
     5dc:	0182890e 	orreq	r8, r2, lr, lsl #18
     5e0:	31011101 	tstcc	r1, r1, lsl #2
     5e4:	0f000013 	svceq	0x00000013
     5e8:	0001828a 	andeq	r8, r1, sl, lsl #5
     5ec:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     5f0:	10000018 	andne	r0, r0, r8, lsl r0
     5f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5f8:	0b3a0e03 	bleq	e83e0c <__Stack_Size+0xe83a0c>
     5fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     600:	06120111 			; <UNDEFINED> instruction: 0x06120111
     604:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     608:	00130119 	andseq	r0, r3, r9, lsl r1
     60c:	82891100 	addhi	r1, r9, #0, 2
     610:	01110001 	tsteq	r1, r1
     614:	31194295 			; <UNDEFINED> instruction: 0x31194295
     618:	12000013 	andne	r0, r0, #19
     61c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     620:	06120111 			; <UNDEFINED> instruction: 0x06120111
     624:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     628:	00130119 	andseq	r0, r3, r9, lsl r1
     62c:	00341300 	eorseq	r1, r4, r0, lsl #6
     630:	17021331 	smladxne	r2, r1, r3, r1
     634:	34140000 	ldrcc	r0, [r4], #-0
     638:	00133100 	andseq	r3, r3, r0, lsl #2
     63c:	010b1500 	tsteq	fp, r0, lsl #10
     640:	06120111 			; <UNDEFINED> instruction: 0x06120111
     644:	00001301 	andeq	r1, r0, r1, lsl #6
     648:	01828916 	orreq	r8, r2, r6, lsl r9
     64c:	31011101 	tstcc	r1, r1, lsl #2
     650:	00130113 	andseq	r0, r3, r3, lsl r1
     654:	82891700 	addhi	r1, r9, #0, 14
     658:	01110001 	tsteq	r1, r1
     65c:	00001331 	andeq	r1, r0, r1, lsr r3
     660:	31003418 	tstcc	r0, r8, lsl r4
     664:	000b1c13 	andeq	r1, fp, r3, lsl ip
     668:	010b1900 	tsteq	fp, r0, lsl #18
     66c:	13011755 	movwne	r1, #5973	; 0x1755
     670:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     674:	03193f00 	tsteq	r9, #0, 30
     678:	3b0b3a0e 	blcc	2ceeb8 <__Stack_Size+0x2ceab8>
     67c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     680:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     684:	97184006 	ldrls	r4, [r8, -r6]
     688:	00001942 	andeq	r1, r0, r2, asr #18
     68c:	0300051b 	movweq	r0, #1307	; 0x51b
     690:	3b0b3a08 	blcc	2ceeb8 <__Stack_Size+0x2ceab8>
     694:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     698:	1c000018 	stcne	0, cr0, [r0], {24}
     69c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     6a0:	0b3b0b3a 	bleq	ec3390 <__Stack_Size+0xec2f90>
     6a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     6a8:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     6ac:	03193f00 	tsteq	r9, #0, 30
     6b0:	3b0b3a0e 	blcc	2ceef0 <__Stack_Size+0x2ceaf0>
     6b4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     6b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6bc:	97184006 	ldrls	r4, [r8, -r6]
     6c0:	00001942 	andeq	r1, r0, r2, asr #18
     6c4:	3f012e1e 	svccc	0x00012e1e
     6c8:	3a0e0319 	bcc	381334 <__Stack_Size+0x380f34>
     6cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     6d0:	11134919 	tstne	r3, r9, lsl r9
     6d4:	40061201 	andmi	r1, r6, r1, lsl #4
     6d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     6dc:	00001301 	andeq	r1, r0, r1, lsl #6
     6e0:	0300051f 	movweq	r0, #1311	; 0x51f
     6e4:	3b0b3a0e 	blcc	2cef24 <__Stack_Size+0x2ceb24>
     6e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     6ec:	20000017 	andcs	r0, r0, r7, lsl r0
     6f0:	13310005 	teqne	r1, #5
     6f4:	00001702 	andeq	r1, r0, r2, lsl #14
     6f8:	31000521 	tstcc	r0, r1, lsr #10
     6fc:	00180213 	andseq	r0, r8, r3, lsl r2
     700:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
     704:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     708:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     70c:	01111927 	tsteq	r1, r7, lsr #18
     710:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     714:	01194297 			; <UNDEFINED> instruction: 0x01194297
     718:	23000013 	movwcs	r0, #19
     71c:	08030005 	stmdaeq	r3, {r0, r2}
     720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     724:	17021349 	strne	r1, [r2, -r9, asr #6]
     728:	1d240000 	stcne	0, cr0, [r4, #-0]
     72c:	11133101 	tstne	r3, r1, lsl #2
     730:	58061201 	stmdapl	r6, {r0, r9, ip}
     734:	0105590b 	tsteq	r5, fp, lsl #18
     738:	25000013 	strcs	r0, [r0, #-19]
     73c:	0111010b 	tsteq	r1, fp, lsl #2
     740:	00000612 	andeq	r0, r0, r2, lsl r6
     744:	31000526 	tstcc	r0, r6, lsr #10
     748:	27000013 	smladcs	r0, r3, r0, r0
     74c:	13490101 	movtne	r0, #37121	; 0x9101
     750:	00001301 	andeq	r1, r0, r1, lsl #6
     754:	49002128 	stmdbmi	r0, {r3, r5, r8, sp}
     758:	000b2f13 	andeq	r2, fp, r3, lsl pc
     75c:	00342900 	eorseq	r2, r4, r0, lsl #18
     760:	0b3a0e03 	bleq	e83f74 <__Stack_Size+0xe83b74>
     764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     768:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     76c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     770:	03193f01 	tsteq	r9, #1, 30
     774:	3b0b3a0e 	blcc	2cefb4 <__Stack_Size+0x2cebb4>
     778:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     77c:	01193c13 	tsteq	r9, r3, lsl ip
     780:	2b000013 	blcs	7d4 <__Stack_Size+0x3d4>
     784:	13490005 	movtne	r0, #36869	; 0x9005
     788:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     78c:	03193f00 	tsteq	r9, #0, 30
     790:	3b0b3a0e 	blcc	2cefd0 <__Stack_Size+0x2cebd0>
     794:	3c19270b 	ldccc	7, cr2, [r9], {11}
     798:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
     79c:	0b0b000f 	bleq	2c07e0 <__Stack_Size+0x2c03e0>
     7a0:	00001349 	andeq	r1, r0, r9, asr #6
     7a4:	3f012e2e 	svccc	0x00012e2e
     7a8:	3a0e0319 	bcc	381414 <__Stack_Size+0x381014>
     7ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     7b0:	01193c19 	tsteq	r9, r9, lsl ip
     7b4:	2f000013 	svccs	0x00000013
     7b8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     7bc:	0b3a0e03 	bleq	e83fd0 <__Stack_Size+0xe83bd0>
     7c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     7c4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     7c8:	01000000 	mrseq	r0, (UNDEF: 0)
     7cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     7d0:	0e030b13 	vmoveq.32	d3[0], r0
     7d4:	01110e1b 	tsteq	r1, fp, lsl lr
     7d8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     7dc:	24020000 	strcs	r0, [r2], #-0
     7e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7e4:	000e030b 	andeq	r0, lr, fp, lsl #6
     7e8:	00160300 	andseq	r0, r6, r0, lsl #6
     7ec:	0b3a0803 	bleq	e82800 <__Stack_Size+0xe82400>
     7f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7f4:	16040000 	strne	r0, [r4], -r0
     7f8:	3a0e0300 	bcc	381400 <__Stack_Size+0x381000>
     7fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     800:	05000013 	streq	r0, [r0, #-19]
     804:	13490035 	movtne	r0, #36917	; 0x9035
     808:	04060000 	streq	r0, [r6], #-0
     80c:	3a0b0b01 	bcc	2c3418 <__Stack_Size+0x2c3018>
     810:	010b3b0b 	tsteq	fp, fp, lsl #22
     814:	07000013 	smladeq	r0, r3, r0, r0
     818:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     81c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     820:	03002808 	movweq	r2, #2056	; 0x808
     824:	000d1c08 	andeq	r1, sp, r8, lsl #24
     828:	01130900 	tsteq	r3, r0, lsl #18
     82c:	0b3a0b0b 	bleq	e83460 <__Stack_Size+0xe83060>
     830:	1301053b 	movwne	r0, #5435	; 0x153b
     834:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     838:	3a080300 	bcc	201440 <__Stack_Size+0x201040>
     83c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     840:	000b3813 	andeq	r3, fp, r3, lsl r8
     844:	000d0b00 	andeq	r0, sp, r0, lsl #22
     848:	0b3a0e03 	bleq	e8405c <__Stack_Size+0xe83c5c>
     84c:	1349053b 	movtne	r0, #38203	; 0x953b
     850:	00000b38 	andeq	r0, r0, r8, lsr fp
     854:	0300160c 	movweq	r1, #1548	; 0x60c
     858:	3b0b3a0e 	blcc	2cf098 <__Stack_Size+0x2cec98>
     85c:	00134905 	andseq	r4, r3, r5, lsl #18
     860:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     864:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     868:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     86c:	13491927 	movtne	r1, #39207	; 0x9927
     870:	13010b20 	movwne	r0, #6944	; 0x1b20
     874:	340e0000 	strcc	r0, [lr], #-0
     878:	3a0e0300 	bcc	381480 <__Stack_Size+0x381080>
     87c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     880:	0f000013 	svceq	0x00000013
     884:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     888:	0b3a0e03 	bleq	e8409c <__Stack_Size+0xe83c9c>
     88c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     890:	06120111 			; <UNDEFINED> instruction: 0x06120111
     894:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     898:	00130119 	andseq	r0, r3, r9, lsl r1
     89c:	00051000 	andeq	r1, r5, r0
     8a0:	0b3a0e03 	bleq	e840b4 <__Stack_Size+0xe83cb4>
     8a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8a8:	00001702 	andeq	r1, r0, r2, lsl #14
     8ac:	3f002e11 	svccc	0x00002e11
     8b0:	3a0e0319 	bcc	38151c <__Stack_Size+0x38111c>
     8b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     8b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     8bc:	97184006 	ldrls	r4, [r8, -r6]
     8c0:	00001942 	andeq	r1, r0, r2, asr #18
     8c4:	3f002e12 	svccc	0x00002e12
     8c8:	3a0e0319 	bcc	381534 <__Stack_Size+0x381134>
     8cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8d0:	11134919 	tstne	r3, r9, lsl r9
     8d4:	40061201 	andmi	r1, r6, r1, lsl #4
     8d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8dc:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     8e0:	03193f01 	tsteq	r9, #1, 30
     8e4:	3b0b3a0e 	blcc	2cf124 <__Stack_Size+0x2ced24>
     8e8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     8ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     8f0:	97184006 	ldrls	r4, [r8, -r6]
     8f4:	13011942 	movwne	r1, #6466	; 0x1942
     8f8:	34140000 	ldrcc	r0, [r4], #-0
     8fc:	3a0e0300 	bcc	381504 <__Stack_Size+0x381104>
     900:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     904:	00170213 	andseq	r0, r7, r3, lsl r2
     908:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     90c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     910:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     914:	01111927 	tsteq	r1, r7, lsr #18
     918:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     91c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     920:	16000013 			; <UNDEFINED> instruction: 0x16000013
     924:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     928:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     92c:	17021349 	strne	r1, [r2, -r9, asr #6]
     930:	05170000 	ldreq	r0, [r7, #-0]
     934:	3a0e0300 	bcc	38153c <__Stack_Size+0x38113c>
     938:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     93c:	00180213 	andseq	r0, r8, r3, lsl r2
     940:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
     944:	01111331 	tsteq	r1, r1, lsr r3
     948:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     94c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     950:	19000013 	stmdbne	r0, {r0, r1, r4}
     954:	13310034 	teqne	r1, #52	; 0x34
     958:	00001702 	andeq	r1, r0, r2, lsl #14
     95c:	11010b1a 	tstne	r1, sl, lsl fp
     960:	00061201 	andeq	r1, r6, r1, lsl #4
     964:	00341b00 	eorseq	r1, r4, r0, lsl #22
     968:	00001331 	andeq	r1, r0, r1, lsr r3
     96c:	03012e1c 	movweq	r2, #7708	; 0x1e1c
     970:	3b0b3a0e 	blcc	2cf1b0 <__Stack_Size+0x2cedb0>
     974:	20192705 	andscs	r2, r9, r5, lsl #14
     978:	0013010b 	andseq	r0, r3, fp, lsl #2
     97c:	00341d00 	eorseq	r1, r4, r0, lsl #26
     980:	0b3a0803 	bleq	e82994 <__Stack_Size+0xe82594>
     984:	1349053b 	movtne	r0, #38203	; 0x953b
     988:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
     98c:	11133101 	tstne	r3, r1, lsl #2
     990:	58061201 	stmdapl	r6, {r0, r9, ip}
     994:	0105590b 	tsteq	r5, fp, lsl #18
     998:	1f000013 	svcne	0x00000013
     99c:	13310034 	teqne	r1, #52	; 0x34
     9a0:	00001802 	andeq	r1, r0, r2, lsl #16
     9a4:	01828920 	orreq	r8, r2, r0, lsr #18
     9a8:	31011100 	mrscc	r1, (UNDEF: 17)
     9ac:	21000013 	tstcs	r0, r3, lsl r0
     9b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9b4:	0b3a0e03 	bleq	e841c8 <__Stack_Size+0xe83dc8>
     9b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     9bc:	01111349 	tsteq	r1, r9, asr #6
     9c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9c8:	22000013 	andcs	r0, r0, #19
     9cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9d0:	0b3b0b3a 	bleq	ec36c0 <__Stack_Size+0xec32c0>
     9d4:	17021349 	strne	r1, [r2, -r9, asr #6]
     9d8:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     9dc:	11010182 	smlabbne	r1, r2, r1, r0
     9e0:	01133101 	tsteq	r3, r1, lsl #2
     9e4:	24000013 	strcs	r0, [r0], #-19
     9e8:	0001828a 	andeq	r8, r1, sl, lsl #5
     9ec:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     9f0:	25000018 	strcs	r0, [r0, #-24]
     9f4:	01018289 	smlabbeq	r1, r9, r2, r8
     9f8:	13310111 	teqne	r1, #1073741828	; 0x40000004
     9fc:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     a00:	03193f01 	tsteq	r9, #1, 30
     a04:	3b0b3a0e 	blcc	2cf244 <__Stack_Size+0x2cee44>
     a08:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a0c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a10:	97184006 	ldrls	r4, [r8, -r6]
     a14:	00001942 	andeq	r1, r0, r2, asr #18
     a18:	01110100 	tsteq	r1, r0, lsl #2
     a1c:	0b130e25 	bleq	4c42b8 <__Stack_Size+0x4c3eb8>
     a20:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     a24:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a28:	00001710 	andeq	r1, r0, r0, lsl r7
     a2c:	0b002402 	bleq	9a3c <__Stack_Size+0x963c>
     a30:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     a34:	0300000e 	movweq	r0, #14
     a38:	08030016 	stmdaeq	r3, {r1, r2, r4}
     a3c:	0b3b0b3a 	bleq	ec372c <__Stack_Size+0xec332c>
     a40:	00001349 	andeq	r1, r0, r9, asr #6
     a44:	03001604 	movweq	r1, #1540	; 0x604
     a48:	3b0b3a0e 	blcc	2cf288 <__Stack_Size+0x2cee88>
     a4c:	0013490b 	andseq	r4, r3, fp, lsl #18
     a50:	00350500 	eorseq	r0, r5, r0, lsl #10
     a54:	00001349 	andeq	r1, r0, r9, asr #6
     a58:	0b010406 	bleq	41a78 <__Stack_Size+0x41678>
     a5c:	3b0b3a0b 	blcc	2cf290 <__Stack_Size+0x2cee90>
     a60:	0013010b 	andseq	r0, r3, fp, lsl #2
     a64:	00280700 	eoreq	r0, r8, r0, lsl #14
     a68:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     a6c:	13080000 	movwne	r0, #32768	; 0x8000
     a70:	3a0b0b01 	bcc	2c367c <__Stack_Size+0x2c327c>
     a74:	01053b0b 	tsteq	r5, fp, lsl #22
     a78:	09000013 	stmdbeq	r0, {r0, r1, r4}
     a7c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     a80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a84:	0b381349 	bleq	e057b0 <__Stack_Size+0xe053b0>
     a88:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     a8c:	3a0e0300 	bcc	381694 <__Stack_Size+0x381294>
     a90:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a94:	000b3813 	andeq	r3, fp, r3, lsl r8
     a98:	00160b00 	andseq	r0, r6, r0, lsl #22
     a9c:	0b3a0e03 	bleq	e842b0 <__Stack_Size+0xe83eb0>
     aa0:	1349053b 	movtne	r0, #38203	; 0x953b
     aa4:	010c0000 	mrseq	r0, (UNDEF: 12)
     aa8:	01134901 	tsteq	r3, r1, lsl #18
     aac:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     ab0:	13490021 	movtne	r0, #36897	; 0x9021
     ab4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     ab8:	0b01130e 	bleq	456f8 <__Stack_Size+0x452f8>
     abc:	3b0b3a0b 	blcc	2cf2f0 <__Stack_Size+0x2ceef0>
     ac0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ac4:	000d0f00 	andeq	r0, sp, r0, lsl #30
     ac8:	0b3a0e03 	bleq	e842dc <__Stack_Size+0xe83edc>
     acc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ad0:	00000b38 	andeq	r0, r0, r8, lsr fp
     ad4:	3f012e10 	svccc	0x00012e10
     ad8:	3a0e0319 	bcc	381744 <__Stack_Size+0x381344>
     adc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ae0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ae4:	97184006 	ldrls	r4, [r8, -r6]
     ae8:	13011942 	movwne	r1, #6466	; 0x1942
     aec:	05110000 	ldreq	r0, [r1, #-0]
     af0:	3a0e0300 	bcc	3816f8 <__Stack_Size+0x3812f8>
     af4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     af8:	00170213 	andseq	r0, r7, r3, lsl r2
     afc:	82891200 	addhi	r1, r9, #0, 4
     b00:	01110101 	tsteq	r1, r1, lsl #2
     b04:	13011331 	movwne	r1, #4913	; 0x1331
     b08:	8a130000 	bhi	4c0b10 <__Stack_Size+0x4c0710>
     b0c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     b10:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     b14:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
     b18:	11010182 	smlabbne	r1, r2, r1, r0
     b1c:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     b20:	00001331 	andeq	r1, r0, r1, lsr r3
     b24:	0b000f15 	bleq	4780 <__Stack_Size+0x4380>
     b28:	0013490b 	andseq	r4, r3, fp, lsl #18
     b2c:	00051600 	andeq	r1, r5, r0, lsl #12
     b30:	0b3a0e03 	bleq	e84344 <__Stack_Size+0xe83f44>
     b34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b38:	00001802 	andeq	r1, r0, r2, lsl #16
     b3c:	03003417 	movweq	r3, #1047	; 0x417
     b40:	3b0b3a0e 	blcc	2cf380 <__Stack_Size+0x2cef80>
     b44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b48:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     b4c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b50:	0b3b0b3a 	bleq	ec3840 <__Stack_Size+0xec3440>
     b54:	17021349 	strne	r1, [r2, -r9, asr #6]
     b58:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     b5c:	03193f01 	tsteq	r9, #1, 30
     b60:	3b0b3a0e 	blcc	2cf3a0 <__Stack_Size+0x2cefa0>
     b64:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b6c:	97184006 	ldrls	r4, [r8, -r6]
     b70:	13011942 	movwne	r1, #6466	; 0x1942
     b74:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     b78:	03193f01 	tsteq	r9, #1, 30
     b7c:	3b0b3a0e 	blcc	2cf3bc <__Stack_Size+0x2cefbc>
     b80:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     b84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b88:	97184006 	ldrls	r4, [r8, -r6]
     b8c:	13011942 	movwne	r1, #6466	; 0x1942
     b90:	051b0000 	ldreq	r0, [fp, #-0]
     b94:	3a0e0300 	bcc	38179c <__Stack_Size+0x38139c>
     b98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b9c:	00170213 	andseq	r0, r7, r3, lsl r2
     ba0:	00051c00 	andeq	r1, r5, r0, lsl #24
     ba4:	0b3a0e03 	bleq	e843b8 <__Stack_Size+0xe83fb8>
     ba8:	1349053b 	movtne	r0, #38203	; 0x953b
     bac:	00001802 	andeq	r1, r0, r2, lsl #16
     bb0:	0300341d 	movweq	r3, #1053	; 0x41d
     bb4:	3b0b3a0e 	blcc	2cf3f4 <__Stack_Size+0x2ceff4>
     bb8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     bbc:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
     bc0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     bc4:	0b3a0e03 	bleq	e843d8 <__Stack_Size+0xe83fd8>
     bc8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     bcc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bd0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bd4:	00130119 	andseq	r0, r3, r9, lsl r1
     bd8:	00341f00 	eorseq	r1, r4, r0, lsl #30
     bdc:	0b3a0803 	bleq	e82bf0 <__Stack_Size+0xe827f0>
     be0:	1349053b 	movtne	r0, #38203	; 0x953b
     be4:	00001702 	andeq	r1, r0, r2, lsl #14
     be8:	3f012e20 	svccc	0x00012e20
     bec:	3a0e0319 	bcc	381858 <__Stack_Size+0x381458>
     bf0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     bf4:	00193c19 	andseq	r3, r9, r9, lsl ip
     bf8:	00052100 	andeq	r2, r5, r0, lsl #2
     bfc:	00001349 	andeq	r1, r0, r9, asr #6
     c00:	01110100 	tsteq	r1, r0, lsl #2
     c04:	0b130e25 	bleq	4c44a0 <__Stack_Size+0x4c40a0>
     c08:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     c0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c10:	00001710 	andeq	r1, r0, r0, lsl r7
     c14:	0b002402 	bleq	9c24 <__Stack_Size+0x9824>
     c18:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c1c:	0300000e 	movweq	r0, #14
     c20:	08030016 	stmdaeq	r3, {r1, r2, r4}
     c24:	0b3b0b3a 	bleq	ec3914 <__Stack_Size+0xec3514>
     c28:	00001349 	andeq	r1, r0, r9, asr #6
     c2c:	03001604 	movweq	r1, #1540	; 0x604
     c30:	3b0b3a0e 	blcc	2cf470 <__Stack_Size+0x2cf070>
     c34:	0013490b 	andseq	r4, r3, fp, lsl #18
     c38:	00350500 	eorseq	r0, r5, r0, lsl #10
     c3c:	00001349 	andeq	r1, r0, r9, asr #6
     c40:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     c44:	07000013 	smladeq	r0, r3, r0, r0
     c48:	0b0b0104 	bleq	2c1060 <__Stack_Size+0x2c0c60>
     c4c:	0b3b0b3a 	bleq	ec393c <__Stack_Size+0xec353c>
     c50:	00001301 	andeq	r1, r0, r1, lsl #6
     c54:	03002808 	movweq	r2, #2056	; 0x808
     c58:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c5c:	00280900 	eoreq	r0, r8, r0, lsl #18
     c60:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     c64:	130a0000 	movwne	r0, #40960	; 0xa000
     c68:	3a050b01 	bcc	143874 <__Stack_Size+0x143474>
     c6c:	01053b0b 	tsteq	r5, fp, lsl #22
     c70:	0b000013 	bleq	cc4 <__Stack_Size+0x8c4>
     c74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     c78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c7c:	0b381349 	bleq	e059a8 <__Stack_Size+0xe055a8>
     c80:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     c84:	3a0e0300 	bcc	38188c <__Stack_Size+0x38148c>
     c88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c8c:	00053813 	andeq	r3, r5, r3, lsl r8
     c90:	000d0d00 	andeq	r0, sp, r0, lsl #26
     c94:	0b3a0803 	bleq	e82ca8 <__Stack_Size+0xe828a8>
     c98:	1349053b 	movtne	r0, #38203	; 0x953b
     c9c:	00000538 	andeq	r0, r0, r8, lsr r5
     ca0:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
     ca4:	00130113 	andseq	r0, r3, r3, lsl r1
     ca8:	00210f00 	eoreq	r0, r1, r0, lsl #30
     cac:	0b2f1349 	bleq	bc59d8 <__Stack_Size+0xbc55d8>
     cb0:	16100000 	ldrne	r0, [r0], -r0
     cb4:	3a0e0300 	bcc	3818bc <__Stack_Size+0x3814bc>
     cb8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cbc:	11000013 	tstne	r0, r3, lsl r0
     cc0:	0b0b0113 	bleq	2c1114 <__Stack_Size+0x2c0d14>
     cc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cc8:	00001301 	andeq	r1, r0, r1, lsl #6
     ccc:	03000d12 	movweq	r0, #3346	; 0xd12
     cd0:	3b0b3a08 	blcc	2cf4f8 <__Stack_Size+0x2cf0f8>
     cd4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     cd8:	1300000b 	movwne	r0, #11
     cdc:	0b0b0113 	bleq	2c1130 <__Stack_Size+0x2c0d30>
     ce0:	0b3b0b3a 	bleq	ec39d0 <__Stack_Size+0xec35d0>
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
     ce8:	03000d14 	movweq	r0, #3348	; 0xd14
     cec:	3b0b3a0e 	blcc	2cf52c <__Stack_Size+0x2cf12c>
     cf0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     cf4:	1500000b 	strne	r0, [r0, #-11]
     cf8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     cfc:	0b3a0e03 	bleq	e84510 <__Stack_Size+0xe84110>
     d00:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d04:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d0c:	00130119 	andseq	r0, r3, r9, lsl r1
     d10:	00341600 	eorseq	r1, r4, r0, lsl #12
     d14:	0b3a0e03 	bleq	e84528 <__Stack_Size+0xe84128>
     d18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d1c:	00001702 	andeq	r1, r0, r2, lsl #14
     d20:	03000517 	movweq	r0, #1303	; 0x517
     d24:	3b0b3a0e 	blcc	2cf564 <__Stack_Size+0x2cf164>
     d28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d2c:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     d30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d34:	0b3b0b3a 	bleq	ec3a24 <__Stack_Size+0xec3624>
     d38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d3c:	0f190000 	svceq	0x00190000
     d40:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     d44:	1a000013 	bne	d98 <__Stack_Size+0x998>
     d48:	00018289 	andeq	r8, r1, r9, lsl #5
     d4c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     d50:	00133119 	andseq	r3, r3, r9, lsl r1
     d54:	82891b00 	addhi	r1, r9, #0, 22
     d58:	01110101 	tsteq	r1, r1, lsl #2
     d5c:	31194295 			; <UNDEFINED> instruction: 0x31194295
     d60:	1c000013 	stcne	0, cr0, [r0], {19}
     d64:	0001828a 	andeq	r8, r1, sl, lsl #5
     d68:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     d6c:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     d70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d74:	0b3a0e03 	bleq	e84588 <__Stack_Size+0xe84188>
     d78:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d7c:	01111349 	tsteq	r1, r9, asr #6
     d80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d84:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d88:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     d8c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     d90:	0b3a0e03 	bleq	e845a4 <__Stack_Size+0xe841a4>
     d94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     d98:	01111349 	tsteq	r1, r9, asr #6
     d9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     da0:	00194297 	mulseq	r9, r7, r2
     da4:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     da8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     db0:	13491927 	movtne	r1, #39207	; 0x9927
     db4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     db8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     dbc:	00130119 	andseq	r0, r3, r9, lsl r1
     dc0:	00052000 	andeq	r2, r5, r0
     dc4:	0b3a0e03 	bleq	e845d8 <__Stack_Size+0xe841d8>
     dc8:	1349053b 	movtne	r0, #38203	; 0x953b
     dcc:	00001702 	andeq	r1, r0, r2, lsl #14
     dd0:	03003421 	movweq	r3, #1057	; 0x421
     dd4:	3b0b3a0e 	blcc	2cf614 <__Stack_Size+0x2cf214>
     dd8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ddc:	22000017 	andcs	r0, r0, #23
     de0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     de4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     de8:	17021349 	strne	r1, [r2, -r9, asr #6]
     dec:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     df0:	03193f01 	tsteq	r9, #1, 30
     df4:	3b0b3a0e 	blcc	2cf634 <__Stack_Size+0x2cf234>
     df8:	11192705 	tstne	r9, r5, lsl #14
     dfc:	40061201 	andmi	r1, r6, r1, lsl #4
     e00:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e04:	00001301 	andeq	r1, r0, r1, lsl #6
     e08:	03000524 	movweq	r0, #1316	; 0x524
     e0c:	3b0b3a0e 	blcc	2cf64c <__Stack_Size+0x2cf24c>
     e10:	02134905 	andseq	r4, r3, #81920	; 0x14000
     e14:	25000018 	strcs	r0, [r0, #-24]
     e18:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e1c:	0b3a0e03 	bleq	e84630 <__Stack_Size+0xe84230>
     e20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e24:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e28:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e2c:	26000019 			; <UNDEFINED> instruction: 0x26000019
     e30:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e34:	0b3a0e03 	bleq	e84648 <__Stack_Size+0xe84248>
     e38:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e3c:	0000193c 	andeq	r1, r0, ip, lsr r9
     e40:	3f012e27 	svccc	0x00012e27
     e44:	3a0e0319 	bcc	381ab0 <__Stack_Size+0x3816b0>
     e48:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e4c:	01193c19 	tsteq	r9, r9, lsl ip
     e50:	28000013 	stmdacs	r0, {r0, r1, r4}
     e54:	13490005 	movtne	r0, #36869	; 0x9005
     e58:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     e5c:	03193f00 	tsteq	r9, #0, 30
     e60:	3b0b3a0e 	blcc	2cf6a0 <__Stack_Size+0x2cf2a0>
     e64:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     e68:	00193c13 	andseq	r3, r9, r3, lsl ip
     e6c:	11010000 	mrsne	r0, (UNDEF: 1)
     e70:	130e2501 	movwne	r2, #58625	; 0xe501
     e74:	1b0e030b 	blne	381aa8 <__Stack_Size+0x3816a8>
     e78:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e7c:	00171006 	andseq	r1, r7, r6
     e80:	00240200 	eoreq	r0, r4, r0, lsl #4
     e84:	0b3e0b0b 	bleq	f83ab8 <__Stack_Size+0xf836b8>
     e88:	00000e03 	andeq	r0, r0, r3, lsl #28
     e8c:	03001603 	movweq	r1, #1539	; 0x603
     e90:	3b0b3a08 	blcc	2cf6b8 <__Stack_Size+0x2cf2b8>
     e94:	0013490b 	andseq	r4, r3, fp, lsl #18
     e98:	00160400 	andseq	r0, r6, r0, lsl #8
     e9c:	0b3a0e03 	bleq	e846b0 <__Stack_Size+0xe842b0>
     ea0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ea4:	35050000 	strcc	r0, [r5, #-0]
     ea8:	00134900 	andseq	r4, r3, r0, lsl #18
     eac:	01040600 	tsteq	r4, r0, lsl #12
     eb0:	0b3a0b0b 	bleq	e83ae4 <__Stack_Size+0xe836e4>
     eb4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     eb8:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
     ebc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     ec0:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     ec4:	08030028 	stmdaeq	r3, {r3, r5}
     ec8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     ecc:	0b011309 	bleq	45af8 <__Stack_Size+0x456f8>
     ed0:	3b0b3a0b 	blcc	2cf704 <__Stack_Size+0x2cf304>
     ed4:	00130105 	andseq	r0, r3, r5, lsl #2
     ed8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     edc:	0b3a0803 	bleq	e82ef0 <__Stack_Size+0xe82af0>
     ee0:	1349053b 	movtne	r0, #38203	; 0x953b
     ee4:	00000b38 	andeq	r0, r0, r8, lsr fp
     ee8:	0300160b 	movweq	r1, #1547	; 0x60b
     eec:	3b0b3a0e 	blcc	2cf72c <__Stack_Size+0x2cf32c>
     ef0:	00134905 	andseq	r4, r3, r5, lsl #18
     ef4:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
     ef8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     efc:	0b3b0b3a 	bleq	ec3bec <__Stack_Size+0xec37ec>
     f00:	01111927 	tsteq	r1, r7, lsr #18
     f04:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f08:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f0c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     f10:	01018289 	smlabbeq	r1, r9, r2, r8
     f14:	13310111 	teqne	r1, #1073741828	; 0x40000004
     f18:	00001301 	andeq	r1, r0, r1, lsl #6
     f1c:	01828a0e 	orreq	r8, r2, lr, lsl #20
     f20:	91180200 	tstls	r8, r0, lsl #4
     f24:	00001842 	andeq	r1, r0, r2, asr #16
     f28:	0182890f 	orreq	r8, r2, pc, lsl #18
     f2c:	95011101 	strls	r1, [r1, #-257]	; 0x101
     f30:	13311942 	teqne	r1, #1081344	; 0x108000
     f34:	05100000 	ldreq	r0, [r0, #-0]
     f38:	3a0e0300 	bcc	381b40 <__Stack_Size+0x381740>
     f3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f40:	00180213 	andseq	r0, r8, r3, lsl r2
     f44:	00051100 	andeq	r1, r5, r0, lsl #2
     f48:	0b3a0e03 	bleq	e8475c <__Stack_Size+0xe8435c>
     f4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f50:	00001702 	andeq	r1, r0, r2, lsl #14
     f54:	03003412 	movweq	r3, #1042	; 0x412
     f58:	3b0b3a0e 	blcc	2cf798 <__Stack_Size+0x2cf398>
     f5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f60:	13000017 	movwne	r0, #23
     f64:	00018289 	andeq	r8, r1, r9, lsl #5
     f68:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     f6c:	00133119 	andseq	r3, r3, r9, lsl r1
     f70:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     f74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f78:	0b3b0b3a 	bleq	ec3c68 <__Stack_Size+0xec3868>
     f7c:	13491927 	movtne	r1, #39207	; 0x9927
     f80:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f84:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f88:	00130119 	andseq	r0, r3, r9, lsl r1
     f8c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     f90:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f98:	01111927 	tsteq	r1, r7, lsr #18
     f9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fa0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     fa4:	16000013 			; <UNDEFINED> instruction: 0x16000013
     fa8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fb0:	17021349 	strne	r1, [r2, -r9, asr #6]
     fb4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     fb8:	03193f01 	tsteq	r9, #1, 30
     fbc:	3b0b3a0e 	blcc	2cf7fc <__Stack_Size+0x2cf3fc>
     fc0:	3c192705 	ldccc	7, cr2, [r9], {5}
     fc4:	00130119 	andseq	r0, r3, r9, lsl r1
     fc8:	00051800 	andeq	r1, r5, r0, lsl #16
     fcc:	00001349 	andeq	r1, r0, r9, asr #6
     fd0:	3f002e19 	svccc	0x00002e19
     fd4:	3a0e0319 	bcc	381c40 <__Stack_Size+0x381840>
     fd8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fdc:	00193c19 	andseq	r3, r9, r9, lsl ip
     fe0:	11010000 	mrsne	r0, (UNDEF: 1)
     fe4:	130e2501 	movwne	r2, #58625	; 0xe501
     fe8:	1b0e030b 	blne	381c1c <__Stack_Size+0x38181c>
     fec:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     ff0:	00171006 	andseq	r1, r7, r6
     ff4:	00240200 	eoreq	r0, r4, r0, lsl #4
     ff8:	0b3e0b0b 	bleq	f83c2c <__Stack_Size+0xf8382c>
     ffc:	00000e03 	andeq	r0, r0, r3, lsl #28
    1000:	03001603 	movweq	r1, #1539	; 0x603
    1004:	3b0b3a08 	blcc	2cf82c <__Stack_Size+0x2cf42c>
    1008:	0013490b 	andseq	r4, r3, fp, lsl #18
    100c:	00260400 	eoreq	r0, r6, r0, lsl #8
    1010:	00001349 	andeq	r1, r0, r9, asr #6
    1014:	03001605 	movweq	r1, #1541	; 0x605
    1018:	3b0b3a0e 	blcc	2cf858 <__Stack_Size+0x2cf458>
    101c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1020:	00350600 	eorseq	r0, r5, r0, lsl #12
    1024:	00001349 	andeq	r1, r0, r9, asr #6
    1028:	0b010407 	bleq	4204c <__Stack_Size+0x41c4c>
    102c:	3b0b3a0b 	blcc	2cf860 <__Stack_Size+0x2cf460>
    1030:	0013010b 	andseq	r0, r3, fp, lsl #2
    1034:	00280800 	eoreq	r0, r8, r0, lsl #16
    1038:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    103c:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    1040:	1c080300 	stcne	3, cr0, [r8], {-0}
    1044:	0a00000d 	beq	1080 <__Stack_Size+0xc80>
    1048:	0b0b0113 	bleq	2c149c <__Stack_Size+0x2c109c>
    104c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1050:	00001301 	andeq	r1, r0, r1, lsl #6
    1054:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1058:	3b0b3a08 	blcc	2cf880 <__Stack_Size+0x2cf480>
    105c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1060:	0c00000b 	stceq	0, cr0, [r0], {11}
    1064:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1068:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    106c:	0b381349 	bleq	e05d98 <__Stack_Size+0xe05998>
    1070:	160d0000 	strne	r0, [sp], -r0
    1074:	3a0e0300 	bcc	381c7c <__Stack_Size+0x38187c>
    1078:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    107c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1080:	0b0b0113 	bleq	2c14d4 <__Stack_Size+0x2c10d4>
    1084:	0b3b0b3a 	bleq	ec3d74 <__Stack_Size+0xec3974>
    1088:	00001301 	andeq	r1, r0, r1, lsl #6
    108c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1090:	3b0b3a0e 	blcc	2cf8d0 <__Stack_Size+0x2cf4d0>
    1094:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1098:	1000000b 	andne	r0, r0, fp
    109c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    10a0:	0b3a0e03 	bleq	e848b4 <__Stack_Size+0xe844b4>
    10a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10b0:	11000019 	tstne	r0, r9, lsl r0
    10b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10b8:	0b3a0e03 	bleq	e848cc <__Stack_Size+0xe844cc>
    10bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10c4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10c8:	00130119 	andseq	r0, r3, r9, lsl r1
    10cc:	00051200 	andeq	r1, r5, r0, lsl #4
    10d0:	0b3a0e03 	bleq	e848e4 <__Stack_Size+0xe844e4>
    10d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10d8:	00001802 	andeq	r1, r0, r2, lsl #16
    10dc:	03000513 	movweq	r0, #1299	; 0x513
    10e0:	3b0b3a0e 	blcc	2cf920 <__Stack_Size+0x2cf520>
    10e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10e8:	14000017 	strne	r0, [r0], #-23
    10ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10f0:	0b3b0b3a 	bleq	ec3de0 <__Stack_Size+0xec39e0>
    10f4:	17021349 	strne	r1, [r2, -r9, asr #6]
    10f8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    10fc:	03193f01 	tsteq	r9, #1, 30
    1100:	3b0b3a0e 	blcc	2cf940 <__Stack_Size+0x2cf540>
    1104:	11192705 	tstne	r9, r5, lsl #14
    1108:	40061201 	andmi	r1, r6, r1, lsl #4
    110c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1110:	00001301 	andeq	r1, r0, r1, lsl #6
    1114:	03000516 	movweq	r0, #1302	; 0x516
    1118:	3b0b3a0e 	blcc	2cf958 <__Stack_Size+0x2cf558>
    111c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1120:	17000018 	smladne	r0, r8, r0, r0
    1124:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1128:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    112c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1130:	34180000 	ldrcc	r0, [r8], #-0
    1134:	3a0e0300 	bcc	381d3c <__Stack_Size+0x38193c>
    1138:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    113c:	00170213 	andseq	r0, r7, r3, lsl r2
    1140:	002e1900 	eoreq	r1, lr, r0, lsl #18
    1144:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    114c:	13491927 	movtne	r1, #39207	; 0x9927
    1150:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1154:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1158:	1a000019 	bne	11c4 <__Stack_Size+0xdc4>
    115c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1160:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1164:	17021349 	strne	r1, [r2, -r9, asr #6]
    1168:	0f1b0000 	svceq	0x001b0000
    116c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1170:	1c000013 	stcne	0, cr0, [r0], {19}
    1174:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1178:	0b3a0e03 	bleq	e8498c <__Stack_Size+0xe8458c>
    117c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1180:	01111349 	tsteq	r1, r9, asr #6
    1184:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1188:	01194297 			; <UNDEFINED> instruction: 0x01194297
    118c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1194:	0b3a0e03 	bleq	e849a8 <__Stack_Size+0xe845a8>
    1198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    119c:	01111349 	tsteq	r1, r9, asr #6
    11a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    11a8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    11ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11b0:	0b3b0b3a 	bleq	ec3ea0 <__Stack_Size+0xec3aa0>
    11b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11b8:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    11bc:	11010182 	smlabbne	r1, r2, r1, r0
    11c0:	01133101 	tsteq	r3, r1, lsl #2
    11c4:	20000013 	andcs	r0, r0, r3, lsl r0
    11c8:	0001828a 	andeq	r8, r1, sl, lsl #5
    11cc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    11d0:	21000018 	tstcs	r0, r8, lsl r0
    11d4:	01018289 	smlabbeq	r1, r9, r2, r8
    11d8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    11dc:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    11e0:	03193f00 	tsteq	r9, #0, 30
    11e4:	3b0b3a0e 	blcc	2cfa24 <__Stack_Size+0x2cf624>
    11e8:	11192705 	tstne	r9, r5, lsl #14
    11ec:	40061201 	andmi	r1, r6, r1, lsl #4
    11f0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11f4:	01230000 			; <UNDEFINED> instruction: 0x01230000
    11f8:	01134901 	tsteq	r3, r1, lsl #18
    11fc:	24000013 	strcs	r0, [r0], #-19
    1200:	13490021 	movtne	r0, #36897	; 0x9021
    1204:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1208:	01110100 	tsteq	r1, r0, lsl #2
    120c:	0b130e25 	bleq	4c4aa8 <__Stack_Size+0x4c46a8>
    1210:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1214:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1218:	00001710 	andeq	r1, r0, r0, lsl r7
    121c:	0b002402 	bleq	a22c <__Stack_Size+0x9e2c>
    1220:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1224:	0300000e 	movweq	r0, #14
    1228:	08030016 	stmdaeq	r3, {r1, r2, r4}
    122c:	0b3b0b3a 	bleq	ec3f1c <__Stack_Size+0xec3b1c>
    1230:	00001349 	andeq	r1, r0, r9, asr #6
    1234:	03001604 	movweq	r1, #1540	; 0x604
    1238:	3b0b3a0e 	blcc	2cfa78 <__Stack_Size+0x2cf678>
    123c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1240:	00350500 	eorseq	r0, r5, r0, lsl #10
    1244:	00001349 	andeq	r1, r0, r9, asr #6
    1248:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    124c:	07000013 	smladeq	r0, r3, r0, r0
    1250:	0b0b0104 	bleq	2c1668 <__Stack_Size+0x2c1268>
    1254:	0b3b0b3a 	bleq	ec3f44 <__Stack_Size+0xec3b44>
    1258:	00001301 	andeq	r1, r0, r1, lsl #6
    125c:	03002808 	movweq	r2, #2056	; 0x808
    1260:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1264:	00280900 	eoreq	r0, r8, r0, lsl #18
    1268:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    126c:	130a0000 	movwne	r0, #40960	; 0xa000
    1270:	3a0b0b01 	bcc	2c3e7c <__Stack_Size+0x2c3a7c>
    1274:	01053b0b 	tsteq	r5, fp, lsl #22
    1278:	0b000013 	bleq	12cc <__Stack_Size+0xecc>
    127c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1280:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1284:	0b381349 	bleq	e05fb0 <__Stack_Size+0xe05bb0>
    1288:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    128c:	3a080300 	bcc	201e94 <__Stack_Size+0x201a94>
    1290:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1294:	000b3813 	andeq	r3, fp, r3, lsl r8
    1298:	00160d00 	andseq	r0, r6, r0, lsl #26
    129c:	0b3a0e03 	bleq	e84ab0 <__Stack_Size+0xe846b0>
    12a0:	1349053b 	movtne	r0, #38203	; 0x953b
    12a4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    12a8:	03193f01 	tsteq	r9, #1, 30
    12ac:	3b0b3a0e 	blcc	2cfaec <__Stack_Size+0x2cf6ec>
    12b0:	1119270b 	tstne	r9, fp, lsl #14
    12b4:	40061201 	andmi	r1, r6, r1, lsl #4
    12b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    12bc:	00001301 	andeq	r1, r0, r1, lsl #6
    12c0:	0300050f 	movweq	r0, #1295	; 0x50f
    12c4:	3b0b3a0e 	blcc	2cfb04 <__Stack_Size+0x2cf704>
    12c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12cc:	10000018 	andne	r0, r0, r8, lsl r0
    12d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    12d4:	0b3b0b3a 	bleq	ec3fc4 <__Stack_Size+0xec3bc4>
    12d8:	17021349 	strne	r1, [r2, -r9, asr #6]
    12dc:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    12e0:	03193f00 	tsteq	r9, #0, 30
    12e4:	3b0b3a0e 	blcc	2cfb24 <__Stack_Size+0x2cf724>
    12e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    12ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12f0:	97184006 	ldrls	r4, [r8, -r6]
    12f4:	00001942 	andeq	r1, r0, r2, asr #18
    12f8:	3f012e12 	svccc	0x00012e12
    12fc:	3a0e0319 	bcc	381f68 <__Stack_Size+0x381b68>
    1300:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1304:	11134919 	tstne	r3, r9, lsl r9
    1308:	40061201 	andmi	r1, r6, r1, lsl #4
    130c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1310:	34130000 	ldrcc	r0, [r3], #-0
    1314:	3a0e0300 	bcc	381f1c <__Stack_Size+0x381b1c>
    1318:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    131c:	00170213 	andseq	r0, r7, r3, lsl r2
    1320:	00341400 	eorseq	r1, r4, r0, lsl #8
    1324:	0b3a0803 	bleq	e83338 <__Stack_Size+0xe82f38>
    1328:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    132c:	00001702 	andeq	r1, r0, r2, lsl #14
    1330:	01110100 	tsteq	r1, r0, lsl #2
    1334:	0b130e25 	bleq	4c4bd0 <__Stack_Size+0x4c47d0>
    1338:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    133c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1340:	00001710 	andeq	r1, r0, r0, lsl r7
    1344:	0b002402 	bleq	a354 <__Stack_Size+0x9f54>
    1348:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    134c:	0300000e 	movweq	r0, #14
    1350:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1354:	0b3b0b3a 	bleq	ec4044 <__Stack_Size+0xec3c44>
    1358:	00001349 	andeq	r1, r0, r9, asr #6
    135c:	03001604 	movweq	r1, #1540	; 0x604
    1360:	3b0b3a0e 	blcc	2cfba0 <__Stack_Size+0x2cf7a0>
    1364:	0013490b 	andseq	r4, r3, fp, lsl #18
    1368:	00350500 	eorseq	r0, r5, r0, lsl #10
    136c:	00001349 	andeq	r1, r0, r9, asr #6
    1370:	0b010406 	bleq	42390 <__Stack_Size+0x41f90>
    1374:	3b0b3a0b 	blcc	2cfba8 <__Stack_Size+0x2cf7a8>
    1378:	0013010b 	andseq	r0, r3, fp, lsl #2
    137c:	00280700 	eoreq	r0, r8, r0, lsl #14
    1380:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1384:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1388:	1c080300 	stcne	3, cr0, [r8], {-0}
    138c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1390:	0b0b0113 	bleq	2c17e4 <__Stack_Size+0x2c13e4>
    1394:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1398:	00001301 	andeq	r1, r0, r1, lsl #6
    139c:	03000d0a 	movweq	r0, #3338	; 0xd0a
    13a0:	3b0b3a08 	blcc	2cfbc8 <__Stack_Size+0x2cf7c8>
    13a4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    13a8:	0b00000b 	bleq	13dc <__Stack_Size+0xfdc>
    13ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13b4:	0b381349 	bleq	e060e0 <__Stack_Size+0xe05ce0>
    13b8:	160c0000 	strne	r0, [ip], -r0
    13bc:	3a0e0300 	bcc	381fc4 <__Stack_Size+0x381bc4>
    13c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13c4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    13c8:	0b0b0113 	bleq	2c181c <__Stack_Size+0x2c141c>
    13cc:	0b3b0b3a 	bleq	ec40bc <__Stack_Size+0xec3cbc>
    13d0:	00001301 	andeq	r1, r0, r1, lsl #6
    13d4:	03000d0e 	movweq	r0, #3342	; 0xd0e
    13d8:	3b0b3a0e 	blcc	2cfc18 <__Stack_Size+0x2cf818>
    13dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13e0:	0f00000b 	svceq	0x0000000b
    13e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    13e8:	0b3a0e03 	bleq	e84bfc <__Stack_Size+0xe847fc>
    13ec:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    13f0:	13010b20 	movwne	r0, #6944	; 0x1b20
    13f4:	05100000 	ldreq	r0, [r0, #-0]
    13f8:	3a0e0300 	bcc	382000 <__Stack_Size+0x381c00>
    13fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1400:	11000013 	tstne	r0, r3, lsl r0
    1404:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1408:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    140c:	00001349 	andeq	r1, r0, r9, asr #6
    1410:	0b000f12 	bleq	5060 <__Stack_Size+0x4c60>
    1414:	0013490b 	andseq	r4, r3, fp, lsl #18
    1418:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    141c:	0b3a0e03 	bleq	e84c30 <__Stack_Size+0xe84830>
    1420:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1424:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1428:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    142c:	00130119 	andseq	r0, r3, r9, lsl r1
    1430:	00051400 	andeq	r1, r5, r0, lsl #8
    1434:	0b3a0e03 	bleq	e84c48 <__Stack_Size+0xe84848>
    1438:	1349053b 	movtne	r0, #38203	; 0x953b
    143c:	00001802 	andeq	r1, r0, r2, lsl #16
    1440:	03000515 	movweq	r0, #1301	; 0x515
    1444:	3b0b3a0e 	blcc	2cfc84 <__Stack_Size+0x2cf884>
    1448:	02134905 	andseq	r4, r3, #81920	; 0x14000
    144c:	16000017 			; <UNDEFINED> instruction: 0x16000017
    1450:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1454:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1458:	17021349 	strne	r1, [r2, -r9, asr #6]
    145c:	34170000 	ldrcc	r0, [r7], #-0
    1460:	3a080300 	bcc	202068 <__Stack_Size+0x201c68>
    1464:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1468:	00170213 	andseq	r0, r7, r3, lsl r2
    146c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    1470:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1474:	0b3b0b3a 	bleq	ec4164 <__Stack_Size+0xec3d64>
    1478:	01111927 	tsteq	r1, r7, lsr #18
    147c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1480:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1484:	19000013 	stmdbne	r0, {r0, r1, r4}
    1488:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    148c:	0b3b0b3a 	bleq	ec417c <__Stack_Size+0xec3d7c>
    1490:	17021349 	strne	r1, [r2, -r9, asr #6]
    1494:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
    1498:	11010182 	smlabbne	r1, r2, r1, r0
    149c:	01133101 	tsteq	r3, r1, lsl #2
    14a0:	1b000013 	blne	14f4 <__Stack_Size+0x10f4>
    14a4:	0001828a 	andeq	r8, r1, sl, lsl #5
    14a8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    14ac:	1c000018 	stcne	0, cr0, [r0], {24}
    14b0:	01018289 	smlabbeq	r1, r9, r2, r8
    14b4:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    14b8:	01133119 	tsteq	r3, r9, lsl r1
    14bc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    14c0:	01018289 	smlabbeq	r1, r9, r2, r8
    14c4:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    14c8:	00133119 	andseq	r3, r3, r9, lsl r1
    14cc:	00051e00 	andeq	r1, r5, r0, lsl #28
    14d0:	0b3a0e03 	bleq	e84ce4 <__Stack_Size+0xe848e4>
    14d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14d8:	00001802 	andeq	r1, r0, r2, lsl #16
    14dc:	0300341f 	movweq	r3, #1055	; 0x41f
    14e0:	3b0b3a0e 	blcc	2cfd20 <__Stack_Size+0x2cf920>
    14e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14e8:	20000017 	andcs	r0, r0, r7, lsl r0
    14ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14f0:	0b3a0e03 	bleq	e84d04 <__Stack_Size+0xe84904>
    14f4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    14f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1500:	00130119 	andseq	r0, r3, r9, lsl r1
    1504:	011d2100 	tsteq	sp, r0, lsl #2
    1508:	01111331 	tsteq	r1, r1, lsr r3
    150c:	0b580612 	bleq	1602d5c <__Stack_Size+0x160295c>
    1510:	00000559 	andeq	r0, r0, r9, asr r5
    1514:	31000522 	tstcc	r0, r2, lsr #10
    1518:	00170213 	andseq	r0, r7, r3, lsl r2
    151c:	00052300 	andeq	r2, r5, r0, lsl #6
    1520:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1524:	0b240000 	bleq	90152c <__Stack_Size+0x90112c>
    1528:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    152c:	25000006 	strcs	r0, [r0, #-6]
    1530:	13310034 	teqne	r1, #52	; 0x34
    1534:	00001702 	andeq	r1, r0, r2, lsl #14
    1538:	31011d26 	tstcc	r1, r6, lsr #26
    153c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1540:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1544:	00130105 	andseq	r0, r3, r5, lsl #2
    1548:	82892700 	addhi	r2, r9, #0, 14
    154c:	01110001 	tsteq	r1, r1
    1550:	00001331 	andeq	r1, r0, r1, lsr r3
    1554:	01828928 	orreq	r8, r2, r8, lsr #18
    1558:	31011101 	tstcc	r1, r1, lsl #2
    155c:	29000013 	stmdbcs	r0, {r0, r1, r4}
    1560:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1564:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1568:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    156c:	00130119 	andseq	r0, r3, r9, lsl r1
    1570:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    1574:	0b3a0e03 	bleq	e84d88 <__Stack_Size+0xe84988>
    1578:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    157c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1580:	342b0000 	strtcc	r0, [fp], #-0
    1584:	3a080300 	bcc	20218c <__Stack_Size+0x201d8c>
    1588:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    158c:	2c000013 	stccs	0, cr0, [r0], {19}
    1590:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1594:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1598:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    159c:	00001301 	andeq	r1, r0, r1, lsl #6
    15a0:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xb2d
    15a4:	2e000017 	mcrcs	0, 0, r0, cr0, cr7, {0}
    15a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15ac:	0b3a0e03 	bleq	e84dc0 <__Stack_Size+0xe849c0>
    15b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    15b4:	01111349 	tsteq	r1, r9, asr #6
    15b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15bc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    15c0:	2f000013 	svccs	0x00000013
    15c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    15c8:	0b3a0e03 	bleq	e84ddc <__Stack_Size+0xe849dc>
    15cc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    15d0:	1301193c 	movwne	r1, #6460	; 0x193c
    15d4:	05300000 	ldreq	r0, [r0, #-0]!
    15d8:	00134900 	andseq	r4, r3, r0, lsl #18
    15dc:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    15e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    15e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    15e8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    15ec:	01000000 	mrseq	r0, (UNDEF: 0)
    15f0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    15f4:	0e030b13 	vmoveq.32	d3[0], r0
    15f8:	01110e1b 	tsteq	r1, fp, lsl lr
    15fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1600:	24020000 	strcs	r0, [r2], #-0
    1604:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1608:	000e030b 	andeq	r0, lr, fp, lsl #6
    160c:	00160300 	andseq	r0, r6, r0, lsl #6
    1610:	0b3a0803 	bleq	e83624 <__Stack_Size+0xe83224>
    1614:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1618:	16040000 	strne	r0, [r4], -r0
    161c:	3a0e0300 	bcc	382224 <__Stack_Size+0x381e24>
    1620:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1624:	05000013 	streq	r0, [r0, #-19]
    1628:	13490035 	movtne	r0, #36917	; 0x9035
    162c:	04060000 	streq	r0, [r6], #-0
    1630:	3a0b0b01 	bcc	2c423c <__Stack_Size+0x2c3e3c>
    1634:	010b3b0b 	tsteq	fp, fp, lsl #22
    1638:	07000013 	smladeq	r0, r3, r0, r0
    163c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1640:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1644:	03002808 	movweq	r2, #2056	; 0x808
    1648:	000d1c08 	andeq	r1, sp, r8, lsl #24
    164c:	01130900 	tsteq	r3, r0, lsl #18
    1650:	0b3a0b0b 	bleq	e84284 <__Stack_Size+0xe83e84>
    1654:	1301053b 	movwne	r0, #5435	; 0x153b
    1658:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    165c:	3a080300 	bcc	202264 <__Stack_Size+0x201e64>
    1660:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1664:	000b3813 	andeq	r3, fp, r3, lsl r8
    1668:	000d0b00 	andeq	r0, sp, r0, lsl #22
    166c:	0b3a0e03 	bleq	e84e80 <__Stack_Size+0xe84a80>
    1670:	1349053b 	movtne	r0, #38203	; 0x953b
    1674:	00000b38 	andeq	r0, r0, r8, lsr fp
    1678:	0300160c 	movweq	r1, #1548	; 0x60c
    167c:	3b0b3a0e 	blcc	2cfebc <__Stack_Size+0x2cfabc>
    1680:	00134905 	andseq	r4, r3, r5, lsl #18
    1684:	01130d00 	tsteq	r3, r0, lsl #26
    1688:	0b3a0b0b 	bleq	e842bc <__Stack_Size+0xe83ebc>
    168c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1690:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    1694:	3a0e0300 	bcc	38229c <__Stack_Size+0x381e9c>
    1698:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    169c:	000b3813 	andeq	r3, fp, r3, lsl r8
    16a0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    16a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16a8:	0b3b0b3a 	bleq	ec4398 <__Stack_Size+0xec3f98>
    16ac:	01111927 	tsteq	r1, r7, lsr #18
    16b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    16b4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    16b8:	10000013 	andne	r0, r0, r3, lsl r0
    16bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    16c0:	0b3b0b3a 	bleq	ec43b0 <__Stack_Size+0xec3fb0>
    16c4:	17021349 	strne	r1, [r2, -r9, asr #6]
    16c8:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    16cc:	11010182 	smlabbne	r1, r2, r1, r0
    16d0:	01133101 	tsteq	r3, r1, lsl #2
    16d4:	12000013 	andne	r0, r0, #19
    16d8:	0001828a 	andeq	r8, r1, sl, lsl #5
    16dc:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    16e0:	13000018 	movwne	r0, #24
    16e4:	01018289 	smlabbeq	r1, r9, r2, r8
    16e8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    16ec:	01133119 	tsteq	r3, r9, lsl r1
    16f0:	14000013 	strne	r0, [r0], #-19
    16f4:	01018289 	smlabbeq	r1, r9, r2, r8
    16f8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    16fc:	00133119 	andseq	r3, r3, r9, lsl r1
    1700:	000f1500 	andeq	r1, pc, r0, lsl #10
    1704:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1708:	34160000 	ldrcc	r0, [r6], #-0
    170c:	3a0e0300 	bcc	382314 <__Stack_Size+0x381f14>
    1710:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1714:	00170213 	andseq	r0, r7, r3, lsl r2
    1718:	00341700 	eorseq	r1, r4, r0, lsl #14
    171c:	0b3a0e03 	bleq	e84f30 <__Stack_Size+0xe84b30>
    1720:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1724:	00001802 	andeq	r1, r0, r2, lsl #16
    1728:	01828918 	orreq	r8, r2, r8, lsl r9
    172c:	31011101 	tstcc	r1, r1, lsl #2
    1730:	19000013 	stmdbne	r0, {r0, r1, r4}
    1734:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1738:	0b3b0b3a 	bleq	ec4428 <__Stack_Size+0xec4028>
    173c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1740:	341a0000 	ldrcc	r0, [sl], #-0
    1744:	3a0e0300 	bcc	38234c <__Stack_Size+0x381f4c>
    1748:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    174c:	00170213 	andseq	r0, r7, r3, lsl r2
    1750:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    1754:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1758:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    175c:	01111927 	tsteq	r1, r7, lsr #18
    1760:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1764:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1768:	1c000013 	stcne	0, cr0, [r0], {19}
    176c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1770:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1774:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1778:	051d0000 	ldreq	r0, [sp, #-0]
    177c:	3a0e0300 	bcc	382384 <__Stack_Size+0x381f84>
    1780:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1784:	00170213 	andseq	r0, r7, r3, lsl r2
    1788:	00341e00 	eorseq	r1, r4, r0, lsl #28
    178c:	0b3a0e03 	bleq	e84fa0 <__Stack_Size+0xe84ba0>
    1790:	1349053b 	movtne	r0, #38203	; 0x953b
    1794:	00001802 	andeq	r1, r0, r2, lsl #16
    1798:	3f012e1f 	svccc	0x00012e1f
    179c:	3a0e0319 	bcc	382408 <__Stack_Size+0x382008>
    17a0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    17a4:	11134919 	tstne	r3, r9, lsl r9
    17a8:	40061201 	andmi	r1, r6, r1, lsl #4
    17ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    17b0:	00001301 	andeq	r1, r0, r1, lsl #6
    17b4:	03003420 	movweq	r3, #1056	; 0x420
    17b8:	3b0b3a0e 	blcc	2cfff8 <__Stack_Size+0x2cfbf8>
    17bc:	00134905 	andseq	r4, r3, r5, lsl #18
    17c0:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    17c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    17c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    17cc:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    17d0:	00001301 	andeq	r1, r0, r1, lsl #6
    17d4:	49000522 	stmdbmi	r0, {r1, r5, r8, sl}
    17d8:	00000013 	andeq	r0, r0, r3, lsl r0
    17dc:	10001101 	andne	r1, r0, r1, lsl #2
    17e0:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    17e4:	1b080301 	blne	2023f0 <__Stack_Size+0x201ff0>
    17e8:	13082508 	movwne	r2, #34056	; 0x8508
    17ec:	00000005 	andeq	r0, r0, r5
    17f0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    17f4:	030b130e 	movweq	r1, #45838	; 0xb30e
    17f8:	110e1b0e 	tstne	lr, lr, lsl #22
    17fc:	10061201 	andne	r1, r6, r1, lsl #4
    1800:	02000017 	andeq	r0, r0, #23
    1804:	0b0b0024 	bleq	2c189c <__Stack_Size+0x2c149c>
    1808:	0e030b3e 	vmoveq.16	d3[0], r0
    180c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    1810:	03193f01 	tsteq	r9, #1, 30
    1814:	3b0b3a0e 	blcc	2d0054 <__Stack_Size+0x2cfc54>
    1818:	1119270b 	tstne	r9, fp, lsl #14
    181c:	40061201 	andmi	r1, r6, r1, lsl #4
    1820:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1824:	00001301 	andeq	r1, r0, r1, lsl #6
    1828:	03003404 	movweq	r3, #1028	; 0x404
    182c:	3b0b3a0e 	blcc	2d006c <__Stack_Size+0x2cfc6c>
    1830:	0013490b 	andseq	r4, r3, fp, lsl #18
    1834:	00340500 	eorseq	r0, r4, r0, lsl #10
    1838:	0b3a0e03 	bleq	e8504c <__Stack_Size+0xe84c4c>
    183c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1840:	00001702 	andeq	r1, r0, r2, lsl #14
    1844:	01828906 	orreq	r8, r2, r6, lsl #18
    1848:	31011100 	mrscc	r1, (UNDEF: 17)
    184c:	07000013 	smladeq	r0, r3, r0, r0
    1850:	0b0b000f 	bleq	2c1894 <__Stack_Size+0x2c1494>
    1854:	00001349 	andeq	r1, r0, r9, asr #6
    1858:	03003408 	movweq	r3, #1032	; 0x408
    185c:	3b0b3a0e 	blcc	2d009c <__Stack_Size+0x2cfc9c>
    1860:	3f13490b 	svccc	0x0013490b
    1864:	00193c19 	andseq	r3, r9, r9, lsl ip
    1868:	00340900 	eorseq	r0, r4, r0, lsl #18
    186c:	0b3a0e03 	bleq	e85080 <__Stack_Size+0xe84c80>
    1870:	193f0b3b 	ldmdbne	pc!, {r0, r1, r3, r4, r5, r8, r9, fp}	; <UNPREDICTABLE>
    1874:	0000193c 	andeq	r1, r0, ip, lsr r9
    1878:	4901010a 	stmdbmi	r1, {r1, r3, r8}
    187c:	00130113 	andseq	r0, r3, r3, lsl r1
    1880:	00210b00 	eoreq	r0, r1, r0, lsl #22
    1884:	0b2f1349 	bleq	bc65b0 <__Stack_Size+0xbc61b0>
    1888:	150c0000 	strne	r0, [ip, #-0]
    188c:	00192700 	andseq	r2, r9, r0, lsl #14
    1890:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1894:	0b3a0e03 	bleq	e850a8 <__Stack_Size+0xe84ca8>
    1898:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    189c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    18a0:	260e0000 	strcs	r0, [lr], -r0
    18a4:	00134900 	andseq	r4, r3, r0, lsl #18
    18a8:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    18ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    18b0:	0b3b0b3a 	bleq	ec45a0 <__Stack_Size+0xec41a0>
    18b4:	13491927 	movtne	r1, #39207	; 0x9927
    18b8:	0000193c 	andeq	r1, r0, ip, lsr r9
    18bc:	0b002410 	bleq	a904 <__Stack_Size+0xa504>
    18c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    18c4:	00000008 	andeq	r0, r0, r8

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000435 	andeq	r0, r0, r5, lsr r4
       4:	01170002 	tsteq	r7, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	41010000 	mrsmi	r0, (UNDEF: 1)
      1c:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
      20:	73006372 	movwvc	r6, #882	; 0x372
      24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      2c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      34:	50504100 	subspl	r4, r0, r0, lsl #2
      38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      3c:	616d0000 	cmnvs	sp, r0
      40:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
      44:	00000100 	andeq	r0, r0, r0, lsl #2
      48:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      4c:	30316632 	eorscc	r6, r1, r2, lsr r6
      50:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      54:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
      58:	00000200 	andeq	r0, r0, r0, lsl #4
      5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      60:	30316632 	eorscc	r6, r1, r2, lsr r6
      64:	616d5f78 	smcvs	54776	; 0xd5f8
      68:	00682e70 	rsbeq	r2, r8, r0, ror lr
      6c:	73000002 	movwvc	r0, #2
      70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      74:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      78:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
      7c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
      80:	73000002 	movwvc	r0, #2
      84:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      88:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      8c:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
      90:	00682e63 	rsbeq	r2, r8, r3, ror #28
      94:	73000002 	movwvc	r0, #2
      98:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      9c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      a0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
      a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      a8:	74730000 	ldrbtvc	r0, [r3], #-0
      ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      b0:	5f783031 	svcpl	0x00783031
      b4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
      b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
      bc:	73000002 	movwvc	r0, #2
      c0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      c4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      c8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
      cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      d0:	74730000 	ldrbtvc	r0, [r3], #-0
      d4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      d8:	5f783031 	svcpl	0x00783031
      dc:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
      e0:	00020068 	andeq	r0, r2, r8, rrx
      e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
      e8:	31663233 	cmncc	r6, r3, lsr r2
      ec:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
      f0:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
      f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      f8:	79640000 	stmdbvc	r4!, {}^	; <UNPREDICTABLE>
      fc:	696d616e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     100:	2e6c6578 	mcrcs	5, 3, r6, cr12, cr8, {3}
     104:	00030068 	andeq	r0, r3, r8, rrx
     108:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     10c:	31663233 	cmncc	r6, r3, lsr r2
     110:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
     114:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     118:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     11c:	00000200 	andeq	r0, r0, r0, lsl #4
     120:	02050000 	andeq	r0, r5, #0
     124:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     128:	0105a903 	tsteq	r5, r3, lsl #18
     12c:	304d3123 	subcc	r3, sp, r3, lsr #2
     130:	2803221e 	stmdacs	r3, {r1, r2, r3, r4, r9, sp}
     134:	2d4d5b20 	vstrcs	d21, [sp, #-128]	; 0xffffff80
     138:	3f3c5603 	svccc	0x003c5603
     13c:	4d3f3f3f 	ldcmi	15, cr3, [pc, #-252]!	; 48 <_Minimum_Stack_Size-0xb8>
     140:	04020069 	streq	r0, [r2], #-105	; 0x69
     144:	005d3f01 	subseq	r3, sp, r1, lsl #30
     148:	3f010402 	svccc	0x00010402
     14c:	28741803 	ldmdacs	r4!, {r0, r1, fp, ip}^
     150:	1d224e6a 	stcne	14, cr4, [r2, #-424]!	; 0xfffffe58
     154:	2f2f1c24 	svccs	0x002f1c24
     158:	24312f2f 	ldrtcs	r2, [r1], #-3887	; 0xf2f
     15c:	2f2f2f1c 	svccs	0x002f2f1c
     160:	0a032f2f 	beq	cbe24 <__Stack_Size+0xcba24>
     164:	7a03282e 	bvc	ca224 <__Stack_Size+0xc9e24>
     168:	3c090320 	stccc	3, cr0, [r9], {32}
     16c:	21207a03 			; <UNDEFINED> instruction: 0x21207a03
     170:	2f2b2121 	svccs	0x002b2121
     174:	30302f2f 	eorscc	r2, r0, pc, lsr #30
     178:	302f2f3a 	eorcc	r2, pc, sl, lsr pc	; <UNPREDICTABLE>
     17c:	2d211f4d 	stccs	15, cr1, [r1, #-308]!	; 0xfffffecc
     180:	4b30302d 	blmi	c0c23c <__Stack_Size+0xc0be3c>
     184:	034b4b4c 	movteq	r4, #47948	; 0xbb4c
     188:	6a137437 	bvs	4dd26c <__Stack_Size+0x4dce6c>
     18c:	40138613 	andsmi	r8, r3, r3, lsl r6
     190:	4b212077 	blmi	848374 <__Stack_Size+0x847f74>
     194:	0402004c 	streq	r0, [r2], #-76	; 0x4c
     198:	4c684b01 	stclmi	11, cr4, [r8], #-4
     19c:	5b17862d 	blpl	5e1a58 <__Stack_Size+0x5e1658>
     1a0:	da034d3d 	ble	d369c <__Stack_Size+0xd329c>
     1a4:	1f134a00 	svcne	0x00134a00
     1a8:	04020021 	streq	r0, [r2], #-33	; 0x21
     1ac:	03673d01 	cmneq	r7, #1, 26	; 0x40
     1b0:	3d2f3c63 	stccc	12, cr3, [pc, #-396]!	; 2c <_Minimum_Stack_Size-0xd4>
     1b4:	79bf033d 	ldmibvc	pc!, {r0, r2, r3, r4, r5, r8, r9}	; <UNPREDICTABLE>
     1b8:	4b212020 	blmi	848240 <__Stack_Size+0x847e40>
     1bc:	2d30592f 	ldccs	9, cr5, [r0, #-188]!	; 0xffffff44
     1c0:	4b21206c 	blmi	848378 <__Stack_Size+0x847f78>
     1c4:	2d30672f 	ldccs	7, cr6, [r0, #-188]!	; 0xffffff44
     1c8:	6605f303 	strvs	pc, [r5], -r3, lsl #6
     1cc:	32328513 	eorscc	r8, r2, #79691776	; 0x4c00000
     1d0:	32323232 	eorscc	r3, r2, #536870915	; 0x20000003
     1d4:	59212708 	stmdbpl	r1!, {r3, r8, r9, sl, sp}
     1d8:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     1dc:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     1e0:	5a3e593e 	bpl	f966e0 <__Stack_Size+0xf962e0>
     1e4:	0810032d 	ldmdaeq	r0, {r0, r2, r3, r5, r8, r9}
     1e8:	3d232020 	stccc	0, cr2, [r3, #-128]!	; 0xffffff80
     1ec:	2f2d3e21 	svccs	0x002d3e21
     1f0:	2d3e212f 	ldfcss	f2, [lr, #-188]!	; 0xffffff44
     1f4:	202e7003 	eorcs	r7, lr, r3
     1f8:	2d213d21 	stccs	13, cr3, [r1, #-132]!	; 0xffffff7c
     1fc:	2e79d303 	cdpcs	3, 7, cr13, cr9, cr3, {0}
     200:	3d251e14 	stccc	14, cr1, [r5, #-80]!	; 0xffffffb0
     204:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
     208:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 188 <_Minimum_Stack_Size+0x88>
     20c:	3f2f208a 	svccc	0x002f208a
     210:	2f593e24 	svccs	0x00593e24
     214:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     218:	21892c3f 	orrcs	r2, r9, pc, lsr ip
     21c:	211f2f4b 	tstcs	pc, fp, asr #30
     220:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 1a0 <_Minimum_Stack_Size+0xa0>
     224:	2f4b2188 	svccs	0x004b2188
     228:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     22c:	208a2c3f 	addcs	r2, sl, pc, lsr ip
     230:	1f2f4b21 	svcne	0x002f4b21
     234:	3f3d2221 	svccc	0x003d2221
     238:	9009032c 	andls	r0, r9, ip, lsr #6
     23c:	2f4b2120 	svccs	0x004b2120
     240:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     244:	0b032c3f 	bleq	cb348 <__Stack_Size+0xcaf48>
     248:	4b212090 	blmi	848490 <__Stack_Size+0x848090>
     24c:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     250:	032b403d 			; <UNDEFINED> instruction: 0x032b403d
     254:	21209009 			; <UNDEFINED> instruction: 0x21209009
     258:	211f2f4b 	tstcs	pc, fp, asr #30
     25c:	2b403d22 	blcs	100f6ec <__Stack_Size+0x100f2ec>
     260:	4b212097 	blmi	8484c4 <__Stack_Size+0x8480c4>
     264:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     268:	972c3f3d 			; <UNDEFINED> instruction: 0x972c3f3d
     26c:	2f4b2120 	svccs	0x004b2120
     270:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     274:	20972c3f 	addscs	r2, r7, pc, lsr ip
     278:	1f2f4b21 	svcne	0x002f4b21
     27c:	3f3d2221 	svccc	0x003d2221
     280:	2120982c 			; <UNDEFINED> instruction: 0x2120982c
     284:	211f2f4b 	tstcs	pc, fp, asr #30
     288:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 208 <_Minimum_Stack_Size+0x108>
     28c:	4b212097 	blmi	8484f0 <__Stack_Size+0x8480f0>
     290:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     294:	972c3f3d 			; <UNDEFINED> instruction: 0x972c3f3d
     298:	2f4b2120 	svccs	0x004b2120
     29c:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     2a0:	20972c3f 	addscs	r2, r7, pc, lsr ip
     2a4:	1f2f4b21 	svcne	0x002f4b21
     2a8:	3f3d2221 	svccc	0x003d2221
     2ac:	2120962c 			; <UNDEFINED> instruction: 0x2120962c
     2b0:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
     2b4:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 234 <_Minimum_Stack_Size+0x134>
     2b8:	2b594087 	blcs	16504dc <__Stack_Size+0x16500dc>
     2bc:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     2c0:	322004c3 	eorcc	r0, r0, #-1023410176	; 0xc3000000
     2c4:	2f4d3e3d 	svccs	0x004d3e3d
     2c8:	2f2f3724 	svccs	0x002f3724
     2cc:	7a31302f 	bvc	c4c390 <__Stack_Size+0xc4bf90>
     2d0:	2c221e22 	stccs	14, cr1, [r2], #-136	; 0xffffff78
     2d4:	312f2f2b 			; <UNDEFINED> instruction: 0x312f2f2b
     2d8:	59695b2f 	stmdbpl	r9!, {r0, r1, r2, r3, r5, r8, r9, fp, ip, lr}^
     2dc:	5a68215b 	bpl	1a08850 <__Stack_Size+0x1a08450>
     2e0:	922f1f59 	eorls	r1, pc, #356	; 0x164
     2e4:	6721a43d 			; <UNDEFINED> instruction: 0x6721a43d
     2e8:	4e221608 	cfmadda32mi	mvax0, mvax1, mvfx2, mvfx8
     2ec:	4b13402d 	blmi	4d03a8 <__Stack_Size+0x4cffa8>
     2f0:	3e222086 	cdpcc	0, 2, cr2, cr2, cr6, {4}
     2f4:	01040200 	mrseq	r0, R12_usr
     2f8:	214c4d3e 	cmpcs	ip, lr, lsr sp
     2fc:	7aed032d 	bvc	ffb40fb8 <SCS_BASE+0x1fb32fb8>
     300:	1d312058 	ldcne	0, cr2, [r1, #-352]!	; 0xfffffea0
     304:	004c2f23 	subeq	r2, ip, r3, lsr #30
     308:	06010402 	streq	r0, [r1], -r2, lsl #8
     30c:	04020020 	streq	r0, [r2], #-32
     310:	002f0603 	eoreq	r0, pc, r3, lsl #12
     314:	3b030402 	blcc	c1324 <__Stack_Size+0xc0f24>
     318:	032b2333 			; <UNDEFINED> instruction: 0x032b2333
     31c:	213c0193 			; <UNDEFINED> instruction: 0x213c0193
     320:	59593d59 	ldmdbpl	r9, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
     324:	594b673e 	stmdbpl	fp, {r1, r2, r3, r4, r5, r8, r9, sl, sp, lr}^
     328:	3d59593d 	ldclcc	9, cr5, [r9, #-244]	; 0xffffff0c
     32c:	204f2d68 	subcs	r2, pc, r8, ror #26
     330:	03040200 	movweq	r0, #16896	; 0x4200
     334:	04020024 	streq	r0, [r2], #-36	; 0x24
     338:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     33c:	003d0304 	eorseq	r0, sp, r4, lsl #6
     340:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     344:	03040200 	movweq	r0, #16896	; 0x4200
     348:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     34c:	02005903 	andeq	r5, r0, #49152	; 0xc000
     350:	00590304 	subseq	r0, r9, r4, lsl #6
     354:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     358:	03040200 	movweq	r0, #16896	; 0x4200
     35c:	04020059 	streq	r0, [r2], #-89	; 0x59
     360:	02005903 	andeq	r5, r0, #49152	; 0xc000
     364:	003e0304 	eorseq	r0, lr, r4, lsl #6
     368:	59030402 	stmdbpl	r3, {r1, sl}
     36c:	03040200 	movweq	r0, #16896	; 0x4200
     370:	04020059 	streq	r0, [r2], #-89	; 0x59
     374:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     378:	00590304 	subseq	r0, r9, r4, lsl #6
     37c:	59030402 	stmdbpl	r3, {r1, sl}
     380:	03040200 	movweq	r0, #16896	; 0x4200
     384:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     388:	02005903 	andeq	r5, r0, #49152	; 0xc000
     38c:	00590304 	subseq	r0, r9, r4, lsl #6
     390:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     394:	03040200 	movweq	r0, #16896	; 0x4200
     398:	04020059 	streq	r0, [r2], #-89	; 0x59
     39c:	02005903 	andeq	r5, r0, #49152	; 0xc000
     3a0:	003e0304 	eorseq	r0, lr, r4, lsl #6
     3a4:	59030402 	stmdbpl	r3, {r1, sl}
     3a8:	03040200 	movweq	r0, #16896	; 0x4200
     3ac:	04020059 	streq	r0, [r2], #-89	; 0x59
     3b0:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     3b4:	003d0304 	eorseq	r0, sp, r4, lsl #6
     3b8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     3bc:	03040200 	movweq	r0, #16896	; 0x4200
     3c0:	033c5b03 	teqeq	ip, #3072	; 0xc00
     3c4:	ab032e27 	blge	cbc68 <__Stack_Size+0xcb868>
     3c8:	404eba01 	submi	fp, lr, r1, lsl #20
     3cc:	2f2f2f3d 	svccs	0x002f2f3d
     3d0:	2231251b 	eorscs	r2, r1, #113246208	; 0x6c00000
     3d4:	6a4d3e3d 	bvs	134fcd0 <__Stack_Size+0x134f8d0>
     3d8:	3e3d3031 	mrccc	0, 1, r3, cr13, cr1, {1}
     3dc:	d7034c51 	smlsdle	r3, r1, ip, r4
     3e0:	3122747d 			; <UNDEFINED> instruction: 0x3122747d
     3e4:	30303031 	eorscc	r3, r0, r1, lsr r0
     3e8:	032d3d4b 			; <UNDEFINED> instruction: 0x032d3d4b
     3ec:	014a01e9 	smlaltteq	r0, sl, r9, r1
     3f0:	02950321 	addseq	r0, r5, #-2080374784	; 0x84000000
     3f4:	166a133c 			; <UNDEFINED> instruction: 0x166a133c
     3f8:	00070240 	andeq	r0, r7, r0, asr #4
     3fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     400:	005d9802 	subseq	r9, sp, r2, lsl #16
     404:	03c10308 	biceq	r0, r1, #8, 6	; 0x20000000
     408:	0e032401 	cdpeq	4, 0, cr2, cr3, cr1, {0}
     40c:	4b3f3d2e 	blmi	fcf8cc <__Stack_Size+0xfcf4cc>
     410:	304a0903 	subcc	r0, sl, r3, lsl #18
     414:	3e595935 	mrccc	9, 2, r5, cr9, cr5, {1}
     418:	09034d5b 	stmdbeq	r3, {r0, r1, r3, r4, r6, r8, sl, fp, lr}
     41c:	5959594a 	ldmdbpl	r9, {r1, r3, r6, r8, fp, ip, lr}^
     420:	3d5a5959 	ldclcc	9, cr5, [sl, #-356]	; 0xfffffe9c
     424:	5952404b 	ldmdbpl	r2, {r0, r1, r3, r6, lr}^
     428:	4b593d59 	blmi	164f994 <__Stack_Size+0x164f594>
     42c:	414b3d5a 	cmpmi	fp, sl, asr sp
     430:	4a70032f 	bmi	1c010f4 <__Stack_Size+0x1c00cf4>
     434:	01001402 	tsteq	r0, r2, lsl #8
     438:	00012501 	andeq	r2, r1, r1, lsl #10
     43c:	2d000200 	sfmcs	f0, 4, [r0, #-0]
     440:	02000000 	andeq	r0, r0, #0
     444:	0d0efb01 	vstreq	d15, [lr, #-4]
     448:	01010100 	mrseq	r0, (UNDEF: 17)
     44c:	00000001 	andeq	r0, r0, r1
     450:	01000001 	tsteq	r0, r1
     454:	2f505041 	svccs	0x00505041
     458:	00637273 	rsbeq	r7, r3, r3, ror r2
     45c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     460:	31663233 	cmncc	r6, r3, lsr r2
     464:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     468:	00632e74 	rsbeq	r2, r3, r4, ror lr
     46c:	00000001 	andeq	r0, r0, r1
     470:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     474:	0308003c 	movweq	r0, #32828	; 0x803c
     478:	0b030123 	bleq	c090c <__Stack_Size+0xc050c>
     47c:	04020020 	streq	r0, [r2], #-32
     480:	0b031601 	bleq	c5c8c <__Stack_Size+0xc588c>
     484:	04020020 	streq	r0, [r2], #-32
     488:	0b031601 	bleq	c5c94 <__Stack_Size+0xc5894>
     48c:	04020020 	streq	r0, [r2], #-32
     490:	0b031601 	bleq	c5c9c <__Stack_Size+0xc589c>
     494:	04020020 	streq	r0, [r2], #-32
     498:	0b031601 	bleq	c5ca4 <__Stack_Size+0xc58a4>
     49c:	200b0320 	andcs	r0, fp, r0, lsr #6
     4a0:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4a4:	0313200b 	tsteq	r3, #11
     4a8:	0b032e0b 	bleq	cbcdc <__Stack_Size+0xcb8dc>
     4ac:	200b0320 	andcs	r0, fp, r0, lsr #6
     4b0:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4b4:	0b03200b 	bleq	c84e8 <__Stack_Size+0xc80e8>
     4b8:	200b0320 	andcs	r0, fp, r0, lsr #6
     4bc:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4c0:	0b03200b 	bleq	c84f4 <__Stack_Size+0xc80f4>
     4c4:	200b0320 	andcs	r0, fp, r0, lsr #6
     4c8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4cc:	0b03200b 	bleq	c8500 <__Stack_Size+0xc8100>
     4d0:	200b0320 	andcs	r0, fp, r0, lsr #6
     4d4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4d8:	0b03200b 	bleq	c850c <__Stack_Size+0xc810c>
     4dc:	200c0320 	andcs	r0, ip, r0, lsr #6
     4e0:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     4e4:	0b03200c 	bleq	c851c <__Stack_Size+0xc811c>
     4e8:	200b0320 	andcs	r0, fp, r0, lsr #6
     4ec:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4f0:	0c03200b 	stceq	0, cr2, [r3], {11}
     4f4:	200c0320 	andcs	r0, ip, r0, lsr #6
     4f8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     4fc:	0313200b 	tsteq	r3, #11
     500:	0b032e0b 	bleq	cbd34 <__Stack_Size+0xcb934>
     504:	200b0320 	andcs	r0, fp, r0, lsr #6
     508:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     50c:	0b03200b 	bleq	c8540 <__Stack_Size+0xc8140>
     510:	200b0320 	andcs	r0, fp, r0, lsr #6
     514:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     518:	0313200b 	tsteq	r3, #11
     51c:	0b032e0b 	bleq	cbd50 <__Stack_Size+0xcb950>
     520:	200b0320 	andcs	r0, fp, r0, lsr #6
     524:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     528:	0b03200b 	bleq	c855c <__Stack_Size+0xc815c>
     52c:	200c0320 	andcs	r0, ip, r0, lsr #6
     530:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     534:	0b03200b 	bleq	c8568 <__Stack_Size+0xc8168>
     538:	200b0320 	andcs	r0, fp, r0, lsr #6
     53c:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     540:	0b03200b 	bleq	c8574 <__Stack_Size+0xc8174>
     544:	200b0320 	andcs	r0, fp, r0, lsr #6
     548:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     54c:	0b03200b 	bleq	c8580 <__Stack_Size+0xc8180>
     550:	200b0320 	andcs	r0, fp, r0, lsr #6
     554:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     558:	0c03200b 	stceq	0, cr2, [r3], {11}
     55c:	00010220 	andeq	r0, r1, r0, lsr #4
     560:	00620101 	rsbeq	r0, r2, r1, lsl #2
     564:	00020000 	andeq	r0, r2, r0
     568:	00000028 	andeq	r0, r0, r8, lsr #32
     56c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     570:	0101000d 	tsteq	r1, sp
     574:	00000101 	andeq	r0, r0, r1, lsl #2
     578:	00000100 	andeq	r0, r0, r0, lsl #2
     57c:	50504101 	subspl	r4, r0, r1, lsl #2
     580:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     584:	78640000 	stmdavc	r4!, {}^	; <UNPREDICTABLE>
     588:	61685f6c 	cmnvs	r8, ip, ror #30
     58c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     590:	00000001 	andeq	r0, r0, r1
     594:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     598:	1608003c 			; <UNDEFINED> instruction: 0x1608003c
     59c:	16313e26 	ldrtne	r3, [r1], -r6, lsr #28
     5a0:	20321532 	eorscs	r1, r2, r2, lsr r5
     5a4:	04020035 	streq	r0, [r2], #-53	; 0x35
     5a8:	003c0601 	eorseq	r0, ip, r1, lsl #12
     5ac:	06030402 	streq	r0, [r3], -r2, lsl #8
     5b0:	20315b2f 	eorscs	r5, r1, pc, lsr #22
     5b4:	04020035 	streq	r0, [r2], #-53	; 0x35
     5b8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     5bc:	315d4b30 	cmpcc	sp, r0, lsr fp
     5c0:	02164e17 	andseq	r4, r6, #368	; 0x170
     5c4:	01010002 	tsteq	r1, r2
     5c8:	00000154 	andeq	r0, r0, r4, asr r1
     5cc:	003f0002 	eorseq	r0, pc, r2
     5d0:	01020000 	mrseq	r0, (UNDEF: 2)
     5d4:	000d0efb 	strdeq	r0, [sp], -fp
     5d8:	01010101 	tsteq	r1, r1, lsl #2
     5dc:	01000000 	mrseq	r0, (UNDEF: 0)
     5e0:	41010000 	mrsmi	r0, (UNDEF: 1)
     5e4:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
     5e8:	41006372 	tstmi	r0, r2, ror r3
     5ec:	692f5050 	stmdbvs	pc!, {r4, r6, ip, lr}	; <UNPREDICTABLE>
     5f0:	0000636e 	andeq	r6, r0, lr, ror #6
     5f4:	616e7964 	cmnvs	lr, r4, ror #18
     5f8:	6578696d 	ldrbvs	r6, [r8, #-2413]!	; 0x96d
     5fc:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     600:	64000001 	strvs	r0, [r0], #-1
     604:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     608:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
     60c:	00000200 	andeq	r0, r0, r0, lsl #4
     610:	02050000 	andeq	r0, r5, #0
     614:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
     618:	24011303 	strcs	r1, [r1], #-771	; 0x303
     61c:	3d5b221e 	lfmcc	f2, 2, [fp, #-120]	; 0xffffff88
     620:	32138541 	andscc	r8, r3, #272629760	; 0x10400000
     624:	221e5125 	andscs	r5, lr, #1073741833	; 0x40000009
     628:	3d22221e 	sfmcc	f2, 4, [r2, #-120]!	; 0xffffff88
     62c:	3550232f 	ldrbcc	r2, [r0, #-815]	; 0x32f
     630:	03211e22 			; <UNDEFINED> instruction: 0x03211e22
     634:	02002062 	andeq	r2, r0, #98	; 0x62
     638:	1f030104 	svcne	0x00030104
     63c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     640:	22594b03 	subscs	r4, r9, #3072	; 0xc00
     644:	3150301e 	cmpcc	r0, lr, lsl r0
     648:	2f3f4c4b 	svccs	0x003f4c4b
     64c:	1e302f40 	cdpne	15, 3, cr2, cr0, cr0, {2}
     650:	24783022 	ldrbtcs	r3, [r8], #-34	; 0x22
     654:	30334c5b 	eorscc	r4, r3, fp, asr ip
     658:	3db23f2f 	ldccc	15, cr3, [r2, #188]!	; 0xbc
     65c:	2f1f212d 	svccs	0x001f212d
     660:	033d4e22 	teqeq	sp, #544	; 0x220
     664:	7c312e19 	ldcvc	14, cr2, [r1], #-100	; 0xffffff9c
     668:	2f585e03 	svccs	0x00585e03
     66c:	0334252f 	teqeq	r4, #197132288	; 0xbc00000
     670:	0326207a 			; <UNDEFINED> instruction: 0x0326207a
     674:	03303c7a 	teqeq	r0, #31232	; 0x7a00
     678:	a5459e09 	strbge	r9, [r5, #-3593]	; 0xe09
     67c:	82140359 	andshi	r0, r4, #1677721601	; 0x64000001
     680:	222f1f4b 	eorcs	r1, pc, #300	; 0x12c
     684:	212d3d4b 			; <UNDEFINED> instruction: 0x212d3d4b
     688:	6e032f1f 	mcrvs	15, 0, r2, cr3, cr15, {0}
     68c:	3c1a0320 	ldccc	3, cr0, [sl], {32}
     690:	03226791 			; <UNDEFINED> instruction: 0x03226791
     694:	3022c80c 	eorcc	ip, r2, ip, lsl #16
     698:	147a304f 	ldrbtne	r3, [sl], #-79	; 0x4f
     69c:	136a1369 	cmnne	sl, #-1543503871	; 0xa4000001
     6a0:	136a136a 	cmnne	sl, #-1476395007	; 0xa8000001
     6a4:	694e136a 	stmdbvs	lr, {r1, r3, r5, r6, r8, r9, ip}^
     6a8:	2f136914 	svccs	0x00136914
     6ac:	31301769 	teqcc	r0, r9, ror #14
     6b0:	3f183117 	svccc	0x00183117
     6b4:	04020013 	streq	r0, [r2], #-19
     6b8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     6bc:	221e2f31 	andscs	r2, lr, #49, 30	; 0xc4
     6c0:	00214e22 	eoreq	r4, r1, r2, lsr #28
     6c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     6c8:	3031062e 	eorscc	r0, r1, lr, lsr #12
     6cc:	22221c2f 	eorcs	r1, r2, #12032	; 0x2f00
     6d0:	135b3122 	cmpne	fp, #-2147483640	; 0x80000008
     6d4:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
     6d8:	20060104 	andcs	r0, r6, r4, lsl #2
     6dc:	1e233006 	cdpne	0, 2, cr3, cr3, cr6, {0}
     6e0:	22211d23 	eorcs	r1, r1, #2240	; 0x8c0
     6e4:	214e2d23 	cmpcs	lr, r3, lsr #26
     6e8:	01040200 	mrseq	r0, R12_usr
     6ec:	31062e06 	tstcc	r6, r6, lsl #28
     6f0:	241c2130 	ldrcs	r2, [ip], #-304	; 0x130
     6f4:	b503271e 	strlt	r2, [r3, #-1822]	; 0x71e
     6f8:	03302e7f 	teqeq	r0, #2032	; 0x7f0
     6fc:	4d4a00cc 	stclmi	0, cr0, [sl, #-816]	; 0xfffffcd0
     700:	00211f13 	eoreq	r1, r1, r3, lsl pc
     704:	06010402 	streq	r0, [r1], -r2, lsl #8
     708:	03330620 	teqeq	r3, #32, 12	; 0x2000000
     70c:	03207fbc 			; <UNDEFINED> instruction: 0x03207fbc
     710:	242e00c1 	strtcs	r0, [lr], #-193	; 0xc1
     714:	211c241d 	tstcs	ip, sp, lsl r4
     718:	022d2323 	eoreq	r2, sp, #-1946157056	; 0x8c000000
     71c:	01010005 	tsteq	r1, r5
     720:	00000206 	andeq	r0, r0, r6, lsl #4
     724:	00880002 	addeq	r0, r8, r2
     728:	01020000 	mrseq	r0, (UNDEF: 2)
     72c:	000d0efb 	strdeq	r0, [sp], -fp
     730:	01010101 	tsteq	r1, r1, lsl #2
     734:	01000000 	mrseq	r0, (UNDEF: 0)
     738:	73010000 	movwvc	r0, #4096	; 0x1000
     73c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     740:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     744:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     748:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     74c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     750:	31663233 	cmncc	r6, r3, lsr r2
     754:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     758:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     75c:	0000636e 	andeq	r6, r0, lr, ror #6
     760:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     764:	30316632 	eorscc	r6, r1, r2, lsr r6
     768:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     76c:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     770:	00010063 	andeq	r0, r1, r3, rrx
     774:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     778:	31663233 	cmncc	r6, r3, lsr r2
     77c:	745f7830 	ldrbvc	r7, [pc], #-2096	; 784 <__Stack_Size+0x384>
     780:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     784:	00020068 	andeq	r0, r2, r8, rrx
     788:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     78c:	31663233 	cmncc	r6, r3, lsr r2
     790:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 6d8 <__Stack_Size+0x2d8>
     794:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     798:	00000200 	andeq	r0, r0, r0, lsl #4
     79c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     7a0:	30316632 	eorscc	r6, r1, r2, lsr r6
     7a4:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     7a8:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     7ac:	00020068 	andeq	r0, r2, r8, rrx
     7b0:	05000000 	streq	r0, [r0, #-0]
     7b4:	0040d402 	subeq	sp, r0, r2, lsl #8
     7b8:	00d60308 	sbcseq	r0, r6, r8, lsl #6
     7bc:	03591701 	cmpeq	r9, #262144	; 0x40000
     7c0:	5917740e 	ldmdbpl	r7, {r1, r2, r3, sl, ip, sp, lr}
     7c4:	17740e03 	ldrbne	r0, [r4, -r3, lsl #28]!
     7c8:	740c0359 	strvc	r0, [ip], #-857	; 0x359
     7cc:	0b033d14 	bleq	cfc24 <__Stack_Size+0xcf824>
     7d0:	f6031490 			; <UNDEFINED> instruction: 0xf6031490
     7d4:	2f148203 	svccs	0x00148203
     7d8:	144a0a03 	strbne	r0, [sl], #-2563	; 0xa03
     7dc:	4a0b032f 	bmi	2c14a0 <__Stack_Size+0x2c10a0>
     7e0:	2e090315 	mcrcs	3, 0, r0, cr9, cr5, {0}
     7e4:	15660a03 	strbne	r0, [r6, #-2563]!	; 0xa03
     7e8:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
     7ec:	1d28660e 	stcne	6, cr6, [r8, #-56]!	; 0xffffffc8
     7f0:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
     7f4:	263e1874 			; <UNDEFINED> instruction: 0x263e1874
     7f8:	10032941 	andne	r2, r3, r1, asr #18
     7fc:	4a0f033c 	bmi	3c14f4 <__Stack_Size+0x3c10f4>
     800:	660c0317 			; <UNDEFINED> instruction: 0x660c0317
     804:	42425015 	submi	r5, r2, #21
     808:	344a7003 	strbcc	r7, [sl], #-3
     80c:	03201003 			; <UNDEFINED> instruction: 0x03201003
     810:	24203c0c 	strtcs	r3, [r0], #-3084	; 0xc0c
     814:	04020031 	streq	r0, [r2], #-49	; 0x31
     818:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     81c:	30201903 	eorcc	r1, r0, r3, lsl #18
     820:	2f746803 	svccs	0x00746803
     824:	b2035d33 	andlt	r5, r3, #3264	; 0xcc0
     828:	27202e7a 			; <UNDEFINED> instruction: 0x27202e7a
     82c:	2925314c 	stmdbcs	r5!, {r2, r3, r6, r8, ip, sp}
     830:	304d214b 	subcc	r2, sp, fp, asr #2
     834:	0c036b23 	stceq	11, cr6, [r3], {35}	; 0x23
     838:	314c244a 	cmpcc	ip, sl, asr #8
     83c:	4d4b2a24 	vstrmi	s5, [fp, #-144]	; 0xffffff70
     840:	036b2330 	cmneq	fp, #48, 6	; 0xc0000000
     844:	4c243c0c 	stcmi	12, cr3, [r4], #-48	; 0xffffffd0
     848:	78033631 	stmdavc	r3, {r0, r4, r5, r9, sl, ip, sp}
     84c:	4b3f212e 	blmi	fc8d0c <__Stack_Size+0xfc890c>
     850:	0331304d 	teqeq	r1, #77	; 0x4d
     854:	77033c09 	strvc	r3, [r3, -r9, lsl #24]
     858:	1d233120 	stfnes	f3, [r3, #-128]!	; 0xffffff80
     85c:	0a03313f 	beq	ccd60 <__Stack_Size+0xcc960>
     860:	036c232e 	cmneq	ip, #-1207959552	; 0xb8000000
     864:	2720740d 	strcs	r7, [r0, -sp, lsl #8]!
     868:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
     86c:	1b253230 	blne	94d134 <__Stack_Size+0x94cd34>
     870:	3230314c 	eorscc	r3, r0, #76, 2
     874:	3c0a0331 	stccc	3, cr0, [sl], {49}	; 0x31
     878:	0d036c23 	stceq	12, cr6, [r3, #-140]	; 0xffffff74
     87c:	0327204a 			; <UNDEFINED> instruction: 0x0327204a
     880:	30272079 	eorcc	r2, r7, r9, ror r0
     884:	4c1c2431 	cfldrsmi	mvf2, [ip], {49}	; 0x31
     888:	6b233022 	blvs	8cc918 <__Stack_Size+0x8cc518>
     88c:	204a0e03 	subcs	r0, sl, r3, lsl #28
     890:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     894:	33313026 	teqcc	r1, #38	; 0x26
     898:	243f211b 	ldrtcs	r2, [pc], #-283	; 8a0 <__Stack_Size+0x4a0>
     89c:	30233d1c 	eorcc	r3, r3, ip, lsl sp
     8a0:	14036b23 	strne	r6, [r3], #-2851	; 0xb23
     8a4:	0f032066 	svceq	0x00032066
     8a8:	77033e20 	strvc	r3, [r3, -r0, lsr #28]
     8ac:	200c032e 	andcs	r0, ip, lr, lsr #6
     8b0:	032e7503 			; <UNDEFINED> instruction: 0x032e7503
     8b4:	3d21200b 	stccc	0, cr2, [r1, #-44]!	; 0xffffffd4
     8b8:	033e1e22 	teqeq	lr, #544	; 0x220
     8bc:	15032072 	strne	r2, [r3, #-114]	; 0x72
     8c0:	1d23372e 	stcne	7, cr3, [r3, #-184]!	; 0xffffff48
     8c4:	033e3023 	teqeq	lr, #35	; 0x23
     8c8:	17032069 	strne	r2, [r3, -r9, rrx]
     8cc:	033f2320 	teqeq	pc, #32, 6	; 0x80000000
     8d0:	1c032e64 	stcne	14, cr2, [r3], {100}	; 0x64
     8d4:	6203302e 	andvs	r3, r3, #46	; 0x2e
     8d8:	201e0320 	andscs	r0, lr, r0, lsr #6
     8dc:	5d033f23 	stcpl	15, cr3, [r3, #-140]	; 0xffffff74
     8e0:	2023032e 	eorcs	r0, r3, lr, lsr #6
     8e4:	205b034c 	subscs	r0, fp, ip, asr #6
     8e8:	23202503 			; <UNDEFINED> instruction: 0x23202503
     8ec:	036b313f 	cmneq	fp, #-1073741809	; 0xc000000f
     8f0:	26207410 			; <UNDEFINED> instruction: 0x26207410
     8f4:	0335314c 	teqeq	r5, #76, 2
     8f8:	3e212e79 	mcrcc	14, 1, r2, cr1, cr9, {3}
     8fc:	31304d4b 	teqcc	r0, fp, asr #26
     900:	32225a5b 	eorcc	r5, r2, #372736	; 0x5b000
     904:	79314c32 	ldmdbvc	r1!, {r1, r4, r5, sl, fp, lr}
     908:	18036c23 	stmdane	r3, {r0, r1, r5, sl, fp, sp, lr}
     90c:	20090374 	andcs	r0, r9, r4, ror r3
     910:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
     914:	3f212009 	svccc	0x00212009
     918:	03207303 			; <UNDEFINED> instruction: 0x03207303
     91c:	31302e0d 	teqcc	r0, sp, lsl #28
     920:	233e3f76 	teqcs	lr, #472	; 0x1d8
     924:	0007026b 	andeq	r0, r7, fp, ror #4
     928:	017e0101 	cmneq	lr, r1, lsl #2
     92c:	00020000 	andeq	r0, r2, r0
     930:	00000099 	muleq	r0, r9, r0
     934:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     938:	0101000d 	tsteq	r1, sp
     93c:	00000101 	andeq	r0, r0, r1, lsl #2
     940:	00000100 	andeq	r0, r0, r0, lsl #2
     944:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     948:	31663233 	cmncc	r6, r3, lsr r2
     94c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     950:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     954:	73006372 	movwvc	r6, #882	; 0x372
     958:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     95c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     960:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     964:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     968:	74730000 	ldrbtvc	r0, [r3], #-0
     96c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     970:	5f783031 	svcpl	0x00783031
     974:	6f697067 	svcvs	0x00697067
     978:	0100632e 	tsteq	r0, lr, lsr #6
     97c:	74730000 	ldrbtvc	r0, [r3], #-0
     980:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     984:	5f783031 	svcpl	0x00783031
     988:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     98c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     990:	74730000 	ldrbtvc	r0, [r3], #-0
     994:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     998:	5f783031 	svcpl	0x00783031
     99c:	2e70616d 	rpwcssz	f6, f0, #5.0
     9a0:	00020068 	andeq	r0, r2, r8, rrx
     9a4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     9a8:	31663233 	cmncc	r6, r3, lsr r2
     9ac:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
     9b0:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     9b4:	00020068 	andeq	r0, r2, r8, rrx
     9b8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     9bc:	31663233 	cmncc	r6, r3, lsr r2
     9c0:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     9c4:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     9c8:	00000200 	andeq	r0, r0, r0, lsl #4
     9cc:	02050000 	andeq	r0, r5, #0
     9d0:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
     9d4:	24013303 	strcs	r3, [r1], #-771	; 0x303
     9d8:	032a4bf5 			; <UNDEFINED> instruction: 0x032a4bf5
     9dc:	034bac17 	movteq	sl, #48151	; 0xbc17
     9e0:	324b2e70 	subcc	r2, fp, #112, 28	; 0x700
     9e4:	034b324b 	movteq	r3, #45643	; 0xb24b
     9e8:	324b2e09 	subcc	r2, fp, #9, 28	; 0x90
     9ec:	7a034259 	bvc	d1358 <__Stack_Size+0xd0f58>
     9f0:	8212032e 	andshi	r0, r2, #-1207959552	; 0xb8000000
     9f4:	032d4c21 			; <UNDEFINED> instruction: 0x032d4c21
     9f8:	0a034a0f 	beq	d323c <__Stack_Size+0xd2e3c>
     9fc:	20760301 	rsbscs	r0, r6, r1, lsl #6
     a00:	25200c03 	strcs	r0, [r0, #-3075]!	; 0xc03
     a04:	20740333 	rsbscs	r0, r4, r3, lsr r3
     a08:	223e3335 	eorscs	r3, lr, #-738197504	; 0xd4000000
     a0c:	30303022 	eorscc	r3, r0, r2, lsr #32
     a10:	1d343d30 	ldcne	13, cr3, [r4, #-192]!	; 0xffffff40
     a14:	2233224d 	eorscs	r2, r3, #-805306364	; 0xd0000004
     a18:	02040200 	andeq	r0, r4, #0, 4
     a1c:	032e6603 			; <UNDEFINED> instruction: 0x032e6603
     a20:	30253c1f 	eorcc	r3, r5, pc, lsl ip
     a24:	2f303e21 	svccs	0x00303e21
     a28:	343d3030 	ldrtcc	r3, [sp], #-48	; 0x30
     a2c:	31224d1d 			; <UNDEFINED> instruction: 0x31224d1d
     a30:	04020022 	streq	r0, [r2], #-34	; 0x22
     a34:	2e690302 	cdpcs	3, 6, cr0, cr9, cr2, {0}
     a38:	033c1b03 	teqeq	ip, #3072	; 0xc00
     a3c:	3d142e0d 	ldccc	14, cr2, [r4, #-52]	; 0xffffffcc
     a40:	3c0d032f 	stccc	3, cr0, [sp], {47}	; 0x2f
     a44:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     a48:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     a4c:	2e0c0321 	cdpcs	3, 0, cr0, cr12, cr1, {1}
     a50:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     a54:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     a58:	2e0d0321 	cdpcs	3, 0, cr0, cr13, cr1, {1}
     a5c:	2e0e0317 	mcrcs	3, 0, r0, cr14, cr7, {0}
     a60:	2e110317 	mrccs	3, 0, r0, cr1, cr7, {0}
     a64:	03322218 	teqeq	r2, #24, 4	; 0x80000001
     a68:	03162e0e 	tsteq	r6, #14, 28	; 0xe0
     a6c:	30192e0e 	andscc	r2, r9, lr, lsl #28
     a70:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
     a74:	192e1003 	stmdbne	lr!, {r0, r1, ip}
     a78:	03305a30 	teqeq	r0, #48, 20	; 0x30000
     a7c:	0316580c 	tsteq	r6, #12, 16	; 0xc0000
     a80:	25276627 	strcs	r6, [r7, #-1575]!	; 0x627
     a84:	23222345 			; <UNDEFINED> instruction: 0x23222345
     a88:	284c2f1f 	stmdacs	ip, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}^
     a8c:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
     a90:	03207003 			; <UNDEFINED> instruction: 0x03207003
     a94:	4b342e0a 	blmi	d0c2c4 <__Stack_Size+0xd0bec4>
     a98:	034d2231 	movteq	r2, #53809	; 0xd231
     a9c:	03196610 	tsteq	r9, #16, 12	; 0x1000000
     aa0:	22278279 	eorcs	r8, r7, #-1879048185	; 0x90000007
     aa4:	023d301e 	eorseq	r3, sp, #30
     aa8:	01010005 	tsteq	r1, r5
     aac:	000001ce 	andeq	r0, r0, lr, asr #3
     ab0:	009a0002 	addseq	r0, sl, r2
     ab4:	01020000 	mrseq	r0, (UNDEF: 2)
     ab8:	000d0efb 	strdeq	r0, [sp], -fp
     abc:	01010101 	tsteq	r1, r1, lsl #2
     ac0:	01000000 	mrseq	r0, (UNDEF: 0)
     ac4:	73010000 	movwvc	r0, #4096	; 0x1000
     ac8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     acc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     ad0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     ad4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     ad8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     adc:	31663233 	cmncc	r6, r3, lsr r2
     ae0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     ae4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     ae8:	0000636e 	andeq	r6, r0, lr, ror #6
     aec:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     af0:	30316632 	eorscc	r6, r1, r2, lsr r6
     af4:	766e5f78 	uqsub16vc	r5, lr, r8
     af8:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
     afc:	00000100 	andeq	r0, r0, r0, lsl #2
     b00:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b04:	30316632 	eorscc	r6, r1, r2, lsr r6
     b08:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b0c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     b10:	00000200 	andeq	r0, r0, r0, lsl #4
     b14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b18:	30316632 	eorscc	r6, r1, r2, lsr r6
     b1c:	616d5f78 	smcvs	54776	; 0xd5f8
     b20:	00682e70 	rsbeq	r2, r8, r0, ror lr
     b24:	73000002 	movwvc	r0, #2
     b28:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b2c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b30:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     b34:	00682e63 	rsbeq	r2, r8, r3, ror #28
     b38:	63000002 	movwvs	r0, #2
     b3c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     b40:	5f336d78 	svcpl	0x00336d78
     b44:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     b48:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     b4c:	00000002 	andeq	r0, r0, r2
     b50:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
     b54:	03080047 	movweq	r0, #32839	; 0x8047
     b58:	21150124 	tstcs	r5, r4, lsr #2
     b5c:	2f2f4b2d 	svccs	0x002f4b2d
     b60:	04020030 	streq	r0, [r2], #-48	; 0x30
     b64:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
     b68:	002c0304 	eoreq	r0, ip, r4, lsl #6
     b6c:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
     b70:	03040200 	movweq	r0, #16896	; 0x4200
     b74:	0402001e 	streq	r0, [r2], #-30
     b78:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
     b7c:	242c0304 	strtcs	r0, [ip], #-772	; 0x304
     b80:	154a0b03 	strbne	r0, [sl, #-2819]	; 0xb03
     b84:	2f211e3e 	svccs	0x00211e3e
     b88:	3e232121 	sufccsp	f2, f3, f1
     b8c:	03213d21 			; <UNDEFINED> instruction: 0x03213d21
     b90:	03176617 	tsteq	r7, #24117248	; 0x1700000
     b94:	0a039e0e 	beq	e83d4 <__Stack_Size+0xe7fd4>
     b98:	20760301 	rsbscs	r0, r6, r1, lsl #6
     b9c:	232e0a03 			; <UNDEFINED> instruction: 0x232e0a03
     ba0:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
     ba4:	313d1c24 	teqcc	sp, r4, lsr #24
     ba8:	2c95312c 	ldfcss	f3, [r5], {44}	; 0x2c
     bac:	242b241f 	strtcs	r2, [fp], #-1055	; 0x41f
     bb0:	3122212f 			; <UNDEFINED> instruction: 0x3122212f
     bb4:	49211f21 	stmdbmi	r1!, {r0, r5, r8, r9, sl, fp, ip}
     bb8:	03492150 	movteq	r2, #37200	; 0x9150
     bbc:	2f149e0e 	svccs	0x00149e0e
     bc0:	0b032121 	bleq	c904c <__Stack_Size+0xc8c4c>
     bc4:	0b03132e 	bleq	c5884 <__Stack_Size+0xc5484>
     bc8:	0b03132e 	bleq	c5888 <__Stack_Size+0xc5488>
     bcc:	0b03132e 	bleq	c588c <__Stack_Size+0xc548c>
     bd0:	0d03132e 	stceq	3, cr1, [r3, #-184]	; 0xffffff48
     bd4:	0b03162e 	bleq	c6494 <__Stack_Size+0xc6094>
     bd8:	0b03133c 	bleq	c58d0 <__Stack_Size+0xc54d0>
     bdc:	032f132e 			; <UNDEFINED> instruction: 0x032f132e
     be0:	4c19580b 	ldcmi	8, cr5, [r9], {11}
     be4:	03660903 	cmneq	r6, #49152	; 0xc000
     be8:	0316660a 	tsteq	r6, #10485760	; 0xa00000
     bec:	0316660b 	tsteq	r6, #11534336	; 0xb00000
     bf0:	2f13ba0c 	svccs	0x0013ba0c
     bf4:	19660b03 	stmdbne	r6!, {r0, r1, r8, r9, fp}^
     bf8:	6609034c 	strvs	r0, [r9], -ip, asr #6
     bfc:	13660b03 	cmnne	r6, #3072	; 0xc00
     c00:	4a10032f 	bmi	4018c4 <__Stack_Size+0x4014c4>
     c04:	9e0b0317 	mcrls	3, 0, r0, cr11, cr7, {0}
     c08:	820b0313 	andhi	r0, fp, #1275068416	; 0x4c000000
     c0c:	82120313 	andshi	r0, r2, #1275068416	; 0x4c000000
     c10:	32221e27 	eorcc	r1, r2, #624	; 0x270
     c14:	19741303 	ldmdbne	r4!, {r0, r1, r8, r9, ip}^
     c18:	0340225a 	movteq	r2, #602	; 0x25a
     c1c:	0903741a 	stmdbeq	r3, {r1, r3, r4, sl, ip, sp, lr}
     c20:	20770301 	rsbscs	r0, r7, r1, lsl #6
     c24:	4b200903 	blmi	803038 <__Stack_Size+0x802c38>
     c28:	253f1e31 	ldrcs	r1, [pc, #-3633]!	; fffffdff <SCS_BASE+0x1fff1dff>
     c2c:	2326702d 			; <UNDEFINED> instruction: 0x2326702d
     c30:	033d221e 	teqeq	sp, #-536870911	; 0xe0000001
     c34:	24242078 	strtcs	r2, [r4], #-120	; 0x78
     c38:	03661103 	cmneq	r6, #-1073741824	; 0xc0000000
     c3c:	301c010c 	andscc	r0, ip, ip, lsl #2
     c40:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     c44:	03740f03 	cmneq	r4, #3, 30
     c48:	301e0109 	andscc	r0, lr, r9, lsl #2
     c4c:	03900f03 	orrseq	r0, r0, #3, 30
     c50:	301e0109 	andscc	r0, lr, r9, lsl #2
     c54:	03901503 	orrseq	r1, r0, #12582912	; 0xc00000
     c58:	301c010c 	andscc	r0, ip, ip, lsl #2
     c5c:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     c60:	19741103 	ldmdbne	r4!, {r0, r1, r8, ip}^
     c64:	0330223f 	teqeq	r0, #-268435453	; 0xf0000003
     c68:	3d362e7a 	ldccc	14, cr2, [r6, #-488]!	; 0xfffffe18
     c6c:	23334022 	teqcs	r3, #34	; 0x22
     c70:	034a0f03 	movteq	r0, #44803	; 0xaf03
     c74:	32302009 	eorscc	r2, r0, #9
     c78:	00040223 	andeq	r0, r4, r3, lsr #4
     c7c:	00e70101 	rsceq	r0, r7, r1, lsl #2
     c80:	00020000 	andeq	r0, r2, r0
     c84:	00000098 	muleq	r0, r8, r0
     c88:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     c8c:	0101000d 	tsteq	r1, sp
     c90:	00000101 	andeq	r0, r0, r1, lsl #2
     c94:	00000100 	andeq	r0, r0, r0, lsl #2
     c98:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     c9c:	31663233 	cmncc	r6, r3, lsr r2
     ca0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     ca4:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     ca8:	73006372 	movwvc	r6, #882	; 0x372
     cac:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     cb0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     cb4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     cb8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     cbc:	74730000 	ldrbtvc	r0, [r3], #-0
     cc0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     cc4:	5f783031 	svcpl	0x00783031
     cc8:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
     ccc:	00010063 	andeq	r0, r1, r3, rrx
     cd0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     cd4:	31663233 	cmncc	r6, r3, lsr r2
     cd8:	745f7830 	ldrbvc	r7, [pc], #-2096	; ce0 <__Stack_Size+0x8e0>
     cdc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     ce0:	00020068 	andeq	r0, r2, r8, rrx
     ce4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     ce8:	31663233 	cmncc	r6, r3, lsr r2
     cec:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; c34 <__Stack_Size+0x834>
     cf0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     cf4:	00000200 	andeq	r0, r0, r0, lsl #4
     cf8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     cfc:	336d7865 	cmncc	sp, #6619136	; 0x650000
     d00:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
     d04:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     d08:	00000200 	andeq	r0, r0, r0, lsl #4
     d0c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d10:	30316632 	eorscc	r6, r1, r2, lsr r6
     d14:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     d18:	00682e63 	rsbeq	r2, r8, r3, ror #28
     d1c:	00000002 	andeq	r0, r0, r2
     d20:	c0020500 	andgt	r0, r2, r0, lsl #10
     d24:	0308004a 	movweq	r0, #32842	; 0x804a
     d28:	210100c3 	smlabtcs	r1, r3, r0, r0
     d2c:	0c032d5a 	stceq	13, cr2, [r3], {90}	; 0x5a
     d30:	0c031658 	stceq	6, cr1, [r3], {88}	; 0x58
     d34:	15031658 	strne	r1, [r3, #-1624]	; 0x658
     d38:	31311866 	teqcc	r1, r6, ror #16
     d3c:	580c0323 	stmdapl	ip, {r0, r1, r5, r8, r9}
     d40:	66140316 			; <UNDEFINED> instruction: 0x66140316
     d44:	200f031a 	andcs	r0, pc, sl, lsl r3	; <UNPREDICTABLE>
     d48:	23207103 			; <UNDEFINED> instruction: 0x23207103
     d4c:	5b233131 	blpl	8cd218 <__Stack_Size+0x8cce18>
     d50:	0c033323 	stceq	3, cr3, [r3], {35}	; 0x23
     d54:	4d5b1466 	cfldrdmi	mvd1, [fp, #-408]	; 0xfffffe68
     d58:	660f035b 			; <UNDEFINED> instruction: 0x660f035b
     d5c:	3c0b0318 	stccc	3, cr0, [fp], {24}
     d60:	16740d03 	ldrbtne	r0, [r4], -r3, lsl #26
     d64:	01000802 	tsteq	r0, r2, lsl #16
     d68:	00019c01 	andeq	r9, r1, r1, lsl #24
     d6c:	84000200 	strhi	r0, [r0], #-512	; 0x200
     d70:	02000000 	andeq	r0, r0, #0
     d74:	0d0efb01 	vstreq	d15, [lr, #-4]
     d78:	01010100 	mrseq	r0, (UNDEF: 17)
     d7c:	00000001 	andeq	r0, r0, r1
     d80:	01000001 	tsteq	r0, r1
     d84:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d88:	30316632 	eorscc	r6, r1, r2, lsr r6
     d8c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d90:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     d94:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     d98:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d9c:	5f783031 	svcpl	0x00783031
     da0:	2f62696c 	svccs	0x0062696c
     da4:	00636e69 	rsbeq	r6, r3, r9, ror #28
     da8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     dac:	31663233 	cmncc	r6, r3, lsr r2
     db0:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     db4:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     db8:	00000100 	andeq	r0, r0, r0, lsl #2
     dbc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     dc0:	30316632 	eorscc	r6, r1, r2, lsr r6
     dc4:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     dc8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     dcc:	00000200 	andeq	r0, r0, r0, lsl #4
     dd0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     dd4:	30316632 	eorscc	r6, r1, r2, lsr r6
     dd8:	616d5f78 	smcvs	54776	; 0xd5f8
     ddc:	00682e70 	rsbeq	r2, r8, r0, ror lr
     de0:	73000002 	movwvc	r0, #2
     de4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     de8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     dec:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     df0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     df4:	00000000 	andeq	r0, r0, r0
     df8:	4b880205 	blmi	fe201614 <SCS_BASE+0x1e1f3614>
     dfc:	fc030800 	stc2	8, cr0, [r3], {-0}
     e00:	5b140100 	blpl	501208 <__Stack_Size+0x500e08>
     e04:	4d4d694d 	stclmi	9, cr6, [sp, #-308]	; 0xfffffecc
     e08:	18741203 	ldmdane	r4!, {r0, r1, r9, ip}^
     e0c:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
     e10:	4f5c4d4d 	svcmi	0x005c4d4d
     e14:	18823503 	stmne	r2, {r0, r1, r8, sl, ip, sp}
     e18:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
     e1c:	03164a0e 	tsteq	r6, #57344	; 0xe000
     e20:	31196615 	tstcc	r9, r5, lsl r6
     e24:	0d03233f 	stceq	3, cr2, [r3, #-252]	; 0xffffff04
     e28:	0f03164a 	svceq	0x0003164a
     e2c:	31311866 	teqcc	r1, r6, ror #16
     e30:	580f0323 	stmdapl	pc, {r0, r1, r5, r8, r9}	; <UNPREDICTABLE>
     e34:	15032f13 	strne	r2, [r3, #-3859]	; 0xf13
     e38:	31311866 	teqcc	r1, r6, ror #16
     e3c:	58120323 	ldmdapl	r2, {r0, r1, r5, r8, r9}
     e40:	23313118 	teqcs	r1, #24, 2
     e44:	18581203 	ldmdane	r8, {r0, r1, r9, ip}^
     e48:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
     e4c:	1d284a14 	vstmdbne	r8!, {s8-s27}
     e50:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
     e54:	11031674 	tstne	r3, r4, ror r6
     e58:	31311866 	teqcc	r1, r6, ror #16
     e5c:	58100323 	ldmdapl	r0, {r0, r1, r5, r8, r9}
     e60:	7a033418 	bvc	cdec8 <__Stack_Size+0xcdac8>
     e64:	4e232320 	cdpmi	3, 2, cr2, cr3, cr0, {1}
     e68:	12032421 	andne	r2, r3, #553648128	; 0x21000000
     e6c:	12031658 	andne	r1, r3, #88, 12	; 0x5800000
     e70:	0e031766 	cdpeq	7, 0, cr1, cr3, cr6, {3}
     e74:	0c031682 	stceq	6, cr1, [r3], {130}	; 0x82
     e78:	241c1666 	ldrcs	r1, [ip], #-1638	; 0x666
     e7c:	2333513e 	teqcs	r3, #-2147483633	; 0x8000000f
     e80:	321c321e 	andscc	r3, ip, #-536870911	; 0xe0000001
     e84:	03323f27 	teqeq	r2, #39, 30	; 0x9c
     e88:	1f223c0c 	svcne	0x00223c0c
     e8c:	32214d32 	eorcc	r4, r1, #3200	; 0xc80
     e90:	3f32214d 	svccc	0x0032214d
     e94:	03312f21 	teqeq	r1, #33, 30	; 0x84
     e98:	1e27c816 	mcrne	8, 1, ip, cr7, cr6, {0}
     e9c:	16033222 	strne	r3, [r3], -r2, lsr #4
     ea0:	221e2774 	andscs	r2, lr, #116, 14	; 0x1d00000
     ea4:	74170332 	ldrvc	r0, [r7], #-818	; 0x332
     ea8:	32221e27 	eorcc	r1, r2, #624	; 0x270
     eac:	27741503 	ldrbcs	r1, [r4, -r3, lsl #10]!
     eb0:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
     eb4:	1e277416 	mcrne	4, 1, r7, cr7, cr6, {0}
     eb8:	0d033222 	sfmeq	f3, 4, [r3, #-136]	; 0xffffff78
     ebc:	0c031674 	stceq	6, cr1, [r3], {116}	; 0x74
     ec0:	11031666 	tstne	r3, r6, ror #12
     ec4:	17031766 	strne	r1, [r3, -r6, ror #14]
     ec8:	01090366 	tsteq	r9, r6, ror #6
     ecc:	22303e22 	eorscs	r3, r0, #544	; 0x220
     ed0:	0b032632 	bleq	ca7a0 <__Stack_Size+0xca3a0>
     ed4:	79c3034a 	stmibvc	r3, {r1, r3, r6, r8, r9}^
     ed8:	02002166 	andeq	r2, r0, #-2147483623	; 0x80000019
     edc:	00350204 	eorseq	r0, r5, r4, lsl #4
     ee0:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     ee4:	02040200 	andeq	r0, r4, #0, 4
     ee8:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     eec:	06200601 	strteq	r0, [r0], -r1, lsl #12
     ef0:	3c0a034d 	stccc	3, cr0, [sl], {77}	; 0x4d
     ef4:	6606b303 	strvs	fp, [r6], -r3, lsl #6
     ef8:	90120314 	andsls	r0, r2, r4, lsl r3
     efc:	3c0b0319 	stccc	3, cr0, [fp], {25}
     f00:	18741103 	ldmdane	r4!, {r0, r1, r8, ip}^
     f04:	01000602 	tsteq	r0, r2, lsl #12
     f08:	0000b101 	andeq	fp, r0, r1, lsl #2
     f0c:	75000200 	strvc	r0, [r0, #-512]	; 0x200
     f10:	02000000 	andeq	r0, r0, #0
     f14:	0d0efb01 	vstreq	d15, [lr, #-4]
     f18:	01010100 	mrseq	r0, (UNDEF: 17)
     f1c:	00000001 	andeq	r0, r0, r1
     f20:	01000001 	tsteq	r0, r1
     f24:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f28:	30316632 	eorscc	r6, r1, r2, lsr r6
     f2c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f30:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     f34:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     f38:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f3c:	5f783031 	svcpl	0x00783031
     f40:	2f62696c 	svccs	0x0062696c
     f44:	00636e69 	rsbeq	r6, r3, r9, ror #28
     f48:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     f4c:	31663233 	cmncc	r6, r3, lsr r2
     f50:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
     f54:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     f58:	632e6b63 			; <UNDEFINED> instruction: 0x632e6b63
     f5c:	00000100 	andeq	r0, r0, r0, lsl #2
     f60:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f64:	30316632 	eorscc	r6, r1, r2, lsr r6
     f68:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f6c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     f70:	00000200 	andeq	r0, r0, r0, lsl #4
     f74:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f78:	30316632 	eorscc	r6, r1, r2, lsr r6
     f7c:	616d5f78 	smcvs	54776	; 0xd5f8
     f80:	00682e70 	rsbeq	r2, r8, r0, ror lr
     f84:	00000002 	andeq	r0, r0, r2
     f88:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
     f8c:	0308004e 	movweq	r0, #32846	; 0x804e
     f90:	2224012b 	eorcs	r0, r4, #-1073741814	; 0xc000000a
     f94:	660d034e 	strvs	r0, [sp], -lr, asr #6
     f98:	660f0316 			; <UNDEFINED> instruction: 0x660f0316
     f9c:	304c3e16 	subcc	r3, ip, r6, lsl lr
     fa0:	660d035c 			; <UNDEFINED> instruction: 0x660d035c
     fa4:	40221e26 	eormi	r1, r2, r6, lsr #28
     fa8:	13660c03 	cmnne	r6, #768	; 0x300
     fac:	4a0e032f 	bmi	381c70 <__Stack_Size+0x381870>
     fb0:	3e010a03 	vmlacc.f32	s0, s2, s6
     fb4:	09032332 	stmdbeq	r3, {r1, r4, r5, r8, r9, sp}
     fb8:	0006022e 	andeq	r0, r6, lr, lsr #4
     fbc:	04d70101 	ldrbeq	r0, [r7], #257	; 0x101
     fc0:	00020000 	andeq	r0, r2, r0
     fc4:	00000097 	muleq	r0, r7, r0
     fc8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     fcc:	0101000d 	tsteq	r1, sp
     fd0:	00000101 	andeq	r0, r0, r1, lsl #2
     fd4:	00000100 	andeq	r0, r0, r0, lsl #2
     fd8:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     fdc:	31663233 	cmncc	r6, r3, lsr r2
     fe0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     fe4:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     fe8:	73006372 	movwvc	r6, #882	; 0x372
     fec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     ff0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     ff4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     ff8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ffc:	74730000 	ldrbtvc	r0, [r3], #-0
    1000:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1004:	5f783031 	svcpl	0x00783031
    1008:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
    100c:	00010063 	andeq	r0, r1, r3, rrx
    1010:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1014:	31663233 	cmncc	r6, r3, lsr r2
    1018:	745f7830 	ldrbvc	r7, [pc], #-2096	; 1020 <__Stack_Size+0xc20>
    101c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1020:	00020068 	andeq	r0, r2, r8, rrx
    1024:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1028:	31663233 	cmncc	r6, r3, lsr r2
    102c:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; f74 <__Stack_Size+0xb74>
    1030:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    1034:	00000200 	andeq	r0, r0, r0, lsl #4
    1038:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    103c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1040:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1044:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1048:	73000002 	movwvc	r0, #2
    104c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1050:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1054:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1058:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    105c:	00000000 	andeq	r0, r0, r0
    1060:	4f500205 	svcmi	0x00500205
    1064:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
    1068:	68240117 	stmdavs	r4!, {r0, r1, r2, r4, r8}
    106c:	23211f21 			; <UNDEFINED> instruction: 0x23211f21
    1070:	235c2b40 	cmpcs	ip, #64, 22	; 0x10000
    1074:	2e1b0321 	cdpcs	3, 1, cr0, cr11, cr1, {1}
    1078:	24216824 	strtcs	r6, [r1], #-2084	; 0x824
    107c:	6333242a 	teqvs	r3, #704643072	; 0x2a000000
    1080:	23242a32 			; <UNDEFINED> instruction: 0x23242a32
    1084:	68d50321 	ldmvs	r5, {r0, r5, r8, r9}^
    1088:	4bec242e 	blmi	ffb0a148 <SCS_BASE+0x1fafc148>
    108c:	082e7703 	stmdaeq	lr!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1090:	09035915 	stmdbeq	r3, {r0, r2, r4, r8, fp, ip, lr}
    1094:	1f034b3c 	svcne	0x00034b3c
    1098:	2e61032e 	cdpcs	3, 6, cr0, cr1, cr14, {1}
    109c:	4b324b32 	blmi	c93d6c <__Stack_Size+0xc9396c>
    10a0:	4b324b32 	blmi	c93d70 <__Stack_Size+0xc93970>
    10a4:	03425932 	movteq	r5, #10546	; 0x2932
    10a8:	15032e7a 	strne	r2, [r3, #-3706]	; 0xe7a
    10ac:	77591990 			; <UNDEFINED> instruction: 0x77591990
    10b0:	00303131 	eorseq	r3, r0, r1, lsr r1
    10b4:	06010402 	streq	r0, [r1], -r2, lsl #8
    10b8:	034d063c 	movteq	r0, #54844	; 0xd63c
    10bc:	0a035811 	beq	d7108 <__Stack_Size+0xd6d08>
    10c0:	20760301 	rsbscs	r0, r6, r1, lsl #6
    10c4:	5b200a03 	blpl	8038d8 <__Stack_Size+0x8034d8>
    10c8:	1d262323 	stcne	3, cr2, [r6, #-140]!	; 0xffffff74
    10cc:	033f2b50 	teqeq	pc, #80, 22	; 0x14000
    10d0:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    10d4:	20090320 	andcs	r0, r9, r0, lsr #6
    10d8:	03251b22 			; <UNDEFINED> instruction: 0x03251b22
    10dc:	12032069 	andne	r2, r3, #105	; 0x69
    10e0:	02002520 	andeq	r2, r0, #32, 10	; 0x8000000
    10e4:	20060104 	andcs	r0, r6, r4, lsl #2
    10e8:	4a150306 	bmi	541d08 <__Stack_Size+0x541908>
    10ec:	1d2e7603 	stcne	6, cr7, [lr, #-12]!
    10f0:	351d2631 	ldrcc	r2, [sp, #-1585]	; 0x631
    10f4:	4a0a031c 	bmi	281d6c <__Stack_Size+0x28196c>
    10f8:	03232331 			; <UNDEFINED> instruction: 0x03232331
    10fc:	0a035810 	beq	d7144 <__Stack_Size+0xd6d44>
    1100:	20760301 	rsbscs	r0, r6, r1, lsl #6
    1104:	5b200a03 	blpl	803918 <__Stack_Size+0x803518>
    1108:	1d262323 	stcne	3, cr2, [r6, #-140]!	; 0xffffff74
    110c:	232b314d 			; <UNDEFINED> instruction: 0x232b314d
    1110:	31231d23 			; <UNDEFINED> instruction: 0x31231d23
    1114:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
    1118:	1d312012 	ldcne	0, cr2, [r1, #-72]!	; 0xffffffb8
    111c:	02002223 	andeq	r2, r0, #805306370	; 0x30000002
    1120:	3c060104 	stfccs	f0, [r6], {4}
    1124:	1d315206 	lfmne	f5, 4, [r1, #-24]!	; 0xffffffe8
    1128:	403f3123 	eorsmi	r3, pc, r3, lsr #2
    112c:	2079033f 	rsbscs	r0, r9, pc, lsr r3
    1130:	234e3127 	movtcs	r3, #57639	; 0xe127
    1134:	4a100323 	bmi	401dc8 <__Stack_Size+0x4019c8>
    1138:	03010a03 	movweq	r0, #6659	; 0x1a03
    113c:	0a032076 	beq	c931c <__Stack_Size+0xc8f1c>
    1140:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1144:	2b501d26 	blcs	14085e4 <__Stack_Size+0x14081e4>
    1148:	231d2323 	tstcs	sp, #-1946157056	; 0x8c000000
    114c:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    1150:	31201203 			; <UNDEFINED> instruction: 0x31201203
    1154:	0022231d 	eoreq	r2, r2, sp, lsl r3
    1158:	06010402 	streq	r0, [r1], -r2, lsl #8
    115c:	3152063c 	cmpcc	r2, ip, lsr r6
    1160:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    1164:	31232e73 			; <UNDEFINED> instruction: 0x31232e73
    1168:	76032335 			; <UNDEFINED> instruction: 0x76032335
    116c:	200a0320 	andcs	r0, sl, r0, lsr #6
    1170:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    1174:	7603200a 	strvc	r2, [r3], -sl
    1178:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    117c:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    1180:	2324200a 			; <UNDEFINED> instruction: 0x2324200a
    1184:	4a100323 	bmi	401e18 <__Stack_Size+0x401a18>
    1188:	03010a03 	movweq	r0, #6659	; 0x1a03
    118c:	0a032076 	beq	c936c <__Stack_Size+0xc8f6c>
    1190:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1194:	2b501d26 	blcs	1408634 <__Stack_Size+0x1408234>
    1198:	231d2331 	tstcs	sp, #-1006632960	; 0xc4000000
    119c:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    11a0:	31201203 			; <UNDEFINED> instruction: 0x31201203
    11a4:	03207403 			; <UNDEFINED> instruction: 0x03207403
    11a8:	1b30200c 	blne	c091e0 <__Stack_Size+0xc08de0>
    11ac:	04020025 	streq	r0, [r2], #-37	; 0x25
    11b0:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    11b4:	40311d52 	eorsmi	r1, r1, r2, asr sp
    11b8:	98032323 	stmdals	r3, {r0, r1, r5, r8, r9, sp}
    11bc:	0d034a01 	vstreq	s8, [r3, #-4]
    11c0:	08100301 	ldmdaeq	r0, {r0, r8, r9}
    11c4:	2f3d1412 	svccs	0x003d1412
    11c8:	0c032121 	stfeqs	f2, [r3], {33}	; 0x21
    11cc:	212f142e 			; <UNDEFINED> instruction: 0x212f142e
    11d0:	21212121 			; <UNDEFINED> instruction: 0x21212121
    11d4:	2e0c0321 	cdpcs	3, 0, cr0, cr12, cr1, {1}
    11d8:	211e2214 	tstcs	lr, r4, lsl r2
    11dc:	03212121 			; <UNDEFINED> instruction: 0x03212121
    11e0:	2f142e0c 	svccs	0x00142e0c
    11e4:	21212121 			; <UNDEFINED> instruction: 0x21212121
    11e8:	2e0d0321 	cdpcs	3, 0, cr0, cr13, cr1, {1}
    11ec:	4f231d1a 	svcmi	0x00231d1a
    11f0:	1a660e03 	bne	1984a04 <__Stack_Size+0x1984604>
    11f4:	036b232b 	cmneq	fp, #-1409286144	; 0xac000000
    11f8:	0a035819 	beq	d7264 <__Stack_Size+0xd6e64>
    11fc:	33232b01 			; <UNDEFINED> instruction: 0x33232b01
    1200:	194a1403 	stmdbne	sl, {r0, r1, sl, ip}^
    1204:	192e1803 	stmdbne	lr!, {r0, r1, fp, ip}
    1208:	034a1603 	movteq	r1, #42499	; 0xa603
    120c:	232b010a 			; <UNDEFINED> instruction: 0x232b010a
    1210:	4a0d0333 	bmi	341ee4 <__Stack_Size+0x341ae4>
    1214:	74110317 	ldrvc	r0, [r1], #-791	; 0x317
    1218:	01029203 	tsteq	r2, r3, lsl #4
    121c:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1220:	03207dee 			; <UNDEFINED> instruction: 0x03207dee
    1224:	28206617 	stmdacs	r0!, {r0, r1, r2, r4, r9, sl, sp, lr}
    1228:	03207803 			; <UNDEFINED> instruction: 0x03207803
    122c:	222c2e0a 	eorcs	r2, ip, #10, 28	; 0xa0
    1230:	01e40340 	mvneq	r0, r0, asr #6
    1234:	234d232e 	movtcs	r2, #54062	; 0xd32e
    1238:	207e9a03 	rsbscs	r9, lr, r3, lsl #20
    123c:	6600ef03 	strvs	lr, [r0], -r3, lsl #30
    1240:	3f200903 	svccc	0x00200903
    1244:	9803233f 	stmdals	r3, {r0, r1, r2, r3, r4, r5, r8, r9, sp}
    1248:	03202e7f 			; <UNDEFINED> instruction: 0x03202e7f
    124c:	2831200a 	ldmdacs	r1!, {r1, r3, sp}
    1250:	1903314b 	stmdbne	r3, {r0, r1, r3, r6, r8, ip, sp}
    1254:	3128202e 			; <UNDEFINED> instruction: 0x3128202e
    1258:	18663d03 	stmdane	r6!, {r0, r1, r8, sl, fp, ip, sp}^
    125c:	2e130323 	cdpcs	3, 1, cr0, cr3, cr3, {1}
    1260:	234d2319 	movtcs	r2, #54041	; 0xd319
    1264:	1a2e1603 	bne	b86a78 <__Stack_Size+0xb86678>
    1268:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    126c:	0c032e1d 	stceq	14, cr2, [r3], {29}
    1270:	27232320 	strcs	r2, [r3, -r0, lsr #6]!
    1274:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    1278:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    127c:	1c242a32 	stcne	10, cr2, [r4], #-200	; 0xffffff38
    1280:	78033225 	stmdavc	r3, {r0, r2, r5, r9, ip, sp}
    1284:	2332242e 	teqcs	r2, #771751936	; 0x2e000000
    1288:	12032323 	andne	r2, r3, #-1946157056	; 0x8c000000
    128c:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    1290:	2e120323 	cdpcs	3, 1, cr0, cr2, cr3, {1}
    1294:	3f4d2319 	svccc	0x004d2319
    1298:	192e1203 	stmdbne	lr!, {r0, r1, r9, ip}
    129c:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    12a0:	23182e12 	tstcs	r8, #288	; 0x120
    12a4:	0e033f4d 	cdpeq	15, 0, cr3, cr3, cr13, {2}
    12a8:	231d1a2e 	tstcs	sp, #188416	; 0x2e000
    12ac:	660e034f 	strvs	r0, [lr], -pc, asr #6
    12b0:	4f231d1a 	svcmi	0x00231d1a
    12b4:	1a660f03 	bne	1984ec8 <__Stack_Size+0x1984ac8>
    12b8:	034f231d 	movteq	r2, #62237	; 0xf31d
    12bc:	1d1a660f 	ldcne	6, cr6, [sl, #-60]	; 0xffffffc4
    12c0:	12034f23 	andne	r4, r3, #35, 30	; 0x8c
    12c4:	4d231966 	stcmi	9, cr1, [r3, #-408]!	; 0xfffffe68
    12c8:	2e110323 	cdpcs	3, 1, cr0, cr1, cr3, {1}
    12cc:	3f4d2319 	svccc	0x004d2319
    12d0:	192e1103 	stmdbne	lr!, {r0, r1, r8, ip}
    12d4:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    12d8:	23192e11 	tstcs	r9, #272	; 0x110
    12dc:	10033f4d 	andne	r3, r3, sp, asr #30
    12e0:	4d231a2e 	vstmdbmi	r3!, {s2-s47}
    12e4:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    12e8:	3f4d231a 	svccc	0x004d231a
    12ec:	1a2e1003 	bne	b85300 <__Stack_Size+0xb84f00>
    12f0:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    12f4:	231a2e10 	tstcs	sl, #16, 28	; 0x100
    12f8:	10033f4d 	andne	r3, r3, sp, asr #30
    12fc:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    1300:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    1304:	3f312319 	svccc	0x00312319
    1308:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    130c:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1310:	23192e10 	tstcs	r9, #16, 28	; 0x100
    1314:	10033f31 	andne	r3, r3, r1, lsr pc
    1318:	4b23192e 	blmi	8c77d8 <__Stack_Size+0x8c73d8>
    131c:	2e0f0323 	cdpcs	3, 0, cr0, cr15, cr3, {1}
    1320:	234b2319 	movtcs	r2, #45849	; 0xb319
    1324:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    1328:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    132c:	23192e0f 	tstcs	r9, #15, 28	; 0xf0
    1330:	10033f4b 	andne	r3, r3, fp, asr #30
    1334:	4b23192e 	blmi	8c77f4 <__Stack_Size+0x8c73f4>
    1338:	2e0f033f 	mcrcs	3, 0, r0, cr15, cr15, {1}
    133c:	3f4b2319 	svccc	0x004b2319
    1340:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    1344:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    1348:	03192e14 	tsteq	r9, #20, 28	; 0x140
    134c:	69272079 	stmdbvs	r7!, {r0, r3, r4, r5, r6, sp}
    1350:	19661203 	stmdbne	r6!, {r0, r1, r9, ip}^
    1354:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1358:	661e0369 	ldrvs	r0, [lr], -r9, ror #6
    135c:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1360:	694d6827 	stmdbvs	sp, {r0, r1, r2, r5, fp, sp, lr}^
    1364:	311d6934 	tstcc	sp, r4, lsr r9
    1368:	1a580e03 	bne	1604b7c <__Stack_Size+0x160477c>
    136c:	034f231d 	movteq	r2, #62237	; 0xf31d
    1370:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    1374:	0e034f23 	cdpeq	15, 0, cr4, cr3, cr3, {1}
    1378:	231d1a66 	tstcs	sp, #417792	; 0x66000
    137c:	6610034f 	ldrvs	r0, [r0], -pc, asr #6
    1380:	18036918 	stmdane	r3, {r3, r4, r8, fp, sp, lr}
    1384:	03691958 	cmneq	r9, #88, 18	; 0x160000
    1388:	69185812 	ldmdbvs	r8, {r1, r4, fp, ip, lr}
    138c:	18581103 	ldmdane	r8, {r0, r1, r8, ip}^
    1390:	580c0369 	stmdapl	ip, {r0, r3, r5, r6, r8, r9}
    1394:	2e0c0317 	mcrcs	3, 0, r0, cr12, cr7, {0}
    1398:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    139c:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    13a0:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    13a4:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    13a8:	3c130317 	ldccc	3, cr0, [r3], {23}
    13ac:	13036918 	movwne	r6, #14616	; 0x3918
    13b0:	03691858 	cmneq	r9, #88, 16	; 0x580000
    13b4:	20746ffb 	ldrshtcs	r6, [r4], #-251	; 0xffffff05
    13b8:	200a0328 	andcs	r0, sl, r8, lsr #6
    13bc:	03207603 			; <UNDEFINED> instruction: 0x03207603
    13c0:	73032013 	movwvc	r2, #12307	; 0x3013
    13c4:	6e03402e 	cdpvs	0, 0, cr4, cr3, cr14, {1}
    13c8:	20180320 	andscs	r0, r8, r0, lsr #6
    13cc:	4d323f4d 	ldcmi	15, cr3, [r2, #-308]!	; 0xfffffecc
    13d0:	2e110369 	cdpcs	3, 1, cr0, cr1, cr9, {3}
    13d4:	332e6f03 			; <UNDEFINED> instruction: 0x332e6f03
    13d8:	30694d32 	rsbcc	r4, r9, r2, lsr sp
    13dc:	0fe1032c 	svceq	0x00e1032c
    13e0:	0369182e 	cmneq	r9, #3014656	; 0x2e0000
    13e4:	69185813 	ldmdbvs	r8, {r0, r1, r4, fp, ip, lr}
    13e8:	746f8203 	strbtvc	r8, [pc], #-515	; 13f0 <__Stack_Size+0xff0>
    13ec:	20090320 	andcs	r0, r9, r0, lsr #6
    13f0:	03207703 			; <UNDEFINED> instruction: 0x03207703
    13f4:	33234a09 			; <UNDEFINED> instruction: 0x33234a09
    13f8:	032e2003 			; <UNDEFINED> instruction: 0x032e2003
    13fc:	31302e60 	teqcc	r0, r0, ror #28
    1400:	2e160333 	mrccs	3, 0, r0, cr6, cr3, {1}
    1404:	302e6a03 	eorcc	r6, lr, r3, lsl #20
    1408:	3c13ea03 	ldccc	10, cr14, [r3], {3}
    140c:	206c9603 	rsbcs	r9, ip, r3, lsl #12
    1410:	2013ea03 	andscs	lr, r3, r3, lsl #20
    1414:	211f215a 	tstcs	pc, sl, asr r1	; <UNPREDICTABLE>
    1418:	464b3224 	strbmi	r3, [fp], -r4, lsr #4
    141c:	8f033124 	svchi	0x00033124
    1420:	f203206c 	vhadd.s8	q1, <illegal reg q1.5>, q14
    1424:	9a032013 	bls	c9478 <__Stack_Size+0xc9078>
    1428:	7403206c 	strvc	r2, [r3], #-108	; 0x6c
    142c:	1491032e 	ldrne	r0, [r1], #814	; 0x32e
    1430:	24215a2e 	strtcs	r5, [r1], #-2606	; 0xa2e
    1434:	2f402438 	svccs	0x00402438
    1438:	241c322a 	ldrcs	r3, [ip], #-554	; 0x22a
    143c:	6bea0331 	blvs	ffa82108 <SCS_BASE+0x1fa74108>
    1440:	95032220 	strls	r2, [r3, #-544]	; 0x220
    1444:	e9032e14 	stmdb	r3, {r2, r4, r9, sl, fp, sp}
    1448:	e003206b 	and	r2, r3, fp, rrx
    144c:	3f182e10 	svccc	0x00182e10
    1450:	17580b03 	ldrbne	r0, [r8, -r3, lsl #22]
    1454:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    1458:	0b032117 	bleq	c98bc <__Stack_Size+0xc94bc>
    145c:	0321172e 			; <UNDEFINED> instruction: 0x0321172e
    1460:	2f172e0b 	svccs	0x00172e0b
    1464:	172e0a03 	strne	r0, [lr, -r3, lsl #20]!
    1468:	2e0a0321 	cdpcs	3, 0, cr0, cr10, cr1, {1}
    146c:	18032117 	stmdane	r3, {r0, r1, r2, r4, r8, sp}
    1470:	09031a2e 	stmdbeq	r3, {r1, r2, r3, r5, r9, fp, ip}
    1474:	4a18032e 	bmi	602134 <__Stack_Size+0x601d34>
    1478:	4a160318 	bmi	5820e0 <__Stack_Size+0x581ce0>
    147c:	22010903 	andcs	r0, r1, #49152	; 0xc000
    1480:	00222c22 	eoreq	r2, r2, r2, lsr #24
    1484:	06010402 	streq	r0, [r1], -r2, lsl #8
    1488:	04020020 	streq	r0, [r2], #-32
    148c:	43220601 			; <UNDEFINED> instruction: 0x43220601
    1490:	18201503 	stmdane	r0!, {r0, r1, r8, sl, ip}
    1494:	01000402 	tsteq	r0, r2, lsl #8
    1498:	0001d601 	andeq	sp, r1, r1, lsl #12
    149c:	9b000200 	blls	1ca4 <__Stack_Size+0x18a4>
    14a0:	02000000 	andeq	r0, r0, #0
    14a4:	0d0efb01 	vstreq	d15, [lr, #-4]
    14a8:	01010100 	mrseq	r0, (UNDEF: 17)
    14ac:	00000001 	andeq	r0, r0, r1
    14b0:	01000001 	tsteq	r0, r1
    14b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    14b8:	30316632 	eorscc	r6, r1, r2, lsr r6
    14bc:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14c0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    14c4:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
    14c8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    14cc:	5f783031 	svcpl	0x00783031
    14d0:	2f62696c 	svccs	0x0062696c
    14d4:	00636e69 	rsbeq	r6, r3, r9, ror #28
    14d8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    14dc:	31663233 	cmncc	r6, r3, lsr r2
    14e0:	755f7830 	ldrbvc	r7, [pc, #-2096]	; cb8 <__Stack_Size+0x8b8>
    14e4:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    14e8:	0100632e 	tsteq	r0, lr, lsr #6
    14ec:	74730000 	ldrbtvc	r0, [r3], #-0
    14f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    14f4:	5f783031 	svcpl	0x00783031
    14f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    14fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1500:	74730000 	ldrbtvc	r0, [r3], #-0
    1504:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1508:	5f783031 	svcpl	0x00783031
    150c:	2e70616d 	rpwcssz	f6, f0, #5.0
    1510:	00020068 	andeq	r0, r2, r8, rrx
    1514:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1518:	31663233 	cmncc	r6, r3, lsr r2
    151c:	755f7830 	ldrbvc	r7, [pc, #-2096]	; cf4 <__Stack_Size+0x8f4>
    1520:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1524:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1528:	74730000 	ldrbtvc	r0, [r3], #-0
    152c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1530:	5f783031 	svcpl	0x00783031
    1534:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1538:	00020068 	andeq	r0, r2, r8, rrx
    153c:	05000000 	streq	r0, [r0, #-0]
    1540:	00599402 	subseq	r9, r9, r2, lsl #8
    1544:	00da0308 	sbcseq	r0, sl, r8, lsl #6
    1548:	3f082401 	svccc	0x00082401
    154c:	03581b03 	cmpeq	r8, #3072	; 0xc00
    1550:	595c2e66 	ldmdbpl	ip, {r1, r2, r5, r6, r9, sl, fp, sp}^
    1554:	59405940 	stmdbpl	r0, {r6, r8, fp, ip, lr}^
    1558:	03425940 	movteq	r5, #10560	; 0x2940
    155c:	16032e7a 			; <UNDEFINED> instruction: 0x16032e7a
    1560:	3c150374 	ldccc	3, cr0, [r5], {116}	; 0x74
    1564:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    1568:	23233222 			; <UNDEFINED> instruction: 0x23233222
    156c:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
    1570:	2e7a0328 	cdpcs	3, 7, cr0, cr10, cr8, {1}
    1574:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    1578:	26233234 			; <UNDEFINED> instruction: 0x26233234
    157c:	22207a03 	eorcs	r7, r0, #12288	; 0x3000
    1580:	032e4e03 			; <UNDEFINED> instruction: 0x032e4e03
    1584:	24232036 	strtcs	r2, [r3], #-54	; 0x36
    1588:	4e241c43 	cdpmi	12, 2, cr1, cr4, cr3, {2}
    158c:	773d4d67 	ldrvc	r4, [sp, -r7, ror #26]!
    1590:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    1594:	2f1d4014 	svccs	0x001d4014
    1598:	03212121 			; <UNDEFINED> instruction: 0x03212121
    159c:	15032e10 	strne	r2, [r3, #-3600]	; 0xe10
    15a0:	206b0301 	rsbcs	r0, fp, r1, lsl #6
    15a4:	03201503 			; <UNDEFINED> instruction: 0x03201503
    15a8:	0a032076 	beq	c9788 <__Stack_Size+0xc9388>
    15ac:	3c760320 	ldclcc	3, cr0, [r6], #-128	; 0xffffff80
    15b0:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    15b4:	32352e78 	eorscc	r2, r5, #120, 28	; 0x780
    15b8:	142e0c03 	strtne	r0, [lr], #-3075	; 0xc03
    15bc:	0321212f 			; <UNDEFINED> instruction: 0x0321212f
    15c0:	1d1a2e0f 	ldcne	14, cr2, [sl, #-60]	; 0xffffffc4
    15c4:	1e034f23 	cdpne	15, 0, cr4, cr3, cr3, {1}
    15c8:	200d0366 	andcs	r0, sp, r6, ror #6
    15cc:	301e3e33 	andscc	r3, lr, r3, lsr lr
    15d0:	32223022 	eorcc	r3, r2, #34	; 0x22
    15d4:	03402222 	movteq	r2, #546	; 0x222
    15d8:	0a035815 	beq	d7634 <__Stack_Size+0xd7234>
    15dc:	34242a01 	strtcc	r2, [r4], #-2561	; 0xa01
    15e0:	184a0f03 	stmdane	sl, {r0, r1, r8, r9, sl, fp}^
    15e4:	58110368 	ldmdapl	r1, {r3, r5, r6, r8, r9}
    15e8:	0f036717 	svceq	0x00036717
    15ec:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    15f0:	6613034f 	ldrvs	r0, [r3], -pc, asr #6
    15f4:	0f036717 	svceq	0x00036717
    15f8:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    15fc:	660f034f 	strvs	r0, [pc], -pc, asr #6
    1600:	4a0d0318 	bmi	342268 <__Stack_Size+0x341e68>
    1604:	0c032117 	stfeqs	f2, [r3], {23}
    1608:	0e03173c 	mcreq	7, 0, r1, cr3, cr12, {1}
    160c:	033e1766 	teqeq	lr, #26738688	; 0x1980000
    1610:	4c17660f 	ldcmi	6, cr6, [r7], {15}
    1614:	1a580f03 	bne	1605228 <__Stack_Size+0x1604e28>
    1618:	034f231d 	movteq	r2, #62237	; 0xf31d
    161c:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    1620:	10034f23 	andne	r4, r3, r3, lsr #30
    1624:	231d1a66 	tstcs	sp, #417792	; 0x66000
    1628:	6612034f 	ldrvs	r0, [r2], -pc, asr #6
    162c:	0f036717 	svceq	0x00036717
    1630:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    1634:	661b034f 	ldrvs	r0, [fp], -pc, asr #6
    1638:	2e09031a 	mcrcs	3, 0, r0, cr9, cr10, {0}
    163c:	184a2303 	stmdane	sl, {r0, r1, r8, r9, sp}^
    1640:	034a1b03 	movteq	r1, #43779	; 0xab03
    1644:	7103010f 	tstvc	r3, pc, lsl #2
    1648:	200a0320 	andcs	r0, sl, r0, lsr #6
    164c:	301e3033 	andscc	r3, lr, r3, lsr r0
    1650:	32223022 	eorcc	r3, r2, #34	; 0x22
    1654:	02003042 	andeq	r3, r0, #66	; 0x42
    1658:	001d0104 	andseq	r0, sp, r4, lsl #2
    165c:	3f010402 	svccc	0x00010402
    1660:	01040200 	mrseq	r0, R12_usr
    1664:	03244e22 			; <UNDEFINED> instruction: 0x03244e22
    1668:	0a032023 	beq	c96fc <__Stack_Size+0xc92fc>
    166c:	04023d01 	streq	r3, [r2], #-3329	; 0xd01
    1670:	a0010100 	andge	r0, r1, r0, lsl #2
    1674:	02000000 	andeq	r0, r0, #0
    1678:	00003900 	andeq	r3, r0, r0, lsl #18
    167c:	fb010200 	blx	41e86 <__Stack_Size+0x41a86>
    1680:	01000d0e 	tsteq	r0, lr, lsl #26
    1684:	00010101 	andeq	r0, r1, r1, lsl #2
    1688:	00010000 	andeq	r0, r1, r0
    168c:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    1690:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1694:	5f783031 	svcpl	0x00783031
    1698:	2f62696c 	svccs	0x0062696c
    169c:	00637273 	rsbeq	r7, r3, r3, ror r2
    16a0:	726f6300 	rsbvc	r6, pc, #0, 6
    16a4:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    16a8:	616d5f33 	cmnvs	sp, r3, lsr pc
    16ac:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    16b0:	00010073 	andeq	r0, r1, r3, ror r0
    16b4:	05000000 	streq	r0, [r0, #-0]
    16b8:	005cd802 	subseq	sp, ip, r2, lsl #16
    16bc:	01340308 	teqeq	r4, r8, lsl #6
    16c0:	200b0321 	andcs	r0, fp, r1, lsr #6
    16c4:	200b0321 	andcs	r0, fp, r1, lsr #6
    16c8:	200b0321 	andcs	r0, fp, r1, lsr #6
    16cc:	200b032f 	andcs	r0, fp, pc, lsr #6
    16d0:	200b032f 	andcs	r0, fp, pc, lsr #6
    16d4:	200b032f 	andcs	r0, fp, pc, lsr #6
    16d8:	200b0321 	andcs	r0, fp, r1, lsr #6
    16dc:	200b032f 	andcs	r0, fp, pc, lsr #6
    16e0:	0a032f2f 	beq	cd3a4 <__Stack_Size+0xccfa4>
    16e4:	0b032f20 	bleq	cd36c <__Stack_Size+0xccf6c>
    16e8:	0b032f20 	bleq	cd370 <__Stack_Size+0xccf70>
    16ec:	0b032f20 	bleq	cd374 <__Stack_Size+0xccf74>
    16f0:	0a032f20 	beq	cd378 <__Stack_Size+0xccf78>
    16f4:	0b032120 	bleq	c9b7c <__Stack_Size+0xc977c>
    16f8:	0b032120 	bleq	c9b80 <__Stack_Size+0xc9780>
    16fc:	0b032120 	bleq	c9b84 <__Stack_Size+0xc9784>
    1700:	0b032120 	bleq	c9b88 <__Stack_Size+0xc9788>
    1704:	0b032f20 	bleq	cd38c <__Stack_Size+0xccf8c>
    1708:	0a032f20 	beq	cd390 <__Stack_Size+0xccf90>
    170c:	0b032120 	bleq	c9b94 <__Stack_Size+0xc9794>
    1710:	01022120 	tsteq	r2, r0, lsr #2
    1714:	5f010100 	svcpl	0x00010100
    1718:	02000000 	andeq	r0, r0, #0
    171c:	00003b00 	andeq	r3, r0, r0, lsl #22
    1720:	fb010200 	blx	41f2a <__Stack_Size+0x41b2a>
    1724:	01000d0e 	tsteq	r0, lr, lsl #26
    1728:	00010101 	andeq	r0, r1, r1, lsl #2
    172c:	00010000 	andeq	r0, r1, r0
    1730:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    1734:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1738:	5f783031 	svcpl	0x00783031
    173c:	2f62696c 	svccs	0x0062696c
    1740:	00637273 	rsbeq	r7, r3, r3, ror r2
    1744:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1748:	31663233 	cmncc	r6, r3, lsr r2
    174c:	765f7830 			; <UNDEFINED> instruction: 0x765f7830
    1750:	6f746365 	svcvs	0x00746365
    1754:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1758:	00000001 	andeq	r0, r0, r1
    175c:	48020500 	stmdami	r2, {r8, sl}
    1760:	0308005d 	movweq	r0, #32861	; 0x805d
    1764:	00010191 	muleq	r1, r1, r1
    1768:	7b010402 	blvc	42778 <__Stack_Size+0x42378>
    176c:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    1770:	503e6c01 	eorspl	r6, lr, r1, lsl #24
    1774:	000f022f 	andeq	r0, pc, pc, lsr #4
    1778:	Address 0x00001778 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000084 	andeq	r0, r0, r4, lsl #1
      20:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      24:	56018e02 	strpl	r8, [r1], -r2, lsl #28
      28:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
      2c:	000b4300 	andeq	r4, fp, r0, lsl #6
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	080031b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip, sp}
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
      44:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      48:	0c0e6501 	cfstr32eq	mvfx6, [lr], {1}
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	08003206 	stmdaeq	r0, {r1, r2, r9, ip, sp}
      58:	00000086 	andeq	r0, r0, r6, lsl #1
      5c:	84200e41 	strthi	r0, [r0], #-3649	; 0xe41
      60:	86048505 	strhi	r8, [r4], -r5, lsl #10
      64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      68:	140e7c01 	strne	r7, [lr], #-3073	; 0xc01
      6c:	0000000c 	andeq	r0, r0, ip
      70:	00000000 	andeq	r0, r0, r0
      74:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
      78:	0000000c 	andeq	r0, r0, ip
      7c:	0000000c 	andeq	r0, r0, ip
      80:	00000000 	andeq	r0, r0, r0
      84:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      88:	00000010 	andeq	r0, r0, r0, lsl r0
      8c:	0000000c 	andeq	r0, r0, ip
      90:	00000000 	andeq	r0, r0, r0
      94:	080032a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp}
      98:	00000014 	andeq	r0, r0, r4, lsl r0
      9c:	00000018 	andeq	r0, r0, r8, lsl r0
      a0:	00000000 	andeq	r0, r0, r0
      a4:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
      a8:	00000044 	andeq	r0, r0, r4, asr #32
      ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      b0:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
      b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
      b8:	0000000c 	andeq	r0, r0, ip
      bc:	00000000 	andeq	r0, r0, r0
      c0:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
      c4:	00000020 	andeq	r0, r0, r0, lsr #32
      c8:	00000014 	andeq	r0, r0, r4, lsl r0
      cc:	00000000 	andeq	r0, r0, r0
      d0:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
      dc:	00018e02 	andeq	r8, r1, r2, lsl #28
      e0:	00000014 	andeq	r0, r0, r4, lsl r0
      e4:	00000000 	andeq	r0, r0, r0
      e8:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
      ec:	00000012 	andeq	r0, r0, r2, lsl r0
      f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      f4:	00018e02 	andeq	r8, r1, r2, lsl #28
      f8:	00000018 	andeq	r0, r0, r8, lsl r0
      fc:	00000000 	andeq	r0, r0, r0
     100:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
     104:	0000002e 	andeq	r0, r0, lr, lsr #32
     108:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     10c:	50018e02 	andpl	r8, r1, r2, lsl #28
     110:	000ec4ce 	andeq	ip, lr, lr, asr #9
     114:	00000018 	andeq	r0, r0, r8, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
     120:	00000030 	andeq	r0, r0, r0, lsr r0
     124:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     128:	51018e02 	tstpl	r1, r2, lsl #28
     12c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     130:	0000000c 	andeq	r0, r0, ip
     134:	00000000 	andeq	r0, r0, r0
     138:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     13c:	0000004c 	andeq	r0, r0, ip, asr #32
     140:	0000001c 	andeq	r0, r0, ip, lsl r0
     144:	00000000 	andeq	r0, r0, r0
     148:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     14c:	00000094 	muleq	r0, r4, r0
     150:	83080e41 	movwhi	r0, #36417	; 0x8e41
     154:	77018e02 	strvc	r8, [r1, -r2, lsl #28]
     158:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     15c:	000b4300 	andeq	r4, fp, r0, lsl #6
     160:	00000018 	andeq	r0, r0, r8, lsl r0
     164:	00000000 	andeq	r0, r0, r0
     168:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     16c:	0000002e 	andeq	r0, r0, lr, lsr #32
     170:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     174:	54018e02 	strpl	r8, [r1], #-3586	; 0xe02
     178:	000ec4ce 	andeq	ip, lr, lr, asr #9
     17c:	00000018 	andeq	r0, r0, r8, lsl r0
     180:	00000000 	andeq	r0, r0, r0
     184:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     188:	00000014 	andeq	r0, r0, r4, lsl r0
     18c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     190:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     194:	000ec4ce 	andeq	ip, lr, lr, asr #9
     198:	0000001c 	andeq	r0, r0, ip, lsl r0
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	080034ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp}
     1a4:	0000003a 	andeq	r0, r0, sl, lsr r0
     1a8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     1ac:	53018e02 	movwpl	r8, #7682	; 0x1e02
     1b0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     1b4:	000b4300 	andeq	r4, fp, r0, lsl #6
     1b8:	00000024 	andeq	r0, r0, r4, lsr #32
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     1c4:	00000048 	andeq	r0, r0, r8, asr #32
     1c8:	83100e41 	tsthi	r0, #1040	; 0x410
     1cc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     1d0:	5b018e02 	blpl	639e0 <__Stack_Size+0x635e0>
     1d4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     1d8:	43000ec3 	movwmi	r0, #3779	; 0xec3
     1dc:	0000000b 	andeq	r0, r0, fp
     1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	08003550 	stmdaeq	r0, {r4, r6, r8, sl, ip, sp}
     1ec:	00000034 	andeq	r0, r0, r4, lsr r0
     1f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     1f4:	51018e02 	tstpl	r1, r2, lsl #28
     1f8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     1fc:	000b4300 	andeq	r4, fp, r0, lsl #6
     200:	0000001c 	andeq	r0, r0, ip, lsl r0
     204:	00000000 	andeq	r0, r0, r0
     208:	08003584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp}
     20c:	00000034 	andeq	r0, r0, r4, lsr r0
     210:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     214:	51018e02 	tstpl	r1, r2, lsl #28
     218:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     21c:	000b4300 	andeq	r4, fp, r0, lsl #6
     220:	0000001c 	andeq	r0, r0, ip, lsl r0
     224:	00000000 	andeq	r0, r0, r0
     228:	080035b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, ip, sp}
     22c:	00000038 	andeq	r0, r0, r8, lsr r0
     230:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     234:	52018e02 	andpl	r8, r1, #2, 28
     238:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     23c:	000b4300 	andeq	r4, fp, r0, lsl #6
     240:	0000001c 	andeq	r0, r0, ip, lsl r0
     244:	00000000 	andeq	r0, r0, r0
     248:	080035f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip, sp}
     24c:	00000038 	andeq	r0, r0, r8, lsr r0
     250:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     254:	52018e02 	andpl	r8, r1, #2, 28
     258:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     25c:	000b4300 	andeq	r4, fp, r0, lsl #6
     260:	0000001c 	andeq	r0, r0, ip, lsl r0
     264:	00000000 	andeq	r0, r0, r0
     268:	08003628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp}
     26c:	00000038 	andeq	r0, r0, r8, lsr r0
     270:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     274:	52018e02 	andpl	r8, r1, #2, 28
     278:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     27c:	000b4300 	andeq	r4, fp, r0, lsl #6
     280:	0000001c 	andeq	r0, r0, ip, lsl r0
     284:	00000000 	andeq	r0, r0, r0
     288:	08003660 	stmdaeq	r0, {r5, r6, r9, sl, ip, sp}
     28c:	00000038 	andeq	r0, r0, r8, lsr r0
     290:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     294:	52018e02 	andpl	r8, r1, #2, 28
     298:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     29c:	000b4300 	andeq	r4, fp, r0, lsl #6
     2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	08003698 	stmdaeq	r0, {r3, r4, r7, r9, sl, ip, sp}
     2ac:	00000038 	andeq	r0, r0, r8, lsr r0
     2b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2b4:	52018e02 	andpl	r8, r1, #2, 28
     2b8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2bc:	000b4300 	andeq	r4, fp, r0, lsl #6
     2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	080036d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, sp}
     2cc:	00000038 	andeq	r0, r0, r8, lsr r0
     2d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2d4:	52018e02 	andpl	r8, r1, #2, 28
     2d8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2dc:	000b4300 	andeq	r4, fp, r0, lsl #6
     2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	08003708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp}
     2ec:	00000038 	andeq	r0, r0, r8, lsr r0
     2f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2f4:	52018e02 	andpl	r8, r1, #2, 28
     2f8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2fc:	000b4300 	andeq	r4, fp, r0, lsl #6
     300:	0000001c 	andeq	r0, r0, ip, lsl r0
     304:	00000000 	andeq	r0, r0, r0
     308:	08003740 	stmdaeq	r0, {r6, r8, r9, sl, ip, sp}
     30c:	00000038 	andeq	r0, r0, r8, lsr r0
     310:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     314:	52018e02 	andpl	r8, r1, #2, 28
     318:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     31c:	000b4300 	andeq	r4, fp, r0, lsl #6
     320:	0000001c 	andeq	r0, r0, ip, lsl r0
     324:	00000000 	andeq	r0, r0, r0
     328:	08003778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp}
     32c:	00000038 	andeq	r0, r0, r8, lsr r0
     330:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     334:	52018e02 	andpl	r8, r1, #2, 28
     338:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     33c:	000b4300 	andeq	r4, fp, r0, lsl #6
     340:	0000001c 	andeq	r0, r0, ip, lsl r0
     344:	00000000 	andeq	r0, r0, r0
     348:	080037b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, ip, sp}
     34c:	00000038 	andeq	r0, r0, r8, lsr r0
     350:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     354:	52018e02 	andpl	r8, r1, #2, 28
     358:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     35c:	000b4300 	andeq	r4, fp, r0, lsl #6
     360:	0000001c 	andeq	r0, r0, ip, lsl r0
     364:	00000000 	andeq	r0, r0, r0
     368:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
     36c:	00000038 	andeq	r0, r0, r8, lsr r0
     370:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     374:	52018e02 	andpl	r8, r1, #2, 28
     378:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     37c:	000b4300 	andeq	r4, fp, r0, lsl #6
     380:	0000001c 	andeq	r0, r0, ip, lsl r0
     384:	00000000 	andeq	r0, r0, r0
     388:	08003820 	stmdaeq	r0, {r5, fp, ip, sp}
     38c:	00000034 	andeq	r0, r0, r4, lsr r0
     390:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     394:	51018e02 	tstpl	r1, r2, lsl #28
     398:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     39c:	000b4300 	andeq	r4, fp, r0, lsl #6
     3a0:	00000018 	andeq	r0, r0, r8, lsl r0
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	08003854 	stmdaeq	r0, {r2, r4, r6, fp, ip, sp}
     3ac:	0000001a 	andeq	r0, r0, sl, lsl r0
     3b0:	83100e41 	tsthi	r0, #1040	; 0x410
     3b4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     3b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c0:	00000000 	andeq	r0, r0, r0
     3c4:	0800386e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, sp}
     3c8:	0000008e 	andeq	r0, r0, lr, lsl #1
     3cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3d0:	41018e02 	tstmi	r1, r2, lsl #28
     3d4:	4102280e 	tstmi	r2, lr, lsl #16
     3d8:	0000080e 	andeq	r0, r0, lr, lsl #16
     3dc:	00000014 	andeq	r0, r0, r4, lsl r0
     3e0:	00000000 	andeq	r0, r0, r0
     3e4:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
     3e8:	00000054 	andeq	r0, r0, r4, asr r0
     3ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3f4:	00000018 	andeq	r0, r0, r8, lsl r0
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	08003950 	stmdaeq	r0, {r4, r6, r8, fp, ip, sp}
     400:	00000030 	andeq	r0, r0, r0, lsr r0
     404:	83100e41 	tsthi	r0, #1040	; 0x410
     408:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     40c:	00018e02 	andeq	r8, r1, r2, lsl #28
     410:	00000018 	andeq	r0, r0, r8, lsl r0
     414:	00000000 	andeq	r0, r0, r0
     418:	08003980 	stmdaeq	r0, {r7, r8, fp, ip, sp}
     41c:	00000014 	andeq	r0, r0, r4, lsl r0
     420:	83080e41 	movwhi	r0, #36417	; 0x8e41
     424:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     428:	000ec3ce 	andeq	ip, lr, lr, asr #7
     42c:	0000000c 	andeq	r0, r0, ip
     430:	00000000 	andeq	r0, r0, r0
     434:	08003994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp}
     438:	00000018 	andeq	r0, r0, r8, lsl r0
     43c:	00000018 	andeq	r0, r0, r8, lsl r0
     440:	00000000 	andeq	r0, r0, r0
     444:	080039ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, sp}
     448:	00000030 	andeq	r0, r0, r0, lsr r0
     44c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     450:	52018e02 	andpl	r8, r1, #2, 28
     454:	000ec4ce 	andeq	ip, lr, lr, asr #9
     458:	00000020 	andeq	r0, r0, r0, lsr #32
     45c:	00000000 	andeq	r0, r0, r0
     460:	080039dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, sp}
     464:	00000032 	andeq	r0, r0, r2, lsr r0
     468:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     46c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     470:	55018e02 	strpl	r8, [r1, #-3586]	; 0xe02
     474:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     478:	0000000e 	andeq	r0, r0, lr
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
     480:	00000000 	andeq	r0, r0, r0
     484:	08003a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, sp}
     488:	00000082 	andeq	r0, r0, r2, lsl #1
     48c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     490:	7c018e02 	stcvc	14, cr8, [r1], {2}
     494:	000ec3ce 	andeq	ip, lr, lr, asr #7
     498:	00000014 	andeq	r0, r0, r4, lsl r0
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	08003a90 	stmdaeq	r0, {r4, r7, r9, fp, ip, sp}
     4a4:	00000100 	andeq	r0, r0, r0, lsl #2
     4a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4b4:	00000000 	andeq	r0, r0, r0
     4b8:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
     4bc:	0000007c 	andeq	r0, r0, ip, ror r0
     4c0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     4c4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     4c8:	200e4301 	andcs	r4, lr, r1, lsl #6
     4cc:	000c0e74 	andeq	r0, ip, r4, ror lr
     4d0:	00000018 	andeq	r0, r0, r8, lsl r0
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	08003c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp}
     4dc:	00000030 	andeq	r0, r0, r0, lsr r0
     4e0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4e4:	53018e02 	movwpl	r8, #7682	; 0x1e02
     4e8:	000ec3ce 	andeq	ip, lr, lr, asr #7
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	08003c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, sp}
     4f8:	00000008 	andeq	r0, r0, r8
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
     500:	00000000 	andeq	r0, r0, r0
     504:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
     508:	00000134 	andeq	r0, r0, r4, lsr r1
     50c:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
     510:	00000001 	andeq	r0, r0, r1
     514:	0000000c 	andeq	r0, r0, ip
     518:	00000000 	andeq	r0, r0, r0
     51c:	08003c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp}
     520:	0000000c 	andeq	r0, r0, ip
     524:	0000000c 	andeq	r0, r0, ip
     528:	00000000 	andeq	r0, r0, r0
     52c:	08003c50 	stmdaeq	r0, {r4, r6, sl, fp, ip, sp}
     530:	00000014 	andeq	r0, r0, r4, lsl r0
     534:	0000000c 	andeq	r0, r0, ip
     538:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     53c:	7c020001 	stcvc	0, cr0, [r2], {1}
     540:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     544:	0000000c 	andeq	r0, r0, ip
     548:	00000534 	andeq	r0, r0, r4, lsr r5
     54c:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
     550:	00000002 	andeq	r0, r0, r2
     554:	0000000c 	andeq	r0, r0, ip
     558:	00000534 	andeq	r0, r0, r4, lsr r5
     55c:	08003c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp, ip, sp}
     560:	00000002 	andeq	r0, r0, r2
     564:	0000000c 	andeq	r0, r0, ip
     568:	00000534 	andeq	r0, r0, r4, lsr r5
     56c:	08003c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, sp}
     570:	00000002 	andeq	r0, r0, r2
     574:	0000000c 	andeq	r0, r0, ip
     578:	00000534 	andeq	r0, r0, r4, lsr r5
     57c:	08003c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, ip, sp}
     580:	00000002 	andeq	r0, r0, r2
     584:	0000000c 	andeq	r0, r0, ip
     588:	00000534 	andeq	r0, r0, r4, lsr r5
     58c:	08003c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip, sp}
     590:	00000002 	andeq	r0, r0, r2
     594:	0000000c 	andeq	r0, r0, ip
     598:	00000534 	andeq	r0, r0, r4, lsr r5
     59c:	08003c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, sp}
     5a0:	00000002 	andeq	r0, r0, r2
     5a4:	0000000c 	andeq	r0, r0, ip
     5a8:	00000534 	andeq	r0, r0, r4, lsr r5
     5ac:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
     5b0:	00000002 	andeq	r0, r0, r2
     5b4:	0000000c 	andeq	r0, r0, ip
     5b8:	00000534 	andeq	r0, r0, r4, lsr r5
     5bc:	08003c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, ip, sp}
     5c0:	00000002 	andeq	r0, r0, r2
     5c4:	0000000c 	andeq	r0, r0, ip
     5c8:	00000534 	andeq	r0, r0, r4, lsr r5
     5cc:	08003c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip, sp}
     5d0:	00000004 	andeq	r0, r0, r4
     5d4:	0000000c 	andeq	r0, r0, ip
     5d8:	00000534 	andeq	r0, r0, r4, lsr r5
     5dc:	08003c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
     5e0:	00000002 	andeq	r0, r0, r2
     5e4:	0000000c 	andeq	r0, r0, ip
     5e8:	00000534 	andeq	r0, r0, r4, lsr r5
     5ec:	08003c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, ip, sp}
     5f0:	00000002 	andeq	r0, r0, r2
     5f4:	0000000c 	andeq	r0, r0, ip
     5f8:	00000534 	andeq	r0, r0, r4, lsr r5
     5fc:	08003c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp}
     600:	00000002 	andeq	r0, r0, r2
     604:	0000000c 	andeq	r0, r0, ip
     608:	00000534 	andeq	r0, r0, r4, lsr r5
     60c:	08003c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, ip, sp}
     610:	00000002 	andeq	r0, r0, r2
     614:	0000000c 	andeq	r0, r0, ip
     618:	00000534 	andeq	r0, r0, r4, lsr r5
     61c:	08003c80 	stmdaeq	r0, {r7, sl, fp, ip, sp}
     620:	00000002 	andeq	r0, r0, r2
     624:	0000000c 	andeq	r0, r0, ip
     628:	00000534 	andeq	r0, r0, r4, lsr r5
     62c:	08003c82 	stmdaeq	r0, {r1, r7, sl, fp, ip, sp}
     630:	00000002 	andeq	r0, r0, r2
     634:	0000000c 	andeq	r0, r0, ip
     638:	00000534 	andeq	r0, r0, r4, lsr r5
     63c:	08003c84 	stmdaeq	r0, {r2, r7, sl, fp, ip, sp}
     640:	00000002 	andeq	r0, r0, r2
     644:	0000000c 	andeq	r0, r0, ip
     648:	00000534 	andeq	r0, r0, r4, lsr r5
     64c:	08003c86 	stmdaeq	r0, {r1, r2, r7, sl, fp, ip, sp}
     650:	00000002 	andeq	r0, r0, r2
     654:	0000000c 	andeq	r0, r0, ip
     658:	00000534 	andeq	r0, r0, r4, lsr r5
     65c:	08003c88 	stmdaeq	r0, {r3, r7, sl, fp, ip, sp}
     660:	00000002 	andeq	r0, r0, r2
     664:	0000000c 	andeq	r0, r0, ip
     668:	00000534 	andeq	r0, r0, r4, lsr r5
     66c:	08003c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, sp}
     670:	00000002 	andeq	r0, r0, r2
     674:	0000000c 	andeq	r0, r0, ip
     678:	00000534 	andeq	r0, r0, r4, lsr r5
     67c:	08003c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp}
     680:	00000002 	andeq	r0, r0, r2
     684:	0000000c 	andeq	r0, r0, ip
     688:	00000534 	andeq	r0, r0, r4, lsr r5
     68c:	08003c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, sp}
     690:	00000002 	andeq	r0, r0, r2
     694:	0000000c 	andeq	r0, r0, ip
     698:	00000534 	andeq	r0, r0, r4, lsr r5
     69c:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
     6a0:	00000002 	andeq	r0, r0, r2
     6a4:	0000000c 	andeq	r0, r0, ip
     6a8:	00000534 	andeq	r0, r0, r4, lsr r5
     6ac:	08003c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, ip, sp}
     6b0:	00000002 	andeq	r0, r0, r2
     6b4:	0000000c 	andeq	r0, r0, ip
     6b8:	00000534 	andeq	r0, r0, r4, lsr r5
     6bc:	08003c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, sp}
     6c0:	00000002 	andeq	r0, r0, r2
     6c4:	0000000c 	andeq	r0, r0, ip
     6c8:	00000534 	andeq	r0, r0, r4, lsr r5
     6cc:	08003c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp, ip, sp}
     6d0:	00000002 	andeq	r0, r0, r2
     6d4:	0000000c 	andeq	r0, r0, ip
     6d8:	00000534 	andeq	r0, r0, r4, lsr r5
     6dc:	08003c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, ip, sp}
     6e0:	00000002 	andeq	r0, r0, r2
     6e4:	0000000c 	andeq	r0, r0, ip
     6e8:	00000534 	andeq	r0, r0, r4, lsr r5
     6ec:	08003c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, ip, sp}
     6f0:	00000002 	andeq	r0, r0, r2
     6f4:	0000000c 	andeq	r0, r0, ip
     6f8:	00000534 	andeq	r0, r0, r4, lsr r5
     6fc:	08003c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, sp}
     700:	00000002 	andeq	r0, r0, r2
     704:	0000000c 	andeq	r0, r0, ip
     708:	00000534 	andeq	r0, r0, r4, lsr r5
     70c:	08003c9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, fp, ip, sp}
     710:	00000002 	andeq	r0, r0, r2
     714:	0000000c 	andeq	r0, r0, ip
     718:	00000534 	andeq	r0, r0, r4, lsr r5
     71c:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
     720:	00000002 	andeq	r0, r0, r2
     724:	0000000c 	andeq	r0, r0, ip
     728:	00000534 	andeq	r0, r0, r4, lsr r5
     72c:	08003ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip, sp}
     730:	00000002 	andeq	r0, r0, r2
     734:	0000000c 	andeq	r0, r0, ip
     738:	00000534 	andeq	r0, r0, r4, lsr r5
     73c:	08003ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp}
     740:	00000002 	andeq	r0, r0, r2
     744:	0000000c 	andeq	r0, r0, ip
     748:	00000534 	andeq	r0, r0, r4, lsr r5
     74c:	08003ca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, ip, sp}
     750:	00000002 	andeq	r0, r0, r2
     754:	0000000c 	andeq	r0, r0, ip
     758:	00000534 	andeq	r0, r0, r4, lsr r5
     75c:	08003ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, sp}
     760:	00000002 	andeq	r0, r0, r2
     764:	0000000c 	andeq	r0, r0, ip
     768:	00000534 	andeq	r0, r0, r4, lsr r5
     76c:	08003caa 	stmdaeq	r0, {r1, r3, r5, r7, sl, fp, ip, sp}
     770:	00000002 	andeq	r0, r0, r2
     774:	0000000c 	andeq	r0, r0, ip
     778:	00000534 	andeq	r0, r0, r4, lsr r5
     77c:	08003cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip, sp}
     780:	00000002 	andeq	r0, r0, r2
     784:	0000000c 	andeq	r0, r0, ip
     788:	00000534 	andeq	r0, r0, r4, lsr r5
     78c:	08003cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, ip, sp}
     790:	00000002 	andeq	r0, r0, r2
     794:	0000000c 	andeq	r0, r0, ip
     798:	00000534 	andeq	r0, r0, r4, lsr r5
     79c:	08003cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, sp}
     7a0:	00000004 	andeq	r0, r0, r4
     7a4:	0000000c 	andeq	r0, r0, ip
     7a8:	00000534 	andeq	r0, r0, r4, lsr r5
     7ac:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
     7b0:	00000002 	andeq	r0, r0, r2
     7b4:	0000000c 	andeq	r0, r0, ip
     7b8:	00000534 	andeq	r0, r0, r4, lsr r5
     7bc:	08003cb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, ip, sp}
     7c0:	00000002 	andeq	r0, r0, r2
     7c4:	0000000c 	andeq	r0, r0, ip
     7c8:	00000534 	andeq	r0, r0, r4, lsr r5
     7cc:	08003cb8 	stmdaeq	r0, {r3, r4, r5, r7, sl, fp, ip, sp}
     7d0:	00000002 	andeq	r0, r0, r2
     7d4:	0000000c 	andeq	r0, r0, ip
     7d8:	00000534 	andeq	r0, r0, r4, lsr r5
     7dc:	08003cba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, fp, ip, sp}
     7e0:	00000002 	andeq	r0, r0, r2
     7e4:	0000000c 	andeq	r0, r0, ip
     7e8:	00000534 	andeq	r0, r0, r4, lsr r5
     7ec:	08003cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, sp}
     7f0:	00000002 	andeq	r0, r0, r2
     7f4:	0000000c 	andeq	r0, r0, ip
     7f8:	00000534 	andeq	r0, r0, r4, lsr r5
     7fc:	08003cbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, fp, ip, sp}
     800:	00000002 	andeq	r0, r0, r2
     804:	0000000c 	andeq	r0, r0, ip
     808:	00000534 	andeq	r0, r0, r4, lsr r5
     80c:	08003cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp}
     810:	00000002 	andeq	r0, r0, r2
     814:	0000000c 	andeq	r0, r0, ip
     818:	00000534 	andeq	r0, r0, r4, lsr r5
     81c:	08003cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, ip, sp}
     820:	00000002 	andeq	r0, r0, r2
     824:	0000000c 	andeq	r0, r0, ip
     828:	00000534 	andeq	r0, r0, r4, lsr r5
     82c:	08003cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, ip, sp}
     830:	00000004 	andeq	r0, r0, r4
     834:	0000000c 	andeq	r0, r0, ip
     838:	00000534 	andeq	r0, r0, r4, lsr r5
     83c:	08003cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, ip, sp}
     840:	00000002 	andeq	r0, r0, r2
     844:	0000000c 	andeq	r0, r0, ip
     848:	00000534 	andeq	r0, r0, r4, lsr r5
     84c:	08003cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, ip, sp}
     850:	00000002 	andeq	r0, r0, r2
     854:	0000000c 	andeq	r0, r0, ip
     858:	00000534 	andeq	r0, r0, r4, lsr r5
     85c:	08003ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp, ip, sp}
     860:	00000002 	andeq	r0, r0, r2
     864:	0000000c 	andeq	r0, r0, ip
     868:	00000534 	andeq	r0, r0, r4, lsr r5
     86c:	08003cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip, sp}
     870:	00000002 	andeq	r0, r0, r2
     874:	0000000c 	andeq	r0, r0, ip
     878:	00000534 	andeq	r0, r0, r4, lsr r5
     87c:	08003cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp}
     880:	00000002 	andeq	r0, r0, r2
     884:	0000000c 	andeq	r0, r0, ip
     888:	00000534 	andeq	r0, r0, r4, lsr r5
     88c:	08003cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, ip, sp}
     890:	00000002 	andeq	r0, r0, r2
     894:	0000000c 	andeq	r0, r0, ip
     898:	00000534 	andeq	r0, r0, r4, lsr r5
     89c:	08003cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip, sp}
     8a0:	00000002 	andeq	r0, r0, r2
     8a4:	0000000c 	andeq	r0, r0, ip
     8a8:	00000534 	andeq	r0, r0, r4, lsr r5
     8ac:	08003cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, ip, sp}
     8b0:	00000002 	andeq	r0, r0, r2
     8b4:	0000000c 	andeq	r0, r0, ip
     8b8:	00000534 	andeq	r0, r0, r4, lsr r5
     8bc:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
     8c0:	00000002 	andeq	r0, r0, r2
     8c4:	0000000c 	andeq	r0, r0, ip
     8c8:	00000534 	andeq	r0, r0, r4, lsr r5
     8cc:	08003cda 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, fp, ip, sp}
     8d0:	00000002 	andeq	r0, r0, r2
     8d4:	0000000c 	andeq	r0, r0, ip
     8d8:	00000534 	andeq	r0, r0, r4, lsr r5
     8dc:	08003cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, ip, sp}
     8e0:	00000002 	andeq	r0, r0, r2
     8e4:	0000000c 	andeq	r0, r0, ip
     8e8:	00000534 	andeq	r0, r0, r4, lsr r5
     8ec:	08003cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, ip, sp}
     8f0:	00000002 	andeq	r0, r0, r2
     8f4:	0000000c 	andeq	r0, r0, ip
     8f8:	00000534 	andeq	r0, r0, r4, lsr r5
     8fc:	08003ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, ip, sp}
     900:	00000002 	andeq	r0, r0, r2
     904:	0000000c 	andeq	r0, r0, ip
     908:	00000534 	andeq	r0, r0, r4, lsr r5
     90c:	08003ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, ip, sp}
     910:	00000002 	andeq	r0, r0, r2
     914:	0000000c 	andeq	r0, r0, ip
     918:	00000534 	andeq	r0, r0, r4, lsr r5
     91c:	08003ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, sp}
     920:	00000002 	andeq	r0, r0, r2
     924:	0000000c 	andeq	r0, r0, ip
     928:	00000534 	andeq	r0, r0, r4, lsr r5
     92c:	08003ce6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, fp, ip, sp}
     930:	00000002 	andeq	r0, r0, r2
     934:	0000000c 	andeq	r0, r0, ip
     938:	00000534 	andeq	r0, r0, r4, lsr r5
     93c:	08003ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, sp}
     940:	00000002 	andeq	r0, r0, r2
     944:	0000000c 	andeq	r0, r0, ip
     948:	00000534 	andeq	r0, r0, r4, lsr r5
     94c:	08003cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip, sp}
     950:	00000002 	andeq	r0, r0, r2
     954:	0000000c 	andeq	r0, r0, ip
     958:	00000534 	andeq	r0, r0, r4, lsr r5
     95c:	08003cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp, ip, sp}
     960:	00000002 	andeq	r0, r0, r2
     964:	0000000c 	andeq	r0, r0, ip
     968:	00000534 	andeq	r0, r0, r4, lsr r5
     96c:	08003cee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp, ip, sp}
     970:	00000002 	andeq	r0, r0, r2
     974:	0000000c 	andeq	r0, r0, ip
     978:	00000534 	andeq	r0, r0, r4, lsr r5
     97c:	08003cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, ip, sp}
     980:	00000002 	andeq	r0, r0, r2
     984:	0000000c 	andeq	r0, r0, ip
     988:	00000534 	andeq	r0, r0, r4, lsr r5
     98c:	08003cf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, fp, ip, sp}
     990:	00000002 	andeq	r0, r0, r2
     994:	0000000c 	andeq	r0, r0, ip
     998:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     99c:	7c020001 	stcvc	0, cr0, [r2], {1}
     9a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9a4:	00000014 	andeq	r0, r0, r4, lsl r0
     9a8:	00000994 	muleq	r0, r4, r9
     9ac:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
     9b0:	0000000c 	andeq	r0, r0, ip
     9b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9bc:	0000000c 	andeq	r0, r0, ip
     9c0:	00000994 	muleq	r0, r4, r9
     9c4:	08003d00 	stmdaeq	r0, {r8, sl, fp, ip, sp}
     9c8:	00000004 	andeq	r0, r0, r4
     9cc:	0000000c 	andeq	r0, r0, ip
     9d0:	00000994 	muleq	r0, r4, r9
     9d4:	08003d04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp}
     9d8:	00000004 	andeq	r0, r0, r4
     9dc:	00000018 	andeq	r0, r0, r8, lsl r0
     9e0:	00000994 	muleq	r0, r4, r9
     9e4:	08003d08 	stmdaeq	r0, {r3, r8, sl, fp, ip, sp}
     9e8:	0000001e 	andeq	r0, r0, lr, lsl r0
     9ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     9f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     9f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9fc:	00000994 	muleq	r0, r4, r9
     a00:	08003d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, ip, sp}
     a04:	00000024 	andeq	r0, r0, r4, lsr #32
     a08:	83180e41 	tsthi	r8, #1040	; 0x410
     a0c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     a10:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
     a18:	0000000c 	andeq	r0, r0, ip
     a1c:	00000994 	muleq	r0, r4, r9
     a20:	08003d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip, sp}
     a24:	00000008 	andeq	r0, r0, r8
     a28:	0000000c 	andeq	r0, r0, ip
     a2c:	00000994 	muleq	r0, r4, r9
     a30:	08003d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, ip, sp}
     a34:	00000004 	andeq	r0, r0, r4
     a38:	0000000c 	andeq	r0, r0, ip
     a3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a40:	7c020001 	stcvc	0, cr0, [r2], {1}
     a44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a48:	00000014 	andeq	r0, r0, r4, lsl r0
     a4c:	00000a38 	andeq	r0, r0, r8, lsr sl
     a50:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
     a54:	0000002c 	andeq	r0, r0, ip, lsr #32
     a58:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a60:	0000000c 	andeq	r0, r0, ip
     a64:	00000a38 	andeq	r0, r0, r8, lsr sl
     a68:	08003d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, sp}
     a6c:	00000004 	andeq	r0, r0, r4
     a70:	00000018 	andeq	r0, r0, r8, lsl r0
     a74:	00000a38 	andeq	r0, r0, r8, lsr sl
     a78:	08003d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip, sp}
     a7c:	0000009c 	muleq	r0, ip, r0
     a80:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     a84:	86038504 	strhi	r8, [r3], -r4, lsl #10
     a88:	00018e02 	andeq	r8, r1, r2, lsl #28
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	00000a38 	andeq	r0, r0, r8, lsr sl
     a94:	08003e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, ip, sp}
     a98:	00000150 	andeq	r0, r0, r0, asr r1
     a9c:	83180e41 	tsthi	r8, #1040	; 0x410
     aa0:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     aa4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     aa8:	00018e02 	andeq	r8, r1, r2, lsl #28
     aac:	00000014 	andeq	r0, r0, r4, lsl r0
     ab0:	00000a38 	andeq	r0, r0, r8, lsr sl
     ab4:	08003f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
     ab8:	00000020 	andeq	r0, r0, r0, lsr #32
     abc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac4:	0000000c 	andeq	r0, r0, ip
     ac8:	00000a38 	andeq	r0, r0, r8, lsr sl
     acc:	08003f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, sp}
     ad0:	0000000c 	andeq	r0, r0, ip
     ad4:	0000000c 	andeq	r0, r0, ip
     ad8:	00000a38 	andeq	r0, r0, r8, lsr sl
     adc:	08003fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, ip, sp}
     ae0:	0000000c 	andeq	r0, r0, ip
     ae4:	0000000c 	andeq	r0, r0, ip
     ae8:	00000a38 	andeq	r0, r0, r8, lsr sl
     aec:	08003fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, sp}
     af0:	0000000c 	andeq	r0, r0, ip
     af4:	0000000c 	andeq	r0, r0, ip
     af8:	00000a38 	andeq	r0, r0, r8, lsr sl
     afc:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
     b00:	0000000c 	andeq	r0, r0, ip
     b04:	0000000c 	andeq	r0, r0, ip
     b08:	00000a38 	andeq	r0, r0, r8, lsr sl
     b0c:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
     b10:	0000000c 	andeq	r0, r0, ip
     b14:	0000000c 	andeq	r0, r0, ip
     b18:	00000a38 	andeq	r0, r0, r8, lsr sl
     b1c:	08003fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip, sp}
     b20:	00000014 	andeq	r0, r0, r4, lsl r0
     b24:	0000000c 	andeq	r0, r0, ip
     b28:	00000a38 	andeq	r0, r0, r8, lsr sl
     b2c:	08003fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp}
     b30:	0000000c 	andeq	r0, r0, ip
     b34:	0000000c 	andeq	r0, r0, ip
     b38:	00000a38 	andeq	r0, r0, r8, lsr sl
     b3c:	08003ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
     b40:	00000010 	andeq	r0, r0, r0, lsl r0
     b44:	0000000c 	andeq	r0, r0, ip
     b48:	00000a38 	andeq	r0, r0, r8, lsr sl
     b4c:	08004000 	stmdaeq	r0, {lr}
     b50:	00000008 	andeq	r0, r0, r8
     b54:	0000000c 	andeq	r0, r0, ip
     b58:	00000a38 	andeq	r0, r0, r8, lsr sl
     b5c:	08004008 	stmdaeq	r0, {r3, lr}
     b60:	00000004 	andeq	r0, r0, r4
     b64:	0000000c 	andeq	r0, r0, ip
     b68:	00000a38 	andeq	r0, r0, r8, lsr sl
     b6c:	0800400c 	stmdaeq	r0, {r2, r3, lr}
     b70:	00000006 	andeq	r0, r0, r6
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	00000a38 	andeq	r0, r0, r8, lsr sl
     b7c:	08004012 	stmdaeq	r0, {r1, r4, lr}
     b80:	0000001a 	andeq	r0, r0, sl, lsl r0
     b84:	00000014 	andeq	r0, r0, r4, lsl r0
     b88:	00000a38 	andeq	r0, r0, r8, lsr sl
     b8c:	0800402c 	stmdaeq	r0, {r2, r3, r5, lr}
     b90:	00000028 	andeq	r0, r0, r8, lsr #32
     b94:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     b98:	00018e02 	andeq	r8, r1, r2, lsl #28
     b9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ba0:	00000a38 	andeq	r0, r0, r8, lsr sl
     ba4:	08004054 	stmdaeq	r0, {r2, r4, r6, lr}
     ba8:	00000024 	andeq	r0, r0, r4, lsr #32
     bac:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     bb0:	4c018e02 	stcmi	14, cr8, [r1], {2}
     bb4:	000ec4ce 	andeq	ip, lr, lr, asr #9
     bb8:	00000014 	andeq	r0, r0, r4, lsl r0
     bbc:	00000a38 	andeq	r0, r0, r8, lsr sl
     bc0:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
     bc4:	00000030 	andeq	r0, r0, r0, lsr r0
     bc8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     bcc:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd0:	00000018 	andeq	r0, r0, r8, lsl r0
     bd4:	00000a38 	andeq	r0, r0, r8, lsr sl
     bd8:	080040a8 	stmdaeq	r0, {r3, r5, r7, lr}
     bdc:	0000002c 	andeq	r0, r0, ip, lsr #32
     be0:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     be4:	4f018e02 	svcmi	0x00018e02
     be8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     bec:	0000000c 	andeq	r0, r0, ip
     bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
     bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bfc:	0000000c 	andeq	r0, r0, ip
     c00:	00000bec 	andeq	r0, r0, ip, ror #23
     c04:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
     c08:	00000018 	andeq	r0, r0, r8, lsl r0
     c0c:	0000000c 	andeq	r0, r0, ip
     c10:	00000bec 	andeq	r0, r0, ip, ror #23
     c14:	080040ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr}
     c18:	00000018 	andeq	r0, r0, r8, lsl r0
     c1c:	0000000c 	andeq	r0, r0, ip
     c20:	00000bec 	andeq	r0, r0, ip, ror #23
     c24:	08004104 	stmdaeq	r0, {r2, r8, lr}
     c28:	00000018 	andeq	r0, r0, r8, lsl r0
     c2c:	0000000c 	andeq	r0, r0, ip
     c30:	00000bec 	andeq	r0, r0, ip, ror #23
     c34:	0800411c 	stmdaeq	r0, {r2, r3, r4, r8, lr}
     c38:	00000018 	andeq	r0, r0, r8, lsl r0
     c3c:	0000000c 	andeq	r0, r0, ip
     c40:	00000bec 	andeq	r0, r0, ip, ror #23
     c44:	08004134 	stmdaeq	r0, {r2, r4, r5, r8, lr}
     c48:	00000010 	andeq	r0, r0, r0, lsl r0
     c4c:	0000000c 	andeq	r0, r0, ip
     c50:	00000bec 	andeq	r0, r0, ip, ror #23
     c54:	08004144 	stmdaeq	r0, {r2, r6, r8, lr}
     c58:	0000000c 	andeq	r0, r0, ip
     c5c:	0000000c 	andeq	r0, r0, ip
     c60:	00000bec 	andeq	r0, r0, ip, ror #23
     c64:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
     c68:	0000000c 	andeq	r0, r0, ip
     c6c:	0000000c 	andeq	r0, r0, ip
     c70:	00000bec 	andeq	r0, r0, ip, ror #23
     c74:	0800415c 	stmdaeq	r0, {r2, r3, r4, r6, r8, lr}
     c78:	00000010 	andeq	r0, r0, r0, lsl r0
     c7c:	0000000c 	andeq	r0, r0, ip
     c80:	00000bec 	andeq	r0, r0, ip, ror #23
     c84:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
     c88:	00000010 	andeq	r0, r0, r0, lsl r0
     c8c:	0000000c 	andeq	r0, r0, ip
     c90:	00000bec 	andeq	r0, r0, ip, ror #23
     c94:	0800417c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, lr}
     c98:	00000018 	andeq	r0, r0, r8, lsl r0
     c9c:	0000000c 	andeq	r0, r0, ip
     ca0:	00000bec 	andeq	r0, r0, ip, ror #23
     ca4:	08004194 	stmdaeq	r0, {r2, r4, r7, r8, lr}
     ca8:	00000020 	andeq	r0, r0, r0, lsr #32
     cac:	0000000c 	andeq	r0, r0, ip
     cb0:	00000bec 	andeq	r0, r0, ip, ror #23
     cb4:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
     cb8:	0000000c 	andeq	r0, r0, ip
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	00000bec 	andeq	r0, r0, ip, ror #23
     cc4:	080041c0 	stmdaeq	r0, {r6, r7, r8, lr}
     cc8:	00000028 	andeq	r0, r0, r8, lsr #32
     ccc:	00000018 	andeq	r0, r0, r8, lsl r0
     cd0:	00000bec 	andeq	r0, r0, ip, ror #23
     cd4:	080041e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, lr}
     cd8:	00000036 	andeq	r0, r0, r6, lsr r0
     cdc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     ce0:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
     ce4:	0000080e 	andeq	r0, r0, lr, lsl #16
     ce8:	00000018 	andeq	r0, r0, r8, lsl r0
     cec:	00000bec 	andeq	r0, r0, ip, ror #23
     cf0:	0800421e 	stmdaeq	r0, {r1, r2, r3, r4, r9, lr}
     cf4:	00000042 	andeq	r0, r0, r2, asr #32
     cf8:	83100e41 	tsthi	r0, #1040	; 0x410
     cfc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     d00:	00018e02 	andeq	r8, r1, r2, lsl #28
     d04:	00000014 	andeq	r0, r0, r4, lsl r0
     d08:	00000bec 	andeq	r0, r0, ip, ror #23
     d0c:	08004260 	stmdaeq	r0, {r5, r6, r9, lr}
     d10:	0000003c 	andeq	r0, r0, ip, lsr r0
     d14:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d18:	00018e02 	andeq	r8, r1, r2, lsl #28
     d1c:	00000014 	andeq	r0, r0, r4, lsl r0
     d20:	00000bec 	andeq	r0, r0, ip, ror #23
     d24:	0800429c 	stmdaeq	r0, {r2, r3, r4, r7, r9, lr}
     d28:	00000070 	andeq	r0, r0, r0, ror r0
     d2c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d30:	00018e02 	andeq	r8, r1, r2, lsl #28
     d34:	00000018 	andeq	r0, r0, r8, lsl r0
     d38:	00000bec 	andeq	r0, r0, ip, ror #23
     d3c:	0800430c 	stmdaeq	r0, {r2, r3, r8, r9, lr}
     d40:	00000048 	andeq	r0, r0, r8, asr #32
     d44:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     d48:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d4c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d50:	00000018 	andeq	r0, r0, r8, lsl r0
     d54:	00000bec 	andeq	r0, r0, ip, ror #23
     d58:	08004354 	stmdaeq	r0, {r2, r4, r6, r8, r9, lr}
     d5c:	00000038 	andeq	r0, r0, r8, lsr r0
     d60:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     d64:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d68:	00018e02 	andeq	r8, r1, r2, lsl #28
     d6c:	00000018 	andeq	r0, r0, r8, lsl r0
     d70:	00000bec 	andeq	r0, r0, ip, ror #23
     d74:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
     d78:	00000048 	andeq	r0, r0, r8, asr #32
     d7c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     d80:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d84:	00018e02 	andeq	r8, r1, r2, lsl #28
     d88:	00000014 	andeq	r0, r0, r4, lsl r0
     d8c:	00000bec 	andeq	r0, r0, ip, ror #23
     d90:	080043d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, lr}
     d94:	000000a0 	andeq	r0, r0, r0, lsr #1
     d98:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     da0:	00000018 	andeq	r0, r0, r8, lsl r0
     da4:	00000bec 	andeq	r0, r0, ip, ror #23
     da8:	08004474 	stmdaeq	r0, {r2, r4, r5, r6, sl, lr}
     dac:	0000008c 	andeq	r0, r0, ip, lsl #1
     db0:	83100e41 	tsthi	r0, #1040	; 0x410
     db4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     db8:	00018e02 	andeq	r8, r1, r2, lsl #28
     dbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc0:	00000bec 	andeq	r0, r0, ip, ror #23
     dc4:	08004500 	stmdaeq	r0, {r8, sl, lr}
     dc8:	00000054 	andeq	r0, r0, r4, asr r0
     dcc:	83180e41 	tsthi	r8, #1040	; 0x410
     dd0:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     dd4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     dd8:	00018e02 	andeq	r8, r1, r2, lsl #28
     ddc:	0000000c 	andeq	r0, r0, ip
     de0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     de4:	7c020001 	stcvc	0, cr0, [r2], {1}
     de8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dec:	0000001c 	andeq	r0, r0, ip, lsl r0
     df0:	00000ddc 	ldrdeq	r0, [r0], -ip
     df4:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
     df8:	000000a4 	andeq	r0, r0, r4, lsr #1
     dfc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     e00:	02018e02 	andeq	r8, r1, #2, 28
     e04:	c3ce0a49 	bicgt	r0, lr, #299008	; 0x49000
     e08:	0b42000e 	bleq	1080e48 <__Stack_Size+0x1080a48>
     e0c:	00000018 	andeq	r0, r0, r8, lsl r0
     e10:	00000ddc 	ldrdeq	r0, [r0], -ip
     e14:	080045f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, lr}
     e18:	00000016 	andeq	r0, r0, r6, lsl r0
     e1c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     e20:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     e24:	000ec3ce 	andeq	ip, lr, lr, asr #7
     e28:	0000001c 	andeq	r0, r0, ip, lsl r0
     e2c:	00000ddc 	ldrdeq	r0, [r0], -ip
     e30:	0800460e 	stmdaeq	r0, {r1, r2, r3, r9, sl, lr}
     e34:	0000009c 	muleq	r0, ip, r0
     e38:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
     e3c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e40:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e44:	00000001 	andeq	r0, r0, r1
     e48:	0000000c 	andeq	r0, r0, ip
     e4c:	00000ddc 	ldrdeq	r0, [r0], -ip
     e50:	080046aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, lr}
     e54:	00000010 	andeq	r0, r0, r0, lsl r0
     e58:	0000000c 	andeq	r0, r0, ip
     e5c:	00000ddc 	ldrdeq	r0, [r0], -ip
     e60:	080046ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, lr}
     e64:	0000000c 	andeq	r0, r0, ip
     e68:	0000000c 	andeq	r0, r0, ip
     e6c:	00000ddc 	ldrdeq	r0, [r0], -ip
     e70:	080046c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, lr}
     e74:	00000006 	andeq	r0, r0, r6
     e78:	0000000c 	andeq	r0, r0, ip
     e7c:	00000ddc 	ldrdeq	r0, [r0], -ip
     e80:	080046cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, lr}
     e84:	0000000c 	andeq	r0, r0, ip
     e88:	0000000c 	andeq	r0, r0, ip
     e8c:	00000ddc 	ldrdeq	r0, [r0], -ip
     e90:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
     e94:	00000006 	andeq	r0, r0, r6
     e98:	0000000c 	andeq	r0, r0, ip
     e9c:	00000ddc 	ldrdeq	r0, [r0], -ip
     ea0:	080046de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, lr}
     ea4:	00000004 	andeq	r0, r0, r4
     ea8:	0000000c 	andeq	r0, r0, ip
     eac:	00000ddc 	ldrdeq	r0, [r0], -ip
     eb0:	080046e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, lr}
     eb4:	00000004 	andeq	r0, r0, r4
     eb8:	0000000c 	andeq	r0, r0, ip
     ebc:	00000ddc 	ldrdeq	r0, [r0], -ip
     ec0:	080046e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, lr}
     ec4:	0000000a 	andeq	r0, r0, sl
     ec8:	0000000c 	andeq	r0, r0, ip
     ecc:	00000ddc 	ldrdeq	r0, [r0], -ip
     ed0:	080046f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, lr}
     ed4:	00000004 	andeq	r0, r0, r4
     ed8:	0000000c 	andeq	r0, r0, ip
     edc:	00000ddc 	ldrdeq	r0, [r0], -ip
     ee0:	080046f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, lr}
     ee4:	00000010 	andeq	r0, r0, r0, lsl r0
     ee8:	0000000c 	andeq	r0, r0, ip
     eec:	00000ddc 	ldrdeq	r0, [r0], -ip
     ef0:	08004704 	stmdaeq	r0, {r2, r8, r9, sl, lr}
     ef4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef8:	0000000c 	andeq	r0, r0, ip
     efc:	00000ddc 	ldrdeq	r0, [r0], -ip
     f00:	08004720 	stmdaeq	r0, {r5, r8, r9, sl, lr}
     f04:	0000000c 	andeq	r0, r0, ip
     f08:	00000018 	andeq	r0, r0, r8, lsl r0
     f0c:	00000ddc 	ldrdeq	r0, [r0], -ip
     f10:	0800472c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, lr}
     f14:	00000054 	andeq	r0, r0, r4, asr r0
     f18:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     f1c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f20:	00000001 	andeq	r0, r0, r1
     f24:	00000014 	andeq	r0, r0, r4, lsl r0
     f28:	00000ddc 	ldrdeq	r0, [r0], -ip
     f2c:	08004780 	stmdaeq	r0, {r7, r8, r9, sl, lr}
     f30:	0000002a 	andeq	r0, r0, sl, lsr #32
     f34:	84080e49 	strhi	r0, [r8], #-3657	; 0xe49
     f38:	00018e02 	andeq	r8, r1, r2, lsl #28
     f3c:	0000000c 	andeq	r0, r0, ip
     f40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f44:	7c020001 	stcvc	0, cr0, [r2], {1}
     f48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f4c:	0000000c 	andeq	r0, r0, ip
     f50:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f54:	080047ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, lr}
     f58:	00000034 	andeq	r0, r0, r4, lsr r0
     f5c:	0000000c 	andeq	r0, r0, ip
     f60:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f64:	080047e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, lr}
     f68:	00000030 	andeq	r0, r0, r0, lsr r0
     f6c:	0000000c 	andeq	r0, r0, ip
     f70:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f74:	08004810 	stmdaeq	r0, {r4, fp, lr}
     f78:	00000014 	andeq	r0, r0, r4, lsl r0
     f7c:	00000018 	andeq	r0, r0, r8, lsl r0
     f80:	00000f3c 	andeq	r0, r0, ip, lsr pc
     f84:	08004824 	stmdaeq	r0, {r2, r5, fp, lr}
     f88:	00000084 	andeq	r0, r0, r4, lsl #1
     f8c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
     f90:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f94:	00000001 	andeq	r0, r0, r1
     f98:	0000000c 	andeq	r0, r0, ip
     f9c:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fa0:	080048a8 	stmdaeq	r0, {r3, r5, r7, fp, lr}
     fa4:	0000000c 	andeq	r0, r0, ip
     fa8:	0000000c 	andeq	r0, r0, ip
     fac:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fb0:	080048b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, lr}
     fb4:	00000004 	andeq	r0, r0, r4
     fb8:	0000000c 	andeq	r0, r0, ip
     fbc:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fc0:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
     fc4:	00000004 	andeq	r0, r0, r4
     fc8:	0000000c 	andeq	r0, r0, ip
     fcc:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fd0:	080048bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, lr}
     fd4:	00000004 	andeq	r0, r0, r4
     fd8:	0000000c 	andeq	r0, r0, ip
     fdc:	00000f3c 	andeq	r0, r0, ip, lsr pc
     fe0:	080048c0 	stmdaeq	r0, {r6, r7, fp, lr}
     fe4:	00000004 	andeq	r0, r0, r4
     fe8:	0000000c 	andeq	r0, r0, ip
     fec:	00000f3c 	andeq	r0, r0, ip, lsr pc
     ff0:	080048c4 	stmdaeq	r0, {r2, r6, r7, fp, lr}
     ff4:	00000006 	andeq	r0, r0, r6
     ff8:	0000000c 	andeq	r0, r0, ip
     ffc:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1000:	080048ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, lr}
    1004:	00000004 	andeq	r0, r0, r4
    1008:	0000000c 	andeq	r0, r0, ip
    100c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1010:	080048ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, lr}
    1014:	0000000e 	andeq	r0, r0, lr
    1018:	0000000c 	andeq	r0, r0, ip
    101c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1020:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    1024:	00000020 	andeq	r0, r0, r0, lsr #32
    1028:	0000000c 	andeq	r0, r0, ip
    102c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1030:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
    1034:	0000000c 	andeq	r0, r0, ip
    1038:	0000000c 	andeq	r0, r0, ip
    103c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1040:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
    1044:	00000018 	andeq	r0, r0, r8, lsl r0
    1048:	0000000c 	andeq	r0, r0, ip
    104c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1050:	08004920 	stmdaeq	r0, {r5, r8, fp, lr}
    1054:	00000010 	andeq	r0, r0, r0, lsl r0
    1058:	0000000c 	andeq	r0, r0, ip
    105c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1060:	08004930 	stmdaeq	r0, {r4, r5, r8, fp, lr}
    1064:	00000020 	andeq	r0, r0, r0, lsr #32
    1068:	0000000c 	andeq	r0, r0, ip
    106c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1070:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    1074:	0000000c 	andeq	r0, r0, ip
    1078:	0000000c 	andeq	r0, r0, ip
    107c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1080:	0800495c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, lr}
    1084:	00000014 	andeq	r0, r0, r4, lsl r0
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1090:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
    1094:	00000010 	andeq	r0, r0, r0, lsl r0
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	00000f3c 	andeq	r0, r0, ip, lsr pc
    10a0:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
    10a4:	00000010 	andeq	r0, r0, r0, lsl r0
    10a8:	0000000c 	andeq	r0, r0, ip
    10ac:	00000f3c 	andeq	r0, r0, ip, lsr pc
    10b0:	08004990 	stmdaeq	r0, {r4, r7, r8, fp, lr}
    10b4:	00000018 	andeq	r0, r0, r8, lsl r0
    10b8:	0000000c 	andeq	r0, r0, ip
    10bc:	00000f3c 	andeq	r0, r0, ip, lsr pc
    10c0:	080049a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, lr}
    10c4:	00000020 	andeq	r0, r0, r0, lsr #32
    10c8:	00000014 	andeq	r0, r0, r4, lsl r0
    10cc:	00000f3c 	andeq	r0, r0, ip, lsr pc
    10d0:	080049c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, lr}
    10d4:	0000004c 	andeq	r0, r0, ip, asr #32
    10d8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    10dc:	00018e02 	andeq	r8, r1, r2, lsl #28
    10e0:	0000000c 	andeq	r0, r0, ip
    10e4:	00000f3c 	andeq	r0, r0, ip, lsr pc
    10e8:	08004a14 	stmdaeq	r0, {r2, r4, r9, fp, lr}
    10ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f0:	0000000c 	andeq	r0, r0, ip
    10f4:	00000f3c 	andeq	r0, r0, ip, lsr pc
    10f8:	08004a30 	stmdaeq	r0, {r4, r5, r9, fp, lr}
    10fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1100:	0000000c 	andeq	r0, r0, ip
    1104:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1108:	08004a48 	stmdaeq	r0, {r3, r6, r9, fp, lr}
    110c:	00000018 	andeq	r0, r0, r8, lsl r0
    1110:	0000000c 	andeq	r0, r0, ip
    1114:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1118:	08004a60 	stmdaeq	r0, {r5, r6, r9, fp, lr}
    111c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1120:	0000000c 	andeq	r0, r0, ip
    1124:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1128:	08004a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, lr}
    112c:	00000030 	andeq	r0, r0, r0, lsr r0
    1130:	0000000c 	andeq	r0, r0, ip
    1134:	00000f3c 	andeq	r0, r0, ip, lsr pc
    1138:	08004aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, lr}
    113c:	00000014 	andeq	r0, r0, r4, lsl r0
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1148:	7c020001 	stcvc	0, cr0, [r2], {1}
    114c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1150:	00000018 	andeq	r0, r0, r8, lsl r0
    1154:	00001140 	andeq	r1, r0, r0, asr #2
    1158:	08004ac0 	stmdaeq	r0, {r6, r7, r9, fp, lr}
    115c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1160:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1164:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
    1168:	000ec3ce 	andeq	ip, lr, lr, asr #7
    116c:	0000000c 	andeq	r0, r0, ip
    1170:	00001140 	andeq	r1, r0, r0, asr #2
    1174:	08004ada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, lr}
    1178:	0000000a 	andeq	r0, r0, sl
    117c:	0000000c 	andeq	r0, r0, ip
    1180:	00001140 	andeq	r1, r0, r0, asr #2
    1184:	08004ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, lr}
    1188:	0000000c 	andeq	r0, r0, ip
    118c:	0000000c 	andeq	r0, r0, ip
    1190:	00001140 	andeq	r1, r0, r0, asr #2
    1194:	08004af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, lr}
    1198:	00000014 	andeq	r0, r0, r4, lsl r0
    119c:	0000000c 	andeq	r0, r0, ip
    11a0:	00001140 	andeq	r1, r0, r0, asr #2
    11a4:	08004b04 	stmdaeq	r0, {r2, r8, r9, fp, lr}
    11a8:	0000000c 	andeq	r0, r0, ip
    11ac:	0000000c 	andeq	r0, r0, ip
    11b0:	00001140 	andeq	r1, r0, r0, asr #2
    11b4:	08004b10 	stmdaeq	r0, {r4, r8, r9, fp, lr}
    11b8:	0000002c 	andeq	r0, r0, ip, lsr #32
    11bc:	0000000c 	andeq	r0, r0, ip
    11c0:	00001140 	andeq	r1, r0, r0, asr #2
    11c4:	08004b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, lr}
    11c8:	00000028 	andeq	r0, r0, r8, lsr #32
    11cc:	0000000c 	andeq	r0, r0, ip
    11d0:	00001140 	andeq	r1, r0, r0, asr #2
    11d4:	08004b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, lr}
    11d8:	00000014 	andeq	r0, r0, r4, lsl r0
    11dc:	0000000c 	andeq	r0, r0, ip
    11e0:	00001140 	andeq	r1, r0, r0, asr #2
    11e4:	08004b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, lr}
    11e8:	00000010 	andeq	r0, r0, r0, lsl r0
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    11f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	000011ec 	andeq	r1, r0, ip, ror #3
    1204:	08004b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, lr}
    1208:	0000003c 	andeq	r0, r0, ip, lsr r0
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	000011ec 	andeq	r1, r0, ip, ror #3
    1214:	08004bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, lr}
    1218:	00000038 	andeq	r0, r0, r8, lsr r0
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	000011ec 	andeq	r1, r0, ip, ror #3
    1224:	08004bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
    1228:	00000014 	andeq	r0, r0, r4, lsl r0
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	000011ec 	andeq	r1, r0, ip, ror #3
    1234:	08004c10 	stmdaeq	r0, {r4, sl, fp, lr}
    1238:	0000000c 	andeq	r0, r0, ip
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	000011ec 	andeq	r1, r0, ip, ror #3
    1244:	08004c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, lr}
    1248:	00000014 	andeq	r0, r0, r4, lsl r0
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	000011ec 	andeq	r1, r0, ip, ror #3
    1254:	08004c30 	stmdaeq	r0, {r4, r5, sl, fp, lr}
    1258:	0000000c 	andeq	r0, r0, ip
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	000011ec 	andeq	r1, r0, ip, ror #3
    1264:	08004c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, lr}
    1268:	00000014 	andeq	r0, r0, r4, lsl r0
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	000011ec 	andeq	r1, r0, ip, ror #3
    1274:	08004c50 	stmdaeq	r0, {r4, r6, sl, fp, lr}
    1278:	00000010 	andeq	r0, r0, r0, lsl r0
    127c:	0000000c 	andeq	r0, r0, ip
    1280:	000011ec 	andeq	r1, r0, ip, ror #3
    1284:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
    1288:	00000014 	andeq	r0, r0, r4, lsl r0
    128c:	0000000c 	andeq	r0, r0, ip
    1290:	000011ec 	andeq	r1, r0, ip, ror #3
    1294:	08004c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, lr}
    1298:	00000014 	andeq	r0, r0, r4, lsl r0
    129c:	0000000c 	andeq	r0, r0, ip
    12a0:	000011ec 	andeq	r1, r0, ip, ror #3
    12a4:	08004c88 	stmdaeq	r0, {r3, r7, sl, fp, lr}
    12a8:	00000014 	andeq	r0, r0, r4, lsl r0
    12ac:	0000000c 	andeq	r0, r0, ip
    12b0:	000011ec 	andeq	r1, r0, ip, ror #3
    12b4:	08004c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, lr}
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	0000000c 	andeq	r0, r0, ip
    12c0:	000011ec 	andeq	r1, r0, ip, ror #3
    12c4:	08004cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, lr}
    12c8:	0000000c 	andeq	r0, r0, ip
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	000011ec 	andeq	r1, r0, ip, ror #3
    12d4:	08004cc0 	stmdaeq	r0, {r6, r7, sl, fp, lr}
    12d8:	00000014 	andeq	r0, r0, r4, lsl r0
    12dc:	0000000c 	andeq	r0, r0, ip
    12e0:	000011ec 	andeq	r1, r0, ip, ror #3
    12e4:	08004cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, lr}
    12e8:	00000020 	andeq	r0, r0, r0, lsr #32
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	000011ec 	andeq	r1, r0, ip, ror #3
    12f4:	08004cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, lr}
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	0000000c 	andeq	r0, r0, ip
    1300:	000011ec 	andeq	r1, r0, ip, ror #3
    1304:	08004d00 	stmdaeq	r0, {r8, sl, fp, lr}
    1308:	00000010 	andeq	r0, r0, r0, lsl r0
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	000011ec 	andeq	r1, r0, ip, ror #3
    1314:	08004d10 	stmdaeq	r0, {r4, r8, sl, fp, lr}
    1318:	0000000c 	andeq	r0, r0, ip
    131c:	00000014 	andeq	r0, r0, r4, lsl r0
    1320:	000011ec 	andeq	r1, r0, ip, ror #3
    1324:	08004d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp, lr}
    1328:	00000084 	andeq	r0, r0, r4, lsl #1
    132c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1330:	00018e02 	andeq	r8, r1, r2, lsl #28
    1334:	0000000c 	andeq	r0, r0, ip
    1338:	000011ec 	andeq	r1, r0, ip, ror #3
    133c:	08004da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, lr}
    1340:	00000018 	andeq	r0, r0, r8, lsl r0
    1344:	0000000c 	andeq	r0, r0, ip
    1348:	000011ec 	andeq	r1, r0, ip, ror #3
    134c:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    1350:	00000018 	andeq	r0, r0, r8, lsl r0
    1354:	0000000c 	andeq	r0, r0, ip
    1358:	000011ec 	andeq	r1, r0, ip, ror #3
    135c:	08004dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, lr}
    1360:	00000018 	andeq	r0, r0, r8, lsl r0
    1364:	0000000c 	andeq	r0, r0, ip
    1368:	000011ec 	andeq	r1, r0, ip, ror #3
    136c:	08004de8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, lr}
    1370:	00000018 	andeq	r0, r0, r8, lsl r0
    1374:	0000000c 	andeq	r0, r0, ip
    1378:	000011ec 	andeq	r1, r0, ip, ror #3
    137c:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
    1380:	00000018 	andeq	r0, r0, r8, lsl r0
    1384:	0000000c 	andeq	r0, r0, ip
    1388:	000011ec 	andeq	r1, r0, ip, ror #3
    138c:	08004e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, lr}
    1390:	0000000c 	andeq	r0, r0, ip
    1394:	0000000c 	andeq	r0, r0, ip
    1398:	000011ec 	andeq	r1, r0, ip, ror #3
    139c:	08004e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, lr}
    13a0:	0000000c 	andeq	r0, r0, ip
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	000011ec 	andeq	r1, r0, ip, ror #3
    13ac:	08004e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, lr}
    13b0:	0000000c 	andeq	r0, r0, ip
    13b4:	0000000c 	andeq	r0, r0, ip
    13b8:	000011ec 	andeq	r1, r0, ip, ror #3
    13bc:	08004e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, lr}
    13c0:	00000028 	andeq	r0, r0, r8, lsr #32
    13c4:	00000014 	andeq	r0, r0, r4, lsl r0
    13c8:	000011ec 	andeq	r1, r0, ip, ror #3
    13cc:	08004e64 	stmdaeq	r0, {r2, r5, r6, r9, sl, fp, lr}
    13d0:	0000002e 	andeq	r0, r0, lr, lsr #32
    13d4:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    13d8:	040e5401 	streq	r5, [lr], #-1025	; 0x401
    13dc:	0000000c 	andeq	r0, r0, ip
    13e0:	000011ec 	andeq	r1, r0, ip, ror #3
    13e4:	08004e92 	stmdaeq	r0, {r1, r4, r7, r9, sl, fp, lr}
    13e8:	00000012 	andeq	r0, r0, r2, lsl r0
    13ec:	0000000c 	andeq	r0, r0, ip
    13f0:	000011ec 	andeq	r1, r0, ip, ror #3
    13f4:	08004ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, lr}
    13f8:	00000014 	andeq	r0, r0, r4, lsl r0
    13fc:	0000000c 	andeq	r0, r0, ip
    1400:	000011ec 	andeq	r1, r0, ip, ror #3
    1404:	08004eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, lr}
    1408:	0000000c 	andeq	r0, r0, ip
    140c:	0000000c 	andeq	r0, r0, ip
    1410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1414:	7c020001 	stcvc	0, cr0, [r2], {1}
    1418:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    141c:	0000000c 	andeq	r0, r0, ip
    1420:	0000140c 	andeq	r1, r0, ip, lsl #8
    1424:	08004ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, lr}
    1428:	00000018 	andeq	r0, r0, r8, lsl r0
    142c:	0000000c 	andeq	r0, r0, ip
    1430:	0000140c 	andeq	r1, r0, ip, lsl #8
    1434:	08004edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, lr}
    1438:	0000000c 	andeq	r0, r0, ip
    143c:	0000000c 	andeq	r0, r0, ip
    1440:	0000140c 	andeq	r1, r0, ip, lsl #8
    1444:	08004ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, lr}
    1448:	00000028 	andeq	r0, r0, r8, lsr #32
    144c:	0000000c 	andeq	r0, r0, ip
    1450:	0000140c 	andeq	r1, r0, ip, lsl #8
    1454:	08004f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, lr}
    1458:	00000018 	andeq	r0, r0, r8, lsl r0
    145c:	0000000c 	andeq	r0, r0, ip
    1460:	0000140c 	andeq	r1, r0, ip, lsl #8
    1464:	08004f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, lr}
    1468:	0000000c 	andeq	r0, r0, ip
    146c:	0000000c 	andeq	r0, r0, ip
    1470:	0000140c 	andeq	r1, r0, ip, lsl #8
    1474:	08004f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, lr}
    1478:	0000001c 	andeq	r0, r0, ip, lsl r0
    147c:	0000000c 	andeq	r0, r0, ip
    1480:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1484:	7c020001 	stcvc	0, cr0, [r2], {1}
    1488:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	0000147c 	andeq	r1, r0, ip, ror r4
    1494:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    1498:	00000032 	andeq	r0, r0, r2, lsr r0
    149c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    14a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    14a4:	00000001 	andeq	r0, r0, r1
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	0000147c 	andeq	r1, r0, ip, ror r4
    14b0:	08004f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, lr}
    14b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    14b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    14bc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    14c0:	00000001 	andeq	r0, r0, r1
    14c4:	00000024 	andeq	r0, r0, r4, lsr #32
    14c8:	0000147c 	andeq	r1, r0, ip, ror r4
    14cc:	08004fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, lr}
    14d0:	000000c8 	andeq	r0, r0, r8, asr #1
    14d4:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14d8:	76018e02 	strvc	r8, [r1], -r2, lsl #28
    14dc:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    14e0:	620b4200 	andvs	r4, fp, #0, 4
    14e4:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    14e8:	000b4200 	andeq	r4, fp, r0, lsl #4
    14ec:	0000000c 	andeq	r0, r0, ip
    14f0:	0000147c 	andeq	r1, r0, ip, ror r4
    14f4:	08005084 	stmdaeq	r0, {r2, r7, ip, lr}
    14f8:	0000003c 	andeq	r0, r0, ip, lsr r0
    14fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1500:	0000147c 	andeq	r1, r0, ip, ror r4
    1504:	080050c0 	stmdaeq	r0, {r6, r7, ip, lr}
    1508:	00000074 	andeq	r0, r0, r4, ror r0
    150c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1510:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1514:	00018e02 	andeq	r8, r1, r2, lsl #28
    1518:	00000018 	andeq	r0, r0, r8, lsl r0
    151c:	0000147c 	andeq	r1, r0, ip, ror r4
    1520:	08005134 	stmdaeq	r0, {r2, r4, r5, r8, ip, lr}
    1524:	00000088 	andeq	r0, r0, r8, lsl #1
    1528:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    152c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1530:	00000001 	andeq	r0, r0, r1
    1534:	00000018 	andeq	r0, r0, r8, lsl r0
    1538:	0000147c 	andeq	r1, r0, ip, ror r4
    153c:	080051bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, lr}
    1540:	00000084 	andeq	r0, r0, r4, lsl #1
    1544:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1548:	86038504 	strhi	r8, [r3], -r4, lsl #10
    154c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1550:	00000018 	andeq	r0, r0, r8, lsl r0
    1554:	0000147c 	andeq	r1, r0, ip, ror r4
    1558:	08005240 	stmdaeq	r0, {r6, r9, ip, lr}
    155c:	00000068 	andeq	r0, r0, r8, rrx
    1560:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    1564:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1568:	00000001 	andeq	r0, r0, r1
    156c:	0000000c 	andeq	r0, r0, ip
    1570:	0000147c 	andeq	r1, r0, ip, ror r4
    1574:	080052a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, lr}
    1578:	00000022 	andeq	r0, r0, r2, lsr #32
    157c:	0000000c 	andeq	r0, r0, ip
    1580:	0000147c 	andeq	r1, r0, ip, ror r4
    1584:	080052ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, ip, lr}
    1588:	00000012 	andeq	r0, r0, r2, lsl r0
    158c:	0000000c 	andeq	r0, r0, ip
    1590:	0000147c 	andeq	r1, r0, ip, ror r4
    1594:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    1598:	00000014 	andeq	r0, r0, r4, lsl r0
    159c:	0000000c 	andeq	r0, r0, ip
    15a0:	0000147c 	andeq	r1, r0, ip, ror r4
    15a4:	080052f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, lr}
    15a8:	00000010 	andeq	r0, r0, r0, lsl r0
    15ac:	0000000c 	andeq	r0, r0, ip
    15b0:	0000147c 	andeq	r1, r0, ip, ror r4
    15b4:	08005300 	stmdaeq	r0, {r8, r9, ip, lr}
    15b8:	00000012 	andeq	r0, r0, r2, lsl r0
    15bc:	0000000c 	andeq	r0, r0, ip
    15c0:	0000147c 	andeq	r1, r0, ip, ror r4
    15c4:	08005312 	stmdaeq	r0, {r1, r4, r8, r9, ip, lr}
    15c8:	00000018 	andeq	r0, r0, r8, lsl r0
    15cc:	0000000c 	andeq	r0, r0, ip
    15d0:	0000147c 	andeq	r1, r0, ip, ror r4
    15d4:	0800532a 	stmdaeq	r0, {r1, r3, r5, r8, r9, ip, lr}
    15d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    15dc:	0000000c 	andeq	r0, r0, ip
    15e0:	0000147c 	andeq	r1, r0, ip, ror r4
    15e4:	08005346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, lr}
    15e8:	00000012 	andeq	r0, r0, r2, lsl r0
    15ec:	0000000c 	andeq	r0, r0, ip
    15f0:	0000147c 	andeq	r1, r0, ip, ror r4
    15f4:	08005358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, lr}
    15f8:	00000004 	andeq	r0, r0, r4
    15fc:	0000000c 	andeq	r0, r0, ip
    1600:	0000147c 	andeq	r1, r0, ip, ror r4
    1604:	0800535c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip, lr}
    1608:	00000008 	andeq	r0, r0, r8
    160c:	0000000c 	andeq	r0, r0, ip
    1610:	0000147c 	andeq	r1, r0, ip, ror r4
    1614:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    1618:	00000012 	andeq	r0, r0, r2, lsl r0
    161c:	0000000c 	andeq	r0, r0, ip
    1620:	0000147c 	andeq	r1, r0, ip, ror r4
    1624:	08005376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, lr}
    1628:	0000000e 	andeq	r0, r0, lr
    162c:	0000000c 	andeq	r0, r0, ip
    1630:	0000147c 	andeq	r1, r0, ip, ror r4
    1634:	08005384 	stmdaeq	r0, {r2, r7, r8, r9, ip, lr}
    1638:	0000001a 	andeq	r0, r0, sl, lsl r0
    163c:	00000018 	andeq	r0, r0, r8, lsl r0
    1640:	0000147c 	andeq	r1, r0, ip, ror r4
    1644:	0800539e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, ip, lr}
    1648:	00000034 	andeq	r0, r0, r4, lsr r0
    164c:	83100e41 	tsthi	r0, #1040	; 0x410
    1650:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1654:	00018e02 	andeq	r8, r1, r2, lsl #28
    1658:	00000014 	andeq	r0, r0, r4, lsl r0
    165c:	0000147c 	andeq	r1, r0, ip, ror r4
    1660:	080053d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, ip, lr}
    1664:	00000014 	andeq	r0, r0, r4, lsl r0
    1668:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    166c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1670:	00000014 	andeq	r0, r0, r4, lsl r0
    1674:	0000147c 	andeq	r1, r0, ip, ror r4
    1678:	080053e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, ip, lr}
    167c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1680:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1684:	00018e02 	andeq	r8, r1, r2, lsl #28
    1688:	00000014 	andeq	r0, r0, r4, lsl r0
    168c:	0000147c 	andeq	r1, r0, ip, ror r4
    1690:	08005400 	stmdaeq	r0, {sl, ip, lr}
    1694:	00000014 	andeq	r0, r0, r4, lsl r0
    1698:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    169c:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a0:	0000000c 	andeq	r0, r0, ip
    16a4:	0000147c 	andeq	r1, r0, ip, ror r4
    16a8:	08005414 	stmdaeq	r0, {r2, r4, sl, ip, lr}
    16ac:	00000006 	andeq	r0, r0, r6
    16b0:	0000000c 	andeq	r0, r0, ip
    16b4:	0000147c 	andeq	r1, r0, ip, ror r4
    16b8:	0800541a 	stmdaeq	r0, {r1, r3, r4, sl, ip, lr}
    16bc:	00000010 	andeq	r0, r0, r0, lsl r0
    16c0:	0000000c 	andeq	r0, r0, ip
    16c4:	0000147c 	andeq	r1, r0, ip, ror r4
    16c8:	0800542a 	stmdaeq	r0, {r1, r3, r5, sl, ip, lr}
    16cc:	00000010 	andeq	r0, r0, r0, lsl r0
    16d0:	00000018 	andeq	r0, r0, r8, lsl r0
    16d4:	0000147c 	andeq	r1, r0, ip, ror r4
    16d8:	0800543a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, lr}
    16dc:	0000003c 	andeq	r0, r0, ip, lsr r0
    16e0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    16e4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    16e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    16ec:	0000000c 	andeq	r0, r0, ip
    16f0:	0000147c 	andeq	r1, r0, ip, ror r4
    16f4:	08005476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, lr}
    16f8:	00000010 	andeq	r0, r0, r0, lsl r0
    16fc:	0000000c 	andeq	r0, r0, ip
    1700:	0000147c 	andeq	r1, r0, ip, ror r4
    1704:	08005486 	stmdaeq	r0, {r1, r2, r7, sl, ip, lr}
    1708:	00000014 	andeq	r0, r0, r4, lsl r0
    170c:	0000000c 	andeq	r0, r0, ip
    1710:	0000147c 	andeq	r1, r0, ip, ror r4
    1714:	0800549a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, lr}
    1718:	00000010 	andeq	r0, r0, r0, lsl r0
    171c:	0000000c 	andeq	r0, r0, ip
    1720:	0000147c 	andeq	r1, r0, ip, ror r4
    1724:	080054aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, ip, lr}
    1728:	00000014 	andeq	r0, r0, r4, lsl r0
    172c:	0000000c 	andeq	r0, r0, ip
    1730:	0000147c 	andeq	r1, r0, ip, ror r4
    1734:	080054be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sl, ip, lr}
    1738:	00000018 	andeq	r0, r0, r8, lsl r0
    173c:	0000000c 	andeq	r0, r0, ip
    1740:	0000147c 	andeq	r1, r0, ip, ror r4
    1744:	080054d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, ip, lr}
    1748:	00000018 	andeq	r0, r0, r8, lsl r0
    174c:	0000000c 	andeq	r0, r0, ip
    1750:	0000147c 	andeq	r1, r0, ip, ror r4
    1754:	080054ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, lr}
    1758:	00000018 	andeq	r0, r0, r8, lsl r0
    175c:	0000000c 	andeq	r0, r0, ip
    1760:	0000147c 	andeq	r1, r0, ip, ror r4
    1764:	08005506 	stmdaeq	r0, {r1, r2, r8, sl, ip, lr}
    1768:	00000018 	andeq	r0, r0, r8, lsl r0
    176c:	0000000c 	andeq	r0, r0, ip
    1770:	0000147c 	andeq	r1, r0, ip, ror r4
    1774:	0800551e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, lr}
    1778:	00000010 	andeq	r0, r0, r0, lsl r0
    177c:	0000000c 	andeq	r0, r0, ip
    1780:	0000147c 	andeq	r1, r0, ip, ror r4
    1784:	0800552e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, ip, lr}
    1788:	00000014 	andeq	r0, r0, r4, lsl r0
    178c:	0000000c 	andeq	r0, r0, ip
    1790:	0000147c 	andeq	r1, r0, ip, ror r4
    1794:	08005542 	stmdaeq	r0, {r1, r6, r8, sl, ip, lr}
    1798:	00000010 	andeq	r0, r0, r0, lsl r0
    179c:	0000000c 	andeq	r0, r0, ip
    17a0:	0000147c 	andeq	r1, r0, ip, ror r4
    17a4:	08005552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip, lr}
    17a8:	00000014 	andeq	r0, r0, r4, lsl r0
    17ac:	0000000c 	andeq	r0, r0, ip
    17b0:	0000147c 	andeq	r1, r0, ip, ror r4
    17b4:	08005566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, lr}
    17b8:	00000010 	andeq	r0, r0, r0, lsl r0
    17bc:	0000000c 	andeq	r0, r0, ip
    17c0:	0000147c 	andeq	r1, r0, ip, ror r4
    17c4:	08005576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, lr}
    17c8:	00000014 	andeq	r0, r0, r4, lsl r0
    17cc:	0000000c 	andeq	r0, r0, ip
    17d0:	0000147c 	andeq	r1, r0, ip, ror r4
    17d4:	0800558a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip, lr}
    17d8:	00000010 	andeq	r0, r0, r0, lsl r0
    17dc:	0000000c 	andeq	r0, r0, ip
    17e0:	0000147c 	andeq	r1, r0, ip, ror r4
    17e4:	0800559a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, ip, lr}
    17e8:	00000014 	andeq	r0, r0, r4, lsl r0
    17ec:	0000000c 	andeq	r0, r0, ip
    17f0:	0000147c 	andeq	r1, r0, ip, ror r4
    17f4:	080055ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr}
    17f8:	00000010 	andeq	r0, r0, r0, lsl r0
    17fc:	0000000c 	andeq	r0, r0, ip
    1800:	0000147c 	andeq	r1, r0, ip, ror r4
    1804:	080055be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, ip, lr}
    1808:	00000010 	andeq	r0, r0, r0, lsl r0
    180c:	0000000c 	andeq	r0, r0, ip
    1810:	0000147c 	andeq	r1, r0, ip, ror r4
    1814:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
    1818:	00000010 	andeq	r0, r0, r0, lsl r0
    181c:	0000000c 	andeq	r0, r0, ip
    1820:	0000147c 	andeq	r1, r0, ip, ror r4
    1824:	080055de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, ip, lr}
    1828:	00000010 	andeq	r0, r0, r0, lsl r0
    182c:	0000000c 	andeq	r0, r0, ip
    1830:	0000147c 	andeq	r1, r0, ip, ror r4
    1834:	080055ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, ip, lr}
    1838:	00000010 	andeq	r0, r0, r0, lsl r0
    183c:	0000000c 	andeq	r0, r0, ip
    1840:	0000147c 	andeq	r1, r0, ip, ror r4
    1844:	080055fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
    1848:	00000010 	andeq	r0, r0, r0, lsl r0
    184c:	0000000c 	andeq	r0, r0, ip
    1850:	0000147c 	andeq	r1, r0, ip, ror r4
    1854:	0800560e 	stmdaeq	r0, {r1, r2, r3, r9, sl, ip, lr}
    1858:	00000014 	andeq	r0, r0, r4, lsl r0
    185c:	0000000c 	andeq	r0, r0, ip
    1860:	0000147c 	andeq	r1, r0, ip, ror r4
    1864:	08005622 	stmdaeq	r0, {r1, r5, r9, sl, ip, lr}
    1868:	00000014 	andeq	r0, r0, r4, lsl r0
    186c:	0000000c 	andeq	r0, r0, ip
    1870:	0000147c 	andeq	r1, r0, ip, ror r4
    1874:	08005636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, ip, lr}
    1878:	00000014 	andeq	r0, r0, r4, lsl r0
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	0000147c 	andeq	r1, r0, ip, ror r4
    1884:	0800564a 	stmdaeq	r0, {r1, r3, r6, r9, sl, ip, lr}
    1888:	00000014 	andeq	r0, r0, r4, lsl r0
    188c:	0000000c 	andeq	r0, r0, ip
    1890:	0000147c 	andeq	r1, r0, ip, ror r4
    1894:	0800565e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, ip, lr}
    1898:	00000014 	andeq	r0, r0, r4, lsl r0
    189c:	00000014 	andeq	r0, r0, r4, lsl r0
    18a0:	0000147c 	andeq	r1, r0, ip, ror r4
    18a4:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    18a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    18ac:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    18b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    18b4:	00000014 	andeq	r0, r0, r4, lsl r0
    18b8:	0000147c 	andeq	r1, r0, ip, ror r4
    18bc:	0800568e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, ip, lr}
    18c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    18c4:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    18c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    18cc:	00000014 	andeq	r0, r0, r4, lsl r0
    18d0:	0000147c 	andeq	r1, r0, ip, ror r4
    18d4:	080056aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, ip, lr}
    18d8:	00000044 	andeq	r0, r0, r4, asr #32
    18dc:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    18e0:	00018e02 	andeq	r8, r1, r2, lsl #28
    18e4:	0000000c 	andeq	r0, r0, ip
    18e8:	0000147c 	andeq	r1, r0, ip, ror r4
    18ec:	080056ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, lr}
    18f0:	00000018 	andeq	r0, r0, r8, lsl r0
    18f4:	0000000c 	andeq	r0, r0, ip
    18f8:	0000147c 	andeq	r1, r0, ip, ror r4
    18fc:	08005706 	stmdaeq	r0, {r1, r2, r8, r9, sl, ip, lr}
    1900:	00000018 	andeq	r0, r0, r8, lsl r0
    1904:	0000000c 	andeq	r0, r0, ip
    1908:	0000147c 	andeq	r1, r0, ip, ror r4
    190c:	0800571e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, ip, lr}
    1910:	00000018 	andeq	r0, r0, r8, lsl r0
    1914:	0000000c 	andeq	r0, r0, ip
    1918:	0000147c 	andeq	r1, r0, ip, ror r4
    191c:	08005736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip, lr}
    1920:	00000016 	andeq	r0, r0, r6, lsl r0
    1924:	0000000c 	andeq	r0, r0, ip
    1928:	0000147c 	andeq	r1, r0, ip, ror r4
    192c:	0800574c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, lr}
    1930:	00000016 	andeq	r0, r0, r6, lsl r0
    1934:	0000000c 	andeq	r0, r0, ip
    1938:	0000147c 	andeq	r1, r0, ip, ror r4
    193c:	08005762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, ip, lr}
    1940:	00000016 	andeq	r0, r0, r6, lsl r0
    1944:	0000000c 	andeq	r0, r0, ip
    1948:	0000147c 	andeq	r1, r0, ip, ror r4
    194c:	08005778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, lr}
    1950:	00000016 	andeq	r0, r0, r6, lsl r0
    1954:	0000000c 	andeq	r0, r0, ip
    1958:	0000147c 	andeq	r1, r0, ip, ror r4
    195c:	0800578e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, ip, lr}
    1960:	00000004 	andeq	r0, r0, r4
    1964:	0000000c 	andeq	r0, r0, ip
    1968:	0000147c 	andeq	r1, r0, ip, ror r4
    196c:	08005792 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, ip, lr}
    1970:	00000004 	andeq	r0, r0, r4
    1974:	0000000c 	andeq	r0, r0, ip
    1978:	0000147c 	andeq	r1, r0, ip, ror r4
    197c:	08005796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, lr}
    1980:	00000004 	andeq	r0, r0, r4
    1984:	0000000c 	andeq	r0, r0, ip
    1988:	0000147c 	andeq	r1, r0, ip, ror r4
    198c:	0800579a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, ip, lr}
    1990:	00000004 	andeq	r0, r0, r4
    1994:	0000000c 	andeq	r0, r0, ip
    1998:	0000147c 	andeq	r1, r0, ip, ror r4
    199c:	0800579e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, ip, lr}
    19a0:	00000004 	andeq	r0, r0, r4
    19a4:	0000000c 	andeq	r0, r0, ip
    19a8:	0000147c 	andeq	r1, r0, ip, ror r4
    19ac:	080057a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, ip, lr}
    19b0:	00000006 	andeq	r0, r0, r6
    19b4:	0000000c 	andeq	r0, r0, ip
    19b8:	0000147c 	andeq	r1, r0, ip, ror r4
    19bc:	080057a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, lr}
    19c0:	00000016 	andeq	r0, r0, r6, lsl r0
    19c4:	0000000c 	andeq	r0, r0, ip
    19c8:	0000147c 	andeq	r1, r0, ip, ror r4
    19cc:	080057be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    19d0:	0000001a 	andeq	r0, r0, sl, lsl r0
    19d4:	00000030 	andeq	r0, r0, r0, lsr r0
    19d8:	0000147c 	andeq	r1, r0, ip, ror r4
    19dc:	080057d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, lr}
    19e0:	0000006e 	andeq	r0, r0, lr, rrx
    19e4:	83180e41 	tsthi	r8, #1040	; 0x410
    19e8:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    19ec:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    19f0:	62018e02 	andvs	r8, r1, #2, 28
    19f4:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    19f8:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    19fc:	500b4200 	andpl	r4, fp, r0, lsl #4
    1a00:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1a04:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1a08:	0000000c 	andeq	r0, r0, ip
    1a0c:	0000147c 	andeq	r1, r0, ip, ror r4
    1a10:	08005846 	stmdaeq	r0, {r1, r2, r6, fp, ip, lr}
    1a14:	00000016 	andeq	r0, r0, r6, lsl r0
    1a18:	0000000c 	andeq	r0, r0, ip
    1a1c:	0000147c 	andeq	r1, r0, ip, ror r4
    1a20:	0800585c 	stmdaeq	r0, {r2, r3, r4, r6, fp, ip, lr}
    1a24:	0000001a 	andeq	r0, r0, sl, lsl r0
    1a28:	00000048 	andeq	r0, r0, r8, asr #32
    1a2c:	0000147c 	andeq	r1, r0, ip, ror r4
    1a30:	08005876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp, ip, lr}
    1a34:	000000b6 	strheq	r0, [r0], -r6
    1a38:	83180e41 	tsthi	r8, #1040	; 0x410
    1a3c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1a40:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1a44:	4d018e02 	stcmi	14, cr8, [r1, #-8]
    1a48:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1a4c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1a50:	480b4200 	stmdami	fp, {r9, lr}
    1a54:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1a58:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1a5c:	600b4200 	andvs	r4, fp, r0, lsl #4
    1a60:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1a64:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1a68:	5c0b4200 	sfmpl	f4, 4, [fp], {-0}
    1a6c:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1a70:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1a74:	0000000c 	andeq	r0, r0, ip
    1a78:	0000147c 	andeq	r1, r0, ip, ror r4
    1a7c:	0800592c 	stmdaeq	r0, {r2, r3, r5, r8, fp, ip, lr}
    1a80:	00000010 	andeq	r0, r0, r0, lsl r0
    1a84:	0000000c 	andeq	r0, r0, ip
    1a88:	0000147c 	andeq	r1, r0, ip, ror r4
    1a8c:	0800593c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip, lr}
    1a90:	00000006 	andeq	r0, r0, r6
    1a94:	0000000c 	andeq	r0, r0, ip
    1a98:	0000147c 	andeq	r1, r0, ip, ror r4
    1a9c:	08005942 	stmdaeq	r0, {r1, r6, r8, fp, ip, lr}
    1aa0:	00000006 	andeq	r0, r0, r6
    1aa4:	0000000c 	andeq	r0, r0, ip
    1aa8:	0000147c 	andeq	r1, r0, ip, ror r4
    1aac:	08005948 	stmdaeq	r0, {r3, r6, r8, fp, ip, lr}
    1ab0:	00000006 	andeq	r0, r0, r6
    1ab4:	0000000c 	andeq	r0, r0, ip
    1ab8:	0000147c 	andeq	r1, r0, ip, ror r4
    1abc:	0800594e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, ip, lr}
    1ac0:	00000008 	andeq	r0, r0, r8
    1ac4:	0000000c 	andeq	r0, r0, ip
    1ac8:	0000147c 	andeq	r1, r0, ip, ror r4
    1acc:	08005956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, ip, lr}
    1ad0:	00000006 	andeq	r0, r0, r6
    1ad4:	0000000c 	andeq	r0, r0, ip
    1ad8:	0000147c 	andeq	r1, r0, ip, ror r4
    1adc:	0800595c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, lr}
    1ae0:	00000006 	andeq	r0, r0, r6
    1ae4:	0000000c 	andeq	r0, r0, ip
    1ae8:	0000147c 	andeq	r1, r0, ip, ror r4
    1aec:	08005962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip, lr}
    1af0:	0000000c 	andeq	r0, r0, ip
    1af4:	0000000c 	andeq	r0, r0, ip
    1af8:	0000147c 	andeq	r1, r0, ip, ror r4
    1afc:	0800596e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp, ip, lr}
    1b00:	00000008 	andeq	r0, r0, r8
    1b04:	0000000c 	andeq	r0, r0, ip
    1b08:	0000147c 	andeq	r1, r0, ip, ror r4
    1b0c:	08005976 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, fp, ip, lr}
    1b10:	00000016 	andeq	r0, r0, r6, lsl r0
    1b14:	0000000c 	andeq	r0, r0, ip
    1b18:	0000147c 	andeq	r1, r0, ip, ror r4
    1b1c:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    1b20:	00000008 	andeq	r0, r0, r8
    1b24:	0000000c 	andeq	r0, r0, ip
    1b28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1b2c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1b30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b34:	00000024 	andeq	r0, r0, r4, lsr #32
    1b38:	00001b24 	andeq	r1, r0, r4, lsr #22
    1b3c:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    1b40:	00000094 	muleq	r0, r4, r0
    1b44:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1b48:	5b018e02 	blpl	65358 <__Stack_Size+0x64f58>
    1b4c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1b50:	620b4500 	andvs	r4, fp, #0, 10
    1b54:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1b58:	000b4200 	andeq	r4, fp, r0, lsl #4
    1b5c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b60:	00001b24 	andeq	r1, r0, r4, lsr #22
    1b64:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
    1b68:	00000088 	andeq	r0, r0, r8, lsl #1
    1b6c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1b70:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1b74:	280e5d01 	stmdacs	lr, {r0, r8, sl, fp, ip, lr}
    1b78:	000c0e62 	andeq	r0, ip, r2, ror #28
    1b7c:	0000000c 	andeq	r0, r0, ip
    1b80:	00001b24 	andeq	r1, r0, r4, lsr #22
    1b84:	08005ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip, lr}
    1b88:	00000016 	andeq	r0, r0, r6, lsl r0
    1b8c:	00000014 	andeq	r0, r0, r4, lsl r0
    1b90:	00001b24 	andeq	r1, r0, r4, lsr #22
    1b94:	08005ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip, lr}
    1b98:	00000020 	andeq	r0, r0, r0, lsr #32
    1b9c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1ba0:	00018e02 	andeq	r8, r1, r2, lsl #28
    1ba4:	0000000c 	andeq	r0, r0, ip
    1ba8:	00001b24 	andeq	r1, r0, r4, lsr #22
    1bac:	08005ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, lr}
    1bb0:	0000000c 	andeq	r0, r0, ip
    1bb4:	0000000c 	andeq	r0, r0, ip
    1bb8:	00001b24 	andeq	r1, r0, r4, lsr #22
    1bbc:	08005af2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, fp, ip, lr}
    1bc0:	00000018 	andeq	r0, r0, r8, lsl r0
    1bc4:	00000014 	andeq	r0, r0, r4, lsl r0
    1bc8:	00001b24 	andeq	r1, r0, r4, lsr #22
    1bcc:	08005b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp, ip, lr}
    1bd0:	00000032 	andeq	r0, r0, r2, lsr r0
    1bd4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1bd8:	00018e02 	andeq	r8, r1, r2, lsl #28
    1bdc:	0000000c 	andeq	r0, r0, ip
    1be0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1be4:	08005b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, lr}
    1be8:	00000012 	andeq	r0, r0, r2, lsl r0
    1bec:	0000000c 	andeq	r0, r0, ip
    1bf0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1bf4:	08005b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, ip, lr}
    1bf8:	00000016 	andeq	r0, r0, r6, lsl r0
    1bfc:	0000000c 	andeq	r0, r0, ip
    1c00:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c04:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
    1c08:	00000016 	andeq	r0, r0, r6, lsl r0
    1c0c:	0000000c 	andeq	r0, r0, ip
    1c10:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c14:	08005b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    1c18:	00000018 	andeq	r0, r0, r8, lsl r0
    1c1c:	0000000c 	andeq	r0, r0, ip
    1c20:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c24:	08005b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, lr}
    1c28:	00000016 	andeq	r0, r0, r6, lsl r0
    1c2c:	0000000c 	andeq	r0, r0, ip
    1c30:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c34:	08005ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp, ip, lr}
    1c38:	00000018 	andeq	r0, r0, r8, lsl r0
    1c3c:	0000000c 	andeq	r0, r0, ip
    1c40:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c44:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
    1c48:	00000008 	andeq	r0, r0, r8
    1c4c:	0000000c 	andeq	r0, r0, ip
    1c50:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c54:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
    1c58:	00000008 	andeq	r0, r0, r8
    1c5c:	0000000c 	andeq	r0, r0, ip
    1c60:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c64:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
    1c68:	0000000c 	andeq	r0, r0, ip
    1c6c:	0000000c 	andeq	r0, r0, ip
    1c70:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c74:	08005bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}
    1c78:	00000012 	andeq	r0, r0, r2, lsl r0
    1c7c:	0000000c 	andeq	r0, r0, ip
    1c80:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c84:	08005bee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    1c88:	00000012 	andeq	r0, r0, r2, lsl r0
    1c8c:	0000000c 	andeq	r0, r0, ip
    1c90:	00001b24 	andeq	r1, r0, r4, lsr #22
    1c94:	08005c00 	stmdaeq	r0, {sl, fp, ip, lr}
    1c98:	00000018 	andeq	r0, r0, r8, lsl r0
    1c9c:	0000000c 	andeq	r0, r0, ip
    1ca0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1ca4:	08005c18 	stmdaeq	r0, {r3, r4, sl, fp, ip, lr}
    1ca8:	00000018 	andeq	r0, r0, r8, lsl r0
    1cac:	0000000c 	andeq	r0, r0, ip
    1cb0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1cb4:	08005c30 	stmdaeq	r0, {r4, r5, sl, fp, ip, lr}
    1cb8:	00000018 	andeq	r0, r0, r8, lsl r0
    1cbc:	0000000c 	andeq	r0, r0, ip
    1cc0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1cc4:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
    1cc8:	00000016 	andeq	r0, r0, r6, lsl r0
    1ccc:	0000000c 	andeq	r0, r0, ip
    1cd0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1cd4:	08005c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
    1cd8:	00000018 	andeq	r0, r0, r8, lsl r0
    1cdc:	0000000c 	andeq	r0, r0, ip
    1ce0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1ce4:	08005c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp, ip, lr}
    1ce8:	0000000c 	andeq	r0, r0, ip
    1cec:	0000000c 	andeq	r0, r0, ip
    1cf0:	00001b24 	andeq	r1, r0, r4, lsr #22
    1cf4:	08005c82 	stmdaeq	r0, {r1, r7, sl, fp, ip, lr}
    1cf8:	00000008 	andeq	r0, r0, r8
    1cfc:	00000014 	andeq	r0, r0, r4, lsl r0
    1d00:	00001b24 	andeq	r1, r0, r4, lsr #22
    1d04:	08005c8a 	stmdaeq	r0, {r1, r3, r7, sl, fp, ip, lr}
    1d08:	0000003e 	andeq	r0, r0, lr, lsr r0
    1d0c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1d10:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d14:	0000000c 	andeq	r0, r0, ip
    1d18:	00001b24 	andeq	r1, r0, r4, lsr #22
    1d1c:	08005cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, ip, lr}
    1d20:	0000000e 	andeq	r0, r0, lr
    1d24:	0000000c 	andeq	r0, r0, ip
    1d28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1d2c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1d30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1d34:	0000001c 	andeq	r0, r0, ip, lsl r0
    1d38:	00001d24 	andeq	r1, r0, r4, lsr #26
    1d3c:	08005d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, ip, lr}
    1d40:	00000050 	andeq	r0, r0, r0, asr r0
    1d44:	000d0941 	andeq	r0, sp, r1, asr #18
    1d48:	8d080e44 	stchi	14, cr0, [r8, #-272]	; 0xfffffef0
    1d4c:	56018e02 	strpl	r8, [r1], -r2, lsl #28
    1d50:	000ec0ce 	andeq	ip, lr, lr, asr #1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0, 10
      14:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
      18:	535f4343 	cmppl	pc, #201326593	; 0xc000001
      1c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
      20:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      24:	00676966 	rsbeq	r6, r7, r6, ror #18
      28:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
      2c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
      30:	53550065 	cmppl	r5, #101	; 0x65
      34:	5f545241 	svcpl	0x00545241
      38:	00646d43 	rsbeq	r6, r4, r3, asr #26
      3c:	5f434352 	svcpl	0x00434352
      40:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
      44:	47007469 	strmi	r7, [r0, -r9, ror #8]
      48:	5f4f4950 	svcpl	0x004f4950
      4c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
      50:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
      54:	63007469 	movwvs	r7, #1129	; 0x469
      58:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
      5c:	6d754c72 	ldclvs	12, cr4, [r5, #-456]!	; 0xfffffe38
      60:	736f6e69 	cmnvc	pc, #1680	; 0x690
      64:	00797469 	rsbseq	r7, r9, r9, ror #8
      68:	5f4d4954 	svcpl	0x004d4954
      6c:	73657250 	cmnvc	r5, #80, 4
      70:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
      74:	53420072 	movtpl	r0, #8306	; 0x2072
      78:	54005252 	strpl	r5, [r0], #-594	; 0x252
      7c:	4f5f4d49 	svcmi	0x005f4d49
      80:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
      84:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
      88:	0074696e 	rsbseq	r6, r4, lr, ror #18
      8c:	61656c43 	cmnvs	r5, r3, asr #24
      90:	66754272 			; <UNDEFINED> instruction: 0x66754272
      94:	32726566 	rsbscc	r6, r2, #427819008	; 0x19800000
      98:	54003635 	strpl	r3, [r0], #-1589	; 0x635
      9c:	4f5f4d49 	svcmi	0x005f4d49
      a0:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
      a4:	70795474 	rsbsvc	r5, r9, r4, ror r4
      a8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      ac:	52626700 	rsbpl	r6, r2, #0, 14
      b0:	66754278 			; <UNDEFINED> instruction: 0x66754278
      b4:	57726566 	ldrbpl	r6, [r2, -r6, ror #10]!
      b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
      bc:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
      c0:	00726574 	rsbseq	r6, r2, r4, ror r5
      c4:	4f495047 	svcmi	0x00495047
      c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; d0 <_Minimum_Stack_Size-0x30>
      cc:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
      d0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
      d4:	616c6f50 	cmnvs	ip, r0, asr pc
      d8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      e0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      e4:	6162006e 	cmnvs	r2, lr, rrx
      e8:	61726475 	cmnvs	r2, r5, ror r4
      ec:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
      f0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      f4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
      f8:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
      fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     100:	6f682f00 	svcvs	0x00682f00
     104:	632f656d 			; <UNDEFINED> instruction: 0x632f656d
     108:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0x56c
     10c:	4d2f746e 	cfstrsmi	mvf7, [pc, #-440]!	; ffffff5c <SCS_BASE+0x1fff1f5c>
     110:	3330314f 	teqcc	r0, #-1073741805	; 0xc0000013
     114:	626f522f 	rsbvs	r5, pc, #-268435454	; 0xf0000002
     118:	4600746f 	strmi	r7, [r0], -pc, ror #8
     11c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     120:	616e6f69 	cmnvs	lr, r9, ror #30
     124:	6174536c 	cmnvs	r4, ip, ror #6
     128:	42006574 	andmi	r6, r0, #116, 10	; 0x1d000000
     12c:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     130:	5f657461 	svcpl	0x00657461
     134:	004c5844 	subeq	r5, ip, r4, asr #16
     138:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     13c:	6d754c74 	ldclvs	12, cr4, [r5, #-464]!	; 0xfffffe30
     140:	736f6e69 	cmnvc	pc, #1680	; 0x690
     144:	00797469 	rsbseq	r7, r9, r9, ror #8
     148:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     14c:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     150:	45007469 	strmi	r7, [r0, #-1129]	; 0x469
     154:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     158:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     15c:	69007375 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
     160:	5f74696e 	svcpl	0x0074696e
     164:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     168:	69006769 	stmdbvs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     16c:	4f6f666e 	svcmi	0x006f666e
     170:	00747362 	rsbseq	r7, r4, r2, ror #6
     174:	64785462 	ldrbtvs	r5, [r8], #-1122	; 0x462
     178:	61746144 	cmnvs	r4, r4, asr #2
     17c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     180:	756d5f74 	strbvc	r5, [sp, #-3956]!	; 0xf74
     184:	00636973 	rsbeq	r6, r3, r3, ror r9
     188:	5f434352 	svcpl	0x00434352
     18c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     190:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     194:	53550067 	cmppl	r5, #103	; 0x67
     198:	5f545241 	svcpl	0x00545241
     19c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     1a0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     1a4:	6f006874 	svcvs	0x00006874
     1a8:	6e417475 	mcrvs	4, 2, r7, cr1, cr5, {3}
     1ac:	00656c67 	rsbeq	r6, r5, r7, ror #24
     1b0:	766f4d62 	strbtvc	r4, [pc], -r2, ror #26
     1b4:	00676e69 	rsbeq	r6, r7, r9, ror #28
     1b8:	5f4d4954 	svcpl	0x004d4954
     1bc:	4931434f 	ldmdbmi	r1!, {r0, r1, r2, r3, r6, r8, r9, lr}
     1c0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     1c4:	5f4d4954 	svcpl	0x004d4954
     1c8:	5031434f 	eorspl	r4, r1, pc, asr #6
     1cc:	6f6c6572 	svcvs	0x006c6572
     1d0:	6f436461 	svcvs	0x00436461
     1d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     1d8:	41535500 	cmpmi	r3, r0, lsl #10
     1dc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
     1e0:	42706f74 	rsbsmi	r6, r0, #116, 30	; 0x1d0
     1e4:	00737469 	rsbseq	r7, r3, r9, ror #8
     1e8:	53414c46 	movtpl	r4, #7238	; 0x1c46
     1ec:	72505f48 	subsvc	r5, r0, #72, 30	; 0x120
     1f0:	74656665 	strbtvc	r6, [r5], #-1637	; 0x665
     1f4:	75426863 	strbvc	r6, [r2, #-2147]	; 0x863
     1f8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     1fc:	00646d43 	rsbeq	r6, r4, r3, asr #26
     200:	5f4d4954 	svcpl	0x004d4954
     204:	6449434f 	strbvs	r4, [r9], #-847	; 0x34f
     208:	7453656c 	ldrbvc	r6, [r3], #-1388	; 0x56c
     20c:	00657461 	rsbeq	r7, r5, r1, ror #8
     210:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     214:	5f6b6369 	svcpl	0x006b6369
     218:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
     21c:	616f6c65 	cmnvs	pc, r5, ror #24
     220:	50470064 	subpl	r0, r7, r4, rrx
     224:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     228:	0074696e 	rsbseq	r6, r4, lr, ror #18
     22c:	5f434352 	svcpl	0x00434352
     230:	4b4c4350 	blmi	1310f78 <__Stack_Size+0x1310b78>
     234:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     238:	00676966 	rsbeq	r6, r7, r6, ror #18
     23c:	31524343 	cmpcc	r2, r3, asr #6
     240:	6c61565f 	stclvs	6, cr5, [r1], #-380	; 0xfffffe84
     244:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0x300
     248:	64006465 	strvs	r6, [r0], #-1125	; 0x465
     24c:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
     250:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
     254:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     258:	70535f4f 	subsvc	r5, r3, pc, asr #30
     25c:	5f646565 	svcpl	0x00646565
     260:	7a484d32 	bvc	1213730 <__Stack_Size+0x1213330>
     264:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     268:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
     26c:	65526172 	ldrbvs	r6, [r2, #-370]	; 0x172
     270:	54470064 	strbpl	r0, [r7], #-100	; 0x64
     274:	54005250 	strpl	r5, [r0], #-592	; 0x250
     278:	74534478 	ldrbvc	r4, [r3], #-1144	; 0x478
     27c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     280:	43435200 	movtmi	r5, #12800	; 0x3200
     284:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     288:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
     28c:	53455348 	movtpl	r5, #21320	; 0x5348
     290:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     294:	54007055 	strpl	r7, [r0], #-85	; 0x55
     298:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2a0 <_Minimum_Stack_Size+0x1a0>
     29c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     2a0:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     2a4:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
     2a8:	61437465 	cmpvs	r3, r5, ror #8
     2ac:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
     2b0:	54003165 	strpl	r3, [r0], #-357	; 0x165
     2b4:	505f4d49 	subspl	r4, pc, r9, asr #26
     2b8:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xc75
     2bc:	41535500 	cmpmi	r3, r0, lsl #10
     2c0:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     2c4:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     2c8:	00657461 	rsbeq	r7, r5, r1, ror #8
     2cc:	5f4d4954 	svcpl	0x004d4954
     2d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     2d4:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     2d8:	6f697369 	svcvs	0x00697369
     2dc:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     2e0:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffff39b <SCS_BASE+0x1fff139b>
     2e4:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     2e8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     2ec:	53550065 	cmppl	r5, #101	; 0x65
     2f0:	5f545241 	svcpl	0x00545241
     2f4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
     2f8:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
     2fc:	00617461 	rsbeq	r7, r1, r1, ror #8
     300:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
     304:	61446200 	mrsvs	r6, (UNDEF: 100)
     308:	76006174 			; <UNDEFINED> instruction: 0x76006174
     30c:	00363175 	eorseq	r3, r6, r5, ror r1
     310:	7a7a7562 	bvc	1e9d8a0 <__Stack_Size+0x1e9d4a0>
     314:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
     318:	616c6544 	cmnvs	ip, r4, asr #10
     31c:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
     320:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     324:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     328:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     32c:	62006665 	andvs	r6, r0, #105906176	; 0x6500000
     330:	746e6553 	strbtvc	r6, [lr], #-1363	; 0x553
     334:	61746144 	cmnvs	r4, r4, asr #2
     338:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     33c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     340:	54497261 	strbpl	r7, [r9], #-609	; 0x261
     344:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     348:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     34c:	43007469 	movwmi	r7, #1129	; 0x469
     350:	00315243 	eorseq	r5, r1, r3, asr #4
     354:	32524343 	subscc	r4, r2, #201326593	; 0xc000001
     358:	52434300 	subpl	r4, r3, #0, 6
     35c:	43430033 	movtmi	r0, #12339	; 0x3033
     360:	43003452 	movwmi	r3, #1106	; 0x452
     364:	31524d43 	cmpcc	r2, r3, asr #26
     368:	4d434300 	stclmi	3, cr4, [r3, #-0]
     36c:	47003252 	smlsdmi	r0, r2, r2, r3
     370:	5f4f4950 	svcpl	0x004f4950
     374:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     378:	30315f64 	eorscc	r5, r1, r4, ror #30
     37c:	007a484d 	rsbseq	r4, sl, sp, asr #16
     380:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     384:	5f657479 	svcpl	0x00657479
     388:	63004350 	movwvs	r4, #848	; 0x350
     38c:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0x61
     390:	55006572 	strpl	r6, [r0, #-1394]	; 0x572
     394:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     398:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     39c:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     3a0:	53770061 	cmnpl	r7, #97	; 0x61
     3a4:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xe65
     3a8:	00617461 	rsbeq	r7, r1, r1, ror #8
     3ac:	2f505041 	svccs	0x00505041
     3b0:	2f637273 	svccs	0x00637273
     3b4:	6e69616d 	powvsez	f6, f1, #5.0
     3b8:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
     3bc:	5f4f4950 	svcpl	0x004f4950
     3c0:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
     3c4:	00737469 	rsbseq	r7, r3, r9, ror #8
     3c8:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xf56
     3cc:	00656761 	rsbeq	r6, r5, r1, ror #14
     3d0:	69666e69 	stmdbvs	r6!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     3d4:	6574696e 	ldrbvs	r6, [r4, #-2414]!	; 0x96e
     3d8:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
     3dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     3e0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     3e4:	6d65526e 	sfmvs	f5, 2, [r5, #-440]!	; 0xfffffe48
     3e8:	6f437061 	svcvs	0x00437061
     3ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3f0:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     3f4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     3f8:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     3fc:	00657479 	rsbeq	r7, r5, r9, ror r4
     400:	30447852 	subcc	r7, r4, r2, asr r8
     404:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     408:	70757272 	rsbsvc	r7, r5, r2, ror r2
     40c:	57500074 			; <UNDEFINED> instruction: 0x57500074
     410:	61425f52 	cmpvs	r2, r2, asr pc
     414:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     418:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
     41c:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
     420:	72500064 	subsvc	r0, r0, #100	; 0x64
     424:	43746e69 	cmnmi	r4, #1680	; 0x690
     428:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
     42c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     430:	50470073 	subpl	r0, r7, r3, ror r0
     434:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 318 <_Minimum_Stack_Size+0x218>
     438:	5f65646f 	svcpl	0x0065646f
     43c:	00445049 	subeq	r5, r4, r9, asr #32
     440:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     444:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     448:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     44c:	775f6574 			; <UNDEFINED> instruction: 0x775f6574
     450:	0064726f 	rsbeq	r7, r4, pc, ror #4
     454:	4f495047 	svcmi	0x00495047
     458:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 460 <__Stack_Size+0x60>
     45c:	50495f65 	subpl	r5, r9, r5, ror #30
     460:	53550055 	cmppl	r5, #85	; 0x55
     464:	5f545241 	svcpl	0x00545241
     468:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     46c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     470:	67007469 	strvs	r7, [r0, -r9, ror #8]
     474:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
     478:	00656c67 	rsbeq	r6, r5, r7, ror #24
     47c:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     480:	5f657479 	svcpl	0x00657479
     484:	004c5844 	subeq	r5, ip, r4, asr #16
     488:	4f495047 	svcmi	0x00495047
     48c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 494 <__Stack_Size+0x94>
     490:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff533 <SCS_BASE+0x1fff1533>
     494:	444f5f74 	strbmi	r5, [pc], #-3956	; 49c <__Stack_Size+0x9c>
     498:	44785400 	ldrbtmi	r5, [r8], #-1024	; 0x400
     49c:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     4a0:	67003631 	smladxvs	r0, r1, r6, r3
     4a4:	736d3177 	cmnvc	sp, #-1073741795	; 0xc000001d
     4a8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     4ac:	00726574 	rsbseq	r6, r2, r4, ror r5
     4b0:	32337576 	eorscc	r7, r3, #494927872	; 0x1d800000
     4b4:	43435200 	movtmi	r5, #12800	; 0x3200
     4b8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4bc:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4c0:	43687069 	cmnmi	r8, #105	; 0x69
     4c4:	6b636f6c 	blvs	18dc27c <__Stack_Size+0x18dbe7c>
     4c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     4cc:	4349564e 	movtmi	r5, #38478	; 0x964e
     4d0:	5152495f 	cmppl	r2, pc, asr r9
     4d4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     4d8:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
     4dc:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
     4e0:	00524549 	subseq	r4, r2, r9, asr #10
     4e4:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
     4e8:	696d754c 	stmdbvs	sp!, {r2, r3, r6, r8, sl, ip, sp, lr}^
     4ec:	69736f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     4f0:	67007974 	smlsdxvs	r0, r4, r9, r7
     4f4:	6d695477 	cfstrdvs	mvd5, [r9, #-476]!	; 0xfffffe24
     4f8:	44676e69 	strbtmi	r6, [r7], #-3689	; 0xe69
     4fc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     500:	41535500 	cmpmi	r3, r0, lsl #10
     504:	545f5452 	ldrbpl	r5, [pc], #-1106	; 50c <__Stack_Size+0x10c>
     508:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     50c:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     510:	4f5f4d49 	svcmi	0x005f4d49
     514:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
     518:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     51c:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     520:	69006572 	stmdbvs	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
     524:	5f74696e 	svcpl	0x0074696e
     528:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     52c:	54007374 	strpl	r7, [r0], #-884	; 0x374
     530:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
     534:	74657065 	strbtvc	r7, [r5], #-101	; 0x65
     538:	6f697469 	svcvs	0x00697469
     53c:	756f436e 	strbvc	r4, [pc, #-878]!	; 1d6 <_Minimum_Stack_Size+0xd6>
     540:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     544:	6e657300 	cdpvs	3, 6, cr7, cr5, cr0, {0}
     548:	00726f73 	rsbseq	r6, r2, r3, ror pc
     54c:	5f4d4954 	svcpl	0x004d4954
     550:	504e434f 	subpl	r4, lr, pc, asr #6
     554:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
     558:	00797469 	rsbseq	r7, r9, r9, ror #8
     55c:	6c65446d 	cfstrdvs	mvd4, [r5], #-436	; 0xfffffe4c
     560:	55007961 	strpl	r7, [r0, #-2401]	; 0x961
     564:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     568:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     56c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     570:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     574:	6c006572 	cfstr32vs	mvfx6, [r0], {114}	; 0x72
     578:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
     57c:	0066664f 	rsbeq	r6, r6, pc, asr #12
     580:	52454343 	subpl	r4, r5, #201326593	; 0xc000001
     584:	736f5000 	cmnvc	pc, #0
     588:	6f697469 	svcvs	0x00697469
     58c:	6142006e 	cmpvs	r2, lr, rrx
     590:	61726475 	cmnvs	r2, r5, ror r4
     594:	505f6574 	subspl	r6, pc, r4, ror r5	; <UNPREDICTABLE>
     598:	55530043 	ldrbpl	r0, [r3, #-67]	; 0x43
     59c:	53454343 	movtpl	r4, #21315	; 0x5343
     5a0:	564e0053 			; <UNDEFINED> instruction: 0x564e0053
     5a4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5a8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     5ac:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     5b0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5b4:	53494400 	movtpl	r4, #37888	; 0x9400
     5b8:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     5bc:	43435200 	movtmi	r5, #12800	; 0x3200
     5c0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     5c4:	72655031 	rsbvc	r5, r5, #49	; 0x31
     5c8:	43687069 	cmnmi	r8, #105	; 0x69
     5cc:	6b636f6c 	blvs	18dc384 <__Stack_Size+0x18dbf84>
     5d0:	00646d43 	rsbeq	r6, r4, r3, asr #26
     5d4:	63656843 	cmnvs	r5, #4390912	; 0x430000
     5d8:	77654e6b 	strbvc	r4, [r5, -fp, ror #28]!
     5dc:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
     5e0:	6f006576 	svcvs	0x00006576
     5e4:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
     5e8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     5ec:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
     5f0:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
     5f4:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xf74
     5f8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     5fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     600:	756f435f 	strbvc	r4, [pc, #-863]!	; 2a9 <_Minimum_Stack_Size+0x1a9>
     604:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     608:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     60c:	41535500 	cmpmi	r3, r0, lsl #10
     610:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 4d0 <__Stack_Size+0xd0>
     614:	0065646f 	rsbeq	r6, r5, pc, ror #8
     618:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     61c:	435f3154 	cmpmi	pc, #84, 2
     620:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     624:	61727567 	cmnvs	r2, r7, ror #10
     628:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     62c:	444e4900 	strbmi	r4, [lr], #-2304	; 0x900
     630:	63005845 	movwvs	r5, #2117	; 0x845
     634:	6b636568 	blvs	18d9bdc <__Stack_Size+0x18d97dc>
     638:	7473624f 	ldrbtvc	r6, [r3], #-591	; 0x24f
     63c:	656c6361 	strbvs	r6, [ip, #-865]!	; 0x361
     640:	434d5300 	movtmi	r5, #54016	; 0xd300
     644:	43520052 	cmpmi	r2, #82	; 0x52
     648:	53485f43 	movtpl	r5, #36675	; 0x8f43
     64c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     650:	00676966 	rsbeq	r6, r7, r6, ror #18
     654:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     658:	61485f54 	cmpvs	r8, r4, asr pc
     65c:	61776472 	cmnvs	r7, r2, ror r4
     660:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
     664:	6f43776f 	svcvs	0x0043776f
     668:	6f72746e 	svcvs	0x0072746e
     66c:	6e61006c 	cdpvs	0, 6, cr0, cr1, cr12, {3}
     670:	5f656c67 	svcpl	0x00656c67
     674:	6d726f6e 	ldclvs	15, cr6, [r2, #-440]!	; 0xfffffe48
     678:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
     67c:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     680:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     684:	5f747075 	svcpl	0x00747075
     688:	00736d31 	rsbseq	r6, r3, r1, lsr sp
     68c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     690:	5f6b6369 	svcpl	0x006b6369
     694:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     698:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     69c:	6f697461 	svcvs	0x00697461
     6a0:	4f50006e 	svcmi	0x0050006e
     6a4:	74005452 	strvc	r5, [r0], #-1106	; 0x452
     6a8:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
     6ac:	007a7a75 	rsbseq	r7, sl, r5, ror sl
     6b0:	52706267 	rsbspl	r6, r0, #1879048198	; 0x70000006
     6b4:	746e4978 	strbtvc	r4, [lr], #-2424	; 0x978
     6b8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     6bc:	75427470 	strbvc	r7, [r2, #-1136]	; 0x470
     6c0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     6c4:	43435200 	movtmi	r5, #12800	; 0x3200
     6c8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     6cc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     6d0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     6d4:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
     6d8:	4f5f4d49 	svcmi	0x005f4d49
     6dc:	64494e43 	strbvs	r4, [r9], #-3651	; 0xe43
     6e0:	7453656c 	ldrbvc	r6, [r3], #-1388	; 0x56c
     6e4:	00657461 	rsbeq	r7, r5, r1, ror #8
     6e8:	5f4d4954 	svcpl	0x004d4954
     6ec:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     6f0:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
     6f4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     6f8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     6fc:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     700:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     704:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     708:	00657275 	rsbeq	r7, r5, r5, ror r2
     70c:	65725077 	ldrbvs	r5, [r2, #-119]!	; 0x77
     710:	746e6573 	strbtvc	r6, [lr], #-1395	; 0x573
     714:	00736f50 	rsbseq	r6, r3, r0, asr pc
     718:	6f666e69 	svcvs	0x00666e69
     71c:	43435200 	movtmi	r5, #12800	; 0x3200
     720:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     724:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     728:	00676966 	rsbeq	r6, r7, r6, ror #18
     72c:	5f6c7864 	svcpl	0x006c7864
     730:	5f746567 	svcpl	0x00746567
     734:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0x572
     738:	6200746c 	andvs	r7, r0, #108, 8	; 0x6c000000
     73c:	706d6554 	rsbvc	r6, sp, r4, asr r5
     740:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     744:	52495f43 	subpl	r5, r9, #268	; 0x10c
     748:	61684351 	cmnvs	r8, r1, asr r3
     74c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     750:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     754:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
     758:	00646f69 	rsbeq	r6, r4, r9, ror #30
     75c:	5f434352 	svcpl	0x00434352
     760:	4b4c4350 	blmi	13114a8 <__Stack_Size+0x13110a8>
     764:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     768:	00676966 	rsbeq	r6, r7, r6, ror #18
     76c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     770:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
     774:	616c4674 	smcvs	50276	; 0xc464
     778:	61745367 	cmnvs	r4, r7, ror #6
     77c:	00737574 	rsbseq	r7, r3, r4, ror r5
     780:	41746573 	cmnmi	r4, r3, ror r5
     784:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     788:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     78c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     790:	47007469 	strmi	r7, [r0, -r9, ror #8]
     794:	5f4f4950 	svcpl	0x004f4950
     798:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     79c:	5f46415f 	svcpl	0x0046415f
     7a0:	5400444f 	strpl	r4, [r0], #-1103	; 0x44f
     7a4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     7a8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     7ac:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     7b0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     7b4:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
     7b8:	5f4f4950 	svcpl	0x004f4950
     7bc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     7c0:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     7c4:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     7c8:	5f485341 	svcpl	0x00485341
     7cc:	4c746553 	cfldr64mi	mvdx6, [r4], #-332	; 0xfffffeb4
     7d0:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
     7d4:	54007963 	strpl	r7, [r0], #-2403	; 0x963
     7d8:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     7dc:	36316574 			; <UNDEFINED> instruction: 0x36316574
     7e0:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     7e4:	34204320 	strtcc	r4, [r0], #-800	; 0x320
     7e8:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
     7ec:	31303220 	teqcc	r0, r0, lsr #4
     7f0:	32353035 	eorscc	r3, r5, #53	; 0x35
     7f4:	72282039 	eorvc	r2, r8, #57	; 0x39
     7f8:	61656c65 	cmnvs	r5, r5, ror #24
     7fc:	20296573 	eorcs	r6, r9, r3, ror r5
     800:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     804:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     808:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     80c:	5f342d64 	svcpl	0x00342d64
     810:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
     814:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     818:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     81c:	6f697369 	svcvs	0x00697369
     820:	3232206e 	eorscc	r2, r2, #110	; 0x6e
     824:	37373937 			; <UNDEFINED> instruction: 0x37373937
     828:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     82c:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     830:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     834:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     838:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     83c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     840:	672d2062 	strvs	r2, [sp, -r2, rrx]!
     844:	734f2d20 	movtvc	r2, #64800	; 0xfd20
     848:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     84c:	6f632d6f 	svcvs	0x00632d6f
     850:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
     854:	73795300 	cmnvc	r9, #0, 6
     858:	6b636954 	blvs	18dadb0 <__Stack_Size+0x18da9b0>
     85c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     860:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     864:	65730067 	ldrbvs	r0, [r3, #-103]!	; 0x67
     868:	65705374 	ldrbvs	r5, [r0, #-884]!	; 0x374
     86c:	6c006465 	cfstrsvs	mvf6, [r0], {101}	; 0x65
     870:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
     874:	61006e4f 	tstvs	r0, pc, asr #28
     878:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     87c:	43435200 	movtmi	r5, #12800	; 0x3200
     880:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     884:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     888:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     88c:	47007375 	smlsdxmi	r0, r5, r3, r7
     890:	534f4950 	movtpl	r4, #63824	; 0xf950
     894:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     898:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     89c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     8a0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     8a4:	4d434f5f 	stclmi	15, cr4, [r3, #-380]	; 0xfffffe84
     8a8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     8ac:	4f495047 	svcmi	0x00495047
     8b0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 8b8 <__Stack_Size+0x4b8>
     8b4:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     8b8:	4552004e 	ldrbmi	r0, [r2, #-78]	; 0x4e
     8bc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8c0:	00304445 	eorseq	r4, r0, r5, asr #8
     8c4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     8c8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     8cc:	45520031 	ldrbmi	r0, [r2, #-49]	; 0x31
     8d0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8d4:	00324445 	eorseq	r4, r2, r5, asr #8
     8d8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     8dc:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     8e0:	45520033 	ldrbmi	r0, [r2, #-51]	; 0x33
     8e4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8e8:	00344445 	eorseq	r4, r4, r5, asr #8
     8ec:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     8f0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     8f4:	45520035 	ldrbmi	r0, [r2, #-53]	; 0x35
     8f8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     8fc:	00364445 	eorseq	r4, r6, r5, asr #8
     900:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     904:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     908:	45520074 	ldrbmi	r0, [r2, #-116]	; 0x74
     90c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     910:	00384445 	eorseq	r4, r8, r5, asr #8
     914:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     918:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     91c:	69720039 	ldmdbvs	r2!, {r0, r3, r4, r5}^
     920:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
     924:	6172666e 	cmnvs	r2, lr, ror #12
     928:	00646552 	rsbeq	r6, r4, r2, asr r5
     92c:	4f495047 	svcmi	0x00495047
     930:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 938 <__Stack_Size+0x538>
     934:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     938:	0050505f 	subseq	r5, r0, pc, asr r0
     93c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     940:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     944:	414d4400 	cmpmi	sp, r0, lsl #8
     948:	50470052 	subpl	r0, r7, r2, asr r0
     94c:	535f4f49 	cmppl	pc, #292	; 0x124
     950:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     954:	65684300 	strbvs	r4, [r8, #-768]!	; 0x300
     958:	69546b63 	ldmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     95c:	754f656d 	strbvc	r6, [pc, #-1389]	; 3f7 <_Minimum_Stack_Size+0x2f7>
     960:	78520074 	ldmdavc	r2, {r2, r4, r5, r6}^
     964:	74794244 	ldrbtvc	r4, [r9], #-580	; 0x244
     968:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     96c:	6944004c 	stmdbvs	r4, {r2, r3, r6}^
     970:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     974:	41535565 	cmpmi	r3, r5, ror #10
     978:	00315452 	eorseq	r5, r1, r2, asr r4
     97c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     980:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
     984:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     988:	74006769 	strvc	r6, [r0], #-1897	; 0x769
     98c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
     990:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
     994:	72666e49 	rsbvc	r6, r6, #1168	; 0x490
     998:	64657261 	strbtvs	r7, [r5], #-609	; 0x261
     99c:	65686300 	strbvs	r6, [r8, #-768]!	; 0x300
     9a0:	754c6b63 	strbvc	r6, [ip, #-2915]	; 0xb63
     9a4:	6f6e696d 	svcvs	0x006e696d
     9a8:	79746973 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     9ac:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     9b0:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     9b4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     9b8:	79530067 	ldmdbvc	r3, {r0, r1, r2, r5, r6}^
     9bc:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     9c0:	6f435f6b 	svcvs	0x00435f6b
     9c4:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     9c8:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
     9cc:	61745300 	cmnvs	r4, r0, lsl #6
     9d0:	69447472 	stmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
     9d4:	756f6373 	strbvc	r6, [pc, #-883]!	; 669 <__Stack_Size+0x269>
     9d8:	6f00746e 	svcvs	0x0000746e
     9dc:	70537475 	subsvc	r7, r3, r5, ror r4
     9e0:	00646565 	rsbeq	r6, r4, r5, ror #10
     9e4:	4f495047 	svcmi	0x00495047
     9e8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     9ec:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     9f0:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
     9f4:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     9f8:	6172666e 	cmnvs	r2, lr, ror #12
     9fc:	00646552 	rsbeq	r6, r4, r2, asr r5
     a00:	4f495047 	svcmi	0x00495047
     a04:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     a08:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a0c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a10:	746f6e00 	strbtvc	r6, [pc], #-3584	; a18 <__Stack_Size+0x618>
     a14:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     a18:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffffad3 <SCS_BASE+0x1fff1ad3>
     a1c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     a20:	6174534e 	cmnvs	r4, lr, asr #6
     a24:	52006574 	andpl	r6, r0, #116, 10	; 0x1d000000
     a28:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     a2c:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     a30:	4b4c4353 	blmi	1311784 <__Stack_Size+0x1311384>
     a34:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     a38:	45006563 	strmi	r6, [r0, #-1379]	; 0x563
     a3c:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     a40:	49540045 	ldmdbmi	r4, {r0, r2, r6}^
     a44:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a48:	6142656d 	cmpvs	r2, sp, ror #10
     a4c:	74536573 	ldrbvc	r6, [r3], #-1395	; 0x573
     a50:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     a54:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     a58:	7a697300 	bvc	1a5d660 <__Stack_Size+0x1a5d260>
     a5c:	70797465 	rsbsvc	r7, r9, r5, ror #8
     a60:	6f6c0065 	svcvs	0x006c0065
     a64:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     a68:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     a6c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     a70:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a74:	5f4d4954 	svcpl	0x004d4954
     a78:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     a7c:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
     a80:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     a84:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     a88:	50470065 	subpl	r0, r7, r5, rrx
     a8c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     a90:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     a94:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     a98:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     a9c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     aa0:	2064656e 	rsbcs	r6, r4, lr, ror #10
     aa4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     aa8:	6d546200 	lfmvs	f6, 2, [r4, #-0]
     aac:	49540070 	ldmdbmi	r4, {r4, r5, r6}^
     ab0:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xf4d
     ab4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     ab8:	726f6e00 	rsbvc	r6, pc, #0, 28
     abc:	546c616d 	strbtpl	r6, [ip], #-365	; 0x16d
     ac0:	006e7275 	rsbeq	r7, lr, r5, ror r2
     ac4:	4f495047 	svcmi	0x00495047
     ac8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     acc:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 66f <__Stack_Size+0x26f>
     ad0:	7a484d30 	bvc	1213f98 <__Stack_Size+0x1213b98>
     ad4:	41535500 	cmpmi	r3, r0, lsl #10
     ad8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     adc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ae0:	61727567 	cmnvs	r2, r7, ror #10
     ae4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     ae8:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     aec:	6165725f 	cmnvs	r5, pc, asr r2
     af0:	79625f64 	stmdbvc	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     af4:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
     af8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     afc:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     b00:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b04:	4349564e 	movtmi	r5, #38478	; 0x964e
     b08:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     b0c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     b10:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     b14:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     b18:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b1c:	31444556 	cmpcc	r4, r6, asr r5
     b20:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     b24:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b28:	31314445 	teqcc	r1, r5, asr #8
     b2c:	53455200 	movtpl	r5, #20992	; 0x5200
     b30:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     b34:	00323144 	eorseq	r3, r2, r4, asr #2
     b38:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b3c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b40:	52003331 	andpl	r3, r0, #-1006632960	; 0xc4000000
     b44:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b48:	31444556 	cmpcc	r4, r6, asr r5
     b4c:	45520034 	ldrbmi	r0, [r2, #-52]	; 0x34
     b50:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b54:	35314445 	ldrcc	r4, [r1, #-1093]!	; 0x445
     b58:	53455200 	movtpl	r5, #20992	; 0x5200
     b5c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     b60:	00363144 	eorseq	r3, r6, r4, asr #2
     b64:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     b68:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     b6c:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
     b70:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b74:	31444556 	cmpcc	r4, r6, asr r5
     b78:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
     b7c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b80:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
     b84:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b88:	6f435f4f 	svcvs	0x00435f4f
     b8c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     b90:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     b94:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     b98:	5f6c7864 	svcpl	0x006c7864
     b9c:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     ba0:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     ba4:	53550064 	cmppl	r5, #100	; 0x64
     ba8:	5f545241 	svcpl	0x00545241
     bac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     bb0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     bb4:	00666544 	rsbeq	r6, r6, r4, asr #10
     bb8:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
     bbc:	564e0065 	strbpl	r0, [lr], -r5, rrx
     bc0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     bc4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     bc8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     bcc:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     bd0:	6f697250 	svcvs	0x00697250
     bd4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bd8:	41535500 	cmpmi	r3, r0, lsl #10
     bdc:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
     be0:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
     be4:	5f5f0079 	svcpl	0x005f0079
     be8:	5f525349 	svcpl	0x00525349
     bec:	414c4544 	cmpmi	ip, r4, asr #10
     bf0:	43520059 	cmpmi	r2, #89	; 0x59
     bf4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     bf8:	646d434c 	strbtvs	r4, [sp], #-844	; 0x34c
     bfc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     c00:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
     c04:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
     c08:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     c0c:	70795474 	rsbsvc	r5, r9, r4, ror r4
     c10:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     c14:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c18:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     c1c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c20:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     c24:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
     c28:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c2c:	62670067 	rsbvs	r0, r7, #103	; 0x67
     c30:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
     c34:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     c38:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     c3c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     c40:	00726574 	rsbseq	r6, r2, r4, ror r5
     c44:	5f4d4954 	svcpl	0x004d4954
     c48:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     c4c:	61745354 	cmnvs	r4, r4, asr r3
     c50:	00737574 	rsbseq	r7, r3, r4, ror r5
     c54:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     c58:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     c5c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     c60:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     c64:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
     c68:	4265746f 	rsbmi	r7, r5, #1862270976	; 0x6f000000
     c6c:	007a7a75 	rsbseq	r7, sl, r5, ror sl
     c70:	5f4d4954 	svcpl	0x004d4954
     c74:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
     c78:	61706d6f 	cmnvs	r0, pc, ror #26
     c7c:	00316572 	eorseq	r6, r1, r2, ror r5
     c80:	6e69616d 	powvsez	f6, f1, #5.0
     c84:	616f4700 	cmnvs	pc, r0, lsl #14
     c88:	736f506c 	cmnvc	pc, #108	; 0x6c
     c8c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     c90:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
     c94:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     c98:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     c9c:	564e0064 	strbpl	r0, [lr], -r4, rrx
     ca0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ca4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     ca8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     cac:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0x6c
     cb0:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     cb4:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     cb8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cbc:	00797469 	rsbseq	r7, r9, r9, ror #8
     cc0:	5f6c7864 	svcpl	0x006c7864
     cc4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     cc8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     ccc:	4700657a 	smlsdxmi	r0, sl, r5, r6
     cd0:	5f4f4950 	svcpl	0x004f4950
     cd4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     cd8:	5f4e495f 	svcpl	0x004e495f
     cdc:	414f4c46 	cmpmi	pc, r6, asr #24
     ce0:	474e4954 	smlsldmi	r4, lr, r4, r9
     ce4:	53455200 	movtpl	r5, #20992	; 0x5200
     ce8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cec:	54003744 	strpl	r3, [r0], #-1860	; 0x744
     cf0:	505f4d49 	subspl	r4, pc, r9, asr #26
     cf4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     cf8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     cfc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d00:	6e006769 	cdpvs	7, 0, cr6, cr0, cr9, {3}
     d04:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     d08:	69725000 	ldmdbvs	r2!, {ip, lr}^
     d0c:	7245746e 	subvc	r7, r5, #1845493760	; 0x6e000000
     d10:	43726f72 	cmnmi	r2, #456	; 0x1c8
     d14:	0065646f 	rsbeq	r6, r5, pc, ror #8
     d18:	53455348 	movtpl	r5, #21320	; 0x5348
     d1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     d20:	74537055 	ldrbvc	r7, [r3], #-85	; 0x55
     d24:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d28:	4b434c00 	blmi	10d3d30 <__Stack_Size+0x10d3930>
     d2c:	78640052 	stmdavc	r4!, {r1, r4, r6}^
     d30:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
     d34:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d38:	6b636170 	blvs	18d9300 <__Stack_Size+0x18d8f00>
     d3c:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 8df <__Stack_Size+0x4df>
     d40:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     d44:	65696600 	strbvs	r6, [r9, #-1536]!	; 0x600
     d48:	4200646c 	andmi	r6, r0, #108, 8	; 0x6c000000
     d4c:	61467375 	hvcvs	26421	; 0x6735
     d50:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     d54:	70656378 	rsbvc	r6, r5, r8, ror r3
     d58:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     d5c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     d60:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     d64:	61485152 	cmpvs	r8, r2, asr r1
     d68:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     d6c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     d70:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     d74:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     d78:	61485152 	cmpvs	r8, r2, asr r1
     d7c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     d80:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     d84:	5f304954 	svcpl	0x00304954
     d88:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d8c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d90:	50007265 	andpl	r7, r0, r5, ror #4
     d94:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     d98:	61485152 	cmpvs	r8, r2, asr r1
     d9c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     da0:	61480072 	hvcvs	32770	; 0x8002
     da4:	61466472 	hvcvs	26178	; 0x6642
     da8:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     dac:	70656378 	rsbvc	r6, r5, r8, ror r3
     db0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     db4:	43444100 	movtmi	r4, #16640	; 0x4100
     db8:	5f325f31 	svcpl	0x00325f31
     dbc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     dc0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     dc4:	54007265 	strpl	r7, [r0], #-613	; 0x265
     dc8:	45504d41 	ldrbmi	r4, [r0, #-3393]	; 0xd41
     dcc:	52495f52 	subpl	r5, r9, #328	; 0x148
     dd0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     dd4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     dd8:	43435200 	movtmi	r5, #12800	; 0x3200
     ddc:	5152495f 	cmppl	r2, pc, asr r9
     de0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     de4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     de8:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     dec:	5152495f 	cmppl	r2, pc, asr r9
     df0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     df4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     df8:	5f4e4143 	svcpl	0x004e4143
     dfc:	5f315852 	svcpl	0x00315852
     e00:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     e04:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     e08:	44007265 	strmi	r7, [r0], #-613	; 0x265
     e0c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     e10:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     e14:	00726f74 	rsbseq	r6, r2, r4, ror pc
     e18:	31414d44 	cmpcc	r1, r4, asr #26
     e1c:	6168435f 	cmnvs	r8, pc, asr r3
     e20:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     e24:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     e28:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e2c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e30:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e34:	50555f31 	subspl	r5, r5, r1, lsr pc
     e38:	5152495f 	cmppl	r2, pc, asr r9
     e3c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     e40:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e44:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     e48:	5f50555f 	svcpl	0x0050555f
     e4c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     e50:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     e54:	54007265 	strpl	r7, [r0], #-613	; 0x265
     e58:	5f314d49 	svcpl	0x00314d49
     e5c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     e60:	61485152 	cmpvs	r8, r2, asr r1
     e64:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e68:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     e6c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     e70:	52495f43 	subpl	r5, r9, #268	; 0x10c
     e74:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e78:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e7c:	414d4400 	cmpmi	sp, r0, lsl #8
     e80:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     e84:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     e88:	495f326c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     e8c:	61485152 	cmpvs	r8, r2, asr r1
     e90:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e94:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     e98:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     e9c:	61485152 	cmpvs	r8, r2, asr r1
     ea0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     ea4:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     ea8:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0x954
     eac:	5f30315f 	svcpl	0x0030315f
     eb0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     eb4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     eb8:	44007265 	strmi	r7, [r0], #-613	; 0x265
     ebc:	5f31414d 	svcpl	0x0031414d
     ec0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     ec4:	316c656e 	cmncc	ip, lr, ror #10
     ec8:	5152495f 	cmppl	r2, pc, asr r9
     ecc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ed0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ed4:	48435653 	stmdami	r3, {r0, r1, r4, r6, r9, sl, ip, lr}^
     ed8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     edc:	55007265 	strpl	r7, [r0, #-613]	; 0x265
     ee0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ee4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     ee8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     eec:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     ef0:	43545200 	cmpmi	r4, #0, 4
     ef4:	5152495f 	cmppl	r2, pc, asr r9
     ef8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     efc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f00:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
     f04:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     f08:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f0c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f10:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     f14:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     f18:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f1c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f20:	414d4400 	cmpmi	sp, r0, lsl #8
     f24:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f28:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     f2c:	355f346c 	ldrbcc	r3, [pc, #-1132]	; ac8 <__Stack_Size+0x6c8>
     f30:	5152495f 	cmppl	r2, pc, asr r9
     f34:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     f38:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f3c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
     f40:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     f44:	63784565 	cmnvs	r8, #423624704	; 0x19400000
     f48:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     f4c:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     f50:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
     f54:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     f58:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     f5c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     f60:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f64:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f68:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f6c:	414d4400 	cmpmi	sp, r0, lsl #8
     f70:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f74:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     f78:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     f7c:	61485152 	cmpvs	r8, r2, asr r1
     f80:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f84:	53550072 	cmppl	r5, #114	; 0x72
     f88:	6b615742 	blvs	1856c98 <__Stack_Size+0x1856898>
     f8c:	5f705565 	svcpl	0x00705565
     f90:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     f94:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     f98:	53007265 	movwpl	r7, #613	; 0x265
     f9c:	5f4f4944 	svcpl	0x004f4944
     fa0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     fa4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fa8:	46007265 	strmi	r7, [r0], -r5, ror #4
     fac:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     fb0:	5152495f 	cmppl	r2, pc, asr r9
     fb4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     fb8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     fbc:	67617355 			; <UNDEFINED> instruction: 0x67617355
     fc0:	75614665 	strbvc	r4, [r1, #-1637]!	; 0x665
     fc4:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     fc8:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     fcc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     fd0:	31433249 	cmpcc	r3, r9, asr #4
     fd4:	5f56455f 	svcpl	0x0056455f
     fd8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     fdc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fe0:	54007265 	strpl	r7, [r0], #-613	; 0x265
     fe4:	5f384d49 	svcpl	0x00384d49
     fe8:	5f475254 	svcpl	0x00475254
     fec:	5f4d4f43 	svcpl	0x004d4f43
     ff0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ff4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ff8:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     ffc:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
    1000:	5f6d7261 	svcpl	0x006d7261
    1004:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1008:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    100c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1010:	5f31414d 	svcpl	0x0031414d
    1014:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1018:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
    101c:	5152495f 	cmppl	r2, pc, asr r9
    1020:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1024:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1028:	33495053 	movtcc	r5, #36947	; 0x9053
    102c:	5152495f 	cmppl	r2, pc, asr r9
    1030:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1034:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1038:	334d4954 	movtcc	r4, #55636	; 0xd954
    103c:	5152495f 	cmppl	r2, pc, asr r9
    1040:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1044:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1048:	5f4e4143 	svcpl	0x004e4143
    104c:	5f454353 	svcpl	0x00454353
    1050:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1054:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1058:	44007265 	strmi	r7, [r0], #-613	; 0x265
    105c:	5f31414d 	svcpl	0x0031414d
    1060:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1064:	346c656e 	strbtcc	r6, [ip], #-1390	; 0x56e
    1068:	5152495f 	cmppl	r2, pc, asr r9
    106c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1070:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1074:	434d5346 	movtmi	r5, #54086	; 0xd346
    1078:	5152495f 	cmppl	r2, pc, asr r9
    107c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1080:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1084:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1088:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    108c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1090:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1094:	43444100 	movtmi	r4, #16640	; 0x4100
    1098:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    109c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10a0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10a4:	43324900 	teqmi	r2, #0, 18
    10a8:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
    10ac:	5152495f 	cmppl	r2, pc, asr r9
    10b0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    10b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    10b8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    10bc:	5f52455f 	svcpl	0x0052455f
    10c0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10c4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10c8:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    10cc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    10d0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    10d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10d8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10dc:	42535500 	subsmi	r5, r3, #0, 10
    10e0:	5f504c5f 	svcpl	0x00504c5f
    10e4:	5f4e4143 	svcpl	0x004e4143
    10e8:	5f305852 	svcpl	0x00305852
    10ec:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10f0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10f4:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    10f8:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^	; <UNPREDICTABLE>
    10fc:	41435f50 	cmpmi	r3, r0, asr pc
    1100:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1104:	5152495f 	cmppl	r2, pc, asr r9
    1108:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    110c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1110:	31433249 	cmpcc	r3, r9, asr #4
    1114:	5f52455f 	svcpl	0x0052455f
    1118:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    111c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1120:	53007265 	movwpl	r7, #613	; 0x265
    1124:	5f314950 	svcpl	0x00314950
    1128:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    112c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1130:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1134:	5f384d49 	svcpl	0x00384d49
    1138:	5f4b5242 	svcpl	0x004b5242
    113c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1140:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1144:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1148:	5f31414d 	svcpl	0x0031414d
    114c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1150:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
    1154:	5152495f 	cmppl	r2, pc, asr r9
    1158:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    115c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1160:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1164:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1168:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    116c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1170:	41535500 	cmpmi	r3, r0, lsl #10
    1174:	5f325452 	svcpl	0x00325452
    1178:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    117c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1180:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1184:	5f344d49 	svcpl	0x00344d49
    1188:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    118c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1190:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1194:	5f314d49 	svcpl	0x00314d49
    1198:	5f475254 	svcpl	0x00475254
    119c:	5f4d4f43 	svcpl	0x004d4f43
    11a0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11a4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11a8:	44007265 	strmi	r7, [r0], #-613	; 0x265
    11ac:	5f32414d 	svcpl	0x0032414d
    11b0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    11b4:	316c656e 	cmncc	ip, lr, ror #10
    11b8:	5152495f 	cmppl	r2, pc, asr r9
    11bc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11c4:	374d4954 	smlsldcc	r4, sp, r4, r9
    11c8:	5152495f 	cmppl	r2, pc, asr r9
    11cc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11d4:	47445757 	smlsldmi	r5, r4, r7, r7
    11d8:	5152495f 	cmppl	r2, pc, asr r9
    11dc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11e4:	32495053 	subcc	r5, r9, #83	; 0x53
    11e8:	5152495f 	cmppl	r2, pc, asr r9
    11ec:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11f4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    11f8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    11fc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1200:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1204:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1208:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 8c7 <__Stack_Size+0x4c7>
    120c:	5152495f 	cmppl	r2, pc, asr r9
    1210:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1214:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1218:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    121c:	00435653 	subeq	r5, r3, r3, asr r6
    1220:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    1224:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    1228:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    122c:	41007265 	tstmi	r0, r5, ror #4
    1230:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
    1234:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1238:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    123c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1240:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
    1244:	4d440063 	stclmi	0, cr0, [r4, #-396]	; 0xfffffe74
    1248:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    124c:	6e6e6168 	powvsez	f6, f6, #0.0
    1250:	5f376c65 	svcpl	0x00376c65
    1254:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1258:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    125c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1260:	5f31414d 	svcpl	0x0031414d
    1264:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1268:	356c656e 	strbcc	r6, [ip, #-1390]!	; 0x56e
    126c:	5152495f 	cmppl	r2, pc, asr r9
    1270:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1274:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1278:	5f6c7864 	svcpl	0x006c7864
    127c:	5f6c6168 	svcpl	0x006c6168
    1280:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1284:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1288:	49766564 	ldmdbmi	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    128c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1290:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1294:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    1298:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    129c:	70007261 	andvc	r7, r0, r1, ror #4
    12a0:	6b636150 	blvs	18d97e8 <__Stack_Size+0x18d93e8>
    12a4:	64007465 	strvs	r7, [r0], #-1125	; 0x465
    12a8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    12ac:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    12b0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 12b8 <__Stack_Size+0xeb8>
    12b4:	6f656d69 	svcvs	0x00656d69
    12b8:	41007475 	tstmi	r0, r5, ror r4
    12bc:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
    12c0:	642f6372 	strtvs	r6, [pc], #-882	; 12c8 <__Stack_Size+0xec8>
    12c4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    12c8:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    12cc:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    12d0:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    12d4:	6f6c635f 	svcvs	0x006c635f
    12d8:	64006573 	strvs	r6, [r0], #-1395	; 0x573
    12dc:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    12e0:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    12e4:	78640078 	stmdavc	r4!, {r3, r4, r5, r6}^
    12e8:	61685f6c 	cmnvs	r8, ip, ror #30
    12ec:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12f0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    12f4:	6b636150 	blvs	18d983c <__Stack_Size+0x18d943c>
    12f8:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    12fc:	63526d75 	cmpvs	r2, #7488	; 0x1d40
    1300:	74794276 	ldrbtvc	r4, [r9], #-630	; 0x276
    1304:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    1308:	61685f6c 	cmnvs	r8, ip, ror #30
    130c:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    1310:	67006e65 	strvs	r6, [r0, -r5, ror #28]
    1314:	50785262 	rsbspl	r5, r8, r2, ror #4
    1318:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    131c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1320:	00687467 	rsbeq	r7, r8, r7, ror #8
    1324:	5f6c7864 	svcpl	0x006c7864
    1328:	705f7874 	subsvc	r7, pc, r4, ror r8	; <UNPREDICTABLE>
    132c:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1330:	526e0074 	rsbpl	r0, lr, #116	; 0x74
    1334:	00646165 	rsbeq	r6, r4, r5, ror #2
    1338:	5f6c7864 	svcpl	0x006c7864
    133c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    1340:	43626700 	cmnmi	r2, #0, 14
    1344:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
    1348:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    134c:	78640073 	stmdavc	r4!, {r0, r1, r4, r5, r6}^
    1350:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1354:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1358:	6b636170 	blvs	18d9920 <__Stack_Size+0x18d9520>
    135c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    1360:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1364:	78640068 	stmdavc	r4!, {r3, r5, r6}^
    1368:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    136c:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1370:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
    1374:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    1378:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    137c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1384 <__Stack_Size+0xf84>
    1380:	63617078 	cmnvs	r1, #120	; 0x78
    1384:	5f74656b 	svcpl	0x0074656b
    1388:	61726170 	cmnvs	r2, r0, ror r1
    138c:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0x56d
    1390:	78640072 	stmdavc	r4!, {r1, r4, r5, r6}^
    1394:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1398:	6f6c5f74 	svcvs	0x006c5f74
    139c:	74796277 	ldrbtvc	r6, [r9], #-631	; 0x277
    13a0:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    13a4:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    13a8:	6361705f 	cmnvs	r1, #95	; 0x5f
    13ac:	0074656b 	rsbseq	r6, r4, fp, ror #10
    13b0:	63656863 	cmnvs	r5, #6488064	; 0x630000
    13b4:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
    13b8:	50504100 	subspl	r4, r0, r0, lsl #2
    13bc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    13c0:	6e79642f 	cdpvs	4, 7, cr6, cr9, cr15, {1}
    13c4:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    13c8:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
    13cc:	61655200 	cmnvs	r5, r0, lsl #4
    13d0:	4e78546c 	cdpmi	4, 7, cr5, cr8, cr12, {3}
    13d4:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    13d8:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    13dc:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    13e0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 13e8 <__Stack_Size+0xfe8>
    13e4:	63617078 	cmnvs	r1, #120	; 0x78
    13e8:	5f74656b 	svcpl	0x0074656b
    13ec:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    13f0:	74006874 	strvc	r6, [r0], #-2164	; 0x874
    13f4:	00706d65 	rsbseq	r6, r0, r5, ror #26
    13f8:	5f6c7864 	svcpl	0x006c7864
    13fc:	5f746573 	svcpl	0x00746573
    1400:	61707874 	cmnvs	r0, r4, ror r8
    1404:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1408:	0064695f 	rsbeq	r6, r4, pc, asr r9
    140c:	74536267 	ldrbvc	r6, [r3], #-615	; 0x267
    1410:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1414:	6b636150 	blvs	18d995c <__Stack_Size+0x18d955c>
    1418:	76007465 	strvc	r7, [r0], -r5, ror #8
    141c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1420:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1424:	7278745f 	rsbsvc	r7, r8, #1593835520	; 0x5f000000
    1428:	61705f78 	cmnvs	r0, r8, ror pc
    142c:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1430:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1434:	6b616d5f 	blvs	185c9b8 <__Stack_Size+0x185c5b8>
    1438:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
    143c:	78640064 	stmdavc	r4!, {r2, r5, r6}^
    1440:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1444:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1448:	6b636170 	blvs	18d9a10 <__Stack_Size+0x18d9610>
    144c:	705f7465 	subsvc	r7, pc, r5, ror #8
    1450:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1454:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1458:	52626700 	rsbpl	r6, r2, #0, 14
    145c:	74654778 	strbtvc	r4, [r5], #-1912	; 0x778
    1460:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1464:	64006874 	strvs	r6, [r0], #-2164	; 0x874
    1468:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    146c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1474 <__Stack_Size+0x1074>
    1470:	63617078 	cmnvs	r1, #120	; 0x78
    1474:	5f74656b 	svcpl	0x0074656b
    1478:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xe69
    147c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1480:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1484:	62727265 	rsbsvs	r7, r2, #1342177286	; 0x50000006
    1488:	67007469 	strvs	r7, [r0, -r9, ror #8]
    148c:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    1490:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
    1494:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    1498:	00786564 	rsbseq	r6, r8, r4, ror #10
    149c:	6e496267 	cdpvs	2, 4, cr6, cr9, cr7, {3}
    14a0:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    14a4:	6f697463 	svcvs	0x00697463
    14a8:	6361506e 	cmnvs	r1, #110	; 0x6e
    14ac:	0074656b 	rsbseq	r6, r4, fp, ror #10
    14b0:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    14b4:	006d756e 	rsbeq	r7, sp, lr, ror #10
    14b8:	5f6c7864 	svcpl	0x006c7864
    14bc:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    14c0:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xe69
    14c4:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    14c8:	5f485341 	svcpl	0x00485341
    14cc:	6f435449 	svcvs	0x00435449
    14d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    14d4:	50525700 	subspl	r5, r2, r0, lsl #14
    14d8:	61445f32 	cmpvs	r4, r2, lsr pc
    14dc:	4f006174 	svcmi	0x00006174
    14e0:	54535f42 	ldrbpl	r5, [r3], #-3906	; 0xf42
    14e4:	4600504f 	strmi	r5, [r0], -pc, asr #32
    14e8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    14ec:	6172455f 	cmnvs	r2, pc, asr r5
    14f0:	704f6573 	subvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    14f4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    14f8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    14fc:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0x73
    1500:	756f6461 	strbvc	r6, [pc, #-1121]!	; 10a7 <__Stack_Size+0xca7>
    1504:	61747374 	cmnvs	r4, r4, ror r3
    1508:	00737574 	rsbseq	r7, r3, r4, ror r5
    150c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1510:	52455f48 	subpl	r5, r5, #72, 30	; 0x120
    1514:	5f524f52 	svcpl	0x00524f52
    1518:	00505257 	subseq	r5, r0, r7, asr r2
    151c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1520:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    1524:	50657361 	rsbpl	r7, r5, r1, ror #6
    1528:	00656761 	rsbeq	r6, r5, r1, ror #14
    152c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1530:	614c5f48 	cmpvs	ip, r8, asr #30
    1534:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    1538:	4c460079 	mcrrmi	0, 7, r0, r6, cr9
    153c:	5f485341 	svcpl	0x00485341
    1540:	50746547 	rsbspl	r6, r4, r7, asr #10
    1544:	65666572 	strbvs	r6, [r6, #-1394]!	; 0x572
    1548:	42686374 	rsbmi	r6, r8, #116, 6	; 0xd0000001
    154c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1550:	61745372 	cmnvs	r4, r2, ror r3
    1554:	00737574 	rsbseq	r7, r3, r4, ror r5
    1558:	616c6564 	cmnvs	ip, r4, ror #10
    155c:	52570079 	subspl	r0, r7, #121	; 0x79
    1560:	46005250 			; <UNDEFINED> instruction: 0x46005250
    1564:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1568:	6c6e555f 	cfstr64vs	mvdx5, [lr], #-380	; 0xfffffe84
    156c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1570:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1574:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    1578:	41657361 	cmnmi	r5, r1, ror #6
    157c:	61506c6c 	cmpvs	r0, ip, ror #24
    1580:	00736567 	rsbseq	r6, r3, r7, ror #10
    1584:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1588:	74535f48 	ldrbvc	r5, [r3], #-3912	; 0xf48
    158c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1590:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    1594:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1598:	52570065 	subspl	r0, r7, #101	; 0x65
    159c:	57003050 	smlsdpl	r0, r0, r0, r3
    15a0:	00315052 	eorseq	r5, r1, r2, asr r0
    15a4:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
    15a8:	50525700 	subspl	r5, r2, r0, lsl #14
    15ac:	4c460033 	mcrrmi	0, 3, r0, r6, cr3
    15b0:	5f485341 	svcpl	0x00485341
    15b4:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
    15b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    15bc:	746f7250 	strbtvc	r7, [pc], #-592	; 15c4 <__Stack_Size+0x11c4>
    15c0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    15c4:	704f6e6f 	subvc	r6, pc, pc, ror #28
    15c8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    15cc:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    15d0:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
    15d4:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
    15d8:	414c4600 	cmpmi	ip, r0, lsl #12
    15dc:	555f4853 	ldrbpl	r4, [pc, #-2131]	; d91 <__Stack_Size+0x991>
    15e0:	4f726573 	svcmi	0x00726573
    15e4:	6f697470 	svcvs	0x00697470
    15e8:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    15ec:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    15f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    15f4:	495f424f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r9, lr}^	; <UNPREDICTABLE>
    15f8:	00474457 	subeq	r4, r7, r7, asr r4
    15fc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1600:	65525f48 	ldrbvs	r5, [r2, #-3912]	; 0xf48
    1604:	754f6461 	strbvc	r6, [pc, #-1121]	; 11ab <__Stack_Size+0xdab>
    1608:	6f725074 	svcvs	0x00725074
    160c:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    1610:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1614:	73616c66 	cmnvc	r1, #26112	; 0x6600
    1618:	61747368 	cmnvs	r4, r8, ror #6
    161c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1620:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1624:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1628:	61500073 	cmpvs	r0, r3, ror r0
    162c:	415f6567 	cmpmi	pc, r7, ror #10
    1630:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1634:	46007373 			; <UNDEFINED> instruction: 0x46007373
    1638:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    163c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1640:	505f524f 	subspl	r5, pc, pc, asr #4
    1644:	4c460047 	mcrrmi	0, 4, r0, r6, cr7
    1648:	5f485341 	svcpl	0x00485341
    164c:	6b636f4c 	blvs	18dd384 <__Stack_Size+0x18dcf84>
    1650:	50525700 	subspl	r5, r2, r0, lsl #14
    1654:	61445f33 	cmpvs	r4, r3, lsr pc
    1658:	73006174 	movwvc	r6, #372	; 0x174
    165c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1660:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1664:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1668:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    166c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1670:	31663233 	cmncc	r6, r3, lsr r2
    1674:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
    1678:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    167c:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    1680:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1684:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1688:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    168c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1690:	46007375 			; <UNDEFINED> instruction: 0x46007375
    1694:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1698:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    169c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    16a0:	46006761 	strmi	r6, [r0], -r1, ror #14
    16a4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    16a8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 1534 <__Stack_Size+0x1134>
    16ac:	54454c50 	strbpl	r4, [r5], #-3152	; 0xc50
    16b0:	4c460045 	mcrrmi	0, 4, r0, r6, cr5
    16b4:	5f485341 	svcpl	0x00485341
    16b8:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
    16bc:	50525700 	subspl	r5, r2, r0, lsl #14
    16c0:	61445f31 	cmpvs	r4, r1, lsr pc
    16c4:	46006174 			; <UNDEFINED> instruction: 0x46006174
    16c8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    16cc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    16d0:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xf45
    16d4:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    16d8:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    16dc:	414c4600 	cmpmi	ip, r0, lsl #12
    16e0:	475f4853 			; <UNDEFINED> instruction: 0x475f4853
    16e4:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
    16e8:	754f6461 	strbvc	r6, [pc, #-1121]	; 128f <__Stack_Size+0xe8f>
    16ec:	6f725074 	svcvs	0x00725074
    16f0:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    16f4:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    16f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    16fc:	424f0073 	submi	r0, pc, #115	; 0x73
    1700:	4454535f 	ldrbmi	r5, [r4], #-863	; 0x35f
    1704:	57005942 	strpl	r5, [r0, -r2, asr #18]
    1708:	5f305052 	svcpl	0x00305052
    170c:	61746144 	cmnvs	r4, r4, asr #2
    1710:	414c4600 	cmpmi	ip, r0, lsl #12
    1714:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    1718:	43666c61 	cmnmi	r6, #24832	; 0x6100
    171c:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1720:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    1724:	46007373 			; <UNDEFINED> instruction: 0x46007373
    1728:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    172c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1730:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1734:	4f007375 	svcmi	0x00007375
    1738:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    173c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1740:	4c460066 	mcrrmi	0, 6, r0, r6, cr6
    1744:	5f485341 	svcpl	0x00485341
    1748:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    174c:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    1750:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    1754:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    1758:	4600646d 	strmi	r6, [r0], -sp, ror #8
    175c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1760:	6f72505f 	svcvs	0x0072505f
    1764:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1768:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    176c:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1770:	61446574 	hvcvs	18004	; 0x4654
    1774:	46006174 			; <UNDEFINED> instruction: 0x46006174
    1778:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    177c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1780:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1784:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1788:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    178c:	46006574 			; <UNDEFINED> instruction: 0x46006574
    1790:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1794:	6f72505f 	svcvs	0x0072505f
    1798:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    179c:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    17a0:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    17a4:	414c4600 	cmpmi	ip, r0, lsl #12
    17a8:	465f4853 			; <UNDEFINED> instruction: 0x465f4853
    17ac:	0047414c 	subeq	r4, r7, ip, asr #2
    17b0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    17b4:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
    17b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    17bc:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    17c0:	6f725065 	svcvs	0x00725065
    17c4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    17c8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    17cc:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
    17d0:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    17d4:	44003061 	strmi	r3, [r0], #-97	; 0x61
    17d8:	31617461 	cmncc	r1, r1, ror #8
    17dc:	414c4600 	cmpmi	ip, r0, lsl #12
    17e0:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    17e4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    17e8:	414c4600 	cmpmi	ip, r0, lsl #12
    17ec:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    17f0:	4c460054 	mcrrmi	0, 5, r0, r6, cr4
    17f4:	5f485341 	svcpl	0x00485341
    17f8:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    17fc:	576d6172 			; <UNDEFINED> instruction: 0x576d6172
    1800:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1804:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1808:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    180c:	414c4600 	cmpmi	ip, r0, lsl #12
    1810:	545f4853 	ldrbpl	r4, [pc], #-2131	; 1818 <__Stack_Size+0x1418>
    1814:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1818:	46006665 	strmi	r6, [r0], -r5, ror #12
    181c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1820:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1824:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    1828:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    182c:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
    1830:	6f697461 	svcvs	0x00697461
    1834:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    1838:	5f485341 	svcpl	0x00485341
    183c:	66657250 			; <UNDEFINED> instruction: 0x66657250
    1840:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1844:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1848:	70007265 	andvc	r7, r0, r5, ror #4
    184c:	6f706e69 	svcvs	0x00706e69
    1850:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1854:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xf74
    1858:	50470054 	subpl	r0, r7, r4, asr r0
    185c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1860:	4f646165 	svcmi	0x00646165
    1864:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    1868:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    186c:	50470061 	subpl	r0, r7, r1, rrx
    1870:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 92f <__Stack_Size+0x52f>
    1874:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1878:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    187c:	6d437475 	cfstrdvs	mvd7, [r3, #-468]	; 0xfffffe2c
    1880:	69420064 	stmdbvs	r2, {r2, r5, r6}^
    1884:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1888:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    188c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1890:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1894:	5f4f4950 	svcpl	0x004f4950
    1898:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    189c:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
    18a0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    18a4:	00524349 	subseq	r4, r2, r9, asr #6
    18a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    18ac:	30316632 	eorscc	r6, r1, r2, lsr r6
    18b0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18b4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    18b8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    18bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    18c0:	5f783031 	svcpl	0x00783031
    18c4:	6f697067 	svcvs	0x00697067
    18c8:	7000632e 	andvc	r6, r0, lr, lsr #6
    18cc:	616d6e69 	cmnvs	sp, r9, ror #28
    18d0:	47006b73 	smlsdxmi	r0, r3, fp, r6
    18d4:	5f4f4950 	svcpl	0x004f4950
    18d8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    18dc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    18e0:	47006563 	strmi	r6, [r0, -r3, ror #10]
    18e4:	5f4f4950 	svcpl	0x004f4950
    18e8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    18ec:	47007469 	strmi	r7, [r0, -r9, ror #8]
    18f0:	5f4f4950 	svcpl	0x004f4950
    18f4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    18f8:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xf74
    18fc:	43747570 	cmnmi	r4, #112, 10	; 0x1c000000
    1900:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1904:	50470067 	subpl	r0, r7, r7, rrx
    1908:	525f4f49 	subspl	r4, pc, #292	; 0x124
    190c:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1910:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1914:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    1918:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    191c:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    1920:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1924:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    1928:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    192c:	6f500067 	svcvs	0x00500067
    1930:	61567472 	cmpvs	r6, r2, ror r4
    1934:	7563006c 	strbvc	r0, [r3, #-108]!	; 0x6c
    1938:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    193c:	646f6d74 	strbtvs	r6, [pc], #-3444	; 1944 <__Stack_Size+0x1544>
    1940:	50470065 	subpl	r0, r7, r5, rrx
    1944:	505f4f49 	subspl	r4, pc, r9, asr #30
    1948:	6f536e69 	svcvs	0x00536e69
    194c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1950:	43435200 	movtmi	r5, #12800	; 0x3200
    1954:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1958:	72655032 	rsbvc	r5, r5, #50	; 0x32
    195c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1960:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1964:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1968:	4f495047 	svcmi	0x00495047
    196c:	6165525f 	cmnvs	r5, pc, asr r2
    1970:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1974:	61447475 	hvcvs	18245	; 0x4745
    1978:	74006174 	strvc	r6, [r0], #-372	; 0x174
    197c:	616d706d 	cmnvs	sp, sp, rrx
    1980:	47006b73 	smlsdxmi	r0, r3, fp, r6
    1984:	5f4f4950 	svcpl	0x004f4950
    1988:	4c6e6950 	stclmi	9, cr6, [lr], #-320	; 0xfffffec0
    198c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1990:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1994:	75630067 	strbvc	r0, [r3, #-103]!	; 0x67
    1998:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    199c:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    19a0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19a4:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    19a8:	00657469 	rsbeq	r7, r5, r9, ror #8
    19ac:	31706d74 	cmncc	r0, r4, ror sp
    19b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19b4:	58455f4f 	stmdapl	r5, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    19b8:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
    19bc:	6f43656e 	svcvs	0x0043656e
    19c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19c4:	49464100 	stmdbmi	r6, {r8, lr}^
    19c8:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    19cc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    19d0:	69420066 	stmdbvs	r2, {r1, r2, r5, r6}^
    19d4:	74634174 	strbtvc	r4, [r3], #-372	; 0x174
    19d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    19dc:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    19e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19e4:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    19e8:	5f4f4950 	svcpl	0x004f4950
    19ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    19f0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    19f4:	45007463 	strmi	r7, [r0, #-1123]	; 0x463
    19f8:	00524356 	subseq	r4, r2, r6, asr r3
    19fc:	4f495047 	svcmi	0x00495047
    1a00:	6165525f 	cmnvs	r5, pc, asr r2
    1a04:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
    1a08:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    1a0c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1a10:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1a14:	5f4f4950 	svcpl	0x004f4950
    1a18:	4f494641 	svcmi	0x00494641
    1a1c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1a20:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1a24:	00524241 	subseq	r4, r2, r1, asr #4
    1a28:	4349564e 	movtmi	r5, #38478	; 0x964e
    1a2c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1a30:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    1a34:	61684351 	cmnvs	r8, r1, asr r3
    1a38:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1a3c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1a40:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1a44:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1a48:	5f434956 	svcpl	0x00434956
    1a4c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1a50:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1a54:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    1a58:	5f434956 	svcpl	0x00434956
    1a5c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1a60:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1a64:	6550746e 	ldrbvs	r7, [r0, #-1134]	; 0x46e
    1a68:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1a6c:	51524967 	cmppl	r2, r7, ror #18
    1a70:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1a74:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1a78:	4349564e 	movtmi	r5, #38478	; 0x964e
    1a7c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1a80:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
    1a84:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    1a88:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1a8c:	73795300 	cmnvc	r9, #0, 6
    1a90:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1a94:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1a98:	75537265 	ldrbvc	r7, [r3, #-613]	; 0x265
    1a9c:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1aa0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1aa4:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1aa8:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1aac:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1ab0:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1ab4:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1ab8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1abc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1ac0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    1ac4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1ac8:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
    1acc:	74007465 	strvc	r7, [r0], #-1125	; 0x465
    1ad0:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1ad4:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1ad8:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1adc:	54455345 	strbpl	r5, [r5], #-837	; 0x345
    1ae0:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
    1ae4:	004b5341 	subeq	r5, fp, r1, asr #6
    1ae8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1aec:	64646174 	strbtvs	r6, [r4], #-372	; 0x174
    1af0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1af4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1af8:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1afc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1b00:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1b04:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1b08:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1b0c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1b10:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b14:	5f5f0067 	svcpl	0x005f0067
    1b18:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    1b1c:	50455341 	subpl	r5, r5, r1, asr #6
    1b20:	73004952 	movwvc	r4, #2386	; 0x952
    1b24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1b28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1b2c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1b30:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1b34:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1b38:	31663233 	cmncc	r6, r3, lsr r2
    1b3c:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
    1b40:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
    1b44:	564e0063 	strbpl	r0, [lr], -r3, rrx
    1b48:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1b4c:	50437465 	subpl	r7, r3, r5, ror #8
    1b50:	00444955 	subeq	r4, r4, r5, asr r9
    1b54:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b58:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1b5c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1b60:	6f724779 	svcvs	0x00724779
    1b64:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1b68:	5f434956 	svcpl	0x00434956
    1b6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1b70:	55414654 	strbpl	r4, [r1, #-1620]	; 0x654
    1b74:	414d544c 	cmpmi	sp, ip, asr #8
    1b78:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    1b7c:	5f434956 	svcpl	0x00434956
    1b80:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1b84:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1b88:	6341746e 	movtvs	r7, #5230	; 0x146e
    1b8c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1b90:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1b94:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1b98:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1b9c:	61486d65 	cmpvs	r8, r5, ror #26
    1ba0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1ba4:	43490072 	movtmi	r0, #36978	; 0x9072
    1ba8:	5f005253 	svcpl	0x00005253
    1bac:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    1bb0:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    1bb4:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1bb8:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1bbc:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1bc0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1bc4:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    1bc8:	5265726f 	rsbpl	r7, r5, #-268435450	; 0xf0000006
    1bcc:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1bd0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1bd4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1bd8:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
    1bdc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1be0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1be4:	63417265 	movtvs	r7, #4709	; 0x1265
    1be8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1bec:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1bf0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1bf4:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    1bf8:	425f4349 	subsmi	r4, pc, #603979777	; 0x24000001
    1bfc:	50455341 	subpl	r5, r5, r1, asr #6
    1c00:	4f434952 	svcmi	0x00434952
    1c04:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1c08:	41464200 	mrsmi	r4, (UNDEF: 102)
    1c0c:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1c10:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1c14:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1c18:	61684351 	cmnvs	r8, r1, asr r3
    1c1c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1c20:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1c24:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1c28:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    1c2c:	6f70706d 	svcvs	0x0070706d
    1c30:	46430073 			; <UNDEFINED> instruction: 0x46430073
    1c34:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    1c38:	5f434956 	svcpl	0x00434956
    1c3c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    1c40:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1c44:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1c48:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1c4c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1c50:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1c54:	41007469 	tstmi	r0, r9, ror #8
    1c58:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
    1c5c:	50434900 	subpl	r4, r3, r0, lsl #18
    1c60:	5f5f0052 	svcpl	0x005f0052
    1c64:	45534142 	ldrbmi	r4, [r3, #-322]	; 0x142
    1c68:	43495250 	movtmi	r5, #37456	; 0x9250
    1c6c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1c70:	48530047 	ldmdami	r3, {r0, r1, r2, r6}^
    1c74:	53005250 	movwpl	r5, #592	; 0x250
    1c78:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
    1c7c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1c80:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1c84:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1c88:	564e0066 	strbpl	r0, [lr], -r6, rrx
    1c8c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1c90:	41427465 	cmpmi	r2, r5, ror #8
    1c94:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    1c98:	53520049 	cmppl	r2, #73	; 0x49
    1c9c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1ca0:	5f003144 	svcpl	0x00003144
    1ca4:	5345525f 	movtpl	r5, #21087	; 0x525f
    1ca8:	41465445 	cmpmi	r6, r5, asr #8
    1cac:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
    1cb0:	004b5341 	subeq	r5, fp, r1, asr #6
    1cb4:	41464d4d 	cmpmi	r6, sp, asr #26
    1cb8:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
    1cbc:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1cc0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1cc4:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1cc8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1ccc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1cd0:	4372656c 	cmnmi	r2, #108, 10	; 0x1b000000
    1cd4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1cd8:	564e0067 	strbpl	r0, [lr], -r7, rrx
    1cdc:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1ce0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1ce4:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    1ce8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1cec:	664f0067 	strbvs	r0, [pc], -r7, rrx
    1cf0:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    1cf4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1cf8:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    1cfc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1d00:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1d04:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
    1d08:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
    1d0c:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    1d10:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1d14:	54560079 	ldrbpl	r0, [r6], #-121	; 0x79
    1d18:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    1d1c:	00525053 	subseq	r5, r2, r3, asr r0
    1d20:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
    1d24:	53464800 	movtpl	r4, #26624	; 0x6800
    1d28:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1d2c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1d30:	41465445 	cmpmi	r6, r5, asr #8
    1d34:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
    1d38:	004b5341 	subeq	r5, fp, r1, asr #6
    1d3c:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
    1d40:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
    1d44:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1d48:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1d4c:	61467465 	cmpvs	r6, r5, ror #8
    1d50:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    1d54:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1d58:	6f537265 	svcvs	0x00537265
    1d5c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1d60:	43530073 	cmpmi	r3, #115	; 0x73
    1d64:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    1d68:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1d6c:	6d740066 	ldclvs	0, cr0, [r4, #-408]!	; 0xfffffe68
    1d70:	4e003270 	mcrmi	2, 0, r3, cr0, cr0, {3}
    1d74:	5f434956 	svcpl	0x00434956
    1d78:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1d7c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1d80:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1d84:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1d88:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1d8c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1d90:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1d94:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1d98:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d9c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1da0:	53726165 	cmnpl	r2, #1073741849	; 0x40000019
    1da4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1da8:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1dac:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1db0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1db4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1db8:	76007469 	strvc	r7, [r0], -r9, ror #8
    1dbc:	32336375 	eorscc	r6, r3, #-738197503	; 0xd4000001
    1dc0:	75616600 	strbvc	r6, [r1, #-1536]!	; 0x600
    1dc4:	6f73746c 	svcvs	0x0073746c
    1dc8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1dcc:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    1dd0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1dd4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1dd8:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1ddc:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    1de0:	6f697470 	svcvs	0x00697470
    1de4:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    1de8:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1dec:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1df0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1df4:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1df8:	61684351 	cmnvs	r8, r1, asr r3
    1dfc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1e00:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1e04:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1e08:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1e0c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e10:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1e14:	43535f43 	cmpmi	r3, #268	; 0x10c
    1e18:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
    1e1c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1e20:	5077654e 	rsbspl	r6, r7, lr, asr #10
    1e24:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1e28:	00797469 	rsbseq	r7, r9, r9, ror #8
    1e2c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1e30:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1e34:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    1e38:	74636100 	strbtvc	r6, [r3], #-256	; 0x100
    1e3c:	69657669 	stmdbvs	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1e40:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    1e44:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e48:	535f5f00 	cmppl	pc, #0, 30
    1e4c:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1e50:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1e54:	6168004b 	cmnvs	r8, fp, asr #32
    1e58:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1e5c:	73616d72 	cmnvc	r1, #7296	; 0x1c80
    1e60:	5f5f006b 	svcpl	0x005f006b
    1e64:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1e68:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    1e6c:	4b53414d 	blmi	14d23a8 <__Stack_Size+0x14d1fa8>
    1e70:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1e74:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
    1e78:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1e80 <__Stack_Size+0x1a80>
    1e7c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1e80:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1e84:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1e88:	61684351 	cmnvs	r8, r1, asr r3
    1e8c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1e90:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1e94:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1e98:	61745374 	cmnvs	r4, r4, ror r3
    1e9c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1ea0:	4349564e 	movtmi	r5, #38478	; 0x964e
    1ea4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1ea8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1eac:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1eb0:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1eb4:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    1eb8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1ebc:	52575000 	subspl	r5, r7, #0
    1ec0:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    1ec4:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    1ec8:	42444e41 	submi	r4, r4, #1040	; 0x410
    1ecc:	646f4d59 	strbtvs	r4, [pc], #-3417	; 1ed4 <__Stack_Size+0x1ad4>
    1ed0:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    1ed4:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    1ed8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1edc:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1ee0:	5f525750 	svcpl	0x00525750
    1ee4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1ee8:	50007469 	andpl	r7, r0, r9, ror #8
    1eec:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    1ef0:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1ef4:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1ef8:	52575000 	subspl	r5, r7, #0
    1efc:	4456505f 	ldrbmi	r5, [r6], #-95	; 0x5f
    1f00:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    1f04:	5750006c 	ldrbpl	r0, [r0, -ip, rrx]
    1f08:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    1f0c:	50004741 	andpl	r4, r0, r1, asr #14
    1f10:	545f5257 	ldrbpl	r5, [pc], #-599	; 1f18 <__Stack_Size+0x1b18>
    1f14:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1f18:	50006665 	andpl	r6, r0, r5, ror #12
    1f1c:	505f5257 	subspl	r5, pc, r7, asr r2	; <UNPREDICTABLE>
    1f20:	6d434456 	cfstrdvs	mvd4, [r3, #-344]	; 0xfffffea8
    1f24:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
    1f28:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1f2c:	5f783031 	svcpl	0x00783031
    1f30:	2f62696c 	svccs	0x0062696c
    1f34:	2f637273 	svccs	0x00637273
    1f38:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1f3c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1f40:	77705f78 			; <UNDEFINED> instruction: 0x77705f78
    1f44:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1f48:	5f525750 	svcpl	0x00525750
    1f4c:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    1f50:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    1f54:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f58:	50006769 	andpl	r6, r0, r9, ror #14
    1f5c:	475f5257 			; <UNDEFINED> instruction: 0x475f5257
    1f60:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    1f64:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    1f68:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f6c:	575f5f00 	ldrbpl	r5, [pc, -r0, lsl #30]
    1f70:	5f004546 	svcpl	0x00004546
    1f74:	4946575f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1f78:	52575000 	subspl	r5, r7, #0
    1f7c:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    1f80:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    1f84:	6f4d504f 	svcvs	0x004d504f
    1f88:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    1f8c:	415f4343 	cmpmi	pc, r3, asr #6
    1f90:	50314250 	eorspl	r4, r1, r0, asr r2
    1f94:	70697265 	rsbvc	r7, r9, r5, ror #4
    1f98:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1f9c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1fa0:	57500064 	ldrbpl	r0, [r0, -r4, rrx]
    1fa4:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
    1fa8:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    1fac:	00797274 	rsbseq	r7, r9, r4, ror r2
    1fb0:	5f525750 	svcpl	0x00525750
    1fb4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    1fb8:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    1fbc:	646d436e 	strbtvs	r4, [sp], #-878	; 0x36e
    1fc0:	43435200 	movtmi	r5, #12800	; 0x3200
    1fc4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1fc8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1fcc:	42504100 	subsmi	r4, r0, #0, 2
    1fd0:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
    1fd4:	43520052 	cmpmi	r2, #82	; 0x52
    1fd8:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1fdc:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
    1fe0:	415f4343 	cmpmi	pc, r3, asr #6
    1fe4:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    1fe8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1fec:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ff0:	5f434352 	svcpl	0x00434352
    1ff4:	61656c43 	cmnvs	r5, r3, asr #24
    1ff8:	50544972 	subspl	r4, r4, r2, ror r9
    1ffc:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2000:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2004:	43520074 	cmpmi	r2, #116	; 0x74
    2008:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    200c:	43520045 	cmpmi	r2, #69	; 0x45
    2010:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2014:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2018:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    201c:	44420073 	strbmi	r0, [r2], #-115	; 0x73
    2020:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    2024:	415f4343 	cmpmi	pc, r3, asr #6
    2028:	50324250 	eorspl	r4, r2, r0, asr r2
    202c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2030:	43520068 	cmpmi	r2, #104	; 0x68
    2034:	43505f43 	cmpmi	r0, #268	; 0x10c
    2038:	00324b4c 	eorseq	r4, r2, ip, asr #22
    203c:	5f434352 	svcpl	0x00434352
    2040:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2044:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    2048:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    204c:	43520066 	cmpmi	r2, #102	; 0x66
    2050:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2054:	6c754d4c 	ldclvs	13, cr4, [r5], #-304	; 0xfffffed0
    2058:	43435200 	movtmi	r5, #12800	; 0x3200
    205c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2060:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2064:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2068:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    206c:	4300646d 	movwmi	r6, #1133	; 0x46d
    2070:	00524746 	subseq	r4, r2, r6, asr #14
    2074:	4b4c4348 	blmi	1312d9c <__Stack_Size+0x131299c>
    2078:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    207c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2080:	41007963 	tstmi	r0, r3, ror #18
    2084:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
    2088:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    208c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1f88 <__Stack_Size+0x1b88>
    2090:	6f434f43 	svcvs	0x00434f43
    2094:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2098:	43435200 	movtmi	r5, #12800	; 0x3200
    209c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    20a0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    20a4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    20a8:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
    20ac:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    20b0:	4352006c 	cmpmi	r2, #108	; 0x6c
    20b4:	53555f43 	cmppl	r5, #268	; 0x10c
    20b8:	4b4c4342 	blmi	1312dc8 <__Stack_Size+0x13129c8>
    20bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    20c0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    20c4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    20c8:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    20cc:	50410064 	subpl	r0, r1, r4, rrx
    20d0:	53523242 	cmppl	r2, #536870916	; 0x20000004
    20d4:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    20d8:	415f4343 	cmpmi	pc, r3, asr #6
    20dc:	50314250 	eorspl	r4, r1, r0, asr r2
    20e0:	70697265 	rsbvc	r7, r9, r5, ror #4
    20e4:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
    20e8:	756f736c 	strbvc	r7, [pc, #-876]!	; 1d84 <__Stack_Size+0x1984>
    20ec:	00656372 	rsbeq	r6, r5, r2, ror r3
    20f0:	45424841 	strbmi	r4, [r2, #-2113]	; 0x841
    20f4:	7300524e 	movwvc	r5, #590	; 0x24e
    20f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    20fc:	67657273 			; <UNDEFINED> instruction: 0x67657273
    2100:	42504100 	subsmi	r4, r0, #0, 2
    2104:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    2108:	61745300 	cmnvs	r4, r0, lsl #6
    210c:	70557472 	subsvc	r7, r5, r2, ror r4
    2110:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2114:	00726574 	rsbseq	r6, r2, r4, ror r5
    2118:	5f434352 	svcpl	0x00434352
    211c:	6b636142 	blvs	18da62c <__Stack_Size+0x18da22c>
    2120:	65527075 	ldrbvs	r7, [r2, #-117]	; 0x75
    2124:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2128:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    212c:	415f4343 	cmpmi	pc, r3, asr #6
    2130:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    2134:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
    2138:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    213c:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
    2140:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2144:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2148:	43444100 	movtmi	r4, #16640	; 0x4100
    214c:	5f4b4c43 	svcpl	0x004b4c43
    2150:	71657246 	cmnvc	r5, r6, asr #4
    2154:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2158:	43520079 	cmpmi	r2, #121	; 0x79
    215c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    2160:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    2164:	505f4343 	subspl	r4, pc, r3, asr #6
    2168:	6f534c4c 	svcvs	0x00534c4c
    216c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2170:	43435200 	movtmi	r5, #12800	; 0x3200
    2174:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2178:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    217c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2180:	43520067 	cmpmi	r2, #103	; 0x67
    2184:	53555f43 	cmppl	r5, #268	; 0x10c
    2188:	4b4c4342 	blmi	1312e98 <__Stack_Size+0x1312a98>
    218c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2190:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2194:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2198:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    219c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    21a0:	43435200 	movtmi	r5, #12800	; 0x3200
    21a4:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    21a8:	004b4c43 	subeq	r4, fp, r3, asr #24
    21ac:	53455348 	movtpl	r5, #21320	; 0x5348
    21b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    21b4:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    21b8:	4b4c4353 	blmi	1312f0c <__Stack_Size+0x1312b0c>
    21bc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    21c0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    21c4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    21c8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    21cc:	6b636f6c 	blvs	18ddf84 <__Stack_Size+0x18ddb84>
    21d0:	43500073 	cmpmi	r0, #115	; 0x73
    21d4:	5f324b4c 	svcpl	0x00324b4c
    21d8:	71657246 	cmnvc	r5, r6, asr #4
    21dc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    21e0:	43520079 	cmpmi	r2, #121	; 0x79
    21e4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    21e8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21ec:	70006769 	andvc	r6, r0, r9, ror #14
    21f0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    21f4:	43435200 	movtmi	r5, #12800	; 0x3200
    21f8:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0x85f
    21fc:	43435200 	movtmi	r5, #12800	; 0x3200
    2200:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    2204:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2208:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    220c:	43500065 	cmpmi	r0, #101	; 0x65
    2210:	5f314b4c 	svcpl	0x00314b4c
    2214:	71657246 	cmnvc	r5, r6, asr #4
    2218:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    221c:	50410079 	subpl	r0, r1, r9, ror r0
    2220:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    2224:	73657250 	cmnvc	r5, #80, 4
    2228:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    222c:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    2230:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2234:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2238:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    223c:	71657246 	cmnvc	r5, r6, asr #4
    2240:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2244:	31663233 	cmncc	r6, r3, lsr r2
    2248:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    224c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2250:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2254:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2258:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    225c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    2260:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    2264:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    2268:	6f434553 	svcvs	0x00434553
    226c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2270:	43435200 	movtmi	r5, #12800	; 0x3200
    2274:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2278:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    227c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2280:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2284:	6b636f6c 	blvs	18de03c <__Stack_Size+0x18ddc3c>
    2288:	75636553 	strbvc	r6, [r3, #-1363]!	; 0x553
    228c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2290:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    2294:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
    2298:	43520064 	cmpmi	r2, #100	; 0x64
    229c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    22a0:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    22a4:	43435200 	movtmi	r5, #12800	; 0x3200
    22a8:	4f434d5f 	svcmi	0x00434d5f
    22ac:	43435200 	movtmi	r5, #12800	; 0x3200
    22b0:	0054495f 	subseq	r4, r4, pc, asr r9
    22b4:	5f434352 	svcpl	0x00434352
    22b8:	50424841 	subpl	r4, r2, r1, asr #16
    22bc:	70697265 	rsbvc	r7, r9, r5, ror #4
    22c0:	44410068 	strbmi	r0, [r1], #-104	; 0x68
    22c4:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    22c8:	61546373 	cmpvs	r4, r3, ror r3
    22cc:	00656c62 	rsbeq	r6, r5, r2, ror #24
    22d0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    22d4:	5f6b6369 	svcpl	0x006b6369
    22d8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    22dc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    22e0:	53007265 	movwpl	r7, #613	; 0x265
    22e4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    22e8:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    22ec:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    22f0:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    22f4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    22f8:	73795300 	cmnvc	r9, #0, 6
    22fc:	6b636954 	blvs	18dc854 <__Stack_Size+0x18dc454>
    2300:	414c465f 	cmpmi	ip, pc, asr r6
    2304:	41430047 	cmpmi	r3, r7, asr #32
    2308:	0042494c 	subeq	r4, r2, ip, asr #18
    230c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2310:	30316632 	eorscc	r6, r1, r2, lsr r6
    2314:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2318:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    231c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2320:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2324:	5f783031 	svcpl	0x00783031
    2328:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    232c:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    2330:	54430063 	strbpl	r0, [r3], #-99	; 0x63
    2334:	53004c52 	movwpl	r4, #3154	; 0xc52
    2338:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    233c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2340:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2344:	53007265 	movwpl	r7, #613	; 0x265
    2348:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    234c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2350:	6f534b4c 	svcvs	0x00534b4c
    2354:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2358:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    235c:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
    2360:	0044414f 	subeq	r4, r4, pc, asr #2
    2364:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2368:	5f6b6369 	svcpl	0x006b6369
    236c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2370:	00666544 	rsbeq	r6, r6, r4, asr #10
    2374:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2378:	5f6b6369 	svcpl	0x006b6369
    237c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2380:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2384:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2388:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    238c:	73614634 	cmnvc	r1, #52, 12	; 0x3400000
    2390:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2394:	00676966 	rsbeq	r6, r7, r6, ror #18
    2398:	5f4d4954 	svcpl	0x004d4954
    239c:	5031434f 	eorspl	r4, r1, pc, asr #6
    23a0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    23a4:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    23a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23ac:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23b0:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    23b4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    23b8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    23bc:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    23c0:	4f5f4d49 	svcmi	0x005f4d49
    23c4:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    23c8:	616f6c65 	cmnvs	pc, r5, ror #24
    23cc:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    23d0:	00676966 	rsbeq	r6, r7, r6, ror #18
    23d4:	5f4d4954 	svcpl	0x004d4954
    23d8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    23dc:	61706d6f 	cmnvs	r0, pc, ror #26
    23e0:	00326572 	eorseq	r6, r2, r2, ror r5
    23e4:	5f4d4954 	svcpl	0x004d4954
    23e8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    23ec:	61706d6f 	cmnvs	r0, pc, ror #26
    23f0:	00346572 	eorseq	r6, r4, r2, ror r5
    23f4:	5f4d4954 	svcpl	0x004d4954
    23f8:	4e33434f 	cdpmi	3, 3, cr4, cr3, cr15, {2}
    23fc:	616c6f50 	cmnvs	ip, r0, asr pc
    2400:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2404:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2408:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    240c:	4f5f4d49 	svcmi	0x005f4d49
    2410:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    2414:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    2418:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    241c:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2420:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2424:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2428:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    242c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2430:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    2434:	616c4674 	smcvs	50276	; 0xc464
    2438:	61745367 	cmnvs	r4, r7, ror #6
    243c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2440:	5f324954 	svcpl	0x00324954
    2444:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2448:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    244c:	4f5f4d49 	svcmi	0x005f4d49
    2450:	73614643 	cmnvc	r1, #70254592	; 0x4300000
    2454:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2458:	4b435f4d 	blmi	10da194 <__Stack_Size+0x10d9d94>
    245c:	49540044 	ldmdbmi	r4, {r2, r6}^
    2460:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2464:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2468:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    246c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2470:	5f4d4954 	svcpl	0x004d4954
    2474:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
    2478:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    247c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2480:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2484:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2488:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1747 <__Stack_Size+0x1347>
    248c:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    2490:	65725047 	ldrbvs	r5, [r2, #-71]!	; 0x47
    2494:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2498:	54007265 	strpl	r7, [r0], #-613	; 0x265
    249c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24a0:	434e7843 	movtmi	r7, #59459	; 0xe843
    24a4:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    24a8:	616e6574 	smcvs	58964	; 0xe654
    24ac:	00656c62 	rsbeq	r6, r5, r2, ror #24
    24b0:	5f4d4954 	svcpl	0x004d4954
    24b4:	5032434f 	eorspl	r4, r2, pc, asr #6
    24b8:	6f6c6572 	svcvs	0x006c6572
    24bc:	6f436461 	svcvs	0x00436461
    24c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24c4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24c8:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    24cc:	4f646563 	svcmi	0x00646563
    24d0:	6f433243 	svcvs	0x00433243
    24d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24dc:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    24e0:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    24e4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    24e8:	6f437473 	svcvs	0x00437473
    24ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24f0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    24f4:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    24f8:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    24fc:	414d4443 	cmpmi	sp, r3, asr #8
    2500:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2504:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
    2508:	0065646f 	rsbeq	r6, r5, pc, ror #8
    250c:	5f4d4954 	svcpl	0x004d4954
    2510:	50314349 	eorspl	r4, r1, r9, asr #6
    2514:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2518:	00797469 	rsbseq	r7, r9, r9, ror #8
    251c:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    2520:	0072636d 	rsbseq	r6, r2, sp, ror #6
    2524:	5f4d4954 	svcpl	0x004d4954
    2528:	4633434f 	ldrtmi	r4, [r3], -pc, asr #6
    252c:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    2530:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2534:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2538:	5400784d 	strpl	r7, [r0], #-2125	; 0x84d
    253c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2540:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2544:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2548:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    254c:	5f4d4954 	svcpl	0x004d4954
    2550:	50324349 	eorspl	r4, r2, r9, asr #6
    2554:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2558:	00797469 	rsbseq	r7, r9, r9, ror #8
    255c:	5f4d4954 	svcpl	0x004d4954
    2560:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2564:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    2568:	61637365 	cmnvs	r3, r5, ror #6
    256c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2570:	5f4d4954 	svcpl	0x004d4954
    2574:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2578:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2580 <__Stack_Size+0x2180>
    257c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2580:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2584:	74534953 	ldrbvc	r4, [r3], #-2387	; 0x953
    2588:	00657461 	rsbeq	r7, r5, r1, ror #8
    258c:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    2590:	54003172 	strpl	r3, [r0], #-370	; 0x172
    2594:	4f5f4d49 	svcmi	0x005f4d49
    2598:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    259c:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    25a0:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 185f <__Stack_Size+0x145f>
    25a4:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    25a8:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    25ac:	3265646f 	rsbcc	r6, r5, #1862270976	; 0x6f000000
    25b0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    25b4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    25b8:	435f3149 	cmpmi	pc, #1073741842	; 0x40000012
    25bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    25c0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    25c4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    25c8:	70614374 	rsbvc	r4, r1, r4, ror r3
    25cc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    25d0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    25d4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    25d8:	70614374 	rsbvc	r4, r1, r4, ror r3
    25dc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    25e0:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    25e4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    25e8:	70614374 	rsbvc	r4, r1, r4, ror r3
    25ec:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    25f0:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    25f4:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    25f8:	72754241 	rsbsvc	r4, r5, #268435460	; 0x10000004
    25fc:	654c7473 	strbvs	r7, [ip, #-1139]	; 0x473
    2600:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2604:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2608:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    260c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2610:	54006761 	strpl	r6, [r0], #-1889	; 0x761
    2614:	4f5f4d49 	svcmi	0x005f4d49
    2618:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    261c:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2620:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2624:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2628:	5234434f 	eorspl	r4, r4, #1006632961	; 0x3c000001
    262c:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2630:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2634:	45785254 	ldrbmi	r5, [r8, #-596]!	; 0x254
    2638:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    263c:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2640:	6b636f6c 	blvs	18de3f8 <__Stack_Size+0x18ddff8>
    2644:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2648:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    264c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2654 <__Stack_Size+0x2254>
    2650:	6f43414d 	svcvs	0x0043414d
    2654:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2658:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    265c:	5252415f 	subspl	r4, r2, #-1073741801	; 0xc0000017
    2660:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2664:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2668:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    266c:	74730067 	ldrbtvc	r0, [r3], #-103	; 0x67
    2670:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2674:	5f783031 	svcpl	0x00783031
    2678:	2f62696c 	svccs	0x0062696c
    267c:	2f637273 	svccs	0x00637273
    2680:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2684:	30316632 	eorscc	r6, r1, r2, lsr r6
    2688:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    268c:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2690:	5f4d4954 	svcpl	0x004d4954
    2694:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2698:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    269c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    26a0:	74007463 	strvc	r7, [r0], #-1123	; 0x463
    26a4:	6363706d 	cmnvs	r3, #109	; 0x6d
    26a8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    26ac:	535f4d49 	cmppl	pc, #4672	; 0x1240
    26b0:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    26b4:	446b636f 	strbtmi	r6, [fp], #-879	; 0x36f
    26b8:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    26bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    26c0:	5f4d4954 	svcpl	0x004d4954
    26c4:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    26c8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    26cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26d0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26d4:	72425f4d 	subvc	r5, r2, #308	; 0x134
    26d8:	506b6165 	rsbpl	r6, fp, r5, ror #2
    26dc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    26e0:	00797469 	rsbseq	r7, r9, r9, ror #8
    26e4:	5f4d4954 	svcpl	0x004d4954
    26e8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    26ec:	754f7463 	strbvc	r7, [pc, #-1123]	; 2291 <__Stack_Size+0x1e91>
    26f0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    26f4:	67697254 			; <UNDEFINED> instruction: 0x67697254
    26f8:	00726567 	rsbseq	r6, r2, r7, ror #10
    26fc:	5f4d4954 	svcpl	0x004d4954
    2700:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2704:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    2708:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    270c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2710:	54007463 	strpl	r7, [r0], #-1123	; 0x463
    2714:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2718:	63656c65 	cmnvs	r5, #25856	; 0x6500
    271c:	78434f74 	stmdavc	r3, {r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    2720:	6d74004d 	ldclvs	0, cr0, [r4, #-308]!	; 0xfffffecc
    2724:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2728:	54007872 	strpl	r7, [r0], #-2162	; 0x872
    272c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2730:	0047414c 	subeq	r4, r7, ip, asr #2
    2734:	5f4d4954 	svcpl	0x004d4954
    2738:	4b434f4c 	blmi	10d6470 <__Stack_Size+0x10d6070>
    273c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    2740:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    2744:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2748:	756f4374 	strbvc	r4, [pc, #-884]!	; 23dc <__Stack_Size+0x1fdc>
    274c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2750:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2754:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    2758:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    275c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2760:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2764:	5043495f 	subpl	r4, r3, pc, asr r9
    2768:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    276c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2770:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2774:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    2778:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    277c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2780:	4353505f 	cmpmi	r3, #95	; 0x5f
    2784:	6f6c6552 	svcvs	0x006c6552
    2788:	6f4d6461 	svcvs	0x004d6461
    278c:	54006564 	strpl	r6, [r0], #-1380	; 0x564
    2790:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2794:	6d437843 	stclvs	8, cr7, [r3, #-268]	; 0xfffffef4
    2798:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    279c:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    27a0:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    27a4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    27a8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    27ac:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 27b4 <__Stack_Size+0x23b4>
    27b0:	6142414d 	cmpvs	r2, sp, asr #2
    27b4:	54006573 	strpl	r6, [r0], #-1395	; 0x573
    27b8:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    27bc:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    27c0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    27c4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    27c8:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    27cc:	535f4d49 	cmppl	pc, #4672	; 0x1240
    27d0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    27d4:	6c614874 	stclvs	8, cr4, [r1], #-464	; 0xfffffe30
    27d8:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    27dc:	00726f73 	rsbseq	r6, r2, r3, ror pc
    27e0:	5f4d4954 	svcpl	0x004d4954
    27e4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    27e8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
    27ec:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    27f0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    27f4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    27f8:	32434974 	subcc	r4, r3, #116, 18	; 0x1d0000
    27fc:	73657250 	cmnvc	r5, #80, 4
    2800:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    2804:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2808:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    280c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    2810:	746e4972 	strbtvc	r4, [lr], #-2418	; 0x972
    2814:	61667265 	cmnvs	r6, r5, ror #4
    2818:	6f436563 	svcvs	0x00436563
    281c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2820:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2824:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2828:	4954004e 	ldmdbmi	r4, {r1, r2, r3, r6}^
    282c:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2830:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2834:	5f4d4954 	svcpl	0x004d4954
    2838:	45784954 	ldrbmi	r4, [r8, #-2388]!	; 0x954
    283c:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    2840:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2844:	6f534b4c 	svcvs	0x00534b4c
    2848:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    284c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2850:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    2854:	44657461 	strbtmi	r7, [r5], #-1121	; 0x461
    2858:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    285c:	6f43656c 	svcvs	0x0043656c
    2860:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2864:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2868:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    286c:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    2870:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2874:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2878:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    287c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2880:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2884:	54007463 	strpl	r7, [r0], #-1123	; 0x463
    2888:	435f3349 	cmpmi	pc, #603979777	; 0x24000001
    288c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2890:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2894:	6f435f4d 	svcvs	0x00435f4d
    2898:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    289c:	646f4d72 	strbtvs	r4, [pc], #-3442	; 28a4 <__Stack_Size+0x24a4>
    28a0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    28a4:	00676966 	rsbeq	r6, r7, r6, ror #18
    28a8:	5f4d4954 	svcpl	0x004d4954
    28ac:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    28b0:	61706d6f 	cmnvs	r0, pc, ror #26
    28b4:	00336572 	eorseq	r6, r3, r2, ror r5
    28b8:	5f4d4954 	svcpl	0x004d4954
    28bc:	61656c43 	cmnvs	r5, r3, asr #24
    28c0:	33434f72 	movtcc	r4, #16242	; 0x3f72
    28c4:	00666552 	rsbeq	r6, r6, r2, asr r5
    28c8:	5f4d4954 	svcpl	0x004d4954
    28cc:	4934434f 	ldmdbmi	r4!, {r0, r1, r2, r3, r6, r8, r9, lr}
    28d0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    28d4:	5f4d4954 	svcpl	0x004d4954
    28d8:	63726f46 	cmnvs	r2, #280	; 0x118
    28dc:	434f6465 	movtmi	r6, #62565	; 0xf465
    28e0:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
    28e4:	00676966 	rsbeq	r6, r7, r6, ror #18
    28e8:	5f4d4954 	svcpl	0x004d4954
    28ec:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    28f0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    28f4:	54007265 	strpl	r7, [r0], #-613	; 0x265
    28f8:	4f5f4d49 	svcmi	0x005f4d49
    28fc:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    2900:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2904:	00746375 	rsbseq	r6, r4, r5, ror r3
    2908:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0x845
    290c:	69464752 	stmdbvs	r6, {r1, r4, r6, r8, r9, sl, lr}^
    2910:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2914:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2918:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    291c:	53746365 	cmnpl	r4, #-1811939327	; 0x94000001
    2920:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
    2924:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2928:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    292c:	31434f5f 	cmpcc	r3, pc, asr pc
    2930:	74736146 	ldrbtvc	r6, [r3], #-326	; 0x146
    2934:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2938:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    293c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1bfb <__Stack_Size+0x17fb>
    2940:	6f435254 	svcvs	0x00435254
    2944:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2948:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    294c:	31434f5f 	cmpcc	r3, pc, asr pc
    2950:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 2820 <__Stack_Size+0x2420>
    2954:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2958:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    295c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2960:	5f4d4954 	svcpl	0x004d4954
    2964:	53504349 	cmppl	r0, #603979777	; 0x24000001
    2968:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
    296c:	76455f4d 	strbvc	r5, [r5], -sp, asr #30
    2970:	53746e65 	cmnpl	r4, #1616	; 0x650
    2974:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2978:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    297c:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2980:	74003172 	strvc	r3, [r0], #-370	; 0x172
    2984:	6363706d 	cmnvs	r3, #109	; 0x6d
    2988:	0032726d 	eorseq	r7, r2, sp, ror #4
    298c:	5f4d4954 	svcpl	0x004d4954
    2990:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2994:	006c656e 	rsbeq	r6, ip, lr, ror #10
    2998:	5f4d4954 	svcpl	0x004d4954
    299c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    29a0:	4f437463 	svcmi	0x00437463
    29a4:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    29a8:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    29ac:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    29b0:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    29b4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    29b8:	69006c6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}
    29bc:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    29c0:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    29c4:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    29c8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    29cc:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
    29d0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    29d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    29d8:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    29dc:	6b636f6c 	blvs	18de794 <__Stack_Size+0x18de394>
    29e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    29e4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    29e8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    29ec:	43497465 	movtmi	r7, #37989	; 0x9465
    29f0:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0x31
    29f4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    29f8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    29fc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2a00:	54007843 	strpl	r7, [r0], #-2115	; 0x843
    2a04:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2a08:	43497465 	movtmi	r7, #37989	; 0x9465
    2a0c:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0x33
    2a10:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2a14:	54007265 	strpl	r7, [r0], #-613	; 0x265
    2a18:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2a1c:	6c655343 	stclvs	3, cr5, [r5], #-268	; 0xfffffef4
    2a20:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2a24:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
    2a28:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1ce7 <__Stack_Size+0x18e7>
    2a2c:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2a30:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2a34:	3165646f 	cmncc	r5, pc, ror #8
    2a38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a3c:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2a40:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2a44:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2a48:	656e4f74 	strbvs	r4, [lr, #-3956]!	; 0xf74
    2a4c:	736c7550 	cmnvc	ip, #80, 10	; 0x14000000
    2a50:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2a58 <__Stack_Size+0x2658>
    2a54:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2a58:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2a5c:	6f534f47 	svcvs	0x00534f47
    2a60:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2a64:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a68:	53534f5f 	cmppl	r3, #380	; 0x17c
    2a6c:	61745352 	cmnvs	r4, r2, asr r3
    2a70:	54006574 	strpl	r6, [r0], #-1396	; 0x574
    2a74:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2a78:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 2974 <__Stack_Size+0x2574>
    2a7c:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2a80:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2a84:	74435f4d 	strbvc	r5, [r3], #-3917	; 0xf4d
    2a88:	57506c72 			; <UNDEFINED> instruction: 0x57506c72
    2a8c:	74754f4d 	ldrbtvc	r4, [r5], #-3917	; 0xf4d
    2a90:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    2a94:	6f636900 	svcvs	0x00636900
    2a98:	736f7070 	cmnvc	pc, #112	; 0x70
    2a9c:	70657469 	rsbvc	r7, r5, r9, ror #8
    2aa0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2aa4:	00797469 	rsbseq	r7, r9, r9, ror #8
    2aa8:	5f4d4954 	svcpl	0x004d4954
    2aac:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2ab0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ab4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2ab8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2abc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2ac0:	5232434f 	eorspl	r4, r2, #1006632961	; 0x3c000001
    2ac4:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2ac8:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2ad0 <__Stack_Size+0x26d0>
    2acc:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2ad0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2ad4:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2ad8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2adc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2ae0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2ae4:	614d5f4d 	cmpvs	sp, sp, asr #30
    2ae8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2aec:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2af0:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2af8 <__Stack_Size+0x26f8>
    2af4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2af8:	75415f4d 	strbvc	r5, [r1, #-3917]	; 0xf4d
    2afc:	616d6f74 	smcvs	55028	; 0xd6f4
    2b00:	4f636974 	svcmi	0x00636974
    2b04:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2b08:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2b0c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2b10:	74754174 	ldrbtvc	r4, [r5], #-372	; 0x174
    2b14:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
    2b18:	0064616f 	rsbeq	r6, r4, pc, ror #2
    2b1c:	5f4d4954 	svcpl	0x004d4954
    2b20:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2b24:	5400646d 	strpl	r6, [r0], #-1133	; 0x46d
    2b28:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2b2c:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2b30:	31434f64 	cmpcc	r3, r4, ror #30
    2b34:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b38:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2b3c:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    2b40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b44:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2b48:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xf4d
    2b4c:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    2b50:	5400656d 	strpl	r6, [r0], #-1389	; 0x56d
    2b54:	4f5f4d49 	svcmi	0x005f4d49
    2b58:	504e3243 	subpl	r3, lr, r3, asr #4
    2b5c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2b60:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2b64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b68:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2b6c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2b70:	6c6f5034 	stclvs	0, cr5, [pc], #-208	; 2aa8 <__Stack_Size+0x26a8>
    2b74:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2b78:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2b7c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b80:	5f4d4954 	svcpl	0x004d4954
    2b84:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2b88:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2b8c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2b90:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2b94:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2b98:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2b9c:	5231434f 	eorspl	r4, r1, #1006632961	; 0x3c000001
    2ba0:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2ba4:	4f5f4d49 	svcmi	0x005f4d49
    2ba8:	6f503343 	svcvs	0x00503343
    2bac:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2bb0:	6f437974 	svcvs	0x00437974
    2bb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bb8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bbc:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    2bc0:	50475254 	subpl	r5, r7, r4, asr r2
    2bc4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2bc8:	00797469 	rsbseq	r7, r9, r9, ror #8
    2bcc:	5f4d4954 	svcpl	0x004d4954
    2bd0:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    2bd4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2bd8:	74006769 	strvc	r6, [r0], #-1897	; 0x769
    2bdc:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    2be0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2be4:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xf4d
    2be8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2bec:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2bf0:	4f646563 	svcmi	0x00646563
    2bf4:	6f433343 	svcvs	0x00433343
    2bf8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bfc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c00:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2c04:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2c08:	5f4d4954 	svcpl	0x004d4954
    2c0c:	69464349 	stmdbvs	r6, {r0, r3, r6, r8, r9, lr}^
    2c10:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2c14:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c18:	414d445f 	cmpmi	sp, pc, asr r4
    2c1c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2c20:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2c24:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2c28:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2c2c:	73614d74 	cmnvc	r1, #116, 26	; 0x1d00
    2c30:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    2c34:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
    2c38:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2c3c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2c40:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2c44:	49746365 	ldmdbmi	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2c48:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
    2c4c:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2c50:	00726567 	rsbseq	r6, r2, r7, ror #10
    2c54:	5f4d4954 	svcpl	0x004d4954
    2c58:	5032434f 	eorspl	r4, r2, pc, asr #6
    2c5c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2c60:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2c64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c68:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    2c6c:	65676574 	strbvs	r6, [r7, #-1396]!	; 0x574
    2c70:	76696472 			; <UNDEFINED> instruction: 0x76696472
    2c74:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2c78:	41535500 	cmpmi	r3, r0, lsl #10
    2c7c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2c80:	00414850 	subeq	r4, r1, r0, asr r8
    2c84:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c88:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    2c8c:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    2c90:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2c94:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    2c98:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2c9c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2ca0:	61657242 	cmnvs	r5, r2, asr #4
    2ca4:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    2ca8:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    2cac:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    2cb0:	53550068 	cmppl	r5, #104	; 0x68
    2cb4:	5f545241 	svcpl	0x00545241
    2cb8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2cbc:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2cc0:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2cc4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2cc8:	41535500 	cmpmi	r3, r0, lsl #10
    2ccc:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2cd0:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xc61
    2cd4:	656c7075 	strbvs	r7, [ip, #-117]!	; 0x75
    2cd8:	646d4378 	strbtvs	r4, [sp], #-888	; 0x378
    2cdc:	41535500 	cmpmi	r3, r0, lsl #10
    2ce0:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    2ce4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    2ce8:	53550070 	cmppl	r5, #112	; 0x70
    2cec:	5f545241 	svcpl	0x00545241
    2cf0:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2cf4:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2cf8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2cfc:	0054495f 	subseq	r4, r4, pc, asr r9
    2d00:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d04:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    2d08:	6f4d4144 	svcvs	0x004d4144
    2d0c:	61006564 	tstvs	r0, r4, ror #10
    2d10:	6c636270 	sfmvs	f6, 2, [r3], #-448	; 0xfffffe40
    2d14:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2d18:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d1c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2d20:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2d24:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2d28:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2d2c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2d30:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d34:	75475f54 	strbvc	r5, [r7, #-3924]	; 0xf54
    2d38:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    2d3c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2d40:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d44:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2d48:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0x24e
    2d4c:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xb61
    2d50:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    2d54:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2d58:	6f436874 	svcvs	0x00436874
    2d5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d60:	41535500 	cmpmi	r3, r0, lsl #10
    2d64:	465f5452 			; <UNDEFINED> instruction: 0x465f5452
    2d68:	0047414c 	subeq	r4, r7, ip, asr #2
    2d6c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d70:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2d74:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2d78:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2d7c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2d80:	53550074 	cmppl	r5, #116	; 0x74
    2d84:	5f545241 	svcpl	0x00545241
    2d88:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    2d8c:	55007165 	strpl	r7, [r0, #-357]	; 0x165
    2d90:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2d94:	6f6c435f 	svcvs	0x006c435f
    2d98:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xb63
    2d9c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2da0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2da4:	61737500 	cmnvs	r3, r0, lsl #10
    2da8:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    2dac:	00657361 	rsbeq	r7, r5, r1, ror #6
    2db0:	5f434352 	svcpl	0x00434352
    2db4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2db8:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    2dbc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2dc0:	41535500 	cmpmi	r3, r0, lsl #10
    2dc4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2dc8:	64417465 	strbvs	r7, [r1], #-1125	; 0x465
    2dcc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2dd0:	53550073 	cmppl	r5, #115	; 0x73
    2dd4:	5f545241 	svcpl	0x00545241
    2dd8:	47746553 			; <UNDEFINED> instruction: 0x47746553
    2ddc:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    2de0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2de4:	41535500 	cmpmi	r3, r0, lsl #10
    2de8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2dec:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    2df0:	6b616572 	blvs	185c3c0 <__Stack_Size+0x185bfc0>
    2df4:	41535500 	cmpmi	r3, r0, lsl #10
    2df8:	00785452 	rsbseq	r5, r8, r2, asr r4
    2dfc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e00:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    2e04:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2e08:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2e0c:	41535500 	cmpmi	r3, r0, lsl #10
    2e10:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    2e14:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    2e18:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    2e1c:	6f707469 	svcvs	0x00707469
    2e20:	53550073 	cmppl	r5, #115	; 0x73
    2e24:	5f545241 	svcpl	0x00545241
    2e28:	61656c43 	cmnvs	r5, r3, asr #24
    2e2c:	616c4672 	smcvs	50274	; 0xc462
    2e30:	53550067 	cmppl	r5, #103	; 0x67
    2e34:	5f545241 	svcpl	0x00545241
    2e38:	41447249 	cmpmi	r4, r9, asr #4
    2e3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2e40:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    2e44:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e48:	6f6c435f 	svcvs	0x006c435f
    2e4c:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    2e50:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e54:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2e58:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    2e5c:	6b615772 	blvs	1858c2c <__Stack_Size+0x185882c>
    2e60:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2e64:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2e68:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e6c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    2e70:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    2e74:	41535500 	cmpmi	r3, r0, lsl #10
    2e78:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    2e7c:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    2e80:	72660064 	rsbvc	r0, r6, #100	; 0x64
    2e84:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2e88:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    2e8c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2e90:	00726564 	rsbseq	r6, r2, r4, ror #10
    2e94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e98:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    2e9c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2ea0:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    2ea4:	434b4341 	movtmi	r4, #45889	; 0xb341
    2ea8:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2eac:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2eb0:	616d535f 	cmnvs	sp, pc, asr r3
    2eb4:	61437472 	hvcvs	14146	; 0x3742
    2eb8:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    2ebc:	53550064 	cmppl	r5, #100	; 0x64
    2ec0:	5f545241 	svcpl	0x00545241
    2ec4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2ec8:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2ecc:	53550074 	cmppl	r5, #116	; 0x74
    2ed0:	5f545241 	svcpl	0x00545241
    2ed4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2ed8:	6f437055 	svcvs	0x00437055
    2edc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ee0:	41535500 	cmpmi	r3, r0, lsl #10
    2ee4:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    2ee8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2eec:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2ef0:	41535500 	cmpmi	r3, r0, lsl #10
    2ef4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2ef8:	004c4f50 	subeq	r4, ip, r0, asr pc
    2efc:	616d7469 	cmnvs	sp, r9, ror #8
    2f00:	55006b73 	strpl	r6, [r0, #-2931]	; 0xb73
    2f04:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f08:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    2f0c:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    2f10:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2f14:	31663233 	cmncc	r6, r3, lsr r2
    2f18:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    2f1c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2f20:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2f24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2f28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2f2c:	6173755f 	cmnvs	r3, pc, asr r5
    2f30:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    2f34:	61737500 	cmnvs	r3, r0, lsl #10
    2f38:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    2f3c:	655f0067 	ldrbvs	r0, [pc, #-103]	; 2edd <__Stack_Size+0x2add>
    2f40:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    2f44:	735f006b 	cmpvc	pc, #107	; 0x6b
    2f48:	61746164 	cmnvs	r4, r4, ror #2
    2f4c:	73655200 	cmnvc	r5, #0, 4
    2f50:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    2f54:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2f58:	70007265 	andvc	r7, r0, r5, ror #4
    2f5c:	65446c75 	strbvs	r6, [r4, #-3189]	; 0xc75
    2f60:	5f007473 	svcpl	0x00007473
    2f64:	61646973 	smcvs	18067	; 0x4693
    2f68:	5f006174 	svcpl	0x00006174
    2f6c:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    2f70:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xf00
    2f74:	00617461 	rsbeq	r7, r1, r1, ror #8
    2f78:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2f7c:	30316632 	eorscc	r6, r1, r2, lsr r6
    2f80:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2f84:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2f88:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2f8c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2f90:	5f783031 	svcpl	0x00783031
    2f94:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
    2f98:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    2f9c:	705f6700 	subsvc	r6, pc, r0, lsl #14
    2fa0:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xe66
    2fa4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    2fa8:	75700073 	ldrbvc	r0, [r0, #-115]!	; 0x73
    2fac:	6372536c 	cmnvs	r2, #108, 6	; 0xb0000001
    2fb0:	62735f00 	rsbsvs	r5, r3, #0, 30
    2fb4:	Address 0x00002fb4 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
       4:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
       8:	68500001 	ldmdavs	r0, {r0}^
       c:	6a080031 	bvs	2000d8 <__Stack_Size+0x1ffcd8>
      10:	01080031 	tsteq	r8, r1, lsr r0
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	32bc0000 	adcscc	r0, ip, #0
      20:	32c40800 	sbccc	r0, r4, #0, 16
      24:	00010800 	andeq	r0, r1, r0, lsl #16
      28:	0032c450 	eorseq	ip, r2, r0, asr r4
      2c:	00330008 	eorseq	r0, r3, r8
      30:	f3000408 	vshl.u8	d0, d8, d0
      34:	009f5001 	addseq	r5, pc, r1
      38:	00000000 	andeq	r0, r0, r0
      3c:	20000000 	andcs	r0, r0, r0
      40:	26080033 			; <UNDEFINED> instruction: 0x26080033
      44:	01080033 	tsteq	r8, r3, lsr r0
      48:	33265000 			; <UNDEFINED> instruction: 0x33265000
      4c:	333c0800 	teqcc	ip, #0, 16
      50:	00040800 	andeq	r0, r4, r0, lsl #16
      54:	9f5001f3 	svcls	0x005001f3
	...
      60:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
      64:	08003340 	stmdaeq	r0, {r6, r8, r9, ip, sp}
      68:	40500001 	subsmi	r0, r0, r1
      6c:	44080033 	strmi	r0, [r8], #-51	; 0x33
      70:	03080033 	movweq	r0, #32819	; 0x8033
      74:	9f017400 	svcls	0x00017400
      78:	08003344 	stmdaeq	r0, {r2, r6, r8, r9, ip, sp}
      7c:	08003346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, sp}
      80:	46540001 	ldrbmi	r0, [r4], -r1
      84:	4c080033 	stcmi	0, cr0, [r8], {51}	; 0x33
      88:	03080033 	movweq	r0, #32819	; 0x8033
      8c:	9f017400 	svcls	0x00017400
      90:	0800334c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp}
      94:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
      98:	00540001 	subseq	r0, r4, r1
      9c:	00000000 	andeq	r0, r0, r0
      a0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
      a4:	59080033 	stmdbpl	r8, {r0, r1, r4, r5}
      a8:	01080033 	tsteq	r8, r3, lsr r0
      ac:	33595000 	cmpcc	r9, #0
      b0:	337c0800 	cmncc	ip, #0, 16
      b4:	00040800 	andeq	r0, r4, r0, lsl #16
      b8:	9f5001f3 	svcls	0x005001f3
	...
      c4:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
      c8:	08003387 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, ip, sp}
      cc:	87500001 	ldrbhi	r0, [r0, -r1]
      d0:	ac080033 	stcge	0, cr0, [r8], {51}	; 0x33
      d4:	04080033 	streq	r0, [r8], #-51	; 0x33
      d8:	5001f300 	andpl	pc, r1, r0, lsl #6
      dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e0:	00000000 	andeq	r0, r0, r0
      e4:	0033ac00 	eorseq	sl, r3, r0, lsl #24
      e8:	0033ae08 	eorseq	sl, r3, r8, lsl #28
      ec:	50000108 	andpl	r0, r0, r8, lsl #2
      f0:	080033ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, sp}
      f4:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
      f8:	02700003 	rsbseq	r0, r0, #3
      fc:	0033be9f 	mlaseq	r3, pc, lr, fp	; <UNPREDICTABLE>
     100:	0033f808 	eorseq	pc, r3, r8, lsl #16
     104:	f3000408 	vshl.u8	d0, d8, d0
     108:	009f5001 	addseq	r5, pc, r1
     10c:	00000000 	andeq	r0, r0, r0
     110:	8c000000 	stchi	0, cr0, [r0], {-0}
     114:	96080034 			; <UNDEFINED> instruction: 0x96080034
     118:	01080034 	tsteq	r8, r4, lsr r0
     11c:	34965000 	ldrcc	r5, [r6], #0
     120:	34ba0800 	ldrtcc	r0, [sl], #2048	; 0x800
     124:	00040800 	andeq	r0, r4, r0, lsl #16
     128:	9f5001f3 	svcls	0x005001f3
	...
     134:	08003496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip, sp}
     138:	080034a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, ip, sp}
     13c:	aa500001 	bge	1400148 <__Stack_Size+0x13ffd48>
     140:	b9080034 	stmdblt	r8, {r2, r4, r5}
     144:	01080034 	tsteq	r8, r4, lsr r0
     148:	00005000 	andeq	r5, r0, r0
     14c:	00000000 	andeq	r0, r0, r0
     150:	34ba0000 	ldrtcc	r0, [sl], #0
     154:	34c00800 	strbcc	r0, [r0], #2048	; 0x800
     158:	00010800 	andeq	r0, r1, r0, lsl #16
     15c:	0034c050 	eorseq	ip, r4, r0, asr r0
     160:	0034ce08 	eorseq	ip, r4, r8, lsl #28
     164:	f3000408 	vshl.u8	d0, d8, d0
     168:	009f5001 	addseq	r5, pc, r1
     16c:	00000000 	andeq	r0, r0, r0
     170:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
     174:	dd080034 	stcle	0, cr0, [r8, #-208]	; 0xffffff30
     178:	01080034 	tsteq	r8, r4, lsr r0
     17c:	34dd5000 	ldrbcc	r5, [sp], #0
     180:	35080800 	strcc	r0, [r8, #-2048]	; 0x800
     184:	00040800 	andeq	r0, r4, r0, lsl #16
     188:	9f5001f3 	svcls	0x005001f3
	...
     194:	080034ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp}
     198:	080034da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, ip, sp}
     19c:	da510001 	ble	14401a8 <__Stack_Size+0x143fda8>
     1a0:	08080034 	stmdaeq	r8, {r2, r4, r5}
     1a4:	04080035 	streq	r0, [r8], #-53	; 0x35
     1a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	0034d800 	eorseq	sp, r4, r0, lsl #16
     1b8:	0034dd08 	eorseq	sp, r4, r8, lsl #26
     1bc:	52000108 	andpl	r0, r0, #8, 2
     1c0:	080034dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, ip, sp}
     1c4:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     1c8:	000a0015 	andeq	r0, sl, r5, lsl r0
     1cc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
     1d0:	5101f31c 	tstpl	r1, ip, lsl r3	; <UNPREDICTABLE>
     1d4:	305101f3 	ldrshcc	r0, [r1], #-19	; 0xffffffed
     1d8:	0001282d 	andeq	r2, r1, sp, lsr #16
     1dc:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	e6000000 	str	r0, [r0], -r0
     1e8:	ea080034 	b	2002c0 <__Stack_Size+0x1ffec0>
     1ec:	01080034 	tsteq	r8, r4, lsr r0
     1f0:	34ea5000 	strbtcc	r5, [sl], #0
     1f4:	34f80800 	ldrbtcc	r0, [r8], #2048	; 0x800
     1f8:	00010800 	andeq	r0, r1, r0, lsl #16
     1fc:	0034fe54 	eorseq	pc, r4, r4, asr lr	; <UNPREDICTABLE>
     200:	00350808 	eorseq	r0, r5, r8, lsl #16
     204:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     210:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     214:	08003513 	stmdaeq	r0, {r0, r1, r4, r8, sl, ip, sp}
     218:	13500001 	cmpne	r0, #1
     21c:	50080035 	andpl	r0, r8, r5, lsr r0
     220:	04080035 	streq	r0, [r8], #-53	; 0x35
     224:	5001f300 	andpl	pc, r1, r0, lsl #6
     228:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     22c:	00000000 	andeq	r0, r0, r0
     230:	00350800 	eorseq	r0, r5, r0, lsl #16
     234:	00351008 	eorseq	r1, r5, r8
     238:	51000108 	tstpl	r0, r8, lsl #2
     23c:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
     240:	0800351c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp}
     244:	1c540001 	mrrcne	0, 0, r0, r4, cr1
     248:	50080035 	andpl	r0, r8, r5, lsr r0
     24c:	04080035 	streq	r0, [r8], #-53	; 0x35
     250:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     254:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     258:	00000000 	andeq	r0, r0, r0
     25c:	00350800 	eorseq	r0, r5, r0, lsl #16
     260:	00351308 	eorseq	r1, r5, r8, lsl #6
     264:	52000108 	andpl	r0, r0, #8, 2
     268:	08003513 	stmdaeq	r0, {r0, r1, r4, r8, sl, ip, sp}
     26c:	08003550 	stmdaeq	r0, {r4, r6, r8, sl, ip, sp}
     270:	01f30004 	mvnseq	r0, r4
     274:	00009f52 	andeq	r9, r0, r2, asr pc
     278:	00000000 	andeq	r0, r0, r0
     27c:	351c0000 	ldrcc	r0, [ip, #-0]
     280:	352e0800 	strcc	r0, [lr, #-2048]!	; 0x800
     284:	00010800 	andeq	r0, r1, r0, lsl #16
     288:	00352e54 	eorseq	r2, r5, r4, asr lr
     28c:	00355008 	eorseq	r5, r5, r8
     290:	f3001408 	vshl.u8	d1, d8, d0
     294:	80235101 	eorhi	r5, r3, r1, lsl #2
     298:	5101f308 	tstpl	r1, r8, lsl #6	; <UNPREDICTABLE>
     29c:	305101f3 	ldrshcc	r0, [r1], #-19	; 0xffffffed
     2a0:	0001282d 	andeq	r2, r1, sp, lsr #16
     2a4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     2b0:	32080035 	andcc	r0, r8, #53	; 0x35
     2b4:	01080035 	tsteq	r8, r5, lsr r0
     2b8:	35325000 	ldrcc	r5, [r2, #-0]!
     2bc:	35400800 	strbcc	r0, [r0, #-2048]	; 0x800
     2c0:	00010800 	andeq	r0, r1, r0, lsl #16
     2c4:	00354654 	eorseq	r4, r5, r4, asr r6
     2c8:	00355008 	eorseq	r5, r5, r8
     2cc:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     2d8:	08003550 	stmdaeq	r0, {r4, r6, r8, sl, ip, sp}
     2dc:	08003559 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl, ip, sp}
     2e0:	59500001 	ldmdbpl	r0, {r0}^
     2e4:	84080035 	strhi	r0, [r8], #-53	; 0x35
     2e8:	04080035 	streq	r0, [r8], #-53	; 0x35
     2ec:	5001f300 	andpl	pc, r1, r0, lsl #6
     2f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	00356200 	eorseq	r6, r5, r0, lsl #4
     2fc:	00356608 	eorseq	r6, r5, r8, lsl #12
     300:	50000108 	andpl	r0, r0, r8, lsl #2
     304:	08003566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, sp}
     308:	08003574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip, sp}
     30c:	7a540001 	bvc	1500318 <__Stack_Size+0x14fff18>
     310:	84080035 	strhi	r0, [r8], #-53	; 0x35
     314:	01080035 	tsteq	r8, r5, lsr r0
     318:	00005000 	andeq	r5, r0, r0
     31c:	00000000 	andeq	r0, r0, r0
     320:	35840000 	strcc	r0, [r4]
     324:	358d0800 	strcc	r0, [sp, #2048]	; 0x800
     328:	00010800 	andeq	r0, r1, r0, lsl #16
     32c:	00358d50 	eorseq	r8, r5, r0, asr sp
     330:	0035b808 	eorseq	fp, r5, r8, lsl #16
     334:	f3000408 	vshl.u8	d0, d8, d0
     338:	009f5001 	addseq	r5, pc, r1
     33c:	00000000 	andeq	r0, r0, r0
     340:	96000000 	strls	r0, [r0], -r0
     344:	9a080035 	bls	200420 <__Stack_Size+0x200020>
     348:	01080035 	tsteq	r8, r5, lsr r0
     34c:	359a5000 	ldrcc	r5, [sl]
     350:	35a80800 	strcc	r0, [r8, #2048]!	; 0x800
     354:	00010800 	andeq	r0, r1, r0, lsl #16
     358:	0035ae54 	eorseq	sl, r5, r4, asr lr
     35c:	0035b808 	eorseq	fp, r5, r8, lsl #16
     360:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     36c:	080035b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, ip, sp}
     370:	080035c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, ip, sp}
     374:	c1500001 	cmpgt	r0, r1
     378:	f0080035 			; <UNDEFINED> instruction: 0xf0080035
     37c:	04080035 	streq	r0, [r8], #-53	; 0x35
     380:	5001f300 	andpl	pc, r1, r0, lsl #6
     384:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     388:	00000000 	andeq	r0, r0, r0
     38c:	0035b800 	eorseq	fp, r5, r0, lsl #16
     390:	0035be08 	eorseq	fp, r5, r8, lsl #28
     394:	51000108 	tstpl	r0, r8, lsl #2
     398:	080035be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, ip, sp}
     39c:	080035cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, ip, sp}
     3a0:	cc540001 	mrrcgt	0, 0, r0, r4, cr1
     3a4:	f0080035 			; <UNDEFINED> instruction: 0xf0080035
     3a8:	04080035 	streq	r0, [r8], #-53	; 0x35
     3ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     3b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	0035cc00 	eorseq	ip, r5, r0, lsl #24
     3bc:	0035d008 	eorseq	sp, r5, r8
     3c0:	50000108 	andpl	r0, r0, r8, lsl #2
     3c4:	080035d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip, sp}
     3c8:	080035de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, ip, sp}
     3cc:	e4540001 	ldrb	r0, [r4], #-1
     3d0:	f0080035 			; <UNDEFINED> instruction: 0xf0080035
     3d4:	01080035 	tsteq	r8, r5, lsr r0
     3d8:	00005000 	andeq	r5, r0, r0
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	35f00000 	ldrbcc	r0, [r0, #0]!
     3e4:	35f90800 	ldrbcc	r0, [r9, #2048]!	; 0x800
     3e8:	00010800 	andeq	r0, r1, r0, lsl #16
     3ec:	0035f950 	eorseq	pc, r5, r0, asr r9	; <UNPREDICTABLE>
     3f0:	00362808 	eorseq	r2, r6, r8, lsl #16
     3f4:	f3000408 	vshl.u8	d0, d8, d0
     3f8:	009f5001 	addseq	r5, pc, r1
     3fc:	00000000 	andeq	r0, r0, r0
     400:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     404:	f6080035 			; <UNDEFINED> instruction: 0xf6080035
     408:	01080035 	tsteq	r8, r5, lsr r0
     40c:	35f65100 	ldrbcc	r5, [r6, #256]!	; 0x100
     410:	36040800 	strcc	r0, [r4], -r0, lsl #16
     414:	00010800 	andeq	r0, r1, r0, lsl #16
     418:	00360454 	eorseq	r0, r6, r4, asr r4
     41c:	00362808 	eorseq	r2, r6, r8, lsl #16
     420:	f3000408 	vshl.u8	d0, d8, d0
     424:	009f5101 	addseq	r5, pc, r1, lsl #2
     428:	00000000 	andeq	r0, r0, r0
     42c:	04000000 	streq	r0, [r0], #-0
     430:	08080036 	stmdaeq	r8, {r1, r2, r4, r5}
     434:	01080036 	tsteq	r8, r6, lsr r0
     438:	36085000 	strcc	r5, [r8], -r0
     43c:	36160800 	ldrcc	r0, [r6], -r0, lsl #16
     440:	00010800 	andeq	r0, r1, r0, lsl #16
     444:	00361c54 	eorseq	r1, r6, r4, asr ip
     448:	00362808 	eorseq	r2, r6, r8, lsl #16
     44c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     458:	08003628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp}
     45c:	08003631 	stmdaeq	r0, {r0, r4, r5, r9, sl, ip, sp}
     460:	31500001 	cmpcc	r0, r1
     464:	60080036 	andvs	r0, r8, r6, lsr r0
     468:	04080036 	streq	r0, [r8], #-54	; 0x36
     46c:	5001f300 	andpl	pc, r1, r0, lsl #6
     470:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     474:	00000000 	andeq	r0, r0, r0
     478:	00362800 	eorseq	r2, r6, r0, lsl #16
     47c:	00362e08 	eorseq	r2, r6, r8, lsl #28
     480:	51000108 	tstpl	r0, r8, lsl #2
     484:	0800362e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip, sp}
     488:	0800363c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp}
     48c:	3c540001 	mrrccc	0, 0, r0, r4, cr1
     490:	60080036 	andvs	r0, r8, r6, lsr r0
     494:	04080036 	streq	r0, [r8], #-54	; 0x36
     498:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     49c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	00363c00 	eorseq	r3, r6, r0, lsl #24
     4a8:	00364008 	eorseq	r4, r6, r8
     4ac:	50000108 	andpl	r0, r0, r8, lsl #2
     4b0:	08003640 	stmdaeq	r0, {r6, r9, sl, ip, sp}
     4b4:	0800364e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, ip, sp}
     4b8:	54540001 	ldrbpl	r0, [r4], #-1
     4bc:	60080036 	andvs	r0, r8, r6, lsr r0
     4c0:	01080036 	tsteq	r8, r6, lsr r0
     4c4:	00005000 	andeq	r5, r0, r0
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	36600000 	strbtcc	r0, [r0], -r0
     4d0:	36690800 	strbtcc	r0, [r9], -r0, lsl #16
     4d4:	00010800 	andeq	r0, r1, r0, lsl #16
     4d8:	00366950 	eorseq	r6, r6, r0, asr r9
     4dc:	00369808 	eorseq	r9, r6, r8, lsl #16
     4e0:	f3000408 	vshl.u8	d0, d8, d0
     4e4:	009f5001 	addseq	r5, pc, r1
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	60000000 	andvs	r0, r0, r0
     4f0:	66080036 			; <UNDEFINED> instruction: 0x66080036
     4f4:	01080036 	tsteq	r8, r6, lsr r0
     4f8:	36665100 	strbtcc	r5, [r6], -r0, lsl #2
     4fc:	36740800 	ldrbtcc	r0, [r4], -r0, lsl #16
     500:	00010800 	andeq	r0, r1, r0, lsl #16
     504:	00367454 	eorseq	r7, r6, r4, asr r4
     508:	00369808 	eorseq	r9, r6, r8, lsl #16
     50c:	f3000408 	vshl.u8	d0, d8, d0
     510:	009f5101 	addseq	r5, pc, r1, lsl #2
     514:	00000000 	andeq	r0, r0, r0
     518:	74000000 	strvc	r0, [r0], #-0
     51c:	78080036 	stmdavc	r8, {r1, r2, r4, r5}
     520:	01080036 	tsteq	r8, r6, lsr r0
     524:	36785000 	ldrbtcc	r5, [r8], -r0
     528:	36860800 	strcc	r0, [r6], r0, lsl #16
     52c:	00010800 	andeq	r0, r1, r0, lsl #16
     530:	00368c54 	eorseq	r8, r6, r4, asr ip
     534:	00369808 	eorseq	r9, r6, r8, lsl #16
     538:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     544:	08003698 	stmdaeq	r0, {r3, r4, r7, r9, sl, ip, sp}
     548:	080036a1 	stmdaeq	r0, {r0, r5, r7, r9, sl, ip, sp}
     54c:	a1500001 	cmpge	r0, r1
     550:	d0080036 	andle	r0, r8, r6, lsr r0
     554:	04080036 	streq	r0, [r8], #-54	; 0x36
     558:	5001f300 	andpl	pc, r1, r0, lsl #6
     55c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     560:	00000000 	andeq	r0, r0, r0
     564:	00369800 	eorseq	r9, r6, r0, lsl #16
     568:	00369e08 	eorseq	r9, r6, r8, lsl #28
     56c:	51000108 	tstpl	r0, r8, lsl #2
     570:	0800369e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip, sp}
     574:	080036ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip, sp}
     578:	ac540001 	mrrcge	0, 0, r0, r4, cr1
     57c:	d0080036 	andle	r0, r8, r6, lsr r0
     580:	04080036 	streq	r0, [r8], #-54	; 0x36
     584:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     588:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     58c:	00000000 	andeq	r0, r0, r0
     590:	0036ac00 	eorseq	sl, r6, r0, lsl #24
     594:	0036b008 	eorseq	fp, r6, r8
     598:	50000108 	andpl	r0, r0, r8, lsl #2
     59c:	080036b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, sp}
     5a0:	080036be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, sp}
     5a4:	c4540001 	ldrbgt	r0, [r4], #-1
     5a8:	d0080036 	andle	r0, r8, r6, lsr r0
     5ac:	01080036 	tsteq	r8, r6, lsr r0
     5b0:	00005000 	andeq	r5, r0, r0
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	36d00000 	ldrbcc	r0, [r0], r0
     5bc:	36d90800 	ldrbcc	r0, [r9], r0, lsl #16
     5c0:	00010800 	andeq	r0, r1, r0, lsl #16
     5c4:	0036d950 	eorseq	sp, r6, r0, asr r9
     5c8:	00370808 	eorseq	r0, r7, r8, lsl #16
     5cc:	f3000408 	vshl.u8	d0, d8, d0
     5d0:	009f5001 	addseq	r5, pc, r1
     5d4:	00000000 	andeq	r0, r0, r0
     5d8:	d0000000 	andle	r0, r0, r0
     5dc:	d6080036 			; <UNDEFINED> instruction: 0xd6080036
     5e0:	01080036 	tsteq	r8, r6, lsr r0
     5e4:	36d65100 	ldrbcc	r5, [r6], r0, lsl #2
     5e8:	36e40800 	strbtcc	r0, [r4], r0, lsl #16
     5ec:	00010800 	andeq	r0, r1, r0, lsl #16
     5f0:	0036e454 	eorseq	lr, r6, r4, asr r4
     5f4:	00370808 	eorseq	r0, r7, r8, lsl #16
     5f8:	f3000408 	vshl.u8	d0, d8, d0
     5fc:	009f5101 	addseq	r5, pc, r1, lsl #2
     600:	00000000 	andeq	r0, r0, r0
     604:	e4000000 	str	r0, [r0], #-0
     608:	e8080036 	stmda	r8, {r1, r2, r4, r5}
     60c:	01080036 	tsteq	r8, r6, lsr r0
     610:	36e85000 	strbtcc	r5, [r8], r0
     614:	36f60800 	ldrbtcc	r0, [r6], r0, lsl #16
     618:	00010800 	andeq	r0, r1, r0, lsl #16
     61c:	0036fc54 	eorseq	pc, r6, r4, asr ip	; <UNPREDICTABLE>
     620:	00370808 	eorseq	r0, r7, r8, lsl #16
     624:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     630:	08003708 	stmdaeq	r0, {r3, r8, r9, sl, ip, sp}
     634:	08003711 	stmdaeq	r0, {r0, r4, r8, r9, sl, ip, sp}
     638:	11500001 	cmpne	r0, r1
     63c:	40080037 	andmi	r0, r8, r7, lsr r0
     640:	04080037 	streq	r0, [r8], #-55	; 0x37
     644:	5001f300 	andpl	pc, r1, r0, lsl #6
     648:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     64c:	00000000 	andeq	r0, r0, r0
     650:	00370800 	eorseq	r0, r7, r0, lsl #16
     654:	00370e08 	eorseq	r0, r7, r8, lsl #28
     658:	51000108 	tstpl	r0, r8, lsl #2
     65c:	0800370e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip, sp}
     660:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     664:	1c540001 	mrrcne	0, 0, r0, r4, cr1
     668:	40080037 	andmi	r0, r8, r7, lsr r0
     66c:	04080037 	streq	r0, [r8], #-55	; 0x37
     670:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     674:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     678:	00000000 	andeq	r0, r0, r0
     67c:	00371c00 	eorseq	r1, r7, r0, lsl #24
     680:	00372008 	eorseq	r2, r7, r8
     684:	50000108 	andpl	r0, r0, r8, lsl #2
     688:	08003720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp}
     68c:	0800372e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, ip, sp}
     690:	34540001 	ldrbcc	r0, [r4], #-1
     694:	40080037 	andmi	r0, r8, r7, lsr r0
     698:	01080037 	tsteq	r8, r7, lsr r0
     69c:	00005000 	andeq	r5, r0, r0
     6a0:	00000000 	andeq	r0, r0, r0
     6a4:	37400000 	strbcc	r0, [r0, -r0]
     6a8:	37490800 	strbcc	r0, [r9, -r0, lsl #16]
     6ac:	00010800 	andeq	r0, r1, r0, lsl #16
     6b0:	00374950 	eorseq	r4, r7, r0, asr r9
     6b4:	00377808 	eorseq	r7, r7, r8, lsl #16
     6b8:	f3000408 	vshl.u8	d0, d8, d0
     6bc:	009f5001 	addseq	r5, pc, r1
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	40000000 	andmi	r0, r0, r0
     6c8:	46080037 			; <UNDEFINED> instruction: 0x46080037
     6cc:	01080037 	tsteq	r8, r7, lsr r0
     6d0:	37465100 	strbcc	r5, [r6, -r0, lsl #2]
     6d4:	37540800 	ldrbcc	r0, [r4, -r0, lsl #16]
     6d8:	00010800 	andeq	r0, r1, r0, lsl #16
     6dc:	00375454 	eorseq	r5, r7, r4, asr r4
     6e0:	00377808 	eorseq	r7, r7, r8, lsl #16
     6e4:	f3000408 	vshl.u8	d0, d8, d0
     6e8:	009f5101 	addseq	r5, pc, r1, lsl #2
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	54000000 	strpl	r0, [r0], #-0
     6f4:	58080037 	stmdapl	r8, {r0, r1, r2, r4, r5}
     6f8:	01080037 	tsteq	r8, r7, lsr r0
     6fc:	37585000 	ldrbcc	r5, [r8, -r0]
     700:	37660800 	strbcc	r0, [r6, -r0, lsl #16]!
     704:	00010800 	andeq	r0, r1, r0, lsl #16
     708:	00376c54 	eorseq	r6, r7, r4, asr ip
     70c:	00377808 	eorseq	r7, r7, r8, lsl #16
     710:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     71c:	08003778 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, ip, sp}
     720:	08003781 	stmdaeq	r0, {r0, r7, r8, r9, sl, ip, sp}
     724:	81500001 	cmphi	r0, r1
     728:	b0080037 	andlt	r0, r8, r7, lsr r0
     72c:	04080037 	streq	r0, [r8], #-55	; 0x37
     730:	5001f300 	andpl	pc, r1, r0, lsl #6
     734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     738:	00000000 	andeq	r0, r0, r0
     73c:	00377800 	eorseq	r7, r7, r0, lsl #16
     740:	00377e08 	eorseq	r7, r7, r8, lsl #28
     744:	51000108 	tstpl	r0, r8, lsl #2
     748:	0800377e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, ip, sp}
     74c:	0800378c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, ip, sp}
     750:	8c540001 	mrrchi	0, 0, r0, r4, cr1
     754:	b0080037 	andlt	r0, r8, r7, lsr r0
     758:	04080037 	streq	r0, [r8], #-55	; 0x37
     75c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     760:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     764:	00000000 	andeq	r0, r0, r0
     768:	00378c00 	eorseq	r8, r7, r0, lsl #24
     76c:	00379008 	eorseq	r9, r7, r8
     770:	50000108 	andpl	r0, r0, r8, lsl #2
     774:	08003790 	stmdaeq	r0, {r4, r7, r8, r9, sl, ip, sp}
     778:	0800379e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, ip, sp}
     77c:	a4540001 	ldrbge	r0, [r4], #-1
     780:	b0080037 	andlt	r0, r8, r7, lsr r0
     784:	01080037 	tsteq	r8, r7, lsr r0
     788:	00005000 	andeq	r5, r0, r0
     78c:	00000000 	andeq	r0, r0, r0
     790:	37b00000 	ldrcc	r0, [r0, r0]!
     794:	37b90800 	ldrcc	r0, [r9, r0, lsl #16]!
     798:	00010800 	andeq	r0, r1, r0, lsl #16
     79c:	0037b950 	eorseq	fp, r7, r0, asr r9
     7a0:	0037e808 	eorseq	lr, r7, r8, lsl #16
     7a4:	f3000408 	vshl.u8	d0, d8, d0
     7a8:	009f5001 	addseq	r5, pc, r1
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	b0000000 	andlt	r0, r0, r0
     7b4:	b6080037 			; <UNDEFINED> instruction: 0xb6080037
     7b8:	01080037 	tsteq	r8, r7, lsr r0
     7bc:	37b65100 	ldrcc	r5, [r6, r0, lsl #2]!
     7c0:	37c40800 	strbcc	r0, [r4, r0, lsl #16]
     7c4:	00010800 	andeq	r0, r1, r0, lsl #16
     7c8:	0037c454 	eorseq	ip, r7, r4, asr r4
     7cc:	0037e808 	eorseq	lr, r7, r8, lsl #16
     7d0:	f3000408 	vshl.u8	d0, d8, d0
     7d4:	009f5101 	addseq	r5, pc, r1, lsl #2
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	c4000000 	strgt	r0, [r0], #-0
     7e0:	c8080037 	stmdagt	r8, {r0, r1, r2, r4, r5}
     7e4:	01080037 	tsteq	r8, r7, lsr r0
     7e8:	37c85000 	strbcc	r5, [r8, r0]
     7ec:	37d60800 	ldrbcc	r0, [r6, r0, lsl #16]
     7f0:	00010800 	andeq	r0, r1, r0, lsl #16
     7f4:	0037dc54 	eorseq	sp, r7, r4, asr ip
     7f8:	0037e808 	eorseq	lr, r7, r8, lsl #16
     7fc:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     808:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
     80c:	080037f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     810:	f1500001 			; <UNDEFINED> instruction: 0xf1500001
     814:	20080037 	andcs	r0, r8, r7, lsr r0
     818:	04080038 	streq	r0, [r8], #-56	; 0x38
     81c:	5001f300 	andpl	pc, r1, r0, lsl #6
     820:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     824:	00000000 	andeq	r0, r0, r0
     828:	0037e800 	eorseq	lr, r7, r0, lsl #16
     82c:	0037ee08 	eorseq	lr, r7, r8, lsl #28
     830:	51000108 	tstpl	r0, r8, lsl #2
     834:	080037ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp}
     838:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     83c:	fc540001 	mrrc2	0, 0, r0, r4, cr1
     840:	20080037 	andcs	r0, r8, r7, lsr r0
     844:	04080038 	streq	r0, [r8], #-56	; 0x38
     848:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     84c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     850:	00000000 	andeq	r0, r0, r0
     854:	0037fc00 	eorseq	pc, r7, r0, lsl #24
     858:	00380008 	eorseq	r0, r8, r8
     85c:	50000108 	andpl	r0, r0, r8, lsl #2
     860:	08003800 	stmdaeq	r0, {fp, ip, sp}
     864:	0800380e 	stmdaeq	r0, {r1, r2, r3, fp, ip, sp}
     868:	14540001 	ldrbne	r0, [r4], #-1
     86c:	20080038 	andcs	r0, r8, r8, lsr r0
     870:	01080038 	tsteq	r8, r8, lsr r0
     874:	00005000 	andeq	r5, r0, r0
     878:	00000000 	andeq	r0, r0, r0
     87c:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
     880:	38290800 	stmdacc	r9!, {fp}
     884:	00010800 	andeq	r0, r1, r0, lsl #16
     888:	00382950 	eorseq	r2, r8, r0, asr r9
     88c:	00385408 	eorseq	r5, r8, r8, lsl #8
     890:	f3000408 	vshl.u8	d0, d8, d0
     894:	009f5001 	addseq	r5, pc, r1
     898:	00000000 	andeq	r0, r0, r0
     89c:	20000000 	andcs	r0, r0, r0
     8a0:	26080038 			; <UNDEFINED> instruction: 0x26080038
     8a4:	01080038 	tsteq	r8, r8, lsr r0
     8a8:	38265100 	stmdacc	r6!, {r8, ip, lr}
     8ac:	38290800 	stmdacc	r9!, {fp}
     8b0:	00010800 	andeq	r0, r1, r0, lsl #16
     8b4:	00382952 	eorseq	r2, r8, r2, asr r9
     8b8:	00385408 	eorseq	r5, r8, r8, lsl #8
     8bc:	f3000408 	vshl.u8	d0, d8, d0
     8c0:	009f5101 	addseq	r5, pc, r1, lsl #2
     8c4:	00000000 	andeq	r0, r0, r0
     8c8:	32000000 	andcc	r0, r0, #0
     8cc:	36080038 			; <UNDEFINED> instruction: 0x36080038
     8d0:	01080038 	tsteq	r8, r8, lsr r0
     8d4:	38365000 	ldmdacc	r6!, {ip, lr}
     8d8:	38440800 	stmdacc	r4, {fp}^
     8dc:	00010800 	andeq	r0, r1, r0, lsl #16
     8e0:	00384a54 	eorseq	r4, r8, r4, asr sl
     8e4:	00385408 	eorseq	r5, r8, r8, lsl #8
     8e8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     8f4:	08003854 	stmdaeq	r0, {r2, r4, r6, fp, ip, sp}
     8f8:	0800385a 	stmdaeq	r0, {r1, r3, r4, r6, fp, ip, sp}
     8fc:	5a500001 	bpl	1400908 <__Stack_Size+0x1400508>
     900:	6e080038 	mcrvs	0, 0, r0, cr8, cr8, {1}
     904:	04080038 	streq	r0, [r8], #-56	; 0x38
     908:	5001f300 	andpl	pc, r1, r0, lsl #6
     90c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     910:	00000000 	andeq	r0, r0, r0
     914:	00385400 	eorseq	r5, r8, r0, lsl #8
     918:	00385a08 	eorseq	r5, r8, r8, lsl #20
     91c:	51000108 	tstpl	r0, r8, lsl #2
     920:	0800385a 	stmdaeq	r0, {r1, r3, r4, r6, fp, ip, sp}
     924:	0800386e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, sp}
     928:	00540001 	subseq	r0, r4, r1
     92c:	00000000 	andeq	r0, r0, r0
     930:	5a000000 	bpl	938 <__Stack_Size+0x538>
     934:	68080038 	stmdavs	r8, {r3, r4, r5}
     938:	03080038 	movweq	r0, #32824	; 0x8038
     93c:	9fff0900 	svcls	0x00ff0900
     940:	08003868 	stmdaeq	r0, {r3, r5, r6, fp, ip, sp}
     944:	0800386e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, sp}
     948:	00500001 	subseq	r0, r0, r1
     94c:	00000000 	andeq	r0, r0, r0
     950:	ac000000 	stcge	0, cr0, [r0], {-0}
     954:	b2080039 	andlt	r0, r8, #57	; 0x39
     958:	01080039 	tsteq	r8, r9, lsr r0
     95c:	39b25000 	ldmibcc	r2!, {ip, lr}
     960:	39bc0800 	ldmibcc	ip!, {fp}
     964:	00010800 	andeq	r0, r1, r0, lsl #16
     968:	0039bc54 	eorseq	fp, r9, r4, asr ip
     96c:	0039cb08 	eorseq	ip, r9, r8, lsl #22
     970:	03000508 	movweq	r0, #1288	; 0x508
     974:	20000124 	andcs	r0, r0, r4, lsr #2
     978:	080039cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, fp, ip, sp}
     97c:	080039dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, sp}
     980:	01f30004 	mvnseq	r0, r4
     984:	00009f50 	andeq	r9, r0, r0, asr pc
     988:	00000000 	andeq	r0, r0, r0
     98c:	39dc0000 	ldmibcc	ip, {}^	; <UNPREDICTABLE>
     990:	39e90800 	stmibcc	r9!, {fp}^
     994:	00010800 	andeq	r0, r1, r0, lsl #16
     998:	0039e950 	eorseq	lr, r9, r0, asr r9
     99c:	003a0e08 	eorseq	r0, sl, r8, lsl #28
     9a0:	f3000408 	vshl.u8	d0, d8, d0
     9a4:	009f5001 	addseq	r5, pc, r1
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	dc000000 	stcle	0, cr0, [r0], {-0}
     9b0:	e4080039 	str	r0, [r8], #-57	; 0x39
     9b4:	01080039 	tsteq	r8, r9, lsr r0
     9b8:	39e45100 	stmibcc	r4!, {r8, ip, lr}^
     9bc:	39f40800 	ldmibcc	r4!, {fp}^
     9c0:	00010800 	andeq	r0, r1, r0, lsl #16
     9c4:	0039f454 	eorseq	pc, r9, r4, asr r4	; <UNPREDICTABLE>
     9c8:	003a0e08 	eorseq	r0, sl, r8, lsl #28
     9cc:	f3000408 	vshl.u8	d0, d8, d0
     9d0:	009f5101 	addseq	r5, pc, r1, lsl #2
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	dc000000 	stcle	0, cr0, [r0], {-0}
     9dc:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
     9e0:	01080039 	tsteq	r8, r9, lsr r0
     9e4:	39e95200 	stmibcc	r9!, {r9, ip, lr}^
     9e8:	3a080800 	bcc	2029f0 <__Stack_Size+0x2025f0>
     9ec:	00010800 	andeq	r0, r1, r0, lsl #16
     9f0:	003a0856 	eorseq	r0, sl, r6, asr r8
     9f4:	003a0e08 	eorseq	r0, sl, r8, lsl #28
     9f8:	f3000408 	vshl.u8	d0, d8, d0
     9fc:	009f5201 	addseq	r5, pc, r1, lsl #4
     a00:	00000000 	andeq	r0, r0, r0
     a04:	dc000000 	stcle	0, cr0, [r0], {-0}
     a08:	f4080039 	vst4.8	{d0-d3}, [r8 :256], r9
     a0c:	02080039 	andeq	r0, r8, #57	; 0x39
     a10:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
     a14:	08080039 	stmdaeq	r8, {r0, r3, r4, r5}
     a18:	0108003a 	tsteq	r8, sl, lsr r0
     a1c:	00005400 	andeq	r5, r0, r0, lsl #8
     a20:	00000000 	andeq	r0, r0, r0
     a24:	3a900000 	bcc	fe400a2c <SCS_BASE+0x1e3f2a2c>
     a28:	3a940800 	bcc	fe502a30 <SCS_BASE+0x1e4f4a30>
     a2c:	00020800 	andeq	r0, r2, r0, lsl #16
     a30:	3a949f30 	bcc	fe5286f8 <SCS_BASE+0x1e51a6f8>
     a34:	3b740800 	blcc	1d02a3c <__Stack_Size+0x1d0263c>
     a38:	00050800 	andeq	r0, r5, r0, lsl #16
     a3c:	1c007434 	cfstrsne	mvf7, [r0], {52}	; 0x34
     a40:	003b749f 	mlaseq	fp, pc, r4, r7	; <UNPREDICTABLE>
     a44:	003b7608 	eorseq	r7, fp, r8, lsl #12
     a48:	35000508 	strcc	r0, [r0, #-1288]	; 0x508
     a4c:	9f1c0074 	svcls	0x001c0074
     a50:	08003b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, ip, sp}
     a54:	08003b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp}
     a58:	74340005 	ldrtvc	r0, [r4], #-5
     a5c:	009f1c00 	addseq	r1, pc, r0, lsl #24
     a60:	00000000 	andeq	r0, r0, r0
     a64:	90000000 	andls	r0, r0, r0
     a68:	9a08003b 	bls	200b5c <__Stack_Size+0x20075c>
     a6c:	0108003b 	tsteq	r8, fp, lsr r0
     a70:	3b9a5000 	blcc	fe694a78 <SCS_BASE+0x1e686a78>
     a74:	3c0c0800 	stccc	8, cr0, [ip], {-0}
     a78:	00040800 	andeq	r0, r4, r0, lsl #16
     a7c:	9f5001f3 	svcls	0x005001f3
	...
     a88:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
     a8c:	08003b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp, ip, sp}
     a90:	9d510001 	ldclls	0, cr0, [r1, #-4]
     a94:	0208003b 	andeq	r0, r8, #59	; 0x3b
     a98:	0108003c 	tsteq	r8, ip, lsr r0
     a9c:	3c025500 	cfstr32cc	mvfx5, [r2], {-0}
     aa0:	3c0c0800 	stccc	8, cr0, [ip], {-0}
     aa4:	00040800 	andeq	r0, r4, r0, lsl #16
     aa8:	9f5101f3 	svcls	0x005101f3
	...
     ab4:	08003c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, sp}
     ab8:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
     abc:	40500001 	subsmi	r0, r0, r1
     ac0:	4308003c 	movwmi	r0, #32828	; 0x803c
     ac4:	0108003c 	tsteq	r8, ip, lsr r0
     ac8:	3c435100 	stfcce	f5, [r3], {-0}
     acc:	3c440800 	mcrrcc	8, 0, r0, r4, cr0
     ad0:	00040800 	andeq	r0, r4, r0, lsl #16
     ad4:	9f5001f3 	svcls	0x005001f3
	...
     ae0:	08005d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, ip, lr}
     ae4:	08005dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, ip, lr}
     ae8:	9f300002 	svcls	0x00300002
     aec:	08005dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, ip, lr}
     af0:	08005df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
     af4:	9f310002 	svcls	0x00310002
     af8:	08005df6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
     afc:	08005e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, lr}
     b00:	9f320002 	svcls	0x00320002
     b04:	08005e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, lr}
     b08:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
     b0c:	9f330002 	svcls	0x00330002
     b10:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
     b14:	08005ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, lr}
     b18:	00530001 	subseq	r0, r3, r1
	...
     b24:	04000000 	streq	r0, [r0], #-0
     b28:	01000000 	mrseq	r0, (UNDEF: 0)
     b2c:	00045000 	andeq	r5, r4, r0
     b30:	000c0000 	andeq	r0, ip, r0
     b34:	00040000 	andeq	r0, r4, r0
     b38:	9f5001f3 	svcls	0x005001f3
	...
     b48:	00000007 	andeq	r0, r0, r7
     b4c:	07510001 	ldrbeq	r0, [r1, -r1]
     b50:	0c000000 	stceq	0, cr0, [r0], {-0}
     b54:	04000000 	streq	r0, [r0], #-0
     b58:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     b5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b60:	00000000 	andeq	r0, r0, r0
     b64:	00001400 	andeq	r1, r0, r0, lsl #8
     b68:	00001c00 	andeq	r1, r0, r0, lsl #24
     b6c:	50000100 	andpl	r0, r0, r0, lsl #2
     b70:	0000001c 	andeq	r0, r0, ip, lsl r0
     b74:	00000032 	andeq	r0, r0, r2, lsr r0
     b78:	00560001 	subseq	r0, r6, r1
     b7c:	00000000 	andeq	r0, r0, r0
     b80:	14000000 	strne	r0, [r0], #-0
     b84:	1c000000 	stcne	0, cr0, [r0], {-0}
     b88:	01000000 	mrseq	r0, (UNDEF: 0)
     b8c:	001c5100 	andseq	r5, ip, r0, lsl #2
     b90:	00320000 	eorseq	r0, r2, r0
     b94:	00010000 	andeq	r0, r1, r0
     b98:	00000054 	andeq	r0, r0, r4, asr r0
     b9c:	00000000 	andeq	r0, r0, r0
     ba0:	00001400 	andeq	r1, r0, r0, lsl #8
     ba4:	00001c00 	andeq	r1, r0, r0, lsl #24
     ba8:	30000200 	andcc	r0, r0, r0, lsl #4
     bac:	00001c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
     bb0:	00002900 	andeq	r2, r0, r0, lsl #18
     bb4:	53000100 	movwpl	r0, #256	; 0x100
     bb8:	0000002a 	andeq	r0, r0, sl, lsr #32
     bbc:	0000002e 	andeq	r0, r0, lr, lsr #32
     bc0:	2e550001 	cdpcs	0, 5, cr0, cr5, cr1, {0}
     bc4:	32000000 	andcc	r0, r0, #0
     bc8:	01000000 	mrseq	r0, (UNDEF: 0)
     bcc:	00005300 	andeq	r5, r0, r0, lsl #6
     bd0:	00000000 	andeq	r0, r0, r0
     bd4:	00320000 	eorseq	r0, r2, r0
     bd8:	003a0000 	eorseq	r0, sl, r0
     bdc:	00010000 	andeq	r0, r1, r0
     be0:	00003a50 	andeq	r3, r0, r0, asr sl
     be4:	00005600 	andeq	r5, r0, r0, lsl #12
     be8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
     bf4:	00000032 	andeq	r0, r0, r2, lsr r0
     bf8:	0000003a 	andeq	r0, r0, sl, lsr r0
     bfc:	3a510001 	bcc	1440c08 <__Stack_Size+0x1440808>
     c00:	56000000 	strpl	r0, [r0], -r0
     c04:	01000000 	mrseq	r0, (UNDEF: 0)
     c08:	00005600 	andeq	r5, r0, r0, lsl #12
     c0c:	00000000 	andeq	r0, r0, r0
     c10:	00320000 	eorseq	r0, r2, r0
     c14:	003a0000 	eorseq	r0, sl, r0
     c18:	00020000 	andeq	r0, r2, r0
     c1c:	003a9f30 	eorseq	r9, sl, r0, lsr pc
     c20:	003c0000 	eorseq	r0, ip, r0
     c24:	00010000 	andeq	r0, r1, r0
     c28:	00003c54 	andeq	r3, r0, r4, asr ip
     c2c:	00004e00 	andeq	r4, r0, r0, lsl #28
     c30:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     c34:	0000004e 	andeq	r0, r0, lr, asr #32
     c38:	00000050 	andeq	r0, r0, r0, asr r0
     c3c:	50540001 	subspl	r0, r4, r1
     c40:	52000000 	andpl	r0, r0, #0
     c44:	01000000 	mrseq	r0, (UNDEF: 0)
     c48:	00005500 	andeq	r5, r0, r0, lsl #10
     c4c:	00000000 	andeq	r0, r0, r0
     c50:	00560000 	subseq	r0, r6, r0
     c54:	005a0000 	subseq	r0, sl, r0
     c58:	00010000 	andeq	r0, r1, r0
     c5c:	00005a50 	andeq	r5, r0, r0, asr sl
     c60:	00005e00 	andeq	r5, r0, r0, lsl #28
     c64:	f3000400 	vshl.u8	d0, d0, d0
     c68:	009f5001 	addseq	r5, pc, r1
	...
     c74:	0d000000 	stceq	0, cr0, [r0, #-0]
     c78:	01000000 	mrseq	r0, (UNDEF: 0)
     c7c:	000d5000 	andeq	r5, sp, r0
     c80:	002c0000 	eoreq	r0, ip, r0
     c84:	00040000 	andeq	r0, r4, r0
     c88:	9f5001f3 	svcls	0x005001f3
	...
     c98:	00000006 	andeq	r0, r0, r6
     c9c:	06510001 	ldrbeq	r0, [r1], -r1
     ca0:	0a000000 	beq	ca8 <__Stack_Size+0x8a8>
     ca4:	03000000 	movweq	r0, #0
     ca8:	9f7f7100 	svcls	0x007f7100
     cac:	0000000a 	andeq	r0, r0, sl
     cb0:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb4:	01f30004 	mvnseq	r0, r4
     cb8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     cc4:	00060000 	andeq	r0, r6, r0
     cc8:	00090000 	andeq	r0, r9, r0
     ccc:	1e84800c 	cdpne	0, 8, cr8, cr4, cr12, {0}
     cd0:	1b017100 	blne	5d0d8 <__Stack_Size+0x5ccd8>
     cd4:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     cd8:	00000a00 	andeq	r0, r0, r0, lsl #20
     cdc:	0c000900 	stceq	9, cr0, [r0], {-0}
     ce0:	001e8480 	andseq	r8, lr, r0, lsl #9
     ce4:	9f1b0071 	svcls	0x001b0071
     ce8:	0000000a 	andeq	r0, r0, sl
     cec:	0000000d 	andeq	r0, r0, sp
     cf0:	0d510001 	ldcleq	0, cr0, [r1, #-4]
     cf4:	2c000000 	stccs	0, cr0, [r0], {-0}
     cf8:	0c000000 	stceq	0, cr0, [r0], {-0}
     cfc:	84800c00 	strhi	r0, [r0], #3072	; 0xc00
     d00:	01f3001e 	mvnseq	r0, lr, lsl r0
     d04:	1b012351 	blne	49a50 <__Stack_Size+0x49650>
     d08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d0c:	00000000 	andeq	r0, r0, r0
     d10:	00006400 	andeq	r6, r0, r0, lsl #8
     d14:	00006600 	andeq	r6, r0, r0, lsl #12
     d18:	30000200 	andcc	r0, r0, r0, lsl #4
     d1c:	0000669f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     d20:	00006800 	andeq	r6, r0, r0, lsl #16
     d24:	50000100 	andpl	r0, r0, r0, lsl #2
     d28:	00000068 	andeq	r0, r0, r8, rrx
     d2c:	00000072 	andeq	r0, r0, r2, ror r0
     d30:	78510001 	ldmdavc	r1, {r0}^
     d34:	7a000000 	bvc	d3c <__Stack_Size+0x93c>
     d38:	01000000 	mrseq	r0, (UNDEF: 0)
     d3c:	007a5000 	rsbseq	r5, sl, r0
     d40:	008d0000 	addeq	r0, sp, r0
     d44:	00010000 	andeq	r0, r1, r0
     d48:	00000051 	andeq	r0, r0, r1, asr r0
     d4c:	00000000 	andeq	r0, r0, r0
     d50:	00003000 	andeq	r3, r0, r0
     d54:	00006600 	andeq	r6, r0, r0, lsl #12
     d58:	30000200 	andcc	r0, r0, r0, lsl #4
     d5c:	0000669f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     d60:	00007600 	andeq	r7, r0, r0, lsl #12
     d64:	53000100 	movwpl	r0, #256	; 0x100
     d68:	00000078 	andeq	r0, r0, r8, ror r0
     d6c:	0000007c 	andeq	r0, r0, ip, ror r0
     d70:	00530001 	subseq	r0, r3, r1
     d74:	00000000 	andeq	r0, r0, r0
     d78:	96000000 	strls	r0, [r0], -r0
     d7c:	c2000000 	andgt	r0, r0, #0
     d80:	01000000 	mrseq	r0, (UNDEF: 0)
     d84:	00005400 	andeq	r5, r0, r0, lsl #8
     d88:	00000000 	andeq	r0, r0, r0
     d8c:	009e0000 	addseq	r0, lr, r0
     d90:	00b60000 	adcseq	r0, r6, r0
     d94:	00010000 	andeq	r0, r1, r0
     d98:	00000050 	andeq	r0, r0, r0, asr r0
     d9c:	00000000 	andeq	r0, r0, r0
     da0:	00010800 	andeq	r0, r1, r0, lsl #16
     da4:	00010e00 	andeq	r0, r1, r0, lsl #28
     da8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     db4:	0000012e 	andeq	r0, r0, lr, lsr #2
     db8:	0000013a 	andeq	r0, r0, sl, lsr r1
     dbc:	62530001 	subsvs	r0, r3, #1
     dc0:	90000001 	andls	r0, r0, r1
     dc4:	01000001 	tsteq	r0, r1
     dc8:	01905300 	orrseq	r5, r0, r0, lsl #6
     dcc:	01920000 	orrseq	r0, r2, r0
     dd0:	00030000 	andeq	r0, r3, r0
     dd4:	929f0172 	addsls	r0, pc, #-2147483620	; 0x8000001c
     dd8:	94000001 	strls	r0, [r0], #-1
     ddc:	03000001 	movweq	r0, #1
     de0:	9f017300 	svcls	0x00017300
     de4:	00000194 	muleq	r0, r4, r1
     de8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     dec:	ea530001 	b	14c0df8 <__Stack_Size+0x14c09f8>
     df0:	ec000001 	stc	0, cr0, [r0], {1}
     df4:	01000001 	tsteq	r0, r1
     df8:	01ec5000 	mvneq	r5, r0
     dfc:	01f60000 	mvnseq	r0, r0
     e00:	00010000 	andeq	r0, r1, r0
     e04:	0001fe51 	andeq	pc, r1, r1, asr lr	; <UNPREDICTABLE>
     e08:	00020000 	andeq	r0, r2, r0
     e0c:	50000100 	andpl	r0, r0, r0, lsl #2
     e10:	00000200 	andeq	r0, r0, r0, lsl #4
     e14:	00000210 	andeq	r0, r0, r0, lsl r2
     e18:	00510001 	subseq	r0, r1, r1
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     e24:	32000001 	andcc	r0, r0, #1
     e28:	01000001 	tsteq	r0, r1
     e2c:	01945200 	orrseq	r5, r4, r0, lsl #4
     e30:	01960000 	orrseq	r0, r6, r0
     e34:	00010000 	andeq	r0, r1, r0
     e38:	00019650 	andeq	r9, r1, r0, asr r6
     e3c:	0001aa00 	andeq	sl, r1, r0, lsl #20
     e40:	52000100 	andpl	r0, r0, #0, 2
     e44:	000001ae 	andeq	r0, r0, lr, lsr #3
     e48:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     e4c:	00500001 	subseq	r0, r0, r1
     e50:	00000000 	andeq	r0, r0, r0
     e54:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     e58:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
     e5c:	01000001 	tsteq	r0, r1
     e60:	00005000 	andeq	r5, r0, r0
     e64:	00000000 	andeq	r0, r0, r0
     e68:	01ea0000 	mvneq	r0, r0
     e6c:	01fc0000 	mvnseq	r0, r0
     e70:	00010000 	andeq	r0, r1, r0
     e74:	0001fe53 	andeq	pc, r1, r3, asr lr	; <UNPREDICTABLE>
     e78:	00020000 	andeq	r0, r2, r0
     e7c:	53000100 	movwpl	r0, #256	; 0x100
     e80:	00000200 	andeq	r0, r0, r0, lsl #4
     e84:	00000202 	andeq	r0, r0, r2, lsl #4
     e88:	00730004 	rsbseq	r0, r3, r4
     e8c:	00009f20 	andeq	r9, r0, r0, lsr #30
     e90:	00000000 	andeq	r0, r0, r0
     e94:	02600000 	rsbeq	r0, r0, #0
     e98:	02640000 	rsbeq	r0, r4, #0
     e9c:	00010000 	andeq	r0, r1, r0
     ea0:	00026450 	andeq	r6, r2, r0, asr r4
     ea4:	00026c00 	andeq	r6, r2, r0, lsl #24
     ea8:	70000900 	andvc	r0, r0, r0, lsl #18
     eac:	01300300 	teqeq	r0, r0, lsl #6
     eb0:	9f1c2000 	svcls	0x001c2000
	...
     ebc:	00000278 	andeq	r0, r0, r8, ror r2
     ec0:	00000284 	andeq	r0, r0, r4, lsl #5
     ec4:	84500001 	ldrbhi	r0, [r0], #-1
     ec8:	8c000002 	stchi	0, cr0, [r0], {2}
     ecc:	04000002 	streq	r0, [r0], #-2
     ed0:	5001f300 	andpl	pc, r1, r0, lsl #6
     ed4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	00029800 	andeq	r9, r2, r0, lsl #16
     ee0:	00029c00 	andeq	r9, r2, r0, lsl #24
     ee4:	50000100 	andpl	r0, r0, r0, lsl #2
     ee8:	0000029c 	muleq	r0, ip, r2
     eec:	000002a0 	andeq	r0, r0, r0, lsr #5
     ef0:	00700009 	rsbseq	r0, r0, r9
     ef4:	00013003 	andeq	r3, r1, r3
     ef8:	a09f1c20 	addsge	r1, pc, r0, lsr #24
     efc:	a8000002 	stmdage	r0, {r1}
     f00:	04000002 	streq	r0, [r0], #-2
     f04:	5001f300 	andpl	pc, r1, r0, lsl #6
     f08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f0c:	00000000 	andeq	r0, r0, r0
     f10:	0002a800 	andeq	sl, r2, r0, lsl #16
     f14:	0002ac00 	andeq	sl, r2, r0, lsl #24
     f18:	50000100 	andpl	r0, r0, r0, lsl #2
     f1c:	000002ac 	andeq	r0, r0, ip, lsr #5
     f20:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     f24:	01f30004 	mvnseq	r0, r4
     f28:	00009f50 	andeq	r9, r0, r0, asr pc
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	02a80000 	adceq	r0, r8, #0
     f34:	02ac0000 	adceq	r0, ip, #0
     f38:	000c0000 	andeq	r0, ip, r0
     f3c:	24380071 	ldrtcs	r0, [r8], #-113	; 0x71
     f40:	1aff000a 	bne	fffc0f70 <SCS_BASE+0x1ffb2f70>
     f44:	9f220070 	svcls	0x00220070
     f48:	000002ac 	andeq	r0, r0, ip, lsr #5
     f4c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     f50:	0071000d 	rsbseq	r0, r1, sp
     f54:	000a2438 	andeq	r2, sl, r8, lsr r4
     f58:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
     f5c:	009f2250 	addseq	r2, pc, r0, asr r2	; <UNPREDICTABLE>
     f60:	00000000 	andeq	r0, r0, r0
     f64:	b0000000 	andlt	r0, r0, r0
     f68:	b2000002 	andlt	r0, r0, #2
     f6c:	01000002 	tsteq	r0, r2
     f70:	02b25000 	adcseq	r5, r2, #0
     f74:	02b40000 	adcseq	r0, r4, #0
     f78:	00040000 	andeq	r0, r4, r0
     f7c:	9f5001f3 	svcls	0x005001f3
	...
     f88:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     f8c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     f90:	00700006 	rsbseq	r0, r0, r6
     f94:	9f1aff08 	svcls	0x001aff08
     f98:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
     f9c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
     fa0:	01f30007 	mvnseq	r0, r7
     fa4:	1aff0850 	bne	fffc30ec <SCS_BASE+0x1ffb50ec>
     fa8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fac:	00000000 	andeq	r0, r0, r0
     fb0:	0002b400 	andeq	fp, r2, r0, lsl #8
     fb4:	0002b800 	andeq	fp, r2, r0, lsl #16
     fb8:	50000100 	andpl	r0, r0, r0, lsl #2
     fbc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     fc0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     fc4:	01f30004 	mvnseq	r0, r4
     fc8:	00009f50 	andeq	r9, r0, r0, asr pc
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	02b40000 	adcseq	r0, r4, #0
     fd4:	02b80000 	adcseq	r0, r8, #0
     fd8:	00090000 	andeq	r0, r9, r0
     fdc:	000a0070 	andeq	r0, sl, r0, ror r0
     fe0:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
     fe4:	0002b89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
     fe8:	0002ba00 	andeq	fp, r2, r0, lsl #20
     fec:	f3000a00 	vpmax.u8	d0, d0, d0
     ff0:	000a5001 	andeq	r5, sl, r1
     ff4:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
     ff8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	0002ba00 	andeq	fp, r2, r0, lsl #20
    1004:	0002cf00 	andeq	ip, r2, r0, lsl #30
    1008:	50000100 	andpl	r0, r0, r0, lsl #2
    100c:	000002cf 	andeq	r0, r0, pc, asr #5
    1010:	000002d4 	ldrdeq	r0, [r0], -r4
    1014:	01f30004 	mvnseq	r0, r4
    1018:	00009f50 	andeq	r9, r0, r0, asr pc
    101c:	00000000 	andeq	r0, r0, r0
    1020:	02d40000 	sbcseq	r0, r4, #0
    1024:	02f10000 	rscseq	r0, r1, #0
    1028:	00010000 	andeq	r0, r1, r0
    102c:	0002f150 	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
    1030:	0002fc00 	andeq	pc, r2, r0, lsl #24
    1034:	f3000400 	vshl.u8	d0, d0, d0
    1038:	009f5001 	addseq	r5, pc, r1
    103c:	00000000 	andeq	r0, r0, r0
    1040:	d4000000 	strle	r0, [r0], #-0
    1044:	f1000002 	cps	#2
    1048:	01000002 	tsteq	r0, r2
    104c:	02f15100 	rscseq	r5, r1, #0, 2
    1050:	02fc0000 	rscseq	r0, ip, #0
    1054:	00040000 	andeq	r0, r4, r0
    1058:	9f5101f3 	svcls	0x005101f3
	...
    1064:	000002fc 	strdeq	r0, [r0], -ip
    1068:	0000030c 	andeq	r0, r0, ip, lsl #6
    106c:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1070:	20000003 	andcs	r0, r0, r3
    1074:	04000003 	streq	r0, [r0], #-3
    1078:	5001f300 	andpl	pc, r1, r0, lsl #6
    107c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1080:	00000000 	andeq	r0, r0, r0
    1084:	0002fc00 	andeq	pc, r2, r0, lsl #24
    1088:	00031b00 	andeq	r1, r3, r0, lsl #22
    108c:	51000100 	mrspl	r0, (UNDEF: 16)
    1090:	0000031b 	andeq	r0, r0, fp, lsl r3
    1094:	00000320 	andeq	r0, r0, r0, lsr #6
    1098:	01f30004 	mvnseq	r0, r4
    109c:	00009f51 	andeq	r9, r0, r1, asr pc
    10a0:	00000000 	andeq	r0, r0, r0
    10a4:	02fc0000 	rscseq	r0, ip, #0
    10a8:	030e0000 	movweq	r0, #57344	; 0xe000
    10ac:	00010000 	andeq	r0, r1, r0
    10b0:	00030e52 	andeq	r0, r3, r2, asr lr
    10b4:	00032000 	andeq	r2, r3, r0
    10b8:	f3000400 	vshl.u8	d0, d0, d0
    10bc:	009f5201 	addseq	r5, pc, r1, lsl #4
    10c0:	00000000 	andeq	r0, r0, r0
    10c4:	20000000 	andcs	r0, r0, r0
    10c8:	3b000003 	blcc	10dc <__Stack_Size+0xcdc>
    10cc:	01000003 	tsteq	r0, r3
    10d0:	033b5000 	teqeq	fp, #0
    10d4:	03500000 	cmpeq	r0, #0
    10d8:	00040000 	andeq	r0, r4, r0
    10dc:	9f5001f3 	svcls	0x005001f3
	...
    10e8:	00000320 	andeq	r0, r0, r0, lsr #6
    10ec:	0000033b 	andeq	r0, r0, fp, lsr r3
    10f0:	3b510001 	blcc	14410fc <__Stack_Size+0x1440cfc>
    10f4:	50000003 	andpl	r0, r0, r3
    10f8:	04000003 	streq	r0, [r0], #-3
    10fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1104:	00000000 	andeq	r0, r0, r0
    1108:	00033c00 	andeq	r3, r3, r0, lsl #24
    110c:	00034000 	andeq	r4, r3, r0
    1110:	03000b00 	movweq	r0, #2816	; 0xb00
    1114:	200001dc 	ldrdcs	r0, [r0], -ip
    1118:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    111c:	03409f1a 	movteq	r9, #3866	; 0xf1a
    1120:	03480000 	movteq	r0, #32768	; 0x8000
    1124:	00010000 	andeq	r0, r1, r0
    1128:	00034850 	andeq	r4, r3, r0, asr r8
    112c:	00035000 	andeq	r5, r3, r0
    1130:	03000b00 	movweq	r0, #2816	; 0xb00
    1134:	200001dc 	ldrdcs	r0, [r0], -ip
    1138:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    113c:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1140:	00000000 	andeq	r0, r0, r0
    1144:	033c0000 	teqeq	ip, #0
    1148:	03440000 	movteq	r0, #16384	; 0x4000
    114c:	000b0000 	andeq	r0, fp, r0
    1150:	0001db03 	andeq	sp, r1, r3, lsl #22
    1154:	08019420 	stmdaeq	r1, {r5, sl, ip, pc}
    1158:	449f1aff 	ldrmi	r1, [pc], #2815	; 1160 <__Stack_Size+0xd60>
    115c:	50000003 	andpl	r0, r0, r3
    1160:	01000003 	tsteq	r0, r3
    1164:	00005300 	andeq	r5, r0, r0, lsl #6
    1168:	00000000 	andeq	r0, r0, r0
    116c:	03400000 	movteq	r0, #0
    1170:	03480000 	movteq	r0, #32768	; 0x8000
    1174:	00100000 	andseq	r0, r0, r0
    1178:	0001db03 	andeq	sp, r1, r3, lsl #22
    117c:	08019420 	stmdaeq	r1, {r5, sl, ip, pc}
    1180:	00701aff 	ldrshteq	r1, [r0], #-175	; 0xffffff51
    1184:	9f222438 	svcls	0x00222438
    1188:	00000348 	andeq	r0, r0, r8, asr #6
    118c:	00000350 	andeq	r0, r0, r0, asr r3
    1190:	db030018 	blle	c11f8 <__Stack_Size+0xc0df8>
    1194:	94200001 	strtls	r0, [r0], #-1
    1198:	1aff0801 	bne	fffc31a4 <SCS_BASE+0x1ffb51a4>
    119c:	0001dc03 	andeq	sp, r1, r3, lsl #24
    11a0:	08019420 	stmdaeq	r1, {r5, sl, ip, pc}
    11a4:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    11a8:	00009f22 	andeq	r9, r0, r2, lsr #30
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	03500000 	cmpeq	r0, #0
    11b4:	03660000 	cmneq	r6, #0
    11b8:	00010000 	andeq	r0, r1, r0
    11bc:	00036650 	andeq	r6, r3, r0, asr r6
    11c0:	00037c00 	andeq	r7, r3, r0, lsl #24
    11c4:	f3000400 	vshl.u8	d0, d0, d0
    11c8:	009f5001 	addseq	r5, pc, r1
    11cc:	00000000 	andeq	r0, r0, r0
    11d0:	50000000 	andpl	r0, r0, r0
    11d4:	75000003 	strvc	r0, [r0, #-3]
    11d8:	01000003 	tsteq	r0, r3
    11dc:	03755100 	cmneq	r5, #0, 2
    11e0:	037c0000 	cmneq	ip, #0
    11e4:	00040000 	andeq	r0, r4, r0
    11e8:	9f5101f3 	svcls	0x005101f3
	...
    11f4:	00000350 	andeq	r0, r0, r0, asr r3
    11f8:	00000360 	andeq	r0, r0, r0, ror #6
    11fc:	60520001 	subsvs	r0, r2, r1
    1200:	7c000003 	stcvc	0, cr0, [r0], {3}
    1204:	04000003 	streq	r0, [r0], #-3
    1208:	5201f300 	andpl	pc, r1, #0, 6
    120c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1218:	00000e00 	andeq	r0, r0, r0, lsl #28
    121c:	50000100 	andpl	r0, r0, r0, lsl #2
    1220:	0000000e 	andeq	r0, r0, lr
    1224:	00000018 	andeq	r0, r0, r8, lsl r0
    1228:	01f30004 	mvnseq	r0, r4
    122c:	00009f50 	andeq	r9, r0, r0, asr pc
    1230:	00000000 	andeq	r0, r0, r0
    1234:	00180000 	andseq	r0, r8, r0
    1238:	00260000 	eoreq	r0, r6, r0
    123c:	00010000 	andeq	r0, r1, r0
    1240:	00002650 	andeq	r2, r0, r0, asr r6
    1244:	00003000 	andeq	r3, r0, r0
    1248:	f3000400 	vshl.u8	d0, d0, d0
    124c:	009f5001 	addseq	r5, pc, r1
    1250:	00000000 	andeq	r0, r0, r0
    1254:	30000000 	andcc	r0, r0, r0
    1258:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    125c:	01000000 	mrseq	r0, (UNDEF: 0)
    1260:	003e5000 	eorseq	r5, lr, r0
    1264:	00480000 	subeq	r0, r8, r0
    1268:	00040000 	andeq	r0, r4, r0
    126c:	9f5001f3 	svcls	0x005001f3
	...
    1278:	00000088 	andeq	r0, r0, r8, lsl #1
    127c:	0000008c 	andeq	r0, r0, ip, lsl #1
    1280:	9f300002 	svcls	0x00300002
    1284:	0000008c 	andeq	r0, r0, ip, lsl #1
    1288:	00000090 	muleq	r0, r0, r0
    128c:	00700007 	rsbseq	r0, r0, r7
    1290:	2e301a32 	mrccs	10, 1, r1, cr0, cr2, {1}
    1294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1298:	00000000 	andeq	r0, r0, r0
    129c:	00009800 	andeq	r9, r0, r0, lsl #16
    12a0:	00009c00 	andeq	r9, r0, r0, lsl #24
    12a4:	30000200 	andcc	r0, r0, r0, lsl #4
    12a8:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    12ac:	0000a000 	andeq	sl, r0, r0
    12b0:	70000800 	andvc	r0, r0, r0, lsl #16
    12b4:	1a200800 	bne	8032bc <__Stack_Size+0x802ebc>
    12b8:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    12c4:	b0000000 	andlt	r0, r0, r0
    12c8:	01000000 	mrseq	r0, (UNDEF: 0)
    12cc:	00b05000 	adcseq	r5, r0, r0
    12d0:	00b20000 	adcseq	r0, r2, r0
    12d4:	00040000 	andeq	r0, r4, r0
    12d8:	9f5001f3 	svcls	0x005001f3
    12dc:	000000b2 	strheq	r0, [r0], -r2
    12e0:	000000b6 	strheq	r0, [r0], -r6
    12e4:	b6500001 	ldrblt	r0, [r0], -r1
    12e8:	c0000000 	andgt	r0, r0, r0
    12ec:	04000000 	streq	r0, [r0], #-0
    12f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    12f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	0000c000 	andeq	ip, r0, r0
    1300:	0000c800 	andeq	ip, r0, r0, lsl #16
    1304:	50000100 	andpl	r0, r0, r0, lsl #2
    1308:	000000c8 	andeq	r0, r0, r8, asr #1
    130c:	000000ce 	andeq	r0, r0, lr, asr #1
    1310:	01f30004 	mvnseq	r0, r4
    1314:	00ce9f50 	sbceq	r9, lr, r0, asr pc
    1318:	00d60000 	sbcseq	r0, r6, r0
    131c:	00010000 	andeq	r0, r1, r0
    1320:	0000d650 	andeq	sp, r0, r0, asr r6
    1324:	0000e000 	andeq	lr, r0, r0
    1328:	f3000400 	vshl.u8	d0, d0, d0
    132c:	009f5001 	addseq	r5, pc, r1
    1330:	00000000 	andeq	r0, r0, r0
    1334:	c0000000 	andgt	r0, r0, r0
    1338:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    133c:	02000000 	andeq	r0, r0, #0
    1340:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    1344:	e0000000 	and	r0, r0, r0
    1348:	01000000 	mrseq	r0, (UNDEF: 0)
    134c:	00005000 	andeq	r5, r0, r0
    1350:	00000000 	andeq	r0, r0, r0
    1354:	00ec0000 	rsceq	r0, ip, r0
    1358:	010e0000 	mrseq	r0, (UNDEF: 14)
    135c:	00020000 	andeq	r0, r2, r0
    1360:	010e9f34 	tsteq	lr, r4, lsr pc
    1364:	01140000 	tsteq	r4, r0
    1368:	00010000 	andeq	r0, r1, r0
    136c:	00000050 	andeq	r0, r0, r0, asr r0
    1370:	00000000 	andeq	r0, r0, r0
    1374:	00011400 	andeq	r1, r1, r0, lsl #8
    1378:	00011b00 	andeq	r1, r1, r0, lsl #22
    137c:	50000100 	andpl	r0, r0, r0, lsl #2
    1380:	0000011b 	andeq	r0, r0, fp, lsl r1
    1384:	0000014a 	andeq	r0, r0, sl, asr #2
    1388:	00540001 	subseq	r0, r4, r1
    138c:	00000000 	andeq	r0, r0, r0
    1390:	14000000 	strne	r0, [r0], #-0
    1394:	1c000001 	stcne	0, cr0, [r0], {1}
    1398:	02000001 	andeq	r0, r0, #1
    139c:	1c9f3400 	cfldrsne	mvf3, [pc], {0}
    13a0:	37000001 	strcc	r0, [r0, -r1]
    13a4:	01000001 	tsteq	r0, r1
    13a8:	01385000 	teqeq	r8, r0
    13ac:	013e0000 	teqeq	lr, r0
    13b0:	00010000 	andeq	r0, r1, r0
    13b4:	00014050 	andeq	r4, r1, r0, asr r0
    13b8:	00014a00 	andeq	r4, r1, r0, lsl #20
    13bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    13c8:	0000014a 	andeq	r0, r0, sl, asr #2
    13cc:	00000152 	andeq	r0, r0, r2, asr r1
    13d0:	52500001 	subspl	r0, r0, #1
    13d4:	86000001 	strhi	r0, [r0], -r1
    13d8:	01000001 	tsteq	r0, r1
    13dc:	01865500 	orreq	r5, r6, r0, lsl #10
    13e0:	018c0000 	orreq	r0, ip, r0
    13e4:	00040000 	andeq	r0, r4, r0
    13e8:	9f5001f3 	svcls	0x005001f3
	...
    13f4:	0000014a 	andeq	r0, r0, sl, asr #2
    13f8:	00000156 	andeq	r0, r0, r6, asr r1
    13fc:	9f340002 	svcls	0x00340002
    1400:	00000156 	andeq	r0, r0, r6, asr r1
    1404:	00000160 	andeq	r0, r0, r0, ror #2
    1408:	76500001 	ldrbvc	r0, [r0], -r1
    140c:	8c000001 	stchi	0, cr0, [r0], {1}
    1410:	01000001 	tsteq	r0, r1
    1414:	00005000 	andeq	r5, r0, r0
    1418:	00000000 	andeq	r0, r0, r0
    141c:	018c0000 	orreq	r0, ip, r0
    1420:	01960000 	orrseq	r0, r6, r0
    1424:	00020000 	andeq	r0, r2, r0
    1428:	01969f34 	orrseq	r9, r6, r4, lsr pc
    142c:	01a00000 	moveq	r0, r0
    1430:	00010000 	andeq	r0, r1, r0
    1434:	0001b450 	andeq	fp, r1, r0, asr r4
    1438:	0001c800 	andeq	ip, r1, r0, lsl #16
    143c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1448:	000001c8 	andeq	r0, r0, r8, asr #3
    144c:	000001d2 	ldrdeq	r0, [r0], -r2
    1450:	9f340002 	svcls	0x00340002
    1454:	000001d2 	ldrdeq	r0, [r0], -r2
    1458:	000001de 	ldrdeq	r0, [r0], -lr
    145c:	fa500001 	blx	1401468 <__Stack_Size+0x1401068>
    1460:	06000001 	streq	r0, [r0], -r1
    1464:	01000002 	tsteq	r0, r2
    1468:	021c5000 	andseq	r5, ip, #0
    146c:	02380000 	eorseq	r0, r8, #0
    1470:	00010000 	andeq	r0, r1, r0
    1474:	00000050 	andeq	r0, r0, r0, asr r0
    1478:	00000000 	andeq	r0, r0, r0
    147c:	00023800 	andeq	r3, r2, r0, lsl #16
    1480:	00023e00 	andeq	r3, r2, r0, lsl #28
    1484:	50000100 	andpl	r0, r0, r0, lsl #2
    1488:	0000023e 	andeq	r0, r0, lr, lsr r2
    148c:	0000027a 	andeq	r0, r0, sl, ror r2
    1490:	7a560001 	bvc	158149c <__Stack_Size+0x158109c>
    1494:	80000002 	andhi	r0, r0, r2
    1498:	04000002 	streq	r0, [r0], #-2
    149c:	5001f300 	andpl	pc, r1, r0, lsl #6
    14a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	00023800 	andeq	r3, r2, r0, lsl #16
    14ac:	00024300 	andeq	r4, r2, r0, lsl #6
    14b0:	51000100 	mrspl	r0, (UNDEF: 16)
    14b4:	00000243 	andeq	r0, r0, r3, asr #4
    14b8:	00000262 	andeq	r0, r0, r2, ror #4
    14bc:	62550001 	subsvs	r0, r5, #1
    14c0:	80000002 	andhi	r0, r0, r2
    14c4:	04000002 	streq	r0, [r0], #-2
    14c8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    14cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	00023800 	andeq	r3, r2, r0, lsl #16
    14d8:	00024400 	andeq	r4, r2, r0, lsl #8
    14dc:	34000200 	strcc	r0, [r0], #-512	; 0x200
    14e0:	0002449f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    14e4:	00024c00 	andeq	r4, r2, r0, lsl #24
    14e8:	50000100 	andpl	r0, r0, r0, lsl #2
    14ec:	0000025c 	andeq	r0, r0, ip, asr r2
    14f0:	00000266 	andeq	r0, r0, r6, ror #4
    14f4:	6a500001 	bvs	1401500 <__Stack_Size+0x1401100>
    14f8:	80000002 	andhi	r0, r0, r2
    14fc:	01000002 	tsteq	r0, r2
    1500:	00005000 	andeq	r5, r0, r0
    1504:	00000000 	andeq	r0, r0, r0
    1508:	02800000 	addeq	r0, r0, #0
    150c:	02860000 	addeq	r0, r6, #0
    1510:	00010000 	andeq	r0, r1, r0
    1514:	00028650 	andeq	r8, r2, r0, asr r6
    1518:	0002b200 	andeq	fp, r2, r0, lsl #4
    151c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    1520:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1524:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1528:	01f30004 	mvnseq	r0, r4
    152c:	00009f50 	andeq	r9, r0, r0, asr pc
    1530:	00000000 	andeq	r0, r0, r0
    1534:	02800000 	addeq	r0, r0, #0
    1538:	028b0000 	addeq	r0, fp, #0
    153c:	00010000 	andeq	r0, r1, r0
    1540:	00028b51 	andeq	r8, r2, r1, asr fp
    1544:	0002b800 	andeq	fp, r2, r0, lsl #16
    1548:	f3000400 	vshl.u8	d0, d0, d0
    154c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1550:	00000000 	andeq	r0, r0, r0
    1554:	80000000 	andhi	r0, r0, r0
    1558:	8c000002 	stchi	0, cr0, [r0], {2}
    155c:	02000002 	andeq	r0, r0, #2
    1560:	8c9f3400 	cfldrshi	mvf3, [pc], {0}
    1564:	94000002 	strls	r0, [r0], #-2
    1568:	01000002 	tsteq	r0, r2
    156c:	02a25000 	adceq	r5, r2, #0
    1570:	02b80000 	adcseq	r0, r8, #0
    1574:	00010000 	andeq	r0, r1, r0
    1578:	00000050 	andeq	r0, r0, r0, asr r0
    157c:	00000000 	andeq	r0, r0, r0
    1580:	0002b800 	andeq	fp, r2, r0, lsl #16
    1584:	0002be00 	andeq	fp, r2, r0, lsl #28
    1588:	50000100 	andpl	r0, r0, r0, lsl #2
    158c:	000002be 			; <UNDEFINED> instruction: 0x000002be
    1590:	000002f6 	strdeq	r0, [r0], -r6
    1594:	f6560001 			; <UNDEFINED> instruction: 0xf6560001
    1598:	00000002 	andeq	r0, r0, r2
    159c:	04000003 	streq	r0, [r0], #-3
    15a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    15a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	0002b800 	andeq	fp, r2, r0, lsl #16
    15b0:	0002c300 	andeq	ip, r2, r0, lsl #6
    15b4:	51000100 	mrspl	r0, (UNDEF: 16)
    15b8:	000002c3 	andeq	r0, r0, r3, asr #5
    15bc:	00000300 	andeq	r0, r0, r0, lsl #6
    15c0:	01f30004 	mvnseq	r0, r4
    15c4:	00009f51 	andeq	r9, r0, r1, asr pc
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	02b80000 	adcseq	r0, r8, #0
    15d0:	02c40000 	sbceq	r0, r4, #0
    15d4:	00020000 	andeq	r0, r2, r0
    15d8:	02c49f34 	sbceq	r9, r4, #52, 30	; 0xd0
    15dc:	02da0000 	sbcseq	r0, sl, #0
    15e0:	00010000 	andeq	r0, r1, r0
    15e4:	0002e650 	andeq	lr, r2, r0, asr r6
    15e8:	00030000 	andeq	r0, r3, r0
    15ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    15f8:	00000300 	andeq	r0, r0, r0, lsl #6
    15fc:	00000304 	andeq	r0, r0, r4, lsl #6
    1600:	04500001 	ldrbeq	r0, [r0], #-1
    1604:	06000003 	streq	r0, [r0], -r3
    1608:	04000003 	streq	r0, [r0], #-3
    160c:	20007000 	andcs	r7, r0, r0
    1610:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1614:	00031000 	andeq	r1, r3, r0
    1618:	74000400 	strvc	r0, [r0], #-1024	; 0x400
    161c:	109f2000 	addsne	r2, pc, r0
    1620:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    1624:	01000003 	tsteq	r0, r3
    1628:	036e5400 	cmneq	lr, #0, 8
    162c:	03a00000 	moveq	r0, #0
    1630:	00050000 	andeq	r0, r5, r0
    1634:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    1638:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    163c:	00000000 	andeq	r0, r0, r0
    1640:	00030400 	andeq	r0, r3, r0, lsl #8
    1644:	00030600 	andeq	r0, r3, r0, lsl #12
    1648:	70000700 	andvc	r0, r0, r0, lsl #14
    164c:	ff082000 			; <UNDEFINED> instruction: 0xff082000
    1650:	03069f1a 	movweq	r9, #28442	; 0x6f1a
    1654:	03100000 	tsteq	r0, #0
    1658:	00070000 	andeq	r0, r7, r0
    165c:	08200074 	stmdaeq	r0!, {r2, r4, r5, r6}
    1660:	109f1aff 			; <UNDEFINED> instruction: 0x109f1aff
    1664:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    1668:	06000003 	streq	r0, [r0], -r3
    166c:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    1670:	6e9f1aff 	mrcvs	10, 4, r1, cr15, cr15, {7}
    1674:	a0000003 	andge	r0, r0, r3
    1678:	08000003 	stmdaeq	r0, {r0, r1}
    167c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1680:	1aff0820 	bne	fffc3708 <SCS_BASE+0x1ffb5708>
    1684:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1688:	00000000 	andeq	r0, r0, r0
    168c:	00030400 	andeq	r0, r3, r0, lsl #8
    1690:	00030600 	andeq	r0, r3, r0, lsl #12
    1694:	70000a00 	andvc	r0, r0, r0, lsl #20
    1698:	000a2000 	andeq	r2, sl, r0
    169c:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
    16a0:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    16a4:	00031000 	andeq	r1, r3, r0
    16a8:	74000a00 	strvc	r0, [r0], #-2560	; 0xa00
    16ac:	000a2000 	andeq	r2, sl, r0
    16b0:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
    16b4:	0003109f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    16b8:	00036e00 	andeq	r6, r3, r0, lsl #28
    16bc:	74000900 	strvc	r0, [r0], #-2304	; 0x900
    16c0:	ff000a00 			; <UNDEFINED> instruction: 0xff000a00
    16c4:	9f25381a 	svcls	0x0025381a
    16c8:	0000036e 	andeq	r0, r0, lr, ror #6
    16cc:	000003a0 	andeq	r0, r0, r0, lsr #7
    16d0:	01f3000b 	mvnseq	r0, fp
    16d4:	000a2050 	andeq	r2, sl, r0, asr r0
    16d8:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
    16dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16e0:	00000000 	andeq	r0, r0, r0
    16e4:	00030400 	andeq	r0, r3, r0, lsl #8
    16e8:	00030600 	andeq	r0, r3, r0, lsl #12
    16ec:	70000b00 	andvc	r0, r0, r0, lsl #22
    16f0:	ff082000 			; <UNDEFINED> instruction: 0xff082000
    16f4:	401a2440 	andsmi	r2, sl, r0, asr #8
    16f8:	03069f25 	movweq	r9, #28453	; 0x6f25
    16fc:	03100000 	tsteq	r0, #0
    1700:	000b0000 	andeq	r0, fp, r0
    1704:	08200074 	stmdaeq	r0!, {r2, r4, r5, r6}
    1708:	1a2440ff 	bne	911b0c <__Stack_Size+0x91170c>
    170c:	109f2540 	addsne	r2, pc, r0, asr #10
    1710:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    1714:	0a000003 	beq	1728 <__Stack_Size+0x1328>
    1718:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    171c:	1a2440ff 	bne	911b20 <__Stack_Size+0x911720>
    1720:	6e9f2540 	cdpvs	5, 9, cr2, cr15, cr0, {2}
    1724:	a0000003 	andge	r0, r0, r3
    1728:	0c000003 	stceq	0, cr0, [r0], {3}
    172c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1730:	40ff0820 	rscsmi	r0, pc, r0, lsr #16
    1734:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    1738:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    173c:	00000000 	andeq	r0, r0, r0
    1740:	00030400 	andeq	r0, r3, r0, lsl #8
    1744:	00030600 	andeq	r0, r3, r0, lsl #12
    1748:	70000600 	andvc	r0, r0, r0, lsl #12
    174c:	25482000 	strbcs	r2, [r8, #-0]
    1750:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1754:	00031000 	andeq	r1, r3, r0
    1758:	74000600 	strvc	r0, [r0], #-1536	; 0x600
    175c:	25482000 	strbcs	r2, [r8, #-0]
    1760:	0003109f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1764:	00036e00 	andeq	r6, r3, r0, lsl #28
    1768:	74000500 	strvc	r0, [r0], #-1280	; 0x500
    176c:	9f254800 	svcls	0x00254800
    1770:	0000036e 	andeq	r0, r0, lr, ror #6
    1774:	000003a0 	andeq	r0, r0, r0, lsr #7
    1778:	01f30007 	mvnseq	r0, r7
    177c:	25482050 	strbcs	r2, [r8, #-80]	; 0x50
    1780:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1784:	00000000 	andeq	r0, r0, r0
    1788:	00030000 	andeq	r0, r3, r0
    178c:	00030a00 	andeq	r0, r3, r0, lsl #20
    1790:	34000200 	strcc	r0, [r0], #-512	; 0x200
    1794:	00030a9f 	muleq	r3, pc, sl	; <UNPREDICTABLE>
    1798:	00032e00 	andeq	r2, r3, r0, lsl #28
    179c:	50000100 	andpl	r0, r0, r0, lsl #2
    17a0:	00000334 	andeq	r0, r0, r4, lsr r3
    17a4:	00000338 	andeq	r0, r0, r8, lsr r3
    17a8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    17ac:	44000003 	strmi	r0, [r0], #-3
    17b0:	01000003 	tsteq	r0, r3
    17b4:	03505000 	cmpeq	r0, #0
    17b8:	03540000 	cmpeq	r4, #0
    17bc:	00010000 	andeq	r0, r1, r0
    17c0:	00036850 	andeq	r6, r3, r0, asr r8
    17c4:	00036c00 	andeq	r6, r3, r0, lsl #24
    17c8:	50000100 	andpl	r0, r0, r0, lsl #2
    17cc:	00000382 	andeq	r0, r0, r2, lsl #7
    17d0:	000003a0 	andeq	r0, r0, r0, lsr #7
    17d4:	00500001 	subseq	r0, r0, r1
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	a0000000 	andge	r0, r0, r0
    17e0:	a8000003 	stmdage	r0, {r0, r1}
    17e4:	01000003 	tsteq	r0, r3
    17e8:	03a85000 			; <UNDEFINED> instruction: 0x03a85000
    17ec:	042c0000 	strteq	r0, [ip], #-0
    17f0:	00040000 	andeq	r0, r4, r0
    17f4:	9f5001f3 	svcls	0x005001f3
	...
    1800:	000003a0 	andeq	r0, r0, r0, lsr #7
    1804:	000003ac 	andeq	r0, r0, ip, lsr #7
    1808:	9f340002 	svcls	0x00340002
    180c:	000003ac 	andeq	r0, r0, ip, lsr #7
    1810:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    1814:	d4500001 	ldrble	r0, [r0], #-1
    1818:	fa000003 	blx	182c <__Stack_Size+0x142c>
    181c:	01000003 	tsteq	r0, r3
    1820:	03fe5000 	mvnseq	r5, #0
    1824:	042c0000 	strteq	r0, [ip], #-0
    1828:	00010000 	andeq	r0, r1, r0
    182c:	00000050 	andeq	r0, r0, r0, asr r0
    1830:	00000000 	andeq	r0, r0, r0
    1834:	00042c00 	andeq	r2, r4, r0, lsl #24
    1838:	00043e00 	andeq	r3, r4, r0, lsl #28
    183c:	50000100 	andpl	r0, r0, r0, lsl #2
    1840:	0000043e 	andeq	r0, r0, lr, lsr r4
    1844:	00000480 	andeq	r0, r0, r0, lsl #9
    1848:	01f30004 	mvnseq	r0, r4
    184c:	00009f50 	andeq	r9, r0, r0, asr pc
    1850:	00000000 	andeq	r0, r0, r0
    1854:	042c0000 	strteq	r0, [ip], #-0
    1858:	04450000 	strbeq	r0, [r5], #-0
    185c:	00010000 	andeq	r0, r1, r0
    1860:	00044551 	andeq	r4, r4, r1, asr r5
    1864:	00048000 	andeq	r8, r4, r0
    1868:	f3000400 	vshl.u8	d0, d0, d0
    186c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1870:	00000000 	andeq	r0, r0, r0
    1874:	2c000000 	stccs	0, cr0, [r0], {-0}
    1878:	45000004 	strmi	r0, [r0, #-4]
    187c:	01000004 	tsteq	r0, r4
    1880:	04455200 	strbeq	r5, [r5], #-512	; 0x200
    1884:	04800000 	streq	r0, [r0], #0
    1888:	00040000 	andeq	r0, r4, r0
    188c:	9f5201f3 	svcls	0x005201f3
	...
    1898:	0000042c 	andeq	r0, r0, ip, lsr #8
    189c:	00000446 	andeq	r0, r0, r6, asr #8
    18a0:	9f340002 	svcls	0x00340002
    18a4:	00000446 	andeq	r0, r0, r6, asr #8
    18a8:	00000450 	andeq	r0, r0, r0, asr r4
    18ac:	64500001 	ldrbvs	r0, [r0], #-1
    18b0:	80000004 	andhi	r0, r0, r4
    18b4:	01000004 	tsteq	r0, r4
    18b8:	00005000 	andeq	r5, r0, r0
	...
    18c4:	00240000 	eoreq	r0, r4, r0
    18c8:	00010000 	andeq	r0, r1, r0
    18cc:	00002450 	andeq	r2, r0, r0, asr r4
    18d0:	00002e00 	andeq	r2, r0, r0, lsl #28
    18d4:	f3000400 	vshl.u8	d0, d0, d0
    18d8:	2e9f5001 	cdpcs	0, 9, cr5, cr15, cr1, {0}
    18dc:	46000000 	strmi	r0, [r0], -r0
    18e0:	01000000 	mrseq	r0, (UNDEF: 0)
    18e4:	00465000 	subeq	r5, r6, r0
    18e8:	00500000 	subseq	r0, r0, r0
    18ec:	00040000 	andeq	r0, r4, r0
    18f0:	9f5001f3 	svcls	0x005001f3
    18f4:	00000050 	andeq	r0, r0, r0, asr r0
    18f8:	00000052 	andeq	r0, r0, r2, asr r0
    18fc:	52500001 	subspl	r0, r0, #1
    1900:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1904:	04000000 	streq	r0, [r0], #-0
    1908:	5001f300 	andpl	pc, r1, r0, lsl #6
    190c:	00005c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1910:	00005e00 	andeq	r5, r0, r0, lsl #28
    1914:	50000100 	andpl	r0, r0, r0, lsl #2
    1918:	0000005e 	andeq	r0, r0, lr, asr r0
    191c:	00000068 	andeq	r0, r0, r8, rrx
    1920:	01f30004 	mvnseq	r0, r4
    1924:	00689f50 	rsbeq	r9, r8, r0, asr pc
    1928:	006a0000 	rsbeq	r0, sl, r0
    192c:	00010000 	andeq	r0, r1, r0
    1930:	00006a50 	andeq	r6, r0, r0, asr sl
    1934:	00007400 	andeq	r7, r0, r0, lsl #8
    1938:	f3000400 	vshl.u8	d0, d0, d0
    193c:	749f5001 	ldrvc	r5, [pc], #1	; 1944 <__Stack_Size+0x1544>
    1940:	76000000 	strvc	r0, [r0], -r0
    1944:	01000000 	mrseq	r0, (UNDEF: 0)
    1948:	00765000 	rsbseq	r5, r6, r0
    194c:	00800000 	addeq	r0, r0, r0
    1950:	00040000 	andeq	r0, r4, r0
    1954:	9f5001f3 	svcls	0x005001f3
    1958:	00000080 	andeq	r0, r0, r0, lsl #1
    195c:	00000084 	andeq	r0, r0, r4, lsl #1
    1960:	84500001 	ldrbhi	r0, [r0], #-1
    1964:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1968:	04000000 	streq	r0, [r0], #-0
    196c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1970:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1974:	0000a400 	andeq	sl, r0, r0, lsl #8
    1978:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1984:	000000ba 	strheq	r0, [r0], -sl
    1988:	000000d6 	ldrdeq	r0, [r0], -r6
    198c:	d6510001 	ldrble	r0, [r1], -r1
    1990:	56000000 	strpl	r0, [r0], -r0
    1994:	04000001 	streq	r0, [r0], #-1
    1998:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    199c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19a0:	00000000 	andeq	r0, r0, r0
    19a4:	0000ba00 	andeq	fp, r0, r0, lsl #20
    19a8:	0000ca00 	andeq	ip, r0, r0, lsl #20
    19ac:	30000200 	andcc	r0, r0, r0, lsl #4
    19b0:	0000ca9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    19b4:	0000ce00 	andeq	ip, r0, r0, lsl #28
    19b8:	73000600 	movwvc	r0, #1536	; 0x600
    19bc:	1aff0800 	bne	fffc39c4 <SCS_BASE+0x1ffb59c4>
    19c0:	0000ce9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    19c4:	00015600 	andeq	r5, r1, r0, lsl #12
    19c8:	53000100 	movwpl	r0, #256	; 0x100
	...
    19d4:	000000ba 	strheq	r0, [r0], -sl
    19d8:	000000d8 	ldrdeq	r0, [r0], -r8
    19dc:	9f300002 	svcls	0x00300002
    19e0:	000000e0 	andeq	r0, r0, r0, ror #1
    19e4:	00000110 	andeq	r0, r0, r0, lsl r1
    19e8:	24570001 	ldrbcs	r0, [r7], #-1
    19ec:	54000001 	strpl	r0, [r0], #-1
    19f0:	01000001 	tsteq	r0, r1
    19f4:	00005700 	andeq	r5, r0, r0, lsl #14
    19f8:	00000000 	andeq	r0, r0, r0
    19fc:	00ba0000 	adcseq	r0, sl, r0
    1a00:	00d80000 	sbcseq	r0, r8, r0
    1a04:	00020000 	andeq	r0, r2, r0
    1a08:	00d89f30 	sbcseq	r9, r8, r0, lsr pc
    1a0c:	01100000 	tsteq	r0, r0
    1a10:	00010000 	andeq	r0, r1, r0
    1a14:	00011654 	andeq	r1, r1, r4, asr r6
    1a18:	00011800 	andeq	r1, r1, r0, lsl #16
    1a1c:	30000200 	andcc	r0, r0, r0, lsl #4
    1a20:	0001189f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1a24:	00015400 	andeq	r5, r1, r0, lsl #8
    1a28:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1a34:	000000ba 	strheq	r0, [r0], -sl
    1a38:	000000d8 	ldrdeq	r0, [r0], -r8
    1a3c:	9f300002 	svcls	0x00300002
    1a40:	000000dc 	ldrdeq	r0, [r0], -ip
    1a44:	000000e4 	andeq	r0, r0, r4, ror #1
    1a48:	e4560001 	ldrb	r0, [r6], #-1
    1a4c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1a50:	05000000 	streq	r0, [r0, #-0]
    1a54:	32007400 	andcc	r7, r0, #0, 8
    1a58:	00e89f24 	rsceq	r9, r8, r4, lsr #30
    1a5c:	01080000 	mrseq	r0, (UNDEF: 8)
    1a60:	00010000 	andeq	r0, r1, r0
    1a64:	0001205e 	andeq	r2, r1, lr, asr r0
    1a68:	00012800 	andeq	r2, r1, r0, lsl #16
    1a6c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1a70:	00000128 	andeq	r0, r0, r8, lsr #2
    1a74:	0000012c 	andeq	r0, r0, ip, lsr #2
    1a78:	00740005 	rsbseq	r0, r4, r5
    1a7c:	2c9f2432 	cfldrscs	mvf2, [pc], {50}	; 0x32
    1a80:	4c000001 	stcmi	0, cr0, [r0], {1}
    1a84:	01000001 	tsteq	r0, r1
    1a88:	00005e00 	andeq	r5, r0, r0, lsl #28
    1a8c:	00000000 	andeq	r0, r0, r0
    1a90:	00ba0000 	adcseq	r0, sl, r0
    1a94:	00d60000 	sbcseq	r0, r6, r0
    1a98:	00020000 	andeq	r0, r2, r0
    1a9c:	00d69f30 	sbcseq	r9, r6, r0, lsr pc
    1aa0:	01100000 	tsteq	r0, r0
    1aa4:	00010000 	andeq	r0, r1, r0
    1aa8:	00011651 	andeq	r1, r1, r1, asr r6
    1aac:	00015400 	andeq	r5, r1, r0, lsl #8
    1ab0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1abc:	000000ba 	strheq	r0, [r0], -sl
    1ac0:	000000d8 	ldrdeq	r0, [r0], -r8
    1ac4:	9f300002 	svcls	0x00300002
    1ac8:	000000e8 	andeq	r0, r0, r8, ror #1
    1acc:	000000ee 	andeq	r0, r0, lr, ror #1
    1ad0:	7e3f0005 	cdpvc	0, 3, cr0, cr15, cr5, {0}
    1ad4:	ee9f2400 	cdp	4, 9, cr2, cr15, cr0, {0}
    1ad8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1adc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ae0:	00f85600 	rscseq	r5, r8, r0, lsl #12
    1ae4:	01080000 	mrseq	r0, (UNDEF: 8)
    1ae8:	00050000 	andeq	r0, r5, r0
    1aec:	24007e3f 	strcs	r7, [r0], #-3647	; 0xe3f
    1af0:	00012c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1af4:	00013200 	andeq	r3, r1, r0, lsl #4
    1af8:	3f000500 	svccc	0x00000500
    1afc:	9f24007e 	svcls	0x0024007e
    1b00:	00000132 	andeq	r0, r0, r2, lsr r1
    1b04:	0000013c 	andeq	r0, r0, ip, lsr r1
    1b08:	3c560001 	mrrccc	0, 0, r0, r6, cr1
    1b0c:	4c000001 	stcmi	0, cr0, [r0], {1}
    1b10:	05000001 	streq	r0, [r0, #-1]
    1b14:	007e3f00 	rsbseq	r3, lr, r0, lsl #30
    1b18:	00009f24 	andeq	r9, r0, r4, lsr #30
    1b1c:	00000000 	andeq	r0, r0, r0
    1b20:	01660000 	cmneq	r6, r0
    1b24:	016e0000 	cmneq	lr, r0
    1b28:	00010000 	andeq	r0, r1, r0
    1b2c:	00016e50 	andeq	r6, r1, r0, asr lr
    1b30:	00017200 	andeq	r7, r1, r0, lsl #4
    1b34:	f3000400 	vshl.u8	d0, d0, d0
    1b38:	009f5001 	addseq	r5, pc, r1
    1b3c:	00000000 	andeq	r0, r0, r0
    1b40:	66000000 	strvs	r0, [r0], -r0
    1b44:	68000001 	stmdavs	r0, {r0}
    1b48:	02000001 	andeq	r0, r0, #1
    1b4c:	689f3000 	ldmvs	pc, {ip, sp}	; <UNPREDICTABLE>
    1b50:	72000001 	andvc	r0, r0, #1
    1b54:	0c000001 	stceq	0, cr0, [r0], {1}
    1b58:	0a007100 	beq	1df60 <__Stack_Size+0x1db60>
    1b5c:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    1b60:	2e301a00 	vaddcs.f32	s2, s0, s0
    1b64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	00017200 	andeq	r7, r1, r0, lsl #4
    1b70:	00017400 	andeq	r7, r1, r0, lsl #8
    1b74:	50000100 	andpl	r0, r0, r0, lsl #2
    1b78:	00000174 	andeq	r0, r0, r4, ror r1
    1b7c:	00000178 	andeq	r0, r0, r8, ror r1
    1b80:	01f30004 	mvnseq	r0, r4
    1b84:	00009f50 	andeq	r9, r0, r0, asr pc
    1b88:	00000000 	andeq	r0, r0, r0
    1b8c:	01780000 	cmneq	r8, r0
    1b90:	01800000 	orreq	r0, r0, r0
    1b94:	00010000 	andeq	r0, r1, r0
    1b98:	00018050 	andeq	r8, r1, r0, asr r0
    1b9c:	00018400 	andeq	r8, r1, r0, lsl #8
    1ba0:	f3000400 	vshl.u8	d0, d0, d0
    1ba4:	009f5001 	addseq	r5, pc, r1
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1bb0:	7a000001 	bvc	1bbc <__Stack_Size+0x17bc>
    1bb4:	02000001 	andeq	r0, r0, #1
    1bb8:	7a9f3000 	bvc	fe7cdbc0 <SCS_BASE+0x1e7bfbc0>
    1bbc:	84000001 	strhi	r0, [r0], #-1
    1bc0:	0c000001 	stceq	0, cr0, [r0], {1}
    1bc4:	0a007100 	beq	1dfcc <__Stack_Size+0x1dbcc>
    1bc8:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    1bcc:	2e301a00 	vaddcs.f32	s2, s0, s0
    1bd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bd4:	00000000 	andeq	r0, r0, r0
    1bd8:	00018400 	andeq	r8, r1, r0, lsl #8
    1bdc:	00018600 	andeq	r8, r1, r0, lsl #12
    1be0:	50000100 	andpl	r0, r0, r0, lsl #2
    1be4:	00000186 	andeq	r0, r0, r6, lsl #3
    1be8:	0000018a 	andeq	r0, r0, sl, lsl #3
    1bec:	01f30004 	mvnseq	r0, r4
    1bf0:	00009f50 	andeq	r9, r0, r0, asr pc
    1bf4:	00000000 	andeq	r0, r0, r0
    1bf8:	01a00000 	moveq	r0, r0
    1bfc:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    1c00:	00040000 	andeq	r0, r4, r0
    1c04:	9f243c40 	svcls	0x00243c40
    1c08:	000001a4 	andeq	r0, r0, r4, lsr #3
    1c0c:	000001ac 	andeq	r0, r0, ip, lsr #3
    1c10:	00530001 	subseq	r0, r3, r1
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	b0000000 	andlt	r0, r0, r0
    1c1c:	c2000001 	andgt	r0, r0, #1
    1c20:	01000001 	tsteq	r0, r1
    1c24:	01c25000 	biceq	r5, r2, r0
    1c28:	01cc0000 	biceq	r0, ip, r0
    1c2c:	00040000 	andeq	r0, r4, r0
    1c30:	9f5001f3 	svcls	0x005001f3
	...
    1c3c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    1c40:	000001be 			; <UNDEFINED> instruction: 0x000001be
    1c44:	be510001 	cdplt	0, 5, cr0, cr1, cr1, {0}
    1c48:	cc000001 	stcgt	0, cr0, [r0], {1}
    1c4c:	04000001 	streq	r0, [r0], #-1
    1c50:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1c54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c58:	00000000 	andeq	r0, r0, r0
    1c5c:	0001b000 	andeq	fp, r1, r0
    1c60:	0001b400 	andeq	fp, r1, r0, lsl #8
    1c64:	30000200 	andcc	r0, r0, r0, lsl #4
    1c68:	0001b49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1c6c:	0001b800 	andeq	fp, r1, r0, lsl #16
    1c70:	73000f00 	movwvc	r0, #3840	; 0xf00
    1c74:	ff800a00 			; <UNDEFINED> instruction: 0xff800a00
    1c78:	0800701a 	stmdaeq	r0, {r1, r3, r4, ip, sp, lr}
    1c7c:	24341aff 	ldrtcs	r1, [r4], #-2815	; 0xaff
    1c80:	01c29f21 	biceq	r9, r2, r1, lsr #30
    1c84:	01cc0000 	biceq	r0, ip, r0
    1c88:	00010000 	andeq	r0, r1, r0
    1c8c:	00000050 	andeq	r0, r0, r0, asr r0
    1c90:	00000000 	andeq	r0, r0, r0
    1c94:	0001d800 	andeq	sp, r1, r0, lsl #16
    1c98:	00021a00 	andeq	r1, r2, r0, lsl #20
    1c9c:	50000100 	andpl	r0, r0, r0, lsl #2
    1ca0:	0000021a 	andeq	r0, r0, sl, lsl r2
    1ca4:	0000022c 	andeq	r0, r0, ip, lsr #4
    1ca8:	01f30004 	mvnseq	r0, r4
    1cac:	00009f50 	andeq	r9, r0, r0, asr pc
    1cb0:	00000000 	andeq	r0, r0, r0
    1cb4:	01d80000 	bicseq	r0, r8, r0
    1cb8:	01e80000 	mvneq	r0, r0
    1cbc:	00020000 	andeq	r0, r2, r0
    1cc0:	01e89f30 	mvneq	r9, r0, lsr pc
    1cc4:	021e0000 	andseq	r0, lr, #0
    1cc8:	00010000 	andeq	r0, r1, r0
    1ccc:	00021e52 	andeq	r1, r2, r2, asr lr
    1cd0:	00022c00 	andeq	r2, r2, r0, lsl #24
    1cd4:	f3000800 	vsub.i8	d0, d0, d0
    1cd8:	ff0a5001 			; <UNDEFINED> instruction: 0xff0a5001
    1cdc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1ce8:	fa000001 	blx	1cf4 <__Stack_Size+0x18f4>
    1cec:	02000001 	andeq	r0, r0, #1
    1cf0:	fa9f3000 	blx	fe7cdcf8 <SCS_BASE+0x1e7bfcf8>
    1cf4:	16000001 	strne	r0, [r0], -r1
    1cf8:	0b000002 	bleq	1d08 <__Stack_Size+0x1908>
    1cfc:	00703300 	rsbseq	r3, r0, r0, lsl #6
    1d00:	1a243f4e 	bne	911a40 <__Stack_Size+0x911640>
    1d04:	9f242540 	svcls	0x00242540
	...
    1d10:	000001d8 	ldrdeq	r0, [r0], -r8
    1d14:	000001e6 	andeq	r0, r0, r6, ror #3
    1d18:	9f300002 	svcls	0x00300002
    1d1c:	000001e6 	andeq	r0, r0, r6, ror #3
    1d20:	0000022c 	andeq	r0, r0, ip, lsr #4
    1d24:	00530001 	subseq	r0, r3, r1
    1d28:	00000000 	andeq	r0, r0, r0
    1d2c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1d30:	e6000001 	str	r0, [r0], -r1
    1d34:	02000001 	andeq	r0, r0, #1
    1d38:	e69f3000 	ldr	r3, [pc], r0
    1d3c:	1a000001 	bne	1d48 <__Stack_Size+0x1948>
    1d40:	09000002 	stmdbeq	r0, {r1}
    1d44:	4e007000 	cdpmi	0, 0, cr7, cr0, cr0, {0}
    1d48:	401a243f 	andsmi	r2, sl, pc, lsr r4
    1d4c:	021a9f25 	andseq	r9, sl, #37, 30	; 0x94
    1d50:	022c0000 	eoreq	r0, ip, #0
    1d54:	000a0000 	andeq	r0, sl, r0
    1d58:	4e5001f3 	mrcmi	1, 2, r0, cr0, cr3, {7}
    1d5c:	401a243f 	andsmi	r2, sl, pc, lsr r4
    1d60:	00009f25 	andeq	r9, r0, r5, lsr #30
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	022c0000 	eoreq	r0, ip, #0
    1d6c:	02500000 	subseq	r0, r0, #0
    1d70:	00010000 	andeq	r0, r1, r0
    1d74:	00025050 	andeq	r5, r2, r0, asr r0
    1d78:	00025600 	andeq	r5, r2, r0, lsl #12
    1d7c:	f3000400 	vshl.u8	d0, d0, d0
    1d80:	009f5001 	addseq	r5, pc, r1
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	2c000000 	stccs	0, cr0, [r0], {-0}
    1d8c:	34000002 	strcc	r0, [r0], #-2
    1d90:	01000002 	tsteq	r0, r2
    1d94:	02345100 	eorseq	r5, r4, #0, 2
    1d98:	02560000 	subseq	r0, r6, #0
    1d9c:	00040000 	andeq	r0, r4, r0
    1da0:	9f5101f3 	svcls	0x005101f3
	...
    1dac:	0000022c 	andeq	r0, r0, ip, lsr #4
    1db0:	00000240 	andeq	r0, r0, r0, asr #4
    1db4:	9f300002 	svcls	0x00300002
    1db8:	00000240 	andeq	r0, r0, r0, asr #4
    1dbc:	00000246 	andeq	r0, r0, r6, asr #4
    1dc0:	733f0005 	teqvc	pc, #5
    1dc4:	469f2400 	ldrmi	r2, [pc], r0, lsl #8
    1dc8:	4a000002 	bmi	1dd8 <__Stack_Size+0x19d8>
    1dcc:	01000002 	tsteq	r0, r2
    1dd0:	024a5200 	subeq	r5, sl, #0, 4
    1dd4:	02560000 	subseq	r0, r6, #0
    1dd8:	00050000 	andeq	r0, r5, r0
    1ddc:	2400733f 	strcs	r7, [r0], #-831	; 0x33f
    1de0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1dec:	00001c00 	andeq	r1, r0, r0, lsl #24
    1df0:	30000200 	andcc	r0, r0, r0, lsl #4
    1df4:	00001c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1df8:	00003400 	andeq	r3, r0, r0, lsl #8
    1dfc:	52000100 	andpl	r0, r0, #0, 2
	...
    1e08:	00000034 	andeq	r0, r0, r4, lsr r0
    1e0c:	0000004a 	andeq	r0, r0, sl, asr #32
    1e10:	9f300002 	svcls	0x00300002
    1e14:	0000004a 	andeq	r0, r0, sl, asr #32
    1e18:	0000004c 	andeq	r0, r0, ip, asr #32
    1e1c:	9f310002 	svcls	0x00310002
    1e20:	0000004c 	andeq	r0, r0, ip, asr #32
    1e24:	0000004e 	andeq	r0, r0, lr, asr #32
    1e28:	9f320002 	svcls	0x00320002
    1e2c:	0000004e 	andeq	r0, r0, lr, asr #32
    1e30:	00000064 	andeq	r0, r0, r4, rrx
    1e34:	9f330002 	svcls	0x00330002
	...
    1e40:	00000064 	andeq	r0, r0, r4, rrx
    1e44:	00000068 	andeq	r0, r0, r8, rrx
    1e48:	68500001 	ldmdavs	r0, {r0}^
    1e4c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1e50:	04000000 	streq	r0, [r0], #-0
    1e54:	5001f300 	andpl	pc, r1, r0, lsl #6
    1e58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e5c:	00000000 	andeq	r0, r0, r0
    1e60:	00007800 	andeq	r7, r0, r0, lsl #16
    1e64:	00009000 	andeq	r9, r0, r0
    1e68:	30000200 	andcc	r0, r0, r0, lsl #4
    1e6c:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e70:	00009800 	andeq	r9, r0, r0, lsl #16
    1e74:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1e78:	00000098 	muleq	r0, r8, r0
    1e7c:	000000ae 	andeq	r0, r0, lr, lsr #1
    1e80:	ae510001 	cdpge	0, 5, cr0, cr1, cr1, {0}
    1e84:	c0000000 	andgt	r0, r0, r0
    1e88:	01000000 	mrseq	r0, (UNDEF: 0)
    1e8c:	00c05200 	sbceq	r5, r0, r0, lsl #4
    1e90:	00c20000 	sbceq	r0, r2, r0
    1e94:	00060000 	andeq	r0, r6, r0
    1e98:	00710072 	rsbseq	r0, r1, r2, ror r0
    1e9c:	00c29f1a 	sbceq	r9, r2, sl, lsl pc
    1ea0:	00c40000 	sbceq	r0, r4, r0
    1ea4:	00010000 	andeq	r0, r1, r0
    1ea8:	0000de52 	andeq	sp, r0, r2, asr lr
    1eac:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1eb0:	30000200 	andcc	r0, r0, r0, lsl #4
    1eb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1eb8:	00000000 	andeq	r0, r0, r0
    1ebc:	00007800 	andeq	r7, r0, r0, lsl #16
    1ec0:	0000b200 	andeq	fp, r0, r0, lsl #4
    1ec4:	30000200 	andcc	r0, r0, r0, lsl #4
    1ec8:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1ecc:	0000c400 	andeq	ip, r0, r0, lsl #8
    1ed0:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1ed4:	000000c4 	andeq	r0, r0, r4, asr #1
    1ed8:	000000cc 	andeq	r0, r0, ip, asr #1
    1edc:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
    1ee0:	fc000000 	stc2	0, cr0, [r0], {-0}
    1ee4:	02000000 	andeq	r0, r0, #0
    1ee8:	009f3000 	addseq	r3, pc, r0
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1ef4:	bc000000 	stclt	0, cr0, [r0], {-0}
    1ef8:	02000000 	andeq	r0, r0, #0
    1efc:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    1f00:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    1f04:	01000000 	mrseq	r0, (UNDEF: 0)
    1f08:	00ce5100 	sbceq	r5, lr, r0, lsl #2
    1f0c:	00de0000 	sbcseq	r0, lr, r0
    1f10:	00060000 	andeq	r0, r6, r0
    1f14:	0075ff08 	rsbseq	pc, r5, r8, lsl #30
    1f18:	00de9f24 	sbcseq	r9, lr, r4, lsr #30
    1f1c:	00fc0000 	rscseq	r0, ip, r0
    1f20:	00020000 	andeq	r0, r2, r0
    1f24:	00009f30 	andeq	r9, r0, r0, lsr pc
    1f28:	00000000 	andeq	r0, r0, r0
    1f2c:	00780000 	rsbseq	r0, r8, r0
    1f30:	00900000 	addseq	r0, r0, r0
    1f34:	00020000 	andeq	r0, r2, r0
    1f38:	00909f30 	addseq	r9, r0, r0, lsr pc
    1f3c:	00940000 	addseq	r0, r4, r0
    1f40:	00050000 	andeq	r0, r5, r0
    1f44:	1c007434 	cfstrsne	mvf7, [r0], {52}	; 0x34
    1f48:	0000949f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1f4c:	00009800 	andeq	r9, r0, r0, lsl #16
    1f50:	51000100 	mrspl	r0, (UNDEF: 16)
    1f54:	00000098 	muleq	r0, r8, r0
    1f58:	0000009e 	muleq	r0, lr, r0
    1f5c:	74340005 	ldrtvc	r0, [r4], #-5
    1f60:	de9f1c00 	cdple	12, 9, cr1, cr15, cr0, {0}
    1f64:	fc000000 	stc2	0, cr0, [r0], {-0}
    1f68:	02000000 	andeq	r0, r0, #0
    1f6c:	009f3000 	addseq	r3, pc, r0
    1f70:	00000000 	andeq	r0, r0, r0
    1f74:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1f78:	90000000 	andls	r0, r0, r0
    1f7c:	02000000 	andeq	r0, r0, #0
    1f80:	909f3f00 	addsls	r3, pc, r0, lsl #30
    1f84:	9c000000 	stcls	0, cr0, [r0], {-0}
    1f88:	05000000 	streq	r0, [r0, #-0]
    1f8c:	00743f00 	rsbseq	r3, r4, r0, lsl #30
    1f90:	009c9f25 	addseq	r9, ip, r5, lsr #30
    1f94:	00a40000 	adceq	r0, r4, r0
    1f98:	00010000 	andeq	r0, r1, r0
    1f9c:	0000de52 	andeq	sp, r0, r2, asr lr
    1fa0:	0000fc00 	andeq	pc, r0, r0, lsl #24
    1fa4:	3f000200 	svccc	0x00000200
    1fa8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1fac:	00000000 	andeq	r0, r0, r0
    1fb0:	00011800 	andeq	r1, r1, r0, lsl #16
    1fb4:	00011a00 	andeq	r1, r1, r0, lsl #20
    1fb8:	50000100 	andpl	r0, r0, r0, lsl #2
    1fbc:	0000011a 	andeq	r0, r0, sl, lsl r1
    1fc0:	0000011e 	andeq	r0, r0, lr, lsl r1
    1fc4:	01f30004 	mvnseq	r0, r4
    1fc8:	00009f50 	andeq	r9, r0, r0, asr pc
    1fcc:	00000000 	andeq	r0, r0, r0
    1fd0:	01300000 	teqeq	r0, r0
    1fd4:	01420000 	mrseq	r0, (UNDEF: 66)
    1fd8:	00010000 	andeq	r0, r1, r0
    1fdc:	00014250 	andeq	r4, r1, r0, asr r2
    1fe0:	00015000 	andeq	r5, r1, r0
    1fe4:	f3000400 	vshl.u8	d0, d0, d0
    1fe8:	009f5001 	addseq	r5, pc, r1
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	30000000 	andcc	r0, r0, r0
    1ff4:	42000001 	andmi	r0, r0, #1
    1ff8:	02000001 	andeq	r0, r0, #1
    1ffc:	429f3000 	addsmi	r3, pc, #0
    2000:	44000001 	strmi	r0, [r0], #-1
    2004:	09000001 	stmdbeq	r0, {r0}
    2008:	72007000 	andvc	r7, r0, #0
    200c:	00721a00 	rsbseq	r1, r2, r0, lsl #20
    2010:	00009f29 	andeq	r9, r0, r9, lsr #30
    2014:	00000000 	andeq	r0, r0, r0
    2018:	01300000 	teqeq	r0, r0
    201c:	01380000 	teqeq	r8, r0
    2020:	00020000 	andeq	r0, r2, r0
    2024:	01389f30 	teqeq	r8, r0, lsr pc
    2028:	01500000 	cmpeq	r0, r0
    202c:	00010000 	andeq	r0, r1, r0
    2030:	00000052 	andeq	r0, r0, r2, asr r0
    2034:	00000000 	andeq	r0, r0, r0
    2038:	00015c00 	andeq	r5, r1, r0, lsl #24
    203c:	00016400 	andeq	r6, r1, r0, lsl #8
    2040:	50000100 	andpl	r0, r0, r0, lsl #2
    2044:	00000164 	andeq	r0, r0, r4, ror #2
    2048:	00000174 	andeq	r0, r0, r4, ror r1
    204c:	01f30004 	mvnseq	r0, r4
    2050:	00009f50 	andeq	r9, r0, r0, asr pc
    2054:	00000000 	andeq	r0, r0, r0
    2058:	01840000 	orreq	r0, r4, r0
    205c:	01960000 	orrseq	r0, r6, r0
    2060:	00010000 	andeq	r0, r1, r0
    2064:	00019650 	andeq	r9, r1, r0, asr r6
    2068:	0001a400 	andeq	sl, r1, r0, lsl #8
    206c:	f3000400 	vshl.u8	d0, d0, d0
    2070:	009f5001 	addseq	r5, pc, r1
    2074:	00000000 	andeq	r0, r0, r0
    2078:	84000000 	strhi	r0, [r0], #-0
    207c:	96000001 	strls	r0, [r0], -r1
    2080:	02000001 	andeq	r0, r0, #1
    2084:	969f3000 	ldrls	r3, [pc], r0
    2088:	98000001 	stmdals	r0, {r0}
    208c:	09000001 	stmdbeq	r0, {r0}
    2090:	72007000 	andvc	r7, r0, #0
    2094:	00721a00 	rsbseq	r1, r2, r0, lsl #20
    2098:	00009f29 	andeq	r9, r0, r9, lsr #30
    209c:	00000000 	andeq	r0, r0, r0
    20a0:	01840000 	orreq	r0, r4, r0
    20a4:	018c0000 	orreq	r0, ip, r0
    20a8:	00020000 	andeq	r0, r2, r0
    20ac:	018c9f30 	orreq	r9, ip, r0, lsr pc
    20b0:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    20b4:	00010000 	andeq	r0, r1, r0
    20b8:	00000052 	andeq	r0, r0, r2, asr r0
    20bc:	00000000 	andeq	r0, r0, r0
    20c0:	0001b000 	andeq	fp, r1, r0
    20c4:	0001bc00 	andeq	fp, r1, r0, lsl #24
    20c8:	50000100 	andpl	r0, r0, r0, lsl #2
    20cc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    20d0:	000001c4 	andeq	r0, r0, r4, asr #3
    20d4:	01f30004 	mvnseq	r0, r4
    20d8:	00009f50 	andeq	r9, r0, r0, asr pc
    20dc:	00000000 	andeq	r0, r0, r0
    20e0:	01b00000 	movseq	r0, r0
    20e4:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    20e8:	00010000 	andeq	r0, r1, r0
    20ec:	0001b451 	andeq	fp, r1, r1, asr r4
    20f0:	0001c400 	andeq	ip, r1, r0, lsl #8
    20f4:	f3000400 	vshl.u8	d0, d0, d0
    20f8:	009f5101 	addseq	r5, pc, r1, lsl #2
    20fc:	00000000 	andeq	r0, r0, r0
    2100:	e4000000 	str	r0, [r0], #-0
    2104:	ec000001 	stc	0, cr0, [r0], {1}
    2108:	01000001 	tsteq	r0, r1
    210c:	01ec5000 	mvneq	r5, r0
    2110:	01ee0000 	mvneq	r0, r0
    2114:	00040000 	andeq	r0, r4, r0
    2118:	9f5001f3 	svcls	0x005001f3
    211c:	000001ee 	andeq	r0, r0, lr, ror #3
    2120:	000001f2 	strdeq	r0, [r0], -r2
    2124:	f2500001 	vhadd.s16	d16, d0, d1
    2128:	fc000001 	stc2	0, cr0, [r0], {1}
    212c:	04000001 	streq	r0, [r0], #-1
    2130:	5001f300 	andpl	pc, r1, r0, lsl #6
    2134:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2138:	00000000 	andeq	r0, r0, r0
    213c:	0001fc00 	andeq	pc, r1, r0, lsl #24
    2140:	00020000 	andeq	r0, r2, r0
    2144:	50000100 	andpl	r0, r0, r0, lsl #2
    2148:	00000200 	andeq	r0, r0, r0, lsl #4
    214c:	0000021c 	andeq	r0, r0, ip, lsl r2
    2150:	01f30004 	mvnseq	r0, r4
    2154:	00009f50 	andeq	r9, r0, r0, asr pc
    2158:	00000000 	andeq	r0, r0, r0
    215c:	01fc0000 	mvnseq	r0, r0
    2160:	020a0000 	andeq	r0, sl, #0
    2164:	00010000 	andeq	r0, r1, r0
    2168:	00020a51 	andeq	r0, r2, r1, asr sl
    216c:	00020e00 	andeq	r0, r2, r0, lsl #28
    2170:	f3000400 	vshl.u8	d0, d0, d0
    2174:	0e9f5101 	fmleqe	f5, f7, f1
    2178:	10000002 	andne	r0, r0, r2
    217c:	01000002 	tsteq	r0, r2
    2180:	02105100 	andseq	r5, r0, #0, 2
    2184:	021c0000 	andseq	r0, ip, #0
    2188:	00040000 	andeq	r0, r4, r0
    218c:	9f5101f3 	svcls	0x005101f3
	...
    2198:	000001fc 	strdeq	r0, [r0], -ip
    219c:	00000204 	andeq	r0, r0, r4, lsl #4
    21a0:	9f300002 	svcls	0x00300002
    21a4:	00000204 	andeq	r0, r0, r4, lsl #4
    21a8:	0000020c 	andeq	r0, r0, ip, lsl #4
    21ac:	0c520001 	mrrceq	0, 0, r0, r2, cr1
    21b0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    21b4:	05000002 	streq	r0, [r0, #-2]
    21b8:	00703100 	rsbseq	r3, r0, r0, lsl #2
    21bc:	020e9f24 	andeq	r9, lr, #36, 30	; 0x90
    21c0:	02140000 	andseq	r0, r4, #0
    21c4:	00010000 	andeq	r0, r1, r0
    21c8:	00021452 	andeq	r1, r2, r2, asr r4
    21cc:	00021c00 	andeq	r1, r2, r0, lsl #24
    21d0:	31000500 	tstcc	r0, r0, lsl #10
    21d4:	9f240070 	svcls	0x00240070
	...
    21e0:	0000021c 	andeq	r0, r0, ip, lsl r2
    21e4:	0000023e 	andeq	r0, r0, lr, lsr r2
    21e8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    21ec:	68000002 	stmdavs	r0, {r1}
    21f0:	04000002 	streq	r0, [r0], #-2
    21f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    21f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    21fc:	00000000 	andeq	r0, r0, r0
    2200:	00021c00 	andeq	r1, r2, r0, lsl #24
    2204:	00022e00 	andeq	r2, r2, r0, lsl #28
    2208:	51000100 	mrspl	r0, (UNDEF: 16)
    220c:	0000022e 	andeq	r0, r0, lr, lsr #4
    2210:	00000268 	andeq	r0, r0, r8, ror #4
    2214:	01f30004 	mvnseq	r0, r4
    2218:	00009f51 	andeq	r9, r0, r1, asr pc
    221c:	00000000 	andeq	r0, r0, r0
    2220:	021c0000 	andseq	r0, ip, #0
    2224:	02360000 	eorseq	r0, r6, #0
    2228:	00010000 	andeq	r0, r1, r0
    222c:	00023652 	andeq	r3, r2, r2, asr r6
    2230:	00026800 	andeq	r6, r2, r0, lsl #16
    2234:	f3000400 	vshl.u8	d0, d0, d0
    2238:	009f5201 	addseq	r5, pc, r1, lsl #4
    223c:	00000000 	andeq	r0, r0, r0
    2240:	1c000000 	stcne	0, cr0, [r0], {-0}
    2244:	28000002 	stmdacs	r0, {r1}
    2248:	02000002 	andeq	r0, r0, #2
    224c:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    2250:	2c000002 	stccs	0, cr0, [r0], {2}
    2254:	05000002 	streq	r0, [r0, #-2]
    2258:	00733400 	rsbseq	r3, r3, r0, lsl #8
    225c:	022c9f1c 	eoreq	r9, ip, #28, 30	; 0x70
    2260:	02300000 	eorseq	r0, r0, #0
    2264:	00010000 	andeq	r0, r1, r0
    2268:	00023054 	andeq	r3, r2, r4, asr r0
    226c:	00023400 	andeq	r3, r2, r0, lsl #8
    2270:	34000500 	strcc	r0, [r0], #-1280	; 0x500
    2274:	9f1c0073 	svcls	0x001c0073
	...
    2280:	0000021c 	andeq	r0, r0, ip, lsl r2
    2284:	00000228 	andeq	r0, r0, r8, lsr #4
    2288:	ff080003 			; <UNDEFINED> instruction: 0xff080003
    228c:	0002289f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    2290:	00023400 	andeq	r3, r2, r0, lsl #8
    2294:	08000600 	stmdaeq	r0, {r9, sl}
    2298:	250073ff 	strcs	r7, [r0, #-1023]	; 0x3ff
    229c:	0002349f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    22a0:	00023a00 	andeq	r3, r2, r0, lsl #20
    22a4:	53000100 	movwpl	r0, #256	; 0x100
	...
    22b0:	0000021c 	andeq	r0, r0, ip, lsl r2
    22b4:	0000025a 	andeq	r0, r0, sl, asr r2
    22b8:	9f300002 	svcls	0x00300002
    22bc:	0000025a 	andeq	r0, r0, sl, asr r2
    22c0:	00000268 	andeq	r0, r0, r8, ror #4
    22c4:	ff080006 			; <UNDEFINED> instruction: 0xff080006
    22c8:	9f240073 	svcls	0x00240073
	...
    22d4:	0000021c 	andeq	r0, r0, ip, lsl r2
    22d8:	00000228 	andeq	r0, r0, r8, lsr #4
    22dc:	9f300002 	svcls	0x00300002
    22e0:	00000228 	andeq	r0, r0, r8, lsr #4
    22e4:	0000022e 	andeq	r0, r0, lr, lsr #4
    22e8:	2e530001 	cdpcs	0, 5, cr0, cr3, cr1, {0}
    22ec:	5a000002 	bpl	22fc <__Stack_Size+0x1efc>
    22f0:	01000002 	tsteq	r0, r2
    22f4:	025a5100 	subseq	r5, sl, #0, 2
    22f8:	025c0000 	subseq	r0, ip, #0
    22fc:	00060000 	andeq	r0, r6, r0
    2300:	00730071 	rsbseq	r0, r3, r1, ror r0
    2304:	025c9f24 	subseq	r9, ip, #36, 30	; 0x90
    2308:	025e0000 	subseq	r0, lr, #0
    230c:	00010000 	andeq	r0, r1, r0
    2310:	00000051 	andeq	r0, r0, r1, asr r0
    2314:	00000000 	andeq	r0, r0, r0
    2318:	00026800 	andeq	r6, r2, r0, lsl #16
    231c:	00026e00 	andeq	r6, r2, r0, lsl #28
    2320:	50000100 	andpl	r0, r0, r0, lsl #2
    2324:	0000026e 	andeq	r0, r0, lr, ror #4
    2328:	00000284 	andeq	r0, r0, r4, lsl #5
    232c:	01f30004 	mvnseq	r0, r4
    2330:	00009f50 	andeq	r9, r0, r0, asr pc
    2334:	00000000 	andeq	r0, r0, r0
    2338:	02680000 	rsbeq	r0, r8, #0
    233c:	02740000 	rsbseq	r0, r4, #0
    2340:	00020000 	andeq	r0, r2, r0
    2344:	02749f30 	rsbseq	r9, r4, #48, 30	; 0xc0
    2348:	02760000 	rsbseq	r0, r6, #0
    234c:	00090000 	andeq	r0, r9, r0
    2350:	00700073 	rsbseq	r0, r0, r3, ror r0
    2354:	2900731a 	stmdbcs	r0, {r1, r3, r4, r8, r9, ip, sp, lr}
    2358:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    235c:	00000000 	andeq	r0, r0, r0
    2360:	00026800 	andeq	r6, r2, r0, lsl #16
    2364:	00027400 	andeq	r7, r2, r0, lsl #8
    2368:	30000200 	andcc	r0, r0, r0, lsl #4
    236c:	0002749f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    2370:	00027600 	andeq	r7, r2, r0, lsl #12
    2374:	73000600 	movwvc	r0, #1536	; 0x600
    2378:	1a007000 	bne	1e380 <__Stack_Size+0x1df80>
    237c:	0002769f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    2380:	00027a00 	andeq	r7, r2, r0, lsl #20
    2384:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2390:	00000268 	andeq	r0, r0, r8, ror #4
    2394:	0000026e 	andeq	r0, r0, lr, ror #4
    2398:	00700007 	rsbseq	r0, r0, r7
    239c:	1a3f253a 	bne	fcb88c <__Stack_Size+0xfcb48c>
    23a0:	00026e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    23a4:	00027200 	andeq	r7, r2, r0, lsl #4
    23a8:	f3000800 	vsub.i8	d0, d0, d0
    23ac:	253a5001 	ldrcs	r5, [sl, #-1]!
    23b0:	729f1a3f 	addsvc	r1, pc, #258048	; 0x3f000
    23b4:	78000002 	stmdavc	r0, {r1}
    23b8:	01000002 	tsteq	r0, r2
    23bc:	02785300 	rsbseq	r5, r8, #0, 6
    23c0:	02840000 	addeq	r0, r4, #0
    23c4:	00090000 	andeq	r0, r9, r0
    23c8:	5001f331 	andpl	pc, r1, r1, lsr r3	; <UNPREDICTABLE>
    23cc:	2424f609 	strtcs	pc, [r4], #-1545	; 0x609
    23d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23d4:	00000000 	andeq	r0, r0, r0
    23d8:	00028400 	andeq	r8, r2, r0, lsl #8
    23dc:	00028a00 	andeq	r8, r2, r0, lsl #20
    23e0:	50000100 	andpl	r0, r0, r0, lsl #2
    23e4:	0000028a 	andeq	r0, r0, sl, lsl #5
    23e8:	0000029c 	muleq	r0, ip, r2
    23ec:	01f30004 	mvnseq	r0, r4
    23f0:	00009f50 	andeq	r9, r0, r0, asr pc
    23f4:	00000000 	andeq	r0, r0, r0
    23f8:	02840000 	addeq	r0, r4, #0
    23fc:	028a0000 	addeq	r0, sl, #0
    2400:	00050000 	andeq	r0, r5, r0
    2404:	1a4f0070 	bne	13c25cc <__Stack_Size+0x13c21cc>
    2408:	00028a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    240c:	00029c00 	andeq	r9, r2, r0, lsl #24
    2410:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    241c:	0000029c 	muleq	r0, ip, r2
    2420:	000002a2 	andeq	r0, r0, r2, lsr #5
    2424:	a2500001 	subsge	r0, r0, #1
    2428:	b4000002 	strlt	r0, [r0], #-2
    242c:	04000002 	streq	r0, [r0], #-2
    2430:	5001f300 	andpl	pc, r1, r0, lsl #6
    2434:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2438:	00000000 	andeq	r0, r0, r0
    243c:	00029c00 	andeq	r9, r2, r0, lsl #24
    2440:	0002a200 	andeq	sl, r2, r0, lsl #4
    2444:	70000500 	andvc	r0, r0, r0, lsl #10
    2448:	9f1a4f00 	svcls	0x001a4f00
    244c:	000002a2 	andeq	r0, r0, r2, lsr #5
    2450:	000002a6 	andeq	r0, r0, r6, lsr #5
    2454:	a6500001 	ldrbge	r0, [r0], -r1
    2458:	b4000002 	strlt	r0, [r0], #-2
    245c:	03000002 	movweq	r0, #2
    2460:	9f017000 	svcls	0x00017000
	...
    246c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    2470:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    2474:	ba500001 	blt	1402480 <__Stack_Size+0x1402080>
    2478:	d0000002 	andle	r0, r0, r2
    247c:	04000002 	streq	r0, [r0], #-2
    2480:	5001f300 	andpl	pc, r1, r0, lsl #6
    2484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2488:	00000000 	andeq	r0, r0, r0
    248c:	0002b400 	andeq	fp, r2, r0, lsl #8
    2490:	0002c000 	andeq	ip, r2, r0
    2494:	30000200 	andcc	r0, r0, r0, lsl #4
    2498:	0002c09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    249c:	0002c200 	andeq	ip, r2, r0, lsl #4
    24a0:	73000900 	movwvc	r0, #2304	; 0x900
    24a4:	1a007000 	bne	1e4ac <__Stack_Size+0x1e0ac>
    24a8:	9f290073 	svcls	0x00290073
	...
    24b4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    24b8:	000002c0 	andeq	r0, r0, r0, asr #5
    24bc:	9f300002 	svcls	0x00300002
    24c0:	000002c0 	andeq	r0, r0, r0, asr #5
    24c4:	000002c2 	andeq	r0, r0, r2, asr #5
    24c8:	00730006 	rsbseq	r0, r3, r6
    24cc:	9f1a0070 	svcls	0x001a0070
    24d0:	000002c2 	andeq	r0, r0, r2, asr #5
    24d4:	000002c6 	andeq	r0, r0, r6, asr #5
    24d8:	00500001 	subseq	r0, r0, r1
    24dc:	00000000 	andeq	r0, r0, r0
    24e0:	b4000000 	strlt	r0, [r0], #-0
    24e4:	ba000002 	blt	24f4 <__Stack_Size+0x20f4>
    24e8:	07000002 	streq	r0, [r0, -r2]
    24ec:	3e007000 	cdpcc	0, 0, cr7, cr0, cr0, {0}
    24f0:	9f1a3f25 	svcls	0x001a3f25
    24f4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    24f8:	000002be 			; <UNDEFINED> instruction: 0x000002be
    24fc:	01f30008 	mvnseq	r0, r8
    2500:	3f253e50 	svccc	0x00253e50
    2504:	02be9f1a 	adcseq	r9, lr, #26, 30	; 0x68
    2508:	02c40000 	sbceq	r0, r4, #0
    250c:	00010000 	andeq	r0, r1, r0
    2510:	0002c453 	andeq	ip, r2, r3, asr r4
    2514:	0002d000 	andeq	sp, r2, r0
    2518:	31000900 	tstcc	r0, r0, lsl #18
    251c:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    2520:	9f2424f2 	svcls	0x002424f2
	...
    252c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2530:	000002da 	ldrdeq	r0, [r0], -sl
    2534:	da500001 	ble	1402540 <__Stack_Size+0x1402140>
    2538:	dc000002 	stcle	0, cr0, [r0], {2}
    253c:	04000002 	streq	r0, [r0], #-2
    2540:	5001f300 	andpl	pc, r1, r0, lsl #6
    2544:	0002dc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    2548:	0002e600 	andeq	lr, r2, r0, lsl #12
    254c:	50000100 	andpl	r0, r0, r0, lsl #2
    2550:	000002e6 	andeq	r0, r0, r6, ror #5
    2554:	000002f6 	strdeq	r0, [r0], -r6
    2558:	01f30004 	mvnseq	r0, r4
    255c:	02f69f50 	rscseq	r9, r6, #80, 30	; 0x140
    2560:	02f80000 	rscseq	r0, r8, #0
    2564:	00010000 	andeq	r0, r1, r0
    2568:	0002f850 	andeq	pc, r2, r0, asr r8	; <UNPREDICTABLE>
    256c:	00030000 	andeq	r0, r3, r0
    2570:	f3000400 	vshl.u8	d0, d0, d0
    2574:	009f5001 	addseq	r5, pc, r1
    2578:	00000000 	andeq	r0, r0, r0
    257c:	d0000000 	andle	r0, r0, r0
    2580:	da000002 	ble	2590 <__Stack_Size+0x2190>
    2584:	02000002 	andeq	r0, r0, #2
    2588:	da9f3000 	ble	fe7ce590 <SCS_BASE+0x1e7c0590>
    258c:	dc000002 	stcle	0, cr0, [r0], {2}
    2590:	01000002 	tsteq	r0, r2
    2594:	02dc5000 	sbcseq	r5, ip, #0
    2598:	02ea0000 	rsceq	r0, sl, #0
    259c:	00020000 	andeq	r0, r2, r0
    25a0:	02ea9f30 	rsceq	r9, sl, #48, 30	; 0xc0
    25a4:	02f60000 	rscseq	r0, r6, #0
    25a8:	00010000 	andeq	r0, r1, r0
    25ac:	0002f650 	andeq	pc, r2, r0, asr r6	; <UNPREDICTABLE>
    25b0:	0002f800 	andeq	pc, r2, r0, lsl #16
    25b4:	30000200 	andcc	r0, r0, r0, lsl #4
    25b8:	0002f89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    25bc:	00030000 	andeq	r0, r3, r0
    25c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    25cc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    25d0:	000002d4 	ldrdeq	r0, [r0], -r4
    25d4:	9f300002 	svcls	0x00300002
    25d8:	000002d4 	ldrdeq	r0, [r0], -r4
    25dc:	000002e4 	andeq	r0, r0, r4, ror #5
    25e0:	e4530001 	ldrb	r0, [r3], #-1
    25e4:	e6000002 	str	r0, [r0], -r2
    25e8:	08000002 	stmdaeq	r0, {r1}
    25ec:	09007000 	stmdbeq	r0, {ip, sp, lr}
    25f0:	253224f0 	ldrcs	r2, [r2, #-1264]!	; 0x4f0
    25f4:	0002e69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    25f8:	0002f600 	andeq	pc, r2, r0, lsl #12
    25fc:	f3000900 	vmls.i8	d0, d0, d0
    2600:	f0095001 			; <UNDEFINED> instruction: 0xf0095001
    2604:	9f253224 	svcls	0x00253224
    2608:	000002f6 	strdeq	r0, [r0], -r6
    260c:	00000300 	andeq	r0, r0, r0, lsl #6
    2610:	00530001 	subseq	r0, r3, r1
    2614:	00000000 	andeq	r0, r0, r0
    2618:	d0000000 	andle	r0, r0, r0
    261c:	d4000002 	strle	r0, [r0], #-2
    2620:	02000002 	andeq	r0, r0, #2
    2624:	d49f3000 	ldrle	r3, [pc], #0	; 262c <__Stack_Size+0x222c>
    2628:	da000002 	ble	2638 <__Stack_Size+0x2238>
    262c:	07000002 	streq	r0, [r0, -r2]
    2630:	44007000 	strmi	r7, [r0], #-0
    2634:	9f1a3325 	svcls	0x001a3325
    2638:	000002da 	ldrdeq	r0, [r0], -sl
    263c:	000002dc 	ldrdeq	r0, [r0], -ip
    2640:	01f30008 	mvnseq	r0, r8
    2644:	33254450 			; <UNDEFINED> instruction: 0x33254450
    2648:	02dc9f1a 	sbcseq	r9, ip, #26, 30	; 0x68
    264c:	02e60000 	rsceq	r0, r6, #0
    2650:	00070000 	andeq	r0, r7, r0
    2654:	25440070 	strbcs	r0, [r4, #-112]	; 0x70
    2658:	e69f1a33 			; <UNDEFINED> instruction: 0xe69f1a33
    265c:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    2660:	08000002 	stmdaeq	r0, {r1}
    2664:	5001f300 	andpl	pc, r1, r0, lsl #6
    2668:	1a332544 	bne	ccbb80 <__Stack_Size+0xccb780>
    266c:	0002f69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    2670:	0002f800 	andeq	pc, r2, r0, lsl #16
    2674:	70000700 	andvc	r0, r0, r0, lsl #14
    2678:	33254400 			; <UNDEFINED> instruction: 0x33254400
    267c:	02f89f1a 	rscseq	r9, r8, #26, 30	; 0x68
    2680:	03000000 	movweq	r0, #0
    2684:	00080000 	andeq	r0, r8, r0
    2688:	445001f3 	ldrbmi	r0, [r0], #-499	; 0x1f3
    268c:	9f1a3325 	svcls	0x001a3325
	...
    2698:	00000300 	andeq	r0, r0, r0, lsl #6
    269c:	0000030a 	andeq	r0, r0, sl, lsl #6
    26a0:	0a500001 	beq	14026ac <__Stack_Size+0x14022ac>
    26a4:	14000003 	strne	r0, [r0], #-3
    26a8:	04000003 	streq	r0, [r0], #-3
    26ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    26b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    26b4:	00000000 	andeq	r0, r0, r0
    26b8:	00030000 	andeq	r0, r3, r0
    26bc:	00030a00 	andeq	r0, r3, r0, lsl #20
    26c0:	30000200 	andcc	r0, r0, r0, lsl #4
    26c4:	00030a9f 	muleq	r3, pc, sl	; <UNPREDICTABLE>
    26c8:	00031400 	andeq	r1, r3, r0, lsl #8
    26cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    26d8:	00000300 	andeq	r0, r0, r0, lsl #6
    26dc:	0000030a 	andeq	r0, r0, sl, lsl #6
    26e0:	00700007 	rsbseq	r0, r0, r7
    26e4:	1a312546 	bne	c4bc04 <__Stack_Size+0xc4b804>
    26e8:	00030a9f 	muleq	r3, pc, sl	; <UNPREDICTABLE>
    26ec:	00031400 	andeq	r1, r3, r0, lsl #8
    26f0:	f3000800 	vsub.i8	d0, d0, d0
    26f4:	25465001 	strbcs	r5, [r6, #-1]
    26f8:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	30000000 	andcc	r0, r0, r0
    2704:	3a000000 	bcc	270c <__Stack_Size+0x230c>
    2708:	01000000 	mrseq	r0, (UNDEF: 0)
    270c:	003a5000 	eorseq	r5, sl, r0
    2710:	00440000 	subeq	r0, r4, r0
    2714:	00040000 	andeq	r0, r4, r0
    2718:	9f5001f3 	svcls	0x005001f3
	...
    2724:	00000030 	andeq	r0, r0, r0, lsr r0
    2728:	00000034 	andeq	r0, r0, r4, lsr r0
    272c:	9f300002 	svcls	0x00300002
    2730:	00000034 	andeq	r0, r0, r4, lsr r0
    2734:	0000003a 	andeq	r0, r0, sl, lsr r0
    2738:	3a530001 	bcc	14c2744 <__Stack_Size+0x14c2344>
    273c:	44000000 	strmi	r0, [r0], #-0
    2740:	01000000 	mrseq	r0, (UNDEF: 0)
    2744:	00005000 	andeq	r5, r0, r0
    2748:	00000000 	andeq	r0, r0, r0
    274c:	00500000 	subseq	r0, r0, r0
    2750:	005e0000 	subseq	r0, lr, r0
    2754:	00010000 	andeq	r0, r1, r0
    2758:	00005e50 	andeq	r5, r0, r0, asr lr
    275c:	00007c00 	andeq	r7, r0, r0, lsl #24
    2760:	f3000400 	vshl.u8	d0, d0, d0
    2764:	009f5001 	addseq	r5, pc, r1
    2768:	00000000 	andeq	r0, r0, r0
    276c:	50000000 	andpl	r0, r0, r0
    2770:	6f000000 	svcvs	0x00000000
    2774:	01000000 	mrseq	r0, (UNDEF: 0)
    2778:	006f5100 	rsbeq	r5, pc, r0, lsl #2
    277c:	00700000 	rsbseq	r0, r0, r0
    2780:	00040000 	andeq	r0, r4, r0
    2784:	9f5101f3 	svcls	0x005101f3
    2788:	00000070 	andeq	r0, r0, r0, ror r0
    278c:	00000073 	andeq	r0, r0, r3, ror r0
    2790:	73510001 	cmpvc	r1, #1
    2794:	7c000000 	stcvc	0, cr0, [r0], {-0}
    2798:	04000000 	streq	r0, [r0], #-0
    279c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    27a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	00005000 	andeq	r5, r0, r0
    27ac:	00005600 	andeq	r5, r0, r0, lsl #12
    27b0:	30000200 	andcc	r0, r0, r0, lsl #4
    27b4:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    27b8:	00005e00 	andeq	r5, r0, r0, lsl #28
    27bc:	53000100 	movwpl	r0, #256	; 0x100
    27c0:	0000005e 	andeq	r0, r0, lr, asr r0
    27c4:	0000006f 	andeq	r0, r0, pc, rrx
    27c8:	70500001 	subsvc	r0, r0, r1
    27cc:	73000000 	movwvc	r0, #0
    27d0:	01000000 	mrseq	r0, (UNDEF: 0)
    27d4:	00005000 	andeq	r5, r0, r0
    27d8:	00000000 	andeq	r0, r0, r0
    27dc:	00a40000 	adceq	r0, r4, r0
    27e0:	00ae0000 	adceq	r0, lr, r0
    27e4:	00010000 	andeq	r0, r1, r0
    27e8:	0000ae50 	andeq	sl, r0, r0, asr lr
    27ec:	0000b800 	andeq	fp, r0, r0, lsl #16
    27f0:	f3000400 	vshl.u8	d0, d0, d0
    27f4:	009f5001 	addseq	r5, pc, r1
    27f8:	00000000 	andeq	r0, r0, r0
    27fc:	a4000000 	strge	r0, [r0], #-0
    2800:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2804:	02000000 	andeq	r0, r0, #0
    2808:	a89f3000 	ldmge	pc, {ip, sp}	; <UNPREDICTABLE>
    280c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    2810:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2814:	73007000 	movwvc	r7, #0
    2818:	2e301a00 	vaddcs.f32	s2, s0, s0
    281c:	0000ae9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    2820:	0000b800 	andeq	fp, r0, r0, lsl #16
    2824:	f3000900 	vmls.i8	d0, d0, d0
    2828:	00735001 	rsbseq	r5, r3, r1
    282c:	9f2e301a 	svcls	0x002e301a
	...
    2838:	000000b8 	strheq	r0, [r0], -r8
    283c:	000000c0 	andeq	r0, r0, r0, asr #1
    2840:	c0500001 	subsgt	r0, r0, r1
    2844:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2848:	04000000 	streq	r0, [r0], #-0
    284c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2850:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2854:	00000000 	andeq	r0, r0, r0
    2858:	00007400 	andeq	r7, r0, r0, lsl #8
    285c:	00008000 	andeq	r8, r0, r0
    2860:	50000100 	andpl	r0, r0, r0, lsl #2
    2864:	00000080 	andeq	r0, r0, r0, lsl #1
    2868:	00000088 	andeq	r0, r0, r8, lsl #1
    286c:	01f30004 	mvnseq	r0, r4
    2870:	00009f50 	andeq	r9, r0, r0, asr pc
    2874:	00000000 	andeq	r0, r0, r0
    2878:	00740000 	rsbseq	r0, r4, r0
    287c:	00780000 	rsbseq	r0, r8, r0
    2880:	00020000 	andeq	r0, r2, r0
    2884:	00789f30 	rsbseq	r9, r8, r0, lsr pc
    2888:	00800000 	addeq	r0, r0, r0
    288c:	00010000 	andeq	r0, r1, r0
    2890:	00008053 	andeq	r8, r0, r3, asr r0
    2894:	00008800 	andeq	r8, r0, r0, lsl #16
    2898:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    28a4:	00000094 	muleq	r0, r4, r0
    28a8:	000000a0 	andeq	r0, r0, r0, lsr #1
    28ac:	a0500001 	subsge	r0, r0, r1
    28b0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    28b4:	04000000 	streq	r0, [r0], #-0
    28b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    28bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28c0:	00000000 	andeq	r0, r0, r0
    28c4:	00009400 	andeq	r9, r0, r0, lsl #8
    28c8:	00009e00 	andeq	r9, r0, r0, lsl #28
    28cc:	51000100 	mrspl	r0, (UNDEF: 16)
    28d0:	0000009e 	muleq	r0, lr, r0
    28d4:	000000a8 	andeq	r0, r0, r8, lsr #1
    28d8:	01f30004 	mvnseq	r0, r4
    28dc:	00009f51 	andeq	r9, r0, r1, asr pc
    28e0:	00000000 	andeq	r0, r0, r0
    28e4:	00940000 	addseq	r0, r4, r0
    28e8:	00980000 	addseq	r0, r8, r0
    28ec:	00020000 	andeq	r0, r2, r0
    28f0:	00989f30 	addseq	r9, r8, r0, lsr pc
    28f4:	009c0000 	addseq	r0, ip, r0
    28f8:	00090000 	andeq	r0, r9, r0
    28fc:	ff110073 			; <UNDEFINED> instruction: 0xff110073
    2900:	1a7e83ff 	bne	1fa3904 <__Stack_Size+0x1fa3504>
    2904:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    2908:	0000a000 	andeq	sl, r0, r0
    290c:	53000100 	movwpl	r0, #256	; 0x100
    2910:	000000a0 	andeq	r0, r0, r0, lsr #1
    2914:	000000a8 	andeq	r0, r0, r8, lsr #1
    2918:	00500001 	subseq	r0, r0, r1
    291c:	00000000 	andeq	r0, r0, r0
    2920:	b4000000 	strlt	r0, [r0], #-0
    2924:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2928:	01000000 	mrseq	r0, (UNDEF: 0)
    292c:	00be5000 	adcseq	r5, lr, r0
    2930:	00c80000 	sbceq	r0, r8, r0
    2934:	00040000 	andeq	r0, r4, r0
    2938:	9f5001f3 	svcls	0x005001f3
	...
    2944:	000000b4 	strheq	r0, [r0], -r4
    2948:	000000b8 	strheq	r0, [r0], -r8
    294c:	9f300002 	svcls	0x00300002
    2950:	000000b8 	strheq	r0, [r0], -r8
    2954:	000000be 	strheq	r0, [r0], -lr
    2958:	be530001 	cdplt	0, 5, cr0, cr3, cr1, {0}
    295c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2960:	01000000 	mrseq	r0, (UNDEF: 0)
    2964:	00005000 	andeq	r5, r0, r0
    2968:	00000000 	andeq	r0, r0, r0
    296c:	00d80000 	sbcseq	r0, r8, r0
    2970:	00e20000 	rsceq	r0, r2, r0
    2974:	00010000 	andeq	r0, r1, r0
    2978:	0000e250 	andeq	lr, r0, r0, asr r2
    297c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    2980:	f3000400 	vshl.u8	d0, d0, d0
    2984:	009f5001 	addseq	r5, pc, r1
    2988:	00000000 	andeq	r0, r0, r0
    298c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2990:	dc000000 	stcle	0, cr0, [r0], {-0}
    2994:	02000000 	andeq	r0, r0, #0
    2998:	dc9f3000 	ldcle	0, cr3, [pc], {0}
    299c:	e2000000 	and	r0, r0, #0
    29a0:	01000000 	mrseq	r0, (UNDEF: 0)
    29a4:	00e25300 	rsceq	r5, r2, r0, lsl #6
    29a8:	00ec0000 	rsceq	r0, ip, r0
    29ac:	00010000 	andeq	r0, r1, r0
    29b0:	00000050 	andeq	r0, r0, r0, asr r0
    29b4:	00000000 	andeq	r0, r0, r0
    29b8:	0000ec00 	andeq	lr, r0, r0, lsl #24
    29bc:	0000f600 	andeq	pc, r0, r0, lsl #12
    29c0:	50000100 	andpl	r0, r0, r0, lsl #2
    29c4:	000000f6 	strdeq	r0, [r0], -r6
    29c8:	00000100 	andeq	r0, r0, r0, lsl #2
    29cc:	01f30004 	mvnseq	r0, r4
    29d0:	00009f50 	andeq	r9, r0, r0, asr pc
    29d4:	00000000 	andeq	r0, r0, r0
    29d8:	00ec0000 	rsceq	r0, ip, r0
    29dc:	00f00000 	rscseq	r0, r0, r0
    29e0:	00020000 	andeq	r0, r2, r0
    29e4:	00f09f30 	rscseq	r9, r0, r0, lsr pc
    29e8:	00f60000 	rscseq	r0, r6, r0
    29ec:	00010000 	andeq	r0, r1, r0
    29f0:	0000f653 	andeq	pc, r0, r3, asr r6	; <UNPREDICTABLE>
    29f4:	00010000 	andeq	r0, r1, r0
    29f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2a04:	00000100 	andeq	r0, r0, r0, lsl #2
    2a08:	0000010c 	andeq	r0, r0, ip, lsl #2
    2a0c:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2a10:	14000001 	strne	r0, [r0], #-1
    2a14:	04000001 	streq	r0, [r0], #-1
    2a18:	5001f300 	andpl	pc, r1, r0, lsl #6
    2a1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a20:	00000000 	andeq	r0, r0, r0
    2a24:	00010000 	andeq	r0, r1, r0
    2a28:	00010400 	andeq	r0, r1, r0, lsl #8
    2a2c:	30000200 	andcc	r0, r0, r0, lsl #4
    2a30:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    2a34:	00010c00 	andeq	r0, r1, r0, lsl #24
    2a38:	53000100 	movwpl	r0, #256	; 0x100
    2a3c:	0000010c 	andeq	r0, r0, ip, lsl #2
    2a40:	00000114 	andeq	r0, r0, r4, lsl r1
    2a44:	00500001 	subseq	r0, r0, r1
    2a48:	00000000 	andeq	r0, r0, r0
    2a4c:	14000000 	strne	r0, [r0], #-0
    2a50:	1c000001 	stcne	0, cr0, [r0], {1}
    2a54:	01000001 	tsteq	r0, r1
    2a58:	011c5000 	tsteq	ip, r0
    2a5c:	011e0000 	tsteq	lr, r0
    2a60:	00040000 	andeq	r0, r4, r0
    2a64:	9f5001f3 	svcls	0x005001f3
    2a68:	0000011e 	andeq	r0, r0, lr, lsl r1
    2a6c:	00000122 	andeq	r0, r0, r2, lsr #2
    2a70:	22500001 	subscs	r0, r0, #1
    2a74:	2c000001 	stccs	0, cr0, [r0], {1}
    2a78:	04000001 	streq	r0, [r0], #-1
    2a7c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2a80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a84:	00000000 	andeq	r0, r0, r0
    2a88:	00013800 	andeq	r3, r1, r0, lsl #16
    2a8c:	00014200 	andeq	r4, r1, r0, lsl #4
    2a90:	50000100 	andpl	r0, r0, r0, lsl #2
    2a94:	00000142 	andeq	r0, r0, r2, asr #2
    2a98:	0000014c 	andeq	r0, r0, ip, asr #2
    2a9c:	01f30004 	mvnseq	r0, r4
    2aa0:	00009f50 	andeq	r9, r0, r0, asr pc
    2aa4:	00000000 	andeq	r0, r0, r0
    2aa8:	01380000 	teqeq	r8, r0
    2aac:	013c0000 	teqeq	ip, r0
    2ab0:	00020000 	andeq	r0, r2, r0
    2ab4:	013c9f30 	teqeq	ip, r0, lsr pc
    2ab8:	01420000 	mrseq	r0, (UNDEF: 66)
    2abc:	00010000 	andeq	r0, r1, r0
    2ac0:	00014253 	andeq	r4, r1, r3, asr r2
    2ac4:	00014c00 	andeq	r4, r1, r0, lsl #24
    2ac8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2ad4:	00000178 	andeq	r0, r0, r8, ror r1
    2ad8:	0000017e 	andeq	r0, r0, lr, ror r1
    2adc:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    2ae0:	88000001 	stmdahi	r0, {r0}
    2ae4:	04000001 	streq	r0, [r0], #-1
    2ae8:	5001f300 	andpl	pc, r1, r0, lsl #6
    2aec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2af0:	00000000 	andeq	r0, r0, r0
    2af4:	00019400 	andeq	r9, r1, r0, lsl #8
    2af8:	00019a00 	andeq	r9, r1, r0, lsl #20
    2afc:	30000200 	andcc	r0, r0, r0, lsl #4
    2b00:	00019a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    2b04:	00019e00 	andeq	r9, r1, r0, lsl #28
    2b08:	73000500 	movwvc	r0, #1280	; 0x500
    2b0c:	9f1a3c00 	svcls	0x001a3c00
    2b10:	0000019e 	muleq	r0, lr, r1
    2b14:	000001a8 	andeq	r0, r0, r8, lsr #3
    2b18:	aa530001 	bge	14c2b24 <__Stack_Size+0x14c2724>
    2b1c:	ac000001 	stcge	0, cr0, [r0], {1}
    2b20:	01000001 	tsteq	r0, r1
    2b24:	01cc5300 	biceq	r5, ip, r0, lsl #6
    2b28:	01d20000 	bicseq	r0, r2, r0
    2b2c:	00080000 	andeq	r0, r8, r0
    2b30:	f0080073 			; <UNDEFINED> instruction: 0xf0080073
    2b34:	9f25341a 	svcls	0x0025341a
    2b38:	000001dc 	ldrdeq	r0, [r0], -ip
    2b3c:	000001e0 	andeq	r0, r0, r0, ror #3
    2b40:	00740009 	rsbseq	r0, r4, r9
    2b44:	1a07000a 	bne	1c2b74 <__Stack_Size+0x1c2774>
    2b48:	ea9f2538 	b	fe7cc030 <SCS_BASE+0x1e7be030>
    2b4c:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
    2b50:	09000001 	stmdbeq	r0, {r0}
    2b54:	0a007400 	beq	1fb5c <__Stack_Size+0x1f75c>
    2b58:	3b1a3800 	blcc	690b60 <__Stack_Size+0x690760>
    2b5c:	01f69f25 	mvnseq	r9, r5, lsr #30
    2b60:	01fa0000 	mvnseq	r0, r0
    2b64:	00090000 	andeq	r0, r9, r0
    2b68:	000a0072 	andeq	r0, sl, r2, ror r0
    2b6c:	253e1ac0 	ldrcs	r1, [lr, #-2752]!	; 0xac0
    2b70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2b74:	00000000 	andeq	r0, r0, r0
    2b78:	00019400 	andeq	r9, r1, r0, lsl #8
    2b7c:	0001ac00 	andeq	sl, r1, r0, lsl #24
    2b80:	30000200 	andcc	r0, r0, r0, lsl #4
    2b84:	0001ac9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2b88:	0001b200 	andeq	fp, r1, r0, lsl #4
    2b8c:	73000700 	movwvc	r0, #1792	; 0x700
    2b90:	24414e00 	strbcs	r4, [r1], #-3584	; 0xe00
    2b94:	01b89f1a 			; <UNDEFINED> instruction: 0x01b89f1a
    2b98:	01c80000 	biceq	r0, r8, r0
    2b9c:	00010000 	andeq	r0, r1, r0
    2ba0:	00000053 	andeq	r0, r0, r3, asr r0
    2ba4:	00000000 	andeq	r0, r0, r0
    2ba8:	00019400 	andeq	r9, r1, r0, lsl #8
    2bac:	0001b800 	andeq	fp, r1, r0, lsl #16
    2bb0:	30000200 	andcc	r0, r0, r0, lsl #4
    2bb4:	0001b89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    2bb8:	0001bc00 	andeq	fp, r1, r0, lsl #24
    2bbc:	71000700 	tstvc	r0, r0, lsl #14
    2bc0:	243c4000 	ldrtcs	r4, [ip], #-0
    2bc4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2bc8:	00000000 	andeq	r0, r0, r0
    2bcc:	01940000 	orrseq	r0, r4, r0
    2bd0:	01cc0000 	biceq	r0, ip, r0
    2bd4:	00020000 	andeq	r0, r2, r0
    2bd8:	01cc9f30 	biceq	r9, ip, r0, lsr pc
    2bdc:	01d20000 	bicseq	r0, r2, r0
    2be0:	00130000 	andseq	r0, r3, r0
    2be4:	f0080073 			; <UNDEFINED> instruction: 0xf0080073
    2be8:	0325341a 			; <UNDEFINED> instruction: 0x0325341a
    2bec:	08005ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, lr}
    2bf0:	08019422 	stmdaeq	r1, {r1, r5, sl, ip, pc}
    2bf4:	dc9f1aff 	vldmiale	pc, {s2-s256}
    2bf8:	e0000001 	and	r0, r0, r1
    2bfc:	14000001 	strne	r0, [r0], #-1
    2c00:	0a007400 	beq	1fc08 <__Stack_Size+0x1f808>
    2c04:	381a0700 	ldmdacc	sl, {r8, r9, sl}
    2c08:	5ecc0325 	cdppl	3, 12, cr0, cr12, cr5, {1}
    2c0c:	94220800 	strtls	r0, [r2], #-2048	; 0x800
    2c10:	1aff0801 	bne	fffc4c1c <SCS_BASE+0x1ffb6c1c>
    2c14:	0001ea9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    2c18:	0001ee00 	andeq	lr, r1, r0, lsl #28
    2c1c:	74001400 	strvc	r1, [r0], #-1024	; 0x400
    2c20:	38000a00 	stmdacc	r0, {r9, fp}
    2c24:	03253b1a 			; <UNDEFINED> instruction: 0x03253b1a
    2c28:	08005ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, lr}
    2c2c:	08019422 	stmdaeq	r1, {r1, r5, sl, ip, pc}
    2c30:	f69f1aff 			; <UNDEFINED> instruction: 0xf69f1aff
    2c34:	fa000001 	blx	2c40 <__Stack_Size+0x2840>
    2c38:	14000001 	strne	r0, [r0], #-1
    2c3c:	0a007200 	beq	1f444 <__Stack_Size+0x1f044>
    2c40:	3e1ac000 	cdpcc	0, 1, cr12, cr10, cr0, {0}
    2c44:	5edc0325 	cdppl	3, 13, cr0, cr12, cr5, {1}
    2c48:	94220800 	strtls	r0, [r2], #-2048	; 0x800
    2c4c:	1aff0801 	bne	fffc4c58 <SCS_BASE+0x1ffb6c58>
    2c50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c54:	00000000 	andeq	r0, r0, r0
    2c58:	00021800 	andeq	r1, r2, r0, lsl #16
    2c5c:	00022000 	andeq	r2, r2, r0
    2c60:	50000100 	andpl	r0, r0, r0, lsl #2
    2c64:	00000220 	andeq	r0, r0, r0, lsr #4
    2c68:	00000222 	andeq	r0, r0, r2, lsr #4
    2c6c:	01f30004 	mvnseq	r0, r4
    2c70:	02229f50 	eoreq	r9, r2, #80, 30	; 0x140
    2c74:	02260000 	eoreq	r0, r6, #0
    2c78:	00010000 	andeq	r0, r1, r0
    2c7c:	00022650 	andeq	r2, r2, r0, asr r6
    2c80:	00023000 	andeq	r3, r2, r0
    2c84:	f3000400 	vshl.u8	d0, d0, d0
    2c88:	009f5001 	addseq	r5, pc, r1
    2c8c:	00000000 	andeq	r0, r0, r0
    2c90:	30000000 	andcc	r0, r0, r0
    2c94:	38000002 	stmdacc	r0, {r1}
    2c98:	01000002 	tsteq	r0, r2
    2c9c:	02385000 	eorseq	r5, r8, #0
    2ca0:	023a0000 	eorseq	r0, sl, #0
    2ca4:	00040000 	andeq	r0, r4, r0
    2ca8:	9f5001f3 	svcls	0x005001f3
    2cac:	0000023a 	andeq	r0, r0, sl, lsr r2
    2cb0:	0000023e 	andeq	r0, r0, lr, lsr r2
    2cb4:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    2cb8:	48000002 	stmdami	r0, {r1}
    2cbc:	04000002 	streq	r0, [r0], #-2
    2cc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    2cc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	00024800 	andeq	r4, r2, r0, lsl #16
    2cd0:	00025000 	andeq	r5, r2, r0
    2cd4:	50000100 	andpl	r0, r0, r0, lsl #2
    2cd8:	00000250 	andeq	r0, r0, r0, asr r2
    2cdc:	00000252 	andeq	r0, r0, r2, asr r2
    2ce0:	01f30004 	mvnseq	r0, r4
    2ce4:	02529f50 	subseq	r9, r2, #80, 30	; 0x140
    2ce8:	02560000 	subseq	r0, r6, #0
    2cec:	00010000 	andeq	r0, r1, r0
    2cf0:	00025650 	andeq	r5, r2, r0, asr r6
    2cf4:	00026000 	andeq	r6, r2, r0
    2cf8:	f3000400 	vshl.u8	d0, d0, d0
    2cfc:	009f5001 	addseq	r5, pc, r1
    2d00:	00000000 	andeq	r0, r0, r0
    2d04:	60000000 	andvs	r0, r0, r0
    2d08:	68000002 	stmdavs	r0, {r1}
    2d0c:	01000002 	tsteq	r0, r2
    2d10:	02685000 	rsbeq	r5, r8, #0
    2d14:	026a0000 	rsbeq	r0, sl, #0
    2d18:	00040000 	andeq	r0, r4, r0
    2d1c:	9f5001f3 	svcls	0x005001f3
    2d20:	0000026a 	andeq	r0, r0, sl, ror #4
    2d24:	0000026e 	andeq	r0, r0, lr, ror #4
    2d28:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    2d2c:	78000002 	stmdavc	r0, {r1}
    2d30:	04000002 	streq	r0, [r0], #-2
    2d34:	5001f300 	andpl	pc, r1, r0, lsl #6
    2d38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d3c:	00000000 	andeq	r0, r0, r0
    2d40:	00027800 	andeq	r7, r2, r0, lsl #16
    2d44:	00028000 	andeq	r8, r2, r0
    2d48:	50000100 	andpl	r0, r0, r0, lsl #2
    2d4c:	00000280 	andeq	r0, r0, r0, lsl #5
    2d50:	00000282 	andeq	r0, r0, r2, lsl #5
    2d54:	01f30004 	mvnseq	r0, r4
    2d58:	02829f50 	addeq	r9, r2, #80, 30	; 0x140
    2d5c:	02860000 	addeq	r0, r6, #0
    2d60:	00010000 	andeq	r0, r1, r0
    2d64:	00028650 	andeq	r8, r2, r0, asr r6
    2d68:	00029000 	andeq	r9, r2, r0
    2d6c:	f3000400 	vshl.u8	d0, d0, d0
    2d70:	009f5001 	addseq	r5, pc, r1
    2d74:	00000000 	andeq	r0, r0, r0
    2d78:	b4000000 	strlt	r0, [r0], #-0
    2d7c:	cc000002 	stcgt	0, cr0, [r0], {2}
    2d80:	01000002 	tsteq	r0, r2
    2d84:	02cc5000 	sbceq	r5, ip, #0
    2d88:	02dc0000 	sbcseq	r0, ip, #0
    2d8c:	00040000 	andeq	r0, r4, r0
    2d90:	9f5001f3 	svcls	0x005001f3
	...
    2d9c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    2da0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    2da4:	9f300002 	svcls	0x00300002
    2da8:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    2dac:	000002c8 	andeq	r0, r0, r8, asr #5
    2db0:	00720006 	rsbseq	r0, r2, r6
    2db4:	9f1aff08 	svcls	0x001aff08
    2db8:	000002c8 	andeq	r0, r0, r8, asr #5
    2dbc:	000002cc 	andeq	r0, r0, ip, asr #5
    2dc0:	00700008 	rsbseq	r0, r0, r8
    2dc4:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    2dc8:	02cc9f1a 	sbceq	r9, ip, #26, 30	; 0x68
    2dcc:	02dc0000 	sbcseq	r0, ip, #0
    2dd0:	00090000 	andeq	r0, r9, r0
    2dd4:	4f5001f3 	svcmi	0x005001f3
    2dd8:	1aff081a 	bne	fffc4e48 <SCS_BASE+0x1ffb6e48>
    2ddc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2de0:	00000000 	andeq	r0, r0, r0
    2de4:	0002b400 	andeq	fp, r2, r0, lsl #8
    2de8:	0002be00 	andeq	fp, r2, r0, lsl #28
    2dec:	30000200 	andcc	r0, r0, r0, lsl #4
    2df0:	0002be9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    2df4:	0002c000 	andeq	ip, r2, r0
    2df8:	53000100 	movwpl	r0, #256	; 0x100
    2dfc:	000002c0 	andeq	r0, r0, r0, asr #5
    2e00:	000002c6 	andeq	r0, r0, r6, asr #5
    2e04:	9f300002 	svcls	0x00300002
    2e08:	000002c6 	andeq	r0, r0, r6, asr #5
    2e0c:	000002dc 	ldrdeq	r0, [r0], -ip
    2e10:	00530001 	subseq	r0, r3, r1
    2e14:	00000000 	andeq	r0, r0, r0
    2e18:	b4000000 	strlt	r0, [r0], #-0
    2e1c:	c8000002 	stmdagt	r0, {r1}
    2e20:	02000002 	andeq	r0, r0, #2
    2e24:	c89f3000 	ldmgt	pc, {ip, sp}	; <UNPREDICTABLE>
    2e28:	cc000002 	stcgt	0, cr0, [r0], {2}
    2e2c:	0d000002 	stceq	0, cr0, [r0, #-8]
    2e30:	70007300 	andvc	r7, r0, r0, lsl #6
    2e34:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    2e38:	31251aff 	strdcc	r1, [r5, -pc]!
    2e3c:	02cc9f1a 	sbceq	r9, ip, #26, 30	; 0x68
    2e40:	02dc0000 	sbcseq	r0, ip, #0
    2e44:	000e0000 	andeq	r0, lr, r0
    2e48:	01f30073 	mvnseq	r0, r3, ror r0
    2e4c:	081a4f50 	ldmdaeq	sl, {r4, r6, r8, r9, sl, fp, lr}
    2e50:	31251aff 	strdcc	r1, [r5, -pc]!
    2e54:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2e58:	00000000 	andeq	r0, r0, r0
    2e5c:	02e20000 	rsceq	r0, r2, #0
    2e60:	02fe0000 	rscseq	r0, lr, #0
    2e64:	00020000 	andeq	r0, r2, r0
    2e68:	02fe9f30 	rscseq	r9, lr, #48, 30	; 0xc0
    2e6c:	03000000 	movweq	r0, #0
    2e70:	00070000 	andeq	r0, r7, r0
    2e74:	24480070 	strbcs	r0, [r8], #-112	; 0x70
    2e78:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    2e7c:	00000000 	andeq	r0, r0, r0
    2e80:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2e84:	fa000002 	blx	2e94 <__Stack_Size+0x2a94>
    2e88:	01000002 	tsteq	r0, r2
    2e8c:	00005000 	andeq	r5, r0, r0
    2e90:	00000000 	andeq	r0, r0, r0
    2e94:	031c0000 	tsteq	ip, #0
    2e98:	03260000 			; <UNDEFINED> instruction: 0x03260000
    2e9c:	00010000 	andeq	r0, r1, r0
    2ea0:	00032650 	andeq	r2, r3, r0, asr r6
    2ea4:	00033000 	andeq	r3, r3, r0
    2ea8:	f3000400 	vshl.u8	d0, d0, d0
    2eac:	009f5001 	addseq	r5, pc, r1
    2eb0:	00000000 	andeq	r0, r0, r0
    2eb4:	1c000000 	stcne	0, cr0, [r0], {-0}
    2eb8:	20000003 	andcs	r0, r0, r3
    2ebc:	02000003 	andeq	r0, r0, #3
    2ec0:	209f3000 	addscs	r3, pc, r0
    2ec4:	26000003 	strcs	r0, [r0], -r3
    2ec8:	0b000003 	bleq	2edc <__Stack_Size+0x2adc>
    2ecc:	08007000 	stmdaeq	r0, {ip, sp, lr}
    2ed0:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    2ed4:	9f2e301a 	svcls	0x002e301a
    2ed8:	00000326 	andeq	r0, r0, r6, lsr #6
    2edc:	00000330 	andeq	r0, r0, r0, lsr r3
    2ee0:	01f3000c 	mvnseq	r0, ip
    2ee4:	1aff0850 	bne	fffc502c <SCS_BASE+0x1ffb702c>
    2ee8:	301a0073 	andscc	r0, sl, r3, ror r0
    2eec:	00009f2e 	andeq	r9, r0, lr, lsr #30
    2ef0:	00000000 	andeq	r0, r0, r0
    2ef4:	00240000 	eoreq	r0, r4, r0
    2ef8:	00340000 	eorseq	r0, r4, r0
    2efc:	00010000 	andeq	r0, r1, r0
    2f00:	00003450 	andeq	r3, r0, r0, asr r4
    2f04:	00003c00 	andeq	r3, r0, r0, lsl #24
    2f08:	70000300 	andvc	r0, r0, r0, lsl #6
    2f0c:	003c9f7e 	eorseq	r9, ip, lr, ror pc
    2f10:	00400000 	subeq	r0, r0, r0
    2f14:	00040000 	andeq	r0, r4, r0
    2f18:	9f5001f3 	svcls	0x005001f3
    2f1c:	00000040 	andeq	r0, r0, r0, asr #32
    2f20:	0000004c 	andeq	r0, r0, ip, asr #32
    2f24:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    2f28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f2c:	00000000 	andeq	r0, r0, r0
    2f30:	00007000 	andeq	r7, r0, r0
    2f34:	00008000 	andeq	r8, r0, r0
    2f38:	50000100 	andpl	r0, r0, r0, lsl #2
    2f3c:	00000080 	andeq	r0, r0, r0, lsl #1
    2f40:	0000008c 	andeq	r0, r0, ip, lsl #1
    2f44:	01f30004 	mvnseq	r0, r4
    2f48:	00009f50 	andeq	r9, r0, r0, asr pc
    2f4c:	00000000 	andeq	r0, r0, r0
    2f50:	00700000 	rsbseq	r0, r0, r0
    2f54:	007a0000 	rsbseq	r0, sl, r0
    2f58:	00020000 	andeq	r0, r2, r0
    2f5c:	007a9f30 	rsbseq	r9, sl, r0, lsr pc
    2f60:	008c0000 	addeq	r0, ip, r0
    2f64:	00010000 	andeq	r0, r1, r0
    2f68:	00000053 	andeq	r0, r0, r3, asr r0
    2f6c:	00000000 	andeq	r0, r0, r0
    2f70:	00007000 	andeq	r7, r0, r0
    2f74:	00008000 	andeq	r8, r0, r0
    2f78:	70000800 	andvc	r0, r0, r0, lsl #16
    2f7c:	08253300 	stmdaeq	r5!, {r8, r9, ip, sp}
    2f80:	809f1aff 			; <UNDEFINED> instruction: 0x809f1aff
    2f84:	8c000000 	stchi	0, cr0, [r0], {-0}
    2f88:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2f8c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2f90:	ff082533 			; <UNDEFINED> instruction: 0xff082533
    2f94:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2f98:	00000000 	andeq	r0, r0, r0
    2f9c:	00700000 	rsbseq	r0, r0, r0
    2fa0:	007c0000 	rsbseq	r0, ip, r0
    2fa4:	00020000 	andeq	r0, r2, r0
    2fa8:	007c9f30 	rsbseq	r9, ip, r0, lsr pc
    2fac:	00800000 	addeq	r0, r0, r0
    2fb0:	000b0000 	andeq	r0, fp, r0
    2fb4:	00700073 	rsbseq	r0, r0, r3, ror r0
    2fb8:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    2fbc:	809f1a31 	addshi	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
    2fc0:	8c000000 	stchi	0, cr0, [r0], {-0}
    2fc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    2fc8:	f3007300 	vcgt.u8	d7, d0, d0
    2fcc:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    2fd0:	1a31251a 	bne	c4c440 <__Stack_Size+0xc4c040>
    2fd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2fe0:	00002c00 	andeq	r2, r0, r0, lsl #24
    2fe4:	51000100 	mrspl	r0, (UNDEF: 16)
    2fe8:	0000002c 	andeq	r0, r0, ip, lsr #32
    2fec:	00000032 	andeq	r0, r0, r2, lsr r0
    2ff0:	01f30004 	mvnseq	r0, r4
    2ff4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3000:	001c0000 	andseq	r0, ip, r0
    3004:	00010000 	andeq	r0, r1, r0
    3008:	00001c52 	andeq	r1, r0, r2, asr ip
    300c:	00003200 	andeq	r3, r0, r0, lsl #4
    3010:	f3000400 	vshl.u8	d0, d0, d0
    3014:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    3020:	24000000 	strcs	r0, [r0], #-0
    3024:	01000000 	mrseq	r0, (UNDEF: 0)
    3028:	00245300 	eoreq	r5, r4, r0, lsl #6
    302c:	00320000 	eorseq	r0, r2, r0
    3030:	00040000 	andeq	r0, r4, r0
    3034:	9f5301f3 	svcls	0x005301f3
	...
    3044:	00000014 	andeq	r0, r0, r4, lsl r0
    3048:	9f300002 	svcls	0x00300002
    304c:	00000014 	andeq	r0, r0, r4, lsl r0
    3050:	00000016 	andeq	r0, r0, r6, lsl r0
    3054:	16540001 	ldrbne	r0, [r4], -r1
    3058:	1a000000 	bne	3060 <__Stack_Size+0x2c60>
    305c:	07000000 	streq	r0, [r0, -r0]
    3060:	0b007400 	bleq	20068 <__Stack_Size+0x1fc68>
    3064:	9f1aff0c 	svcls	0x001aff0c
    3068:	0000002a 	andeq	r0, r0, sl, lsr #32
    306c:	00000032 	andeq	r0, r0, r2, lsr r0
    3070:	00520001 	subseq	r0, r2, r1
	...
    307c:	16000000 	strne	r0, [r0], -r0
    3080:	02000000 	andeq	r0, r0, #0
    3084:	169f3000 	ldrne	r3, [pc], r0
    3088:	20000000 	andcs	r0, r0, r0
    308c:	01000000 	mrseq	r0, (UNDEF: 0)
    3090:	002c5500 	eoreq	r5, ip, r0, lsl #10
    3094:	00320000 	eorseq	r0, r2, r0
    3098:	00010000 	andeq	r0, r1, r0
    309c:	00000051 	andeq	r0, r0, r1, asr r0
    30a0:	00000000 	andeq	r0, r0, r0
    30a4:	00003200 	andeq	r3, r0, r0, lsl #4
    30a8:	00006200 	andeq	r6, r0, r0, lsl #4
    30ac:	51000100 	mrspl	r0, (UNDEF: 16)
    30b0:	00000062 	andeq	r0, r0, r2, rrx
    30b4:	0000006c 	andeq	r0, r0, ip, rrx
    30b8:	01f30004 	mvnseq	r0, r4
    30bc:	00009f51 	andeq	r9, r0, r1, asr pc
    30c0:	00000000 	andeq	r0, r0, r0
    30c4:	00320000 	eorseq	r0, r2, r0
    30c8:	005a0000 	subseq	r0, sl, r0
    30cc:	00010000 	andeq	r0, r1, r0
    30d0:	00005a52 	andeq	r5, r0, r2, asr sl
    30d4:	00006c00 	andeq	r6, r0, r0, lsl #24
    30d8:	f3000400 	vshl.u8	d0, d0, d0
    30dc:	009f5201 	addseq	r5, pc, r1, lsl #4
    30e0:	00000000 	andeq	r0, r0, r0
    30e4:	32000000 	andcc	r0, r0, #0
    30e8:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    30ec:	01000000 	mrseq	r0, (UNDEF: 0)
    30f0:	005e5300 	subseq	r5, lr, r0, lsl #6
    30f4:	006c0000 	rsbeq	r0, ip, r0
    30f8:	00040000 	andeq	r0, r4, r0
    30fc:	9f5301f3 	svcls	0x005301f3
	...
    3108:	00000032 	andeq	r0, r0, r2, lsr r0
    310c:	00000042 	andeq	r0, r0, r2, asr #32
    3110:	9f300002 	svcls	0x00300002
    3114:	00000042 	andeq	r0, r0, r2, asr #32
    3118:	00000048 	andeq	r0, r0, r8, asr #32
    311c:	64550001 	ldrbvs	r0, [r5], #-1
    3120:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3124:	01000000 	mrseq	r0, (UNDEF: 0)
    3128:	00005300 	andeq	r5, r0, r0, lsl #6
    312c:	00000000 	andeq	r0, r0, r0
    3130:	00320000 	eorseq	r0, r2, r0
    3134:	004a0000 	subeq	r0, sl, r0
    3138:	00020000 	andeq	r0, r2, r0
    313c:	004a9f30 	subeq	r9, sl, r0, lsr pc
    3140:	00520000 	subseq	r0, r2, r0
    3144:	00010000 	andeq	r0, r1, r0
    3148:	00006654 	andeq	r6, r0, r4, asr r6
    314c:	00006c00 	andeq	r6, r0, r0, lsl #24
    3150:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    315c:	00000032 	andeq	r0, r0, r2, lsr r0
    3160:	0000004a 	andeq	r0, r0, sl, asr #32
    3164:	9f300002 	svcls	0x00300002
    3168:	0000004a 	andeq	r0, r0, sl, asr #32
    316c:	00000062 	andeq	r0, r0, r2, rrx
    3170:	00710005 	rsbseq	r0, r1, r5
    3174:	629f2434 	addsvs	r2, pc, #52, 8	; 0x34000000
    3178:	6c000000 	stcvs	0, cr0, [r0], {-0}
    317c:	06000000 	streq	r0, [r0], -r0
    3180:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3184:	009f2434 	addseq	r2, pc, r4, lsr r4	; <UNPREDICTABLE>
    3188:	00000000 	andeq	r0, r0, r0
    318c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3190:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3194:	01000000 	mrseq	r0, (UNDEF: 0)
    3198:	008e5000 	addeq	r5, lr, r0
    319c:	00980000 	addseq	r0, r8, r0
    31a0:	00040000 	andeq	r0, r4, r0
    31a4:	9f5001f3 	svcls	0x005001f3
    31a8:	00000098 	muleq	r0, r8, r0
    31ac:	000000be 	strheq	r0, [r0], -lr
    31b0:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
    31b4:	ca000000 	bgt	31bc <__Stack_Size+0x2dbc>
    31b8:	04000000 	streq	r0, [r0], #-0
    31bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    31c0:	0000ca9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    31c4:	0000cc00 	andeq	ip, r0, r0, lsl #24
    31c8:	50000100 	andpl	r0, r0, r0, lsl #2
    31cc:	000000cc 	andeq	r0, r0, ip, asr #1
    31d0:	000000de 	ldrdeq	r0, [r0], -lr
    31d4:	01f30004 	mvnseq	r0, r4
    31d8:	00de9f50 	sbcseq	r9, lr, r0, asr pc
    31dc:	00e00000 	rsceq	r0, r0, r0
    31e0:	00010000 	andeq	r0, r1, r0
    31e4:	0000e050 	andeq	lr, r0, r0, asr r0
    31e8:	0000ea00 	andeq	lr, r0, r0, lsl #20
    31ec:	f3000400 	vshl.u8	d0, d0, d0
    31f0:	ea9f5001 	b	fe7d71fc <SCS_BASE+0x1e7c91fc>
    31f4:	ec000000 	stc	0, cr0, [r0], {-0}
    31f8:	01000000 	mrseq	r0, (UNDEF: 0)
    31fc:	00ec5000 	rsceq	r5, ip, r0
    3200:	00f60000 	rscseq	r0, r6, r0
    3204:	00040000 	andeq	r0, r4, r0
    3208:	9f5001f3 	svcls	0x005001f3
    320c:	000000f6 	strdeq	r0, [r0], -r6
    3210:	000000f8 	strdeq	r0, [r0], -r8
    3214:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    3218:	02000000 	andeq	r0, r0, #0
    321c:	04000001 	streq	r0, [r0], #-1
    3220:	5001f300 	andpl	pc, r1, r0, lsl #6
    3224:	0001029f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    3228:	00010400 	andeq	r0, r1, r0, lsl #8
    322c:	50000100 	andpl	r0, r0, r0, lsl #2
    3230:	00000104 	andeq	r0, r0, r4, lsl #2
    3234:	0000010e 	andeq	r0, r0, lr, lsl #2
    3238:	01f30004 	mvnseq	r0, r4
    323c:	010e9f50 	tsteq	lr, r0, asr pc
    3240:	01120000 	tsteq	r2, r0
    3244:	00010000 	andeq	r0, r1, r0
    3248:	00011250 	andeq	r1, r1, r0, asr r2
    324c:	00012600 	andeq	r2, r1, r0, lsl #12
    3250:	f3000400 	vshl.u8	d0, d0, d0
    3254:	269f5001 	ldrcs	r5, [pc], r1
    3258:	34000001 	strcc	r0, [r0], #-1
    325c:	01000001 	tsteq	r0, r1
    3260:	00005000 	andeq	r5, r0, r0
    3264:	00000000 	andeq	r0, r0, r0
    3268:	01700000 	cmneq	r0, r0
    326c:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    3270:	00020000 	andeq	r0, r2, r0
    3274:	01aa9f30 			; <UNDEFINED> instruction: 0x01aa9f30
    3278:	01de0000 	bicseq	r0, lr, r0
    327c:	00010000 	andeq	r0, r1, r0
    3280:	00000056 	andeq	r0, r0, r6, asr r0
    3284:	00000000 	andeq	r0, r0, r0
    3288:	00017000 	andeq	r7, r1, r0
    328c:	00018000 	andeq	r8, r1, r0
    3290:	30000200 	andcc	r0, r0, r0, lsl #4
    3294:	0001809f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    3298:	00019600 	andeq	r9, r1, r0, lsl #12
    329c:	53000100 	movwpl	r0, #256	; 0x100
    32a0:	000001ac 	andeq	r0, r0, ip, lsr #3
    32a4:	000001e4 	andeq	r0, r0, r4, ror #3
    32a8:	00530001 	subseq	r0, r3, r1
    32ac:	00000000 	andeq	r0, r0, r0
    32b0:	70000000 	andvc	r0, r0, r0
    32b4:	aa000001 	bge	32c0 <__Stack_Size+0x2ec0>
    32b8:	02000001 	andeq	r0, r0, #1
    32bc:	aa9f3000 	bge	fe7cf2c4 <SCS_BASE+0x1e7c12c4>
    32c0:	cc000001 	stcgt	0, cr0, [r0], {1}
    32c4:	01000001 	tsteq	r0, r1
    32c8:	01cc5400 	biceq	r5, ip, r0, lsl #8
    32cc:	01d60000 	bicseq	r0, r6, r0
    32d0:	00080000 	andeq	r0, r8, r0
    32d4:	02940c71 	addseq	r0, r4, #28928	; 0x7100
    32d8:	9f210075 	svcls	0x00210075
    32dc:	000001d6 	ldrdeq	r0, [r0], -r6
    32e0:	000001de 	ldrdeq	r0, [r0], -lr
    32e4:	00540001 	subseq	r0, r4, r1
    32e8:	00000000 	andeq	r0, r0, r0
    32ec:	e4000000 	str	r0, [r0], #-0
    32f0:	1a000001 	bne	32fc <__Stack_Size+0x2efc>
    32f4:	02000002 	andeq	r0, r0, #2
    32f8:	1a9f3000 	bne	fe7cf300 <SCS_BASE+0x1e7c1300>
    32fc:	68000002 	stmdavs	r0, {r1}
    3300:	01000002 	tsteq	r0, r2
    3304:	00005400 	andeq	r5, r0, r0, lsl #8
    3308:	00000000 	andeq	r0, r0, r0
    330c:	01e40000 	mvneq	r0, r0
    3310:	01f40000 	mvnseq	r0, r0
    3314:	00020000 	andeq	r0, r2, r0
    3318:	01f49f30 	mvnseq	r9, r0, lsr pc
    331c:	020a0000 	andeq	r0, sl, #0
    3320:	00010000 	andeq	r0, r1, r0
    3324:	00021a53 	andeq	r1, r2, r3, asr sl
    3328:	00021e00 	andeq	r1, r2, r0, lsl #28
    332c:	53000100 	movwpl	r0, #256	; 0x100
    3330:	00000222 	andeq	r0, r0, r2, lsr #4
    3334:	00000236 	andeq	r0, r0, r6, lsr r2
    3338:	3a530001 	bcc	14c3344 <__Stack_Size+0x14c2f44>
    333c:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    3340:	01000002 	tsteq	r0, r2
    3344:	023e5300 	eorseq	r5, lr, #0, 6
    3348:	02440000 	subeq	r0, r4, #0
    334c:	00010000 	andeq	r0, r1, r0
    3350:	00024452 	andeq	r4, r2, r2, asr r4
    3354:	00024a00 	andeq	r4, r2, r0, lsl #20
    3358:	53000100 	movwpl	r0, #256	; 0x100
    335c:	00000254 	andeq	r0, r0, r4, asr r2
    3360:	0000026c 	andeq	r0, r0, ip, ror #4
    3364:	00530001 	subseq	r0, r3, r1
    3368:	00000000 	andeq	r0, r0, r0
    336c:	e4000000 	str	r0, [r0], #-0
    3370:	1a000001 	bne	337c <__Stack_Size+0x2f7c>
    3374:	02000002 	andeq	r0, r0, #2
    3378:	1a9f3000 	bne	fe7cf380 <SCS_BASE+0x1e7c1380>
    337c:	52000002 	andpl	r0, r0, #2
    3380:	01000002 	tsteq	r0, r2
    3384:	02545500 	subseq	r5, r4, #0, 10
    3388:	02600000 	rsbeq	r0, r0, #0
    338c:	00010000 	andeq	r0, r1, r0
    3390:	00026052 	andeq	r6, r2, r2, asr r0
    3394:	00026800 	andeq	r6, r2, r0, lsl #16
    3398:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    33a4:	0000026c 	andeq	r0, r0, ip, ror #4
    33a8:	0000029e 	muleq	r0, lr, r2
    33ac:	9f300002 	svcls	0x00300002
    33b0:	0000029e 	muleq	r0, lr, r2
    33b4:	000002ec 	andeq	r0, r0, ip, ror #5
    33b8:	00560001 	subseq	r0, r6, r1
    33bc:	00000000 	andeq	r0, r0, r0
    33c0:	6c000000 	stcvs	0, cr0, [r0], {-0}
    33c4:	7c000002 	stcvc	0, cr0, [r0], {2}
    33c8:	02000002 	andeq	r0, r0, #2
    33cc:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    33d0:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    33d4:	01000002 	tsteq	r0, r2
    33d8:	029e5300 	addseq	r5, lr, #0, 6
    33dc:	02a20000 	adceq	r0, r2, #0
    33e0:	00010000 	andeq	r0, r1, r0
    33e4:	0002a653 	andeq	sl, r2, r3, asr r6
    33e8:	0002ba00 	andeq	fp, r2, r0, lsl #20
    33ec:	53000100 	movwpl	r0, #256	; 0x100
    33f0:	000002c2 	andeq	r0, r0, r2, asr #5
    33f4:	000002c6 	andeq	r0, r0, r6, asr #5
    33f8:	c6530001 	ldrbgt	r0, [r3], -r1
    33fc:	d0000002 	andle	r0, r0, r2
    3400:	01000002 	tsteq	r0, r2
    3404:	02d05200 	sbcseq	r5, r0, #0, 4
    3408:	02dc0000 	sbcseq	r0, ip, #0
    340c:	00010000 	andeq	r0, r1, r0
    3410:	0002e253 	andeq	lr, r2, r3, asr r2
    3414:	0002f000 	andeq	pc, r2, r0
    3418:	53000100 	movwpl	r0, #256	; 0x100
	...
    3424:	0000026c 	andeq	r0, r0, ip, ror #4
    3428:	0000029e 	muleq	r0, lr, r2
    342c:	9f300002 	svcls	0x00300002
    3430:	0000029e 	muleq	r0, lr, r2
    3434:	000002ce 	andeq	r0, r0, lr, asr #5
    3438:	e2540001 	subs	r0, r4, #1
    343c:	e4000002 	str	r0, [r0], #-2
    3440:	01000002 	tsteq	r0, r2
    3444:	02e45500 	rsceq	r5, r4, #0, 10
    3448:	02ec0000 	rsceq	r0, ip, #0
    344c:	00010000 	andeq	r0, r1, r0
    3450:	00000054 	andeq	r0, r0, r4, asr r0
    3454:	00000000 	andeq	r0, r0, r0
    3458:	0002f000 	andeq	pc, r2, r0
    345c:	00034200 	andeq	r4, r3, r0, lsl #4
    3460:	51000100 	mrspl	r0, (UNDEF: 16)
    3464:	00000342 	andeq	r0, r0, r2, asr #6
    3468:	00000358 	andeq	r0, r0, r8, asr r3
    346c:	01f30004 	mvnseq	r0, r4
    3470:	00009f51 	andeq	r9, r0, r1, asr pc
    3474:	00000000 	andeq	r0, r0, r0
    3478:	02f00000 	rscseq	r0, r0, #0
    347c:	03240000 			; <UNDEFINED> instruction: 0x03240000
    3480:	00020000 	andeq	r0, r2, r0
    3484:	032c9f30 			; <UNDEFINED> instruction: 0x032c9f30
    3488:	03580000 	cmpeq	r8, #0
    348c:	00010000 	andeq	r0, r1, r0
    3490:	00000052 	andeq	r0, r0, r2, asr r0
    3494:	00000000 	andeq	r0, r0, r0
    3498:	0002f000 	andeq	pc, r2, r0
    349c:	00030000 	andeq	r0, r3, r0
    34a0:	30000200 	andcc	r0, r0, r0, lsl #4
    34a4:	0003009f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    34a8:	00031200 	andeq	r1, r3, r0, lsl #4
    34ac:	53000100 	movwpl	r0, #256	; 0x100
    34b0:	00000334 	andeq	r0, r0, r4, lsr r3
    34b4:	00000358 	andeq	r0, r0, r8, asr r3
    34b8:	00530001 	subseq	r0, r3, r1
    34bc:	00000000 	andeq	r0, r0, r0
    34c0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    34c4:	24000002 	strcs	r0, [r0], #-2
    34c8:	02000003 	andeq	r0, r0, #3
    34cc:	249f3000 	ldrcs	r3, [pc], #0	; 34d4 <__Stack_Size+0x30d4>
    34d0:	4a000003 	bmi	34e4 <__Stack_Size+0x30e4>
    34d4:	01000003 	tsteq	r0, r3
    34d8:	034c5400 	movteq	r5, #50176	; 0xc400
    34dc:	03540000 	cmpeq	r4, #0
    34e0:	00010000 	andeq	r0, r1, r0
    34e4:	00000054 	andeq	r0, r0, r4, asr r0
    34e8:	00000000 	andeq	r0, r0, r0
    34ec:	0003f600 	andeq	pc, r3, r0, lsl #12
    34f0:	0003fe00 	andeq	pc, r3, r0, lsl #28
    34f4:	51000100 	mrspl	r0, (UNDEF: 16)
    34f8:	000003fe 	strdeq	r0, [r0], -lr
    34fc:	00000400 	andeq	r0, r0, r0, lsl #8
    3500:	01f30004 	mvnseq	r0, r4
    3504:	04009f51 	streq	r9, [r0], #-3921	; 0xf51
    3508:	04040000 	streq	r0, [r4], #-0
    350c:	00010000 	andeq	r0, r1, r0
    3510:	00040451 	andeq	r0, r4, r1, asr r4
    3514:	00040800 	andeq	r0, r4, r0, lsl #16
    3518:	f3000400 	vshl.u8	d0, d0, d0
    351c:	009f5101 	addseq	r5, pc, r1, lsl #2
    3520:	00000000 	andeq	r0, r0, r0
    3524:	0c000000 	stceq	0, cr0, [r0], {-0}
    3528:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    352c:	01000004 	tsteq	r0, r4
    3530:	040e5200 	streq	r5, [lr], #-512	; 0x200
    3534:	04140000 	ldreq	r0, [r4], #-0
    3538:	00040000 	andeq	r0, r4, r0
    353c:	9f5201f3 	svcls	0x005201f3
	...
    3548:	00000414 	andeq	r0, r0, r4, lsl r4
    354c:	0000041c 	andeq	r0, r0, ip, lsl r4
    3550:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    3554:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    3558:	04000004 	streq	r0, [r0], #-4
    355c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3560:	00041e9f 	muleq	r4, pc, lr	; <UNPREDICTABLE>
    3564:	00042200 	andeq	r2, r4, r0, lsl #4
    3568:	51000100 	mrspl	r0, (UNDEF: 16)
    356c:	00000422 	andeq	r0, r0, r2, lsr #8
    3570:	00000426 	andeq	r0, r0, r6, lsr #8
    3574:	01f30004 	mvnseq	r0, r4
    3578:	00009f51 	andeq	r9, r0, r1, asr pc
    357c:	00000000 	andeq	r0, r0, r0
    3580:	04340000 	ldrteq	r0, [r4], #-0
    3584:	04400000 	strbeq	r0, [r0], #-0
    3588:	00010000 	andeq	r0, r1, r0
    358c:	00044051 	andeq	r4, r4, r1, asr r0
    3590:	00044e00 	andeq	r4, r4, r0, lsl #28
    3594:	f3000400 	vshl.u8	d0, d0, d0
    3598:	009f5101 	addseq	r5, pc, r1, lsl #2
    359c:	00000000 	andeq	r0, r0, r0
    35a0:	34000000 	strcc	r0, [r0], #-0
    35a4:	36000004 	strcc	r0, [r0], -r4
    35a8:	02000004 	andeq	r0, r0, #4
    35ac:	369f3000 	ldrcc	r3, [pc], r0
    35b0:	3a000004 	bcc	35c8 <__Stack_Size+0x31c8>
    35b4:	01000004 	tsteq	r0, r4
    35b8:	043e5300 	ldrteq	r5, [lr], #-768	; 0x300
    35bc:	04400000 	strbeq	r0, [r0], #-0
    35c0:	00010000 	andeq	r0, r1, r0
    35c4:	00044053 	andeq	r4, r4, r3, asr r0
    35c8:	00044e00 	andeq	r4, r4, r0, lsl #28
    35cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    35d8:	0000044e 	andeq	r0, r0, lr, asr #8
    35dc:	00000461 	andeq	r0, r0, r1, ror #8
    35e0:	61500001 	cmpvs	r0, r1
    35e4:	64000004 	strvs	r0, [r0], #-4
    35e8:	01000004 	tsteq	r0, r4
    35ec:	04645400 	strbteq	r5, [r4], #-1024	; 0x400
    35f0:	04670000 	strbteq	r0, [r7], #-0
    35f4:	00010000 	andeq	r0, r1, r0
    35f8:	00046750 	andeq	r6, r4, r0, asr r7
    35fc:	00048200 	andeq	r8, r4, r0, lsl #4
    3600:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    360c:	0000044e 	andeq	r0, r0, lr, asr #8
    3610:	00000456 	andeq	r0, r0, r6, asr r4
    3614:	56510001 	ldrbpl	r0, [r1], -r1
    3618:	82000004 	andhi	r0, r0, #4
    361c:	04000004 	streq	r0, [r0], #-4
    3620:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3624:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3628:	00000000 	andeq	r0, r0, r0
    362c:	00044e00 	andeq	r4, r4, r0, lsl #28
    3630:	00045c00 	andeq	r5, r4, r0, lsl #24
    3634:	52000100 	andpl	r0, r0, #0, 2
    3638:	0000045c 	andeq	r0, r0, ip, asr r4
    363c:	00000482 	andeq	r0, r0, r2, lsl #9
    3640:	01f30004 	mvnseq	r0, r4
    3644:	00009f52 	andeq	r9, r0, r2, asr pc
    3648:	00000000 	andeq	r0, r0, r0
    364c:	044e0000 	strbeq	r0, [lr], #-0
    3650:	04610000 	strbteq	r0, [r1], #-0
    3654:	00010000 	andeq	r0, r1, r0
    3658:	00046153 	andeq	r6, r4, r3, asr r1
    365c:	00046400 	andeq	r6, r4, r0, lsl #8
    3660:	f3000400 	vshl.u8	d0, d0, d0
    3664:	649f5301 	ldrvs	r5, [pc], #769	; 366c <__Stack_Size+0x326c>
    3668:	67000004 	strvs	r0, [r0, -r4]
    366c:	01000004 	tsteq	r0, r4
    3670:	04675300 	strbteq	r5, [r7], #-768	; 0x300
    3674:	04820000 	streq	r0, [r2], #0
    3678:	00040000 	andeq	r0, r4, r0
    367c:	9f5301f3 	svcls	0x005301f3
	...
    3688:	00000468 	andeq	r0, r0, r8, ror #8
    368c:	0000046a 	andeq	r0, r0, sl, ror #8
    3690:	9f300002 	svcls	0x00300002
    3694:	0000046a 	andeq	r0, r0, sl, ror #8
    3698:	0000046e 	andeq	r0, r0, lr, ror #8
    369c:	72510001 	subsvc	r0, r1, #1
    36a0:	82000004 	andhi	r0, r0, #4
    36a4:	01000004 	tsteq	r0, r4
    36a8:	00005100 	andeq	r5, r0, r0, lsl #2
    36ac:	00000000 	andeq	r0, r0, r0
    36b0:	04820000 	streq	r0, [r2], #0
    36b4:	04920000 	ldreq	r0, [r2], #0
    36b8:	00010000 	andeq	r0, r1, r0
    36bc:	00049251 	andeq	r9, r4, r1, asr r2
    36c0:	00049600 	andeq	r9, r4, r0, lsl #12
    36c4:	f3000400 	vshl.u8	d0, d0, d0
    36c8:	009f5101 	addseq	r5, pc, r1, lsl #2
    36cc:	00000000 	andeq	r0, r0, r0
    36d0:	82000000 	andhi	r0, r0, #0
    36d4:	8a000004 	bhi	36ec <__Stack_Size+0x32ec>
    36d8:	01000004 	tsteq	r0, r4
    36dc:	048a5300 	streq	r5, [sl], #768	; 0x300
    36e0:	04960000 	ldreq	r0, [r6], #0
    36e4:	00040000 	andeq	r0, r4, r0
    36e8:	9f5301f3 	svcls	0x005301f3
	...
    36f4:	00000482 	andeq	r0, r0, r2, lsl #9
    36f8:	00000486 	andeq	r0, r0, r6, lsl #9
    36fc:	9f300002 	svcls	0x00300002
    3700:	00000486 	andeq	r0, r0, r6, lsl #9
    3704:	0000048c 	andeq	r0, r0, ip, lsl #9
    3708:	00740006 	rsbseq	r0, r4, r6
    370c:	9f1aff08 	svcls	0x001aff08
    3710:	00000492 	muleq	r0, r2, r4
    3714:	00000496 	muleq	r0, r6, r4
    3718:	00510001 	subseq	r0, r1, r1
    371c:	00000000 	andeq	r0, r0, r0
    3720:	96000000 	strls	r0, [r0], -r0
    3724:	9d000004 	stcls	0, cr0, [r0, #-16]
    3728:	01000004 	tsteq	r0, r4
    372c:	049d5000 	ldreq	r5, [sp], #0
    3730:	04b00000 	ldrteq	r0, [r0], #0
    3734:	00010000 	andeq	r0, r1, r0
    3738:	00000054 	andeq	r0, r0, r4, asr r0
    373c:	00000000 	andeq	r0, r0, r0
    3740:	00049600 	andeq	r9, r4, r0, lsl #12
    3744:	00049d00 	andeq	r9, r4, r0, lsl #26
    3748:	51000100 	mrspl	r0, (UNDEF: 16)
    374c:	0000049d 	muleq	r0, sp, r4
    3750:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3754:	01f30004 	mvnseq	r0, r4
    3758:	00009f51 	andeq	r9, r0, r1, asr pc
    375c:	00000000 	andeq	r0, r0, r0
    3760:	04960000 	ldreq	r0, [r6], #0
    3764:	049d0000 	ldreq	r0, [sp], #0
    3768:	00010000 	andeq	r0, r1, r0
    376c:	00049d52 	andeq	r9, r4, r2, asr sp
    3770:	0004b000 	andeq	fp, r4, r0
    3774:	f3000400 	vshl.u8	d0, d0, d0
    3778:	009f5201 	addseq	r5, pc, r1, lsl #4
    377c:	00000000 	andeq	r0, r0, r0
    3780:	96000000 	strls	r0, [r0], -r0
    3784:	9d000004 	stcls	0, cr0, [r0, #-16]
    3788:	01000004 	tsteq	r0, r4
    378c:	049d5300 	ldreq	r5, [sp], #768	; 0x300
    3790:	04b00000 	ldrteq	r0, [r0], #0
    3794:	00040000 	andeq	r0, r4, r0
    3798:	9f5301f3 	svcls	0x005301f3
	...
    37a4:	00000496 	muleq	r0, r6, r4
    37a8:	000004a0 	andeq	r0, r0, r0, lsr #9
    37ac:	9f300002 	svcls	0x00300002
    37b0:	000004a0 	andeq	r0, r0, r0, lsr #9
    37b4:	000004a4 	andeq	r0, r0, r4, lsr #9
    37b8:	00730005 	rsbseq	r0, r3, r5
    37bc:	a89f2137 	ldmge	pc, {r0, r1, r2, r4, r5, r8, sp}	; <UNPREDICTABLE>
    37c0:	ac000004 	stcge	0, cr0, [r0], {4}
    37c4:	05000004 	streq	r0, [r0, #-4]
    37c8:	37007300 	strcc	r7, [r0, -r0, lsl #6]
    37cc:	04ac9f21 	strteq	r9, [ip], #3873	; 0xf21
    37d0:	04b00000 	ldrteq	r0, [r0], #0
    37d4:	00010000 	andeq	r0, r1, r0
    37d8:	00000053 	andeq	r0, r0, r3, asr r0
    37dc:	00000000 	andeq	r0, r0, r0
    37e0:	0004b000 	andeq	fp, r4, r0
    37e4:	0004b700 	andeq	fp, r4, r0, lsl #14
    37e8:	50000100 	andpl	r0, r0, r0, lsl #2
    37ec:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    37f0:	000004c4 	andeq	r0, r0, r4, asr #9
    37f4:	00540001 	subseq	r0, r4, r1
    37f8:	00000000 	andeq	r0, r0, r0
    37fc:	b0000000 	andlt	r0, r0, r0
    3800:	b7000004 	strlt	r0, [r0, -r4]
    3804:	01000004 	tsteq	r0, r4
    3808:	04b75100 	ldrteq	r5, [r7], #256	; 0x100
    380c:	04c40000 	strbeq	r0, [r4], #0
    3810:	00040000 	andeq	r0, r4, r0
    3814:	9f5101f3 	svcls	0x005101f3
	...
    3820:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3824:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3828:	b7520001 	ldrblt	r0, [r2, -r1]
    382c:	c4000004 	strgt	r0, [r0], #-4
    3830:	04000004 	streq	r0, [r0], #-4
    3834:	5201f300 	andpl	pc, r1, #0, 6
    3838:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    383c:	00000000 	andeq	r0, r0, r0
    3840:	0004b000 	andeq	fp, r4, r0
    3844:	0004b700 	andeq	fp, r4, r0, lsl #14
    3848:	53000100 	movwpl	r0, #256	; 0x100
    384c:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3850:	000004c4 	andeq	r0, r0, r4, asr #9
    3854:	01f30004 	mvnseq	r0, r4
    3858:	00009f53 	andeq	r9, r0, r3, asr pc
    385c:	00000000 	andeq	r0, r0, r0
    3860:	04ca0000 	strbeq	r0, [sl], #0
    3864:	04d60000 	ldrbeq	r0, [r6], #0
    3868:	00010000 	andeq	r0, r1, r0
    386c:	0004d651 	andeq	sp, r4, r1, asr r6
    3870:	0004da00 	andeq	sp, r4, r0, lsl #20
    3874:	f3000400 	vshl.u8	d0, d0, d0
    3878:	009f5101 	addseq	r5, pc, r1, lsl #2
    387c:	00000000 	andeq	r0, r0, r0
    3880:	ca000000 	bgt	3888 <__Stack_Size+0x3488>
    3884:	cc000004 	stcgt	0, cr0, [r0], {4}
    3888:	02000004 	andeq	r0, r0, #4
    388c:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    3890:	d0000004 	andle	r0, r0, r4
    3894:	01000004 	tsteq	r0, r4
    3898:	04d45300 	ldrbeq	r5, [r4], #768	; 0x300
    389c:	04d60000 	ldrbeq	r0, [r6], #0
    38a0:	00010000 	andeq	r0, r1, r0
    38a4:	0004d653 	andeq	sp, r4, r3, asr r6
    38a8:	0004da00 	andeq	sp, r4, r0, lsl #20
    38ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    38b8:	000004da 	ldrdeq	r0, [r0], -sl
    38bc:	000004e6 	andeq	r0, r0, r6, ror #9
    38c0:	e6510001 	ldrb	r0, [r1], -r1
    38c4:	ea000004 	b	38dc <__Stack_Size+0x34dc>
    38c8:	04000004 	streq	r0, [r0], #-4
    38cc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    38d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    38d4:	00000000 	andeq	r0, r0, r0
    38d8:	0004da00 	andeq	sp, r4, r0, lsl #20
    38dc:	0004dc00 	andeq	sp, r4, r0, lsl #24
    38e0:	30000200 	andcc	r0, r0, r0, lsl #4
    38e4:	0004dc9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    38e8:	0004e000 	andeq	lr, r4, r0
    38ec:	53000100 	movwpl	r0, #256	; 0x100
    38f0:	000004e4 	andeq	r0, r0, r4, ror #9
    38f4:	000004e6 	andeq	r0, r0, r6, ror #9
    38f8:	e6530001 	ldrb	r0, [r3], -r1
    38fc:	ea000004 	b	3914 <__Stack_Size+0x3514>
    3900:	01000004 	tsteq	r0, r4
    3904:	00005100 	andeq	r5, r0, r0, lsl #2
    3908:	00000000 	andeq	r0, r0, r0
    390c:	04ea0000 	strbteq	r0, [sl], #0
    3910:	05180000 	ldreq	r0, [r8, #-0]
    3914:	00010000 	andeq	r0, r1, r0
    3918:	00051851 	andeq	r1, r5, r1, asr r8
    391c:	00052600 	andeq	r2, r5, r0, lsl #12
    3920:	f3000400 	vshl.u8	d0, d0, d0
    3924:	009f5101 	addseq	r5, pc, r1, lsl #2
    3928:	00000000 	andeq	r0, r0, r0
    392c:	ea000000 	b	3934 <__Stack_Size+0x3534>
    3930:	08000004 	stmdaeq	r0, {r2}
    3934:	01000005 	tsteq	r0, r5
    3938:	05085200 	streq	r5, [r8, #-512]	; 0x200
    393c:	05260000 	streq	r0, [r6, #-0]!
    3940:	00040000 	andeq	r0, r4, r0
    3944:	9f5201f3 	svcls	0x005201f3
	...
    3950:	000004ea 	andeq	r0, r0, sl, ror #9
    3954:	00000516 	andeq	r0, r0, r6, lsl r5
    3958:	16530001 	ldrbne	r0, [r3], -r1
    395c:	26000005 	strcs	r0, [r0], -r5
    3960:	04000005 	streq	r0, [r0], #-5
    3964:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3968:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    396c:	00000000 	andeq	r0, r0, r0
    3970:	0004ea00 	andeq	lr, r4, r0, lsl #20
    3974:	0004ee00 	andeq	lr, r4, r0, lsl #28
    3978:	30000200 	andcc	r0, r0, r0, lsl #4
    397c:	0004ee9f 	muleq	r4, pc, lr	; <UNPREDICTABLE>
    3980:	00050400 	andeq	r0, r5, r0, lsl #8
    3984:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3988:	0000050e 	andeq	r0, r0, lr, lsl #10
    398c:	00000518 	andeq	r0, r0, r8, lsl r5
    3990:	18560001 	ldmdane	r6, {r0}^
    3994:	26000005 	strcs	r0, [r0], -r5
    3998:	01000005 	tsteq	r0, r5
    399c:	00005100 	andeq	r5, r0, r0, lsl #2
    39a0:	00000000 	andeq	r0, r0, r0
    39a4:	04ea0000 	strbteq	r0, [sl], #0
    39a8:	04f00000 	ldrbteq	r0, [r0], #0
    39ac:	00020000 	andeq	r0, r2, r0
    39b0:	04f09f30 	ldrbteq	r9, [r0], #3888	; 0xf30
    39b4:	04f60000 	ldrbteq	r0, [r6], #0
    39b8:	00010000 	andeq	r0, r1, r0
    39bc:	00051c54 	andeq	r1, r5, r4, asr ip
    39c0:	00052600 	andeq	r2, r5, r0, lsl #12
    39c4:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    39d0:	000004ea 	andeq	r0, r0, sl, ror #9
    39d4:	000004f8 	strdeq	r0, [r0], -r8
    39d8:	9f300002 	svcls	0x00300002
    39dc:	000004f8 	strdeq	r0, [r0], -r8
    39e0:	00000500 	andeq	r0, r0, r0, lsl #10
    39e4:	1e550001 	cdpne	0, 5, cr0, cr5, cr1, {0}
    39e8:	26000005 	strcs	r0, [r0], -r5
    39ec:	01000005 	tsteq	r0, r5
    39f0:	00005500 	andeq	r5, r0, r0, lsl #10
    39f4:	00000000 	andeq	r0, r0, r0
    39f8:	05260000 	streq	r0, [r6, #-0]!
    39fc:	05320000 	ldreq	r0, [r2, #-0]!
    3a00:	00010000 	andeq	r0, r1, r0
    3a04:	00053251 	andeq	r3, r5, r1, asr r2
    3a08:	00053600 	andeq	r3, r5, r0, lsl #12
    3a0c:	f3000400 	vshl.u8	d0, d0, d0
    3a10:	009f5101 	addseq	r5, pc, r1, lsl #2
    3a14:	00000000 	andeq	r0, r0, r0
    3a18:	26000000 	strcs	r0, [r0], -r0
    3a1c:	28000005 	stmdacs	r0, {r0, r2}
    3a20:	02000005 	andeq	r0, r0, #5
    3a24:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    3a28:	2c000005 	stccs	0, cr0, [r0], {5}
    3a2c:	01000005 	tsteq	r0, r5
    3a30:	05305300 	ldreq	r5, [r0, #-768]!	; 0x300
    3a34:	05320000 	ldreq	r0, [r2, #-0]!
    3a38:	00010000 	andeq	r0, r1, r0
    3a3c:	00053253 	andeq	r3, r5, r3, asr r2
    3a40:	00053600 	andeq	r3, r5, r0, lsl #12
    3a44:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3a50:	00000536 	andeq	r0, r0, r6, lsr r5
    3a54:	00000544 	andeq	r0, r0, r4, asr #10
    3a58:	44510001 	ldrbmi	r0, [r1], #-1
    3a5c:	4a000005 	bmi	3a78 <__Stack_Size+0x3678>
    3a60:	04000005 	streq	r0, [r0], #-5
    3a64:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3a68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a6c:	00000000 	andeq	r0, r0, r0
    3a70:	00053600 	andeq	r3, r5, r0, lsl #12
    3a74:	00053800 	andeq	r3, r5, r0, lsl #16
    3a78:	30000200 	andcc	r0, r0, r0, lsl #4
    3a7c:	0005389f 	muleq	r5, pc, r8	; <UNPREDICTABLE>
    3a80:	00053c00 	andeq	r3, r5, r0, lsl #24
    3a84:	53000100 	movwpl	r0, #256	; 0x100
    3a88:	00000540 	andeq	r0, r0, r0, asr #10
    3a8c:	00000546 	andeq	r0, r0, r6, asr #10
    3a90:	46530001 	ldrbmi	r0, [r3], -r1
    3a94:	4a000005 	bmi	3ab0 <__Stack_Size+0x36b0>
    3a98:	01000005 	tsteq	r0, r5
    3a9c:	00005100 	andeq	r5, r0, r0, lsl #2
    3aa0:	00000000 	andeq	r0, r0, r0
    3aa4:	054a0000 	strbeq	r0, [sl, #-0]
    3aa8:	05560000 	ldrbeq	r0, [r6, #-0]
    3aac:	00010000 	andeq	r0, r1, r0
    3ab0:	00055651 	andeq	r5, r5, r1, asr r6
    3ab4:	00055a00 	andeq	r5, r5, r0, lsl #20
    3ab8:	f3000400 	vshl.u8	d0, d0, d0
    3abc:	009f5101 	addseq	r5, pc, r1, lsl #2
    3ac0:	00000000 	andeq	r0, r0, r0
    3ac4:	4a000000 	bmi	3acc <__Stack_Size+0x36cc>
    3ac8:	4c000005 	stcmi	0, cr0, [r0], {5}
    3acc:	02000005 	andeq	r0, r0, #5
    3ad0:	4c9f3000 	ldcmi	0, cr3, [pc], {0}
    3ad4:	50000005 	andpl	r0, r0, r5
    3ad8:	01000005 	tsteq	r0, r5
    3adc:	05545300 	ldrbeq	r5, [r4, #-768]	; 0x300
    3ae0:	05560000 	ldrbeq	r0, [r6, #-0]
    3ae4:	00010000 	andeq	r0, r1, r0
    3ae8:	00055653 	andeq	r5, r5, r3, asr r6
    3aec:	00055a00 	andeq	r5, r5, r0, lsl #20
    3af0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3afc:	0000055a 	andeq	r0, r0, sl, asr r5
    3b00:	00000568 	andeq	r0, r0, r8, ror #10
    3b04:	68510001 	ldmdavs	r1, {r0}^
    3b08:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    3b0c:	04000005 	streq	r0, [r0], #-5
    3b10:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3b14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b18:	00000000 	andeq	r0, r0, r0
    3b1c:	00055a00 	andeq	r5, r5, r0, lsl #20
    3b20:	00055c00 	andeq	r5, r5, r0, lsl #24
    3b24:	30000200 	andcc	r0, r0, r0, lsl #4
    3b28:	00055c9f 	muleq	r5, pc, ip	; <UNPREDICTABLE>
    3b2c:	00056000 	andeq	r6, r5, r0
    3b30:	53000100 	movwpl	r0, #256	; 0x100
    3b34:	00000564 	andeq	r0, r0, r4, ror #10
    3b38:	0000056a 	andeq	r0, r0, sl, ror #10
    3b3c:	6a530001 	bvs	14c3b48 <__Stack_Size+0x14c3748>
    3b40:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    3b44:	01000005 	tsteq	r0, r5
    3b48:	00005100 	andeq	r5, r0, r0, lsl #2
    3b4c:	00000000 	andeq	r0, r0, r0
    3b50:	05ce0000 	strbeq	r0, [lr]
    3b54:	05da0000 	ldrbeq	r0, [sl]
    3b58:	00010000 	andeq	r0, r1, r0
    3b5c:	0005da51 	andeq	sp, r5, r1, asr sl
    3b60:	0005de00 	andeq	sp, r5, r0, lsl #28
    3b64:	f3000400 	vshl.u8	d0, d0, d0
    3b68:	009f5101 	addseq	r5, pc, r1, lsl #2
    3b6c:	00000000 	andeq	r0, r0, r0
    3b70:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    3b74:	d0000005 	andle	r0, r0, r5
    3b78:	02000005 	andeq	r0, r0, #5
    3b7c:	d09f3000 	addsle	r3, pc, r0
    3b80:	d4000005 	strle	r0, [r0], #-5
    3b84:	01000005 	tsteq	r0, r5
    3b88:	05d85300 	ldrbeq	r5, [r8, #768]	; 0x300
    3b8c:	05da0000 	ldrbeq	r0, [sl]
    3b90:	00010000 	andeq	r0, r1, r0
    3b94:	0005da53 	andeq	sp, r5, r3, asr sl
    3b98:	0005de00 	andeq	sp, r5, r0, lsl #28
    3b9c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ba8:	000005de 	ldrdeq	r0, [r0], -lr
    3bac:	000005ec 	andeq	r0, r0, ip, ror #11
    3bb0:	ec510001 	mrrc	0, 0, r0, r1, cr1
    3bb4:	f2000005 	vhadd.s8	d0, d0, d5
    3bb8:	04000005 	streq	r0, [r0], #-5
    3bbc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3bc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3bc4:	00000000 	andeq	r0, r0, r0
    3bc8:	0005de00 	andeq	sp, r5, r0, lsl #28
    3bcc:	0005e000 	andeq	lr, r5, r0
    3bd0:	30000200 	andcc	r0, r0, r0, lsl #4
    3bd4:	0005e09f 	muleq	r5, pc, r0	; <UNPREDICTABLE>
    3bd8:	0005e400 	andeq	lr, r5, r0, lsl #8
    3bdc:	53000100 	movwpl	r0, #256	; 0x100
    3be0:	000005e8 	andeq	r0, r0, r8, ror #11
    3be4:	000005ee 	andeq	r0, r0, lr, ror #11
    3be8:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
    3bec:	f2000005 	vhadd.s8	d0, d0, d5
    3bf0:	01000005 	tsteq	r0, r5
    3bf4:	00005100 	andeq	r5, r0, r0, lsl #2
    3bf8:	00000000 	andeq	r0, r0, r0
    3bfc:	05f20000 	ldrbeq	r0, [r2, #0]!
    3c00:	05fe0000 	ldrbeq	r0, [lr, #0]!
    3c04:	00010000 	andeq	r0, r1, r0
    3c08:	0005fe51 	andeq	pc, r5, r1, asr lr	; <UNPREDICTABLE>
    3c0c:	00060200 	andeq	r0, r6, r0, lsl #4
    3c10:	f3000400 	vshl.u8	d0, d0, d0
    3c14:	009f5101 	addseq	r5, pc, r1, lsl #2
    3c18:	00000000 	andeq	r0, r0, r0
    3c1c:	f2000000 	vhadd.s8	d0, d0, d0
    3c20:	f4000005 	vst4.8	{d0-d3}, [r0], r5
    3c24:	02000005 	andeq	r0, r0, #5
    3c28:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    3c2c:	f8000005 			; <UNDEFINED> instruction: 0xf8000005
    3c30:	01000005 	tsteq	r0, r5
    3c34:	05fc5300 	ldrbeq	r5, [ip, #768]!	; 0x300
    3c38:	05fe0000 	ldrbeq	r0, [lr, #0]!
    3c3c:	00010000 	andeq	r0, r1, r0
    3c40:	0005fe53 	andeq	pc, r5, r3, asr lr	; <UNPREDICTABLE>
    3c44:	00060200 	andeq	r0, r6, r0, lsl #4
    3c48:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3c54:	00000602 	andeq	r0, r0, r2, lsl #12
    3c58:	00000610 	andeq	r0, r0, r0, lsl r6
    3c5c:	10510001 	subsne	r0, r1, r1
    3c60:	16000006 	strne	r0, [r0], -r6
    3c64:	04000006 	streq	r0, [r0], #-6
    3c68:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c70:	00000000 	andeq	r0, r0, r0
    3c74:	00060200 	andeq	r0, r6, r0, lsl #4
    3c78:	00060400 	andeq	r0, r6, r0, lsl #8
    3c7c:	30000200 	andcc	r0, r0, r0, lsl #4
    3c80:	0006049f 	muleq	r6, pc, r4	; <UNPREDICTABLE>
    3c84:	00060800 	andeq	r0, r6, r0, lsl #16
    3c88:	53000100 	movwpl	r0, #256	; 0x100
    3c8c:	0000060c 	andeq	r0, r0, ip, lsl #12
    3c90:	00000612 	andeq	r0, r0, r2, lsl r6
    3c94:	12530001 	subsne	r0, r3, #1
    3c98:	16000006 	strne	r0, [r0], -r6
    3c9c:	01000006 	tsteq	r0, r6
    3ca0:	00005100 	andeq	r5, r0, r0, lsl #2
    3ca4:	00000000 	andeq	r0, r0, r0
    3ca8:	06160000 	ldreq	r0, [r6], -r0
    3cac:	06220000 	strteq	r0, [r2], -r0
    3cb0:	00010000 	andeq	r0, r1, r0
    3cb4:	00062251 	andeq	r2, r6, r1, asr r2
    3cb8:	00062600 	andeq	r2, r6, r0, lsl #12
    3cbc:	f3000400 	vshl.u8	d0, d0, d0
    3cc0:	009f5101 	addseq	r5, pc, r1, lsl #2
    3cc4:	00000000 	andeq	r0, r0, r0
    3cc8:	16000000 	strne	r0, [r0], -r0
    3ccc:	18000006 	stmdane	r0, {r1, r2}
    3cd0:	02000006 	andeq	r0, r0, #6
    3cd4:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
    3cd8:	1c000006 	stcne	0, cr0, [r0], {6}
    3cdc:	01000006 	tsteq	r0, r6
    3ce0:	06205300 	strteq	r5, [r0], -r0, lsl #6
    3ce4:	06220000 	strteq	r0, [r2], -r0
    3ce8:	00010000 	andeq	r0, r1, r0
    3cec:	00062253 	andeq	r2, r6, r3, asr r2
    3cf0:	00062600 	andeq	r2, r6, r0, lsl #12
    3cf4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3d00:	00000626 	andeq	r0, r0, r6, lsr #12
    3d04:	00000634 	andeq	r0, r0, r4, lsr r6
    3d08:	34510001 	ldrbcc	r0, [r1], #-1
    3d0c:	3a000006 	bcc	3d2c <__Stack_Size+0x392c>
    3d10:	04000006 	streq	r0, [r0], #-6
    3d14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3d18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3d1c:	00000000 	andeq	r0, r0, r0
    3d20:	00062600 	andeq	r2, r6, r0, lsl #12
    3d24:	00062800 	andeq	r2, r6, r0, lsl #16
    3d28:	30000200 	andcc	r0, r0, r0, lsl #4
    3d2c:	0006289f 	muleq	r6, pc, r8	; <UNPREDICTABLE>
    3d30:	00062c00 	andeq	r2, r6, r0, lsl #24
    3d34:	53000100 	movwpl	r0, #256	; 0x100
    3d38:	00000630 	andeq	r0, r0, r0, lsr r6
    3d3c:	00000636 	andeq	r0, r0, r6, lsr r6
    3d40:	36530001 	ldrbcc	r0, [r3], -r1
    3d44:	3a000006 	bcc	3d64 <__Stack_Size+0x3964>
    3d48:	01000006 	tsteq	r0, r6
    3d4c:	00005100 	andeq	r5, r0, r0, lsl #2
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	063a0000 	ldrteq	r0, [sl], -r0
    3d58:	06460000 	strbeq	r0, [r6], -r0
    3d5c:	00010000 	andeq	r0, r1, r0
    3d60:	00064651 	andeq	r4, r6, r1, asr r6
    3d64:	00064a00 	andeq	r4, r6, r0, lsl #20
    3d68:	f3000400 	vshl.u8	d0, d0, d0
    3d6c:	009f5101 	addseq	r5, pc, r1, lsl #2
    3d70:	00000000 	andeq	r0, r0, r0
    3d74:	3a000000 	bcc	3d7c <__Stack_Size+0x397c>
    3d78:	3c000006 	stccc	0, cr0, [r0], {6}
    3d7c:	02000006 	andeq	r0, r0, #6
    3d80:	3c9f3000 	ldccc	0, cr3, [pc], {0}
    3d84:	40000006 	andmi	r0, r0, r6
    3d88:	01000006 	tsteq	r0, r6
    3d8c:	06445300 	strbeq	r5, [r4], -r0, lsl #6
    3d90:	06460000 	strbeq	r0, [r6], -r0
    3d94:	00010000 	andeq	r0, r1, r0
    3d98:	00064653 	andeq	r4, r6, r3, asr r6
    3d9c:	00064a00 	andeq	r4, r6, r0, lsl #20
    3da0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3dac:	0000064a 	andeq	r0, r0, sl, asr #12
    3db0:	00000658 	andeq	r0, r0, r8, asr r6
    3db4:	58510001 	ldmdapl	r1, {r0}^
    3db8:	5e000006 	cdppl	0, 0, cr0, cr0, cr6, {0}
    3dbc:	04000006 	streq	r0, [r0], #-6
    3dc0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3dc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3dc8:	00000000 	andeq	r0, r0, r0
    3dcc:	00064a00 	andeq	r4, r6, r0, lsl #20
    3dd0:	00064c00 	andeq	r4, r6, r0, lsl #24
    3dd4:	30000200 	andcc	r0, r0, r0, lsl #4
    3dd8:	00064c9f 	muleq	r6, pc, ip	; <UNPREDICTABLE>
    3ddc:	00065000 	andeq	r5, r6, r0
    3de0:	53000100 	movwpl	r0, #256	; 0x100
    3de4:	00000654 	andeq	r0, r0, r4, asr r6
    3de8:	0000065a 	andeq	r0, r0, sl, asr r6
    3dec:	5a530001 	bpl	14c3df8 <__Stack_Size+0x14c39f8>
    3df0:	5e000006 	cdppl	0, 0, cr0, cr0, cr6, {0}
    3df4:	01000006 	tsteq	r0, r6
    3df8:	00005100 	andeq	r5, r0, r0, lsl #2
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	065e0000 	ldrbeq	r0, [lr], -r0
    3e04:	066a0000 	strbteq	r0, [sl], -r0
    3e08:	00010000 	andeq	r0, r1, r0
    3e0c:	00066a51 	andeq	r6, r6, r1, asr sl
    3e10:	00066e00 	andeq	r6, r6, r0, lsl #28
    3e14:	f3000400 	vshl.u8	d0, d0, d0
    3e18:	009f5101 	addseq	r5, pc, r1, lsl #2
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    3e24:	60000006 	andvs	r0, r0, r6
    3e28:	02000006 	andeq	r0, r0, #6
    3e2c:	609f3000 	addsvs	r3, pc, r0
    3e30:	64000006 	strvs	r0, [r0], #-6
    3e34:	01000006 	tsteq	r0, r6
    3e38:	06685300 	strbteq	r5, [r8], -r0, lsl #6
    3e3c:	066a0000 	strbteq	r0, [sl], -r0
    3e40:	00010000 	andeq	r0, r1, r0
    3e44:	00066a53 	andeq	r6, r6, r3, asr sl
    3e48:	00066e00 	andeq	r6, r6, r0, lsl #28
    3e4c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3e58:	0000066e 	andeq	r0, r0, lr, ror #12
    3e5c:	00000678 	andeq	r0, r0, r8, ror r6
    3e60:	78510001 	ldmdavc	r1, {r0}^
    3e64:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
    3e68:	04000006 	streq	r0, [r0], #-6
    3e6c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3e70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e74:	00000000 	andeq	r0, r0, r0
    3e78:	00066e00 	andeq	r6, r6, r0, lsl #28
    3e7c:	00067000 	andeq	r7, r6, r0
    3e80:	30000200 	andcc	r0, r0, r0, lsl #4
    3e84:	0006709f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    3e88:	00067a00 	andeq	r7, r6, r0, lsl #20
    3e8c:	53000100 	movwpl	r0, #256	; 0x100
    3e90:	0000067a 	andeq	r0, r0, sl, ror r6
    3e94:	0000067e 	andeq	r0, r0, lr, ror r6
    3e98:	00510001 	subseq	r0, r1, r1
    3e9c:	00000000 	andeq	r0, r0, r0
    3ea0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    3ea4:	8a000006 	bhi	3ec4 <__Stack_Size+0x3ac4>
    3ea8:	01000006 	tsteq	r0, r6
    3eac:	068a5100 	streq	r5, [sl], r0, lsl #2
    3eb0:	068e0000 	streq	r0, [lr], r0
    3eb4:	00040000 	andeq	r0, r4, r0
    3eb8:	9f5101f3 	svcls	0x005101f3
	...
    3ec4:	0000067e 	andeq	r0, r0, lr, ror r6
    3ec8:	00000680 	andeq	r0, r0, r0, lsl #13
    3ecc:	9f300002 	svcls	0x00300002
    3ed0:	00000680 	andeq	r0, r0, r0, lsl #13
    3ed4:	00000684 	andeq	r0, r0, r4, lsl #13
    3ed8:	88530001 	ldmdahi	r3, {r0}^
    3edc:	8a000006 	bhi	3efc <__Stack_Size+0x3afc>
    3ee0:	01000006 	tsteq	r0, r6
    3ee4:	068a5300 	streq	r5, [sl], r0, lsl #6
    3ee8:	068e0000 	streq	r0, [lr], r0
    3eec:	00010000 	andeq	r0, r1, r0
    3ef0:	00000051 	andeq	r0, r0, r1, asr r0
    3ef4:	00000000 	andeq	r0, r0, r0
    3ef8:	00068e00 	andeq	r8, r6, r0, lsl #28
    3efc:	00069800 	andeq	r9, r6, r0, lsl #16
    3f00:	51000100 	mrspl	r0, (UNDEF: 16)
    3f04:	00000698 	muleq	r0, r8, r6
    3f08:	0000069e 	muleq	r0, lr, r6
    3f0c:	01f30004 	mvnseq	r0, r4
    3f10:	00009f51 	andeq	r9, r0, r1, asr pc
    3f14:	00000000 	andeq	r0, r0, r0
    3f18:	068e0000 	streq	r0, [lr], r0
    3f1c:	06900000 	ldreq	r0, [r0], r0
    3f20:	00020000 	andeq	r0, r2, r0
    3f24:	06909f30 			; <UNDEFINED> instruction: 0x06909f30
    3f28:	069a0000 	ldreq	r0, [sl], r0
    3f2c:	00010000 	andeq	r0, r1, r0
    3f30:	00069a53 	andeq	r9, r6, r3, asr sl
    3f34:	00069e00 	andeq	r9, r6, r0, lsl #28
    3f38:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3f44:	0000069e 	muleq	r0, lr, r6
    3f48:	000006aa 	andeq	r0, r0, sl, lsr #13
    3f4c:	aa510001 	bge	1443f58 <__Stack_Size+0x1443b58>
    3f50:	ae000006 	cdpge	0, 0, cr0, cr0, cr6, {0}
    3f54:	04000006 	streq	r0, [r0], #-6
    3f58:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3f5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f60:	00000000 	andeq	r0, r0, r0
    3f64:	00069e00 	andeq	r9, r6, r0, lsl #28
    3f68:	0006a000 	andeq	sl, r6, r0
    3f6c:	30000200 	andcc	r0, r0, r0, lsl #4
    3f70:	0006a09f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    3f74:	0006a400 	andeq	sl, r6, r0, lsl #8
    3f78:	53000100 	movwpl	r0, #256	; 0x100
    3f7c:	000006a8 	andeq	r0, r0, r8, lsr #13
    3f80:	000006aa 	andeq	r0, r0, sl, lsr #13
    3f84:	aa530001 	bge	14c3f90 <__Stack_Size+0x14c3b90>
    3f88:	ae000006 	cdpge	0, 0, cr0, cr0, cr6, {0}
    3f8c:	01000006 	tsteq	r0, r6
    3f90:	00005100 	andeq	r5, r0, r0, lsl #2
    3f94:	00000000 	andeq	r0, r0, r0
    3f98:	06ae0000 	strteq	r0, [lr], r0
    3f9c:	06ba0000 	ldrteq	r0, [sl], r0
    3fa0:	00010000 	andeq	r0, r1, r0
    3fa4:	0006ba51 	andeq	fp, r6, r1, asr sl
    3fa8:	0006be00 	andeq	fp, r6, r0, lsl #28
    3fac:	f3000400 	vshl.u8	d0, d0, d0
    3fb0:	009f5101 	addseq	r5, pc, r1, lsl #2
    3fb4:	00000000 	andeq	r0, r0, r0
    3fb8:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    3fbc:	b0000006 	andlt	r0, r0, r6
    3fc0:	02000006 	andeq	r0, r0, #6
    3fc4:	b09f3000 	addslt	r3, pc, r0
    3fc8:	b4000006 	strlt	r0, [r0], #-6
    3fcc:	01000006 	tsteq	r0, r6
    3fd0:	06b85300 	ldrteq	r5, [r8], r0, lsl #6
    3fd4:	06ba0000 	ldrteq	r0, [sl], r0
    3fd8:	00010000 	andeq	r0, r1, r0
    3fdc:	0006ba53 	andeq	fp, r6, r3, asr sl
    3fe0:	0006be00 	andeq	fp, r6, r0, lsl #28
    3fe4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ff0:	000006be 			; <UNDEFINED> instruction: 0x000006be
    3ff4:	000006cc 	andeq	r0, r0, ip, asr #13
    3ff8:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
    3ffc:	d2000006 	andle	r0, r0, #6
    4000:	04000006 	streq	r0, [r0], #-6
    4004:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4008:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    400c:	00000000 	andeq	r0, r0, r0
    4010:	0006be00 	andeq	fp, r6, r0, lsl #28
    4014:	0006c000 	andeq	ip, r6, r0
    4018:	30000200 	andcc	r0, r0, r0, lsl #4
    401c:	0006c09f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    4020:	0006c400 	andeq	ip, r6, r0, lsl #8
    4024:	53000100 	movwpl	r0, #256	; 0x100
    4028:	000006c8 	andeq	r0, r0, r8, asr #13
    402c:	000006ce 	andeq	r0, r0, lr, asr #13
    4030:	ce530001 	cdpgt	0, 5, cr0, cr3, cr1, {0}
    4034:	d2000006 	andle	r0, r0, #6
    4038:	01000006 	tsteq	r0, r6
    403c:	00005100 	andeq	r5, r0, r0, lsl #2
    4040:	00000000 	andeq	r0, r0, r0
    4044:	06d20000 	ldrbeq	r0, [r2], r0
    4048:	06e00000 	strbteq	r0, [r0], r0
    404c:	00010000 	andeq	r0, r1, r0
    4050:	0006e051 	andeq	lr, r6, r1, asr r0
    4054:	0006e600 	andeq	lr, r6, r0, lsl #12
    4058:	f3000400 	vshl.u8	d0, d0, d0
    405c:	009f5101 	addseq	r5, pc, r1, lsl #2
    4060:	00000000 	andeq	r0, r0, r0
    4064:	d2000000 	andle	r0, r0, #0
    4068:	d4000006 	strle	r0, [r0], #-6
    406c:	02000006 	andeq	r0, r0, #6
    4070:	d49f3000 	ldrle	r3, [pc], #0	; 4078 <__Stack_Size+0x3c78>
    4074:	d8000006 	stmdale	r0, {r1, r2}
    4078:	01000006 	tsteq	r0, r6
    407c:	06dc5300 	ldrbeq	r5, [ip], r0, lsl #6
    4080:	06e20000 	strbteq	r0, [r2], r0
    4084:	00010000 	andeq	r0, r1, r0
    4088:	0006e253 	andeq	lr, r6, r3, asr r2
    408c:	0006e600 	andeq	lr, r6, r0, lsl #12
    4090:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    409c:	000006e6 	andeq	r0, r0, r6, ror #13
    40a0:	000006f4 	strdeq	r0, [r0], -r4
    40a4:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
    40a8:	fa000006 	blx	40c8 <__Stack_Size+0x3cc8>
    40ac:	04000006 	streq	r0, [r0], #-6
    40b0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    40b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	0006e600 	andeq	lr, r6, r0, lsl #12
    40c0:	0006e800 	andeq	lr, r6, r0, lsl #16
    40c4:	30000200 	andcc	r0, r0, r0, lsl #4
    40c8:	0006e89f 	muleq	r6, pc, r8	; <UNPREDICTABLE>
    40cc:	0006ec00 	andeq	lr, r6, r0, lsl #24
    40d0:	53000100 	movwpl	r0, #256	; 0x100
    40d4:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    40d8:	000006f6 	strdeq	r0, [r0], -r6
    40dc:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
    40e0:	fa000006 	blx	4100 <__Stack_Size+0x3d00>
    40e4:	01000006 	tsteq	r0, r6
    40e8:	00005100 	andeq	r5, r0, r0, lsl #2
    40ec:	00000000 	andeq	r0, r0, r0
    40f0:	06fa0000 	ldrbteq	r0, [sl], r0
    40f4:	07080000 	streq	r0, [r8, -r0]
    40f8:	00010000 	andeq	r0, r1, r0
    40fc:	00070851 	andeq	r0, r7, r1, asr r8
    4100:	00070e00 	andeq	r0, r7, r0, lsl #28
    4104:	f3000400 	vshl.u8	d0, d0, d0
    4108:	009f5101 	addseq	r5, pc, r1, lsl #2
    410c:	00000000 	andeq	r0, r0, r0
    4110:	fa000000 	blx	4118 <__Stack_Size+0x3d18>
    4114:	fc000006 	stc2	0, cr0, [r0], {6}
    4118:	02000006 	andeq	r0, r0, #6
    411c:	fc9f3000 	ldc2	0, cr3, [pc], {0}
    4120:	00000006 	andeq	r0, r0, r6
    4124:	01000007 	tsteq	r0, r7
    4128:	07045300 	streq	r5, [r4, -r0, lsl #6]
    412c:	070a0000 	streq	r0, [sl, -r0]
    4130:	00010000 	andeq	r0, r1, r0
    4134:	00070a53 	andeq	r0, r7, r3, asr sl
    4138:	00070e00 	andeq	r0, r7, r0, lsl #28
    413c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4148:	0000070e 	andeq	r0, r0, lr, lsl #14
    414c:	0000071c 	andeq	r0, r0, ip, lsl r7
    4150:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    4154:	22000007 	andcs	r0, r0, #7
    4158:	04000007 	streq	r0, [r0], #-7
    415c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4160:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4164:	00000000 	andeq	r0, r0, r0
    4168:	00070e00 	andeq	r0, r7, r0, lsl #28
    416c:	00071000 	andeq	r1, r7, r0
    4170:	30000200 	andcc	r0, r0, r0, lsl #4
    4174:	0007109f 	muleq	r7, pc, r0	; <UNPREDICTABLE>
    4178:	00071400 	andeq	r1, r7, r0, lsl #8
    417c:	53000100 	movwpl	r0, #256	; 0x100
    4180:	00000718 	andeq	r0, r0, r8, lsl r7
    4184:	0000071e 	andeq	r0, r0, lr, lsl r7
    4188:	1e530001 	cdpne	0, 5, cr0, cr3, cr1, {0}
    418c:	22000007 	andcs	r0, r0, #7
    4190:	01000007 	tsteq	r0, r7
    4194:	00005100 	andeq	r5, r0, r0, lsl #2
    4198:	00000000 	andeq	r0, r0, r0
    419c:	07220000 	streq	r0, [r2, -r0]!
    41a0:	07360000 	ldreq	r0, [r6, -r0]!
    41a4:	00010000 	andeq	r0, r1, r0
    41a8:	00073652 	andeq	r3, r7, r2, asr r6
    41ac:	00073e00 	andeq	r3, r7, r0, lsl #28
    41b0:	f3000400 	vshl.u8	d0, d0, d0
    41b4:	009f5201 	addseq	r5, pc, r1, lsl #4
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    41c0:	52000007 	andpl	r0, r0, #7
    41c4:	01000007 	tsteq	r0, r7
    41c8:	07525200 	ldrbeq	r5, [r2, -r0, lsl #4]
    41cc:	075a0000 	ldrbeq	r0, [sl, -r0]
    41d0:	00040000 	andeq	r0, r4, r0
    41d4:	9f5201f3 	svcls	0x005201f3
	...
    41e0:	0000075a 	andeq	r0, r0, sl, asr r7
    41e4:	00000770 	andeq	r0, r0, r0, ror r7
    41e8:	70500001 	subsvc	r0, r0, r1
    41ec:	9e000007 	cdpls	0, 0, cr0, cr0, cr7, {0}
    41f0:	03000007 	movweq	r0, #7
    41f4:	9f687000 	svcls	0x00687000
	...
    4200:	0000075a 	andeq	r0, r0, sl, asr r7
    4204:	00000778 	andeq	r0, r0, r8, ror r7
    4208:	78510001 	ldmdavc	r1, {r0}^
    420c:	82000007 	andhi	r0, r0, #7
    4210:	04000007 	streq	r0, [r0], #-7
    4214:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4218:	0007829f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
    421c:	00078800 	andeq	r8, r7, r0, lsl #16
    4220:	51000100 	mrspl	r0, (UNDEF: 16)
    4224:	00000788 	andeq	r0, r0, r8, lsl #15
    4228:	0000079e 	muleq	r0, lr, r7
    422c:	01f30004 	mvnseq	r0, r4
    4230:	00009f51 	andeq	r9, r0, r1, asr pc
    4234:	00000000 	andeq	r0, r0, r0
    4238:	075a0000 	ldrbeq	r0, [sl, -r0]
    423c:	07900000 	ldreq	r0, [r0, r0]
    4240:	00010000 	andeq	r0, r1, r0
    4244:	00079052 	andeq	r9, r7, r2, asr r0
    4248:	00079e00 	andeq	r9, r7, r0, lsl #28
    424c:	f3000400 	vshl.u8	d0, d0, d0
    4250:	009f5201 	addseq	r5, pc, r1, lsl #4
    4254:	00000000 	andeq	r0, r0, r0
    4258:	e6000000 	str	r0, [r0], -r0
    425c:	f8000007 			; <UNDEFINED> instruction: 0xf8000007
    4260:	01000007 	tsteq	r0, r7
    4264:	07f85100 	ldrbeq	r5, [r8, r0, lsl #2]!
    4268:	07fc0000 	ldrbeq	r0, [ip, r0]!
    426c:	00040000 	andeq	r0, r4, r0
    4270:	9f5101f3 	svcls	0x005101f3
	...
    427c:	000007fc 	strdeq	r0, [r0], -ip
    4280:	0000080e 	andeq	r0, r0, lr, lsl #16
    4284:	0e510001 	cdpeq	0, 5, cr0, cr1, cr1, {0}
    4288:	12000008 	andne	r0, r0, #8
    428c:	04000008 	streq	r0, [r0], #-8
    4290:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4298:	00000000 	andeq	r0, r0, r0
    429c:	00081200 	andeq	r1, r8, r0, lsl #4
    42a0:	00082400 	andeq	r2, r8, r0, lsl #8
    42a4:	51000100 	mrspl	r0, (UNDEF: 16)
    42a8:	00000824 	andeq	r0, r0, r4, lsr #16
    42ac:	00000828 	andeq	r0, r0, r8, lsr #16
    42b0:	01f30004 	mvnseq	r0, r4
    42b4:	00009f51 	andeq	r9, r0, r1, asr pc
    42b8:	00000000 	andeq	r0, r0, r0
    42bc:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    42c0:	083a0000 	ldmdaeq	sl!, {}	; <UNPREDICTABLE>
    42c4:	00010000 	andeq	r0, r1, r0
    42c8:	00083a51 	andeq	r3, r8, r1, asr sl
    42cc:	00083e00 	andeq	r3, r8, r0, lsl #28
    42d0:	f3000400 	vshl.u8	d0, d0, d0
    42d4:	009f5101 	addseq	r5, pc, r1, lsl #2
    42d8:	00000000 	andeq	r0, r0, r0
    42dc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    42e0:	6a000008 	bvs	4308 <__Stack_Size+0x3f08>
    42e4:	01000008 	tsteq	r0, r8
    42e8:	086a5100 	stmdaeq	sl!, {r8, ip, lr}^
    42ec:	086e0000 	stmdaeq	lr!, {}^	; <UNPREDICTABLE>
    42f0:	00040000 	andeq	r0, r4, r0
    42f4:	9f5101f3 	svcls	0x005101f3
	...
    4300:	0000086e 	andeq	r0, r0, lr, ror #16
    4304:	00000882 	andeq	r0, r0, r2, lsl #17
    4308:	82510001 	subshi	r0, r1, #1
    430c:	88000008 	stmdahi	r0, {r3}
    4310:	04000008 	streq	r0, [r0], #-8
    4314:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4318:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    431c:	00000000 	andeq	r0, r0, r0
    4320:	00088800 	andeq	r8, r8, r0, lsl #16
    4324:	0008b100 	andeq	fp, r8, r0, lsl #2
    4328:	50000100 	andpl	r0, r0, r0, lsl #2
    432c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    4330:	000008ce 	andeq	r0, r0, lr, asr #17
    4334:	ce550001 	cdpgt	0, 5, cr0, cr5, cr1, {0}
    4338:	d1000008 	tstle	r0, r8
    433c:	01000008 	tsteq	r0, r8
    4340:	08d15000 	ldmeq	r1, {ip, lr}^
    4344:	08d20000 	ldmeq	r2, {}^	; <UNPREDICTABLE>
    4348:	00040000 	andeq	r0, r4, r0
    434c:	9f5001f3 	svcls	0x005001f3
    4350:	000008d2 	ldrdeq	r0, [r0], -r2
    4354:	000008d5 	ldrdeq	r0, [r0], -r5
    4358:	d5500001 	ldrble	r0, [r0, #-1]
    435c:	f2000008 	vhadd.s8	d0, d0, d8
    4360:	01000008 	tsteq	r0, r8
    4364:	08f25500 	ldmeq	r2!, {r8, sl, ip, lr}^
    4368:	08f50000 	ldmeq	r5!, {}^	; <UNPREDICTABLE>
    436c:	00010000 	andeq	r0, r1, r0
    4370:	0008f550 	andeq	pc, r8, r0, asr r5	; <UNPREDICTABLE>
    4374:	0008f600 	andeq	pc, r8, r0, lsl #12
    4378:	f3000400 	vshl.u8	d0, d0, d0
    437c:	009f5001 	addseq	r5, pc, r1
    4380:	00000000 	andeq	r0, r0, r0
    4384:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    4388:	8e000008 	cdphi	0, 0, cr0, cr0, cr8, {0}
    438c:	01000008 	tsteq	r0, r8
    4390:	088e5100 	stmeq	lr, {r8, ip, lr}
    4394:	08ce0000 	stmiaeq	lr, {}^	; <UNPREDICTABLE>
    4398:	00010000 	andeq	r0, r1, r0
    439c:	0008ce54 	andeq	ip, r8, r4, asr lr
    43a0:	0008d200 	andeq	sp, r8, r0, lsl #4
    43a4:	f3000400 	vshl.u8	d0, d0, d0
    43a8:	d29f5101 	addsle	r5, pc, #1073741824	; 0x40000000
    43ac:	f2000008 	vhadd.s8	d0, d0, d8
    43b0:	01000008 	tsteq	r0, r8
    43b4:	08f25400 	ldmeq	r2!, {sl, ip, lr}^
    43b8:	08f60000 	ldmeq	r6!, {}^	; <UNPREDICTABLE>
    43bc:	00040000 	andeq	r0, r4, r0
    43c0:	9f5101f3 	svcls	0x005101f3
	...
    43cc:	00000888 	andeq	r0, r0, r8, lsl #17
    43d0:	0000089c 	muleq	r0, ip, r8
    43d4:	9f300002 	svcls	0x00300002
    43d8:	0000089c 	muleq	r0, ip, r8
    43dc:	000008ce 	andeq	r0, r0, lr, asr #17
    43e0:	d2570001 	subsle	r0, r7, #1
    43e4:	f2000008 	vhadd.s8	d0, d0, d8
    43e8:	01000008 	tsteq	r0, r8
    43ec:	00005700 	andeq	r5, r0, r0, lsl #14
    43f0:	00000000 	andeq	r0, r0, r0
    43f4:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
    43f8:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
    43fc:	00020000 	andeq	r0, r2, r0
    4400:	08a69f31 	stmiaeq	r6!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}
    4404:	08ce0000 	stmiaeq	lr, {}^	; <UNPREDICTABLE>
    4408:	00010000 	andeq	r0, r1, r0
    440c:	0008d256 	andeq	sp, r8, r6, asr r2
    4410:	0008f200 	andeq	pc, r8, r0, lsl #4
    4414:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4420:	000008f6 	strdeq	r0, [r0], -r6
    4424:	00000908 	andeq	r0, r0, r8, lsl #18
    4428:	08510001 	ldmdaeq	r1, {r0}^
    442c:	0c000009 	stceq	0, cr0, [r0], {9}
    4430:	04000009 	streq	r0, [r0], #-9
    4434:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4438:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    443c:	00000000 	andeq	r0, r0, r0
    4440:	00090c00 	andeq	r0, r9, r0, lsl #24
    4444:	00092000 	andeq	r2, r9, r0
    4448:	51000100 	mrspl	r0, (UNDEF: 16)
    444c:	00000920 	andeq	r0, r0, r0, lsr #18
    4450:	00000926 	andeq	r0, r0, r6, lsr #18
    4454:	01f30004 	mvnseq	r0, r4
    4458:	00009f51 	andeq	r9, r0, r1, asr pc
    445c:	00000000 	andeq	r0, r0, r0
    4460:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    4464:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    4468:	00010000 	andeq	r0, r1, r0
    446c:	00093950 	andeq	r3, r9, r0, asr r9
    4470:	00094200 	andeq	r4, r9, r0, lsl #4
    4474:	54000100 	strpl	r0, [r0], #-256	; 0x100
    4478:	00000942 	andeq	r0, r0, r2, asr #18
    447c:	00000945 	andeq	r0, r0, r5, asr #18
    4480:	45500001 	ldrbmi	r0, [r0, #-1]
    4484:	46000009 	strmi	r0, [r0], -r9
    4488:	04000009 	streq	r0, [r0], #-9
    448c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4490:	0009469f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
    4494:	00094d00 	andeq	r4, r9, r0, lsl #26
    4498:	50000100 	andpl	r0, r0, r0, lsl #2
    449c:	0000094d 	andeq	r0, r0, sp, asr #18
    44a0:	00000956 	andeq	r0, r0, r6, asr r9
    44a4:	56540001 	ldrbpl	r0, [r4], -r1
    44a8:	59000009 	stmdbpl	r0, {r0, r3}
    44ac:	01000009 	tsteq	r0, r9
    44b0:	09595000 	ldmdbeq	r9, {ip, lr}^
    44b4:	095a0000 	ldmdbeq	sl, {}^	; <UNPREDICTABLE>
    44b8:	00040000 	andeq	r0, r4, r0
    44bc:	9f5001f3 	svcls	0x005001f3
    44c0:	0000095a 	andeq	r0, r0, sl, asr r9
    44c4:	0000099d 	muleq	r0, sp, r9
    44c8:	9d500001 	ldclls	0, cr0, [r0, #-4]
    44cc:	9e000009 	cdpls	0, 0, cr0, cr0, cr9, {0}
    44d0:	04000009 	streq	r0, [r0], #-9
    44d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    44d8:	00099e9f 	muleq	r9, pc, lr	; <UNPREDICTABLE>
    44dc:	0009db00 	andeq	sp, r9, r0, lsl #22
    44e0:	50000100 	andpl	r0, r0, r0, lsl #2
    44e4:	000009db 	ldrdeq	r0, [r0], -fp
    44e8:	000009dc 	ldrdeq	r0, [r0], -ip
    44ec:	01f30004 	mvnseq	r0, r4
    44f0:	00009f50 	andeq	r9, r0, r0, asr pc
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    44fc:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    4500:	00010000 	andeq	r0, r1, r0
    4504:	00093051 	andeq	r3, r9, r1, asr r0
    4508:	00094200 	andeq	r4, r9, r0, lsl #4
    450c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    4510:	00000942 	andeq	r0, r0, r2, asr #18
    4514:	00000946 	andeq	r0, r0, r6, asr #18
    4518:	01f30004 	mvnseq	r0, r4
    451c:	09469f51 	stmdbeq	r6, {r0, r4, r6, r8, r9, sl, fp, ip, pc}^
    4520:	09560000 	ldmdbeq	r6, {}^	; <UNPREDICTABLE>
    4524:	00010000 	andeq	r0, r1, r0
    4528:	00095655 	andeq	r5, r9, r5, asr r6
    452c:	00095a00 	andeq	r5, r9, r0, lsl #20
    4530:	f3000400 	vshl.u8	d0, d0, d0
    4534:	5a9f5101 	bpl	fe7d8940 <SCS_BASE+0x1e7ca940>
    4538:	62000009 	andvs	r0, r0, #9
    453c:	01000009 	tsteq	r0, r9
    4540:	09625500 	stmdbeq	r2!, {r8, sl, ip, lr}^
    4544:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
    4548:	00040000 	andeq	r0, r4, r0
    454c:	9f5101f3 	svcls	0x005101f3
	...
    4558:	00000964 	andeq	r0, r0, r4, ror #18
    455c:	00000982 	andeq	r0, r0, r2, lsl #19
    4560:	00530001 	subseq	r0, r3, r1
    4564:	00000000 	andeq	r0, r0, r0
    4568:	64000000 	strvs	r0, [r0], #-0
    456c:	8c000009 	stchi	0, cr0, [r0], {9}
    4570:	01000009 	tsteq	r0, r9
    4574:	00005200 	andeq	r5, r0, r0, lsl #4
    4578:	00000000 	andeq	r0, r0, r0
    457c:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    4580:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
    4584:	00010000 	andeq	r0, r1, r0
    4588:	00000051 	andeq	r0, r0, r1, asr r0
    458c:	00000000 	andeq	r0, r0, r0
    4590:	00096400 	andeq	r6, r9, r0, lsl #8
    4594:	00099d00 	andeq	r9, r9, r0, lsl #26
    4598:	50000100 	andpl	r0, r0, r0, lsl #2
    459c:	0000099d 	muleq	r0, sp, r9
    45a0:	0000099e 	muleq	r0, lr, r9
    45a4:	01f30004 	mvnseq	r0, r4
    45a8:	00009f50 	andeq	r9, r0, r0, asr pc
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    45b4:	09740000 	ldmdbeq	r4!, {}^	; <UNPREDICTABLE>
    45b8:	00020000 	andeq	r0, r2, r0
    45bc:	09749f30 	ldmdbeq	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    45c0:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
    45c4:	00010000 	andeq	r0, r1, r0
    45c8:	00097657 	andeq	r7, r9, r7, asr r6
    45cc:	00097a00 	andeq	r7, r9, r0, lsl #20
    45d0:	77000700 	strvc	r0, [r0, -r0, lsl #14]
    45d4:	ff0c0b00 			; <UNDEFINED> instruction: 0xff0c0b00
    45d8:	098c9f1a 	stmibeq	ip, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    45dc:	099d0000 	ldmibeq	sp, {}	; <UNPREDICTABLE>
    45e0:	00010000 	andeq	r0, r1, r0
    45e4:	00000052 	andeq	r0, r0, r2, asr r0
    45e8:	00000000 	andeq	r0, r0, r0
    45ec:	00096400 	andeq	r6, r9, r0, lsl #8
    45f0:	00097600 	andeq	r7, r9, r0, lsl #12
    45f4:	30000200 	andcc	r0, r0, r0, lsl #4
    45f8:	0009769f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
    45fc:	00097e00 	andeq	r7, r9, r0, lsl #28
    4600:	56000100 	strpl	r0, [r0], -r0, lsl #2
    4604:	00000990 	muleq	r0, r0, r9
    4608:	0000099a 	muleq	r0, sl, r9
    460c:	9a560001 	bls	1584618 <__Stack_Size+0x1584218>
    4610:	9d000009 	stcls	0, cr0, [r0, #-36]	; 0xffffffdc
    4614:	02000009 	andeq	r0, r0, #9
    4618:	00207000 	eoreq	r7, r0, r0
    461c:	00000000 	andeq	r0, r0, r0
    4620:	64000000 	strvs	r0, [r0], #-0
    4624:	76000009 	strvc	r0, [r0], -r9
    4628:	02000009 	andeq	r0, r0, #9
    462c:	769f3000 	ldrvc	r3, [pc], r0
    4630:	94000009 	strls	r0, [r0], #-9
    4634:	05000009 	streq	r0, [r0, #-9]
    4638:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    463c:	00009f24 	andeq	r9, r0, r4, lsr #30
    4640:	00000000 	andeq	r0, r0, r0
    4644:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    4648:	09c60000 	stmibeq	r6, {}^	; <UNPREDICTABLE>
    464c:	00010000 	andeq	r0, r1, r0
    4650:	00000053 	andeq	r0, r0, r3, asr r0
    4654:	00000000 	andeq	r0, r0, r0
    4658:	00099e00 	andeq	r9, r9, r0, lsl #28
    465c:	0009be00 	andeq	fp, r9, r0, lsl #28
    4660:	52000100 	andpl	r0, r0, #0, 2
	...
    466c:	0000099e 	muleq	r0, lr, r9
    4670:	000009d2 	ldrdeq	r0, [r0], -r2
    4674:	00510001 	subseq	r0, r1, r1
    4678:	00000000 	andeq	r0, r0, r0
    467c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4680:	db000009 	blle	46ac <__Stack_Size+0x42ac>
    4684:	01000009 	tsteq	r0, r9
    4688:	09db5000 	ldmibeq	fp, {ip, lr}^
    468c:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
    4690:	00040000 	andeq	r0, r4, r0
    4694:	9f5001f3 	svcls	0x005001f3
	...
    46a0:	0000099e 	muleq	r0, lr, r9
    46a4:	000009aa 	andeq	r0, r0, sl, lsr #19
    46a8:	9f300002 	svcls	0x00300002
    46ac:	000009aa 	andeq	r0, r0, sl, lsr #19
    46b0:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    46b4:	b4560001 	ldrblt	r0, [r6], #-1
    46b8:	ca000009 	bgt	46e4 <__Stack_Size+0x42e4>
    46bc:	07000009 	streq	r0, [r0, -r9]
    46c0:	0a007600 	beq	21ec8 <__Stack_Size+0x21ac8>
    46c4:	9f1a0cff 	svcls	0x001a0cff
    46c8:	000009ca 	andeq	r0, r0, sl, asr #19
    46cc:	000009d6 	ldrdeq	r0, [r0], -r6
    46d0:	d6530001 	ldrble	r0, [r3], -r1
    46d4:	d8000009 	stmdale	r0, {r0, r3}
    46d8:	02000009 	andeq	r0, r0, #9
    46dc:	001c7000 	andseq	r7, ip, r0
    46e0:	00000000 	andeq	r0, r0, r0
    46e4:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    46e8:	b4000009 	strlt	r0, [r0], #-9
    46ec:	02000009 	andeq	r0, r0, #9
    46f0:	b49f3000 	ldrlt	r3, [pc], #0	; 46f8 <__Stack_Size+0x42f8>
    46f4:	ca000009 	bgt	4720 <__Stack_Size+0x4320>
    46f8:	01000009 	tsteq	r0, r9
    46fc:	09ca5700 	stmibeq	sl, {r8, r9, sl, ip, lr}^
    4700:	09ce0000 	stmibeq	lr, {}^	; <UNPREDICTABLE>
    4704:	00070000 	andeq	r0, r7, r0
    4708:	ff0b0077 			; <UNDEFINED> instruction: 0xff0b0077
    470c:	ce9f1adf 	mrcgt	10, 4, r1, cr15, cr15, {6}
    4710:	db000009 	blle	473c <__Stack_Size+0x433c>
    4714:	01000009 	tsteq	r0, r9
    4718:	00005200 	andeq	r5, r0, r0, lsl #4
    471c:	00000000 	andeq	r0, r0, r0
    4720:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    4724:	09b40000 	ldmibeq	r4!, {}	; <UNPREDICTABLE>
    4728:	00020000 	andeq	r0, r2, r0
    472c:	09b49f30 	ldmibeq	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}
    4730:	09d20000 	ldmibeq	r2, {}^	; <UNPREDICTABLE>
    4734:	00050000 	andeq	r0, r5, r0
    4738:	243c0071 	ldrtcs	r0, [ip], #-113	; 0x71
    473c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4740:	00000000 	andeq	r0, r0, r0
    4744:	0009dc00 	andeq	sp, r9, r0, lsl #24
    4748:	0009e800 	andeq	lr, r9, r0, lsl #16
    474c:	51000100 	mrspl	r0, (UNDEF: 16)
    4750:	000009e8 	andeq	r0, r0, r8, ror #19
    4754:	000009ec 	andeq	r0, r0, ip, ror #19
    4758:	01f30004 	mvnseq	r0, r4
    475c:	00009f51 	andeq	r9, r0, r1, asr pc
    4760:	00000000 	andeq	r0, r0, r0
    4764:	09ec0000 	stmibeq	ip!, {}^	; <UNPREDICTABLE>
    4768:	09ee0000 	stmibeq	lr!, {}^	; <UNPREDICTABLE>
    476c:	00010000 	andeq	r0, r1, r0
    4770:	0009ee50 	andeq	lr, r9, r0, asr lr
    4774:	0009f200 	andeq	pc, r9, r0, lsl #4
    4778:	f3000400 	vshl.u8	d0, d0, d0
    477c:	009f5001 	addseq	r5, pc, r1
    4780:	00000000 	andeq	r0, r0, r0
    4784:	f2000000 	vhadd.s8	d0, d0, d0
    4788:	f4000009 	vst4.8	{d0-d3}, [r0], r9
    478c:	01000009 	tsteq	r0, r9
    4790:	09f45000 	ldmibeq	r4!, {ip, lr}^
    4794:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
    4798:	00040000 	andeq	r0, r4, r0
    479c:	9f5001f3 	svcls	0x005001f3
	...
    47a8:	000009f8 	strdeq	r0, [r0], -r8
    47ac:	000009fa 	strdeq	r0, [r0], -sl
    47b0:	fa500001 	blx	14047bc <__Stack_Size+0x14043bc>
    47b4:	fe000009 	cdp2	0, 0, cr0, cr0, cr9, {0}
    47b8:	04000009 	streq	r0, [r0], #-9
    47bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    47c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47c4:	00000000 	andeq	r0, r0, r0
    47c8:	0009fe00 	andeq	pc, r9, r0, lsl #28
    47cc:	000a0200 	andeq	r0, sl, r0, lsl #4
    47d0:	50000100 	andpl	r0, r0, r0, lsl #2
    47d4:	00000a02 	andeq	r0, r0, r2, lsl #20
    47d8:	00000a06 	andeq	r0, r0, r6, lsl #20
    47dc:	01f30004 	mvnseq	r0, r4
    47e0:	00009f50 	andeq	r9, r0, r0, asr pc
    47e4:	00000000 	andeq	r0, r0, r0
    47e8:	0a060000 	beq	1847f0 <__Stack_Size+0x1843f0>
    47ec:	0a080000 	beq	2047f4 <__Stack_Size+0x2043f4>
    47f0:	00010000 	andeq	r0, r1, r0
    47f4:	000a0850 	andeq	r0, sl, r0, asr r8
    47f8:	000a0c00 	andeq	r0, sl, r0, lsl #24
    47fc:	f3000400 	vshl.u8	d0, d0, d0
    4800:	009f5001 	addseq	r5, pc, r1
    4804:	00000000 	andeq	r0, r0, r0
    4808:	0c000000 	stceq	0, cr0, [r0], {-0}
    480c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    4810:	0100000a 	tsteq	r0, sl
    4814:	0a0e5000 	beq	39881c <__Stack_Size+0x39841c>
    4818:	0a120000 	beq	484820 <__Stack_Size+0x484420>
    481c:	00040000 	andeq	r0, r4, r0
    4820:	9f5001f3 	svcls	0x005001f3
	...
    482c:	00000a12 	andeq	r0, r0, r2, lsl sl
    4830:	00000a1a 	andeq	r0, r0, sl, lsl sl
    4834:	1a500001 	bne	1404840 <__Stack_Size+0x1404440>
    4838:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    483c:	0400000a 	streq	r0, [r0], #-10
    4840:	5001f300 	andpl	pc, r1, r0, lsl #6
    4844:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4848:	00000000 	andeq	r0, r0, r0
    484c:	000a1200 	andeq	r1, sl, r0, lsl #4
    4850:	000a1400 	andeq	r1, sl, r0, lsl #8
    4854:	30000200 	andcc	r0, r0, r0, lsl #4
    4858:	000a149f 	muleq	sl, pc, r4	; <UNPREDICTABLE>
    485c:	000a1e00 	andeq	r1, sl, r0, lsl #28
    4860:	71000a00 	tstvc	r0, r0, lsl #20
    4864:	1a007300 	bne	2146c <__Stack_Size+0x2106c>
    4868:	2e302440 	cfnegscs	mvf2, mvf0
    486c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4870:	00000000 	andeq	r0, r0, r0
    4874:	000a1e00 	andeq	r1, sl, r0, lsl #28
    4878:	000a2000 	andeq	r2, sl, r0
    487c:	51000100 	mrspl	r0, (UNDEF: 16)
    4880:	00000a20 	andeq	r0, r0, r0, lsr #20
    4884:	00000a26 	andeq	r0, r0, r6, lsr #20
    4888:	01f30004 	mvnseq	r0, r4
    488c:	00009f51 	andeq	r9, r0, r1, asr pc
    4890:	00000000 	andeq	r0, r0, r0
    4894:	0a260000 	beq	98489c <__Stack_Size+0x98449c>
    4898:	0a2e0000 	beq	b848a0 <__Stack_Size+0xb844a0>
    489c:	00010000 	andeq	r0, r1, r0
    48a0:	000a2e50 	andeq	r2, sl, r0, asr lr
    48a4:	000a3c00 	andeq	r3, sl, r0, lsl #24
    48a8:	f3000400 	vshl.u8	d0, d0, d0
    48ac:	009f5001 	addseq	r5, pc, r1
    48b0:	00000000 	andeq	r0, r0, r0
    48b4:	26000000 	strcs	r0, [r0], -r0
    48b8:	3a00000a 	bcc	48e8 <__Stack_Size+0x44e8>
    48bc:	0200000a 	andeq	r0, r0, #10
    48c0:	3a9f3000 	bcc	fe7d08c8 <SCS_BASE+0x1e7c28c8>
    48c4:	3c00000a 	stccc	0, cr0, [r0], {10}
    48c8:	0100000a 	tsteq	r0, sl
    48cc:	00005000 	andeq	r5, r0, r0
    48d0:	00000000 	andeq	r0, r0, r0
    48d4:	0a260000 	beq	9848dc <__Stack_Size+0x9844dc>
    48d8:	0a280000 	beq	a048e0 <__Stack_Size+0xa044e0>
    48dc:	00020000 	andeq	r0, r2, r0
    48e0:	0a289f30 	beq	a2c5a8 <__Stack_Size+0xa2c1a8>
    48e4:	0a3c0000 	beq	f048ec <__Stack_Size+0xf044ec>
    48e8:	00060000 	andeq	r0, r6, r0
    48ec:	00710073 	rsbseq	r0, r1, r3, ror r0
    48f0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	0a260000 	beq	984900 <__Stack_Size+0x984500>
    48fc:	0a300000 	beq	c04904 <__Stack_Size+0xc04504>
    4900:	00020000 	andeq	r0, r2, r0
    4904:	0a309f30 	beq	c2c5cc <__Stack_Size+0xc2c1cc>
    4908:	0a3c0000 	beq	f04910 <__Stack_Size+0xf04510>
    490c:	00060000 	andeq	r0, r6, r0
    4910:	00720071 	rsbseq	r0, r2, r1, ror r0
    4914:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4918:	00000000 	andeq	r0, r0, r0
    491c:	0a3c0000 	beq	f04924 <__Stack_Size+0xf04524>
    4920:	0a3e0000 	beq	f84928 <__Stack_Size+0xf84528>
    4924:	00010000 	andeq	r0, r1, r0
    4928:	000a3e51 	andeq	r3, sl, r1, asr lr
    492c:	000a4400 	andeq	r4, sl, r0, lsl #8
    4930:	f3000400 	vshl.u8	d0, d0, d0
    4934:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4940:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4944:	01000000 	mrseq	r0, (UNDEF: 0)
    4948:	002e5000 	eoreq	r5, lr, r0
    494c:	00420000 	subeq	r0, r2, r0
    4950:	00040000 	andeq	r0, r4, r0
    4954:	9f5001f3 	svcls	0x005001f3
    4958:	00000042 	andeq	r0, r0, r2, asr #32
    495c:	00000046 	andeq	r0, r0, r6, asr #32
    4960:	46500001 	ldrbmi	r0, [r0], -r1
    4964:	52000000 	andpl	r0, r0, #0
    4968:	04000000 	streq	r0, [r0], #-0
    496c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4970:	0000529f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    4974:	00005600 	andeq	r5, r0, r0, lsl #12
    4978:	50000100 	andpl	r0, r0, r0, lsl #2
    497c:	00000056 	andeq	r0, r0, r6, asr r0
    4980:	00000062 	andeq	r0, r0, r2, rrx
    4984:	01f30004 	mvnseq	r0, r4
    4988:	00629f50 	rsbeq	r9, r2, r0, asr pc
    498c:	00660000 	rsbeq	r0, r6, r0
    4990:	00010000 	andeq	r0, r1, r0
    4994:	00006650 	andeq	r6, r0, r0, asr r6
    4998:	00007200 	andeq	r7, r0, r0, lsl #4
    499c:	f3000400 	vshl.u8	d0, d0, d0
    49a0:	729f5001 	addsvc	r5, pc, #1
    49a4:	76000000 	strvc	r0, [r0], -r0
    49a8:	01000000 	mrseq	r0, (UNDEF: 0)
    49ac:	00765000 	rsbseq	r5, r6, r0
    49b0:	008a0000 	addeq	r0, sl, r0
    49b4:	00040000 	andeq	r0, r4, r0
    49b8:	9f5001f3 	svcls	0x005001f3
    49bc:	0000008a 	andeq	r0, r0, sl, lsl #1
    49c0:	00000094 	muleq	r0, r4, r0
    49c4:	00500001 	subseq	r0, r0, r1
    49c8:	00000000 	andeq	r0, r0, r0
    49cc:	94000000 	strls	r0, [r0], #-0
    49d0:	d6000000 	strle	r0, [r0], -r0
    49d4:	01000000 	mrseq	r0, (UNDEF: 0)
    49d8:	00d65000 	sbcseq	r5, r6, r0
    49dc:	01160000 	tsteq	r6, r0
    49e0:	00010000 	andeq	r0, r1, r0
    49e4:	00011654 	andeq	r1, r1, r4, asr r6
    49e8:	00011c00 	andeq	r1, r1, r0, lsl #24
    49ec:	f3000400 	vshl.u8	d0, d0, d0
    49f0:	009f5001 	addseq	r5, pc, r1
    49f4:	00000000 	andeq	r0, r0, r0
    49f8:	94000000 	strls	r0, [r0], #-0
    49fc:	ac000000 	stcge	0, cr0, [r0], {-0}
    4a00:	01000000 	mrseq	r0, (UNDEF: 0)
    4a04:	00ac5100 	adceq	r5, ip, r0, lsl #2
    4a08:	01160000 	tsteq	r6, r0
    4a0c:	00010000 	andeq	r0, r1, r0
    4a10:	00011655 	andeq	r1, r1, r5, asr r6
    4a14:	00011c00 	andeq	r1, r1, r0, lsl #24
    4a18:	f3000400 	vshl.u8	d0, d0, d0
    4a1c:	009f5101 	addseq	r5, pc, r1, lsl #2
    4a20:	00000000 	andeq	r0, r0, r0
    4a24:	94000000 	strls	r0, [r0], #-0
    4a28:	a0000000 	andge	r0, r0, r0
    4a2c:	02000000 	andeq	r0, r0, #0
    4a30:	a09f3000 	addsge	r3, pc, r0
    4a34:	a4000000 	strge	r0, [r0], #-0
    4a38:	0b000000 	bleq	4a40 <__Stack_Size+0x4640>
    4a3c:	0b007300 	bleq	21644 <__Stack_Size+0x21244>
    4a40:	0a1acfff 	beq	6b8a44 <__Stack_Size+0x6b8644>
    4a44:	9f1affff 	svcls	0x001affff
    4a48:	000000a6 	andeq	r0, r0, r6, lsr #1
    4a4c:	000000ae 	andeq	r0, r0, lr, lsr #1
    4a50:	00730007 	rsbseq	r0, r3, r7
    4a54:	1affff0a 	bne	4684 <__Stack_Size+0x4284>
    4a58:	0000ae9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    4a5c:	0000b000 	andeq	fp, r0, r0
    4a60:	70000900 	andvc	r0, r0, r0, lsl #18
    4a64:	0a029410 	beq	a9aac <__Stack_Size+0xa96ac>
    4a68:	9f1affff 	svcls	0x001affff
    4a6c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4a70:	000000b8 	strheq	r0, [r0], -r8
    4a74:	0072000b 	rsbseq	r0, r2, fp
    4a78:	1ae9f30b 	bne	ffa816ac <SCS_BASE+0x1fa736ac>
    4a7c:	1affff0a 	bne	46ac <__Stack_Size+0x42ac>
    4a80:	0000c29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    4a84:	0000c600 	andeq	ip, r0, r0, lsl #12
    4a88:	73000700 	movwvc	r0, #1792	; 0x700
    4a8c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4a90:	00c69f1a 	sbceq	r9, r6, sl, lsl pc
    4a94:	00ca0000 	sbceq	r0, sl, r0
    4a98:	00090000 	andeq	r0, r9, r0
    4a9c:	02940c70 	addseq	r0, r4, #112, 24	; 0x7000
    4aa0:	1affff0a 	bne	46d0 <__Stack_Size+0x42d0>
    4aa4:	0000ca9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    4aa8:	0000ce00 	andeq	ip, r0, r0, lsl #28
    4aac:	73000b00 	movwvc	r0, #2816	; 0xb00
    4ab0:	fcff0b00 	ldc2l	11, cr0, [pc]	; 4ab8 <__Stack_Size+0x46b8>
    4ab4:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    4ab8:	00d29f1a 	sbcseq	r9, r2, sl, lsl pc
    4abc:	00d90000 	sbcseq	r0, r9, r0
    4ac0:	00070000 	andeq	r0, r7, r0
    4ac4:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    4ac8:	fa9f1aff 	blx	fe7cb6cc <SCS_BASE+0x1e7bd6cc>
    4acc:	0c000000 	stceq	0, cr0, [r0], {-0}
    4ad0:	01000001 	tsteq	r0, r1
    4ad4:	010c5000 	mrseq	r5, (UNDEF: 12)
    4ad8:	010e0000 	mrseq	r0, (UNDEF: 14)
    4adc:	00060000 	andeq	r0, r6, r0
    4ae0:	00700073 	rsbseq	r0, r0, r3, ror r0
    4ae4:	010e9f21 	tsteq	lr, r1, lsr #30
    4ae8:	01100000 	tsteq	r0, r0
    4aec:	00010000 	andeq	r0, r1, r0
    4af0:	00011053 	andeq	r1, r1, r3, asr r0
    4af4:	00011c00 	andeq	r1, r1, r0, lsl #24
    4af8:	72001100 	andvc	r1, r0, #0, 2
    4afc:	0825f700 	stmdaeq	r5!, {r8, r9, sl, ip, sp, lr, pc}
    4b00:	1b25f764 	blne	982898 <__Stack_Size+0x982498>
    4b04:	1a3f00f7 	bne	fc4ee8 <__Stack_Size+0xfc4ae8>
    4b08:	9f210070 	svcls	0x00210070
	...
    4b14:	00000094 	muleq	r0, r4, r0
    4b18:	000000e6 	andeq	r0, r0, r6, ror #1
    4b1c:	9f300002 	svcls	0x00300002
    4b20:	000000e6 	andeq	r0, r0, r6, ror #1
    4b24:	000000ec 	andeq	r0, r0, ip, ror #1
    4b28:	ec520001 	mrrc	0, 0, r0, r2, cr1
    4b2c:	fc000000 	stc2	0, cr0, [r0], {-0}
    4b30:	11000000 	mrsne	r0, (UNDEF: 0)
    4b34:	06689100 	strbteq	r9, [r8], -r0, lsl #2
    4b38:	74066491 	strvc	r6, [r6], #-1169	; 0x491
    4b3c:	29007100 	stmdbcs	r0, {r8, ip, sp, lr}
    4b40:	16000128 	strne	r0, [r0], -r8, lsr #2
    4b44:	00fc9f13 	rscseq	r9, ip, r3, lsl pc
    4b48:	01160000 	tsteq	r6, r0
    4b4c:	00140000 	andseq	r0, r4, r0
    4b50:	91066891 			; <UNDEFINED> instruction: 0x91066891
    4b54:	00740664 	rsbseq	r0, r4, r4, ror #12
    4b58:	0138000c 	teqeq	r8, ip
    4b5c:	01282940 			; <UNDEFINED> instruction: 0x01282940
    4b60:	9f131600 	svcls	0x00131600
    4b64:	00000116 	andeq	r0, r0, r6, lsl r1
    4b68:	0000011c 	andeq	r0, r0, ip, lsl r1
    4b6c:	687d0015 	ldmdavs	sp!, {r0, r2, r4}^
    4b70:	06647d06 	strbteq	r7, [r4], -r6, lsl #26
    4b74:	0c5001f3 	ldfeqe	f0, [r0], {243}	; 0xf3
    4b78:	40013800 	andmi	r3, r1, r0, lsl #16
    4b7c:	00012829 	andeq	r2, r1, r9, lsr #16
    4b80:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4b84:	00000000 	andeq	r0, r0, r0
    4b88:	94000000 	strls	r0, [r0], #-0
    4b8c:	f2000000 	vhadd.s8	d0, d0, d0
    4b90:	02000000 	andeq	r0, r0, #0
    4b94:	f29f3000 	vaddl.s16	<illegal reg q1.5>, d15, d0
    4b98:	00000000 	andeq	r0, r0, r0
    4b9c:	01000001 	tsteq	r0, r1
    4ba0:	01005200 	mrseq	r5, R8_usr
    4ba4:	01160000 	tsteq	r6, r0
    4ba8:	00220000 	eoreq	r0, r2, r0
    4bac:	91066891 			; <UNDEFINED> instruction: 0x91066891
    4bb0:	00740664 	rsbseq	r0, r4, r4, ror #12
    4bb4:	0138000c 	teqeq	r8, ip
    4bb8:	01282940 			; <UNDEFINED> instruction: 0x01282940
    4bbc:	49131600 	ldmdbmi	r3, {r9, sl, ip}
    4bc0:	7525f71e 	strvc	pc, [r5, #-1822]!	; 0x71e
    4bc4:	24320600 	ldrtcs	r0, [r2], #-1536	; 0x600
    4bc8:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    4bcc:	01169f00 	tsteq	r6, r0, lsl #30
    4bd0:	011c0000 	tsteq	ip, r0
    4bd4:	00240000 	eoreq	r0, r4, r0
    4bd8:	7d06687d 	stcvc	8, cr6, [r6, #-500]	; 0xfffffe0c
    4bdc:	01f30664 	mvnseq	r0, r4, ror #12
    4be0:	38000c50 	stmdacc	r0, {r4, r6, sl, fp}
    4be4:	28294001 	stmdacs	r9!, {r0, lr}
    4be8:	13160001 	tstne	r6, #1
    4bec:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    4bf0:	065101f3 			; <UNDEFINED> instruction: 0x065101f3
    4bf4:	25f72432 	ldrbcs	r2, [r7, #1074]!	; 0x432
    4bf8:	9f00f71b 	svcls	0x0000f71b
	...
    4c04:	00000094 	muleq	r0, r4, r0
    4c08:	000000fa 	strdeq	r0, [r0], -sl
    4c0c:	9f300002 	svcls	0x00300002
    4c10:	000000fa 	strdeq	r0, [r0], -sl
    4c14:	00000100 	andeq	r0, r0, r0, lsl #2
    4c18:	0072000b 	rsbseq	r0, r2, fp
    4c1c:	25340070 	ldrcs	r0, [r4, #-112]!	; 0x70
    4c20:	1c1e6408 	cfldrsne	mvf6, [lr], {8}
    4c24:	0001009f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    4c28:	00010200 	andeq	r0, r1, r0, lsl #4
    4c2c:	52000100 	andpl	r0, r0, #0, 2
    4c30:	00000102 	andeq	r0, r0, r2, lsl #2
    4c34:	00000116 	andeq	r0, r0, r6, lsl r1
    4c38:	6891002a 	ldmvs	r1, {r1, r3, r5}
    4c3c:	06649106 	strbteq	r9, [r4], -r6, lsl #2
    4c40:	000c0074 	andeq	r0, ip, r4, ror r0
    4c44:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    4c48:	16000128 	strne	r0, [r0], -r8, lsr #2
    4c4c:	f71e4913 			; <UNDEFINED> instruction: 0xf71e4913
    4c50:	06007525 	streq	r7, [r0], -r5, lsr #10
    4c54:	25f72432 	ldrbcs	r2, [r7, #1074]!	; 0x432
    4c58:	7000f71b 	andvc	pc, r0, fp, lsl r7	; <UNPREDICTABLE>
    4c5c:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    4c60:	9f1c1e64 	svcls	0x001c1e64
    4c64:	00000116 	andeq	r0, r0, r6, lsl r1
    4c68:	0000011c 	andeq	r0, r0, ip, lsl r1
    4c6c:	687d002c 	ldmdavs	sp!, {r2, r3, r5}^
    4c70:	06647d06 	strbteq	r7, [r4], -r6, lsl #26
    4c74:	0c5001f3 	ldfeqe	f0, [r0], {243}	; 0xf3
    4c78:	40013800 	andmi	r3, r1, r0, lsl #16
    4c7c:	00012829 	andeq	r2, r1, r9, lsr #16
    4c80:	1e491316 	mcrne	3, 2, r1, cr9, cr6, {0}
    4c84:	01f325f7 	ldrsheq	r2, [r3, #87]!	; 0x57
    4c88:	24320651 	ldrtcs	r0, [r2], #-1617	; 0x651
    4c8c:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    4c90:	34007000 	strcc	r7, [r0], #-0
    4c94:	1e640825 	cdpne	8, 6, cr0, cr4, cr5, {1}
    4c98:	00009f1c 	andeq	r9, r0, ip, lsl pc
    4c9c:	00000000 	andeq	r0, r0, r0
    4ca0:	01320000 	teqeq	r2, r0
    4ca4:	01400000 	mrseq	r0, (UNDEF: 64)
    4ca8:	00010000 	andeq	r0, r1, r0
    4cac:	00014051 	andeq	r4, r1, r1, asr r0
    4cb0:	00015200 	andeq	r5, r1, r0, lsl #4
    4cb4:	f3000400 	vshl.u8	d0, d0, d0
    4cb8:	009f5101 	addseq	r5, pc, r1, lsl #2
    4cbc:	00000000 	andeq	r0, r0, r0
    4cc0:	32000000 	andcc	r0, r0, #0
    4cc4:	42000001 	andmi	r0, r0, #1
    4cc8:	02000001 	andeq	r0, r0, #1
    4ccc:	429f3000 	addsmi	r3, pc, #0
    4cd0:	4a000001 	bmi	4cdc <__Stack_Size+0x48dc>
    4cd4:	0b000001 	bleq	4ce0 <__Stack_Size+0x48e0>
    4cd8:	0b007200 	bleq	214e0 <__Stack_Size+0x210e0>
    4cdc:	0a1af0ff 	beq	6c10e0 <__Stack_Size+0x6c0ce0>
    4ce0:	9f1affff 	svcls	0x001affff
    4ce4:	0000014e 	andeq	r0, r0, lr, asr #2
    4ce8:	00000152 	andeq	r0, r0, r2, asr r1
    4cec:	00730007 	rsbseq	r0, r3, r7
    4cf0:	1affff0a 	bne	4920 <__Stack_Size+0x4520>
    4cf4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4cf8:	00000000 	andeq	r0, r0, r0
    4cfc:	00017600 	andeq	r7, r1, r0, lsl #12
    4d00:	00018c00 	andeq	r8, r1, r0, lsl #24
    4d04:	50000100 	andpl	r0, r0, r0, lsl #2
    4d08:	0000018c 	andeq	r0, r0, ip, lsl #3
    4d0c:	0000018e 	andeq	r0, r0, lr, lsl #3
    4d10:	74700003 	ldrbtvc	r0, [r0], #-3
    4d14:	00018e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    4d18:	00019400 	andeq	r9, r1, r0, lsl #8
    4d1c:	50000100 	andpl	r0, r0, r0, lsl #2
    4d20:	00000194 	muleq	r0, r4, r1
    4d24:	000001a8 	andeq	r0, r0, r8, lsr #3
    4d28:	01f30004 	mvnseq	r0, r4
    4d2c:	00009f50 	andeq	r9, r0, r0, asr pc
    4d30:	00000000 	andeq	r0, r0, r0
    4d34:	01760000 	cmneq	r6, r0
    4d38:	01820000 	orreq	r0, r2, r0
    4d3c:	00010000 	andeq	r0, r1, r0
    4d40:	00018251 	andeq	r8, r1, r1, asr r2
    4d44:	0001a800 	andeq	sl, r1, r0, lsl #16
    4d48:	f3000400 	vshl.u8	d0, d0, d0
    4d4c:	009f5101 	addseq	r5, pc, r1, lsl #2
    4d50:	00000000 	andeq	r0, r0, r0
    4d54:	76000000 	strvc	r0, [r0], -r0
    4d58:	9a000001 	bls	4d64 <__Stack_Size+0x4964>
    4d5c:	01000001 	tsteq	r0, r1
    4d60:	019a5200 	orrseq	r5, sl, r0, lsl #4
    4d64:	019e0000 	orrseq	r0, lr, r0
    4d68:	00040000 	andeq	r0, r4, r0
    4d6c:	9f5201f3 	svcls	0x005201f3
    4d70:	0000019e 	muleq	r0, lr, r1
    4d74:	000001a0 	andeq	r0, r0, r0, lsr #3
    4d78:	a0520001 	subsge	r0, r2, r1
    4d7c:	a8000001 	stmdage	r0, {r0}
    4d80:	04000001 	streq	r0, [r0], #-1
    4d84:	5201f300 	andpl	pc, r1, #0, 6
    4d88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d8c:	00000000 	andeq	r0, r0, r0
    4d90:	00017600 	andeq	r7, r1, r0, lsl #12
    4d94:	00017c00 	andeq	r7, r1, r0, lsl #24
    4d98:	30000200 	andcc	r0, r0, r0, lsl #4
    4d9c:	00017c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    4da0:	0001a800 	andeq	sl, r1, r0, lsl #16
    4da4:	74000600 	strvc	r0, [r0], #-1536	; 0x600
    4da8:	1aff0800 	bne	fffc6db0 <SCS_BASE+0x1ffb8db0>
    4dac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db0:	00000000 	andeq	r0, r0, r0
    4db4:	00017600 	andeq	r7, r1, r0, lsl #12
    4db8:	00017c00 	andeq	r7, r1, r0, lsl #24
    4dbc:	30000200 	andcc	r0, r0, r0, lsl #4
    4dc0:	00017c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    4dc4:	00018200 	andeq	r8, r1, r0, lsl #4
    4dc8:	71000900 	tstvc	r0, r0, lsl #18
    4dcc:	0a1a4f00 	beq	6989d4 <__Stack_Size+0x6985d4>
    4dd0:	9f1affff 	svcls	0x001affff
    4dd4:	00000182 	andeq	r0, r0, r2, lsl #3
    4dd8:	000001a8 	andeq	r0, r0, r8, lsr #3
    4ddc:	01f3000a 	mvnseq	r0, sl
    4de0:	0a1a4f51 	beq	698b2c <__Stack_Size+0x69872c>
    4de4:	9f1affff 	svcls	0x001affff
	...
    4df0:	00000176 	andeq	r0, r0, r6, ror r1
    4df4:	00000188 	andeq	r0, r0, r8, lsl #3
    4df8:	9f300002 	svcls	0x00300002
    4dfc:	00000188 	andeq	r0, r0, r8, lsl #3
    4e00:	0000019c 	muleq	r0, ip, r1
    4e04:	9c530001 	mrrcls	0, 0, r0, r3, cr1
    4e08:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
    4e0c:	05000001 	streq	r0, [r0, #-1]
    4e10:	00713100 	rsbseq	r3, r1, r0, lsl #2
    4e14:	019e9f24 	orrseq	r9, lr, r4, lsr #30
    4e18:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    4e1c:	00010000 	andeq	r0, r1, r0
    4e20:	0001a453 	andeq	sl, r1, r3, asr r4
    4e24:	0001a800 	andeq	sl, r1, r0, lsl #16
    4e28:	31000500 	tstcc	r0, r0, lsl #10
    4e2c:	9f240071 	svcls	0x00240071
	...
    4e38:	000001a8 	andeq	r0, r0, r8, lsr #3
    4e3c:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    4e40:	b0510001 	subslt	r0, r1, r1
    4e44:	b2000001 	andlt	r0, r0, #1
    4e48:	04000001 	streq	r0, [r0], #-1
    4e4c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4e50:	0001b29f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    4e54:	0001b600 	andeq	fp, r1, r0, lsl #12
    4e58:	51000100 	mrspl	r0, (UNDEF: 16)
    4e5c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    4e60:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    4e64:	01f30004 	mvnseq	r0, r4
    4e68:	00009f51 	andeq	r9, r0, r1, asr pc
    4e6c:	00000000 	andeq	r0, r0, r0
    4e70:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
    4e74:	01cc0000 	biceq	r0, ip, r0
    4e78:	00010000 	andeq	r0, r1, r0
    4e7c:	0001cc51 	andeq	ip, r1, r1, asr ip
    4e80:	0001d000 	andeq	sp, r1, r0
    4e84:	f3000400 	vshl.u8	d0, d0, d0
    4e88:	009f5101 	addseq	r5, pc, r1, lsl #2
    4e8c:	00000000 	andeq	r0, r0, r0
    4e90:	d0000000 	andle	r0, r0, r0
    4e94:	e2000001 	and	r0, r0, #1
    4e98:	01000001 	tsteq	r0, r1
    4e9c:	01e25100 	mvneq	r5, r0, lsl #2
    4ea0:	01e60000 	mvneq	r0, r0
    4ea4:	00040000 	andeq	r0, r4, r0
    4ea8:	9f5101f3 	svcls	0x005101f3
	...
    4eb4:	000001fe 	strdeq	r0, [r0], -lr
    4eb8:	00000210 	andeq	r0, r0, r0, lsl r2
    4ebc:	10510001 	subsne	r0, r1, r1
    4ec0:	14000002 	strne	r0, [r0], #-2
    4ec4:	04000002 	streq	r0, [r0], #-2
    4ec8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4ecc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ed0:	00000000 	andeq	r0, r0, r0
    4ed4:	00022c00 	andeq	r2, r2, r0, lsl #24
    4ed8:	00023000 	andeq	r3, r2, r0
    4edc:	51000100 	mrspl	r0, (UNDEF: 16)
    4ee0:	00000230 	andeq	r0, r0, r0, lsr r2
    4ee4:	00000234 	andeq	r0, r0, r4, lsr r2
    4ee8:	01f30004 	mvnseq	r0, r4
    4eec:	00009f51 	andeq	r9, r0, r1, asr pc
    4ef0:	00000000 	andeq	r0, r0, r0
    4ef4:	02340000 	eorseq	r0, r4, #0
    4ef8:	02360000 	eorseq	r0, r6, #0
    4efc:	00010000 	andeq	r0, r1, r0
    4f00:	00023650 	andeq	r3, r2, r0, asr r6
    4f04:	00023c00 	andeq	r3, r2, r0, lsl #24
    4f08:	f3000400 	vshl.u8	d0, d0, d0
    4f0c:	009f5001 	addseq	r5, pc, r1
    4f10:	00000000 	andeq	r0, r0, r0
    4f14:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4f18:	56000002 	strpl	r0, [r0], -r2
    4f1c:	01000002 	tsteq	r0, r2
    4f20:	02565100 	subseq	r5, r6, #0, 2
    4f24:	025a0000 	subseq	r0, sl, #0
    4f28:	00040000 	andeq	r0, r4, r0
    4f2c:	9f5101f3 	svcls	0x005101f3
	...
    4f38:	0000025a 	andeq	r0, r0, sl, asr r2
    4f3c:	00000268 	andeq	r0, r0, r8, ror #4
    4f40:	68510001 	ldmdavs	r1, {r0}^
    4f44:	6c000002 	stcvs	0, cr0, [r0], {2}
    4f48:	04000002 	streq	r0, [r0], #-2
    4f4c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f54:	00000000 	andeq	r0, r0, r0
    4f58:	0002b400 	andeq	fp, r2, r0, lsl #8
    4f5c:	0002c600 	andeq	ip, r2, r0, lsl #12
    4f60:	51000100 	mrspl	r0, (UNDEF: 16)
    4f64:	000002c6 	andeq	r0, r0, r6, asr #5
    4f68:	000002ca 	andeq	r0, r0, sl, asr #5
    4f6c:	01f30004 	mvnseq	r0, r4
    4f70:	00009f51 	andeq	r9, r0, r1, asr pc
    4f74:	00000000 	andeq	r0, r0, r0
    4f78:	02e20000 	rsceq	r0, r2, #0
    4f7c:	02ea0000 	rsceq	r0, sl, #0
    4f80:	00010000 	andeq	r0, r1, r0
    4f84:	0002ea50 	andeq	lr, r2, r0, asr sl
    4f88:	0002ee00 	andeq	lr, r2, r0, lsl #28
    4f8c:	f3000400 	vshl.u8	d0, d0, d0
    4f90:	009f5001 	addseq	r5, pc, r1
    4f94:	00000000 	andeq	r0, r0, r0
    4f98:	e2000000 	and	r0, r0, #0
    4f9c:	e4000002 	str	r0, [r0], #-2
    4fa0:	02000002 	andeq	r0, r0, #2
    4fa4:	e49f3000 	ldr	r3, [pc], #0	; 4fac <__Stack_Size+0x4bac>
    4fa8:	ee000002 	cdp	0, 0, cr0, cr0, cr2, {0}
    4fac:	0a000002 	beq	4fbc <__Stack_Size+0x4bbc>
    4fb0:	73007100 	movwvc	r7, #256	; 0x100
    4fb4:	24401a00 	strbcs	r1, [r0], #-2560	; 0xa00
    4fb8:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    4fbc:	00000000 	andeq	r0, r0, r0
    4fc0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    4fc4:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
    4fc8:	01000002 	tsteq	r0, r2
    4fcc:	02f05100 	rscseq	r5, r0, #0, 2
    4fd0:	02f60000 	rscseq	r0, r6, #0
    4fd4:	00040000 	andeq	r0, r4, r0
    4fd8:	9f5101f3 	svcls	0x005101f3
	...
    4fe4:	000002f6 	strdeq	r0, [r0], -r6
    4fe8:	0000032c 	andeq	r0, r0, ip, lsr #6
    4fec:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4ff0:	30000003 	andcc	r0, r0, r3
    4ff4:	04000003 	streq	r0, [r0], #-3
    4ff8:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ffc:	0003309f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    5000:	00033200 	andeq	r3, r3, r0, lsl #4
    5004:	50000100 	andpl	r0, r0, r0, lsl #2
    5008:	00000332 	andeq	r0, r0, r2, lsr r3
    500c:	00000334 	andeq	r0, r0, r4, lsr r3
    5010:	01f30004 	mvnseq	r0, r4
    5014:	00009f50 	andeq	r9, r0, r0, asr pc
    5018:	00000000 	andeq	r0, r0, r0
    501c:	02f60000 	rscseq	r0, r6, #0
    5020:	03220000 			; <UNDEFINED> instruction: 0x03220000
    5024:	00010000 	andeq	r0, r1, r0
    5028:	00032251 	andeq	r2, r3, r1, asr r2
    502c:	00033000 	andeq	r3, r3, r0
    5030:	f3000400 	vshl.u8	d0, d0, d0
    5034:	309f5101 	addscc	r5, pc, r1, lsl #2
    5038:	34000003 	strcc	r0, [r0], #-3
    503c:	01000003 	tsteq	r0, r3
    5040:	00005100 	andeq	r5, r0, r0, lsl #2
    5044:	00000000 	andeq	r0, r0, r0
    5048:	02f60000 	rscseq	r0, r6, #0
    504c:	031a0000 	tsteq	sl, #0
    5050:	00020000 	andeq	r0, r2, r0
    5054:	031a9f30 	tsteq	sl, #48, 30	; 0xc0
    5058:	031e0000 	tsteq	lr, #0
    505c:	000b0000 	andeq	r0, fp, r0
    5060:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    5064:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    5068:	1e9f241a 	mrcne	4, 4, r2, cr15, cr10, {0}
    506c:	22000003 	andcs	r0, r0, #3
    5070:	12000003 	andne	r0, r0, #3
    5074:	00713100 	rsbseq	r3, r1, r0, lsl #2
    5078:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    507c:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    5080:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5084:	229f1a1a 	addscs	r1, pc, #106496	; 0x1a000
    5088:	30000003 	andcc	r0, r0, r3
    508c:	13000003 	movwne	r0, #3
    5090:	01f33100 	mvnseq	r3, r0, lsl #2
    5094:	0a253851 	beq	9531e0 <__Stack_Size+0x952de0>
    5098:	241affff 	ldrcs	pc, [sl], #-4095	; 0xfff
    509c:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    50a0:	9f1a1aff 	svcls	0x001a1aff
    50a4:	00000330 	andeq	r0, r0, r0, lsr r3
    50a8:	00000334 	andeq	r0, r0, r4, lsr r3
    50ac:	71310012 	teqvc	r1, r2, lsl r0
    50b0:	0a253800 	beq	9530b8 <__Stack_Size+0x952cb8>
    50b4:	241affff 	ldrcs	pc, [sl], #-4095	; 0xfff
    50b8:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    50bc:	9f1a1aff 	svcls	0x001a1aff
	...
    50c8:	000002f6 	strdeq	r0, [r0], -r6
    50cc:	000002fe 	strdeq	r0, [r0], -lr
    50d0:	9f300002 	svcls	0x00300002
    50d4:	000002fe 	strdeq	r0, [r0], -lr
    50d8:	00000308 	andeq	r0, r0, r8, lsl #6
    50dc:	00710009 	rsbseq	r0, r1, r9
    50e0:	ff0a1a4f 			; <UNDEFINED> instruction: 0xff0a1a4f
    50e4:	089f1aff 	ldmeq	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    50e8:	1a000003 	bne	50fc <__Stack_Size+0x4cfc>
    50ec:	01000003 	tsteq	r0, r3
    50f0:	031a5200 	tsteq	sl, #0, 4
    50f4:	03240000 			; <UNDEFINED> instruction: 0x03240000
    50f8:	00010000 	andeq	r0, r1, r0
    50fc:	00033053 	andeq	r3, r3, r3, asr r0
    5100:	00033400 	andeq	r3, r3, r0, lsl #8
    5104:	53000100 	movwpl	r0, #256	; 0x100
	...
    5110:	000002f6 	strdeq	r0, [r0], -r6
    5114:	000002fe 	strdeq	r0, [r0], -lr
    5118:	9f300002 	svcls	0x00300002
    511c:	000002fe 	strdeq	r0, [r0], -lr
    5120:	00000334 	andeq	r0, r0, r4, lsr r3
    5124:	00740006 	rsbseq	r0, r4, r6
    5128:	9f1aff08 	svcls	0x001aff08
	...
    5134:	000002f6 	strdeq	r0, [r0], -r6
    5138:	00000332 	andeq	r0, r0, r2, lsr r3
    513c:	9f300002 	svcls	0x00300002
    5140:	00000332 	andeq	r0, r0, r2, lsr r3
    5144:	00000334 	andeq	r0, r0, r4, lsr r3
    5148:	00500001 	subseq	r0, r0, r1
    514c:	00000000 	andeq	r0, r0, r0
    5150:	34000000 	strcc	r0, [r0], #-0
    5154:	36000003 	strcc	r0, [r0], -r3
    5158:	01000003 	tsteq	r0, r3
    515c:	03365100 	teqeq	r6, #0, 2
    5160:	03420000 	movteq	r0, #8192	; 0x2000
    5164:	00040000 	andeq	r0, r4, r0
    5168:	9f5101f3 	svcls	0x005101f3
	...
    5174:	00000334 	andeq	r0, r0, r4, lsr r3
    5178:	00000336 	andeq	r0, r0, r6, lsr r3
    517c:	00710005 	rsbseq	r0, r1, r5
    5180:	369f2538 			; <UNDEFINED> instruction: 0x369f2538
    5184:	42000003 	andmi	r0, r0, #3
    5188:	06000003 	streq	r0, [r0], -r3
    518c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5190:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    5194:	00000000 	andeq	r0, r0, r0
    5198:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    519c:	14000000 	strne	r0, [r0], #-0
    51a0:	01000000 	mrseq	r0, (UNDEF: 0)
    51a4:	00145300 	andseq	r5, r4, r0, lsl #6
    51a8:	001c0000 	andseq	r0, ip, r0
    51ac:	00030000 	andeq	r0, r3, r0
    51b0:	1c9f0473 	cfldrsne	mvf0, [pc], {115}	; 0x73
    51b4:	2c000000 	stccs	0, cr0, [r0], {-0}
    51b8:	01000000 	mrseq	r0, (UNDEF: 0)
    51bc:	002c5300 	eoreq	r5, ip, r0, lsl #6
    51c0:	002e0000 	eoreq	r0, lr, r0
    51c4:	00030000 	andeq	r0, r3, r0
    51c8:	2e9f7c73 	mrccs	12, 4, r7, cr15, cr3, {3}
    51cc:	31000000 	mrscc	r0, (UNDEF: 0)
    51d0:	01000000 	mrseq	r0, (UNDEF: 0)
    51d4:	00005300 	andeq	r5, r0, r0, lsl #6
    51d8:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
   4:	08003c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip, sp}
   8:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
   c:	08005ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, lr}
	...
  18:	0000012e 	andeq	r0, r0, lr, lsr #2
  1c:	0000014a 	andeq	r0, r0, sl, asr #2
  20:	00000154 	andeq	r0, r0, r4, asr r1
  24:	0000021c 	andeq	r0, r0, ip, lsl r2
	...
  30:	00000960 	andeq	r0, r0, r0, ror #18
  34:	00000962 	andeq	r0, r0, r2, ror #18
  38:	00000964 	andeq	r0, r0, r4, ror #18
  3c:	00000992 	muleq	r0, r2, r9
  40:	00000994 	muleq	r0, r4, r9
  44:	00000996 	muleq	r0, r6, r9
	...
  50:	0000099e 	muleq	r0, lr, r9
  54:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  58:	000009d6 	ldrdeq	r0, [r0], -r6
  5c:	000009d8 	ldrdeq	r0, [r0], -r8
	...
