
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flashtext    00000000  08003134  08003134  00008018  2**0
                  CONTENTS
  2 .text         00003260  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000018  20000000  08006394  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000204  20000018  080063ac  00008018  2**2
                  ALLOC
  5 ._usrstack    00000100  2000021c  080065b0  00008018  2**0
                  ALLOC
  6 .comment      00000070  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  000080c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000095e7  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000194e  00000000  00000000  0001186f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000183a  00000000  00000000  000131bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ebc  00000000  00000000  000149f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030b7  00000000  00000000  000168b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000055c5  00000000  00000000  0001996b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b0  00000000  00000000  0001ef30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	andcs	r0, r1, r0
 8003004:	08005f79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 8003008:	08003e95 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, fp, ip, sp}
 800300c:	08003e97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sl, fp, ip, sp}
 8003010:	08003e99 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, fp, ip, sp}
 8003014:	08003e9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r9, sl, fp, ip, sp}
 8003018:	08003e9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, ip, sp}
	...
 800302c:	08003ea1 	stmdaeq	r0, {r0, r5, r7, r9, sl, fp, ip, sp}
 8003030:	08003e9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r9, sl, fp, ip, sp}
 8003034:	00000000 	andeq	r0, r0, r0
 8003038:	08003ea3 	stmdaeq	r0, {r0, r1, r5, r7, r9, sl, fp, ip, sp}
 800303c:	08003ea5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, fp, ip, sp}
 8003040:	08003ea9 	stmdaeq	r0, {r0, r3, r5, r7, r9, sl, fp, ip, sp}
 8003044:	08003eab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, sl, fp, ip, sp}
 8003048:	08003ead 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, fp, ip, sp}
 800304c:	08003eaf 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, sl, fp, ip, sp}
 8003050:	08003eb1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, fp, ip, sp}
 8003054:	08003eb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r9, sl, fp, ip, sp}
 8003058:	08003eb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, fp, ip, sp}
 800305c:	08003eb7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, sl, fp, ip, sp}
 8003060:	08003eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp}
 8003064:	08003ebb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, sp}
 8003068:	08003ebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
	...
 8003088:	08003ecd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, fp, ip, sp}
 800308c:	08003ecf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r9, sl, fp, ip, sp}
 8003090:	08003ed1 	stmdaeq	r0, {r0, r4, r6, r7, r9, sl, fp, ip, sp}
 8003094:	08003ed3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r9, sl, fp, ip, sp}
 8003098:	08003ed5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, fp, ip, sp}
 800309c:	08003ed7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp}
 80030a0:	08003ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp}
 80030a4:	08003edb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r9, sl, fp, ip, sp}
 80030a8:	08003edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp}
 80030ac:	08003edf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp}
 80030b0:	08003ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, sp}
 80030b4:	08003ee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp, ip, sp}
 80030b8:	08003ee7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r9, sl, fp, ip, sp}
 80030bc:	08003ee9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, fp, ip, sp}
 80030c0:	08003eeb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r9, sl, fp, ip, sp}
 80030c4:	08003eed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, fp, ip, sp}
 80030c8:	08003eef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, sl, fp, ip, sp}
 80030cc:	08003ef1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030d0:	08003ef3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030d4:	08003ef5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030d8:	08003ef9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030dc:	08003efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030e0:	08003efd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030e4:	08003eff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 80030e8:	08003f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, sp}
 80030ec:	08003f03 	stmdaeq	r0, {r0, r1, r8, r9, sl, fp, ip, sp}
 80030f0:	08003f05 	stmdaeq	r0, {r0, r2, r8, r9, sl, fp, ip, sp}
 80030f4:	08003f07 	stmdaeq	r0, {r0, r1, r2, r8, r9, sl, fp, ip, sp}
 80030f8:	08003f09 	stmdaeq	r0, {r0, r3, r8, r9, sl, fp, ip, sp}
 80030fc:	08003f0b 	stmdaeq	r0, {r0, r1, r3, r8, r9, sl, fp, ip, sp}
 8003100:	08003f0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, fp, ip, sp}
 8003104:	08003f0f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sl, fp, ip, sp}
 8003108:	08003f11 	stmdaeq	r0, {r0, r4, r8, r9, sl, fp, ip, sp}
 800310c:	08003f13 	stmdaeq	r0, {r0, r1, r4, r8, r9, sl, fp, ip, sp}
 8003110:	08003f15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, ip, sp}
 8003114:	08003f17 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, fp, ip, sp}
 8003118:	08003f19 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, fp, ip, sp}
 800311c:	08003f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, ip, sp}
 8003120:	08003f1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp}
 8003124:	08003f1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, fp, ip, sp}
 8003128:	08003f21 	stmdaeq	r0, {r0, r5, r8, r9, sl, fp, ip, sp}
 800312c:	08003f23 	stmdaeq	r0, {r0, r1, r5, r8, r9, sl, fp, ip, sp}
 8003130:	0000f85f 	andeq	pc, r0, pc, asr r8	; <UNPREDICTABLE>

Disassembly of section .text:

08003134 <RCC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RCC_Configuration(void)
{
 8003134:	b510      	push	{r4, lr}
  ErrorStatus HSEStartUpStatus;
  /* RCC system reset(for debug purpose) */
  RCC_DeInit();
 8003136:	f001 fe3f 	bl	8004db8 <RCC_DeInit>

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
 800313a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800313e:	f001 fe59 	bl	8004df4 <RCC_HSEConfig>

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003142:	f001 ffa7 	bl	8005094 <RCC_WaitForHSEStartUp>

  if(HSEStartUpStatus == SUCCESS)
 8003146:	2801      	cmp	r0, #1

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003148:	4604      	mov	r4, r0

  if(HSEStartUpStatus == SUCCESS)
 800314a:	d00d      	beq.n	8003168 <RCC_Configuration+0x34>
    }

  /* Enable peripheral clocks --------------------------------------------------*/

  /* Enable USART1 and GPIOB clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 800314c:	f244 0008 	movw	r0, #16392	; 0x4008
 8003150:	2101      	movs	r1, #1
 8003152:	f001 ff49 	bl	8004fe8 <RCC_APB2PeriphClockCmd>

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);
 8003156:	4817      	ldr	r0, [pc, #92]	; (80031b4 <RCC_Configuration+0x80>)
 8003158:	2101      	movs	r1, #1
 800315a:	f001 ff51 	bl	8005000 <RCC_APB1PeriphClockCmd>

  PWR_BackupAccessCmd(ENABLE);
}
 800315e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);

  /* Enable USART3 clocks */
  RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);

  PWR_BackupAccessCmd(ENABLE);
 8003162:	2001      	movs	r0, #1
 8003164:	f001 bdd1 	b.w	8004d0a <PWR_BackupAccessCmd>
  HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS)
    {
      /* Enable Prefetch Buffer */
      FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003168:	2010      	movs	r0, #16
 800316a:	f001 f8e3 	bl	8004334 <FLASH_PrefetchBufferCmd>

      /* Flash 2 wait state */
      FLASH_SetLatency(FLASH_Latency_2);
 800316e:	2002      	movs	r0, #2
 8003170:	f001 f8c8 	bl	8004304 <FLASH_SetLatency>

      /* HCLK = SYSCLK */
      RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8003174:	2000      	movs	r0, #0
 8003176:	f001 fe8b 	bl	8004e90 <RCC_HCLKConfig>

      /* PCLK2 = HCLK */
      RCC_PCLK2Config(RCC_HCLK_Div1);
 800317a:	2000      	movs	r0, #0
 800317c:	f001 fe9c 	bl	8004eb8 <RCC_PCLK2Config>

      /* PCLK1 = HCLK/2 */
      RCC_PCLK1Config(RCC_HCLK_Div2);
 8003180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003184:	f001 fe8e 	bl	8004ea4 <RCC_PCLK1Config>

      /* PLLCLK = 8MHz * 9 = 72 MHz */
      RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8003188:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800318c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8003190:	f001 fe5c 	bl	8004e4c <RCC_PLLConfig>

      /* Enable PLL */
      RCC_PLLCmd(ENABLE);
 8003194:	4620      	mov	r0, r4
 8003196:	f001 fe63 	bl	8004e60 <RCC_PLLCmd>

      /* Wait till PLL is ready */
      while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 800319a:	2039      	movs	r0, #57	; 0x39
 800319c:	f001 ff66 	bl	800506c <RCC_GetFlagStatus>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d0fa      	beq.n	800319a <RCC_Configuration+0x66>
	{
	}

      /* Select PLL as system clock source */
      RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80031a4:	2002      	movs	r0, #2
 80031a6:	f001 fe61 	bl	8004e6c <RCC_SYSCLKConfig>

      /* Wait till PLL is used as system clock source */
      while(RCC_GetSYSCLKSource() != 0x08)
 80031aa:	f001 fe69 	bl	8004e80 <RCC_GetSYSCLKSource>
 80031ae:	2808      	cmp	r0, #8
 80031b0:	d1fb      	bne.n	80031aa <RCC_Configuration+0x76>
 80031b2:	e7cb      	b.n	800314c <RCC_Configuration+0x18>
 80031b4:	00040001 	andeq	r0, r4, r1

080031b8 <NVIC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NVIC_Configuration(void)
{
 80031b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef  VECT_TAB_RAM
  // Set the Vector Table base location at 0x20000000
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
  // Set the Vector Table base location at 0x08003000
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80031ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80031be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031c2:	f001 fce3 	bl	8004b8c <NVIC_SetVectorTable>
#endif

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80031c6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80031ca:	f001 fc39 	bl	8004a40 <NVIC_PriorityGroupConfig>

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031ce:	2500      	movs	r5, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031d0:	2401      	movs	r4, #1

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031d2:	2325      	movs	r3, #37	; 0x25
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031d4:	a801      	add	r0, sp, #4

  // Configure the NVIC Preemption Priority Bits
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

  // Enable the USART1 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 80031d6:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031da:	f88d 5005 	strb.w	r5, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031de:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031e2:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031e6:	f001 fc35 	bl	8004a54 <NVIC_Init>

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80031ea:	231c      	movs	r3, #28
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80031ec:	a801      	add	r0, sp, #4
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  // Enable the TIM2 Interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80031ee:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80031f2:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031f6:	f88d 5006 	strb.w	r5, [sp, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031fa:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031fe:	f001 fc29 	bl	8004a54 <NVIC_Init>
}
 8003202:	b003      	add	sp, #12
 8003204:	bd30      	pop	{r4, r5, pc}

08003206 <GPIO_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
 8003206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003208:	4c1e      	ldr	r4, [pc, #120]	; (8003284 <GPIO_Configuration+0x7e>)
 * Return         : None
 *******************************************************************************/
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);
 800320a:	a801      	add	r0, sp, #4
 800320c:	f001 fb65 	bl	80048da <GPIO_StructInit>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003210:	2604      	movs	r6, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8003212:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003214:	2703      	movs	r7, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003216:	2510      	movs	r5, #16
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003218:	4620      	mov	r0, r4
 800321a:	a901      	add	r1, sp, #4
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_StructInit(&GPIO_InitStructure);

  // PORTB CONFIG
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 800321c:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003220:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003224:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003228:	f001 fb09 	bl	800483e <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 800322c:	f44f 6308 	mov.w	r3, #2176	; 0x880
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003230:	4620      	mov	r0, r4
 8003232:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8003236:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800323a:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800323e:	f001 fafe 	bl	800483e <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8003242:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003246:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800324a:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800324c:	2318      	movs	r3, #24
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800324e:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003252:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003256:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800325a:	f001 faf0 	bl	800483e <GPIO_Init>

  GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 800325e:	4630      	mov	r0, r6
 8003260:	2101      	movs	r1, #1
 8003262:	f001 fb7b 	bl	800495c <GPIO_PinRemapConfig>
  GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <GPIO_Configuration+0x82>)
 8003268:	2101      	movs	r1, #1
 800326a:	f001 fb77 	bl	800495c <GPIO_PinRemapConfig>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f001 fb4e 	bl	8004912 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 8003276:	4620      	mov	r0, r4
 8003278:	2120      	movs	r1, #32
 800327a:	f001 fb48 	bl	800490e <GPIO_SetBits>
}
 800327e:	b003      	add	sp, #12
 8003280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003282:	bf00      	nop
 8003284:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003288:	00300400 	eorseq	r0, r0, r0, lsl #8

0800328c <DisableUSART1>:
    }
}

void DisableUSART1(void)
{
  USART_Cmd(USART1, DISABLE);
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <DisableUSART1+0x8>)
 800328e:	2100      	movs	r1, #0
 8003290:	f002 bd47 	b.w	8005d22 <USART_Cmd>
 8003294:	40013800 	andmi	r3, r1, r0, lsl #16

08003298 <ClearBuffer256>:
}

void ClearBuffer256(void)
{
  gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <ClearBuffer256+0xc>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	705a      	strb	r2, [r3, #1]
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000018 	andcs	r0, r0, r8, lsl r0

080032a8 <CheckNewArrive>:
}

byte CheckNewArrive(void)
{
  if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <CheckNewArrive+0x10>)
 80032aa:	7858      	ldrb	r0, [r3, #1]
 80032ac:	781b      	ldrb	r3, [r3, #0]
    return 1;
  else
    return 0;
}
 80032ae:	1ac0      	subs	r0, r0, r3
 80032b0:	bf18      	it	ne
 80032b2:	2001      	movne	r0, #1
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000018 	andcs	r0, r0, r8, lsl r0

080032bc <TxDByte_DXL>:

void TxDByte_DXL(byte bTxdData)
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	4604      	mov	r4, r0
  GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80032c0:	2120      	movs	r1, #32
 80032c2:	480d      	ldr	r0, [pc, #52]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032c4:	f001 fb25 	bl	8004912 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032ca:	2110      	movs	r1, #16
 80032cc:	f001 fb1f 	bl	800490e <GPIO_SetBits>

  USART_SendData(USART1,bTxdData);
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <TxDByte_DXL+0x40>)
 80032d2:	4621      	mov	r1, r4
 80032d4:	f002 fd8c 	bl	8005df0 <USART_SendData>
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <TxDByte_DXL+0x40>)
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	f002 fde3 	bl	8005ea6 <USART_GetFlagStatus>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d0f9      	beq.n	80032d8 <TxDByte_DXL+0x1c>

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032e6:	2110      	movs	r1, #16
 80032e8:	f001 fb13 	bl	8004912 <GPIO_ResetBits>
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USART_SendData(USART1,bTxdData);
  while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );

  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <TxDByte_DXL+0x3c>)
 80032f2:	2120      	movs	r1, #32
 80032f4:	f001 bb0b 	b.w	800490e <GPIO_SetBits>
 80032f8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80032fc:	40013800 	andmi	r3, r1, r0, lsl #16

08003300 <RxDByte_DXL>:
{
  byte bTemp;

  while(1)
    {
      if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <RxDByte_DXL+0x1c>)
 8003302:	7859      	ldrb	r1, [r3, #1]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	4291      	cmp	r1, r2
 8003308:	d0fa      	beq.n	8003300 <RxDByte_DXL>
    }

  bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 800330a:	785a      	ldrb	r2, [r3, #1]
 800330c:	441a      	add	r2, r3
 800330e:	7890      	ldrb	r0, [r2, #2]
  gbRxBufferReadPointer++;
 8003310:	785a      	ldrb	r2, [r3, #1]
 8003312:	3201      	adds	r2, #1
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	705a      	strb	r2, [r3, #1]

  return bTemp;
}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000018 	andcs	r0, r0, r8, lsl r0

08003320 <TxDByte_PC>:
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
  USART_SendData(USART3,bTxdData);
 8003320:	4601      	mov	r1, r0
    bTmp += 7;
  TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 8003322:	b508      	push	{r3, lr}
  USART_SendData(USART3,bTxdData);
 8003324:	4804      	ldr	r0, [pc, #16]	; (8003338 <TxDByte_PC+0x18>)
 8003326:	f002 fd63 	bl	8005df0 <USART_SendData>
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <TxDByte_PC+0x18>)
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	f002 fdba 	bl	8005ea6 <USART_GetFlagStatus>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0f9      	beq.n	800332a <TxDByte_PC+0xa>
}
 8003336:	bd08      	pop	{r3, pc}
 8003338:	40004800 	andmi	r4, r0, r0, lsl #16

0800333c <TxDString>:
  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
}

void TxDString(byte *bData)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	1e44      	subs	r4, r0, #1
  while (*bData)
 8003340:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003344:	b110      	cbz	r0, 800334c <TxDString+0x10>
    TxDByte_PC(*bData++);
 8003346:	f7ff ffeb 	bl	8003320 <TxDByte_PC>
 800334a:	e7f9      	b.n	8003340 <TxDString+0x4>
}
 800334c:	bd10      	pop	{r4, pc}

0800334e <infiniteTurn>:
/////////////// AX 12 ////////////////
//////////////////////////////////////

// infinite turn mode activation, see technical docu
// parameter: ID of motor
void infiniteTurn(unsigned char id) {
 800334e:	b510      	push	{r4, lr}
 8003350:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 8003352:	2106      	movs	r1, #6
 8003354:	2200      	movs	r2, #0
 8003356:	f000 ffbf 	bl	80042d8 <dxl_write_word>
  int result =  dxl_get_result();
 800335a:	f000 ff33 	bl	80041c4 <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
 800335e:	4620      	mov	r0, r4
 8003360:	2108      	movs	r1, #8
 8003362:	2200      	movs	r2, #0
 8003364:	f000 ffb8 	bl	80042d8 <dxl_write_word>
  result =  dxl_get_result();
 8003368:	f000 ff2c 	bl	80041c4 <dxl_get_result>
  TxDString("\nCM5 infinite rotation mode set\n");
}
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void infiniteTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 0 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 infinite rotation mode set\n");
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <infiniteTurn+0x2a>)
 8003372:	f7ff bfe3 	b.w	800333c <TxDString>
 8003376:	bf00      	nop
 8003378:	08006130 	stmdaeq	r0, {r4, r5, r8, sp, lr}

0800337c <normalTurn>:
}


// infinite turn mode desactivation, see technical docu
// parameter: ID of motor
void normalTurn(unsigned char id) {
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
 8003380:	2106      	movs	r1, #6
 8003382:	2200      	movs	r2, #0
 8003384:	f000 ffa8 	bl	80042d8 <dxl_write_word>
  int result =  dxl_get_result();
 8003388:	f000 ff1c 	bl	80041c4 <dxl_get_result>
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
 800338c:	4620      	mov	r0, r4
 800338e:	2108      	movs	r1, #8
 8003390:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003394:	f000 ffa0 	bl	80042d8 <dxl_write_word>
  result =  dxl_get_result();
 8003398:	f000 ff14 	bl	80041c4 <dxl_get_result>
  TxDString("\nCM5 normal rotation mode set\n");
}
 800339c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void normalTurn(unsigned char id) {
  dxl_write_word(id,  AX12_CTAB_ID_CWAngleLimitLo, 0 ) ;
  int result =  dxl_get_result();
  dxl_write_word(id,  AX12_CTAB_ID_CCWAngleLimitLo, 1023 ) ;
  result =  dxl_get_result();
  TxDString("\nCM5 normal rotation mode set\n");
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <normalTurn+0x2c>)
 80033a2:	f7ff bfcb 	b.w	800333c <TxDString>
 80033a6:	bf00      	nop
 80033a8:	08006151 	stmdaeq	r0, {r0, r4, r6, r8, sp, lr}

080033ac <PrintCommStatus>:


// Print communication result
void PrintCommStatus(int CommStatus)
{
  switch(CommStatus)
 80033ac:	3802      	subs	r0, #2
 80033ae:	2805      	cmp	r0, #5
 80033b0:	d810      	bhi.n	80033d4 <PrintCommStatus+0x28>
 80033b2:	e8df f000 	tbb	[pc, r0]
 80033b6:	09050703 	stmdbeq	r5, {r0, r1, r8, r9, sl}
 80033ba:	48070d0b 	stmdami	r7, {r0, r1, r3, r8, sl, fp}
    {
    case COMM_TXFAIL:
      TxDString("COMM_TXFAIL: Failed transmit instruction packet!\n");
 80033be:	e00a      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_TXERROR:
      TxDString("COMM_TXERROR: Incorrect instruction packet!\n");
 80033c0:	4807      	ldr	r0, [pc, #28]	; (80033e0 <PrintCommStatus+0x34>)
 80033c2:	e008      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXFAIL:
      TxDString("COMM_RXFAIL: Failed get status packet from device!\n");
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <PrintCommStatus+0x38>)
 80033c6:	e006      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXWAITING:
      TxDString("COMM_RXWAITING: Now recieving status packet!\n");
 80033c8:	4807      	ldr	r0, [pc, #28]	; (80033e8 <PrintCommStatus+0x3c>)
 80033ca:	e004      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXTIMEOUT:
      TxDString("COMM_RXTIMEOUT: There is no status packet!\n");
 80033cc:	4807      	ldr	r0, [pc, #28]	; (80033ec <PrintCommStatus+0x40>)
 80033ce:	e002      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    case COMM_RXCORRUPT:
      TxDString("COMM_RXCORRUPT: Incorrect status packet!\n");
 80033d0:	4807      	ldr	r0, [pc, #28]	; (80033f0 <PrintCommStatus+0x44>)
 80033d2:	e000      	b.n	80033d6 <PrintCommStatus+0x2a>
      break;

    default:
      TxDString("This is unknown error code!\n");
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <PrintCommStatus+0x48>)
 80033d6:	f7ff bfb1 	b.w	800333c <TxDString>
 80033da:	bf00      	nop
 80033dc:	08006170 	stmdaeq	r0, {r4, r5, r6, r8, sp, lr}
 80033e0:	080061a2 	stmdaeq	r0, {r1, r5, r7, r8, sp, lr}
 80033e4:	080061cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r8, sp, lr}
 80033e8:	08006203 	stmdaeq	r0, {r0, r1, r9, sp, lr}
 80033ec:	08006231 	stmdaeq	r0, {r0, r4, r5, r9, sp, lr}
 80033f0:	0800625d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sp, lr}
 80033f4:	08006287 	stmdaeq	r0, {r0, r1, r2, r7, r9, sp, lr}

080033f8 <PrintErrorCode>:
    }
}

// Print error bit of status packet
void PrintErrorCode()
{
 80033f8:	b508      	push	{r3, lr}
  if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 80033fa:	2001      	movs	r0, #1
 80033fc:	f000 ff00 	bl	8004200 <dxl_get_rxpacket_error>
 8003400:	2801      	cmp	r0, #1
 8003402:	d102      	bne.n	800340a <PrintErrorCode+0x12>
    TxDString("Input voltage error!\n");
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <PrintErrorCode+0x78>)
 8003406:	f7ff ff99 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 800340a:	2002      	movs	r0, #2
 800340c:	f000 fef8 	bl	8004200 <dxl_get_rxpacket_error>
 8003410:	2801      	cmp	r0, #1
 8003412:	d102      	bne.n	800341a <PrintErrorCode+0x22>
    TxDString("Angle limit error!\n");
 8003414:	4817      	ldr	r0, [pc, #92]	; (8003474 <PrintErrorCode+0x7c>)
 8003416:	f7ff ff91 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 800341a:	2004      	movs	r0, #4
 800341c:	f000 fef0 	bl	8004200 <dxl_get_rxpacket_error>
 8003420:	2801      	cmp	r0, #1
 8003422:	d102      	bne.n	800342a <PrintErrorCode+0x32>
    TxDString("Overheat error!\n");
 8003424:	4814      	ldr	r0, [pc, #80]	; (8003478 <PrintErrorCode+0x80>)
 8003426:	f7ff ff89 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 800342a:	2008      	movs	r0, #8
 800342c:	f000 fee8 	bl	8004200 <dxl_get_rxpacket_error>
 8003430:	2801      	cmp	r0, #1
 8003432:	d102      	bne.n	800343a <PrintErrorCode+0x42>
    TxDString("Out of range error!\n");
 8003434:	4811      	ldr	r0, [pc, #68]	; (800347c <PrintErrorCode+0x84>)
 8003436:	f7ff ff81 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 800343a:	2010      	movs	r0, #16
 800343c:	f000 fee0 	bl	8004200 <dxl_get_rxpacket_error>
 8003440:	2801      	cmp	r0, #1
 8003442:	d102      	bne.n	800344a <PrintErrorCode+0x52>
    TxDString("Checksum error!\n");
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <PrintErrorCode+0x88>)
 8003446:	f7ff ff79 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 800344a:	2020      	movs	r0, #32
 800344c:	f000 fed8 	bl	8004200 <dxl_get_rxpacket_error>
 8003450:	2801      	cmp	r0, #1
 8003452:	d102      	bne.n	800345a <PrintErrorCode+0x62>
    TxDString("Overload error!\n");
 8003454:	480b      	ldr	r0, [pc, #44]	; (8003484 <PrintErrorCode+0x8c>)
 8003456:	f7ff ff71 	bl	800333c <TxDString>

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 800345a:	2040      	movs	r0, #64	; 0x40
 800345c:	f000 fed0 	bl	8004200 <dxl_get_rxpacket_error>
 8003460:	2801      	cmp	r0, #1
 8003462:	d104      	bne.n	800346e <PrintErrorCode+0x76>
    TxDString("Instruction code error!\n");
}
 8003464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    TxDString("Overload error!\n");

  if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    TxDString("Instruction code error!\n");
 8003468:	4807      	ldr	r0, [pc, #28]	; (8003488 <PrintErrorCode+0x90>)
 800346a:	f7ff bf67 	b.w	800333c <TxDString>
 800346e:	bd08      	pop	{r3, pc}
 8003470:	080062a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, lr}
 8003474:	080062ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sp, lr}
 8003478:	080062ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sp, lr}
 800347c:	080062df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sp, lr}
 8003480:	080062f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sp, lr}
 8003484:	08006305 	stmdaeq	r0, {r0, r2, r8, r9, sp, lr}
 8003488:	08006316 	stmdaeq	r0, {r1, r2, r4, r8, r9, sp, lr}

0800348c <TxDByte16>:
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
}

void TxDByte16(byte bSentData)
{
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 8003490:	0903      	lsrs	r3, r0, #4
 8003492:	f103 0030 	add.w	r0, r3, #48	; 0x30
  if (bTmp > '9')
 8003496:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 8003498:	bf88      	it	hi
 800349a:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 800349e:	f004 040f 	and.w	r4, r4, #15
  byte bTmp;

  bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034a2:	f7ff ff3d 	bl	8003320 <TxDByte_PC>
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 80034a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
  if (bTmp > '9')
 80034aa:	2839      	cmp	r0, #57	; 0x39
    bTmp += 7;
 80034ac:	bf88      	it	hi
 80034ae:	f104 0037 	addhi.w	r0, r4, #55	; 0x37
  TxDByte_PC(bTmp);
}
 80034b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bTmp += 7;
  TxDByte_PC(bTmp);
  bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
  if (bTmp > '9')
    bTmp += 7;
  TxDByte_PC(bTmp);
 80034b6:	f7ff bf33 	b.w	8003320 <TxDByte_PC>

080034ba <TxDWord16>:
  while (*bData)
    TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
 80034ba:	b510      	push	{r4, lr}
 80034bc:	4604      	mov	r4, r0
  TxDByte16((wSentData >> 8) & 0xff);
 80034be:	0a00      	lsrs	r0, r0, #8
 80034c0:	f7ff ffe4 	bl	800348c <TxDByte16>
  TxDByte16(wSentData & 0xff);
 80034c4:	b2e0      	uxtb	r0, r4
}
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void TxDWord16(word wSentData)
{
  TxDByte16((wSentData >> 8) & 0xff);
  TxDByte16(wSentData & 0xff);
 80034ca:	f7ff bfdf 	b.w	800348c <TxDByte16>

080034ce <setSpeed>:
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
  int order;
  if(speed >= 0)
 80034ce:	1e0a      	subs	r2, r1, #0
// set rotation speed of a single motor, only works in infinite turn mode!
// speed is an integer between -1023 and 1023
// parameter motor: ID of motor
// parameter speed: rotation speed, between -1024 and 1024, sign controls direction
// speed 1 = no ratation, speed 0 = maximal speed
void setSpeed(unsigned char id, int speed) {
 80034d0:	b510      	push	{r4, lr}
  int order;
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
 80034d2:	bfb8      	it	lt
 80034d4:	f5c2 6280 	rsblt	r2, r2, #1024	; 0x400
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
 80034d8:	2120      	movs	r1, #32
 80034da:	f000 fefd 	bl	80042d8 <dxl_write_word>
  int result =  dxl_get_result();
 80034de:	f000 fe71 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80034e2:	2801      	cmp	r0, #1
  if(speed >= 0)
    order = speed;
  else
    order = 1024 - speed;
  dxl_write_word(id, AX12_CTAB_ID_MovingSpeedLo, order ) ;
  int result =  dxl_get_result();
 80034e4:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80034e6:	d00a      	beq.n	80034fe <setSpeed+0x30>
    {
      TxDString("problem, code=");
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <setSpeed+0x32>)
 80034ea:	f7ff ff27 	bl	800333c <TxDString>
      TxDWord16(result);
 80034ee:	b2a0      	uxth	r0, r4
 80034f0:	f7ff ffe3 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80034f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("problem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <setSpeed+0x36>)
 80034fa:	f7ff bf1f 	b.w	800333c <TxDString>
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	08006346 	stmdaeq	r0, {r1, r2, r6, r8, r9, sp, lr}
 8003504:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

08003508 <move_forward>:
// MOVEMENT
// --------



void move_forward(int speed) {
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
    setSpeed(MOTOR_down_left, speed);
 800350c:	2004      	movs	r0, #4
 800350e:	4621      	mov	r1, r4
 8003510:	f7ff ffdd 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, -speed);
 8003514:	4261      	negs	r1, r4
 8003516:	2003      	movs	r0, #3
}
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}



void move_forward(int speed) {
    setSpeed(MOTOR_down_left, speed);
    setSpeed(MOTOR_down_right, -speed);
 800351c:	f7ff bfd7 	b.w	80034ce <setSpeed>

08003520 <move_backward>:
}

void move_backward(int speed) {
    move_forward(-speed);
 8003520:	4240      	negs	r0, r0
 8003522:	f7ff bff1 	b.w	8003508 <move_forward>

08003526 <turn_right>:
}

void turn_right() {
 8003526:	b508      	push	{r3, lr}
    setSpeed(MOTOR_down_left, speed_turn);
 8003528:	2004      	movs	r0, #4
 800352a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800352e:	f7ff ffce 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, speed_turn);
}
 8003532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    move_forward(-speed);
}

void turn_right() {
    setSpeed(MOTOR_down_left, speed_turn);
    setSpeed(MOTOR_down_right, speed_turn);
 8003536:	2003      	movs	r0, #3
 8003538:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800353c:	f7ff bfc7 	b.w	80034ce <setSpeed>

08003540 <turn_left>:
}

void turn_left() {
 8003540:	b508      	push	{r3, lr}
    setSpeed(MOTOR_down_left, speed_turn);
 8003542:	2004      	movs	r0, #4
 8003544:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003548:	f7ff ffc1 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, speed_turn);
}
 800354c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setSpeed(MOTOR_down_right, speed_turn);
}

void turn_left() {
    setSpeed(MOTOR_down_left, speed_turn);
    setSpeed(MOTOR_down_right, speed_turn);
 8003550:	2003      	movs	r0, #3
 8003552:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003556:	f7ff bfba 	b.w	80034ce <setSpeed>

0800355a <setAngle>:

// move motor to a given angle, only works when nOt in infinite turn mode
// parameter motor: ID of motor
// parameter: angle is an integer between -1023 and 1023
// no angle should be between 300 and 360 degrees
void setAngle(unsigned char id, int angle, int speed) {
 800355a:	b538      	push	{r3, r4, r5, lr}
 800355c:	460c      	mov	r4, r1
 800355e:	4605      	mov	r5, r0
  setSpeed(id, speed);
 8003560:	4611      	mov	r1, r2
 8003562:	f7ff ffb4 	bl	80034ce <setSpeed>
  int angle_norm;

  if (angle >=0)
 8003566:	2c00      	cmp	r4, #0
    angle_norm = angle;

  else
    angle_norm = 1024 + angle;
 8003568:	bfb8      	it	lt
 800356a:	f504 6480 	addlt.w	r4, r4, #1024	; 0x400

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
 800356e:	4622      	mov	r2, r4
 8003570:	4628      	mov	r0, r5
 8003572:	211e      	movs	r1, #30
 8003574:	f000 feb0 	bl	80042d8 <dxl_write_word>
  int result =  dxl_get_result();
 8003578:	f000 fe24 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800357c:	2801      	cmp	r0, #1

  else
    angle_norm = 1024 + angle;

  dxl_write_word(id,  AX12_CTAB_ID_GoalPositionLo, angle_norm ) ;
  int result =  dxl_get_result();
 800357e:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003580:	d00a      	beq.n	8003598 <setAngle+0x3e>
    {
      TxDString("\nproblem, code==");
 8003582:	4806      	ldr	r0, [pc, #24]	; (800359c <setAngle+0x42>)
 8003584:	f7ff feda 	bl	800333c <TxDString>
      TxDWord16(result);
 8003588:	b2a0      	uxth	r0, r4
 800358a:	f7ff ff96 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 800358e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 8003592:	4803      	ldr	r0, [pc, #12]	; (80035a0 <setAngle+0x46>)
 8003594:	f7ff bed2 	b.w	800333c <TxDString>
 8003598:	bd38      	pop	{r3, r4, r5, pc}
 800359a:	bf00      	nop
 800359c:	08006334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp, lr}
 80035a0:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080035a4 <lifting>:
// SHOVEL
// ------



void lifting(int out_Angle1, int out_Angle2){
 80035a4:	4603      	mov	r3, r0
 80035a6:	b510      	push	{r4, lr}
 80035a8:	460c      	mov	r4, r1
    setAngle(MOTOR_up_left, out_Angle1, 100);
 80035aa:	2002      	movs	r0, #2
 80035ac:	4619      	mov	r1, r3
 80035ae:	2264      	movs	r2, #100	; 0x64
 80035b0:	f7ff ffd3 	bl	800355a <setAngle>
    setAngle(MOTOR_up_right, out_Angle2, 100);
 80035b4:	4621      	mov	r1, r4
}
 80035b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}



void lifting(int out_Angle1, int out_Angle2){
    setAngle(MOTOR_up_left, out_Angle1, 100);
    setAngle(MOTOR_up_right, out_Angle2, 100);
 80035ba:	2001      	movs	r0, #1
 80035bc:	2264      	movs	r2, #100	; 0x64
 80035be:	f7ff bfcc 	b.w	800355a <setAngle>

080035c2 <down_to_upping>:
    getAngle(MOTOR_up_left, &current_Angle1);
    if( abs(current_Angle1-init_Angle1) <= shovelthreshold && abs(current_Angle2-init_Angle2) <= shovelthreshold)
        *shovel_state = shovel_down;
}

void down_to_upping(int* shovel_state, int out_Angle1, int out_Angle2){
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
    lifting(out_Angle1, out_Angle2);
 80035c6:	4608      	mov	r0, r1
 80035c8:	4611      	mov	r1, r2
 80035ca:	f7ff ffeb 	bl	80035a4 <lifting>
    *shovel_state = shovel_upping;
 80035ce:	2302      	movs	r3, #2
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	bd10      	pop	{r4, pc}

080035d4 <lightOn>:
}


// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
 80035d4:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
 80035d6:	2119      	movs	r1, #25
 80035d8:	2201      	movs	r2, #1
 80035da:	f000 fe53 	bl	8004284 <dxl_write_byte>
  int result =  dxl_get_result();
 80035de:	f000 fdf1 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80035e2:	2801      	cmp	r0, #1

// turns on motor light
// parameter motor: ID of motor
void lightOn(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 1 ) ;
  int result =  dxl_get_result();
 80035e4:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80035e6:	d00a      	beq.n	80035fe <lightOn+0x2a>
    {
      TxDString("\nproblem, code==");
 80035e8:	4805      	ldr	r0, [pc, #20]	; (8003600 <lightOn+0x2c>)
 80035ea:	f7ff fea7 	bl	800333c <TxDString>
      TxDWord16(result);
 80035ee:	b2a0      	uxth	r0, r4
 80035f0:	f7ff ff63 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <lightOn+0x30>)
 80035fa:	f7ff be9f 	b.w	800333c <TxDString>
 80035fe:	bd10      	pop	{r4, pc}
 8003600:	08006334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp, lr}
 8003604:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

08003608 <lightOff>:
    }
}

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
 8003608:	b510      	push	{r4, lr}
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
 800360a:	2119      	movs	r1, #25
 800360c:	2200      	movs	r2, #0
 800360e:	f000 fe39 	bl	8004284 <dxl_write_byte>
  int result =  dxl_get_result();
 8003612:	f000 fdd7 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003616:	2801      	cmp	r0, #1

// turns off motor light
// parameter motor: ID of motor
void lightOff(unsigned char id) {
  dxl_write_byte(id, AX12_CTAB_ID_Led, 0 ) ;
  int result =  dxl_get_result();
 8003618:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 800361a:	d00a      	beq.n	8003632 <lightOff+0x2a>
    {
      TxDString("\nproblem, code==");
 800361c:	4805      	ldr	r0, [pc, #20]	; (8003634 <lightOff+0x2c>)
 800361e:	f7ff fe8d 	bl	800333c <TxDString>
      TxDWord16(result);
 8003622:	b2a0      	uxth	r0, r4
 8003624:	f7ff ff49 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code==");
      TxDWord16(result);
      TxDString("!!!\n");
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <lightOff+0x30>)
 800362e:	f7ff be85 	b.w	800333c <TxDString>
 8003632:	bd10      	pop	{r4, pc}
 8003634:	08006334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp, lr}
 8003638:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

0800363c <switch_off_lights>:
        lightOff(MOTOR_down_right);
    }
}


void switch_off_lights() {
 800363c:	b538      	push	{r3, r4, r5, lr}
    lightOff(MOTOR_down_left);
 800363e:	2004      	movs	r0, #4
    lightOff(MOTOR_down_right);

    GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003640:	4d15      	ldr	r5, [pc, #84]	; (8003698 <switch_off_lights+0x5c>)
    GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003642:	4c16      	ldr	r4, [pc, #88]	; (800369c <switch_off_lights+0x60>)
    }
}


void switch_off_lights() {
    lightOff(MOTOR_down_left);
 8003644:	f7ff ffe0 	bl	8003608 <lightOff>
    lightOff(MOTOR_down_right);
 8003648:	2003      	movs	r0, #3
 800364a:	f7ff ffdd 	bl	8003608 <lightOff>

    GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 800364e:	4628      	mov	r0, r5
 8003650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003654:	f001 f95b 	bl	800490e <GPIO_SetBits>
    GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003658:	4620      	mov	r0, r4
 800365a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800365e:	f001 f956 	bl	800490e <GPIO_SetBits>
    GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003662:	4620      	mov	r0, r4
 8003664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003668:	f001 f951 	bl	800490e <GPIO_SetBits>
    GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 800366c:	4620      	mov	r0, r4
 800366e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003672:	f001 f94c 	bl	800490e <GPIO_SetBits>
    GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);
 8003676:	4628      	mov	r0, r5
 8003678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800367c:	f001 f947 	bl	800490e <GPIO_SetBits>
    GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);
 8003680:	4628      	mov	r0, r5
 8003682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003686:	f001 f942 	bl	800490e <GPIO_SetBits>
    GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);
 800368a:	4620      	mov	r0, r4
}
 800368c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
    GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
    GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
    GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);
    GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);
    GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003694:	f001 b93b 	b.w	800490e <GPIO_SetBits>
 8003698:	40011000 	andmi	r1, r1, r0
 800369c:	40010c00 	andmi	r0, r1, r0, lsl #24

080036a0 <getSpeed>:

// returns the current motor's speed
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
 80036a0:	b510      	push	{r4, lr}
 80036a2:	460c      	mov	r4, r1
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
 80036a4:	2120      	movs	r1, #32
 80036a6:	f000 fdff 	bl	80042a8 <dxl_read_word>
 80036aa:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 80036ac:	f000 fd8a 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80036b0:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getSpeed(unsigned char id, unsigned int* outSpeed) {
  *outSpeed = dxl_read_word(id, AX12_CTAB_ID_MovingSpeedLo) ;
  int result =  dxl_get_result();
 80036b2:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80036b4:	d00a      	beq.n	80036cc <getSpeed+0x2c>
    {
      TxDString("\nproblem, code=");
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <getSpeed+0x30>)
 80036b8:	f7ff fe40 	bl	800333c <TxDString>
      TxDWord16(result);
 80036bc:	b2a0      	uxth	r0, r4
 80036be:	f7ff fefc 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80036c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80036c6:	4803      	ldr	r0, [pc, #12]	; (80036d4 <getSpeed+0x34>)
 80036c8:	f7ff be38 	b.w	800333c <TxDString>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 80036d4:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080036d8 <getAngle>:

// returns the current motor's angle,  infinite turn must be disabled to use this function
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
 80036d8:	b510      	push	{r4, lr}
 80036da:	460c      	mov	r4, r1
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
 80036dc:	2124      	movs	r1, #36	; 0x24
 80036de:	f000 fde3 	bl	80042a8 <dxl_read_word>
 80036e2:	6020      	str	r0, [r4, #0]
  int result =  dxl_get_result();
 80036e4:	f000 fd6e 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 80036e8:	2801      	cmp	r0, #1
// This functions does not return anything but stores the speed in its 2nd parameter which lust be a pointer to int
// parameter inId: ID of motor
// parameter outSpeed: pointer to which the speed will be stored
void getAngle(unsigned char id, unsigned int* outAngle) {
  *outAngle = dxl_read_word(id, AX12_CTAB_ID_PresentPosLo) ;
  int result =  dxl_get_result();
 80036ea:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 80036ec:	d00a      	beq.n	8003704 <getAngle+0x2c>
    {
      TxDString("\nproblem, code=");
 80036ee:	4806      	ldr	r0, [pc, #24]	; (8003708 <getAngle+0x30>)
 80036f0:	f7ff fe24 	bl	800333c <TxDString>
      TxDWord16(result);
 80036f4:	b2a0      	uxth	r0, r4
 80036f6:	f7ff fee0 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 80036fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80036fe:	4803      	ldr	r0, [pc, #12]	; (800370c <getAngle+0x34>)
 8003700:	f7ff be1c 	b.w	800333c <TxDString>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	bf00      	nop
 8003708:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 800370c:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

08003710 <upping_to_up>:
void lifting(int out_Angle1, int out_Angle2){
    setAngle(MOTOR_up_left, out_Angle1, 100);
    setAngle(MOTOR_up_right, out_Angle2, 100);
}

void upping_to_up(int* shovel_state, int out_Angle1, int out_Angle2){
 8003710:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003712:	460e      	mov	r6, r1
 8003714:	4604      	mov	r4, r0
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 8003716:	a901      	add	r1, sp, #4
 8003718:	2001      	movs	r0, #1
void lifting(int out_Angle1, int out_Angle2){
    setAngle(MOTOR_up_left, out_Angle1, 100);
    setAngle(MOTOR_up_right, out_Angle2, 100);
}

void upping_to_up(int* shovel_state, int out_Angle1, int out_Angle2){
 800371a:	4615      	mov	r5, r2
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 800371c:	f7ff ffdc 	bl	80036d8 <getAngle>
    getAngle(MOTOR_up_left, &current_Angle1);
 8003720:	4669      	mov	r1, sp
 8003722:	2002      	movs	r0, #2
 8003724:	f7ff ffd8 	bl	80036d8 <getAngle>
    if(abs(current_Angle1-out_Angle1) <= shovelthreshold  && abs(current_Angle2-out_Angle2) <= shovelthreshold)
 8003728:	9900      	ldr	r1, [sp, #0]
 800372a:	1b89      	subs	r1, r1, r6
 800372c:	310a      	adds	r1, #10
 800372e:	2914      	cmp	r1, #20
 8003730:	d806      	bhi.n	8003740 <upping_to_up+0x30>
 8003732:	9b01      	ldr	r3, [sp, #4]
 8003734:	1b5b      	subs	r3, r3, r5
 8003736:	330a      	adds	r3, #10
 8003738:	2b14      	cmp	r3, #20
        *shovel_state = shovel_up;
 800373a:	bf9c      	itt	ls
 800373c:	2301      	movls	r3, #1
 800373e:	6023      	strls	r3, [r4, #0]
}
 8003740:	b002      	add	sp, #8
 8003742:	bd70      	pop	{r4, r5, r6, pc}

08003744 <lowering_to_low>:
    mDelay(1000);
    lifting(init_Angle1, init_Angle2);
    *shovel_state = shovel_lowering;
}

void lowering_to_low(int* shovel_state, unsigned int init_Angle1, unsigned int init_Angle2){
 8003744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003746:	460e      	mov	r6, r1
 8003748:	4604      	mov	r4, r0
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 800374a:	a901      	add	r1, sp, #4
 800374c:	2001      	movs	r0, #1
    mDelay(1000);
    lifting(init_Angle1, init_Angle2);
    *shovel_state = shovel_lowering;
}

void lowering_to_low(int* shovel_state, unsigned int init_Angle1, unsigned int init_Angle2){
 800374e:	4615      	mov	r5, r2
    int current_Angle1;
    int current_Angle2;
    getAngle(MOTOR_up_right,&current_Angle2);
 8003750:	f7ff ffc2 	bl	80036d8 <getAngle>
    getAngle(MOTOR_up_left, &current_Angle1);
 8003754:	4669      	mov	r1, sp
 8003756:	2002      	movs	r0, #2
 8003758:	f7ff ffbe 	bl	80036d8 <getAngle>
    if( abs(current_Angle1-init_Angle1) <= shovelthreshold && abs(current_Angle2-init_Angle2) <= shovelthreshold)
 800375c:	9900      	ldr	r1, [sp, #0]
 800375e:	1b89      	subs	r1, r1, r6
 8003760:	f111 0f0a 	cmn.w	r1, #10
 8003764:	db0a      	blt.n	800377c <lowering_to_low+0x38>
 8003766:	290a      	cmp	r1, #10
 8003768:	dc08      	bgt.n	800377c <lowering_to_low+0x38>
 800376a:	9b01      	ldr	r3, [sp, #4]
 800376c:	1b5a      	subs	r2, r3, r5
 800376e:	f112 0f0a 	cmn.w	r2, #10
 8003772:	db03      	blt.n	800377c <lowering_to_low+0x38>
 8003774:	2a0a      	cmp	r2, #10
        *shovel_state = shovel_down;
 8003776:	bfdc      	itt	le
 8003778:	2300      	movle	r3, #0
 800377a:	6023      	strle	r3, [r4, #0]
}
 800377c:	b002      	add	sp, #8
 800377e:	bd70      	pop	{r4, r5, r6, pc}

08003780 <checkObstacle>:
/////////////////////////////////////////////////////

// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
 8003780:	b510      	push	{r4, lr}
 8003782:	460c      	mov	r4, r1
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
 8003784:	2120      	movs	r1, #32
 8003786:	f000 fd69 	bl	800425c <dxl_read_byte>
 800378a:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 800378c:	f000 fd1a 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 8003790:	2801      	cmp	r0, #1
// returns the obstacle detection flag (using infrared sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkObstacle(unsigned char sensor, unsigned char* infoObst) {
  *infoObst = dxl_read_byte(sensor, AXS1_CTAB_ID_ObstacleDetectionFlag) ;
  int result =  dxl_get_result();
 8003792:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003794:	d00a      	beq.n	80037ac <checkObstacle+0x2c>
    {
      TxDString("\nproblem, code=");
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <checkObstacle+0x30>)
 8003798:	f7ff fdd0 	bl	800333c <TxDString>
      TxDWord16(result);
 800379c:	b2a0      	uxth	r0, r4
 800379e:	f7ff fe8c 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }

}
 80037a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 80037a6:	4803      	ldr	r0, [pc, #12]	; (80037b4 <checkObstacle+0x34>)
 80037a8:	f7ff bdc8 	b.w	800333c <TxDString>
 80037ac:	bd10      	pop	{r4, pc}
 80037ae:	bf00      	nop
 80037b0:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 80037b4:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080037b8 <checkLuminosity>:


// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
 80037b8:	b510      	push	{r4, lr}
 80037ba:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
 80037bc:	2121      	movs	r1, #33	; 0x21
 80037be:	f000 fd4d 	bl	800425c <dxl_read_byte>
 80037c2:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 80037c4:	f000 fcfe 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80037c8:	2801      	cmp	r0, #1
// returns the light detection flag (using visual light sensors), see technical documentation
// parameter sensor: Id of AX-S1
// parameter boolLight: pointer to store data read from AX-S1
void checkLuminosity(unsigned char sensor, unsigned char* info)  {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LuminosityDetectionFlag) ;
   int result =  dxl_get_result();
 80037ca:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80037cc:	d00a      	beq.n	80037e4 <checkLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 80037ce:	4806      	ldr	r0, [pc, #24]	; (80037e8 <checkLuminosity+0x30>)
 80037d0:	f7ff fdb4 	bl	800333c <TxDString>
       TxDWord16(result);
 80037d4:	b2a0      	uxth	r0, r4
 80037d6:	f7ff fe70 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }

}
 80037da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80037de:	4803      	ldr	r0, [pc, #12]	; (80037ec <checkLuminosity+0x34>)
 80037e0:	f7ff bdac 	b.w	800333c <TxDString>
 80037e4:	bd10      	pop	{r4, pc}
 80037e6:	bf00      	nop
 80037e8:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 80037ec:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080037f0 <leftInfraRed>:

}
// returns the left infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void leftInfraRed(unsigned char sensor, unsigned char* info) {
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	460d      	mov	r5, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_LeftIRSensorData) ;
 80037f4:	211a      	movs	r1, #26
 80037f6:	f000 fd31 	bl	800425c <dxl_read_byte>
 80037fa:	7028      	strb	r0, [r5, #0]
  int result =  dxl_get_result();
 80037fc:	f000 fce2 	bl	80041c4 <dxl_get_result>
 8003800:	4604      	mov	r4, r0
  TxDString("value is  ");
 8003802:	480b      	ldr	r0, [pc, #44]	; (8003830 <leftInfraRed+0x40>)
 8003804:	f7ff fd9a 	bl	800333c <TxDString>
       TxDWord16(*info);
 8003808:	7828      	ldrb	r0, [r5, #0]
 800380a:	f7ff fe56 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
 800380e:	4809      	ldr	r0, [pc, #36]	; (8003834 <leftInfraRed+0x44>)
 8003810:	f7ff fd94 	bl	800333c <TxDString>
  if( result != COMM_RXSUCCESS	)
 8003814:	2c01      	cmp	r4, #1
 8003816:	d00a      	beq.n	800382e <leftInfraRed+0x3e>
    {
      TxDString("\nproblem, code=");
 8003818:	4807      	ldr	r0, [pc, #28]	; (8003838 <leftInfraRed+0x48>)
 800381a:	f7ff fd8f 	bl	800333c <TxDString>
      TxDWord16(result);
 800381e:	b2a0      	uxth	r0, r4
 8003820:	f7ff fe4b 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 8003824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       TxDString("!!!\n");
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <leftInfraRed+0x44>)
 800382a:	f7ff bd87 	b.w	800333c <TxDString>
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	08006355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sp, lr}
 8003834:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}
 8003838:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}

0800383c <centerInfraRed>:
}

// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
 800383c:	b510      	push	{r4, lr}
 800383e:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
 8003840:	211b      	movs	r1, #27
 8003842:	f000 fd0b 	bl	800425c <dxl_read_byte>
 8003846:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003848:	f000 fcbc 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 800384c:	2801      	cmp	r0, #1
// returns the center infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void centerInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_CenterIRSensorData) ;
   int result =  dxl_get_result();
 800384e:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003850:	d00a      	beq.n	8003868 <centerInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 8003852:	4806      	ldr	r0, [pc, #24]	; (800386c <centerInfraRed+0x30>)
 8003854:	f7ff fd72 	bl	800333c <TxDString>
       TxDWord16(result);
 8003858:	b2a0      	uxth	r0, r4
 800385a:	f7ff fe2e 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
    }
}
 800385e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <centerInfraRed+0x34>)
 8003864:	f7ff bd6a 	b.w	800333c <TxDString>
 8003868:	bd10      	pop	{r4, pc}
 800386a:	bf00      	nop
 800386c:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 8003870:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

08003874 <rightInfraRed>:
}

// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
 8003874:	b510      	push	{r4, lr}
 8003876:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
 8003878:	211c      	movs	r1, #28
 800387a:	f000 fcef 	bl	800425c <dxl_read_byte>
 800387e:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 8003880:	f000 fca0 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003884:	2801      	cmp	r0, #1
// returns the right infrared reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter sideIR: pointer to store data read from AX-S1
void rightInfraRed(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor, AXS1_CTAB_ID_RightIRSensorData) ;
   int result =  dxl_get_result();
 8003886:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003888:	d00a      	beq.n	80038a0 <rightInfraRed+0x2c>
     {
       TxDString("\nproblem, code=");
 800388a:	4806      	ldr	r0, [pc, #24]	; (80038a4 <rightInfraRed+0x30>)
 800388c:	f7ff fd56 	bl	800333c <TxDString>
       TxDWord16(result);
 8003890:	b2a0      	uxth	r0, r4
 8003892:	f7ff fe12 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800389a:	4803      	ldr	r0, [pc, #12]	; (80038a8 <rightInfraRed+0x34>)
 800389c:	f7ff bd4e 	b.w	800333c <TxDString>
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	bf00      	nop
 80038a4:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 80038a8:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080038ac <leftLuminosity>:


// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
 80038ac:	b510      	push	{r4, lr}
 80038ae:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
 80038b0:	211d      	movs	r1, #29
 80038b2:	f000 fcd3 	bl	800425c <dxl_read_byte>
 80038b6:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 80038b8:	f000 fc84 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80038bc:	2801      	cmp	r0, #1
// returns the left leight sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter leftLum: pointer to store data read from AX-S1
void leftLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_LeftLuminosity ) ;
   int result =  dxl_get_result();
 80038be:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80038c0:	d00a      	beq.n	80038d8 <leftLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <leftLuminosity+0x30>)
 80038c4:	f7ff fd3a 	bl	800333c <TxDString>
       TxDWord16(result);
 80038c8:	b2a0      	uxth	r0, r4
 80038ca:	f7ff fdf6 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 80038ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80038d2:	4803      	ldr	r0, [pc, #12]	; (80038e0 <leftLuminosity+0x34>)
 80038d4:	f7ff bd32 	b.w	800333c <TxDString>
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	bf00      	nop
 80038dc:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 80038e0:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080038e4 <centerLuminosity>:
}

// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
 80038e4:	b510      	push	{r4, lr}
 80038e6:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
 80038e8:	211e      	movs	r1, #30
 80038ea:	f000 fcb7 	bl	800425c <dxl_read_byte>
 80038ee:	7020      	strb	r0, [r4, #0]
   int result =  dxl_get_result();
 80038f0:	f000 fc68 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 80038f4:	2801      	cmp	r0, #1
// returns the central light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter centerLum: pointer to store data read from AX-S1
void centerLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_CenterLuminosity ) ;
   int result =  dxl_get_result();
 80038f6:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 80038f8:	d00a      	beq.n	8003910 <centerLuminosity+0x2c>
     {
       TxDString("\nproblem, code=");
 80038fa:	4806      	ldr	r0, [pc, #24]	; (8003914 <centerLuminosity+0x30>)
 80038fc:	f7ff fd1e 	bl	800333c <TxDString>
       TxDWord16(result);
 8003900:	b2a0      	uxth	r0, r4
 8003902:	f7ff fdda 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800390a:	4803      	ldr	r0, [pc, #12]	; (8003918 <centerLuminosity+0x34>)
 800390c:	f7ff bd16 	b.w	800333c <TxDString>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 8003918:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

0800391c <rightLuminosity>:
}

// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
 800391c:	b510      	push	{r4, lr}
 800391e:	460c      	mov	r4, r1
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
 8003920:	211f      	movs	r1, #31
 8003922:	f000 fc9b 	bl	800425c <dxl_read_byte>
 8003926:	7020      	strb	r0, [r4, #0]
  int result =  dxl_get_result();
 8003928:	f000 fc4c 	bl	80041c4 <dxl_get_result>
  if( result != COMM_RXSUCCESS	)
 800392c:	2801      	cmp	r0, #1
// returns the right light sensor reading. Is a numerical value not just a flag!
// parameter sensor: Id of AX-S1
// parameter rightLum: pointer to store data read from AX-S1
void rightLuminosity(unsigned char sensor, unsigned char* info) {
  *info = dxl_read_byte(sensor,AXS1_CTAB_ID_RightLuminosity ) ;
  int result =  dxl_get_result();
 800392e:	4604      	mov	r4, r0
  if( result != COMM_RXSUCCESS	)
 8003930:	d00a      	beq.n	8003948 <rightLuminosity+0x2c>
    {
      TxDString("\nproblem, code=");
 8003932:	4806      	ldr	r0, [pc, #24]	; (800394c <rightLuminosity+0x30>)
 8003934:	f7ff fd02 	bl	800333c <TxDString>
      TxDWord16(result);
 8003938:	b2a0      	uxth	r0, r4
 800393a:	f7ff fdbe 	bl	80034ba <TxDWord16>
      TxDString("!!!\n");
    }
}
 800393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int result =  dxl_get_result();
  if( result != COMM_RXSUCCESS	)
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
 8003942:	4803      	ldr	r0, [pc, #12]	; (8003950 <rightLuminosity+0x34>)
 8003944:	f7ff bcfa 	b.w	800333c <TxDString>
 8003948:	bd10      	pop	{r4, pc}
 800394a:	bf00      	nop
 800394c:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 8003950:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

08003954 <dataSound>:
}


// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
 8003954:	b510      	push	{r4, lr}
 8003956:	460c      	mov	r4, r1
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
 8003958:	2123      	movs	r1, #35	; 0x23
 800395a:	f000 fca5 	bl	80042a8 <dxl_read_word>
 800395e:	6020      	str	r0, [r4, #0]
   int result =  dxl_get_result();
 8003960:	f000 fc30 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 8003964:	2801      	cmp	r0, #1

// returns the amount of sound detected
// untested, see documentation of AX-S1!!
void dataSound(unsigned char sensor, unsigned int* info) {
  *info = dxl_read_word(sensor,AXS1_CTAB_ID_SoundData) ;
   int result =  dxl_get_result();
 8003966:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 8003968:	d00a      	beq.n	8003980 <dataSound+0x2c>
     {
       TxDString("\nproblem, code=");
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <dataSound+0x30>)
 800396c:	f7ff fce6 	bl	800333c <TxDString>
       TxDWord16(result);
 8003970:	b2a0      	uxth	r0, r4
 8003972:	f7ff fda2 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 8003976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 800397a:	4803      	ldr	r0, [pc, #12]	; (8003988 <dataSound+0x34>)
 800397c:	f7ff bcde 	b.w	800333c <TxDString>
 8003980:	bd10      	pop	{r4, pc}
 8003982:	bf00      	nop
 8003984:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 8003988:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

0800398c <noteBuzz>:
     }
}


//helper function
void noteBuzz(unsigned char sensor, int note) {
 800398c:	b510      	push	{r4, lr}
 800398e:	460a      	mov	r2, r1
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
 8003990:	2128      	movs	r1, #40	; 0x28
 8003992:	f000 fc77 	bl	8004284 <dxl_write_byte>
   int result =  dxl_get_result();
 8003996:	f000 fc15 	bl	80041c4 <dxl_get_result>
   if( result != COMM_RXSUCCESS	)
 800399a:	2801      	cmp	r0, #1


//helper function
void noteBuzz(unsigned char sensor, int note) {
  dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerIndex, note) ;
   int result =  dxl_get_result();
 800399c:	4604      	mov	r4, r0
   if( result != COMM_RXSUCCESS	)
 800399e:	d00a      	beq.n	80039b6 <noteBuzz+0x2a>
     {
       TxDString("\nproblem, code=");
 80039a0:	4805      	ldr	r0, [pc, #20]	; (80039b8 <noteBuzz+0x2c>)
 80039a2:	f7ff fccb 	bl	800333c <TxDString>
       TxDWord16(result);
 80039a6:	b2a0      	uxth	r0, r4
 80039a8:	f7ff fd87 	bl	80034ba <TxDWord16>
       TxDString("!!!\n");
     }
}
 80039ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   int result =  dxl_get_result();
   if( result != COMM_RXSUCCESS	)
     {
       TxDString("\nproblem, code=");
       TxDWord16(result);
       TxDString("!!!\n");
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <noteBuzz+0x30>)
 80039b2:	f7ff bcc3 	b.w	800333c <TxDString>
 80039b6:	bd10      	pop	{r4, pc}
 80039b8:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
 80039bc:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}

080039c0 <timeBuzz>:
     }
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	460c      	mov	r4, r1
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
  {
    dxl_write_byte(sensor, AXS1_CTAB_ID_BuzzerTime, time) ;
 80039c6:	4628      	mov	r0, r5
 80039c8:	2129      	movs	r1, #41	; 0x29
 80039ca:	4622      	mov	r2, r4
 80039cc:	f000 fc5a 	bl	8004284 <dxl_write_byte>
    result =  dxl_get_result();
 80039d0:	f000 fbf8 	bl	80041c4 <dxl_get_result>
}

//helper function
void timeBuzz(unsigned char sensor, int time) {
  int result=-1 ;
  while (result != COMM_RXSUCCESS)
 80039d4:	2801      	cmp	r0, #1
 80039d6:	d1f6      	bne.n	80039c6 <timeBuzz+0x6>
    {
      TxDString("\nproblem, code=");
      TxDWord16(result);
      TxDString("!!!\n");
    }
}
 80039d8:	bd38      	pop	{r3, r4, r5, pc}

080039da <Timer_Configuration>:
  USART_SendData(USART3,bTxdData);
  while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}

void Timer_Configuration(void)
{
 80039da:	b510      	push	{r4, lr}
 80039dc:	b088      	sub	sp, #32
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;

  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80039de:	a801      	add	r0, sp, #4
 80039e0:	f001 fd8b 	bl	80054fa <TIM_TimeBaseStructInit>
  TIM_OCStructInit(&TIM_OCInitStructure);
 80039e4:	a804      	add	r0, sp, #16
 80039e6:	f001 fd91 	bl	800550c <TIM_OCStructInit>

  TIM_DeInit(TIM2);
 80039ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039ee:	f001 fbfd 	bl	80051ec <TIM_DeInit>

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 80039f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80039f6:	2400      	movs	r4, #0
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80039f8:	a901      	add	r1, sp, #4
 80039fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_OCStructInit(&TIM_OCInitStructure);

  TIM_DeInit(TIM2);

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 65535;
 80039fe:	f8ad 3008 	strh.w	r3, [sp, #8]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8003a02:	f8ad 4004 	strh.w	r4, [sp, #4]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8003a06:	f8ad 400a 	strh.w	r4, [sp, #10]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003a0a:	f8ad 4006 	strh.w	r4, [sp, #6]

  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003a0e:	f001 fc51 	bl	80052b4 <TIM_TimeBaseInit>

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 8003a12:	2201      	movs	r2, #1
 8003a14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a18:	f240 21d2 	movw	r1, #722	; 0x2d2
 8003a1c:	f001 fe12 	bl	8005644 <TIM_PrescalerConfig>

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <Timer_Configuration+0x8a>)

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003a22:	a904      	add	r1, sp, #16

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 8003a24:	881b      	ldrh	r3, [r3, #0]

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003a26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 8003a2a:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Prescaler configuration */
  TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);

  /* Output Compare Timing Mode configuration: Channel1 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 8003a2e:	f8ad 4010 	strh.w	r4, [sp, #16]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 8003a32:	f8ad 4012 	strh.w	r4, [sp, #18]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8003a36:	f8ad 4018 	strh.w	r4, [sp, #24]
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;

  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003a3a:	f001 fc59 	bl	80052f0 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 8003a3e:	4621      	mov	r1, r4
 8003a40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a44:	f001 fe83 	bl	800574e <TIM_OC1PreloadConfig>

  /* TIM IT enable */
  TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a4e:	2102      	movs	r1, #2
 8003a50:	f001 fd91 	bl	8005576 <TIM_ITConfig>

  /* TIM2 enable counter */
  TIM_Cmd(TIM2, ENABLE);
 8003a54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a58:	2101      	movs	r1, #1
 8003a5a:	f001 fd72 	bl	8005542 <TIM_Cmd>
}
 8003a5e:	b008      	add	sp, #32
 8003a60:	bd10      	pop	{r4, pc}
 8003a62:	bf00      	nop
 8003a64:	20000000 	andcs	r0, r0, r0

08003a68 <TimerInterrupt_1ms>:

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 8003a68:	b510      	push	{r4, lr}
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 8003a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a6e:	2102      	movs	r1, #2
 8003a70:	f002 f899 	bl	8005ba6 <TIM_GetITStatus>
 8003a74:	b1e8      	cbz	r0, 8003ab2 <TimerInterrupt_1ms+0x4a>
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 8003a76:	2102      	movs	r1, #2
 8003a78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a7c:	f002 f89e 	bl	8005bbc <TIM_ClearITPendingBit>

      capture = TIM_GetCapture1(TIM2);
 8003a80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a84:	f002 f872 	bl	8005b6c <TIM_GetCapture1>
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <TimerInterrupt_1ms+0x4c>)
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <TimerInterrupt_1ms+0x50>)
{
  if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
    {
      TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);

      capture = TIM_GetCapture1(TIM2);
 8003a8c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
      TIM_SetCompare1(TIM2, capture + CCR1_Val);
 8003a90:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a9a:	4419      	add	r1, r3
 8003a9c:	b289      	uxth	r1, r1
 8003a9e:	f001 ff92 	bl	80059c6 <TIM_SetCompare1>

      if(gw1msCounter > 0)
 8003aa2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003aa6:	b123      	cbz	r3, 8003ab2 <TimerInterrupt_1ms+0x4a>
	gw1msCounter--;
 8003aa8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003aac:	3b01      	subs	r3, #1
 8003aae:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 8003ab2:	bd10      	pop	{r4, pc}
 8003ab4:	20000018 	andcs	r0, r0, r8, lsl r0
 8003ab8:	20000000 	andcs	r0, r0, r0

08003abc <RxD0Interrupt>:
    }
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 8003abc:	b538      	push	{r3, r4, r5, lr}
  if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003abe:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <RxD0Interrupt+0x28>)
 8003ac0:	f240 5125 	movw	r1, #1317	; 0x525
 8003ac4:	f002 f9f9 	bl	8005eba <USART_GetITStatus>
 8003ac8:	b158      	cbz	r0, 8003ae2 <RxD0Interrupt+0x26>
    gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 8003aca:	4d07      	ldr	r5, [pc, #28]	; (8003ae8 <RxD0Interrupt+0x2c>)
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <RxD0Interrupt+0x28>)
 8003ace:	782b      	ldrb	r3, [r5, #0]
 8003ad0:	b2dc      	uxtb	r4, r3
 8003ad2:	1c63      	adds	r3, r4, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	702b      	strb	r3, [r5, #0]
 8003ad8:	f002 f98e 	bl	8005df8 <USART_ReceiveData>
 8003adc:	442c      	add	r4, r5
 8003ade:	b2c0      	uxtb	r0, r0
 8003ae0:	70a0      	strb	r0, [r4, #2]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	40013800 	andmi	r3, r1, r0, lsl #16
 8003ae8:	20000018 	andcs	r0, r0, r8, lsl r0

08003aec <SysTick_Configuration>:
}

void SysTick_Configuration(void)
{
 8003aec:	b508      	push	{r3, lr}
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);
 8003aee:	f242 3028 	movw	r0, #9000	; 0x2328
 8003af2:	f001 fb0b 	bl	800510c <SysTick_SetReload>

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
}
 8003af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
  SysTick_SetReload(9000);

  /* Enable SysTick interrupt */
  SysTick_ITConfig(ENABLE);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f001 bb20 	b.w	8005140 <SysTick_ITConfig>

08003b00 <__ISR_DELAY>:
}

void __ISR_DELAY(void)
{
  if (gwTimingDelay != 0x00)
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <__ISR_DELAY+0x14>)
 8003b02:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003b06:	b122      	cbz	r2, 8003b12 <__ISR_DELAY+0x12>
    gwTimingDelay--;
 8003b08:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8003b12:	4770      	bx	lr
 8003b14:	20000018 	andcs	r0, r0, r8, lsl r0

08003b18 <mDelay>:
}

void mDelay(u32 nTime)
{
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	4604      	mov	r4, r0
  /* Enable the SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Enable);
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f001 fafb 	bl	8005118 <SysTick_CounterCmd>

  gwTimingDelay = nTime;
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <mDelay+0x2c>)
 8003b24:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c

  while(gwTimingDelay != 0);
 8003b28:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8003b2c:	2c00      	cmp	r4, #0
 8003b2e:	d1fb      	bne.n	8003b28 <mDelay+0x10>

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
 8003b30:	f06f 0001 	mvn.w	r0, #1
 8003b34:	f001 faf0 	bl	8005118 <SysTick_CounterCmd>
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 8003b38:	4620      	mov	r0, r4
}
 8003b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(gwTimingDelay != 0);

  /* Disable SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Disable);
  /* Clear SysTick Counter */
  SysTick_CounterCmd(SysTick_Counter_Clear);
 8003b3e:	f001 baeb 	b.w	8005118 <SysTick_CounterCmd>
 8003b42:	bf00      	nop
 8003b44:	20000018 	andcs	r0, r0, r8, lsl r0

08003b48 <buzzWithDelay>:
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	4605      	mov	r5, r0
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 8003b4e:	21fe      	movs	r1, #254	; 0xfe
    }
}

// play a note of given duration on the AX-S1.
// tim is in milliseconds, so 500 means half a second
void buzzWithDelay(unsigned char sensor, int note, int time) {
 8003b50:	4616      	mov	r6, r2
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
 8003b52:	f7ff ff35 	bl	80039c0 <timeBuzz>
  noteBuzz(sensor, note);
 8003b56:	4621      	mov	r1, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7ff ff17 	bl	800398c <noteBuzz>

  for (k=0; k<time; k++) {
 8003b5e:	2400      	movs	r4, #0
 8003b60:	42b4      	cmp	r4, r6
 8003b62:	da04      	bge.n	8003b6e <buzzWithDelay+0x26>
       mDelay(1) ;
 8003b64:	2001      	movs	r0, #1
 8003b66:	f7ff ffd7 	bl	8003b18 <mDelay>
  int k = 0;
  // infinite duration buzz
  timeBuzz(sensor,254);
  noteBuzz(sensor, note);

  for (k=0; k<time; k++) {
 8003b6a:	3401      	adds	r4, #1
 8003b6c:	e7f8      	b.n	8003b60 <buzzWithDelay+0x18>
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 8003b6e:	4628      	mov	r0, r5
  return ;

}
 8003b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  for (k=0; k<time; k++) {
       mDelay(1) ;
  }

  // shut off buzz
  timeBuzz(sensor,0) ;
 8003b74:	2100      	movs	r1, #0
 8003b76:	f7ff bf23 	b.w	80039c0 <timeBuzz>

08003b7a <init_music>:
    USART_Configuration(USART_PC, Baudrate_PC);
}


// delay -> 1,5s
void init_music() {                  //Totally spies
 8003b7a:	b508      	push	{r3, lr}

    buzzWithDelay(SENSOR, 19, 125);
 8003b7c:	2064      	movs	r0, #100	; 0x64
 8003b7e:	2113      	movs	r1, #19
 8003b80:	227d      	movs	r2, #125	; 0x7d
 8003b82:	f7ff ffe1 	bl	8003b48 <buzzWithDelay>
    buzzWithDelay(SENSOR, 16, 125);
 8003b86:	2064      	movs	r0, #100	; 0x64
 8003b88:	2110      	movs	r1, #16
 8003b8a:	227d      	movs	r2, #125	; 0x7d
 8003b8c:	f7ff ffdc 	bl	8003b48 <buzzWithDelay>
    buzzWithDelay(SENSOR, 16, 250);
 8003b90:	2110      	movs	r1, #16
 8003b92:	22fa      	movs	r2, #250	; 0xfa
 8003b94:	2064      	movs	r0, #100	; 0x64
 8003b96:	f7ff ffd7 	bl	8003b48 <buzzWithDelay>
    mDelay(500);
 8003b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b9e:	f7ff ffbb 	bl	8003b18 <mDelay>
    
    buzzWithDelay(SENSOR, 14, 125);
 8003ba2:	2064      	movs	r0, #100	; 0x64
 8003ba4:	210e      	movs	r1, #14
 8003ba6:	227d      	movs	r2, #125	; 0x7d
 8003ba8:	f7ff ffce 	bl	8003b48 <buzzWithDelay>
    buzzWithDelay(SENSOR, 16, 125);
 8003bac:	2064      	movs	r0, #100	; 0x64
 8003bae:	2110      	movs	r1, #16
 8003bb0:	227d      	movs	r2, #125	; 0x7d
 8003bb2:	f7ff ffc9 	bl	8003b48 <buzzWithDelay>
    buzzWithDelay(SENSOR, 19, 250);
}
 8003bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    buzzWithDelay(SENSOR, 16, 250);
    mDelay(500);
    
    buzzWithDelay(SENSOR, 14, 125);
    buzzWithDelay(SENSOR, 16, 125);
    buzzWithDelay(SENSOR, 19, 250);
 8003bba:	2064      	movs	r0, #100	; 0x64
 8003bbc:	2113      	movs	r1, #19
 8003bbe:	22fa      	movs	r2, #250	; 0xfa
 8003bc0:	f7ff bfc2 	b.w	8003b48 <buzzWithDelay>

08003bc4 <init_music2>:
}

// delay -> 2,5s
void init_music2(){                   //John cena
 8003bc4:	b508      	push	{r3, lr}
    buzzWithDelay(SENSOR, 22, 125);
 8003bc6:	2116      	movs	r1, #22
 8003bc8:	227d      	movs	r2, #125	; 0x7d
 8003bca:	2064      	movs	r0, #100	; 0x64
 8003bcc:	f7ff ffbc 	bl	8003b48 <buzzWithDelay>
    mDelay(125);
 8003bd0:	207d      	movs	r0, #125	; 0x7d
 8003bd2:	f7ff ffa1 	bl	8003b18 <mDelay>
    buzzWithDelay(SENSOR, 24, 125);
 8003bd6:	2064      	movs	r0, #100	; 0x64
 8003bd8:	2118      	movs	r1, #24
 8003bda:	227d      	movs	r2, #125	; 0x7d
 8003bdc:	f7ff ffb4 	bl	8003b48 <buzzWithDelay>
    buzzWithDelay(SENSOR, 20, 125);
 8003be0:	2114      	movs	r1, #20
 8003be2:	227d      	movs	r2, #125	; 0x7d
 8003be4:	2064      	movs	r0, #100	; 0x64
 8003be6:	f7ff ffaf 	bl	8003b48 <buzzWithDelay>
    mDelay(125);
 8003bea:	207d      	movs	r0, #125	; 0x7d
 8003bec:	f7ff ff94 	bl	8003b18 <mDelay>
    
    // trop long les sons ?
    buzzWithDelay(SENSOR, 22, 500);
 8003bf0:	2116      	movs	r1, #22
 8003bf2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf6:	2064      	movs	r0, #100	; 0x64
 8003bf8:	f7ff ffa6 	bl	8003b48 <buzzWithDelay>
    mDelay(125);
 8003bfc:	207d      	movs	r0, #125	; 0x7d
 8003bfe:	f7ff ff8b 	bl	8003b18 <mDelay>
    buzzWithDelay(SENSOR, 25, 125);
 8003c02:	2119      	movs	r1, #25
 8003c04:	227d      	movs	r2, #125	; 0x7d
 8003c06:	2064      	movs	r0, #100	; 0x64
 8003c08:	f7ff ff9e 	bl	8003b48 <buzzWithDelay>
    mDelay(125);
 8003c0c:	207d      	movs	r0, #125	; 0x7d
 8003c0e:	f7ff ff83 	bl	8003b18 <mDelay>
    buzzWithDelay(SENSOR, 24, 125);
 8003c12:	2064      	movs	r0, #100	; 0x64
 8003c14:	2118      	movs	r1, #24
 8003c16:	227d      	movs	r2, #125	; 0x7d
 8003c18:	f7ff ff96 	bl	8003b48 <buzzWithDelay>
    buzzWithDelay(SENSOR, 20, 125);
 8003c1c:	2114      	movs	r1, #20
 8003c1e:	227d      	movs	r2, #125	; 0x7d
 8003c20:	2064      	movs	r0, #100	; 0x64
 8003c22:	f7ff ff91 	bl	8003b48 <buzzWithDelay>
    mDelay(125);
 8003c26:	207d      	movs	r0, #125	; 0x7d
 8003c28:	f7ff ff76 	bl	8003b18 <mDelay>
    buzzWithDelay(SENSOR, 22, 500);
 8003c2c:	2064      	movs	r0, #100	; 0x64
 8003c2e:	2116      	movs	r1, #22
 8003c30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c34:	f7ff ff88 	bl	8003b48 <buzzWithDelay>
    mDelay(125);
}
 8003c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    mDelay(125);
    buzzWithDelay(SENSOR, 24, 125);
    buzzWithDelay(SENSOR, 20, 125);
    mDelay(125);
    buzzWithDelay(SENSOR, 22, 500);
    mDelay(125);
 8003c3c:	207d      	movs	r0, #125	; 0x7d
 8003c3e:	f7ff bf6b 	b.w	8003b18 <mDelay>

08003c42 <init_lights>:
}


// delay -> 1,4s
void init_lights() {
 8003c42:	b510      	push	{r4, lr}
 8003c44:	2402      	movs	r4, #2
    int z ;
    for(z = 0; z < 2; z++)
    {   
        TxDString("Motor lights on...\n") ;
 8003c46:	483a      	ldr	r0, [pc, #232]	; (8003d30 <init_lights+0xee>)
 8003c48:	f7ff fb78 	bl	800333c <TxDString>
        lightOn(MOTOR_down_left);
 8003c4c:	2004      	movs	r0, #4
 8003c4e:	f7ff fcc1 	bl	80035d4 <lightOn>
        lightOn(MOTOR_down_right);
 8003c52:	2003      	movs	r0, #3
 8003c54:	f7ff fcbe 	bl	80035d4 <lightOn>

        TxDString("blink!!\n") ;
 8003c58:	4836      	ldr	r0, [pc, #216]	; (8003d34 <init_lights+0xf2>)
 8003c5a:	f7ff fb6f 	bl	800333c <TxDString>
        GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003c5e:	4836      	ldr	r0, [pc, #216]	; (8003d38 <init_lights+0xf6>)
 8003c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c64:	f000 fe53 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c6c:	4833      	ldr	r0, [pc, #204]	; (8003d3c <init_lights+0xfa>)
 8003c6e:	f000 fe50 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f7ff ff50 	bl	8003b18 <mDelay>

        GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003c78:	4830      	ldr	r0, [pc, #192]	; (8003d3c <init_lights+0xfa>)
 8003c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c7e:	f000 fe46 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c86:	482d      	ldr	r0, [pc, #180]	; (8003d3c <init_lights+0xfa>)
 8003c88:	f000 fe43 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003c8c:	2064      	movs	r0, #100	; 0x64
 8003c8e:	f7ff ff43 	bl	8003b18 <mDelay>

        GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8003c92:	482a      	ldr	r0, [pc, #168]	; (8003d3c <init_lights+0xfa>)
 8003c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c98:	f000 fe39 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8003c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ca0:	4826      	ldr	r0, [pc, #152]	; (8003d3c <init_lights+0xfa>)
 8003ca2:	f000 fe36 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003ca6:	2064      	movs	r0, #100	; 0x64
 8003ca8:	f7ff ff36 	bl	8003b18 <mDelay>

        GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 8003cac:	4823      	ldr	r0, [pc, #140]	; (8003d3c <init_lights+0xfa>)
 8003cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cb2:	f000 fe2c 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
 8003cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cba:	481f      	ldr	r0, [pc, #124]	; (8003d38 <init_lights+0xf6>)
 8003cbc:	f000 fe29 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003cc0:	2064      	movs	r0, #100	; 0x64
 8003cc2:	f7ff ff29 	bl	8003b18 <mDelay>

        GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);
 8003cc6:	481c      	ldr	r0, [pc, #112]	; (8003d38 <init_lights+0xf6>)
 8003cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ccc:	f000 fe1f 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);
 8003cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cd4:	4818      	ldr	r0, [pc, #96]	; (8003d38 <init_lights+0xf6>)
 8003cd6:	f000 fe1c 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003cda:	2064      	movs	r0, #100	; 0x64
 8003cdc:	f7ff ff1c 	bl	8003b18 <mDelay>

        GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);
 8003ce0:	4815      	ldr	r0, [pc, #84]	; (8003d38 <init_lights+0xf6>)
 8003ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ce6:	f000 fe12 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cee:	4813      	ldr	r0, [pc, #76]	; (8003d3c <init_lights+0xfa>)
 8003cf0:	f000 fe0f 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003cf4:	2064      	movs	r0, #100	; 0x64
 8003cf6:	f7ff ff0f 	bl	8003b18 <mDelay>

        GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003cfa:	4810      	ldr	r0, [pc, #64]	; (8003d3c <init_lights+0xfa>)
 8003cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d00:	f000 fe05 	bl	800490e <GPIO_SetBits>
        GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d08:	480b      	ldr	r0, [pc, #44]	; (8003d38 <init_lights+0xf6>)
 8003d0a:	f000 fe02 	bl	8004912 <GPIO_ResetBits>
        mDelay(100);
 8003d0e:	2064      	movs	r0, #100	; 0x64
 8003d10:	f7ff ff02 	bl	8003b18 <mDelay>

        TxDString("Motor lights oFF...\n") ;
 8003d14:	480a      	ldr	r0, [pc, #40]	; (8003d40 <init_lights+0xfe>)
 8003d16:	f7ff fb11 	bl	800333c <TxDString>
        lightOff(MOTOR_down_left);
 8003d1a:	2004      	movs	r0, #4
 8003d1c:	f7ff fc74 	bl	8003608 <lightOff>
        lightOff(MOTOR_down_right);
 8003d20:	2003      	movs	r0, #3
 8003d22:	f7ff fc71 	bl	8003608 <lightOff>


// delay -> 1,4s
void init_lights() {
    int z ;
    for(z = 0; z < 2; z++)
 8003d26:	2c01      	cmp	r4, #1
 8003d28:	d001      	beq.n	8003d2e <init_lights+0xec>
 8003d2a:	2401      	movs	r4, #1
 8003d2c:	e78b      	b.n	8003c46 <init_lights+0x4>

        TxDString("Motor lights oFF...\n") ;
        lightOff(MOTOR_down_left);
        lightOff(MOTOR_down_right);
    }
}
 8003d2e:	bd10      	pop	{r4, pc}
 8003d30:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
 8003d34:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
 8003d38:	40011000 	andmi	r1, r1, r0
 8003d3c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003d40:	0800637d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sp, lr}

08003d44 <up_to_lowering>:
    getAngle(MOTOR_up_left, &current_Angle1);
    if(abs(current_Angle1-out_Angle1) <= shovelthreshold  && abs(current_Angle2-out_Angle2) <= shovelthreshold)
        *shovel_state = shovel_up;
}

void up_to_lowering(int* shovel_state, unsigned int init_Angle1, unsigned int init_Angle2){
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4615      	mov	r5, r2
 8003d48:	460e      	mov	r6, r1
 8003d4a:	4604      	mov	r4, r0
    setSpeed(MOTOR_down_left, speed_ini);
 8003d4c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8003d50:	2004      	movs	r0, #4
 8003d52:	f7ff fbbc 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, -speed_ini);
 8003d56:	4907      	ldr	r1, [pc, #28]	; (8003d74 <up_to_lowering+0x30>)
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f7ff fbb8 	bl	80034ce <setSpeed>
    mDelay(1000);
 8003d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d62:	f7ff fed9 	bl	8003b18 <mDelay>
    lifting(init_Angle1, init_Angle2);
 8003d66:	4630      	mov	r0, r6
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7ff fc1b 	bl	80035a4 <lifting>
    *shovel_state = shovel_lowering;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	fffffd44 			; <UNDEFINED> instruction: 0xfffffd44

08003d78 <detectlb>:

// -----------------
// CONTOUR DETECTION
// -----------------

void detectlb(int thresholdLight, unsigned char *leftfield){
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	460d      	mov	r5, r1
 8003d7c:	4604      	mov	r4, r0
    leftInfraRed(SENSOR, leftfield);
 8003d7e:	2064      	movs	r0, #100	; 0x64
 8003d80:	f7ff fd36 	bl	80037f0 <leftInfraRed>
    if (*leftfield >= thresholdLight){
 8003d84:	782b      	ldrb	r3, [r5, #0]
 8003d86:	42a3      	cmp	r3, r4
 8003d88:	db15      	blt.n	8003db6 <detectlb+0x3e>
        switch_off_lights();
 8003d8a:	f7ff fc57 	bl	800363c <switch_off_lights>
        GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
 8003d8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d92:	4809      	ldr	r0, [pc, #36]	; (8003db8 <detectlb+0x40>)
 8003d94:	f000 fdbd 	bl	8004912 <GPIO_ResetBits>
    setSpeed(MOTOR_down_left, speed);
    setSpeed(MOTOR_down_right, -speed);
}

void move_backward(int speed) {
    move_forward(-speed);
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <detectlb+0x44>)
 8003d9a:	f7ff fbb5 	bl	8003508 <move_forward>
    leftInfraRed(SENSOR, leftfield);
    if (*leftfield >= thresholdLight){
        switch_off_lights();
        GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
        move_backward(speed_max);
        mDelay(1000);
 8003d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da2:	f7ff feb9 	bl	8003b18 <mDelay>
        turn_right();
 8003da6:	f7ff fbbe 	bl	8003526 <turn_right>
        mDelay(3000);
    }
}
 8003daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        switch_off_lights();
        GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
        move_backward(speed_max);
        mDelay(1000);
        turn_right();
        mDelay(3000);
 8003dae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003db2:	f7ff beb1 	b.w	8003b18 <mDelay>
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	40011000 	andmi	r1, r1, r0
 8003dbc:	fffffc01 			; <UNDEFINED> instruction: 0xfffffc01

08003dc0 <USART_Configuration>:
{
  USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 8003dc0:	b530      	push	{r4, r5, lr}
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	b085      	sub	sp, #20

  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);
 8003dc8:	4668      	mov	r0, sp
 8003dca:	f001 ff89 	bl	8005ce0 <USART_StructInit>


  USART_InitStructure.USART_BaudRate = baudrate;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8ad 3004 	strh.w	r3, [sp, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003dd4:	f8ad 3006 	strh.w	r3, [sp, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003dd8:	f8ad 3008 	strh.w	r3, [sp, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003ddc:	f8ad 300c 	strh.w	r3, [sp, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003de0:	230c      	movs	r3, #12
  USART_InitTypeDef USART_InitStructure;

  USART_StructInit(&USART_InitStructure);


  USART_InitStructure.USART_BaudRate = baudrate;
 8003de2:	9500      	str	r5, [sp, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No ;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003de4:	f8ad 300a 	strh.w	r3, [sp, #10]


  if( PORT == USART_DXL )
 8003de8:	b98c      	cbnz	r4, 8003e0e <USART_Configuration+0x4e>
    {
      USART_DeInit(USART1);
 8003dea:	4812      	ldr	r0, [pc, #72]	; (8003e34 <USART_Configuration+0x74>)
 8003dec:	f001 feea 	bl	8005bc4 <USART_DeInit>
      mDelay(10);
 8003df0:	200a      	movs	r0, #10
 8003df2:	f7ff fe91 	bl	8003b18 <mDelay>
      /* Configure the USART1 */
      USART_Init(USART1, &USART_InitStructure);
 8003df6:	480f      	ldr	r0, [pc, #60]	; (8003e34 <USART_Configuration+0x74>)
 8003df8:	4669      	mov	r1, sp
 8003dfa:	f001 ff2d 	bl	8005c58 <USART_Init>

      /* Enable USART1 Receive and Transmit interrupts */
      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <USART_Configuration+0x74>)
 8003e00:	f240 5125 	movw	r1, #1317	; 0x525
 8003e04:	2201      	movs	r2, #1
 8003e06:	f001 ff98 	bl	8005d3a <USART_ITConfig>
      //USART_ITConfig(USART1, USART_IT_TC, ENABLE);

      /* Enable the USART1 */
      USART_Cmd(USART1, ENABLE);
 8003e0a:	480a      	ldr	r0, [pc, #40]	; (8003e34 <USART_Configuration+0x74>)
 8003e0c:	e00c      	b.n	8003e28 <USART_Configuration+0x68>
    }

  else if( PORT == USART_PC )
 8003e0e:	2c02      	cmp	r4, #2
 8003e10:	d10d      	bne.n	8003e2e <USART_Configuration+0x6e>
    {
      USART_DeInit(USART3);
 8003e12:	4809      	ldr	r0, [pc, #36]	; (8003e38 <USART_Configuration+0x78>)
 8003e14:	f001 fed6 	bl	8005bc4 <USART_DeInit>
      mDelay(10);
 8003e18:	200a      	movs	r0, #10
 8003e1a:	f7ff fe7d 	bl	8003b18 <mDelay>
      /* Configure the USART3 */
      USART_Init(USART3, &USART_InitStructure);
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <USART_Configuration+0x78>)
 8003e20:	4669      	mov	r1, sp
 8003e22:	f001 ff19 	bl	8005c58 <USART_Init>
      /* Enable USART3 Receive and Transmit interrupts */
      //USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
      //USART_ITConfig(USART3, USART_IT_TC, ENABLE);

      /* Enable the USART3 */
      USART_Cmd(USART3, ENABLE);
 8003e26:	4804      	ldr	r0, [pc, #16]	; (8003e38 <USART_Configuration+0x78>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	f001 ff7a 	bl	8005d22 <USART_Cmd>
    }
}
 8003e2e:	b005      	add	sp, #20
 8003e30:	bd30      	pop	{r4, r5, pc}
 8003e32:	bf00      	nop
 8003e34:	40013800 	andmi	r3, r1, r0, lsl #16
 8003e38:	40004800 	andmi	r4, r0, r0, lsl #16

08003e3c <init_config>:
// --------------



// DO NOT TOUCH
void init_config() {
 8003e3c:	b508      	push	{r3, lr}
    /* System Clocks Configuration */
    RCC_Configuration();
 8003e3e:	f7ff f979 	bl	8003134 <RCC_Configuration>

    /* NVIC configuration */
    NVIC_Configuration();
 8003e42:	f7ff f9b9 	bl	80031b8 <NVIC_Configuration>

    /* GPIO configuration */
    GPIO_Configuration();
 8003e46:	f7ff f9de 	bl	8003206 <GPIO_Configuration>

    SysTick_Configuration();
 8003e4a:	f7ff fe4f 	bl	8003aec <SysTick_Configuration>

    Timer_Configuration();
 8003e4e:	f7ff fdc4 	bl	80039da <Timer_Configuration>

    dxl_initialize( 0, 1 );
 8003e52:	2101      	movs	r1, #1
 8003e54:	2000      	movs	r0, #0
 8003e56:	f000 f897 	bl	8003f88 <dxl_initialize>
    USART_Configuration(USART_PC, Baudrate_PC);
 8003e5a:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <init_config+0x2c>)
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	6859      	ldr	r1, [r3, #4]
}
 8003e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SysTick_Configuration();

    Timer_Configuration();

    dxl_initialize( 0, 1 );
    USART_Configuration(USART_PC, Baudrate_PC);
 8003e64:	f7ff bfac 	b.w	8003dc0 <USART_Configuration>
 8003e68:	20000000 	andcs	r0, r0, r0

08003e6c <USART1_Configuration>:
  GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
  GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 8003e6c:	4601      	mov	r1, r0
  USART_Configuration(USART_DXL, baudrate);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7ff bfa6 	b.w	8003dc0 <USART_Configuration>

08003e74 <StartDiscount>:
  SysTick_CounterCmd(SysTick_Counter_Clear);
}

void StartDiscount(s32 StartTime)
{
  gw1msCounter = StartTime;
 8003e74:	4b01      	ldr	r3, [pc, #4]	; (8003e7c <StartDiscount+0x8>)
 8003e76:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
 8003e7a:	4770      	bx	lr
 8003e7c:	20000018 	andcs	r0, r0, r8, lsl r0

08003e80 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
  // Check timeout
  // Return: 0 is false, 1 is true(timeout occurred)

  if(gw1msCounter == 0)
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <CheckTimeOut+0x10>)
 8003e82:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    return 1;
  else
    return 0;
}
 8003e86:	fab0 f080 	clz	r0, r0
 8003e8a:	0940      	lsrs	r0, r0, #5
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000018 	andcs	r0, r0, r8, lsl r0

08003e94 <NMIException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
 8003e94:	4770      	bx	lr

08003e96 <HardFaultException>:
void HardFaultException(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003e96:	e7fe      	b.n	8003e96 <HardFaultException>

08003e98 <MemManageException>:
void MemManageException(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003e98:	e7fe      	b.n	8003e98 <MemManageException>

08003e9a <BusFaultException>:
void BusFaultException(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003e9a:	e7fe      	b.n	8003e9a <BusFaultException>

08003e9c <UsageFaultException>:
void UsageFaultException(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003e9c:	e7fe      	b.n	8003e9c <UsageFaultException>

08003e9e <DebugMonitor>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
 8003e9e:	4770      	bx	lr

08003ea0 <SVCHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
 8003ea0:	4770      	bx	lr

08003ea2 <PendSVC>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
 8003ea2:	4770      	bx	lr

08003ea4 <SysTickHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
	__ISR_DELAY();
 8003ea4:	f7ff be2c 	b.w	8003b00 <__ISR_DELAY>

08003ea8 <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 8003ea8:	4770      	bx	lr

08003eaa <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 8003eaa:	4770      	bx	lr

08003eac <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8003eac:	4770      	bx	lr

08003eae <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8003eae:	4770      	bx	lr

08003eb0 <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 8003eb0:	4770      	bx	lr

08003eb2 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8003eb2:	4770      	bx	lr

08003eb4 <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8003eb4:	4770      	bx	lr

08003eb6 <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 8003eb6:	4770      	bx	lr

08003eb8 <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8003eb8:	4770      	bx	lr

08003eba <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8003eba:	4770      	bx	lr

08003ebc <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8003ebc:	4770      	bx	lr

08003ebe <DMA1_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8003ebe:	4770      	bx	lr

08003ec0 <DMA1_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8003ec0:	4770      	bx	lr

08003ec2 <DMA1_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8003ec2:	4770      	bx	lr

08003ec4 <DMA1_Channel4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 8003ec4:	4770      	bx	lr

08003ec6 <DMA1_Channel5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8003ec6:	4770      	bx	lr

08003ec8 <DMA1_Channel6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 8003ec8:	4770      	bx	lr

08003eca <DMA1_Channel7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8003eca:	4770      	bx	lr

08003ecc <ADC1_2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8003ecc:	4770      	bx	lr

08003ece <USB_HP_CAN_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 8003ece:	4770      	bx	lr

08003ed0 <USB_LP_CAN_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003ed0:	4770      	bx	lr

08003ed2 <CAN_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8003ed2:	4770      	bx	lr

08003ed4 <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8003ed4:	4770      	bx	lr

08003ed6 <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8003ed6:	4770      	bx	lr

08003ed8 <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 8003ed8:	4770      	bx	lr

08003eda <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8003eda:	4770      	bx	lr

08003edc <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 8003edc:	4770      	bx	lr

08003ede <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8003ede:	4770      	bx	lr

08003ee0 <TIM2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
	TimerInterrupt_1ms();
 8003ee0:	f7ff bdc2 	b.w	8003a68 <TimerInterrupt_1ms>

08003ee4 <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 8003ee4:	4770      	bx	lr

08003ee6 <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 8003ee6:	4770      	bx	lr

08003ee8 <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8003ee8:	4770      	bx	lr

08003eea <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8003eea:	4770      	bx	lr

08003eec <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8003eec:	4770      	bx	lr

08003eee <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8003eee:	4770      	bx	lr

08003ef0 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8003ef0:	4770      	bx	lr

08003ef2 <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8003ef2:	4770      	bx	lr

08003ef4 <USART1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
	RxD0Interrupt();
 8003ef4:	f7ff bde2 	b.w	8003abc <RxD0Interrupt>

08003ef8 <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8003ef8:	4770      	bx	lr

08003efa <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8003efa:	4770      	bx	lr

08003efc <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8003efc:	4770      	bx	lr

08003efe <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8003efe:	4770      	bx	lr

08003f00 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8003f00:	4770      	bx	lr

08003f02 <TIM8_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
 8003f02:	4770      	bx	lr

08003f04 <TIM8_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
 8003f04:	4770      	bx	lr

08003f06 <TIM8_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
 8003f06:	4770      	bx	lr

08003f08 <TIM8_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
 8003f08:	4770      	bx	lr

08003f0a <ADC3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
 8003f0a:	4770      	bx	lr

08003f0c <FSMC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
 8003f0c:	4770      	bx	lr

08003f0e <SDIO_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
 8003f0e:	4770      	bx	lr

08003f10 <TIM5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
 8003f10:	4770      	bx	lr

08003f12 <SPI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
 8003f12:	4770      	bx	lr

08003f14 <UART4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
 8003f14:	4770      	bx	lr

08003f16 <UART5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
 8003f16:	4770      	bx	lr

08003f18 <TIM6_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
 8003f18:	4770      	bx	lr

08003f1a <TIM7_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
 8003f1a:	4770      	bx	lr

08003f1c <DMA2_Channel1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
 8003f1c:	4770      	bx	lr

08003f1e <DMA2_Channel2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
 8003f1e:	4770      	bx	lr

08003f20 <DMA2_Channel3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
 8003f20:	4770      	bx	lr

08003f22 <DMA2_Channel4_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
 8003f22:	4770      	bx	lr

08003f24 <dxl_hal_open>:
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 8003f24:	b508      	push	{r3, lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003f26:	4608      	mov	r0, r1
 8003f28:	f7ff ffa0 	bl	8003e6c <USART1_Configuration>
	return 1;
}
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	bd08      	pop	{r3, pc}

08003f30 <dxl_hal_close>:
void dxl_hal_close()
{
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 8003f30:	f7ff b9ac 	b.w	800328c <DisableUSART1>

08003f34 <dxl_hal_clear>:

void dxl_hal_clear(void)
{
	// Clear communication buffer

	ClearBuffer256();
 8003f34:	f7ff b9b0 	b.w	8003298 <ClearBuffer256>

08003f38 <dxl_hal_tx>:
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	460c      	mov	r4, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 8003f3e:	2300      	movs	r3, #0
 8003f40:	1c5d      	adds	r5, r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	da04      	bge.n	8003f52 <dxl_hal_tx+0x1a>
		TxDByte_DXL(pPacket[i]);
 8003f48:	5cf0      	ldrb	r0, [r6, r3]
 8003f4a:	f7ff f9b7 	bl	80032bc <TxDByte_DXL>
 8003f4e:	462b      	mov	r3, r5
 8003f50:	e7f6      	b.n	8003f40 <dxl_hal_tx+0x8>

	return numPacket;
}
 8003f52:	4620      	mov	r0, r4
 8003f54:	bd70      	pop	{r4, r5, r6, pc}

08003f56 <dxl_hal_rx>:

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 8003f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f58:	4607      	mov	r7, r0
 8003f5a:	460e      	mov	r6, r1
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003f5c:	2400      	movs	r4, #0
 8003f5e:	b2e5      	uxtb	r5, r4
 8003f60:	42b5      	cmp	r5, r6
 8003f62:	da07      	bge.n	8003f74 <dxl_hal_rx+0x1e>
	{
		if (CheckNewArrive())
 8003f64:	f7ff f9a0 	bl	80032a8 <CheckNewArrive>
 8003f68:	3401      	adds	r4, #1
 8003f6a:	b120      	cbz	r0, 8003f76 <dxl_hal_rx+0x20>
			pPacket[i] =  RxDByte_DXL();
 8003f6c:	f7ff f9c8 	bl	8003300 <RxDByte_DXL>
 8003f70:	5578      	strb	r0, [r7, r5]
 8003f72:	e7f4      	b.n	8003f5e <dxl_hal_rx+0x8>
 8003f74:	4635      	mov	r5, r6
		else
			return i;
	}
	return numPacket;
}
 8003f76:	4628      	mov	r0, r5
 8003f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f7a <dxl_hal_set_timeout>:
{
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8003f7a:	2364      	movs	r3, #100	; 0x64
 8003f7c:	4358      	muls	r0, r3
 8003f7e:	f7ff bf79 	b.w	8003e74 <StartDiscount>

08003f82 <dxl_hal_timeout>:
int dxl_hal_timeout(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 8003f82:	f7ff bf7d 	b.w	8003e80 <CheckTimeOut>
	...

08003f88 <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003f88:	b508      	push	{r3, lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <dxl_initialize+0x20>)


int dxl_initialize( int devIndex, int baudnum )
{
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
 8003f8c:	3101      	adds	r1, #1
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003f8e:	fb93 f1f1 	sdiv	r1, r3, r1
 8003f92:	f7ff ffc7 	bl	8003f24 <dxl_hal_open>
 8003f96:	b128      	cbz	r0, 8003fa4 <dxl_initialize+0x1c>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <dxl_initialize+0x24>)
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	6018      	str	r0, [r3, #0]
	giBusUsing = 0;
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <dxl_initialize+0x28>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]



	return 1;
}
 8003fa4:	bd08      	pop	{r3, pc}
 8003fa6:	bf00      	nop
 8003fa8:	001e8480 	andseq	r8, lr, r0, lsl #9
 8003fac:	20000014 	andcs	r0, r0, r4, lsl r0
 8003fb0:	20000130 	andcs	r0, r0, r0, lsr r1

08003fb4 <dxl_terminate>:

void dxl_terminate()
{
	dxl_hal_close();
 8003fb4:	f7ff bfbc 	b.w	8003f30 <dxl_hal_close>

08003fb8 <dxl_tx_packet>:
}

void dxl_tx_packet()
{
 8003fb8:	b570      	push	{r4, r5, r6, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003fba:	4c24      	ldr	r4, [pc, #144]	; (800404c <dxl_tx_packet+0x94>)
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d043      	beq.n	800404a <dxl_tx_packet+0x92>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003fc2:	79e2      	ldrb	r2, [r4, #7]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003fc4:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003fc6:	2a98      	cmp	r2, #152	; 0x98
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003fc8:	6023      	str	r3, [r4, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003fca:	d905      	bls.n	8003fd8 <dxl_tx_packet+0x20>
	{
		gbCommStatus = COMM_TXERROR;
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <dxl_tx_packet+0x98>)
 8003fce:	2204      	movs	r2, #4
 8003fd0:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6023      	str	r3, [r4, #0]
		return;
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8003fd8:	7a23      	ldrb	r3, [r4, #8]
 8003fda:	1e59      	subs	r1, r3, #1
 8003fdc:	2905      	cmp	r1, #5
 8003fde:	d901      	bls.n	8003fe4 <dxl_tx_packet+0x2c>
		&& gbInstructionPacket[INSTRUCTION] != INST_READ
		&& gbInstructionPacket[INSTRUCTION] != INST_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
 8003fe0:	2b83      	cmp	r3, #131	; 0x83
 8003fe2:	d1f3      	bne.n	8003fcc <dxl_tx_packet+0x14>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003fe4:	23ff      	movs	r3, #255	; 0xff
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003fe6:	2000      	movs	r0, #0
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003fe8:	7123      	strb	r3, [r4, #4]
	gbInstructionPacket[1] = 0xff;
 8003fea:	7163      	strb	r3, [r4, #5]

void dxl_tx_packet()
{
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;
 8003fec:	4603      	mov	r3, r0
 8003fee:	b2c1      	uxtb	r1, r0
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003ff0:	428a      	cmp	r2, r1
 8003ff2:	f100 0001 	add.w	r0, r0, #1
 8003ff6:	db04      	blt.n	8004002 <dxl_tx_packet+0x4a>
		checksum += gbInstructionPacket[i+2];
 8003ff8:	4421      	add	r1, r4
 8003ffa:	7989      	ldrb	r1, [r1, #6]
 8003ffc:	440b      	add	r3, r1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	e7f5      	b.n	8003fee <dxl_tx_packet+0x36>
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8004002:	43db      	mvns	r3, r3
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8004004:	4d12      	ldr	r5, [pc, #72]	; (8004050 <dxl_tx_packet+0x98>)
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8004006:	4422      	add	r2, r4
 8004008:	71d3      	strb	r3, [r2, #7]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	3b06      	subs	r3, #6
 800400e:	2b01      	cmp	r3, #1
 8004010:	d801      	bhi.n	8004016 <dxl_tx_packet+0x5e>
	{




		dxl_hal_clear();
 8004012:	f7ff ff8f 	bl	8003f34 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8004016:	79e4      	ldrb	r4, [r4, #7]
 8004018:	4e0c      	ldr	r6, [pc, #48]	; (800404c <dxl_tx_packet+0x94>)
 800401a:	3404      	adds	r4, #4
 800401c:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 800401e:	1d30      	adds	r0, r6, #4
 8004020:	4621      	mov	r1, r4
 8004022:	f7ff ff89 	bl	8003f38 <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8004026:	b2c0      	uxtb	r0, r0
 8004028:	4284      	cmp	r4, r0
 800402a:	d004      	beq.n	8004036 <dxl_tx_packet+0x7e>
	{

		gbCommStatus = COMM_TXFAIL;
 800402c:	2302      	movs	r3, #2
 800402e:	602b      	str	r3, [r5, #0]
		giBusUsing = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	6033      	str	r3, [r6, #0]
 8004034:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8004036:	7a33      	ldrb	r3, [r6, #8]
 8004038:	2b02      	cmp	r3, #2
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 800403a:	bf0a      	itet	eq
 800403c:	7ab0      	ldrbeq	r0, [r6, #10]
	else
		dxl_hal_set_timeout( 6 );
 800403e:	2006      	movne	r0, #6
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8004040:	3006      	addeq	r0, #6
	else
		dxl_hal_set_timeout( 6 );
 8004042:	f7ff ff9a 	bl	8003f7a <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8004046:	2300      	movs	r3, #0
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	20000130 	andcs	r0, r0, r0, lsr r1
 8004050:	20000014 	andcs	r0, r0, r4, lsl r0

08004054 <dxl_rx_packet>:
}

void dxl_rx_packet()
{
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8004056:	4c51      	ldr	r4, [pc, #324]	; (800419c <dxl_rx_packet+0x148>)
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 809c 	beq.w	8004198 <dxl_rx_packet+0x144>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 8004060:	79a3      	ldrb	r3, [r4, #6]
 8004062:	4e4f      	ldr	r6, [pc, #316]	; (80041a0 <dxl_rx_packet+0x14c>)
 8004064:	2bfe      	cmp	r3, #254	; 0xfe
 8004066:	d101      	bne.n	800406c <dxl_rx_packet+0x18>
	{
		gbCommStatus = COMM_RXSUCCESS;
 8004068:	2301      	movs	r3, #1
 800406a:	e033      	b.n	80040d4 <dxl_rx_packet+0x80>
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	b923      	cbnz	r3, 800407a <dxl_rx_packet+0x26>
	{
		gbRxGetLength = 0;
 8004070:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
		gbRxPacketLength = 6;
 8004074:	2306      	movs	r3, #6
 8004076:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 800407a:	4d48      	ldr	r5, [pc, #288]	; (800419c <dxl_rx_packet+0x148>)
 800407c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8004080:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8004084:	f105 07a6 	add.w	r7, r5, #166	; 0xa6
 8004088:	18f8      	adds	r0, r7, r3
 800408a:	1ac9      	subs	r1, r1, r3
 800408c:	f7ff ff63 	bl	8003f56 <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8004090:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8004094:	4418      	add	r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 8004096:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 800409a:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 800409c:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 800409e:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if( gbRxGetLength < gbRxPacketLength )
 80040a2:	d91b      	bls.n	80040dc <dxl_rx_packet+0x88>
	{
		if( dxl_hal_timeout() == 1 )
 80040a4:	f7ff ff6d 	bl	8003f82 <dxl_hal_timeout>
 80040a8:	2801      	cmp	r0, #1
 80040aa:	d117      	bne.n	80040dc <dxl_rx_packet+0x88>
		{


			if(gbRxGetLength == 0)
 80040ac:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 80040b0:	b97b      	cbnz	r3, 80040d2 <dxl_rx_packet+0x7e>
				gbCommStatus = COMM_RXTIMEOUT;
 80040b2:	2306      	movs	r3, #6
 80040b4:	e00e      	b.n	80040d4 <dxl_rx_packet+0x80>
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 80040b6:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	}

	if( gbRxGetLength < gbRxPacketLength )
 80040ba:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 80040be:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80040c2:	4d36      	ldr	r5, [pc, #216]	; (800419c <dxl_rx_packet+0x148>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d84d      	bhi.n	8004164 <dxl_rx_packet+0x110>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 80040c8:	79aa      	ldrb	r2, [r5, #6]
 80040ca:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d032      	beq.n	8004138 <dxl_rx_packet+0xe4>


			if(gbRxGetLength == 0)
				gbCommStatus = COMM_RXTIMEOUT;
			else
				gbCommStatus = COMM_RXCORRUPT;
 80040d2:	2307      	movs	r3, #7
 80040d4:	6033      	str	r3, [r6, #0]
			giBusUsing = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	6023      	str	r3, [r4, #0]
			return;
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 80040dc:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 80040e0:	2200      	movs	r2, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 80040e2:	1e48      	subs	r0, r1, #1
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 80040e4:	f1a1 0e02 	sub.w	lr, r1, #2
 80040e8:	b2d3      	uxtb	r3, r2
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 80040ea:	4283      	cmp	r3, r0
 80040ec:	da09      	bge.n	8004102 <dxl_rx_packet+0xae>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 80040ee:	18e5      	adds	r5, r4, r3
 80040f0:	f895 c0a6 	ldrb.w	ip, [r5, #166]	; 0xa6
 80040f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80040f8:	d107      	bne.n	800410a <dxl_rx_packet+0xb6>
 80040fa:	f895 50a7 	ldrb.w	r5, [r5, #167]	; 0xa7
 80040fe:	2dff      	cmp	r5, #255	; 0xff
 8004100:	d103      	bne.n	800410a <dxl_rx_packet+0xb6>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0d9      	beq.n	80040ba <dxl_rx_packet+0x66>
 8004106:	2000      	movs	r0, #0
 8004108:	e008      	b.n	800411c <dxl_rx_packet+0xc8>
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 800410a:	4573      	cmp	r3, lr
 800410c:	d104      	bne.n	8004118 <dxl_rx_packet+0xc4>
 800410e:	1825      	adds	r5, r4, r0
 8004110:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8004114:	2dff      	cmp	r5, #255	; 0xff
 8004116:	d0f4      	beq.n	8004102 <dxl_rx_packet+0xae>
 8004118:	3201      	adds	r2, #1
 800411a:	e7e5      	b.n	80040e8 <dxl_rx_packet+0x94>
 800411c:	b2c2      	uxtb	r2, r0
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 800411e:	1acd      	subs	r5, r1, r3
 8004120:	42aa      	cmp	r2, r5
 8004122:	f100 0001 	add.w	r0, r0, #1
 8004126:	dac6      	bge.n	80040b6 <dxl_rx_packet+0x62>
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8004128:	18e5      	adds	r5, r4, r3
 800412a:	4415      	add	r5, r2
 800412c:	f895 50a6 	ldrb.w	r5, [r5, #166]	; 0xa6
 8004130:	4422      	add	r2, r4
 8004132:	f882 50a6 	strb.w	r5, [r2, #166]	; 0xa6
 8004136:	e7f1      	b.n	800411c <dxl_rx_packet+0xc8>
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8004138:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
 800413c:	3304      	adds	r3, #4
 800413e:	b2db      	uxtb	r3, r3
	if( gbRxGetLength < gbRxPacketLength )
 8004140:	4299      	cmp	r1, r3
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8004142:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if( gbRxGetLength < gbRxPacketLength )
 8004146:	d210      	bcs.n	800416a <dxl_rx_packet+0x116>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8004148:	1878      	adds	r0, r7, r1
 800414a:	1a59      	subs	r1, r3, r1
 800414c:	f7ff ff03 	bl	8003f56 <dxl_hal_rx>
		gbRxGetLength += nRead;
 8004150:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
 8004154:	4418      	add	r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 8004156:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 800415a:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 800415c:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 800415e:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
		if( gbRxGetLength < gbRxPacketLength )
 8004162:	d902      	bls.n	800416a <dxl_rx_packet+0x116>
		gbRxGetLength -= i;		
	}

	if( gbRxGetLength < gbRxPacketLength )
	{
		gbCommStatus = COMM_RXWAITING;
 8004164:	2305      	movs	r3, #5
 8004166:	6033      	str	r3, [r6, #0]
 8004168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 800416a:	2000      	movs	r0, #0
 800416c:	4603      	mov	r3, r0
 800416e:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004172:	b2c1      	uxtb	r1, r0
 8004174:	428a      	cmp	r2, r1
 8004176:	f100 0001 	add.w	r0, r0, #1
 800417a:	db05      	blt.n	8004188 <dxl_rx_packet+0x134>
		checksum += gbStatusPacket[i+2];
 800417c:	4421      	add	r1, r4
 800417e:	f891 10a8 	ldrb.w	r1, [r1, #168]	; 0xa8
 8004182:	440b      	add	r3, r1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e7f4      	b.n	8004172 <dxl_rx_packet+0x11e>
	checksum = ~checksum;
 8004188:	43db      	mvns	r3, r3

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 800418a:	4422      	add	r2, r4
 800418c:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8004190:	b2db      	uxtb	r3, r3
 8004192:	429a      	cmp	r2, r3
 8004194:	d19d      	bne.n	80040d2 <dxl_rx_packet+0x7e>
 8004196:	e767      	b.n	8004068 <dxl_rx_packet+0x14>
 8004198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419a:	bf00      	nop
 800419c:	20000130 	andcs	r0, r0, r0, lsr r1
 80041a0:	20000014 	andcs	r0, r0, r4, lsl r0

080041a4 <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 80041a4:	b510      	push	{r4, lr}

	dxl_tx_packet();
 80041a6:	f7ff ff07 	bl	8003fb8 <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <dxl_txrx_packet+0x1c>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	461c      	mov	r4, r3
 80041b0:	b922      	cbnz	r2, 80041bc <dxl_txrx_packet+0x18>
		return;	

	do{

		dxl_rx_packet();
 80041b2:	f7ff ff4f 	bl	8004054 <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d0fa      	beq.n	80041b2 <dxl_txrx_packet+0xe>
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	bf00      	nop
 80041c0:	20000014 	andcs	r0, r0, r4, lsl r0

080041c4 <dxl_get_result>:
}

int dxl_get_result()
{
	return gbCommStatus;
}
 80041c4:	4b01      	ldr	r3, [pc, #4]	; (80041cc <dxl_get_result+0x8>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000014 	andcs	r0, r0, r4, lsl r0

080041d0 <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 80041d0:	4b01      	ldr	r3, [pc, #4]	; (80041d8 <dxl_set_txpacket_id+0x8>)
 80041d2:	7198      	strb	r0, [r3, #6]
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000130 	andcs	r0, r0, r0, lsr r1

080041dc <dxl_set_txpacket_instruction>:
}

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <dxl_set_txpacket_instruction+0x8>)
 80041de:	7218      	strb	r0, [r3, #8]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000130 	andcs	r0, r0, r0, lsr r1

080041e8 <dxl_set_txpacket_parameter>:
}

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <dxl_set_txpacket_parameter+0x8>)
 80041ea:	4418      	add	r0, r3
 80041ec:	7241      	strb	r1, [r0, #9]
 80041ee:	4770      	bx	lr
 80041f0:	20000130 	andcs	r0, r0, r0, lsr r1

080041f4 <dxl_set_txpacket_length>:
}

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 80041f4:	4b01      	ldr	r3, [pc, #4]	; (80041fc <dxl_set_txpacket_length+0x8>)
 80041f6:	71d8      	strb	r0, [r3, #7]
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000130 	andcs	r0, r0, r0, lsr r1

08004200 <dxl_get_rxpacket_error>:
}

int dxl_get_rxpacket_error( int errbit )
{
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <dxl_get_rxpacket_error+0x10>)
 8004202:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004206:	4218      	tst	r0, r3
		return 1;

	return 0;
}
 8004208:	bf14      	ite	ne
 800420a:	2001      	movne	r0, #1
 800420c:	2000      	moveq	r0, #0
 800420e:	4770      	bx	lr
 8004210:	20000130 	andcs	r0, r0, r0, lsr r1

08004214 <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
	return (int)gbStatusPacket[LENGTH];
}
 8004214:	4b01      	ldr	r3, [pc, #4]	; (800421c <dxl_get_rxpacket_length+0x8>)
 8004216:	f893 00a9 	ldrb.w	r0, [r3, #169]	; 0xa9
 800421a:	4770      	bx	lr
 800421c:	20000130 	andcs	r0, r0, r0, lsr r1

08004220 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
	return (int)gbStatusPacket[PARAMETER+index];
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <dxl_get_rxpacket_parameter+0xc>)
 8004222:	4418      	add	r0, r3
}
 8004224:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000130 	andcs	r0, r0, r0, lsr r1

08004230 <dxl_makeword>:
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8004230:	eb00 2001 	add.w	r0, r0, r1, lsl #8
	return (int)word;
}
 8004234:	b280      	uxth	r0, r0
 8004236:	4770      	bx	lr

08004238 <dxl_get_lowbyte>:
{
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 8004238:	b2c0      	uxtb	r0, r0
 800423a:	4770      	bx	lr

0800423c <dxl_get_highbyte>:
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
	return (int)temp;
}
 800423c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004240:	4770      	bx	lr

08004242 <dxl_ping>:

void dxl_ping( int id )
{
	while(giBusUsing);
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <dxl_ping+0x16>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	2a00      	cmp	r2, #0
 8004248:	d1fd      	bne.n	8004246 <dxl_ping+0x4>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 800424a:	2201      	movs	r2, #1
 800424c:	721a      	strb	r2, [r3, #8]
	gbInstructionPacket[LENGTH] = 2;
 800424e:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8004250:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 8004252:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
 8004254:	f7ff bfa6 	b.w	80041a4 <dxl_txrx_packet>
 8004258:	20000130 	andcs	r0, r0, r0, lsr r1

0800425c <dxl_read_byte>:
}

int dxl_read_byte( int id, int address )
{
 800425c:	b510      	push	{r4, lr}
	while(giBusUsing);
 800425e:	4c08      	ldr	r4, [pc, #32]	; (8004280 <dxl_read_byte+0x24>)
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1fd      	bne.n	8004262 <dxl_read_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8004266:	2302      	movs	r3, #2
 8004268:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 800426e:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8004270:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8004272:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 8004274:	71e3      	strb	r3, [r4, #7]
	
	dxl_txrx_packet();
 8004276:	f7ff ff95 	bl	80041a4 <dxl_txrx_packet>

	return (int)gbStatusPacket[PARAMETER];
}
 800427a:	f894 00ab 	ldrb.w	r0, [r4, #171]	; 0xab
 800427e:	bd10      	pop	{r4, pc}
 8004280:	20000130 	andcs	r0, r0, r0, lsr r1

08004284 <dxl_write_byte>:

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <dxl_write_byte+0x20>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8004286:	b510      	push	{r4, lr}
	while(giBusUsing);
 8004288:	681c      	ldr	r4, [r3, #0]
 800428a:	2c00      	cmp	r4, #0
 800428c:	d1fd      	bne.n	800428a <dxl_write_byte+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
 800428e:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 8004290:	729a      	strb	r2, [r3, #10]
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8004292:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8004294:	2204      	movs	r2, #4
void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8004296:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8004298:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 800429a:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 800429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 80042a0:	f7ff bf80 	b.w	80041a4 <dxl_txrx_packet>
 80042a4:	20000130 	andcs	r0, r0, r0, lsr r1

080042a8 <dxl_read_word>:
}

int dxl_read_word( int id, int address )
{
 80042a8:	b510      	push	{r4, lr}
	while(giBusUsing);
 80042aa:	4c0a      	ldr	r4, [pc, #40]	; (80042d4 <dxl_read_word+0x2c>)
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1fd      	bne.n	80042ae <dxl_read_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 80042b2:	2302      	movs	r3, #2
 80042b4:	7223      	strb	r3, [r4, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 80042b6:	72a3      	strb	r3, [r4, #10]
	gbInstructionPacket[LENGTH] = 4;
 80042b8:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80042ba:	71a0      	strb	r0, [r4, #6]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 80042bc:	71e3      	strb	r3, [r4, #7]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 80042be:	7261      	strb	r1, [r4, #9]
	gbInstructionPacket[LENGTH] = 4;
	



	dxl_txrx_packet();
 80042c0:	f7ff ff70 	bl	80041a4 <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 80042c4:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
	word = word << 8;
	word = word + lowbyte;
 80042c8:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 80042cc:	eb03 2000 	add.w	r0, r3, r0, lsl #8


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 80042d0:	b280      	uxth	r0, r0
 80042d2:	bd10      	pop	{r4, pc}
 80042d4:	20000130 	andcs	r0, r0, r0, lsr r1

080042d8 <dxl_write_word>:

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <dxl_write_word+0x28>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 80042da:	b510      	push	{r4, lr}
	while(giBusUsing);
 80042dc:	681c      	ldr	r4, [r3, #0]
 80042de:	2c00      	cmp	r4, #0
 80042e0:	d1fd      	bne.n	80042de <dxl_write_word+0x6>

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 80042e2:	729a      	strb	r2, [r3, #10]
int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
	temp = temp >> 8;
 80042e4:	f3c2 2207 	ubfx	r2, r2, #8, #8

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80042e8:	7198      	strb	r0, [r3, #6]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 80042ea:	72da      	strb	r2, [r3, #11]
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80042ec:	2003      	movs	r0, #3
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 80042ee:	2205      	movs	r2, #5
void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80042f0:	7218      	strb	r0, [r3, #8]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 80042f2:	7259      	strb	r1, [r3, #9]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 80042f4:	71da      	strb	r2, [r3, #7]
	
	dxl_txrx_packet();
}
 80042f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
	
	dxl_txrx_packet();
 80042fa:	f7ff bf53 	b.w	80041a4 <dxl_txrx_packet>
 80042fe:	bf00      	nop
 8004300:	20000130 	andcs	r0, r0, r0, lsr r1

08004304 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <FLASH_SetLatency+0x14>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800430c:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4310      	orrs	r0, r2
 8004312:	6018      	str	r0, [r3, #0]
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40022000 	andmi	r2, r2, r0

0800431c <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <FLASH_HalfCycleAccessCmd+0x14>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4310      	orrs	r0, r2
 800432a:	6018      	str	r0, [r3, #0]
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40022000 	andmi	r2, r2, r0

08004334 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <FLASH_PrefetchBufferCmd+0x14>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	f022 0210 	bic.w	r2, r2, #16
 800433c:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4310      	orrs	r0, r2
 8004342:	6018      	str	r0, [r3, #0]
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40022000 	andmi	r2, r2, r0

0800434c <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <FLASH_Unlock+0x10>)
 800434e:	4a04      	ldr	r2, [pc, #16]	; (8004360 <FLASH_Unlock+0x14>)
 8004350:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8004352:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40022000 	andmi	r2, r2, r0
 8004360:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08004364 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8004364:	4a02      	ldr	r2, [pc, #8]	; (8004370 <FLASH_Lock+0xc>)
 8004366:	6913      	ldr	r3, [r2, #16]
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	6113      	str	r3, [r2, #16]
 800436e:	4770      	bx	lr
 8004370:	40022000 	andmi	r2, r2, r0

08004374 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8004374:	4b01      	ldr	r3, [pc, #4]	; (800437c <FLASH_GetUserOptionByte+0x8>)
 8004376:	69d8      	ldr	r0, [r3, #28]
}
 8004378:	0880      	lsrs	r0, r0, #2
 800437a:	4770      	bx	lr
 800437c:	40022000 	andmi	r2, r2, r0

08004380 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8004380:	4b01      	ldr	r3, [pc, #4]	; (8004388 <FLASH_GetWriteProtectionOptionByte+0x8>)
 8004382:	6a18      	ldr	r0, [r3, #32]
}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40022000 	andmi	r2, r2, r0

0800438c <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 800438c:	4b02      	ldr	r3, [pc, #8]	; (8004398 <FLASH_GetReadOutProtectionStatus+0xc>)
 800438e:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8004390:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40022000 	andmi	r2, r2, r0

0800439c <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 800439c:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <FLASH_GetPrefetchBufferStatus+0xc>)
 800439e:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 80043a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40022000 	andmi	r2, r2, r0

080043ac <FLASH_ITConfig>:
*                       - FLASH_IT_EOP: FLASH end of operation Interrupt
* Output         : None
* Return         : None 
*******************************************************************************/
void FLASH_ITConfig(u16 FLASH_IT, FunctionalState NewState)
{
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80043ae:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80043b0:	b109      	cbz	r1, 80043b6 <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80043b2:	4310      	orrs	r0, r2
 80043b4:	e001      	b.n	80043ba <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 80043b6:	ea22 0000 	bic.w	r0, r2, r0
 80043ba:	6118      	str	r0, [r3, #16]
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40022000 	andmi	r2, r2, r0

080043c4 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 80043c4:	2801      	cmp	r0, #1
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <FLASH_GetFlagStatus+0x1c>)
 80043c8:	d103      	bne.n	80043d2 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 80043ca:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 80043cc:	f000 0001 	and.w	r0, r0, #1
 80043d0:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4218      	tst	r0, r3
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 80043d6:	bf14      	ite	ne
 80043d8:	2001      	movne	r0, #1
 80043da:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40022000 	andmi	r2, r2, r0

080043e4 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80043e4:	4b01      	ldr	r3, [pc, #4]	; (80043ec <FLASH_ClearFlag+0x8>)
 80043e6:	60d8      	str	r0, [r3, #12]
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40022000 	andmi	r2, r2, r0

080043f0 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <FLASH_GetStatus+0x24>)
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	07d1      	lsls	r1, r2, #31
 80043f6:	d409      	bmi.n	800440c <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	0752      	lsls	r2, r2, #29
 80043fc:	d408      	bmi.n	8004410 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8004404:	bf14      	ite	ne
 8004406:	2003      	movne	r0, #3
 8004408:	2004      	moveq	r0, #4
 800440a:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 800440c:	2001      	movs	r0, #1
 800440e:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 8004410:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8004412:	4770      	bx	lr
 8004414:	40022000 	andmi	r2, r2, r0

08004418 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8004418:	b513      	push	{r0, r1, r4, lr}
 800441a:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 800441c:	f7ff ffe8 	bl	80043f0 <FLASH_GetStatus>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8004420:	2801      	cmp	r0, #1
 8004422:	d10f      	bne.n	8004444 <FLASH_WaitForLastOperation+0x2c>
 8004424:	b164      	cbz	r4, 8004440 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	9301      	str	r3, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 800442a:	23ff      	movs	r3, #255	; 0xff
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	b113      	cbz	r3, 8004438 <FLASH_WaitForLastOperation+0x20>
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	3b01      	subs	r3, #1
 8004436:	e7f9      	b.n	800442c <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 8004438:	f7ff ffda 	bl	80043f0 <FLASH_GetStatus>
    Timeout--;
 800443c:	3c01      	subs	r4, #1
 800443e:	e7ef      	b.n	8004420 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8004440:	2005      	movs	r0, #5
 8004442:	e002      	b.n	800444a <FLASH_WaitForLastOperation+0x32>
 8004444:	2c00      	cmp	r4, #0
 8004446:	bf08      	it	eq
 8004448:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 800444a:	b002      	add	sp, #8
 800444c:	bd10      	pop	{r4, pc}

0800444e <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 800444e:	b538      	push	{r3, r4, r5, lr}
 8004450:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004452:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004456:	f7ff ffdf 	bl	8004418 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800445a:	2804      	cmp	r0, #4
 800445c:	d114      	bne.n	8004488 <FLASH_ErasePage+0x3a>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800445e:	4c0b      	ldr	r4, [pc, #44]	; (800448c <FLASH_ErasePage+0x3e>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004460:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 800446c:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004474:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004476:	f7ff ffcf 	bl	8004418 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800447a:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 800447c:	bf1f      	itttt	ne
 800447e:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8004482:	6922      	ldrne	r2, [r4, #16]
 8004484:	4013      	andne	r3, r2
 8004486:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8004488:	bd38      	pop	{r3, r4, r5, pc}
 800448a:	bf00      	nop
 800448c:	40022000 	andmi	r2, r2, r0

08004490 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8004490:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004492:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004496:	f7ff ffbf 	bl	8004418 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800449a:	2804      	cmp	r0, #4
 800449c:	d113      	bne.n	80044c6 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800449e:	4c0a      	ldr	r4, [pc, #40]	; (80044c8 <FLASH_EraseAllPages+0x38>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80044a0:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 80044a4:	6923      	ldr	r3, [r4, #16]
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b2:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80044b4:	f7ff ffb0 	bl	8004418 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80044b8:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 80044ba:	bf1f      	itttt	ne
 80044bc:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 80044c0:	6922      	ldrne	r2, [r4, #16]
 80044c2:	4013      	andne	r3, r2
 80044c4:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	40022000 	andmi	r2, r2, r0

080044cc <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 80044cc:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80044ce:	f640 70ff 	movw	r0, #4095	; 0xfff
 80044d2:	f7ff ffa1 	bl	8004418 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80044d6:	2804      	cmp	r0, #4
 80044d8:	d129      	bne.n	800452e <FLASH_EraseOptionBytes+0x62>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80044da:	4c15      	ldr	r4, [pc, #84]	; (8004530 <FLASH_EraseOptionBytes+0x64>)
 80044dc:	4b15      	ldr	r3, [pc, #84]	; (8004534 <FLASH_EraseOptionBytes+0x68>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80044de:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80044e2:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80044e4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80044e8:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	f043 0320 	orr.w	r3, r3, #32
 80044f0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f8:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80044fa:	f7ff ff8d 	bl	8004418 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80044fe:	2804      	cmp	r0, #4
 8004500:	d10e      	bne.n	8004520 <FLASH_EraseOptionBytes+0x54>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8004502:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8004506:	6922      	ldr	r2, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004508:	200f      	movs	r0, #15
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 800450a:	4013      	ands	r3, r2
 800450c:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 800450e:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8004510:	22a5      	movs	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8004512:	f043 0310 	orr.w	r3, r3, #16
 8004516:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <FLASH_EraseOptionBytes+0x6c>)
 800451a:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800451c:	f7ff ff7c 	bl	8004418 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8004520:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8004522:	bf1f      	itttt	ne
 8004524:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004528:	6922      	ldrne	r2, [r4, #16]
 800452a:	4013      	andne	r3, r2
 800452c:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 800452e:	bd10      	pop	{r4, pc}
 8004530:	40022000 	andmi	r2, r2, r0
 8004534:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004538:	1ffff800 	svcne	0x00fff800

0800453c <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004540:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004542:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004544:	f7ff ff68 	bl	8004418 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004548:	2804      	cmp	r0, #4
 800454a:	d117      	bne.n	800457c <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800454c:	4c0c      	ldr	r4, [pc, #48]	; (8004580 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800454e:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8004558:	b2ab      	uxth	r3, r5
 800455a:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800455c:	f7ff ff5c 	bl	8004418 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8004560:	2804      	cmp	r0, #4
 8004562:	d104      	bne.n	800456e <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8004564:	0c2d      	lsrs	r5, r5, #16
 8004566:	8075      	strh	r5, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004568:	200f      	movs	r0, #15
 800456a:	f7ff ff55 	bl	8004418 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 800456e:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8004570:	bf1f      	itttt	ne
 8004572:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8004576:	6922      	ldrne	r2, [r4, #16]
 8004578:	4013      	andne	r3, r2
 800457a:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 800457c:	bd70      	pop	{r4, r5, r6, pc}
 800457e:	bf00      	nop
 8004580:	40022000 	andmi	r2, r2, r0

08004584 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004588:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 800458a:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800458c:	f7ff ff44 	bl	8004418 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004590:	2804      	cmp	r0, #4
 8004592:	d10f      	bne.n	80045b4 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004594:	4c08      	ldr	r4, [pc, #32]	; (80045b8 <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004596:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 80045a0:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045a2:	f7ff ff39 	bl	8004418 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80045a6:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 80045a8:	bf1f      	itttt	ne
 80045aa:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 80045ae:	6922      	ldrne	r2, [r4, #16]
 80045b0:	4013      	andne	r3, r2
 80045b2:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
 80045b6:	bf00      	nop
 80045b8:	40022000 	andmi	r2, r2, r0

080045bc <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045c0:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80045c2:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045c4:	f7ff ff28 	bl	8004418 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80045c8:	2804      	cmp	r0, #4
 80045ca:	d115      	bne.n	80045f8 <FLASH_ProgramOptionByteData+0x3c>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80045cc:	4c0b      	ldr	r4, [pc, #44]	; (80045fc <FLASH_ProgramOptionByteData+0x40>)
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <FLASH_ProgramOptionByteData+0x44>)
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
 80045d0:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80045d2:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80045d4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80045d8:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80045da:	6923      	ldr	r3, [r4, #16]
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045dc:	200f      	movs	r0, #15
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80045de:	f043 0310 	orr.w	r3, r3, #16
 80045e2:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 80045e4:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045e6:	f7ff ff17 	bl	8004418 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80045ea:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80045ec:	bf1f      	itttt	ne
 80045ee:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80045f2:	6922      	ldrne	r2, [r4, #16]
 80045f4:	4013      	andne	r3, r2
 80045f6:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
 80045fa:	bf00      	nop
 80045fc:	40022000 	andmi	r2, r2, r0
 8004600:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

08004604 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8004604:	b510      	push	{r4, lr}
 8004606:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004608:	200f      	movs	r0, #15
 800460a:	f7ff ff05 	bl	8004418 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800460e:	2804      	cmp	r0, #4
 8004610:	d141      	bne.n	8004696 <FLASH_EnableWriteProtection+0x92>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 8004612:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004614:	4b20      	ldr	r3, [pc, #128]	; (8004698 <FLASH_EnableWriteProtection+0x94>)
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <FLASH_EnableWriteProtection+0x98>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8004618:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800461a:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800461c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004620:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8004622:	691a      	ldr	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 8004624:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8004626:	f042 0210 	orr.w	r2, r2, #16
 800462a:	611a      	str	r2, [r3, #16]

    if(WRP0_Data != 0xFF)
 800462c:	d104      	bne.n	8004638 <FLASH_EnableWriteProtection+0x34>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800462e:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004632:	2bff      	cmp	r3, #255	; 0xff
 8004634:	d108      	bne.n	8004648 <FLASH_EnableWriteProtection+0x44>
 8004636:	e00f      	b.n	8004658 <FLASH_EnableWriteProtection+0x54>
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <FLASH_EnableWriteProtection+0x9c>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800463a:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 800463c:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800463e:	f7ff feeb 	bl	8004418 <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004642:	2804      	cmp	r0, #4
 8004644:	d11f      	bne.n	8004686 <FLASH_EnableWriteProtection+0x82>
 8004646:	e7f2      	b.n	800462e <FLASH_EnableWriteProtection+0x2a>
    {
      OB->WRP1 = WRP1_Data;
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <FLASH_EnableWriteProtection+0x9c>)
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800464a:	b29b      	uxth	r3, r3
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 800464c:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800464e:	200f      	movs	r0, #15
 8004650:	f7ff fee2 	bl	8004418 <FLASH_WaitForLastOperation>
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8004654:	2804      	cmp	r0, #4
 8004656:	d116      	bne.n	8004686 <FLASH_EnableWriteProtection+0x82>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8004658:	f3c4 4307 	ubfx	r3, r4, #16, #8
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800465c:	2bff      	cmp	r3, #255	; 0xff
 800465e:	d007      	beq.n	8004670 <FLASH_EnableWriteProtection+0x6c>
    {
      OB->WRP2 = WRP2_Data;
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <FLASH_EnableWriteProtection+0x9c>)
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8004662:	b29b      	uxth	r3, r3
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8004664:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004666:	200f      	movs	r0, #15
 8004668:	f7ff fed6 	bl	8004418 <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 800466c:	2804      	cmp	r0, #4
 800466e:	d10a      	bne.n	8004686 <FLASH_EnableWriteProtection+0x82>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8004670:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8004672:	2cff      	cmp	r4, #255	; 0xff
 8004674:	d101      	bne.n	800467a <FLASH_EnableWriteProtection+0x76>
 8004676:	2004      	movs	r0, #4
 8004678:	e007      	b.n	800468a <FLASH_EnableWriteProtection+0x86>
    {
      OB->WRP3 = WRP3_Data;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <FLASH_EnableWriteProtection+0x9c>)
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 800467c:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 800467e:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004680:	200f      	movs	r0, #15
 8004682:	f7ff fec9 	bl	8004418 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 8004686:	2801      	cmp	r0, #1
 8004688:	d005      	beq.n	8004696 <FLASH_EnableWriteProtection+0x92>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800468a:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800468e:	4a02      	ldr	r2, [pc, #8]	; (8004698 <FLASH_EnableWriteProtection+0x94>)
 8004690:	6911      	ldr	r1, [r2, #16]
 8004692:	400b      	ands	r3, r1
 8004694:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8004696:	bd10      	pop	{r4, pc}
 8004698:	40022000 	andmi	r2, r2, r0
 800469c:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80046a0:	1ffff800 	svcne	0x00fff800

080046a4 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 80046a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80046ac:	f7ff feb4 	bl	8004418 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80046b0:	2804      	cmp	r0, #4
 80046b2:	d136      	bne.n	8004722 <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80046b4:	4c1b      	ldr	r4, [pc, #108]	; (8004724 <FLASH_ReadOutProtection+0x80>)
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <FLASH_ReadOutProtection+0x84>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80046b8:	f640 70ff 	movw	r0, #4095	; 0xfff
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80046bc:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80046be:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80046c2:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	f043 0320 	orr.w	r3, r3, #32
 80046ca:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d2:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80046d4:	f7ff fea0 	bl	8004418 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 80046d8:	2804      	cmp	r0, #4
 80046da:	d11b      	bne.n	8004714 <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80046dc:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	6123      	str	r3, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	f043 0310 	orr.w	r3, r3, #16
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <FLASH_ReadOutProtection+0x88>)

      if(NewState != DISABLE)
 80046f0:	b10d      	cbz	r5, 80046f6 <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 80046f2:	2200      	movs	r2, #0
 80046f4:	e000      	b.n	80046f8 <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80046f6:	22a5      	movs	r2, #165	; 0xa5
 80046f8:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80046fa:	f640 70ff 	movw	r0, #4095	; 0xfff
 80046fe:	f7ff fe8b 	bl	8004418 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 8004702:	2801      	cmp	r0, #1
 8004704:	d00d      	beq.n	8004722 <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8004706:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800470a:	4a06      	ldr	r2, [pc, #24]	; (8004724 <FLASH_ReadOutProtection+0x80>)
 800470c:	6911      	ldr	r1, [r2, #16]
 800470e:	400b      	ands	r3, r1
 8004710:	6113      	str	r3, [r2, #16]
 8004712:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 8004714:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8004716:	bf1f      	itttt	ne
 8004718:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 800471c:	6922      	ldrne	r2, [r4, #16]
 800471e:	4013      	andne	r3, r2
 8004720:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	40022000 	andmi	r2, r2, r0
 8004728:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 800472c:	1ffff800 	svcne	0x00fff800

08004730 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004732:	4d11      	ldr	r5, [pc, #68]	; (8004778 <FLASH_UserOptionByteConfig+0x48>)
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <FLASH_UserOptionByteConfig+0x4c>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004736:	4606      	mov	r6, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004738:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800473a:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800473e:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004740:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004742:	460f      	mov	r7, r1
 8004744:	4614      	mov	r4, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004746:	f7ff fe67 	bl	8004418 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800474a:	2804      	cmp	r0, #4
 800474c:	d113      	bne.n	8004776 <FLASH_UserOptionByteConfig+0x46>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800474e:	692b      	ldr	r3, [r5, #16]
 8004750:	f044 00f8 	orr.w	r0, r4, #248	; 0xf8
 8004754:	f043 0310 	orr.w	r3, r3, #16
 8004758:	612b      	str	r3, [r5, #16]
 800475a:	4338      	orrs	r0, r7
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <FLASH_UserOptionByteConfig+0x50>)
 800475e:	4330      	orrs	r0, r6
 8004760:	8058      	strh	r0, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004762:	200f      	movs	r0, #15
 8004764:	f7ff fe58 	bl	8004418 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004768:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800476a:	bf1f      	itttt	ne
 800476c:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004770:	692a      	ldrne	r2, [r5, #16]
 8004772:	4013      	andne	r3, r2
 8004774:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8004776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004778:	40022000 	andmi	r2, r2, r0
 800477c:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8004780:	1ffff800 	svcne	0x00fff800

08004784 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004784:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004786:	4b26      	ldr	r3, [pc, #152]	; (8004820 <GPIO_DeInit+0x9c>)
 8004788:	4298      	cmp	r0, r3
 800478a:	d02f      	beq.n	80047ec <GPIO_DeInit+0x68>
 800478c:	d811      	bhi.n	80047b2 <GPIO_DeInit+0x2e>
 800478e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004792:	4298      	cmp	r0, r3
 8004794:	d01e      	beq.n	80047d4 <GPIO_DeInit+0x50>
 8004796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479a:	4298      	cmp	r0, r3
 800479c:	d020      	beq.n	80047e0 <GPIO_DeInit+0x5c>
 800479e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80047a2:	4298      	cmp	r0, r3
 80047a4:	d13a      	bne.n	800481c <GPIO_DeInit+0x98>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80047a6:	2004      	movs	r0, #4
 80047a8:	2101      	movs	r1, #1
 80047aa:	f000 fc35 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80047ae:	2004      	movs	r0, #4
 80047b0:	e02f      	b.n	8004812 <GPIO_DeInit+0x8e>
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 80047b2:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <GPIO_DeInit+0xa0>)
 80047b4:	4298      	cmp	r0, r3
 80047b6:	d01f      	beq.n	80047f8 <GPIO_DeInit+0x74>
 80047b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047bc:	4298      	cmp	r0, r3
 80047be:	d021      	beq.n	8004804 <GPIO_DeInit+0x80>
 80047c0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80047c4:	4298      	cmp	r0, r3
 80047c6:	d129      	bne.n	800481c <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80047c8:	2040      	movs	r0, #64	; 0x40
 80047ca:	2101      	movs	r1, #1
 80047cc:	f000 fc24 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80047d0:	2040      	movs	r0, #64	; 0x40
 80047d2:	e01e      	b.n	8004812 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80047d4:	2008      	movs	r0, #8
 80047d6:	2101      	movs	r1, #1
 80047d8:	f000 fc1e 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80047dc:	2008      	movs	r0, #8
 80047de:	e018      	b.n	8004812 <GPIO_DeInit+0x8e>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80047e0:	2010      	movs	r0, #16
 80047e2:	2101      	movs	r1, #1
 80047e4:	f000 fc18 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80047e8:	2010      	movs	r0, #16
 80047ea:	e012      	b.n	8004812 <GPIO_DeInit+0x8e>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80047ec:	2020      	movs	r0, #32
 80047ee:	2101      	movs	r1, #1
 80047f0:	f000 fc12 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80047f4:	2020      	movs	r0, #32
 80047f6:	e00c      	b.n	8004812 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80047f8:	2080      	movs	r0, #128	; 0x80
 80047fa:	2101      	movs	r1, #1
 80047fc:	f000 fc0c 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8004800:	2080      	movs	r0, #128	; 0x80
 8004802:	e006      	b.n	8004812 <GPIO_DeInit+0x8e>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8004804:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004808:	2101      	movs	r1, #1
 800480a:	f000 fc05 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 800480e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004812:	2100      	movs	r1, #0
      break;                       

    default:
      break;
  }
}
 8004814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8004818:	f000 bbfe 	b.w	8005018 <RCC_APB2PeriphResetCmd>
 800481c:	bd08      	pop	{r3, pc}
 800481e:	bf00      	nop
 8004820:	40011400 	andmi	r1, r1, r0, lsl #8
 8004824:	40011c00 	andmi	r1, r1, r0, lsl #24

08004828 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8004828:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800482a:	2001      	movs	r0, #1
 800482c:	4601      	mov	r1, r0
 800482e:	f000 fbf3 	bl	8005018 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8004832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8004836:	2001      	movs	r0, #1
 8004838:	2100      	movs	r1, #0
 800483a:	f000 bbed 	b.w	8005018 <RCC_APB2PeriphResetCmd>

0800483e <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800483e:	78ca      	ldrb	r2, [r1, #3]
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8004842:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8004844:	bf48      	it	mi
 8004846:	788c      	ldrbmi	r4, [r1, #2]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8004848:	880d      	ldrh	r5, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800484a:	f002 030f 	and.w	r3, r2, #15
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 800484e:	bf48      	it	mi
 8004850:	4323      	orrmi	r3, r4
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8004852:	f015 0fff 	tst.w	r5, #255	; 0xff
 8004856:	d01d      	beq.n	8004894 <GPIO_Init+0x56>
  {
    tmpreg = GPIOx->CRL;
 8004858:	6801      	ldr	r1, [r0, #0]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800485a:	2400      	movs	r4, #0
    {
      pos = ((u32)0x01) << pinpos;
 800485c:	2601      	movs	r6, #1
 800485e:	40a6      	lsls	r6, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004860:	ea06 0705 	and.w	r7, r6, r5

      if (currentpin == pos)
 8004864:	42b7      	cmp	r7, r6
 8004866:	d111      	bne.n	800488c <GPIO_Init+0x4e>
      {
        pos = pinpos << 2;
 8004868:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 800486c:	260f      	movs	r6, #15
 800486e:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 8004872:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004876:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004878:	fa03 f60e 	lsl.w	r6, r3, lr
 800487c:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004880:	d101      	bne.n	8004886 <GPIO_Init+0x48>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8004882:	6147      	str	r7, [r0, #20]
 8004884:	e002      	b.n	800488c <GPIO_Init+0x4e>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004886:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8004888:	bf08      	it	eq
 800488a:	6107      	streq	r7, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800488c:	3401      	adds	r4, #1
 800488e:	2c08      	cmp	r4, #8
 8004890:	d1e4      	bne.n	800485c <GPIO_Init+0x1e>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004892:	6001      	str	r1, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004894:	2dff      	cmp	r5, #255	; 0xff
 8004896:	d91f      	bls.n	80048d8 <GPIO_Init+0x9a>
  {
    tmpreg = GPIOx->CRH;
 8004898:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800489a:	2400      	movs	r4, #0
 800489c:	f104 0708 	add.w	r7, r4, #8
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 80048a0:	2601      	movs	r6, #1
 80048a2:	40be      	lsls	r6, r7
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80048a4:	ea06 0705 	and.w	r7, r6, r5
      if (currentpin == pos)
 80048a8:	42b7      	cmp	r7, r6
 80048aa:	d111      	bne.n	80048d0 <GPIO_Init+0x92>
      {
        pos = pinpos << 2;
 80048ac:	ea4f 0e84 	mov.w	lr, r4, lsl #2
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 80048b0:	260f      	movs	r6, #15
 80048b2:	fa06 f60e 	lsl.w	r6, r6, lr
        tmpreg &= ~pinmask;
 80048b6:	ea21 0106 	bic.w	r1, r1, r6

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80048ba:	2a28      	cmp	r2, #40	; 0x28
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80048bc:	fa03 f60e 	lsl.w	r6, r3, lr
 80048c0:	ea41 0106 	orr.w	r1, r1, r6

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80048c4:	d101      	bne.n	80048ca <GPIO_Init+0x8c>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 80048c6:	6147      	str	r7, [r0, #20]
 80048c8:	e002      	b.n	80048d0 <GPIO_Init+0x92>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80048ca:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 80048cc:	bf08      	it	eq
 80048ce:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80048d0:	3401      	adds	r4, #1
 80048d2:	2c08      	cmp	r4, #8
 80048d4:	d1e2      	bne.n	800489c <GPIO_Init+0x5e>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80048d6:	6041      	str	r1, [r0, #4]
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048da <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80048da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048de:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80048e0:	2302      	movs	r3, #2
 80048e2:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80048e4:	2304      	movs	r3, #4
 80048e6:	70c3      	strb	r3, [r0, #3]
 80048e8:	4770      	bx	lr

080048ea <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 80048ea:	6883      	ldr	r3, [r0, #8]
 80048ec:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80048ee:	bf14      	ite	ne
 80048f0:	2001      	movne	r0, #1
 80048f2:	2000      	moveq	r0, #0
 80048f4:	4770      	bx	lr

080048f6 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 80048f6:	6880      	ldr	r0, [r0, #8]
}
 80048f8:	b280      	uxth	r0, r0
 80048fa:	4770      	bx	lr

080048fc <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 80048fc:	68c3      	ldr	r3, [r0, #12]
 80048fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8004900:	bf14      	ite	ne
 8004902:	2001      	movne	r0, #1
 8004904:	2000      	moveq	r0, #0
 8004906:	4770      	bx	lr

08004908 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8004908:	68c0      	ldr	r0, [r0, #12]
}
 800490a:	b280      	uxth	r0, r0
 800490c:	4770      	bx	lr

0800490e <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800490e:	6101      	str	r1, [r0, #16]
 8004910:	4770      	bx	lr

08004912 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8004912:	6141      	str	r1, [r0, #20]
 8004914:	4770      	bx	lr

08004916 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8004916:	b10a      	cbz	r2, 800491c <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004918:	6101      	str	r1, [r0, #16]
 800491a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800491c:	6141      	str	r1, [r0, #20]
 800491e:	4770      	bx	lr

08004920 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8004920:	60c1      	str	r1, [r0, #12]
 8004922:	4770      	bx	lr

08004924 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8004924:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004928:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800492a:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800492c:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800492e:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004930:	6983      	ldr	r3, [r0, #24]
 8004932:	4770      	bx	lr

08004934 <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8004934:	4a05      	ldr	r2, [pc, #20]	; (800494c <GPIO_EventOutputConfig+0x18>)
 8004936:	6813      	ldr	r3, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8004938:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	4319      	orrs	r1, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8004942:	ea41 1000 	orr.w	r0, r1, r0, lsl #4

  AFIO->EVCR = tmpreg;
 8004946:	6010      	str	r0, [r2, #0]
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	andmi	r0, r1, r0

08004950 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <GPIO_EventOutputCmd+0x8>)
 8004952:	6018      	str	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	4220001c 	eormi	r0, r0, #28

0800495c <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 800495c:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 800495e:	4c13      	ldr	r4, [pc, #76]	; (80049ac <GPIO_PinRemapConfig+0x50>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8004960:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8004964:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8004968:	6863      	ldr	r3, [r4, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 800496a:	b282      	uxth	r2, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800496c:	d106      	bne.n	800497c <GPIO_PinRemapConfig+0x20>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800496e:	6865      	ldr	r5, [r4, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8004970:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8004974:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8004978:	6065      	str	r5, [r4, #4]
 800497a:	e00e      	b.n	800499a <GPIO_PinRemapConfig+0x3e>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800497c:	02c4      	lsls	r4, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800497e:	bf55      	itete	pl
 8004980:	0d44      	lsrpl	r4, r0, #21
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 8004982:	2403      	movmi	r4, #3
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004984:	0124      	lslpl	r4, r4, #4
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8004986:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 800498a:	bf4c      	ite	mi
 800498c:	40ac      	lslmi	r4, r5
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800498e:	fa02 f404 	lslpl.w	r4, r2, r4
 8004992:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8004996:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 800499a:	b119      	cbz	r1, 80049a4 <GPIO_PinRemapConfig+0x48>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800499c:	0d40      	lsrs	r0, r0, #21
 800499e:	0100      	lsls	r0, r0, #4
 80049a0:	4082      	lsls	r2, r0
 80049a2:	4313      	orrs	r3, r2
  }

  AFIO->MAPR = tmpreg;
 80049a4:	4a01      	ldr	r2, [pc, #4]	; (80049ac <GPIO_PinRemapConfig+0x50>)
 80049a6:	6053      	str	r3, [r2, #4]
 80049a8:	bd30      	pop	{r4, r5, pc}
 80049aa:	bf00      	nop
 80049ac:	40010000 	andmi	r0, r1, r0

080049b0 <GPIO_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 80049b0:	f001 0303 	and.w	r3, r1, #3
 80049b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80049b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80049bc:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 80049c0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 80049c2:	009b      	lsls	r3, r3, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80049c4:	688c      	ldr	r4, [r1, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 80049c6:	220f      	movs	r2, #15
 80049c8:	409a      	lsls	r2, r3

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80049ca:	ea24 0202 	bic.w	r2, r4, r2
 80049ce:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 80049d0:	688a      	ldr	r2, [r1, #8]
 80049d2:	4098      	lsls	r0, r3
 80049d4:	4302      	orrs	r2, r0
 80049d6:	608a      	str	r2, [r1, #8]
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	bf00      	nop

080049dc <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <NVIC_DeInit+0x30>)
  NVIC->ICER[1] = 0x0FFFFFFF;
 80049de:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80049e2:	f04f 31ff 	mov.w	r1, #4294967295
 80049e6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICER[1] = 0x0FFFFFFF;
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[0] = 0xFFFFFFFF;
 80049ee:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ICPR[1] = 0x0FFFFFFF;
 80049f2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  
  for(index = 0; index < 0x0F; index++)
 80049f6:	2200      	movs	r2, #0
  {
     NVIC->IPR[index] = 0x00000000;
 80049f8:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80049fc:	3201      	adds	r2, #1
  {
     NVIC->IPR[index] = 0x00000000;
 80049fe:	2000      	movs	r0, #0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004a00:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 8004a02:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004a06:	d1f7      	bne.n	80049f8 <NVIC_DeInit+0x1c>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e100 	and	lr, r0, r0, lsl #2

08004a10 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <NVIC_SCBDeInit+0x28>)
 8004a12:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8004a16:	4909      	ldr	r1, [pc, #36]	; (8004a3c <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004a18:	605a      	str	r2, [r3, #4]
  SCB->VTOR = 0x00000000;
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8004a1e:	60d9      	str	r1, [r3, #12]
  SCB->SCR = 0x00000000;
 8004a20:	611a      	str	r2, [r3, #16]
  SCB->CCR = 0x00000000;
 8004a22:	615a      	str	r2, [r3, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8004a24:	619a      	str	r2, [r3, #24]
 8004a26:	61da      	str	r2, [r3, #28]
 8004a28:	621a      	str	r2, [r3, #32]
  }
  SCB->SHCSR = 0x00000000;
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
  SCB->CFSR = 0xFFFFFFFF;
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
  SCB->HFSR = 0xFFFFFFFF;
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c
  SCB->DFSR = 0xFFFFFFFF;
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	and	lr, r0, r0, lsl #26
 8004a3c:	05fa0000 	ldrbeq	r0, [sl, #0]!

08004a40 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004a40:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004a44:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <NVIC_PriorityGroupConfig+0x10>)
 8004a46:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004a4a:	60d8      	str	r0, [r3, #12]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000ed00 	and	lr, r0, r0, lsl #26

08004a54 <NVIC_Init>:
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004a54:	78c2      	ldrb	r2, [r0, #3]
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004a56:	b530      	push	{r4, r5, lr}
 8004a58:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004a5a:	b372      	cbz	r2, 8004aba <NVIC_Init+0x66>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <NVIC_Init+0x7c>)
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004a5e:	f003 0503 	and.w	r5, r3, #3
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004a62:	68d4      	ldr	r4, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004a64:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004a66:	43e4      	mvns	r4, r4
 8004a68:	f3c4 2402 	ubfx	r4, r4, #8, #3
    tmppre = (0x4 - tmppriority);
 8004a6c:	f1c4 0104 	rsb	r1, r4, #4
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004a70:	fa02 f101 	lsl.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8004a74:	220f      	movs	r2, #15
 8004a76:	40e2      	lsrs	r2, r4
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004a78:	7884      	ldrb	r4, [r0, #2]
 8004a7a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8004a7e:	4022      	ands	r2, r4
 8004a80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004a84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8004a88:	430a      	orrs	r2, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8004a8a:	f8d3 4300 	ldr.w	r4, [r3, #768]	; 0x300
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004a8e:	00ed      	lsls	r5, r5, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8004a90:	0112      	lsls	r2, r2, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004a92:	21ff      	movs	r1, #255	; 0xff
 8004a94:	40a9      	lsls	r1, r5
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8004a96:	40aa      	lsls	r2, r5
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8004a98:	ea24 0401 	bic.w	r4, r4, r1
    tmppriority &= tmpmask;  
 8004a9c:	400a      	ands	r2, r1
    tmpreg |= tmppriority;
 8004a9e:	4322      	orrs	r2, r4

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8004aa0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004aa4:	7803      	ldrb	r3, [r0, #0]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004aa6:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004aa8:	0959      	lsrs	r1, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <NVIC_Init+0x80>)
 8004ab4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004ab8:	bd30      	pop	{r4, r5, pc}
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004aba:	095a      	lsrs	r2, r3, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8004abc:	2101      	movs	r1, #1
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	4099      	lsls	r1, r3
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8004ac4:	f102 0320 	add.w	r3, r2, #32
 8004ac8:	4a02      	ldr	r2, [pc, #8]	; (8004ad4 <NVIC_Init+0x80>)
 8004aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004ace:	bd30      	pop	{r4, r5, pc}
 8004ad0:	e000ed00 	and	lr, r0, r0, lsl #26
 8004ad4:	e000e100 	and	lr, r0, r0, lsl #2

08004ad8 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8004adc:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8004ade:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8004ae0:	70c3      	strb	r3, [r0, #3]
 8004ae2:	4770      	bx	lr

08004ae4 <NVIC_SETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
  __SETPRIMASK();
 8004ae4:	f001 ba35 	b.w	8005f52 <__SETPRIMASK>

08004ae8 <NVIC_RESETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
  __RESETPRIMASK();
 8004ae8:	f001 ba35 	b.w	8005f56 <__RESETPRIMASK>

08004aec <NVIC_SETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
  __SETFAULTMASK();
 8004aec:	f001 ba35 	b.w	8005f5a <__SETFAULTMASK>

08004af0 <NVIC_RESETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
  __RESETFAULTMASK();
 8004af0:	f001 ba35 	b.w	8005f5e <__RESETFAULTMASK>

08004af4 <NVIC_BASEPRICONFIG>:
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8004af4:	0100      	lsls	r0, r0, #4
 8004af6:	f001 ba34 	b.w	8005f62 <__BASEPRICONFIG>

08004afa <NVIC_GetBASEPRI>:
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
  return (__GetBASEPRI());
 8004afa:	f001 ba35 	b.w	8005f68 <__GetBASEPRI>

08004afe <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8004afe:	4b02      	ldr	r3, [pc, #8]	; (8004b08 <NVIC_GetCurrentPendingIRQChannel+0xa>)
 8004b00:	6858      	ldr	r0, [r3, #4]
}
 8004b02:	f3c0 3009 	ubfx	r0, r0, #12, #10
 8004b06:	4770      	bx	lr
 8004b08:	e000ed00 	and	lr, r0, r0, lsl #26

08004b0c <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004b0c:	f000 031f 	and.w	r3, r0, #31
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8004b14:	4904      	ldr	r1, [pc, #16]	; (8004b28 <NVIC_GetIRQChannelPendingBitStatus+0x1c>)
 8004b16:	0943      	lsrs	r3, r0, #5
 8004b18:	3340      	adds	r3, #64	; 0x40
 8004b1a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004b1e:	4010      	ands	r0, r2
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8004b20:	1a83      	subs	r3, r0, r2
 8004b22:	4258      	negs	r0, r3
 8004b24:	4158      	adcs	r0, r3
 8004b26:	4770      	bx	lr
 8004b28:	e000e100 	and	lr, r0, r0, lsl #2

08004b2c <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8004b2c:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <NVIC_SetIRQChannelPendingBit+0x8>)
 8004b2e:	6018      	str	r0, [r3, #0]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000ef00 	and	lr, r0, r0, lsl #30

08004b38 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8004b38:	0943      	lsrs	r3, r0, #5
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f000 001f 	and.w	r0, r0, #31
 8004b40:	4902      	ldr	r1, [pc, #8]	; (8004b4c <NVIC_ClearIRQChannelPendingBit+0x14>)
 8004b42:	4082      	lsls	r2, r0
 8004b44:	3360      	adds	r3, #96	; 0x60
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b4a:	4770      	bx	lr
 8004b4c:	e000e100 	and	lr, r0, r0, lsl #2

08004b50 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <NVIC_GetCurrentActiveHandler+0xc>)
 8004b52:	6858      	ldr	r0, [r3, #4]
}
 8004b54:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000ed00 	and	lr, r0, r0, lsl #26

08004b60 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004b60:	f000 031f 	and.w	r3, r0, #31
 8004b64:	2201      	movs	r2, #1
 8004b66:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8004b68:	4904      	ldr	r1, [pc, #16]	; (8004b7c <NVIC_GetIRQChannelActiveBitStatus+0x1c>)
 8004b6a:	0943      	lsrs	r3, r0, #5
 8004b6c:	3380      	adds	r3, #128	; 0x80
 8004b6e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8004b72:	4010      	ands	r0, r2
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8004b74:	1a83      	subs	r3, r0, r2
 8004b76:	4258      	negs	r0, r3
 8004b78:	4158      	adcs	r0, r3
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	and	lr, r0, r0, lsl #2

08004b80 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8004b80:	4b01      	ldr	r3, [pc, #4]	; (8004b88 <NVIC_GetCPUID+0x8>)
 8004b82:	6818      	ldr	r0, [r3, #0]
}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000ed00 	and	lr, r0, r0, lsl #26

08004b8c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8004b8c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004b90:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004b94:	4b01      	ldr	r3, [pc, #4]	; (8004b9c <NVIC_SetVectorTable+0x10>)
 8004b96:	4308      	orrs	r0, r1
 8004b98:	6098      	str	r0, [r3, #8]
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	and	lr, r0, r0, lsl #26

08004ba0 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8004ba0:	4a01      	ldr	r2, [pc, #4]	; (8004ba8 <NVIC_GenerateSystemReset+0x8>)
 8004ba2:	4b02      	ldr	r3, [pc, #8]	; (8004bac <NVIC_GenerateSystemReset+0xc>)
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	4770      	bx	lr
 8004ba8:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8004bac:	e000ed00 	and	lr, r0, r0, lsl #26

08004bb0 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8004bb0:	4a01      	ldr	r2, [pc, #4]	; (8004bb8 <NVIC_GenerateCoreReset+0x8>)
 8004bb2:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <NVIC_GenerateCoreReset+0xc>)
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	4770      	bx	lr
 8004bb8:	05fa0001 	ldrbeq	r0, [sl, #1]!
 8004bbc:	e000ed00 	and	lr, r0, r0, lsl #26

08004bc0 <NVIC_SystemLPConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
{
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8004bc2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004bc4:	b109      	cbz	r1, 8004bca <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8004bc6:	4310      	orrs	r0, r2
 8004bc8:	e001      	b.n	8004bce <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 8004bca:	ea22 0000 	bic.w	r0, r2, r0
 8004bce:	6118      	str	r0, [r3, #16]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	e000ed00 	and	lr, r0, r0, lsl #26

08004bd8 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 8004bd8:	f000 001f 	and.w	r0, r0, #31
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4082      	lsls	r2, r0
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <NVIC_SystemHandlerConfig+0x1c>)

  if (NewState != DISABLE)
 8004be2:	b111      	cbz	r1, 8004bea <NVIC_SystemHandlerConfig+0x12>
  {
    SCB->SHCSR |= tmpreg;
 8004be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004be6:	430a      	orrs	r2, r1
 8004be8:	e002      	b.n	8004bf0 <NVIC_SystemHandlerConfig+0x18>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8004bea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bec:	ea21 0202 	bic.w	r2, r1, r2
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	and	lr, r0, r0, lsl #26

08004bf8 <NVIC_SystemHandlerPriorityConfig>:
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <NVIC_SystemHandlerPriorityConfig+0x48>)
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 8004bfa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	f3c3 2302 	ubfx	r3, r3, #8, #3
  tmp1 = (0x4 - tmppriority);
 8004c04:	f1c3 0404 	rsb	r4, r3, #4
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 8004c08:	40a1      	lsls	r1, r4
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
 8004c0a:	24ff      	movs	r4, #255	; 0xff
 8004c0c:	fa24 f303 	lsr.w	r3, r4, r3
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8004c10:	401a      	ands	r2, r3

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
 8004c12:	f3c0 2301 	ubfx	r3, r0, #8, #2
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 8004c16:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004c1a:	0080      	lsls	r0, r0, #2
 8004c1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c20:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8004c24:	4311      	orrs	r1, r2

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8004c26:	00db      	lsls	r3, r3, #3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004c28:	6982      	ldr	r2, [r0, #24]
  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
 8004c2a:	409c      	lsls	r4, r3
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004c2c:	ea22 0404 	bic.w	r4, r2, r4
 8004c30:	6184      	str	r4, [r0, #24]
  SCB->SHPR[tmp1] |= tmppriority;
 8004c32:	6982      	ldr	r2, [r0, #24]
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8004c34:	0109      	lsls	r1, r1, #4
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8004c36:	4099      	lsls	r1, r3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	6181      	str	r1, [r0, #24]
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	and	lr, r0, r0, lsl #26

08004c44 <NVIC_GetSystemHandlerPendingBitStatus>:
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004c44:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <NVIC_GetSystemHandlerPendingBitStatus+0x18>)

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;
 8004c46:	f3c0 2083 	ubfx	r0, r0, #10, #4

  tmppos = (u32)0x01 << tmppos;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004c4e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004c50:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004c52:	1ac3      	subs	r3, r0, r3
 8004c54:	4258      	negs	r0, r3
 8004c56:	4158      	adcs	r0, r3
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000ed00 	and	lr, r0, r0, lsl #26

08004c60 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004c60:	4904      	ldr	r1, [pc, #16]	; (8004c74 <NVIC_SetSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004c62:	f000 001f 	and.w	r0, r0, #31
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8004c66:	684b      	ldr	r3, [r1, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4082      	lsls	r2, r0
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000ed00 	and	lr, r0, r0, lsl #26

08004c78 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004c78:	4904      	ldr	r1, [pc, #16]	; (8004c8c <NVIC_ClearSystemHandlerPendingBit+0x14>)

  /* Check the parameters */
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8004c7a:	f000 001f 	and.w	r0, r0, #31
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8004c7e:	684b      	ldr	r3, [r1, #4]
 8004c80:	3801      	subs	r0, #1
 8004c82:	2201      	movs	r2, #1
 8004c84:	4082      	lsls	r2, r0
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	and	lr, r0, r0, lsl #26

08004c90 <NVIC_GetSystemHandlerActiveBitStatus>:
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;

  tmp = SCB->SHCSR & tmppos;
 8004c90:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <NVIC_GetSystemHandlerActiveBitStatus+0x18>)
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
 8004c92:	f3c0 3083 	ubfx	r0, r0, #14, #4

  tmppos = (u32)0x01 << tmppos;
 8004c96:	2301      	movs	r3, #1
 8004c98:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004c9a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004c9c:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004c9e:	1ac3      	subs	r3, r0, r3
 8004ca0:	4258      	negs	r0, r3
 8004ca2:	4158      	adcs	r0, r3
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000ed00 	and	lr, r0, r0, lsl #26

08004cac <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8004cac:	f3c0 4381 	ubfx	r3, r0, #18, #2
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <NVIC_GetFaultHandlerSources+0x2c>)
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8004cb2:	b90b      	cbnz	r3, 8004cb8 <NVIC_GetFaultHandlerSources+0xc>
  {
    faultsources = SCB->HFSR;
 8004cb4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004cb6:	4770      	bx	lr
  }
  else if (tmpreg == 0x01)
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10a      	bne.n	8004cd2 <NVIC_GetFaultHandlerSources+0x26>

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004cbc:	f3c0 5301 	ubfx	r3, r0, #20, #2
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004cc0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004cc2:	00da      	lsls	r2, r3, #3
 8004cc4:	40d0      	lsrs	r0, r2
    if (tmppos != 0x02)
 8004cc6:	2b02      	cmp	r3, #2
    {
      faultsources &= (u32)0x0F;
 8004cc8:	bf14      	ite	ne
 8004cca:	f000 000f 	andne.w	r0, r0, #15
    }
    else
    {
      faultsources &= (u32)0xFF;
 8004cce:	b2c0      	uxtbeq	r0, r0
 8004cd0:	4770      	bx	lr
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8004cd2:	6b10      	ldr	r0, [r2, #48]	; 0x30
  }
  return faultsources;
}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	e000ed00 	and	lr, r0, r0, lsl #26

08004cdc <NVIC_GetFaultAddress>:
*                       - SystemHandler_BusFault
* Output         : None
* Return         : Fault address.
*******************************************************************************/
u32 NVIC_GetFaultAddress(u32 SystemHandler)
{
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <NVIC_GetFaultAddress+0x10>)
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8004cde:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8004ce2:	bf0c      	ite	eq
 8004ce4:	6b58      	ldreq	r0, [r3, #52]	; 0x34
  }
  else
  {
    faultaddress = SCB->BFAR;
 8004ce6:	6b98      	ldrne	r0, [r3, #56]	; 0x38
  }
  return faultaddress;
}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000ed00 	and	lr, r0, r0, lsl #26

08004cf0 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8004cf0:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8004cf2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	f000 f99a 	bl	8005030 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 8004cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004d00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d04:	2100      	movs	r1, #0
 8004d06:	f000 b993 	b.w	8005030 <RCC_APB1PeriphResetCmd>

08004d0a <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8004d0a:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <PWR_BackupAccessCmd+0x6>)
 8004d0c:	6018      	str	r0, [r3, #0]
 8004d0e:	4770      	bx	lr
 8004d10:	420e0020 	andmi	r0, lr, #32

08004d14 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <PWR_PVDCmd+0x8>)
 8004d16:	6018      	str	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	420e0010 	andmi	r0, lr, #16

08004d20 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8004d20:	4a03      	ldr	r2, [pc, #12]	; (8004d30 <PWR_PVDLevelConfig+0x10>)
 8004d22:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8004d24:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8004d28:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40007000 	andmi	r7, r0, r0

08004d34 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <PWR_WakeUpPinCmd+0x8>)
 8004d36:	6018      	str	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	420e00a0 	andmi	r0, lr, #160	; 0xa0

08004d40 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <PWR_EnterSTOPMode+0x24>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004d42:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004d44:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8004d46:	f023 0303 	bic.w	r3, r3, #3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8004d4a:	ea40 0003 	orr.w	r0, r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004d4e:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004d50:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <PWR_EnterSTOPMode+0x28>)
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	f043 0304 	orr.w	r3, r3, #4
 8004d58:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004d5a:	d101      	bne.n	8004d60 <PWR_EnterSTOPMode+0x20>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004d5c:	f001 b8d4 	b.w	8005f08 <__WFI>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8004d60:	f001 b8d4 	b.w	8005f0c <__WFE>
 8004d64:	40007000 	andmi	r7, r0, r0
 8004d68:	e000ed10 	and	lr, r0, r0, lsl sp

08004d6c <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <PWR_EnterSTANDBYMode+0x20>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	f042 0204 	orr.w	r2, r2, #4
 8004d74:	601a      	str	r2, [r3, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	f042 0202 	orr.w	r2, r2, #2
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004d7e:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <PWR_EnterSTANDBYMode+0x24>)
 8004d80:	6813      	ldr	r3, [r2, #0]
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8004d88:	f001 b8be 	b.w	8005f08 <__WFI>
 8004d8c:	40007000 	andmi	r7, r0, r0
 8004d90:	e000ed10 	and	lr, r0, r0, lsl sp

08004d94 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <PWR_GetFlagStatus+0x10>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004d9a:	bf14      	ite	ne
 8004d9c:	2001      	movne	r0, #1
 8004d9e:	2000      	moveq	r0, #0
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40007000 	andmi	r7, r0, r0

08004da8 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8004da8:	4a02      	ldr	r2, [pc, #8]	; (8004db4 <PWR_ClearFlag+0xc>)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	4770      	bx	lr
 8004db4:	40007000 	andmi	r7, r0, r0

08004db8 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <RCC_DeInit+0x34>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <RCC_DeInit+0x38>)
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004dd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004de4:	605a      	str	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	4770      	bx	lr
 8004dec:	40021000 	andmi	r1, r2, r0
 8004df0:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08004df4 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <RCC_HSEConfig+0x34>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004df6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e00:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e08:	601a      	str	r2, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004e0a:	d003      	beq.n	8004e14 <RCC_HSEConfig+0x20>
 8004e0c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004e10:	d004      	beq.n	8004e1c <RCC_HSEConfig+0x28>
 8004e12:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e1a:	e002      	b.n	8004e22 <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40021000 	andmi	r1, r2, r0

08004e2c <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004e2c:	4a03      	ldr	r2, [pc, #12]	; (8004e3c <RCC_AdjustHSICalibrationValue+0x10>)
 8004e2e:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004e30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004e34:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004e38:	6010      	str	r0, [r2, #0]
 8004e3a:	4770      	bx	lr
 8004e3c:	40021000 	andmi	r1, r2, r0

08004e40 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004e40:	4b01      	ldr	r3, [pc, #4]	; (8004e48 <RCC_HSICmd+0x8>)
 8004e42:	6018      	str	r0, [r3, #0]
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	42420000 	submi	r0, r2, #0

08004e4c <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004e4c:	4a03      	ldr	r2, [pc, #12]	; (8004e5c <RCC_PLLConfig+0x10>)
 8004e4e:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004e50:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004e54:	4319      	orrs	r1, r3

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004e56:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e58:	6050      	str	r0, [r2, #4]
 8004e5a:	4770      	bx	lr
 8004e5c:	40021000 	andmi	r1, r2, r0

08004e60 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004e60:	4b01      	ldr	r3, [pc, #4]	; (8004e68 <RCC_PLLCmd+0x8>)
 8004e62:	6018      	str	r0, [r3, #0]
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	42420060 	submi	r0, r2, #96	; 0x60

08004e6c <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004e6c:	4a03      	ldr	r2, [pc, #12]	; (8004e7c <RCC_SYSCLKConfig+0x10>)
 8004e6e:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004e70:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004e74:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e76:	6050      	str	r0, [r2, #4]
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	andmi	r1, r2, r0

08004e80 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004e80:	4b02      	ldr	r3, [pc, #8]	; (8004e8c <RCC_GetSYSCLKSource+0xc>)
 8004e82:	6858      	ldr	r0, [r3, #4]
}
 8004e84:	f000 000c 	and.w	r0, r0, #12
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	andmi	r1, r2, r0

08004e90 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <RCC_HCLKConfig+0x10>)
 8004e92:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004e98:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004e9a:	6050      	str	r0, [r2, #4]
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	andmi	r1, r2, r0

08004ea4 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004ea4:	4a03      	ldr	r2, [pc, #12]	; (8004eb4 <RCC_PCLK1Config+0x10>)
 8004ea6:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004ea8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004eac:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004eae:	6050      	str	r0, [r2, #4]
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	andmi	r1, r2, r0

08004eb8 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004eb8:	4a03      	ldr	r2, [pc, #12]	; (8004ec8 <RCC_PCLK2Config+0x10>)
 8004eba:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004ebc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004ec0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004ec4:	6050      	str	r0, [r2, #4]
 8004ec6:	4770      	bx	lr
 8004ec8:	40021000 	andmi	r1, r2, r0

08004ecc <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004ece:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ed0:	b109      	cbz	r1, 8004ed6 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004ed2:	4310      	orrs	r0, r2
 8004ed4:	e001      	b.n	8004eda <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8004ed6:	ea22 0000 	bic.w	r0, r2, r0
 8004eda:	7018      	strb	r0, [r3, #0]
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40021009 	andmi	r1, r2, r9

08004ee4 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <RCC_USBCLKConfig+0x8>)
 8004ee6:	6018      	str	r0, [r3, #0]
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	424200d8 	submi	r0, r2, #216	; 0xd8

08004ef0 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8004ef0:	4a03      	ldr	r2, [pc, #12]	; (8004f00 <RCC_ADCCLKConfig+0x10>)
 8004ef2:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004ef4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004ef8:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004efa:	6050      	str	r0, [r2, #4]
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40021000 	andmi	r1, r2, r0

08004f04 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <RCC_LSEConfig+0x1c>)
 8004f06:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004f08:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004f0a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004f0c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004f0e:	d002      	beq.n	8004f16 <RCC_LSEConfig+0x12>
 8004f10:	2804      	cmp	r0, #4
 8004f12:	d002      	beq.n	8004f1a <RCC_LSEConfig+0x16>
 8004f14:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8004f16:	7018      	strb	r0, [r3, #0]
      break;
 8004f18:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	4770      	bx	lr
 8004f20:	40021020 	andmi	r1, r2, r0, lsr #32

08004f24 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8004f24:	4b01      	ldr	r3, [pc, #4]	; (8004f2c <RCC_LSICmd+0x8>)
 8004f26:	6018      	str	r0, [r3, #0]
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

08004f30 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004f30:	4a02      	ldr	r2, [pc, #8]	; (8004f3c <RCC_RTCCLKConfig+0xc>)
 8004f32:	6a13      	ldr	r3, [r2, #32]
 8004f34:	4318      	orrs	r0, r3
 8004f36:	6210      	str	r0, [r2, #32]
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	andmi	r1, r2, r0

08004f40 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004f40:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <RCC_RTCCLKCmd+0x8>)
 8004f42:	6018      	str	r0, [r3, #0]
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

08004f4c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <RCC_GetClocksFreq+0x74>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004f4e:	b510      	push	{r4, lr}
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004f50:	6853      	ldr	r3, [r2, #4]
 8004f52:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d001      	beq.n	8004f5e <RCC_GetClocksFreq+0x12>
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d001      	beq.n	8004f62 <RCC_GetClocksFreq+0x16>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8004f5e:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <RCC_GetClocksFreq+0x78>)
 8004f60:	e00e      	b.n	8004f80 <RCC_GetClocksFreq+0x34>
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004f62:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004f64:	6851      	ldr	r1, [r2, #4]
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004f66:	f3c3 4383 	ubfx	r3, r3, #18, #4

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004f6a:	03cc      	lsls	r4, r1, #15
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8004f6c:	f103 0302 	add.w	r3, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004f70:	d502      	bpl.n	8004f78 <RCC_GetClocksFreq+0x2c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8004f72:	6851      	ldr	r1, [r2, #4]
 8004f74:	0389      	lsls	r1, r1, #14
 8004f76:	d501      	bpl.n	8004f7c <RCC_GetClocksFreq+0x30>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8004f78:	4913      	ldr	r1, [pc, #76]	; (8004fc8 <RCC_GetClocksFreq+0x7c>)
 8004f7a:	e000      	b.n	8004f7e <RCC_GetClocksFreq+0x32>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004f7c:	4911      	ldr	r1, [pc, #68]	; (8004fc4 <RCC_GetClocksFreq+0x78>)
 8004f7e:	434b      	muls	r3, r1
 8004f80:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004f82:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8004f84:	4911      	ldr	r1, [pc, #68]	; (8004fcc <RCC_GetClocksFreq+0x80>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8004f86:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004f8a:	5ccc      	ldrb	r4, [r1, r3]
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	40e3      	lsrs	r3, r4
 8004f90:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004f92:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8004f94:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004f98:	5d0c      	ldrb	r4, [r1, r4]
 8004f9a:	fa23 f404 	lsr.w	r4, r3, r4
 8004f9e:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004fa0:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8004fa2:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004fa6:	5d0c      	ldrb	r4, [r1, r4]
 8004fa8:	40e3      	lsrs	r3, r4
 8004faa:	60c3      	str	r3, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004fac:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8004fae:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8004fb2:	440a      	add	r2, r1
 8004fb4:	7c12      	ldrb	r2, [r2, #16]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fba:	6103      	str	r3, [r0, #16]
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	andmi	r1, r2, r0
 8004fc4:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8004fc8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8004fcc:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}

08004fd0 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004fd2:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004fd4:	b109      	cbz	r1, 8004fda <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004fd6:	4310      	orrs	r0, r2
 8004fd8:	e001      	b.n	8004fde <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004fda:	ea22 0000 	bic.w	r0, r2, r0
 8004fde:	6158      	str	r0, [r3, #20]
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	andmi	r1, r2, r0

08004fe8 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004fea:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004fec:	b109      	cbz	r1, 8004ff2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004fee:	4310      	orrs	r0, r2
 8004ff0:	e001      	b.n	8004ff6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004ff2:	ea22 0000 	bic.w	r0, r2, r0
 8004ff6:	6198      	str	r0, [r3, #24]
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40021000 	andmi	r1, r2, r0

08005000 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005002:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005004:	b109      	cbz	r1, 800500a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005006:	4310      	orrs	r0, r2
 8005008:	e001      	b.n	800500e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800500a:	ea22 0000 	bic.w	r0, r2, r0
 800500e:	61d8      	str	r0, [r3, #28]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40021000 	andmi	r1, r2, r0

08005018 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800501a:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800501c:	b109      	cbz	r1, 8005022 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800501e:	4310      	orrs	r0, r2
 8005020:	e001      	b.n	8005026 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8005022:	ea22 0000 	bic.w	r0, r2, r0
 8005026:	60d8      	str	r0, [r3, #12]
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	andmi	r1, r2, r0

08005030 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8005032:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005034:	b109      	cbz	r1, 800503a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8005036:	4310      	orrs	r0, r2
 8005038:	e001      	b.n	800503e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800503a:	ea22 0000 	bic.w	r0, r2, r0
 800503e:	6118      	str	r0, [r3, #16]
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40021000 	andmi	r1, r2, r0

08005048 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8005048:	4b01      	ldr	r3, [pc, #4]	; (8005050 <RCC_BackupResetCmd+0x8>)
 800504a:	6018      	str	r0, [r3, #0]
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

08005054 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8005054:	4b01      	ldr	r3, [pc, #4]	; (800505c <RCC_ClockSecuritySystemCmd+0x8>)
 8005056:	6018      	str	r0, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	4242004c 	submi	r0, r2, #76	; 0x4c

08005060 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8005060:	4b01      	ldr	r3, [pc, #4]	; (8005068 <RCC_MCOConfig+0x8>)
 8005062:	7018      	strb	r0, [r3, #0]
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40021007 	andmi	r1, r2, r7

0800506c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800506c:	0942      	lsrs	r2, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 800506e:	2a01      	cmp	r2, #1
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <RCC_GetFlagStatus+0x24>)
 8005072:	d101      	bne.n	8005078 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	e003      	b.n	8005080 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8005078:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 800507a:	bf0c      	ite	eq
 800507c:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800507e:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8005080:	f000 001f 	and.w	r0, r0, #31
 8005084:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8005088:	f000 0001 	and.w	r0, r0, #1
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40021000 	andmi	r1, r2, r0

08005094 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8005094:	b507      	push	{r0, r1, r2, lr}
  vu32 StartUpCounter = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800509a:	2031      	movs	r0, #49	; 0x31
 800509c:	f7ff ffe6 	bl	800506c <RCC_GetFlagStatus>
    StartUpCounter++;  
 80050a0:	9b01      	ldr	r3, [sp, #4]
 80050a2:	3301      	adds	r3, #1
 80050a4:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80050a6:	b918      	cbnz	r0, 80050b0 <RCC_WaitForHSEStartUp+0x1c>
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80050ae:	d1f4      	bne.n	800509a <RCC_WaitForHSEStartUp+0x6>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80050b0:	2031      	movs	r0, #49	; 0x31
 80050b2:	f7ff ffdb 	bl	800506c <RCC_GetFlagStatus>
  {
    status = ERROR;
  }  

  return (status);
}
 80050b6:	3000      	adds	r0, #0
 80050b8:	bf18      	it	ne
 80050ba:	2001      	movne	r0, #1
 80050bc:	b003      	add	sp, #12
 80050be:	f85d fb04 	ldr.w	pc, [sp], #4

080050c2 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80050c2:	4a03      	ldr	r2, [pc, #12]	; (80050d0 <RCC_ClearFlag+0xe>)
 80050c4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80050c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ca:	6253      	str	r3, [r2, #36]	; 0x24
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40021000 	andmi	r1, r2, r0

080050d4 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <RCC_GetITStatus+0x10>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 80050da:	bf14      	ite	ne
 80050dc:	2001      	movne	r0, #1
 80050de:	2000      	moveq	r0, #0
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40021000 	andmi	r1, r2, r0

080050e8 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 80050e8:	4b01      	ldr	r3, [pc, #4]	; (80050f0 <RCC_ClearITPendingBit+0x8>)
 80050ea:	7018      	strb	r0, [r3, #0]
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	4002100a 	andmi	r1, r2, sl

080050f4 <SysTick_CLKSourceConfig>:
*                         SysTick clock source.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80050f6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	bf0c      	ite	eq
 80050fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005100:	f022 0204 	bicne.w	r2, r2, #4
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	4770      	bx	lr
 8005108:	e000e010 	and	lr, r0, r0, lsl r0

0800510c <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 800510c:	4b01      	ldr	r3, [pc, #4]	; (8005114 <SysTick_SetReload+0x8>)
 800510e:	6058      	str	r0, [r3, #4]
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	e000e010 	and	lr, r0, r0, lsl r0

08005118 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8005118:	2801      	cmp	r0, #1
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <SysTick_CounterCmd+0x24>)
 800511c:	d103      	bne.n	8005126 <SysTick_CounterCmd+0xe>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	e004      	b.n	8005130 <SysTick_CounterCmd+0x18>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8005126:	3002      	adds	r0, #2
 8005128:	d104      	bne.n	8005134 <SysTick_CounterCmd+0x1c>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	4770      	bx	lr
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8005134:	2200      	movs	r2, #0
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000e010 	and	lr, r0, r0, lsl r0

08005140 <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <SysTick_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8005142:	681a      	ldr	r2, [r3, #0]
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005144:	b110      	cbz	r0, 800514c <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8005146:	f042 0202 	orr.w	r2, r2, #2
 800514a:	e001      	b.n	8005150 <SysTick_ITConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 800514c:	f022 0202 	bic.w	r2, r2, #2
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4770      	bx	lr
 8005154:	e000e010 	and	lr, r0, r0, lsl r0

08005158 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <SysTick_GetCounter+0x8>)
 800515a:	6898      	ldr	r0, [r3, #8]
}
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	e000e010 	and	lr, r0, r0, lsl r0

08005164 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8005164:	08c3      	lsrs	r3, r0, #3
 8005166:	2b02      	cmp	r3, #2
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <SysTick_GetFlagStatus+0x18>)
  {
    statusreg = SysTick->CTRL;
 800516a:	bf0c      	ite	eq
 800516c:	681b      	ldreq	r3, [r3, #0]
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 800516e:	68db      	ldrne	r3, [r3, #12]
  }

  if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
 8005170:	fa23 f000 	lsr.w	r0, r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005174:	f000 0001 	and.w	r0, r0, #1
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	e000e010 	and	lr, r0, r0, lsl r0

08005180 <TI1_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI1_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 8005180:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005182:	8c04      	ldrh	r4, [r0, #32]
 8005184:	f024 0401 	bic.w	r4, r4, #1
 8005188:	0424      	lsls	r4, r4, #16
 800518a:	0c24      	lsrs	r4, r4, #16
 800518c:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 800518e:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005190:	8c05      	ldrh	r5, [r0, #32]
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;

  tmpccmr1 = TIMx->CCMR1;
 8005192:	b2a4      	uxth	r4, r4
  tmpccer = TIMx->CCER;
 8005194:	b2ad      	uxth	r5, r5

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 8005196:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
 800519a:	4322      	orrs	r2, r4
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 800519c:	f025 0502 	bic.w	r5, r5, #2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80051a0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80051a4:	f045 0501 	orr.w	r5, r5, #1
 80051a8:	b29a      	uxth	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80051aa:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ac:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80051ae:	8401      	strh	r1, [r0, #32]
 80051b0:	bd30      	pop	{r4, r5, pc}

080051b2 <TI2_Config>:
* Output         : None
* Return         : None
*******************************************************************************/
static void TI2_Config(TIM_TypeDef* TIMx, u16 TIM_ICPolarity, u16 TIM_ICSelection,
                       u16 TIM_ICFilter)
{
 80051b2:	b530      	push	{r4, r5, lr}
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80051b4:	8c04      	ldrh	r4, [r0, #32]
 80051b6:	f024 0410 	bic.w	r4, r4, #16
 80051ba:	0424      	lsls	r4, r4, #16
 80051bc:	0c24      	lsrs	r4, r4, #16
 80051be:	8404      	strh	r4, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80051c0:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80051c2:	8c04      	ldrh	r4, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80051c4:	f425 7540 	bic.w	r5, r5, #768	; 0x300

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;

  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80051c8:	b2a4      	uxth	r4, r4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80051ca:	052d      	lsls	r5, r5, #20
 80051cc:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
 80051ce:	f024 0420 	bic.w	r4, r4, #32
 80051d2:	f044 0410 	orr.w	r4, r4, #16
 80051d6:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 80051da:	ea42 3303 	orr.w	r3, r2, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80051de:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 80051e2:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80051e4:	b28c      	uxth	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e6:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80051e8:	8404      	strh	r4, [r0, #32]
 80051ea:	bd30      	pop	{r4, r5, pc}

080051ec <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80051ec:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 80051ee:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <TIM_DeInit+0xbc>)
 80051f0:	4298      	cmp	r0, r3
 80051f2:	d03a      	beq.n	800526a <TIM_DeInit+0x7e>
 80051f4:	d810      	bhi.n	8005218 <TIM_DeInit+0x2c>
 80051f6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80051fa:	4298      	cmp	r0, r3
 80051fc:	d025      	beq.n	800524a <TIM_DeInit+0x5e>
 80051fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005202:	4298      	cmp	r0, r3
 8005204:	d02b      	beq.n	800525e <TIM_DeInit+0x72>
 8005206:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800520a:	d14c      	bne.n	80052a6 <TIM_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800520c:	2001      	movs	r0, #1
 800520e:	4601      	mov	r1, r0
 8005210:	f7ff ff0e 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8005214:	2001      	movs	r0, #1
 8005216:	e01d      	b.n	8005254 <TIM_DeInit+0x68>
void TIM_DeInit(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005218:	4b24      	ldr	r3, [pc, #144]	; (80052ac <TIM_DeInit+0xc0>)
 800521a:	4298      	cmp	r0, r3
 800521c:	d031      	beq.n	8005282 <TIM_DeInit+0x96>
 800521e:	d804      	bhi.n	800522a <TIM_DeInit+0x3e>
 8005220:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005224:	4298      	cmp	r0, r3
 8005226:	d026      	beq.n	8005276 <TIM_DeInit+0x8a>
 8005228:	bd08      	pop	{r3, pc}
 800522a:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <TIM_DeInit+0xc4>)
 800522c:	4298      	cmp	r0, r3
 800522e:	d004      	beq.n	800523a <TIM_DeInit+0x4e>
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	4298      	cmp	r0, r3
 8005236:	d02a      	beq.n	800528e <TIM_DeInit+0xa2>
 8005238:	bd08      	pop	{r3, pc}
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800523a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800523e:	2101      	movs	r1, #1
 8005240:	f7ff feea 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8005244:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005248:	e028      	b.n	800529c <TIM_DeInit+0xb0>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800524a:	2002      	movs	r0, #2
 800524c:	2101      	movs	r1, #1
 800524e:	f7ff feef 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005252:	2002      	movs	r0, #2
 8005254:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 8005256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800525a:	f7ff bee9 	b.w	8005030 <RCC_APB1PeriphResetCmd>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800525e:	2004      	movs	r0, #4
 8005260:	2101      	movs	r1, #1
 8005262:	f7ff fee5 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8005266:	2004      	movs	r0, #4
 8005268:	e7f4      	b.n	8005254 <TIM_DeInit+0x68>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800526a:	2008      	movs	r0, #8
 800526c:	2101      	movs	r1, #1
 800526e:	f7ff fedf 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8005272:	2008      	movs	r0, #8
 8005274:	e7ee      	b.n	8005254 <TIM_DeInit+0x68>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8005276:	2010      	movs	r0, #16
 8005278:	2101      	movs	r1, #1
 800527a:	f7ff fed9 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800527e:	2010      	movs	r0, #16
 8005280:	e7e8      	b.n	8005254 <TIM_DeInit+0x68>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8005282:	2020      	movs	r0, #32
 8005284:	2101      	movs	r1, #1
 8005286:	f7ff fed3 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800528a:	2020      	movs	r0, #32
 800528c:	e7e2      	b.n	8005254 <TIM_DeInit+0x68>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800528e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005292:	2101      	movs	r1, #1
 8005294:	f7ff fec0 	bl	8005018 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800529c:	2100      	movs	r1, #0
      break; 
      
    default:
      break;
  }
}
 800529e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80052a2:	f7ff beb9 	b.w	8005018 <RCC_APB2PeriphResetCmd>
 80052a6:	bd08      	pop	{r3, pc}
 80052a8:	40000c00 	andmi	r0, r0, r0, lsl #24
 80052ac:	40001400 	andmi	r1, r0, r0, lsl #8
 80052b0:	40012c00 	andmi	r2, r1, r0, lsl #24

080052b4 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 80052b4:	8803      	ldrh	r3, [r0, #0]
 80052b6:	88ca      	ldrh	r2, [r1, #6]
 80052b8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80052bc:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 80052be:	8803      	ldrh	r3, [r0, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	884a      	ldrh	r2, [r1, #2]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80052cc:	888b      	ldrh	r3, [r1, #4]
 80052ce:	8583      	strh	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80052d0:	880b      	ldrh	r3, [r1, #0]
 80052d2:	8503      	strh	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80052d4:	2301      	movs	r3, #1
 80052d6:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <TIM_TimeBaseInit+0x38>)
 80052da:	4298      	cmp	r0, r3
 80052dc:	d003      	beq.n	80052e6 <TIM_TimeBaseInit+0x32>
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	4298      	cmp	r0, r3
 80052e4:	d101      	bne.n	80052ea <TIM_TimeBaseInit+0x36>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80052e6:	7a0b      	ldrb	r3, [r1, #8]
 80052e8:	8603      	strh	r3, [r0, #48]	; 0x30
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	andmi	r2, r1, r0, lsl #24

080052f0 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80052f0:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80052f2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005302:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005304:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8005306:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800530a:	0412      	lsls	r2, r2, #16
 800530c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 800530e:	f023 0502 	bic.w	r5, r3, #2
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005312:	4316      	orrs	r6, r2
 8005314:	884b      	ldrh	r3, [r1, #2]
 8005316:	890a      	ldrh	r2, [r1, #8]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8005318:	042d      	lsls	r5, r5, #16
 800531a:	4313      	orrs	r3, r2
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800531c:	88ca      	ldrh	r2, [r1, #6]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 800531e:	0c2d      	lsrs	r5, r5, #16
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005320:	8682      	strh	r2, [r0, #52]	; 0x34
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005322:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <TIM_OC1Init+0x70>)

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005324:	432b      	orrs	r3, r5
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005326:	4290      	cmp	r0, r2
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800532a:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800532c:	d003      	beq.n	8005336 <TIM_OC1Init+0x46>
 800532e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005332:	4290      	cmp	r0, r2
 8005334:	d10f      	bne.n	8005356 <TIM_OC1Init+0x66>
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8005336:	f647 45ff 	movw	r5, #31999	; 0x7cff
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800533a:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 800533c:	f023 0308 	bic.w	r3, r3, #8

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8005340:	4313      	orrs	r3, r2

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005342:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 8005344:	f023 0304 	bic.w	r3, r3, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8005348:	4025      	ands	r5, r4

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800534a:	4313      	orrs	r3, r2
 800534c:	89cc      	ldrh	r4, [r1, #14]
 800534e:	898a      	ldrh	r2, [r1, #12]
 8005350:	4314      	orrs	r4, r2

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8005352:	432c      	orrs	r4, r5
 8005354:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005356:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005358:	8306      	strh	r6, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	8403      	strh	r3, [r0, #32]
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	bf00      	nop
 8005360:	40012c00 	andmi	r2, r1, r0, lsl #24

08005364 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005364:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005366:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005368:	f023 0310 	bic.w	r3, r3, #16
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005372:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005376:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005378:	880c      	ldrh	r4, [r1, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 800537a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800537e:	0412      	lsls	r2, r2, #16
 8005380:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005382:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8005386:	f023 0320 	bic.w	r3, r3, #32
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 800538a:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 800538c:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800538e:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8005390:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005392:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005396:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	b2ad      	uxth	r5, r5

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 800539a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800539e:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 80053a0:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80053a2:	8702      	strh	r2, [r0, #56]	; 0x38
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80053a4:	4a10      	ldr	r2, [pc, #64]	; (80053e8 <TIM_OC2Init+0x84>)
 80053a6:	4290      	cmp	r0, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC2Init+0x4e>
 80053aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ae:	4290      	cmp	r0, r2
 80053b0:	d116      	bne.n	80053e0 <TIM_OC2Init+0x7c>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 80053b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80053b6:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 80053b8:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80053ba:	ea43 1202 	orr.w	r2, r3, r2, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 80053be:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80053c2:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80053c4:	888a      	ldrh	r2, [r1, #4]
 80053c6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 80053ca:	f247 32ff 	movw	r2, #29695	; 0x73ff
 80053ce:	402a      	ands	r2, r5

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80053d0:	898d      	ldrh	r5, [r1, #12]

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80053d2:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80053d4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80053d8:	89cd      	ldrh	r5, [r1, #14]
 80053da:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
 80053de:	b2ad      	uxth	r5, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e0:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e2:	8304      	strh	r4, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	8403      	strh	r3, [r0, #32]
 80053e6:	bd30      	pop	{r4, r5, pc}
 80053e8:	40012c00 	andmi	r2, r1, r0, lsl #24

080053ec <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80053ec:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80053ee:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80053f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053fe:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005400:	880e      	ldrh	r6, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8005402:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005406:	0412      	lsls	r2, r2, #16
 8005408:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 800540a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800540e:	4316      	orrs	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8005410:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005412:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8005414:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005416:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 800541a:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800541c:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 800541e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005422:	88ca      	ldrh	r2, [r1, #6]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005424:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005426:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <TIM_OC3Init+0x80>)
 800542a:	4290      	cmp	r0, r2
 800542c:	d003      	beq.n	8005436 <TIM_OC3Init+0x4a>
 800542e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005432:	4290      	cmp	r0, r2
 8005434:	d116      	bne.n	8005464 <TIM_OC3Init+0x78>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8005436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800543a:	894a      	ldrh	r2, [r1, #10]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 800543c:	f644 75ff 	movw	r5, #20479	; 0x4fff
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8005440:	b29b      	uxth	r3, r3

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005442:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 8005446:	f64f 33ff 	movw	r3, #64511	; 0xfbff
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 800544a:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800544c:	898c      	ldrh	r4, [r1, #12]

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 800544e:	4013      	ands	r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005450:	ea45 1504 	orr.w	r5, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005454:	888a      	ldrh	r2, [r1, #4]

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005456:	89cc      	ldrh	r4, [r1, #14]

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005458:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800545c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005460:	b29b      	uxth	r3, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005462:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005464:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005466:	8386      	strh	r6, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	8403      	strh	r3, [r0, #32]
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	40012c00 	andmi	r2, r1, r0, lsl #24

08005470 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005470:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005472:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005482:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005484:	880d      	ldrh	r5, [r1, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8005486:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800548a:	0412      	lsls	r2, r2, #16
 800548c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800548e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005492:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8005496:	041b      	lsls	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005498:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800549a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800549c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80054a0:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a2:	b2a4      	uxth	r4, r4

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80054a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80054a8:	88cd      	ldrh	r5, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80054aa:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80054ac:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80054b0:	4d08      	ldr	r5, [pc, #32]	; (80054d4 <TIM_OC4Init+0x64>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80054b2:	b29b      	uxth	r3, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80054b4:	42a8      	cmp	r0, r5
 80054b6:	d003      	beq.n	80054c0 <TIM_OC4Init+0x50>
 80054b8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80054bc:	42a8      	cmp	r0, r5
 80054be:	d105      	bne.n	80054cc <TIM_OC4Init+0x5c>

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80054c0:	8989      	ldrh	r1, [r1, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 80054c2:	f3c4 040d 	ubfx	r4, r4, #0, #14

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80054c6:	ea44 1481 	orr.w	r4, r4, r1, lsl #6
 80054ca:	b2a4      	uxth	r4, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054cc:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80054ce:	8382      	strh	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	8403      	strh	r3, [r0, #32]
 80054d2:	bd30      	pop	{r4, r5, pc}
 80054d4:	40012c00 	andmi	r2, r1, r0, lsl #24

080054d8 <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80054d8:	884a      	ldrh	r2, [r1, #2]
 80054da:	880b      	ldrh	r3, [r1, #0]
 80054dc:	4313      	orrs	r3, r2
 80054de:	888a      	ldrh	r2, [r1, #4]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	88ca      	ldrh	r2, [r1, #6]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	890a      	ldrh	r2, [r1, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	894a      	ldrh	r2, [r1, #10]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	898a      	ldrh	r2, [r1, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80054f8:	4770      	bx	lr

080054fa <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80054fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054fe:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8005500:	2300      	movs	r3, #0
 8005502:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8005504:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8005506:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8005508:	7203      	strb	r3, [r0, #8]
 800550a:	4770      	bx	lr

0800550c <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800550c:	2300      	movs	r3, #0
 800550e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005510:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005512:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8005514:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005516:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005518:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800551a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800551c:	81c3      	strh	r3, [r0, #14]
 800551e:	4770      	bx	lr

08005520 <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005520:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005522:	2201      	movs	r2, #1
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005524:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8005526:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005528:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800552a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800552c:	8103      	strh	r3, [r0, #8]
 800552e:	4770      	bx	lr

08005530 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8005530:	2300      	movs	r3, #0
 8005532:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8005534:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8005536:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8005538:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800553a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800553c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800553e:	8183      	strh	r3, [r0, #12]
 8005540:	4770      	bx	lr

08005542 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8005542:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005544:	b119      	cbz	r1, 800554e <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8005546:	b29b      	uxth	r3, r3
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	e003      	b.n	8005556 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	059b      	lsls	r3, r3, #22
 8005554:	0d9b      	lsrs	r3, r3, #22
 8005556:	8003      	strh	r3, [r0, #0]
 8005558:	4770      	bx	lr

0800555a <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 800555a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800555e:	b129      	cbz	r1, 800556c <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 8005560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005568:	b29b      	uxth	r3, r3
 800556a:	e001      	b.n	8005570 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 800556c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005570:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8005574:	4770      	bx	lr

08005576 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005576:	8983      	ldrh	r3, [r0, #12]
 8005578:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800557a:	b10a      	cbz	r2, 8005580 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800557c:	4319      	orrs	r1, r3
 800557e:	e001      	b.n	8005584 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 8005580:	ea23 0101 	bic.w	r1, r3, r1
 8005584:	8181      	strh	r1, [r0, #12]
 8005586:	4770      	bx	lr

08005588 <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8005588:	8281      	strh	r1, [r0, #20]
 800558a:	4770      	bx	lr

0800558c <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800558c:	430a      	orrs	r2, r1
 800558e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8005592:	4770      	bx	lr

08005594 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005594:	8983      	ldrh	r3, [r0, #12]
 8005596:	b29b      	uxth	r3, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005598:	b10a      	cbz	r2, 800559e <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800559a:	4319      	orrs	r1, r3
 800559c:	e001      	b.n	80055a2 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 800559e:	ea23 0101 	bic.w	r1, r3, r1
 80055a2:	8181      	strh	r1, [r0, #12]
 80055a4:	4770      	bx	lr

080055a6 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 80055a6:	8903      	ldrh	r3, [r0, #8]
 80055a8:	f023 0307 	bic.w	r3, r3, #7
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	8103      	strh	r3, [r0, #8]
 80055b2:	4770      	bx	lr

080055b4 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80055be:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c0:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80055c2:	8903      	ldrh	r3, [r0, #8]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f043 0307 	orr.w	r3, r3, #7
 80055ca:	8103      	strh	r3, [r0, #8]
 80055cc:	4770      	bx	lr

080055ce <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80055ce:	b538      	push	{r3, r4, r5, lr}
 80055d0:	460d      	mov	r5, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80055d2:	2d60      	cmp	r5, #96	; 0x60
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80055d4:	4611      	mov	r1, r2
 80055d6:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80055d8:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80055dc:	d102      	bne.n	80055e4 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80055de:	f7ff fde8 	bl	80051b2 <TI2_Config>
 80055e2:	e001      	b.n	80055e8 <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80055e4:	f7ff fdcc 	bl	8005180 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e8:	8921      	ldrh	r1, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80055ea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80055ee:	0409      	lsls	r1, r1, #16
 80055f0:	0c09      	lsrs	r1, r1, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80055f2:	4329      	orrs	r1, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f4:	8121      	strh	r1, [r4, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80055f6:	8923      	ldrh	r3, [r4, #8]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f043 0307 	orr.w	r3, r3, #7
 80055fe:	8123      	strh	r3, [r4, #8]
 8005600:	bd38      	pop	{r3, r4, r5, pc}

08005602 <TIM_ETRConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRConfig(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                   u16 ExtTRGFilter)
{
 8005602:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005604:	8904      	ldrh	r4, [r0, #8]
 8005606:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 800560a:	b2e4      	uxtb	r4, r4
 800560c:	4323      	orrs	r3, r4
 800560e:	b29b      	uxth	r3, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 8005610:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005612:	8101      	strh	r1, [r0, #8]
 8005614:	bd10      	pop	{r4, pc}

08005616 <TIM_ETRClockMode1Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, u16 TIM_ExtTRGPolarity,
                             u16 ExtTRGFilter)
{
 8005616:	b510      	push	{r4, lr}
 8005618:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800561a:	f7ff fff2 	bl	8005602 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800561e:	8923      	ldrh	r3, [r4, #8]
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
 8005620:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 8005628:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562c:	8123      	strh	r3, [r4, #8]
 800562e:	bd10      	pop	{r4, pc}

08005630 <TIM_ETRClockMode2Config>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, u16 TIM_ExtTRGPrescaler, 
                             u16 TIM_ExtTRGPolarity, u16 ExtTRGFilter)
{
 8005630:	b510      	push	{r4, lr}
 8005632:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8005634:	f7ff ffe5 	bl	8005602 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 8005638:	8923      	ldrh	r3, [r4, #8]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005640:	8123      	strh	r3, [r4, #8]
 8005642:	bd10      	pop	{r4, pc}

08005644 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8005644:	8501      	strh	r1, [r0, #40]	; 0x28

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8005646:	8282      	strh	r2, [r0, #20]
 8005648:	4770      	bx	lr

0800564a <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800564a:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 800564c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005650:	059b      	lsls	r3, r3, #22
 8005652:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8005654:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8005656:	8001      	strh	r1, [r0, #0]
 8005658:	4770      	bx	lr

0800565a <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800565a:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800565c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005664:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	8101      	strh	r1, [r0, #8]
 8005668:	4770      	bx	lr

0800566a <TIM_EncoderInterfaceConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 800566a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800566c:	8906      	ldrh	r6, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800566e:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005670:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005672:	f424 7440 	bic.w	r4, r4, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005678:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
 800567c:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005680:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005684:	0424      	lsls	r4, r4, #16
 8005686:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005688:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 800568a:	0c24      	lsrs	r4, r4, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 800568c:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 800568e:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005692:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 8005696:	4331      	orrs	r1, r6

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 8005698:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 800569c:	b29d      	uxth	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569e:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80056a0:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	8405      	strh	r5, [r0, #32]
 80056a4:	bd70      	pop	{r4, r5, r6, pc}

080056a6 <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 80056a6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	041b      	lsls	r3, r3, #16
 80056ae:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80056b0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	8301      	strh	r1, [r0, #24]
 80056b4:	4770      	bx	lr

080056b6 <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 80056b6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 80056c0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056c4:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056c6:	8301      	strh	r1, [r0, #24]
 80056c8:	4770      	bx	lr

080056ca <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80056ca:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80056d4:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80056d6:	8381      	strh	r1, [r0, #28]
 80056d8:	4770      	bx	lr

080056da <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80056da:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 80056e4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80056e8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80056ea:	8381      	strh	r1, [r0, #28]
 80056ec:	4770      	bx	lr

080056ee <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 80056ee:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80056f0:	b119      	cbz	r1, 80056fa <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	e003      	b.n	8005702 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 80056fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fe:	059b      	lsls	r3, r3, #22
 8005700:	0d9b      	lsrs	r3, r3, #22
 8005702:	8003      	strh	r3, [r0, #0]
 8005704:	4770      	bx	lr

08005706 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 8005706:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005708:	b119      	cbz	r1, 8005712 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 800570a:	b29b      	uxth	r3, r3
 800570c:	f043 0304 	orr.w	r3, r3, #4
 8005710:	e003      	b.n	800571a <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 8005712:	f023 0304 	bic.w	r3, r3, #4
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	8083      	strh	r3, [r0, #4]
 800571c:	4770      	bx	lr

0800571e <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 800571e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005720:	b119      	cbz	r1, 800572a <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 8005722:	b29b      	uxth	r3, r3
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	e003      	b.n	8005732 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 800572a:	f023 0308 	bic.w	r3, r3, #8
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	8083      	strh	r3, [r0, #4]
 8005734:	4770      	bx	lr

08005736 <TIM_CCPreloadControl>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 8005736:	8883      	ldrh	r3, [r0, #4]
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005738:	b119      	cbz	r1, 8005742 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 800573a:	b29b      	uxth	r3, r3
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	e003      	b.n	800574a <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	8083      	strh	r3, [r0, #4]
 800574c:	4770      	bx	lr

0800574e <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800574e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 8005750:	f023 0308 	bic.w	r3, r3, #8
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005758:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800575a:	8301      	strh	r1, [r0, #24]
 800575c:	4770      	bx	lr

0800575e <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800575e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 8005760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 8005768:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800576c:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800576e:	8301      	strh	r1, [r0, #24]
 8005770:	4770      	bx	lr

08005772 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005772:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 8005774:	f023 0308 	bic.w	r3, r3, #8
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800577c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800577e:	8381      	strh	r1, [r0, #28]
 8005780:	4770      	bx	lr

08005782 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005782:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 8005784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 800578c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005790:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005792:	8381      	strh	r1, [r0, #28]
 8005794:	4770      	bx	lr

08005796 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005796:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80057a0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	8301      	strh	r1, [r0, #24]
 80057a4:	4770      	bx	lr

080057a6 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 80057a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 80057b0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80057b4:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	8301      	strh	r1, [r0, #24]
 80057b8:	4770      	bx	lr

080057ba <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80057ba:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80057c4:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80057c6:	8381      	strh	r1, [r0, #28]
 80057c8:	4770      	bx	lr

080057ca <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80057ca:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 80057cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 80057d4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80057d8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80057da:	8381      	strh	r1, [r0, #28]
 80057dc:	4770      	bx	lr

080057de <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80057de:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80057e8:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80057ea:	8301      	strh	r1, [r0, #24]
 80057ec:	4770      	bx	lr

080057ee <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80057ee:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 80057f0:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 80057f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80057f8:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80057fa:	8301      	strh	r1, [r0, #24]
 80057fc:	4770      	bx	lr

080057fe <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80057fe:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 8005800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8005808:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800580a:	8381      	strh	r1, [r0, #28]
 800580c:	4770      	bx	lr

0800580e <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800580e:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 8005810:	f3c3 030e 	ubfx	r3, r3, #0, #15

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 8005814:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005818:	b289      	uxth	r1, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800581a:	8381      	strh	r1, [r0, #28]
 800581c:	4770      	bx	lr

0800581e <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800581e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005820:	f023 0302 	bic.w	r3, r3, #2
 8005824:	041b      	lsls	r3, r3, #16
 8005826:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8005828:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800582a:	8401      	strh	r1, [r0, #32]
 800582c:	4770      	bx	lr

0800582e <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800582e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 8005830:	f023 0308 	bic.w	r3, r3, #8
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8005838:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800583a:	8401      	strh	r1, [r0, #32]
 800583c:	4770      	bx	lr

0800583e <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800583e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 8005840:	f023 0320 	bic.w	r3, r3, #32
 8005844:	041b      	lsls	r3, r3, #16
 8005846:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 8005848:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 800584c:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800584e:	8401      	strh	r1, [r0, #32]
 8005850:	4770      	bx	lr

08005852 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8005852:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 800585c:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8005860:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005862:	8401      	strh	r1, [r0, #32]
 8005864:	4770      	bx	lr

08005866 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005866:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 8005868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 8005870:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005874:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005876:	8401      	strh	r1, [r0, #32]
 8005878:	4770      	bx	lr

0800587a <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800587a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 800587c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 8005884:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005888:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800588a:	8401      	strh	r1, [r0, #32]
 800588c:	4770      	bx	lr

0800588e <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800588e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 8005898:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800589c:	b289      	uxth	r1, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800589e:	8401      	strh	r1, [r0, #32]
 80058a0:	4770      	bx	lr

080058a2 <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80058a2:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCx)
{
 80058a4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80058a6:	b29c      	uxth	r4, r3
 80058a8:	2301      	movs	r3, #1
 80058aa:	408b      	lsls	r3, r1
 80058ac:	ea24 0303 	bic.w	r3, r4, r3
 80058b0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 80058b2:	8c03      	ldrh	r3, [r0, #32]
 80058b4:	408a      	lsls	r2, r1
 80058b6:	4313      	orrs	r3, r2
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	8403      	strh	r3, [r0, #32]
 80058bc:	bd10      	pop	{r4, pc}

080058be <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 80058be:	8c03      	ldrh	r3, [r0, #32]
*                   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_CCxNCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCxN)
{
 80058c0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 80058c2:	b29c      	uxth	r4, r3
 80058c4:	2304      	movs	r3, #4
 80058c6:	408b      	lsls	r3, r1
 80058c8:	ea24 0303 	bic.w	r3, r4, r3
 80058cc:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 80058ce:	8c03      	ldrh	r3, [r0, #32]
 80058d0:	408a      	lsls	r2, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8403      	strh	r3, [r0, #32]
 80058d8:	bd10      	pop	{r4, pc}

080058da <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80058da:	8c03      	ldrh	r3, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 80058dc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80058de:	b29c      	uxth	r4, r3
 80058e0:	2301      	movs	r3, #1
 80058e2:	408b      	lsls	r3, r1
 80058e4:	ea24 0303 	bic.w	r3, r4, r3
 80058e8:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80058ea:	f021 0308 	bic.w	r3, r1, #8
 80058ee:	3018      	adds	r0, #24
 80058f0:	b93b      	cbnz	r3, 8005902 <TIM_SelectOCxM+0x28>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 80058f2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80058f6:	0849      	lsrs	r1, r1, #1
 80058f8:	5844      	ldr	r4, [r0, r1]
 80058fa:	4023      	ands	r3, r4
 80058fc:	5043      	str	r3, [r0, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 80058fe:	5843      	ldr	r3, [r0, r1]
 8005900:	e00a      	b.n	8005918 <TIM_SelectOCxM+0x3e>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 8005902:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8005906:	3904      	subs	r1, #4
 8005908:	f3c1 014e 	ubfx	r1, r1, #1, #15
 800590c:	5844      	ldr	r4, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 800590e:	0212      	lsls	r2, r2, #8

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 8005910:	4023      	ands	r3, r4
 8005912:	5043      	str	r3, [r0, r1]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 8005914:	5843      	ldr	r3, [r0, r1]
 8005916:	b292      	uxth	r2, r2
 8005918:	431a      	orrs	r2, r3
 800591a:	5042      	str	r2, [r0, r1]
 800591c:	bd10      	pop	{r4, pc}

0800591e <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 800591e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005920:	b119      	cbz	r1, 800592a <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 8005922:	b29b      	uxth	r3, r3
 8005924:	f043 0302 	orr.w	r3, r3, #2
 8005928:	e003      	b.n	8005932 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 800592a:	f023 0302 	bic.w	r3, r3, #2
 800592e:	059b      	lsls	r3, r3, #22
 8005930:	0d9b      	lsrs	r3, r3, #22
 8005932:	8003      	strh	r3, [r0, #0]
 8005934:	4770      	bx	lr

08005936 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 8005936:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8005938:	b119      	cbz	r1, 8005942 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 800593a:	b29b      	uxth	r3, r3
 800593c:	f043 0304 	orr.w	r3, r3, #4
 8005940:	e003      	b.n	800594a <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 8005942:	f023 0304 	bic.w	r3, r3, #4
 8005946:	059b      	lsls	r3, r3, #22
 8005948:	0d9b      	lsrs	r3, r3, #22
 800594a:	8003      	strh	r3, [r0, #0]
 800594c:	4770      	bx	lr

0800594e <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 800594e:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005950:	b119      	cbz	r1, 800595a <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 8005952:	b29b      	uxth	r3, r3
 8005954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005958:	e003      	b.n	8005962 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	8083      	strh	r3, [r0, #4]
 8005964:	4770      	bx	lr

08005966 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 8005966:	8803      	ldrh	r3, [r0, #0]
 8005968:	f023 0308 	bic.w	r3, r3, #8
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	0d9b      	lsrs	r3, r3, #22
 8005970:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8005972:	8803      	ldrh	r3, [r0, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	4319      	orrs	r1, r3
 8005978:	8001      	strh	r1, [r0, #0]
 800597a:	4770      	bx	lr

0800597c <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 800597c:	8883      	ldrh	r3, [r0, #4]
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8005988:	8883      	ldrh	r3, [r0, #4]
 800598a:	b29b      	uxth	r3, r3
 800598c:	4319      	orrs	r1, r3
 800598e:	8081      	strh	r1, [r0, #4]
 8005990:	4770      	bx	lr

08005992 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 8005992:	8903      	ldrh	r3, [r0, #8]
 8005994:	f023 0307 	bic.w	r3, r3, #7
 8005998:	041b      	lsls	r3, r3, #16
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800599e:	8903      	ldrh	r3, [r0, #8]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	4319      	orrs	r1, r3
 80059a4:	8101      	strh	r1, [r0, #8]
 80059a6:	4770      	bx	lr

080059a8 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 80059a8:	8903      	ldrh	r3, [r0, #8]
 80059aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80059b4:	8903      	ldrh	r3, [r0, #8]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4319      	orrs	r1, r3
 80059ba:	8101      	strh	r1, [r0, #8]
 80059bc:	4770      	bx	lr

080059be <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80059be:	8481      	strh	r1, [r0, #36]	; 0x24
 80059c0:	4770      	bx	lr

080059c2 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80059c2:	8581      	strh	r1, [r0, #44]	; 0x2c
 80059c4:	4770      	bx	lr

080059c6 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80059c6:	8681      	strh	r1, [r0, #52]	; 0x34
 80059c8:	4770      	bx	lr

080059ca <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80059ca:	8701      	strh	r1, [r0, #56]	; 0x38
 80059cc:	4770      	bx	lr

080059ce <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80059ce:	8781      	strh	r1, [r0, #60]	; 0x3c
 80059d0:	4770      	bx	lr

080059d2 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80059d2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80059d6:	4770      	bx	lr

080059d8 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 80059d8:	8b03      	ldrh	r3, [r0, #24]
 80059da:	f023 030c 	bic.w	r3, r3, #12
 80059de:	041b      	lsls	r3, r3, #16
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80059e4:	8b03      	ldrh	r3, [r0, #24]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	4319      	orrs	r1, r3
 80059ea:	8301      	strh	r1, [r0, #24]
 80059ec:	4770      	bx	lr

080059ee <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 80059ee:	8b03      	ldrh	r3, [r0, #24]
 80059f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 80059fa:	8b03      	ldrh	r3, [r0, #24]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005a02:	b289      	uxth	r1, r1
 8005a04:	8301      	strh	r1, [r0, #24]
 8005a06:	4770      	bx	lr

08005a08 <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005a0c:	8849      	ldrh	r1, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005a0e:	88a2      	ldrh	r2, [r4, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005a10:	2900      	cmp	r1, #0
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005a12:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8005a16:	bf0c      	ite	eq
 8005a18:	2702      	moveq	r7, #2
 8005a1a:	2700      	movne	r7, #0
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005a1c:	2a01      	cmp	r2, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005a1e:	4605      	mov	r5, r0
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8005a20:	bf0c      	ite	eq
 8005a22:	2602      	moveq	r6, #2
 8005a24:	2601      	movne	r6, #1
 8005a26:	8923      	ldrh	r3, [r4, #8]
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005a28:	f1be 0f00 	cmp.w	lr, #0
 8005a2c:	d111      	bne.n	8005a52 <TIM_PWMIConfig+0x4a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005a2e:	f7ff fba7 	bl	8005180 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a32:	4628      	mov	r0, r5
 8005a34:	88e1      	ldrh	r1, [r4, #6]
 8005a36:	f7ff ffcf 	bl	80059d8 <TIM_SetIC1Prescaler>

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4632      	mov	r2, r6
 8005a40:	8923      	ldrh	r3, [r4, #8]
 8005a42:	f7ff fbb6 	bl	80051b2 <TI2_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a46:	4628      	mov	r0, r5
 8005a48:	88e1      	ldrh	r1, [r4, #6]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a4e:	f7ff bfce 	b.w	80059ee <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005a52:	f7ff fbae 	bl	80051b2 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a56:	4628      	mov	r0, r5
 8005a58:	88e1      	ldrh	r1, [r4, #6]
 8005a5a:	f7ff ffc8 	bl	80059ee <TIM_SetIC2Prescaler>

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8005a5e:	4628      	mov	r0, r5
 8005a60:	4639      	mov	r1, r7
 8005a62:	4632      	mov	r2, r6
 8005a64:	8923      	ldrh	r3, [r4, #8]
 8005a66:	f7ff fb8b 	bl	8005180 <TI1_Config>

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	88e1      	ldrh	r1, [r4, #6]
  }
}
 8005a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005a72:	f7ff bfb1 	b.w	80059d8 <TIM_SetIC1Prescaler>

08005a76 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 8005a76:	8b83      	ldrh	r3, [r0, #28]
 8005a78:	f023 030c 	bic.w	r3, r3, #12
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8005a82:	8b83      	ldrh	r3, [r0, #28]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4319      	orrs	r1, r3
 8005a88:	8381      	strh	r1, [r0, #28]
 8005a8a:	4770      	bx	lr

08005a8c <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8005a8c:	8b83      	ldrh	r3, [r0, #28]
 8005a8e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 8005a98:	8b83      	ldrh	r3, [r0, #28]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005aa0:	b289      	uxth	r1, r1
 8005aa2:	8381      	strh	r1, [r0, #28]
 8005aa4:	4770      	bx	lr

08005aa6 <TIM_ICInit>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa8:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005aaa:	880e      	ldrh	r6, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005aac:	4604      	mov	r4, r0
 8005aae:	8849      	ldrh	r1, [r1, #2]
 8005ab0:	88aa      	ldrh	r2, [r5, #4]
 8005ab2:	892b      	ldrh	r3, [r5, #8]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005ab4:	b93e      	cbnz	r6, 8005ac6 <TIM_ICInit+0x20>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005ab6:	f7ff fb63 	bl	8005180 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005aba:	4620      	mov	r0, r4
 8005abc:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005abe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005ac2:	f7ff bf89 	b.w	80059d8 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005ac6:	2e04      	cmp	r6, #4
 8005ac8:	d107      	bne.n	8005ada <TIM_ICInit+0x34>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005aca:	f7ff fb72 	bl	80051b2 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005ace:	4620      	mov	r0, r4
 8005ad0:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005ad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005ad6:	f7ff bf8a 	b.w	80059ee <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005ada:	2e08      	cmp	r6, #8
 8005adc:	f8b5 e006 	ldrh.w	lr, [r5, #6]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005ae0:	8c05      	ldrh	r5, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005ae2:	d11c      	bne.n	8005b1e <TIM_ICInit+0x78>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005ae4:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005ae8:	042d      	lsls	r5, r5, #16
 8005aea:	0c2d      	lsrs	r5, r5, #16
 8005aec:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 8005aee:	8b87      	ldrh	r7, [r0, #28]
  tmpccer = TIMx->CCER;
 8005af0:	8c06      	ldrh	r6, [r0, #32]
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;

  tmpccmr2 = TIMx->CCMR2;
 8005af2:	b2bf      	uxth	r7, r7
  tmpccer = TIMx->CCER;
 8005af4:	b2b6      	uxth	r6, r6
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
 8005af6:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
 8005afa:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 8005afe:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  tmpccer |= tmp | CCER_CC3E_Set;
 8005b02:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8005b06:	b29f      	uxth	r7, r3
 8005b08:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005b0a:	433a      	orrs	r2, r7

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8005b0c:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b10:	8382      	strh	r2, [r0, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005b12:	4671      	mov	r1, lr
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8005b14:	8406      	strh	r6, [r0, #32]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005b1a:	f7ff bfac 	b.w	8005a76 <TIM_SetIC3Prescaler>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005b1e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005b22:	042d      	lsls	r5, r5, #16
 8005b24:	0c2d      	lsrs	r5, r5, #16
 8005b26:	8405      	strh	r5, [r0, #32]

  tmpccmr2 = TIMx->CCMR2;
 8005b28:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 8005b2a:	8c07      	ldrh	r7, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005b2c:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8005b30:	052d      	lsls	r5, r5, #20

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;

  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8005b32:	b2bf      	uxth	r7, r7
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005b34:	0d2d      	lsrs	r5, r5, #20
 8005b36:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005b3a:	f427 5200 	bic.w	r2, r7, #8192	; 0x2000
  tmpccer |= tmp | CCER_CC4E_Set;
 8005b3e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005b42:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005b46:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005b48:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005b4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b4e:	8383      	strh	r3, [r0, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005b50:	4671      	mov	r1, lr
  }
}
 8005b52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer ;
 8005b56:	8402      	strh	r2, [r0, #32]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005b58:	f7ff bf98 	b.w	8005a8c <TIM_SetIC4Prescaler>

08005b5c <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 8005b5c:	8803      	ldrh	r3, [r0, #0]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005b62:	8803      	ldrh	r3, [r0, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4319      	orrs	r1, r3
 8005b68:	8001      	strh	r1, [r0, #0]
 8005b6a:	4770      	bx	lr

08005b6c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8005b6c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8005b6e:	b280      	uxth	r0, r0
 8005b70:	4770      	bx	lr

08005b72 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005b72:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8005b74:	b280      	uxth	r0, r0
 8005b76:	4770      	bx	lr

08005b78 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005b78:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8005b7a:	b280      	uxth	r0, r0
 8005b7c:	4770      	bx	lr

08005b7e <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8005b7e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8005b82:	b280      	uxth	r0, r0
 8005b84:	4770      	bx	lr

08005b86 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005b86:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8005b88:	b280      	uxth	r0, r0
 8005b8a:	4770      	bx	lr

08005b8c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8005b8c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8005b8e:	b280      	uxth	r0, r0
 8005b90:	4770      	bx	lr

08005b92 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 8005b92:	8a03      	ldrh	r3, [r0, #16]
 8005b94:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005b96:	bf14      	ite	ne
 8005b98:	2001      	movne	r0, #1
 8005b9a:	2000      	moveq	r0, #0
 8005b9c:	4770      	bx	lr

08005b9e <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 8005b9e:	43c9      	mvns	r1, r1
 8005ba0:	b289      	uxth	r1, r1
 8005ba2:	8201      	strh	r1, [r0, #16]
 8005ba4:	4770      	bx	lr

08005ba6 <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005ba6:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8005ba8:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005baa:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8005bae:	b292      	uxth	r2, r2

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005bb0:	d003      	beq.n	8005bba <TIM_GetITStatus+0x14>
 8005bb2:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8005bb4:	bf14      	ite	ne
 8005bb6:	2001      	movne	r0, #1
 8005bb8:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005bba:	4770      	bx	lr

08005bbc <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 8005bbc:	43c9      	mvns	r1, r1
 8005bbe:	b289      	uxth	r1, r1
 8005bc0:	8201      	strh	r1, [r0, #16]
 8005bc2:	4770      	bx	lr

08005bc4 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005bc4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8005bc6:	4b22      	ldr	r3, [pc, #136]	; (8005c50 <USART_DeInit+0x8c>)
 8005bc8:	4298      	cmp	r0, r3
 8005bca:	d02c      	beq.n	8005c26 <USART_DeInit+0x62>
 8005bcc:	d808      	bhi.n	8005be0 <USART_DeInit+0x1c>
 8005bce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005bd2:	4298      	cmp	r0, r3
 8005bd4:	d017      	beq.n	8005c06 <USART_DeInit+0x42>
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	d01b      	beq.n	8005c16 <USART_DeInit+0x52>
 8005bde:	bd08      	pop	{r3, pc}
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <USART_DeInit+0x90>)
 8005be2:	4298      	cmp	r0, r3
 8005be4:	d027      	beq.n	8005c36 <USART_DeInit+0x72>
 8005be6:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8005bea:	4298      	cmp	r0, r3
 8005bec:	d12f      	bne.n	8005c4e <USART_DeInit+0x8a>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8005bee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	f7ff fa10 	bl	8005018 <RCC_APB2PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8005bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  switch (*(u32*)&USARTx)
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8005bfc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005c00:	2100      	movs	r1, #0
 8005c02:	f7ff ba09 	b.w	8005018 <RCC_APB2PeriphResetCmd>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8005c06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	f7ff fa10 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8005c10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005c14:	e016      	b.n	8005c44 <USART_DeInit+0x80>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8005c16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	f7ff fa08 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8005c20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005c24:	e00e      	b.n	8005c44 <USART_DeInit+0x80>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8005c26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	f7ff fa00 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8005c30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c34:	e006      	b.n	8005c44 <USART_DeInit+0x80>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8005c36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	f7ff f9f8 	bl	8005030 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005c40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005c44:	2100      	movs	r1, #0
      break;            

    default:
      break;
  }
}
 8005c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005c4a:	f7ff b9f1 	b.w	8005030 <RCC_APB1PeriphResetCmd>
 8005c4e:	bd08      	pop	{r3, pc}
 8005c50:	40004c00 	andmi	r4, r0, r0, lsl #24
 8005c54:	40005000 	andmi	r5, r0, r0

08005c58 <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005c58:	b530      	push	{r4, r5, lr}
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	4604      	mov	r4, r0
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005c5e:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005c60:	88ca      	ldrh	r2, [r1, #6]
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005c62:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005c64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8005c68:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005c6a:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005c6c:	8982      	ldrh	r2, [r0, #12]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005c6e:	8909      	ldrh	r1, [r1, #8]
 8005c70:	88ab      	ldrh	r3, [r5, #4]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005c72:	b292      	uxth	r2, r2

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005c74:	430b      	orrs	r3, r1
 8005c76:	8969      	ldrh	r1, [r5, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005c78:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005c7c:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005c7e:	f022 020c 	bic.w	r2, r2, #12

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005c86:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005c88:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005c8a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005c8c:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005c92:	b087      	sub	sp, #28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8005c94:	4313      	orrs	r3, r2

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8005c96:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005c98:	a801      	add	r0, sp, #4
 8005c9a:	f7ff f957 	bl	8004f4c <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005c9e:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005ca0:	9a04      	ldr	r2, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005ca2:	490e      	ldr	r1, [pc, #56]	; (8005cdc <USART_Init+0x84>)
 8005ca4:	428c      	cmp	r4, r1
 8005ca6:	bf18      	it	ne
 8005ca8:	461a      	movne	r2, r3
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8005caa:	2319      	movs	r3, #25
 8005cac:	4353      	muls	r3, r2
 8005cae:	682a      	ldr	r2, [r5, #0]
 8005cb0:	0092      	lsls	r2, r2, #2
 8005cb2:	fbb3 f2f2 	udiv	r2, r3, r2
  tmpreg = (integerdivider / 0x64) << 0x04;
 8005cb6:	2364      	movs	r3, #100	; 0x64
 8005cb8:	fbb2 f0f3 	udiv	r0, r2, r3
 8005cbc:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8005cbe:	0901      	lsrs	r1, r0, #4
 8005cc0:	fb03 2211 	mls	r2, r3, r1, r2
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	3232      	adds	r2, #50	; 0x32
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	4303      	orrs	r3, r0

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8123      	strh	r3, [r4, #8]
}
 8005cd6:	b007      	add	sp, #28
 8005cd8:	bd30      	pop	{r4, r5, pc}
 8005cda:	bf00      	nop
 8005cdc:	40013800 	andmi	r3, r1, r0, lsl #16

08005ce0 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8005ce0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005ce4:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005ce6:	220c      	movs	r2, #12
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8005cec:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8005cee:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005cf0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8005cf2:	8183      	strh	r3, [r0, #12]
 8005cf4:	4770      	bx	lr

08005cf6 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005cf6:	880b      	ldrh	r3, [r1, #0]
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8005cf8:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005cfa:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005cfc:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005cfe:	4323      	orrs	r3, r4
 8005d00:	888c      	ldrh	r4, [r1, #4]
 8005d02:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005d04:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8005d06:	4323      	orrs	r3, r4
 8005d08:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005d0a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29b      	uxth	r3, r3
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005d12:	8203      	strh	r3, [r0, #16]
 8005d14:	bd10      	pop	{r4, pc}

08005d16 <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005d16:	2300      	movs	r3, #0
 8005d18:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005d1a:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005d1c:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005d1e:	80c3      	strh	r3, [r0, #6]
 8005d20:	4770      	bx	lr

08005d22 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005d22:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005d24:	b119      	cbz	r1, 8005d2e <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d2c:	e003      	b.n	8005d36 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	8183      	strh	r3, [r0, #12]
 8005d38:	4770      	bx	lr

08005d3a <USART_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005d3a:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005d3c:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005d40:	2301      	movs	r3, #1
 8005d42:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005d46:	2c01      	cmp	r4, #1
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005d48:	fa03 f301 	lsl.w	r3, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005d4c:	d101      	bne.n	8005d52 <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8005d4e:	300c      	adds	r0, #12
 8005d50:	e003      	b.n	8005d5a <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005d52:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8005d54:	bf0c      	ite	eq
 8005d56:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005d58:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8005d5a:	b112      	cbz	r2, 8005d62 <USART_ITConfig+0x28>
  {
    *(vu32*)usartxbase  |= itmask;
 8005d5c:	6802      	ldr	r2, [r0, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	e002      	b.n	8005d68 <USART_ITConfig+0x2e>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8005d62:	6802      	ldr	r2, [r0, #0]
 8005d64:	ea22 0303 	bic.w	r3, r2, r3
 8005d68:	6003      	str	r3, [r0, #0]
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005d6c:	8a83      	ldrh	r3, [r0, #20]
 8005d6e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005d70:	b10a      	cbz	r2, 8005d76 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005d72:	4319      	orrs	r1, r3
 8005d74:	e001      	b.n	8005d7a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 8005d76:	ea23 0101 	bic.w	r1, r3, r1
 8005d7a:	8281      	strh	r1, [r0, #20]
 8005d7c:	4770      	bx	lr

08005d7e <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8005d7e:	8a03      	ldrh	r3, [r0, #16]
 8005d80:	f023 030f 	bic.w	r3, r3, #15
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005d8a:	8a03      	ldrh	r3, [r0, #16]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	4319      	orrs	r1, r3
 8005d90:	8201      	strh	r1, [r0, #16]
 8005d92:	4770      	bx	lr

08005d94 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8005d94:	8983      	ldrh	r3, [r0, #12]
 8005d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005da0:	8983      	ldrh	r3, [r0, #12]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4319      	orrs	r1, r3
 8005da6:	8181      	strh	r1, [r0, #12]
 8005da8:	4770      	bx	lr

08005daa <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005daa:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005dac:	b119      	cbz	r1, 8005db6 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	e003      	b.n	8005dbe <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8005db6:	f023 0302 	bic.w	r3, r3, #2
 8005dba:	041b      	lsls	r3, r3, #16
 8005dbc:	0c1b      	lsrs	r3, r3, #16
 8005dbe:	8183      	strh	r3, [r0, #12]
 8005dc0:	4770      	bx	lr

08005dc2 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8005dc2:	8a03      	ldrh	r3, [r0, #16]
 8005dc4:	f023 0320 	bic.w	r3, r3, #32
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8005dce:	8a03      	ldrh	r3, [r0, #16]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4319      	orrs	r1, r3
 8005dd4:	8201      	strh	r1, [r0, #16]
 8005dd6:	4770      	bx	lr

08005dd8 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005dd8:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005dda:	b119      	cbz	r1, 8005de4 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005de2:	e003      	b.n	8005dec <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8005de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	8203      	strh	r3, [r0, #16]
 8005dee:	4770      	bx	lr

08005df0 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8005df0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005df4:	8081      	strh	r1, [r0, #4]
 8005df6:	4770      	bx	lr

08005df8 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8005df8:	8880      	ldrh	r0, [r0, #4]
}
 8005dfa:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005dfe:	4770      	bx	lr

08005e00 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8005e00:	8983      	ldrh	r3, [r0, #12]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	8183      	strh	r3, [r0, #12]
 8005e0a:	4770      	bx	lr

08005e0c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8005e0c:	8b03      	ldrh	r3, [r0, #24]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8005e12:	8b03      	ldrh	r3, [r0, #24]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005e1a:	8301      	strh	r1, [r0, #24]
 8005e1c:	4770      	bx	lr

08005e1e <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8005e1e:	8b03      	ldrh	r3, [r0, #24]
 8005e20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e24:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8005e26:	8b03      	ldrh	r3, [r0, #24]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4319      	orrs	r1, r3
 8005e2c:	8301      	strh	r1, [r0, #24]
 8005e2e:	4770      	bx	lr

08005e30 <USART_SmartCardCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005e30:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e32:	b119      	cbz	r1, 8005e3c <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f043 0320 	orr.w	r3, r3, #32
 8005e3a:	e003      	b.n	8005e44 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8005e3c:	f023 0320 	bic.w	r3, r3, #32
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	8283      	strh	r3, [r0, #20]
 8005e46:	4770      	bx	lr

08005e48 <USART_SmartCardNACKCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005e48:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e4a:	b119      	cbz	r1, 8005e54 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f043 0310 	orr.w	r3, r3, #16
 8005e52:	e003      	b.n	8005e5c <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8005e54:	f023 0310 	bic.w	r3, r3, #16
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	8283      	strh	r3, [r0, #20]
 8005e5e:	4770      	bx	lr

08005e60 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005e60:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005e62:	b119      	cbz	r1, 8005e6c <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f043 0308 	orr.w	r3, r3, #8
 8005e6a:	e003      	b.n	8005e74 <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8005e6c:	f023 0308 	bic.w	r3, r3, #8
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	0c1b      	lsrs	r3, r3, #16
 8005e74:	8283      	strh	r3, [r0, #20]
 8005e76:	4770      	bx	lr

08005e78 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8005e78:	8a83      	ldrh	r3, [r0, #20]
 8005e7a:	f023 0304 	bic.w	r3, r3, #4
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005e84:	8a83      	ldrh	r3, [r0, #20]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	4319      	orrs	r1, r3
 8005e8a:	8281      	strh	r1, [r0, #20]
 8005e8c:	4770      	bx	lr

08005e8e <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005e8e:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005e90:	b119      	cbz	r1, 8005e9a <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f043 0302 	orr.w	r3, r3, #2
 8005e98:	e003      	b.n	8005ea2 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8005e9a:	f023 0302 	bic.w	r3, r3, #2
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	8283      	strh	r3, [r0, #20]
 8005ea4:	4770      	bx	lr

08005ea6 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8005ea6:	8803      	ldrh	r3, [r0, #0]
 8005ea8:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005eaa:	bf14      	ite	ne
 8005eac:	2001      	movne	r0, #1
 8005eae:	2000      	moveq	r0, #0
 8005eb0:	4770      	bx	lr

08005eb2 <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8005eb2:	43c9      	mvns	r1, r1
 8005eb4:	b289      	uxth	r1, r1
 8005eb6:	8001      	strh	r1, [r0, #0]
 8005eb8:	4770      	bx	lr

08005eba <USART_GetITStatus>:
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005eba:	2301      	movs	r3, #1
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
 8005ebc:	b510      	push	{r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005ebe:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005ec2:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005ec6:	429c      	cmp	r4, r3
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005ec8:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005ecc:	d101      	bne.n	8005ed2 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8005ece:	8983      	ldrh	r3, [r0, #12]
 8005ed0:	e003      	b.n	8005eda <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005ed2:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8005ed4:	bf0c      	ite	eq
 8005ed6:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005ed8:	8a83      	ldrhne	r3, [r0, #20]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8005ede:	8802      	ldrh	r2, [r0, #0]
 8005ee0:	b292      	uxth	r2, r2

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005ee2:	b13b      	cbz	r3, 8005ef4 <USART_GetITStatus+0x3a>
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8005ee4:	0a09      	lsrs	r1, r1, #8
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	408b      	lsls	r3, r1
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005eea:	4213      	tst	r3, r2
  {
    bitstatus = SET;
 8005eec:	bf14      	ite	ne
 8005eee:	2001      	movne	r0, #1
 8005ef0:	2000      	moveq	r0, #0
 8005ef2:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8005ef4:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8005ef6:	bd10      	pop	{r4, pc}

08005ef8 <USART_ClearITPendingBit>:
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
 8005ef8:	0a09      	lsrs	r1, r1, #8
 8005efa:	2301      	movs	r3, #1
 8005efc:	408b      	lsls	r3, r1
  USARTx->SR = (u16)~itmask;
 8005efe:	43db      	mvns	r3, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	8003      	strh	r3, [r0, #0]
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop

08005f08 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8005f08:	bf30      	wfi
    BX r14
 8005f0a:	4770      	bx	lr

08005f0c <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8005f0c:	bf20      	wfe
    BX r14
 8005f0e:	4770      	bx	lr

08005f10 <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8005f10:	bf40      	sev
    BX r14
 8005f12:	4770      	bx	lr

08005f14 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8005f14:	f3bf 8f6f 	isb	sy
    BX r14
 8005f18:	4770      	bx	lr

08005f1a <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8005f1a:	f3bf 8f4f 	dsb	sy
    BX r14
 8005f1e:	4770      	bx	lr

08005f20 <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8005f20:	f3bf 8f5f 	dmb	sy
    BX r14
 8005f24:	4770      	bx	lr

08005f26 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8005f26:	df01      	svc	1
    BX r14
 8005f28:	4770      	bx	lr

08005f2a <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8005f2a:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8005f2e:	4770      	bx	lr

08005f30 <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8005f30:	f380 8814 	msr	CONTROL, r0
  ISB
 8005f34:	f3bf 8f6f 	isb	sy
  BX r14
 8005f38:	4770      	bx	lr

08005f3a <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8005f3a:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8005f3e:	4770      	bx	lr

08005f40 <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8005f40:	f380 8809 	msr	PSP, r0
    BX r14
 8005f44:	4770      	bx	lr

08005f46 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8005f46:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8005f4a:	4770      	bx	lr

08005f4c <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8005f4c:	f380 8808 	msr	MSP, r0
    BX r14
 8005f50:	4770      	bx	lr

08005f52 <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8005f52:	b672      	cpsid	i
  BX r14
 8005f54:	4770      	bx	lr

08005f56 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8005f56:	b662      	cpsie	i
  BX r14
 8005f58:	4770      	bx	lr

08005f5a <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8005f5a:	b671      	cpsid	f
  BX r14
 8005f5c:	4770      	bx	lr

08005f5e <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8005f5e:	b661      	cpsie	f
  BX r14
 8005f60:	4770      	bx	lr

08005f62 <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8005f62:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8005f66:	4770      	bx	lr

08005f68 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8005f68:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  BX r14
 8005f6c:	4770      	bx	lr

08005f6e <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8005f6e:	ba40      	rev16	r0, r0
  BX r14
 8005f70:	4770      	bx	lr

08005f72 <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8005f72:	ba00      	rev	r0, r0
  BX r14
 8005f74:	4770      	bx	lr
	...

08005f78 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8005f78:	4668      	mov	r0, sp
 8005f7a:	f020 0107 	bic.w	r1, r0, #7
 8005f7e:	468d      	mov	sp, r1
 8005f80:	b501      	push	{r0, lr}
 8005f82:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <Reset_Handler+0x3c>)
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <Reset_Handler+0x40>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8005f86:	490d      	ldr	r1, [pc, #52]	; (8005fbc <Reset_Handler+0x44>)
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	d204      	bcs.n	8005f96 <Reset_Handler+0x1e>
    {
        *(pulDest++) = *(pulSrc++);
 8005f8c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8005f90:	f843 1b04 	str.w	r1, [r3], #4
 8005f94:	e7f7      	b.n	8005f86 <Reset_Handler+0xe>
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <Reset_Handler+0x48>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8005f98:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <Reset_Handler+0x4c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d203      	bcs.n	8005fa6 <Reset_Handler+0x2e>
    {
        *(pulDest++) = 0;
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f843 2b04 	str.w	r2, [r3], #4
 8005fa4:	e7f8      	b.n	8005f98 <Reset_Handler+0x20>
    }

    //
    // Call the application's entry point.
    //
    main();
 8005fa6:	f000 f80f 	bl	8005fc8 <main>
}
 8005faa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8005fae:	4685      	mov	sp, r0
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	08006390 	stmdaeq	r0, {r4, r7, r8, r9, sp, lr}
 8005fb8:	20000000 	andcs	r0, r0, r0
 8005fbc:	20000018 	andcs	r0, r0, r8, lsl r0
 8005fc0:	20000018 	andcs	r0, r0, r8, lsl r0
 8005fc4:	2000021c 	andcs	r0, r0, ip, lsl r2

08005fc8 <main>:
//////////////////////////   M A I N   L O O P   ////////////////////////
/////////////////////////////////////////////////////////////////////////


int main(void)
{
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	b087      	sub	sp, #28
    // --------------DO NOT TOUCH!!------------------------ //
    // NEVER!!! EVER!!!

    init_config();
 8005fcc:	f7fd ff36 	bl	8003e3c <init_config>
    // thats why we call it state :-)
    int state;


    state=INIT;
    infiniteTurn(MOTOR_down_left);
 8005fd0:	2004      	movs	r0, #4
 8005fd2:	f7fd f9bc 	bl	800334e <infiniteTurn>
    infiniteTurn(MOTOR_down_right);
 8005fd6:	2003      	movs	r0, #3
 8005fd8:	f7fd f9b9 	bl	800334e <infiniteTurn>
    setSpeed(MOTOR_down_left, speed_ini);
 8005fdc:	2004      	movs	r0, #4
 8005fde:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005fe2:	f7fd fa74 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, speed_ini);
 8005fe6:	2003      	movs	r0, #3
 8005fe8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005fec:	f7fd fa6f 	bl	80034ce <setSpeed>
    unsigned char field;
    unsigned char leftfield;

    setSpeed(MOTOR_down_left, 0);
 8005ff0:	2004      	movs	r0, #4
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	f7fd fa6b 	bl	80034ce <setSpeed>
    setSpeed(MOTOR_down_right, 0);
 8005ff8:	2003      	movs	r0, #3
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f7fd fa67 	bl	80034ce <setSpeed>

    //OUR GLOBAL VARIABLE
    int shovel_state = shovel_down;
 8006000:	2300      	movs	r3, #0
    unsigned int init_Angle1;
    unsigned int init_Angle2;
    getAngle(MOTOR_up_left, &init_Angle1);
 8006002:	2002      	movs	r0, #2
 8006004:	a902      	add	r1, sp, #8

    setSpeed(MOTOR_down_left, 0);
    setSpeed(MOTOR_down_right, 0);

    //OUR GLOBAL VARIABLE
    int shovel_state = shovel_down;
 8006006:	9301      	str	r3, [sp, #4]
    unsigned int init_Angle1;
    unsigned int init_Angle2;
    getAngle(MOTOR_up_left, &init_Angle1);
 8006008:	f7fd fb66 	bl	80036d8 <getAngle>
    getAngle(MOTOR_up_right, &init_Angle2);
 800600c:	a903      	add	r1, sp, #12
 800600e:	2001      	movs	r0, #1
 8006010:	f7fd fb62 	bl	80036d8 <getAngle>
    while(state!=STOP)
    {

        while (state==INIT) {
            // play some music
            init_music();
 8006014:	f7fd fdb1 	bl	8003b7a <init_music>
            // blink some lights
            init_lights();
 8006018:	f7fd fe13 	bl	8003c42 <init_lights>

            unsigned int init_Angle1;
            unsigned int init_Angle2;
            getAngle(MOTOR_up_left, &init_Angle1);    //angles bas
 800601c:	2002      	movs	r0, #2
 800601e:	a904      	add	r1, sp, #16
 8006020:	f7fd fb5a 	bl	80036d8 <getAngle>
            getAngle(MOTOR_up_right, &init_Angle2);
 8006024:	a905      	add	r1, sp, #20
 8006026:	2001      	movs	r0, #1
 8006028:	f7fd fb56 	bl	80036d8 <getAngle>
            out_Angle1 = init_Angle1-150;         //angles hauts
 800602c:	9c04      	ldr	r4, [sp, #16]
            out_Angle2 = init_Angle2+150;
 800602e:	9d05      	ldr	r5, [sp, #20]
        }


        while (state==GO_TO_CENTER) {  
            // the temporisation should be adapted
            switch_off_lights();
 8006030:	f7fd fb04 	bl	800363c <switch_off_lights>
            GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8006034:	4837      	ldr	r0, [pc, #220]	; (8006114 <main+0x14c>)
 8006036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800603a:	f7fe fc6a 	bl	8004912 <GPIO_ResetBits>
            move_forward(speed_ini);
 800603e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8006042:	f7fd fa61 	bl	8003508 <move_forward>

            // advance for 3s, maybe adapt...
            mDelay(1500);
 8006046:	f240 50dc 	movw	r0, #1500	; 0x5dc

            unsigned int init_Angle1;
            unsigned int init_Angle2;
            getAngle(MOTOR_up_left, &init_Angle1);    //angles bas
            getAngle(MOTOR_up_right, &init_Angle2);
            out_Angle1 = init_Angle1-150;         //angles hauts
 800604a:	3c96      	subs	r4, #150	; 0x96
            out_Angle2 = init_Angle2+150;
 800604c:	3596      	adds	r5, #150	; 0x96
            switch_off_lights();
            GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
            move_forward(speed_ini);

            // advance for 3s, maybe adapt...
            mDelay(1500);
 800604e:	f7fd fd63 	bl	8003b18 <mDelay>



        // begin the "seeking for an opponent" phase
        while (state==SEEKING) {
            if(shovel_state == shovel_up || shovel_state == shovel_upping){
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	3b01      	subs	r3, #1
 8006056:	2b01      	cmp	r3, #1
 8006058:	d804      	bhi.n	8006064 <main+0x9c>
                up_to_lowering(&shovel_state, init_Angle1, init_Angle2);
 800605a:	a801      	add	r0, sp, #4
 800605c:	9902      	ldr	r1, [sp, #8]
 800605e:	9a03      	ldr	r2, [sp, #12]
 8006060:	f7fd fe70 	bl	8003d44 <up_to_lowering>
            }

            // the robot starts spinning around
            switch_off_lights();
 8006064:	f7fd faea 	bl	800363c <switch_off_lights>
            GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 8006068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800606c:	4829      	ldr	r0, [pc, #164]	; (8006114 <main+0x14c>)
 800606e:	f7fe fc50 	bl	8004912 <GPIO_ResetBits>
            turn_right();
 8006072:	f7fd fa58 	bl	8003526 <turn_right>
            centerInfraRed(SENSOR, &field);
 8006076:	2064      	movs	r0, #100	; 0x64
 8006078:	f10d 0102 	add.w	r1, sp, #2
 800607c:	f7fd fbde 	bl	800383c <centerInfraRed>

            // detect border
            detectlb(thresholdLight, &leftfield);
 8006080:	20fa      	movs	r0, #250	; 0xfa
 8006082:	f10d 0103 	add.w	r1, sp, #3
 8006086:	f7fd fe77 	bl	8003d78 <detectlb>

            // opponent detection will result in an attitude change
            if (field >= thresholdInfrared)  // indeed this condition should be explicit
 800608a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800608e:	2b31      	cmp	r3, #49	; 0x31
 8006090:	dddf      	ble.n	8006052 <main+0x8a>
        }

        // the robot will focus the opponent and try to push him away,
        // as hard as possible
        while (state==CHASING) {
            GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
 8006092:	4821      	ldr	r0, [pc, #132]	; (8006118 <main+0x150>)
 8006094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006098:	f7fe fc3b 	bl	8004912 <GPIO_ResetBits>
            GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 800609c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a0:	481c      	ldr	r0, [pc, #112]	; (8006114 <main+0x14c>)
 80060a2:	f7fe fc36 	bl	8004912 <GPIO_ResetBits>
            move_forward(speed_max);
 80060a6:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80060aa:	f7fd fa2d 	bl	8003508 <move_forward>
            centerInfraRed(SENSOR, &field);
 80060ae:	2064      	movs	r0, #100	; 0x64
 80060b0:	f10d 0102 	add.w	r1, sp, #2
 80060b4:	f7fd fbc2 	bl	800383c <centerInfraRed>
            
            // shovel
            if(shovel_state == shovel_down){
 80060b8:	9b01      	ldr	r3, [sp, #4]
 80060ba:	b92b      	cbnz	r3, 80060c8 <main+0x100>
    if( abs(current_Angle1-init_Angle1) <= shovelthreshold && abs(current_Angle2-init_Angle2) <= shovelthreshold)
        *shovel_state = shovel_down;
}

void down_to_upping(int* shovel_state, int out_Angle1, int out_Angle2){
    lifting(out_Angle1, out_Angle2);
 80060bc:	4620      	mov	r0, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	f7fd fa70 	bl	80035a4 <lifting>
    *shovel_state = shovel_upping;
 80060c4:	2302      	movs	r3, #2
 80060c6:	9301      	str	r3, [sp, #4]
            // shovel
            if(shovel_state == shovel_down){
                down_to_upping(&shovel_state, out_Angle1, out_Angle2);
            }

            if(shovel_state == shovel_upping ){
 80060c8:	9b01      	ldr	r3, [sp, #4]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d104      	bne.n	80060d8 <main+0x110>
                upping_to_up(&shovel_state, out_Angle1, out_Angle2);
 80060ce:	a801      	add	r0, sp, #4
 80060d0:	4621      	mov	r1, r4
 80060d2:	462a      	mov	r2, r5
 80060d4:	f7fd fb1c 	bl	8003710 <upping_to_up>
            }


            if(shovel_state == shovel_up){
 80060d8:	9b01      	ldr	r3, [sp, #4]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d104      	bne.n	80060e8 <main+0x120>
                up_to_lowering(&shovel_state, init_Angle1, init_Angle2);
 80060de:	a801      	add	r0, sp, #4
 80060e0:	9902      	ldr	r1, [sp, #8]
 80060e2:	9a03      	ldr	r2, [sp, #12]
 80060e4:	f7fd fe2e 	bl	8003d44 <up_to_lowering>
            }

            if(shovel_state == shovel_lowering){
 80060e8:	9b01      	ldr	r3, [sp, #4]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d104      	bne.n	80060f8 <main+0x130>
                lowering_to_low(&shovel_state, init_Angle1, init_Angle2);
 80060ee:	a801      	add	r0, sp, #4
 80060f0:	9902      	ldr	r1, [sp, #8]
 80060f2:	9a03      	ldr	r2, [sp, #12]
 80060f4:	f7fd fb26 	bl	8003744 <lowering_to_low>
            }

            // detect border
            detectlb(thresholdLight, &leftfield);
 80060f8:	20fa      	movs	r0, #250	; 0xfa
 80060fa:	f10d 0103 	add.w	r1, sp, #3
 80060fe:	f7fd fe3b 	bl	8003d78 <detectlb>

            // if, for whatever reason, the robot does not detect any obstacle anymore
            // it returns to its seeking opponent phase
            if (field<thresholdInfrared/2)
 8006102:	f89d 3002 	ldrb.w	r3, [sp, #2]
                state=SEEKING;
 8006106:	2b18      	cmp	r3, #24
 8006108:	bfcc      	ite	gt
 800610a:	2303      	movgt	r3, #3
 800610c:	2302      	movle	r3, #2
                state = CHASING;
        }

        // the robot will focus the opponent and try to push him away,
        // as hard as possible
        while (state==CHASING) {
 800610e:	2b03      	cmp	r3, #3
 8006110:	d0bf      	beq.n	8006092 <main+0xca>
 8006112:	e79e      	b.n	8006052 <main+0x8a>
 8006114:	40010c00 	andmi	r0, r1, r0, lsl #24
 8006118:	40011000 	andmi	r1, r1, r0

0800611c <APBAHBPrescTable>:
 800611c:	00000000 	andeq	r0, r0, r0
 8006120:	04030201 	streq	r0, [r3], #-513	; 0x201
 8006124:	04030201 	streq	r0, [r3], #-513	; 0x201
 8006128:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

0800612c <ADCPrescTable>:
 800612c:	08060402 	stmdaeq	r6, {r1, sl}
 8006130:	354d430a 	strbcc	r4, [sp, #-778]	; 0x30a
 8006134:	666e6920 	strbtvs	r6, [lr], -r0, lsr #18
 8006138:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
 800613c:	6f722065 	svcvs	0x00722065
 8006140:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 8006144:	6d206e6f 	stcvs	14, cr6, [r0, #-444]!	; 0xfffffe44
 8006148:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800614c:	0a746573 	beq	9d1f720 <_etext+0x1d1938c>
 8006150:	4d430a00 	vstrmi	s1, [r3, #-0]
 8006154:	6f6e2035 	svcvs	0x006e2035
 8006158:	6c616d72 	stclvs	13, cr6, [r1], #-456	; 0xfffffe38
 800615c:	746f7220 	strbtvc	r7, [pc], #-544	; 8006164 <ADCPrescTable+0x38>
 8006160:	6f697461 	svcvs	0x00697461
 8006164:	6f6d206e 	svcvs	0x006d206e
 8006168:	73206564 			; <UNDEFINED> instruction: 0x73206564
 800616c:	000a7465 	andeq	r7, sl, r5, ror #8
 8006170:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8006174:	4658545f 			; <UNDEFINED> instruction: 0x4658545f
 8006178:	3a4c4941 	bcc	9318684 <_etext+0x13122f0>
 800617c:	69614620 	stmdbvs	r1!, {r5, r9, sl, lr}^
 8006180:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8006184:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 8006188:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
 800618c:	736e6920 	cmnvc	lr, #32, 18	; 0x80000
 8006190:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 8006194:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 8006198:	63617020 	cmnvs	r1, #32
 800619c:	2174656b 	cmncs	r4, fp, ror #10
 80061a0:	4f43000a 	svcmi	0x0043000a
 80061a4:	545f4d4d 	ldrbpl	r4, [pc], #-3405	; 80061ac <ADCPrescTable+0x80>
 80061a8:	52524558 	subspl	r4, r2, #88, 10	; 0x16000000
 80061ac:	203a524f 	eorscs	r5, sl, pc, asr #4
 80061b0:	6f636e49 	svcvs	0x00636e49
 80061b4:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 80061b8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 80061bc:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 80061c0:	6f697463 	svcvs	0x00697463
 80061c4:	6170206e 	cmnvs	r0, lr, rrx
 80061c8:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 80061cc:	43000a21 	movwmi	r0, #2593	; 0xa21
 80061d0:	5f4d4d4f 	svcpl	0x004d4d4f
 80061d4:	41465852 	cmpmi	r6, r2, asr r8
 80061d8:	203a4c49 	eorscs	r4, sl, r9, asr #24
 80061dc:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 80061e0:	67206465 	strvs	r6, [r0, -r5, ror #8]!
 80061e4:	73207465 			; <UNDEFINED> instruction: 0x73207465
 80061e8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 80061ec:	61702073 	cmnvs	r0, r3, ror r0
 80061f0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 80061f4:	6f726620 	svcvs	0x00726620
 80061f8:	6564206d 	strbvs	r2, [r4, #-109]!	; 0x6d
 80061fc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
 8006200:	43000a21 	movwmi	r0, #2593	; 0xa21
 8006204:	5f4d4d4f 	svcpl	0x004d4d4f
 8006208:	41575852 	cmpmi	r7, r2, asr r8
 800620c:	4e495449 	cdpmi	4, 4, cr5, cr9, cr9, {2}
 8006210:	4e203a47 	vnmulmi.f32	s6, s0, s14
 8006214:	7220776f 	eorvc	r7, r0, #29097984	; 0x1bc0000
 8006218:	65696365 	strbvs	r6, [r9, #-869]!	; 0x365
 800621c:	676e6976 			; <UNDEFINED> instruction: 0x676e6976
 8006220:	61747320 	cmnvs	r4, r0, lsr #6
 8006224:	20737574 	rsbscs	r7, r3, r4, ror r5
 8006228:	6b636170 	blvs	98de7f0 <_etext+0x18d845c>
 800622c:	0a217465 	beq	88633c8 <_etext+0x85d034>
 8006230:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8006238 <ADCPrescTable+0x10c>
 8006234:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8006238:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
 800623c:	3a54554f 	bcc	951b780 <_etext+0x15153ec>
 8006240:	65685420 	strbvs	r5, [r8, #-1056]!	; 0x420
 8006244:	69206572 	stmdbvs	r0!, {r1, r4, r5, r6, r8, sl, sp, lr}
 8006248:	6f6e2073 	svcvs	0x006e2073
 800624c:	61747320 	cmnvs	r4, r0, lsr #6
 8006250:	20737574 	rsbscs	r7, r3, r4, ror r5
 8006254:	6b636170 	blvs	98de81c <_etext+0x18d8488>
 8006258:	0a217465 	beq	88633f4 <_etext+0x85d060>
 800625c:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8006264 <ADCPrescTable+0x138>
 8006260:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8006264:	52524f43 	subspl	r4, r2, #268	; 0x10c
 8006268:	3a545055 	bcc	951a3c4 <_etext+0x1514030>
 800626c:	636e4920 	cmnvs	lr, #32, 18	; 0x80000
 8006270:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
 8006274:	73207463 			; <UNDEFINED> instruction: 0x73207463
 8006278:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 800627c:	61702073 	cmnvs	r0, r3, ror r0
 8006280:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8006284:	54000a21 	strpl	r0, [r0], #-2593	; 0xa21
 8006288:	20736968 	rsbscs	r6, r3, r8, ror #18
 800628c:	75207369 	strvc	r7, [r0, #-873]!	; 0x369
 8006290:	6f6e6b6e 	svcvs	0x006e6b6e
 8006294:	65206e77 	strvs	r6, [r0, #-3703]!	; 0xe77
 8006298:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 800629c:	646f6320 	strbtvs	r6, [pc], #-800	; 80062a4 <ADCPrescTable+0x178>
 80062a0:	000a2165 	andeq	r2, sl, r5, ror #2
 80062a4:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
 80062a8:	6f762074 	svcvs	0x00762074
 80062ac:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
 80062b0:	72652065 	rsbvc	r2, r5, #101	; 0x65
 80062b4:	21726f72 	cmncs	r2, r2, ror pc
 80062b8:	6e41000a 	cdpvs	0, 4, cr0, cr1, cr10, {0}
 80062bc:	20656c67 	rsbcs	r6, r5, r7, ror #24
 80062c0:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 80062c4:	72652074 	rsbvc	r2, r5, #116	; 0x74
 80062c8:	21726f72 	cmncs	r2, r2, ror pc
 80062cc:	764f000a 	strbvc	r0, [pc], -sl
 80062d0:	65687265 	strbvs	r7, [r8, #-613]!	; 0x265
 80062d4:	65207461 	strvs	r7, [r0, #-1121]!	; 0x461
 80062d8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 80062dc:	4f000a21 	svcmi	0x00000a21
 80062e0:	6f207475 	svcvs	0x00207475
 80062e4:	61722066 	cmnvs	r2, r6, rrx
 80062e8:	2065676e 	rsbcs	r6, r5, lr, ror #14
 80062ec:	6f727265 	svcvs	0x00727265
 80062f0:	000a2172 	andeq	r2, sl, r2, ror r1
 80062f4:	63656843 	cmnvs	r5, #4390912	; 0x430000
 80062f8:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
 80062fc:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
 8006300:	0a21726f 	beq	8862cc4 <_etext+0x85c930>
 8006304:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xf00
 8006308:	616f6c72 	smcvs	63170	; 0xf6c2
 800630c:	72652064 	rsbvc	r2, r5, #100	; 0x64
 8006310:	21726f72 	cmncs	r2, r2, ror pc
 8006314:	6e49000a 	cdpvs	0, 4, cr0, cr9, cr10, {0}
 8006318:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 800631c:	6f697463 	svcvs	0x00697463
 8006320:	6f63206e 	svcvs	0x0063206e
 8006324:	65206564 	strvs	r6, [r0, #-1380]!	; 0x564
 8006328:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 800632c:	21000a21 	tstcs	r0, r1, lsr #20
 8006330:	000a2121 	andeq	r2, sl, r1, lsr #2
 8006334:	6f72700a 	svcvs	0x0072700a
 8006338:	6d656c62 	stclvs	12, cr6, [r5, #-392]!	; 0xfffffe78
 800633c:	6f63202c 	svcvs	0x0063202c
 8006340:	3d3d6564 	cfldr32cc	mvfx6, [sp, #-400]!	; 0xfffffe70
 8006344:	72700a00 	rsbsvc	r0, r0, #0, 20
 8006348:	656c626f 	strbvs	r6, [ip, #-623]!	; 0x26f
 800634c:	63202c6d 			; <UNDEFINED> instruction: 0x63202c6d
 8006350:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8006354:	6c617600 	stclvs	6, cr7, [r1], #-0
 8006358:	69206575 	stmdbvs	r0!, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
 800635c:	00202073 	eoreq	r2, r0, r3, ror r0
 8006360:	6f746f4d 	svcvs	0x00746f4d
 8006364:	696c2072 	stmdbvs	ip!, {r1, r4, r5, r6, sp}^
 8006368:	73746867 	cmnvc	r4, #6750208	; 0x670000
 800636c:	2e6e6f20 	cdpcs	15, 6, cr6, cr14, cr0, {1}
 8006370:	000a2e2e 	andeq	r2, sl, lr, lsr #28
 8006374:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
 8006378:	0a21216b 	beq	884e92c <_etext+0x848598>
 800637c:	746f4d00 	strbtvc	r4, [pc], #-3328	; 8006384 <ADCPrescTable+0x258>
 8006380:	6c20726f 	sfmvs	f7, 4, [r0], #-444	; 0xfffffe44
 8006384:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
 8006388:	466f2073 			; <UNDEFINED> instruction: 0x466f2073
 800638c:	2e2e2e46 	cdpcs	14, 2, cr2, cr14, cr6, {2}
 8006390:	0000000a 	andeq	r0, r0, sl

Disassembly of section .data:

20000000 <CCR1_Val>:
20000000:	00000064 	andeq	r0, r0, r4, rrx

20000004 <Baudrate_PC>:
20000004:	0000e100 	andeq	lr, r0, r0, lsl #2

20000008 <id>:
20000008:	00000001 	andeq	r0, r0, r1

2000000a <GoalPos>:
2000000a:	03ff0000 	mvnseq	r0, #0
	...

20000010 <Baudrate_DXL>:
20000010:	000f4240 	andeq	r4, pc, r0, asr #4

20000014 <gbCommStatus>:
20000014:	00000001 	andeq	r0, r0, r1

Disassembly of section .bss:

20000018 <_sbss>:
	...

20000019 <gbRxBufferReadPointer>:
	...

2000001a <gbpRxInterruptBuffer>:
	...

2000011c <capture>:
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <gw1msCounter>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <gwTimingDelay>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <CommStatus>:
	...

20000129 <bMoving>:
	...

2000012a <Voltage>:
	...

2000012b <INDEX>:
	...

2000012c <wPresentPos>:
	...

2000012e <Position>:
	...

20000130 <giBusUsing>:
20000130:	00000000 	andeq	r0, r0, r0

20000134 <gbInstructionPacket>:
	...

200001d4 <gbRxGetLength>:
	...

200001d5 <gbRxPacketLength>:
	...

200001d6 <gbStatusPacket>:
	...

Disassembly of section ._usrstack:

2000021c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30353130 	eorscc	r3, r5, r0, lsr r1
  38:	20393235 	eorscs	r3, r9, r5, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <SCS_BASE+0x1fff12fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
  6c:	005d3737 	subseq	r3, sp, r7, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  14:	00000d60 	andeq	r0, r0, r0, ror #26
  18:	08005fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, lr}
  1c:	00000154 	andeq	r0, r0, r4, asr r1
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	34c50002 	strbcc	r0, [r5], #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	08003e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, ip, sp}
  3c:	00000090 	muleq	r0, r0, r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	3a490002 	bcc	124005c <__Stack_Size+0x123fc5c>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp}
  5c:	00000062 	andeq	r0, r0, r2, rrx
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	3d210002 	stccc	0, cr0, [r1, #-8]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
  7c:	0000037c 	andeq	r0, r0, ip, ror r3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	44550002 	ldrbmi	r0, [r5], #-2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
  9c:	00000480 	andeq	r0, r0, r0, lsl #9
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	4d100002 	ldcmi	0, cr0, [r0, #-8]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
  bc:	00000256 	andeq	r0, r0, r6, asr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	54570002 	ldrbpl	r0, [r7], #-2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
  dc:	00000314 	andeq	r0, r0, r4, lsl r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	5dbf0002 	ldcpl	0, cr0, [pc, #8]!	; fc <_Minimum_Stack_Size-0x4>
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08004cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, lr}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	60850002 	addvs	r0, r5, r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
 11c:	0000033c 	andeq	r0, r0, ip, lsr r3
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	68f60002 	ldmvs	r6!, {r1}^
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	080050f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip, lr}
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	6b010002 	blvs	4015c <__Stack_Size+0x3fd5c>
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08005180 	stmdaeq	r0, {r7, r8, ip, lr}
 15c:	00000a44 	andeq	r0, r0, r4, asr #20
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	8a430002 	bhi	10c017c <__Stack_Size+0x10bfd7c>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08005bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, lr}
 17c:	00000342 	andeq	r0, r0, r2, asr #6
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	946f0002 	strbtls	r0, [pc], #-2	; 194 <_Minimum_Stack_Size+0x94>
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08005f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, lr}
 19c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	94d40002 	ldrbls	r0, [r4], #2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08005f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 1bc:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000034c1 	andeq	r3, r0, r1, asr #9
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000862 	andeq	r0, r0, r2, ror #16
      10:	0003e801 	andeq	lr, r3, r1, lsl #16
      14:	0000fa00 	andeq	pc, r0, r0, lsl #20
      18:	00004800 	andeq	r4, r0, r0, lsl #16
	...
      24:	33730200 	cmncc	r3, #0, 4
      28:	17020032 	smladxne	r2, r2, r0, r0
      2c:	00000030 	andeq	r0, r0, r0, lsr r0
      30:	e2050403 	and	r0, r5, #50331648	; 0x3000000
      34:	03000009 	movweq	r0, #9
      38:	09a60502 	stmibeq	r6!, {r1, r8, sl}
      3c:	01030000 	mrseq	r0, (UNDEF: 3)
      40:	000b7706 	andeq	r7, fp, r6, lsl #14
      44:	33750200 	cmncc	r5, #0, 4
      48:	27020032 	smladxcs	r2, r2, r0, r0
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	19070403 	stmdbne	r7, {r0, r1, sl}
      54:	0200000b 	andeq	r0, r0, #11
      58:	00363175 	eorseq	r3, r6, r5, ror r1
      5c:	00622802 	rsbeq	r2, r2, r2, lsl #16
      60:	02030000 	andeq	r0, r3, #0
      64:	000d3907 	andeq	r3, sp, r7, lsl #18
      68:	38750200 	ldmdacc	r5!, {r9}^
      6c:	73290200 			; <UNDEFINED> instruction: 0x73290200
      70:	03000000 	movweq	r0, #0
      74:	0b750801 	bleq	1d42080 <__Stack_Size+0x1d41c80>
      78:	ec040000 	stc	0, cr0, [r4], {-0}
      7c:	02000004 	andeq	r0, r0, #4
      80:	0000852f 	andeq	r8, r0, pc, lsr #10
      84:	00500500 	subseq	r0, r0, r0, lsl #10
      88:	47040000 	strmi	r0, [r4, -r0]
      8c:	02000003 	andeq	r0, r0, #3
      90:	00009530 	andeq	r9, r0, r0, lsr r5
      94:	00620500 	rsbeq	r0, r2, r0, lsl #10
      98:	01060000 	mrseq	r0, (UNDEF: 6)
      9c:	00af3902 	adceq	r3, pc, r2, lsl #18
      a0:	8d070000 	stchi	0, cr0, [r7, #-0]
      a4:	00000019 	andeq	r0, r0, r9, lsl r0
      a8:	54455308 	strbpl	r5, [r5], #-776	; 0x308
      ac:	04000100 	streq	r0, [r0], #-256	; 0x100
      b0:	00000905 	andeq	r0, r0, r5, lsl #18
      b4:	009a3902 	addseq	r3, sl, r2, lsl #18
      b8:	15040000 	strne	r0, [r4, #-0]
      bc:	02000021 	andeq	r0, r0, #33	; 0x21
      c0:	00009a39 	andeq	r9, r0, r9, lsr sl
      c4:	02010600 	andeq	r0, r1, #0, 12
      c8:	0000da3b 	andeq	sp, r0, fp, lsr sl
      cc:	05f10700 	ldrbeq	r0, [r1, #1792]!	; 0x700
      d0:	07000000 	streq	r0, [r0, -r0]
      d4:	00000af2 	strdeq	r0, [r0], -r2
      d8:	14040001 	strne	r0, [r4], #-1
      dc:	02000001 	andeq	r0, r0, #1
      e0:	0000c53b 	andeq	ip, r0, fp, lsr r5
      e4:	02010600 	andeq	r0, r1, #0, 12
      e8:	0000fa3e 	andeq	pc, r0, lr, lsr sl	; <UNPREDICTABLE>
      ec:	00110700 	andseq	r0, r1, r0, lsl #14
      f0:	07000000 	streq	r0, [r0, -r0]
      f4:	000005d6 	ldrdeq	r0, [r0], -r6
      f8:	4c040001 	stcmi	0, cr0, [r4], {1}
      fc:	02000001 	andeq	r0, r0, #1
     100:	0000e53e 	andeq	lr, r0, lr, lsr r5
     104:	07040300 	streq	r0, [r4, -r0, lsl #6]
     108:	00000b10 	andeq	r0, r0, r0, lsl fp
     10c:	4e031c09 	cdpmi	12, 0, cr1, cr3, cr9, {0}
     110:	00017101 	andeq	r7, r1, r1, lsl #2
     114:	52430a00 	subpl	r0, r3, #0, 20
     118:	5003004c 	andpl	r0, r3, ip, asr #32
     11c:	00007a01 	andeq	r7, r0, r1, lsl #20
     120:	430a0000 	movwmi	r0, #40960	; 0xa000
     124:	03004852 	movweq	r4, #2130	; 0x852
     128:	007a0151 	rsbseq	r0, sl, r1, asr r1
     12c:	0a040000 	beq	100134 <__Stack_Size+0xffd34>
     130:	00524449 	subseq	r4, r2, r9, asr #8
     134:	7a015203 	bvc	54948 <__Stack_Size+0x54548>
     138:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     13c:	52444f0a 	subpl	r4, r4, #10, 30	; 0x28
     140:	01530300 	cmpeq	r3, r0, lsl #6
     144:	0000007a 	andeq	r0, r0, sl, ror r0
     148:	00760b0c 	rsbseq	r0, r6, ip, lsl #22
     14c:	54030000 	strpl	r0, [r3], #-0
     150:	00007a01 	andeq	r7, r0, r1, lsl #20
     154:	420a1000 	andmi	r1, sl, #0
     158:	03005252 	movweq	r5, #594	; 0x252
     15c:	007a0155 	rsbseq	r0, sl, r5, asr r1
     160:	0b140000 	bleq	500168 <__Stack_Size+0x4ffd68>
     164:	00000e2f 	andeq	r0, r0, pc, lsr #28
     168:	7a015603 	bvc	5597c <__Stack_Size+0x5557c>
     16c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     170:	0a960c00 	beq	fe583178 <SCS_BASE+0x1e575178>
     174:	57030000 	strpl	r0, [r3, -r0]
     178:	00010c01 	andeq	r0, r1, r1, lsl #24
     17c:	03500900 	cmpeq	r0, #0, 18
     180:	038e020b 	orreq	r0, lr, #-1342177280	; 0xb0000000
     184:	430a0000 	movwmi	r0, #40960	; 0xa000
     188:	03003152 	movweq	r3, #338	; 0x152
     18c:	008a020d 	addeq	r0, sl, sp, lsl #4
     190:	0b000000 	bleq	198 <_Minimum_Stack_Size+0x98>
     194:	00000960 	andeq	r0, r0, r0, ror #18
     198:	57020e03 	strpl	r0, [r2, -r3, lsl #28]
     19c:	02000000 	andeq	r0, r0, #0
     1a0:	3252430a 	subscc	r4, r2, #671088640	; 0x28000000
     1a4:	020f0300 	andeq	r0, pc, #0, 6
     1a8:	0000008a 	andeq	r0, r0, sl, lsl #1
     1ac:	096a0b04 	stmdbeq	sl!, {r2, r8, r9, fp}^
     1b0:	10030000 	andne	r0, r3, r0
     1b4:	00005702 	andeq	r5, r0, r2, lsl #14
     1b8:	9b0b0600 	blls	2c19c0 <__Stack_Size+0x2c15c0>
     1bc:	03000006 	movweq	r0, #6
     1c0:	008a0211 	addeq	r0, sl, r1, lsl r2
     1c4:	0b080000 	bleq	2001cc <__Stack_Size+0x1ffdcc>
     1c8:	00000974 	andeq	r0, r0, r4, ror r9
     1cc:	57021203 	strpl	r1, [r2, -r3, lsl #4]
     1d0:	0a000000 	beq	1d8 <_Minimum_Stack_Size+0xd8>
     1d4:	00051b0b 	andeq	r1, r5, fp, lsl #22
     1d8:	02130300 	andseq	r0, r3, #0, 6
     1dc:	0000008a 	andeq	r0, r0, sl, lsl #1
     1e0:	097e0b0c 	ldmdbeq	lr!, {r2, r3, r8, r9, fp}^
     1e4:	14030000 	strne	r0, [r3], #-0
     1e8:	00005702 	andeq	r5, r0, r2, lsl #14
     1ec:	530a0e00 	movwpl	r0, #44544	; 0xae00
     1f0:	15030052 	strne	r0, [r3, #-82]	; 0x52
     1f4:	00008a02 	andeq	r8, r0, r2, lsl #20
     1f8:	880b1000 	stmdahi	fp, {ip}
     1fc:	03000009 	movweq	r0, #9
     200:	00570216 	subseq	r0, r7, r6, lsl r2
     204:	0a120000 	beq	48020c <__Stack_Size+0x47fe0c>
     208:	00524745 	subseq	r4, r2, r5, asr #14
     20c:	8a021703 	bhi	85e20 <__Stack_Size+0x85a20>
     210:	14000000 	strne	r0, [r0], #-0
     214:	0009920b 	andeq	r9, r9, fp, lsl #4
     218:	02180300 	andseq	r0, r8, #0, 6
     21c:	00000057 	andeq	r0, r0, r7, asr r0
     220:	039f0b16 	orrseq	r0, pc, #22528	; 0x5800
     224:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
     228:	00008a02 	andeq	r8, r0, r2, lsl #20
     22c:	9c0b1800 	stcls	8, cr1, [fp], {-0}
     230:	03000009 	movweq	r0, #9
     234:	0057021a 	subseq	r0, r7, sl, lsl r2
     238:	0b1a0000 	bleq	680240 <__Stack_Size+0x67fe40>
     23c:	000003a5 	andeq	r0, r0, r5, lsr #7
     240:	8a021b03 	bhi	86e54 <__Stack_Size+0x86a54>
     244:	1c000000 	stcne	0, cr0, [r0], {-0}
     248:	000deb0b 	andeq	lr, sp, fp, lsl #22
     24c:	021c0300 	andseq	r0, ip, #0, 6
     250:	00000057 	andeq	r0, r0, r7, asr r0
     254:	05bc0b1e 	ldreq	r0, [ip, #2846]!	; 0xb1e
     258:	1d030000 	stcne	0, cr0, [r3, #-0]
     25c:	00008a02 	andeq	r8, r0, r2, lsl #20
     260:	b00b2000 	andlt	r2, fp, r0
     264:	03000009 	movweq	r0, #9
     268:	0057021e 	subseq	r0, r7, lr, lsl r2
     26c:	0a220000 	beq	880274 <__Stack_Size+0x87fe74>
     270:	00544e43 	subseq	r4, r4, r3, asr #28
     274:	8a021f03 	bhi	87e88 <__Stack_Size+0x87a88>
     278:	24000000 	strcs	r0, [r0], #-0
     27c:	0009ba0b 	andeq	fp, r9, fp, lsl #20
     280:	02200300 	eoreq	r0, r0, #0, 6
     284:	00000057 	andeq	r0, r0, r7, asr r0
     288:	53500a26 	cmppl	r0, #155648	; 0x26000
     28c:	21030043 	tstcs	r3, r3, asr #32
     290:	00008a02 	andeq	r8, r0, r2, lsl #20
     294:	f10b2800 			; <UNDEFINED> instruction: 0xf10b2800
     298:	0300000b 	movweq	r0, #11
     29c:	00570222 	subseq	r0, r7, r2, lsr #4
     2a0:	0a2a0000 	beq	a802a8 <__Stack_Size+0xa7fea8>
     2a4:	00525241 	subseq	r5, r2, r1, asr #4
     2a8:	8a022303 	bhi	88ebc <__Stack_Size+0x88abc>
     2ac:	2c000000 	stccs	0, cr0, [r0], {-0}
     2b0:	000bfc0b 	andeq	pc, fp, fp, lsl #24
     2b4:	02240300 	eoreq	r0, r4, #0, 6
     2b8:	00000057 	andeq	r0, r0, r7, asr r0
     2bc:	43520a2e 	cmpmi	r2, #188416	; 0x2e000
     2c0:	25030052 	strcs	r0, [r3, #-82]	; 0x52
     2c4:	00008a02 	andeq	r8, r0, r2, lsl #20
     2c8:	070b3000 	streq	r3, [fp, -r0]
     2cc:	0300000c 	movweq	r0, #12
     2d0:	00570226 	subseq	r0, r7, r6, lsr #4
     2d4:	0b320000 	bleq	c802dc <__Stack_Size+0xc7fedc>
     2d8:	0000038b 	andeq	r0, r0, fp, lsl #7
     2dc:	8a022703 	bhi	89ef0 <__Stack_Size+0x89af0>
     2e0:	34000000 	strcc	r0, [r0], #-0
     2e4:	000c120b 	andeq	r1, ip, fp, lsl #4
     2e8:	02280300 	eoreq	r0, r8, #0, 6
     2ec:	00000057 	andeq	r0, r0, r7, asr r0
     2f0:	03900b36 	orrseq	r0, r0, #55296	; 0xd800
     2f4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     2f8:	00008a02 	andeq	r8, r0, r2, lsl #20
     2fc:	1d0b3800 	stcne	8, cr3, [fp, #-0]
     300:	0300000c 	movweq	r0, #12
     304:	0057022a 	subseq	r0, r7, sl, lsr #4
     308:	0b3a0000 	bleq	e80310 <__Stack_Size+0xe7ff10>
     30c:	00000395 	muleq	r0, r5, r3
     310:	8a022b03 	bhi	8af24 <__Stack_Size+0x8ab24>
     314:	3c000000 	stccc	0, cr0, [r0], {-0}
     318:	000c280b 	andeq	r2, ip, fp, lsl #16
     31c:	022c0300 	eoreq	r0, ip, #0, 6
     320:	00000057 	andeq	r0, r0, r7, asr r0
     324:	039a0b3e 	orrseq	r0, sl, #63488	; 0xf800
     328:	2d030000 	stccs	0, cr0, [r3, #-0]
     32c:	00008a02 	andeq	r8, r0, r2, lsl #20
     330:	330b4000 	movwcc	r4, #45056	; 0xb000
     334:	0300000c 	movweq	r0, #12
     338:	0057022e 	subseq	r0, r7, lr, lsr #4
     33c:	0b420000 	bleq	1080344 <__Stack_Size+0x107ff44>
     340:	0000033c 	andeq	r0, r0, ip, lsr r3
     344:	8a022f03 	bhi	8bf58 <__Stack_Size+0x8bb58>
     348:	44000000 	strmi	r0, [r0], #-0
     34c:	000c3e0b 	andeq	r3, ip, fp, lsl #28
     350:	02300300 	eorseq	r0, r0, #0, 6
     354:	00000057 	andeq	r0, r0, r7, asr r0
     358:	43440a46 	movtmi	r0, #19014	; 0x4a46
     35c:	31030052 	qaddcc	r0, r2, r3
     360:	00008a02 	andeq	r8, r0, r2, lsl #20
     364:	490b4800 	stmdbmi	fp, {fp, lr}
     368:	0300000c 	movweq	r0, #12
     36c:	00570232 	subseq	r0, r7, r2, lsr r2
     370:	0b4a0000 	bleq	1280378 <__Stack_Size+0x127ff78>
     374:	000009eb 	andeq	r0, r0, fp, ror #19
     378:	8a023303 	bhi	8cf8c <__Stack_Size+0x8cb8c>
     37c:	4c000000 	stcmi	0, cr0, [r0], {-0}
     380:	000c540b 	andeq	r5, ip, fp, lsl #8
     384:	02340300 	eorseq	r0, r4, #0, 6
     388:	00000057 	andeq	r0, r0, r7, asr r0
     38c:	d30c004e 	movwle	r0, #49230	; 0xc04e
     390:	03000002 	movweq	r0, #2
     394:	017d0235 	cmneq	sp, r5, lsr r2
     398:	1c090000 	stcne	0, cr0, [r9], {-0}
     39c:	58023803 	stmdapl	r2, {r0, r1, fp, ip, sp}
     3a0:	0a000004 	beq	3b8 <_Minimum_Stack_Size+0x2b8>
     3a4:	03005253 	movweq	r5, #595	; 0x253
     3a8:	008a023a 	addeq	r0, sl, sl, lsr r2
     3ac:	0b000000 	bleq	3b4 <_Minimum_Stack_Size+0x2b4>
     3b0:	00000960 	andeq	r0, r0, r0, ror #18
     3b4:	57023b03 	strpl	r3, [r2, -r3, lsl #22]
     3b8:	02000000 	andeq	r0, r0, #0
     3bc:	0052440a 	subseq	r4, r2, sl, lsl #8
     3c0:	8a023c03 	bhi	8f3d4 <__Stack_Size+0x8efd4>
     3c4:	04000000 	streq	r0, [r0], #-0
     3c8:	00096a0b 	andeq	r6, r9, fp, lsl #20
     3cc:	023d0300 	eorseq	r0, sp, #0, 6
     3d0:	00000057 	andeq	r0, r0, r7, asr r0
     3d4:	52420a06 	subpl	r0, r2, #24576	; 0x6000
     3d8:	3e030052 	mcrcc	0, 0, r0, cr3, cr2, {2}
     3dc:	00008a02 	andeq	r8, r0, r2, lsl #20
     3e0:	740b0800 	strvc	r0, [fp], #-2048	; 0x800
     3e4:	03000009 	movweq	r0, #9
     3e8:	0057023f 	subseq	r0, r7, pc, lsr r2
     3ec:	0a0a0000 	beq	2803f4 <__Stack_Size+0x27fff4>
     3f0:	00315243 	eorseq	r5, r1, r3, asr #4
     3f4:	8a024003 	bhi	90408 <__Stack_Size+0x90008>
     3f8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3fc:	00097e0b 	andeq	r7, r9, fp, lsl #28
     400:	02410300 	subeq	r0, r1, #0, 6
     404:	00000057 	andeq	r0, r0, r7, asr r0
     408:	52430a0e 	subpl	r0, r3, #57344	; 0xe000
     40c:	42030032 	andmi	r0, r3, #50	; 0x32
     410:	00008a02 	andeq	r8, r0, r2, lsl #20
     414:	880b1000 	stmdahi	fp, {ip}
     418:	03000009 	movweq	r0, #9
     41c:	00570243 	subseq	r0, r7, r3, asr #4
     420:	0a120000 	beq	480428 <__Stack_Size+0x480028>
     424:	00335243 	eorseq	r5, r3, r3, asr #4
     428:	8a024403 	bhi	9143c <__Stack_Size+0x9103c>
     42c:	14000000 	strne	r0, [r0], #-0
     430:	0009920b 	andeq	r9, r9, fp, lsl #4
     434:	02450300 	subeq	r0, r5, #0, 6
     438:	00000057 	andeq	r0, r0, r7, asr r0
     43c:	02ae0b16 	adceq	r0, lr, #22528	; 0x5800
     440:	46030000 	strmi	r0, [r3], -r0
     444:	00008a02 	andeq	r8, r0, r2, lsl #20
     448:	9c0b1800 	stcls	8, cr1, [fp], {-0}
     44c:	03000009 	movweq	r0, #9
     450:	00570247 	subseq	r0, r7, r7, asr #4
     454:	001a0000 	andseq	r0, sl, r0
     458:	00053d0c 	andeq	r3, r5, ip, lsl #26
     45c:	02480300 	subeq	r0, r8, #0, 6
     460:	0000039a 	muleq	r0, sl, r3
     464:	23040106 	movwcs	r0, #16646	; 0x4106
     468:	0000047f 	andeq	r0, r0, pc, ror r4
     46c:	0003ab07 	andeq	sl, r3, r7, lsl #22
     470:	91070100 	mrsls	r0, (UNDEF: 23)
     474:	02000002 	andeq	r0, r0, #2
     478:	000b9e07 	andeq	r9, fp, r7, lsl #28
     47c:	04000300 	streq	r0, [r0], #-768	; 0x300
     480:	00000910 	andeq	r0, r0, r0, lsl r9
     484:	04642704 	strbteq	r2, [r4], #-1796	; 0x704
     488:	01060000 	mrseq	r0, (UNDEF: 6)
     48c:	04c42e04 	strbeq	r2, [r4], #3588	; 0xe04
     490:	2d070000 	stccs	0, cr0, [r7, #-0]
     494:	00000009 	andeq	r0, r0, r9
     498:	000dd507 	andeq	sp, sp, r7, lsl #10
     49c:	6e070400 	cfcpysvs	mvf0, mvf7
     4a0:	28000004 	stmdacs	r0, {r2}
     4a4:	00049007 	andeq	r9, r4, r7
     4a8:	0700c800 	streq	ip, [r0, -r0, lsl #16]
     4ac:	000004c4 	andeq	r0, r0, r4, asr #9
     4b0:	00000714 	andeq	r0, r0, r4, lsl r7
     4b4:	07100000 	ldreq	r0, [r0, -r0]
     4b8:	00000814 	andeq	r0, r0, r4, lsl r8
     4bc:	09d2071c 	ldmibeq	r2, {r2, r3, r4, r8, r9, sl}^
     4c0:	00180000 	andseq	r0, r8, r0
     4c4:	000ab204 	andeq	fp, sl, r4, lsl #4
     4c8:	8a360400 	bhi	d814d0 <__Stack_Size+0xd810d0>
     4cc:	0d000004 	stceq	0, cr0, [r0, #-16]
     4d0:	fc3e0404 	ldc2	4, cr0, [lr], #-16
     4d4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     4d8:	000000d6 	ldrdeq	r0, [r0], -r6
     4dc:	00574004 	subseq	r4, r7, r4
     4e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4e4:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4e8:	047f4104 	ldrbteq	r4, [pc], #-260	; 4f0 <__Stack_Size+0xf0>
     4ec:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     4f0:	000000bd 	strheq	r0, [r0], -sp
     4f4:	04c44204 	strbeq	r4, [r4], #516	; 0x204
     4f8:	00030000 	andeq	r0, r3, r0
     4fc:	000b6404 	andeq	r6, fp, r4, lsl #8
     500:	cf430400 	svcgt	0x00430400
     504:	0d000004 	stceq	0, cr0, [r0, #-16]
     508:	401a0504 	andsmi	r0, sl, r4, lsl #10
     50c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     510:	000007c2 	andeq	r0, r0, r2, asr #15
     514:	00691c05 	rsbeq	r1, r9, r5, lsl #24
     518:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     51c:	00000da4 	andeq	r0, r0, r4, lsr #27
     520:	00691d05 	rsbeq	r1, r9, r5, lsl #26
     524:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     528:	00000c92 	muleq	r0, r2, ip
     52c:	00691e05 	rsbeq	r1, r9, r5, lsl #28
     530:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     534:	00000508 	andeq	r0, r0, r8, lsl #10
     538:	00da1f05 	sbcseq	r1, sl, r5, lsl #30
     53c:	00030000 	andeq	r0, r3, r0
     540:	00035a04 	andeq	r5, r3, r4, lsl #20
     544:	07200500 	streq	r0, [r0, -r0, lsl #10]!
     548:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     54c:	901b060a 	andsls	r0, fp, sl, lsl #12
     550:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     554:	00000068 	andeq	r0, r0, r8, rrx
     558:	00571d06 	subseq	r1, r7, r6, lsl #26
     55c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     560:	00000645 	andeq	r0, r0, r5, asr #12
     564:	00571e06 	subseq	r1, r7, r6, lsl #28
     568:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     56c:	000007d2 	ldrdeq	r0, [r0], -r2
     570:	00571f06 	subseq	r1, r7, r6, lsl #30
     574:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     578:	00000308 	andeq	r0, r0, r8, lsl #6
     57c:	00572006 	subseq	r2, r7, r6
     580:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     584:	0000056b 	andeq	r0, r0, fp, ror #10
     588:	00692106 	rsbeq	r2, r9, r6, lsl #2
     58c:	00080000 	andeq	r0, r8, r0
     590:	000ce204 	andeq	lr, ip, r4, lsl #4
     594:	4b220600 	blmi	881d9c <__Stack_Size+0x88199c>
     598:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     59c:	04250610 	strteq	r0, [r5], #-1552	; 0x610
     5a0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     5a4:	00000922 	andeq	r0, r0, r2, lsr #18
     5a8:	00572706 	subseq	r2, r7, r6, lsl #14
     5ac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     5b0:	0000031a 	andeq	r0, r0, sl, lsl r3
     5b4:	00572806 	subseq	r2, r7, r6, lsl #16
     5b8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     5bc:	00000ac8 	andeq	r0, r0, r8, asr #21
     5c0:	00572906 	subseq	r2, r7, r6, lsl #18
     5c4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     5c8:	000002ef 	andeq	r0, r0, pc, ror #5
     5cc:	00572a06 	subseq	r2, r7, r6, lsl #20
     5d0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     5d4:	000000c7 	andeq	r0, r0, r7, asr #1
     5d8:	00572b06 	subseq	r2, r7, r6, lsl #22
     5dc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     5e0:	00000588 	andeq	r0, r0, r8, lsl #11
     5e4:	00572c06 	subseq	r2, r7, r6, lsl #24
     5e8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     5ec:	00000212 	andeq	r0, r0, r2, lsl r2
     5f0:	00572d06 	subseq	r2, r7, r6, lsl #26
     5f4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     5f8:	00000740 	andeq	r0, r0, r0, asr #14
     5fc:	00572e06 	subseq	r2, r7, r6, lsl #28
     600:	000e0000 	andeq	r0, lr, r0
     604:	00009404 	andeq	r9, r0, r4, lsl #8
     608:	9b2f0600 	blls	bc1e10 <__Stack_Size+0xbc1a10>
     60c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     610:	601a0710 	andsvs	r0, sl, r0, lsl r7
     614:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     618:	000002f9 	strdeq	r0, [r0], -r9
     61c:	00451c07 	subeq	r1, r5, r7, lsl #24
     620:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     624:	00000199 	muleq	r0, r9, r1
     628:	00571d07 	subseq	r1, r7, r7, lsl #26
     62c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     630:	000001e9 	andeq	r0, r0, r9, ror #3
     634:	00571e07 	subseq	r1, r7, r7, lsl #28
     638:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     63c:	00000cad 	andeq	r0, r0, sp, lsr #25
     640:	00571f07 	subseq	r1, r7, r7, lsl #30
     644:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     648:	00000655 	andeq	r0, r0, r5, asr r6
     64c:	00572007 	subseq	r2, r7, r7
     650:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     654:	000006ae 	andeq	r0, r0, lr, lsr #13
     658:	00572107 	subseq	r2, r7, r7, lsl #2
     65c:	000c0000 	andeq	r0, ip, r0
     660:	000c8004 	andeq	r8, ip, r4
     664:	0f220700 	svceq	0x00220700
     668:	0f000006 	svceq	0x00000006
     66c:	0000061f 	andeq	r0, r0, pc, lsl r6
     670:	01032601 	tsteq	r3, r1, lsl #12
     674:	00000691 	muleq	r0, r1, r6
     678:	000b2b10 	andeq	r2, fp, r0, lsl fp
     67c:	03260100 			; <UNDEFINED> instruction: 0x03260100
     680:	00000691 	muleq	r0, r1, r6
     684:	00017610 	andeq	r7, r1, r0, lsl r6
     688:	03260100 			; <UNDEFINED> instruction: 0x03260100
     68c:	00000698 	muleq	r0, r8, r6
     690:	05041100 	streq	r1, [r4, #-256]	; 0x100
     694:	00746e69 	rsbseq	r6, r4, r9, ror #28
     698:	00730412 	rsbseq	r0, r3, r2, lsl r4
     69c:	0a0f0000 	beq	3c06a4 <__Stack_Size+0x3c02a4>
     6a0:	01000007 	tsteq	r0, r7
     6a4:	d001031c 	andle	r0, r1, ip, lsl r3
     6a8:	10000006 	andne	r0, r0, r6
     6ac:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     6b0:	d0031c01 	andle	r1, r3, r1, lsl #24
     6b4:	10000006 	andne	r0, r0, r6
     6b8:	00000234 	andeq	r0, r0, r4, lsr r2
     6bc:	91031c01 	tstls	r3, r1, lsl #24
     6c0:	10000006 	andne	r0, r0, r6
     6c4:	0000023f 	andeq	r0, r0, pc, lsr r2
     6c8:	91031c01 	tstls	r3, r1, lsl #24
     6cc:	00000006 	andeq	r0, r0, r6
     6d0:	06910412 			; <UNDEFINED> instruction: 0x06910412
     6d4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     6d8:	01000007 	tsteq	r0, r7
     6dc:	31340348 	teqcc	r4, r8, asr #6
     6e0:	00840800 	addeq	r0, r4, r0, lsl #16
     6e4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6e8:	0000082e 	andeq	r0, r0, lr, lsr #16
     6ec:	000e1e14 	andeq	r1, lr, r4, lsl lr
     6f0:	034a0100 	movteq	r0, #41216	; 0xa100
     6f4:	000000fa 	strdeq	r0, [r0], -sl
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	00313a15 	eorseq	r3, r1, r5, lsl sl
     700:	00301608 	eorseq	r1, r0, r8, lsl #12
     704:	31421600 	cmpcc	r2, r0, lsl #12
     708:	301d0800 	andscc	r0, sp, r0, lsl #16
     70c:	071a0000 	ldreq	r0, [sl, -r0]
     710:	01170000 	tsteq	r7, r0
     714:	3c400350 	mcrrcc	3, 5, r0, r0, cr0
     718:	46150024 	ldrmi	r0, [r5], -r4, lsr #32
     71c:	2e080031 	mcrcs	0, 0, r0, cr8, cr1, {1}
     720:	16000030 			; <UNDEFINED> instruction: 0x16000030
     724:	08003156 	stmdaeq	r0, {r1, r2, r4, r6, r8, ip, sp}
     728:	00003039 	andeq	r3, r0, r9, lsr r0
     72c:	0000073d 	andeq	r0, r0, sp, lsr r7
     730:	01510117 	cmpeq	r1, r7, lsl r1
     734:	50011731 	andpl	r1, r1, r1, lsr r7
     738:	40080a03 	andmi	r0, r8, r3, lsl #20
     73c:	315e1600 	cmpcc	lr, r0, lsl #12
     740:	30500800 	subscc	r0, r0, r0, lsl #16
     744:	07590000 	ldrbeq	r0, [r9, -r0]
     748:	01170000 	tsteq	r7, r0
     74c:	17310151 			; <UNDEFINED> instruction: 0x17310151
     750:	0c055001 	stceq	0, cr5, [r5], {1}
     754:	00040001 	andeq	r0, r4, r1
     758:	31681800 	cmncc	r8, r0, lsl #16
     75c:	30670800 	rsbcc	r0, r7, r0, lsl #16
     760:	076c0000 	strbeq	r0, [ip, -r0]!
     764:	01170000 	tsteq	r7, r0
     768:	00310150 	eorseq	r0, r1, r0, asr r1
     76c:	00316e16 	eorseq	r6, r1, r6, lsl lr
     770:	00307808 	eorseq	r7, r0, r8, lsl #16
     774:	00077f00 	andeq	r7, r7, r0, lsl #30
     778:	50011700 	andpl	r1, r1, r0, lsl #14
     77c:	16004001 	strne	r4, [r0], -r1
     780:	08003174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, sp}
     784:	00003089 	andeq	r3, r0, r9, lsl #1
     788:	00000792 	muleq	r0, r2, r7
     78c:	01500117 	cmpeq	r0, r7, lsl r1
     790:	7a160032 	bvc	580860 <__Stack_Size+0x580460>
     794:	9a080031 	bls	200860 <__Stack_Size+0x200460>
     798:	a5000030 	strge	r0, [r0, #-48]	; 0x30
     79c:	17000007 	strne	r0, [r0, -r7]
     7a0:	30015001 	andcc	r5, r1, r1
     7a4:	31801600 	orrcc	r1, r0, r0, lsl #12
     7a8:	30ac0800 	adccc	r0, ip, r0, lsl #16
     7ac:	07b80000 	ldreq	r0, [r8, r0]!
     7b0:	01170000 	tsteq	r7, r0
     7b4:	00300150 	eorseq	r0, r0, r0, asr r1
     7b8:	00318816 	eorseq	r8, r1, r6, lsl r8
     7bc:	0030be08 	eorseq	fp, r0, r8, lsl #28
     7c0:	0007cd00 	andeq	ip, r7, r0, lsl #26
     7c4:	50011700 	andpl	r1, r1, r0, lsl #14
     7c8:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
     7cc:	31941600 	orrscc	r1, r4, r0, lsl #12
     7d0:	30d00800 	sbcscc	r0, r0, r0, lsl #16
     7d4:	07e90000 	strbeq	r0, [r9, r0]!
     7d8:	01170000 	tsteq	r7, r0
     7dc:	404c0351 	submi	r0, ip, r1, asr r3
     7e0:	50011724 	andpl	r1, r1, r4, lsr #14
     7e4:	243c4003 	ldrtcs	r4, [ip], #-3
     7e8:	319a1600 	orrscc	r1, sl, r0, lsl #12
     7ec:	30e70800 	rsccc	r0, r7, r0, lsl #16
     7f0:	07fd0000 	ldrbeq	r0, [sp, r0]!
     7f4:	01170000 	tsteq	r7, r0
     7f8:	00740250 	rsbseq	r0, r4, r0, asr r2
     7fc:	31a01600 	lslcc	r1, r0, #12
     800:	30f90800 	rscscc	r0, r9, r0, lsl #16
     804:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
     808:	01170000 	tsteq	r7, r0
     80c:	39080250 	stmdbcc	r8, {r4, r6, r9}
     810:	31aa1600 			; <UNDEFINED> instruction: 0x31aa1600
     814:	310f0800 	tstcc	pc, r0, lsl #16
     818:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
     81c:	01170000 	tsteq	r7, r0
     820:	00320150 	eorseq	r0, r2, r0, asr r1
     824:	0031ae15 	eorseq	sl, r1, r5, lsl lr
     828:	00312108 	eorseq	r2, r1, r8, lsl #2
     82c:	de130000 	cdple	0, 1, cr0, cr3, cr0, {0}
     830:	0100000b 	tsteq	r0, fp
     834:	31b8038b 			; <UNDEFINED> instruction: 0x31b8038b
     838:	004e0800 	subeq	r0, lr, r0, lsl #16
     83c:	9c010000 	stcls	0, cr0, [r1], {-0}
     840:	000008a9 	andeq	r0, r0, r9, lsr #17
     844:	0005de19 	andeq	sp, r5, r9, lsl lr
     848:	038d0100 	orreq	r0, sp, #0, 2
     84c:	00000540 	andeq	r0, r0, r0, asr #10
     850:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
     854:	080031c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, sp}
     858:	0000312d 	andeq	r3, r0, sp, lsr #2
     85c:	0000086f 	andeq	r0, r0, pc, ror #16
     860:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
     864:	1730000a 	ldrne	r0, [r0, -sl]!
     868:	40035001 	andmi	r5, r3, r1
     86c:	16002447 	strne	r2, [r0], -r7, asr #8
     870:	080031ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, ip, sp}
     874:	00003144 	andeq	r3, r0, r4, asr #2
     878:	00000884 	andeq	r0, r0, r4, lsl #17
     87c:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
     880:	0005000a 	andeq	r0, r5, sl
     884:	0031ea16 	eorseq	lr, r1, r6, lsl sl
     888:	00315508 	eorseq	r5, r1, r8, lsl #10
     88c:	00089800 	andeq	r9, r8, r0, lsl #16
     890:	50011700 	andpl	r1, r1, r0, lsl #14
     894:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     898:	0032021a 	eorseq	r0, r2, sl, lsl r2
     89c:	00315508 	eorseq	r5, r1, r8, lsl #10
     8a0:	50011700 	andpl	r1, r1, r0, lsl #14
     8a4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     8a8:	0c5f1300 	mrrceq	3, 0, r1, pc, cr0	; <UNPREDICTABLE>
     8ac:	b0010000 	andlt	r0, r1, r0
     8b0:	00320603 	eorseq	r0, r2, r3, lsl #12
     8b4:	00008608 	andeq	r8, r0, r8, lsl #12
     8b8:	a29c0100 	addsge	r0, ip, #0, 2
     8bc:	19000009 	stmdbne	r0, {r0, r3}
     8c0:	00000772 	andeq	r0, r0, r2, ror r7
     8c4:	fc03b201 	stc2	2, cr11, [r3], {1}
     8c8:	02000004 	andeq	r0, r0, #4
     8cc:	10166491 	mulsne	r6, r1, r4
     8d0:	6d080032 	stcvs	0, cr0, [r8, #-200]	; 0xffffff38
     8d4:	e2000031 	and	r0, r0, #49	; 0x31
     8d8:	17000008 	strne	r0, [r0, -r8]
     8dc:	91025001 	tstls	r2, r1
     8e0:	2c160064 	ldccs	0, cr0, [r6], {100}	; 0x64
     8e4:	84080032 	strhi	r0, [r8], #-50	; 0x32
     8e8:	fc000031 	stc2	0, cr0, [r0], {49}	; 0x31
     8ec:	17000008 	strne	r0, [r0, -r8]
     8f0:	91025101 	tstls	r2, r1, lsl #2
     8f4:	50011764 	andpl	r1, r1, r4, ror #14
     8f8:	00007402 	andeq	r7, r0, r2, lsl #8
     8fc:	00324216 	eorseq	r4, r2, r6, lsl r2
     900:	00318408 	eorseq	r8, r1, r8, lsl #8
     904:	00091c00 	andeq	r1, r9, r0, lsl #24
     908:	51011700 	tstpl	r1, r0, lsl #14
     90c:	76009108 	strvc	r9, [r0], -r8, lsl #2
     910:	20082200 	andcs	r2, r8, r0, lsl #4
     914:	5001171c 	andpl	r1, r1, ip, lsl r7
     918:	00007402 	andeq	r7, r0, r2, lsl #8
     91c:	00325e16 	eorseq	r5, r2, r6, lsl lr
     920:	00318408 	eorseq	r8, r1, r8, lsl #8
     924:	00093c00 	andeq	r3, r9, r0, lsl #24
     928:	51011700 	tstpl	r1, r0, lsl #14
     92c:	76009108 	strvc	r9, [r0], -r8, lsl #2
     930:	20082200 	andcs	r2, r8, r0, lsl #4
     934:	5001171c 	andpl	r1, r1, ip, lsl r7
     938:	00007402 	andeq	r7, r0, r2, lsl #8
     93c:	00326616 	eorseq	r6, r2, r6, lsl r6
     940:	0031a008 	eorseq	sl, r1, r8
     944:	00095500 	andeq	r5, r9, r0, lsl #10
     948:	51011700 	tstpl	r1, r0, lsl #14
     94c:	01173101 	tsteq	r7, r1, lsl #2
     950:	00760250 	rsbseq	r0, r6, r0, asr r2
     954:	326e1600 	rsbcc	r1, lr, #0, 12
     958:	31a00800 	lslcc	r0, r0, #16
     95c:	09710000 	ldmdbeq	r1!, {}^	; <UNPREDICTABLE>
     960:	01170000 	tsteq	r7, r0
     964:	17310151 			; <UNDEFINED> instruction: 0x17310151
     968:	0c055001 	stceq	0, cr5, [r5], {1}
     96c:	00300400 	eorseq	r0, r0, r0, lsl #8
     970:	32761600 	rsbscc	r1, r6, #0, 12
     974:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
     978:	098b0000 	stmibeq	fp, {}	; <UNPREDICTABLE>
     97c:	01170000 	tsteq	r7, r0
     980:	00750251 	rsbseq	r0, r5, r1, asr r2
     984:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     988:	1a000074 	bne	b60 <__Stack_Size+0x760>
     98c:	0800327e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip, sp}
     990:	000031cc 	andeq	r3, r0, ip, asr #3
     994:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     998:	01172008 	tsteq	r7, r8
     99c:	00740250 	rsbseq	r0, r4, r0, asr r2
     9a0:	20130000 	andscs	r0, r3, r0
     9a4:	0100000a 	tsteq	r0, sl
     9a8:	328c03ff 	addcc	r0, ip, #-67108861	; 0xfc000003
     9ac:	000c0800 	andeq	r0, ip, r0, lsl #16
     9b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b4:	000009d1 	ldrdeq	r0, [r0], -r1
     9b8:	0032941b 	eorseq	r9, r2, fp, lsl r4
     9bc:	0031e208 	eorseq	lr, r1, r8, lsl #4
     9c0:	51011700 	tstpl	r1, r0, lsl #14
     9c4:	01173001 	tsteq	r7, r1
     9c8:	000c0550 	andeq	r0, ip, r0, asr r5
     9cc:	00400138 	subeq	r0, r0, r8, lsr r1
     9d0:	00851c00 	addeq	r1, r5, r0, lsl #24
     9d4:	04010000 	streq	r0, [r1], #-0
     9d8:	00329804 	eorseq	r9, r2, r4, lsl #16
     9dc:	00001008 	andeq	r1, r0, r8
     9e0:	1d9c0100 	ldfnes	f0, [ip]
     9e4:	00000610 	andeq	r0, r0, r0, lsl r6
     9e8:	69040901 	stmdbvs	r4, {r0, r8, fp}
     9ec:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     9f0:	14080032 	strne	r0, [r8], #-50	; 0x32
     9f4:	01000000 	mrseq	r0, (UNDEF: 0)
     9f8:	04b8139c 	ldrteq	r1, [r8], #924	; 0x39c
     9fc:	11010000 	mrsne	r0, (UNDEF: 1)
     a00:	0032bc04 	eorseq	fp, r2, r4, lsl #24
     a04:	00004408 	andeq	r4, r0, r8, lsl #8
     a08:	c89c0100 	ldmgt	ip, {r8}
     a0c:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     a10:	0000016d 	andeq	r0, r0, sp, ror #2
     a14:	69041101 	stmdbvs	r4, {r0, r8, ip}
     a18:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     a1c:	16000000 	strne	r0, [r0], -r0
     a20:	080032c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp}
     a24:	000031b6 			; <UNDEFINED> instruction: 0x000031b6
     a28:	00000a3c 	andeq	r0, r0, ip, lsr sl
     a2c:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     a30:	01172008 	tsteq	r7, r8
     a34:	000c0550 	andeq	r0, ip, r0, asr r5
     a38:	0040010c 	subeq	r0, r0, ip, lsl #2
     a3c:	0032d016 	eorseq	sp, r2, r6, lsl r0
     a40:	0031cc08 	eorseq	ip, r1, r8, lsl #24
     a44:	000a5800 	andeq	r5, sl, r0, lsl #16
     a48:	51011700 	tstpl	r1, r0, lsl #14
     a4c:	01174001 	tsteq	r7, r1
     a50:	000c0550 	andeq	r0, ip, r0, asr r5
     a54:	0040010c 	subeq	r0, r0, ip, lsl #2
     a58:	0032d816 	eorseq	sp, r2, r6, lsl r8
     a5c:	0031fe08 	eorseq	pc, r1, r8, lsl #28
     a60:	000a7500 	andeq	r7, sl, r0, lsl #10
     a64:	51011700 	tstpl	r1, r0, lsl #14
     a68:	17007402 	strne	r7, [r0, -r2, lsl #8]
     a6c:	0c055001 	stceq	0, cr5, [r5], {1}
     a70:	40013800 	andmi	r3, r1, r0, lsl #16
     a74:	32e01600 	rsccc	r1, r0, #0, 12
     a78:	32140800 	andscc	r0, r4, #0, 16
     a7c:	0a920000 	beq	fe480a84 <SCS_BASE+0x1e472a84>
     a80:	01170000 	tsteq	r7, r0
     a84:	40080251 	andmi	r0, r8, r1, asr r2
     a88:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     a8c:	0138000c 	teqeq	r8, ip
     a90:	ec160040 	ldc	0, cr0, [r6], {64}	; 0x40
     a94:	b6080032 			; <UNDEFINED> instruction: 0xb6080032
     a98:	ae000031 	mcrge	0, 0, r0, cr0, cr1, {1}
     a9c:	1700000a 	strne	r0, [r0, -sl]
     aa0:	40015101 	andmi	r5, r1, r1, lsl #2
     aa4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     aa8:	010c000c 	tsteq	ip, ip
     aac:	f81b0040 			; <UNDEFINED> instruction: 0xf81b0040
     ab0:	cc080032 	stcgt	0, cr0, [r8], {50}	; 0x32
     ab4:	17000031 	smladxne	r0, r1, r0, r0
     ab8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     abc:	50011720 	andpl	r1, r1, r0, lsr #14
     ac0:	0c000c05 	stceq	12, cr0, [r0], {5}
     ac4:	00004001 	andeq	r4, r0, r1
     ac8:	000a141f 	andeq	r1, sl, pc, lsl r4
     acc:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
     ad0:	00000069 	andeq	r0, r0, r9, rrx
     ad4:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
     ad8:	00000020 	andeq	r0, r0, r0, lsr #32
     adc:	0af19c01 	beq	ffc67ae8 <SCS_BASE+0x1fc59ae8>
     ae0:	bc190000 	ldclt	0, cr0, [r9], {-0}
     ae4:	01000007 	tsteq	r0, r7
     ae8:	0069041f 	rsbeq	r0, r9, pc, lsl r4
     aec:	50010000 	andpl	r0, r1, r0
     af0:	03bc1300 			; <UNDEFINED> instruction: 0x03bc1300
     af4:	83010000 	movwhi	r0, #4096	; 0x1000
     af8:	00332004 	eorseq	r2, r3, r4
     afc:	00001c08 	andeq	r1, r0, r8, lsl #24
     b00:	489c0100 	ldmmi	ip, {r8}
     b04:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
     b08:	0000016d 	andeq	r0, r0, sp, ror #2
     b0c:	69048301 	stmdbvs	r4, {r0, r8, r9, pc}
     b10:	3f000000 	svccc	0x00000000
     b14:	16000000 	strne	r0, [r0], -r0
     b18:	0800332a 	stmdaeq	r0, {r1, r3, r5, r8, r9, ip, sp}
     b1c:	000031fe 	strdeq	r3, [r0], -lr
     b20:	00000b2e 	andeq	r0, r0, lr, lsr #22
     b24:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     b28:	0048000c 	subeq	r0, r8, ip
     b2c:	321a0040 	andscc	r0, sl, #64	; 0x40
     b30:	14080033 	strne	r0, [r8], #-51	; 0x33
     b34:	17000032 	smladxne	r0, r2, r0, r0
     b38:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     b3c:	50011740 	andpl	r1, r1, r0, asr #14
     b40:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
     b44:	00004000 	andeq	r4, r0, r0
     b48:	0002b313 	andeq	fp, r2, r3, lsl r3
     b4c:	04690100 	strbteq	r0, [r9], #-256	; 0x100
     b50:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
     b54:	00000012 	andeq	r0, r0, r2, lsl r0
     b58:	0b789c01 	bleq	1e27b64 <__Stack_Size+0x1e27764>
     b5c:	411e0000 	tstmi	lr, r0
     b60:	01000003 	tsteq	r0, r3
     b64:	0b780469 	bleq	1e01d10 <__Stack_Size+0x1e01910>
     b68:	00600000 	rsbeq	r0, r0, r0
     b6c:	4a150000 	bmi	540b74 <__Stack_Size+0x540774>
     b70:	f1080033 			; <UNDEFINED> instruction: 0xf1080033
     b74:	0000000a 	andeq	r0, r0, sl
     b78:	00690412 	rsbeq	r0, r9, r2, lsl r4
     b7c:	0c200000 	stceq	0, cr0, [r0], #-0
     b80:	01000004 	tsteq	r0, r4
     b84:	00334e9b 	mlaseq	r3, fp, lr, r4
     b88:	00002e08 	andeq	r2, r0, r8, lsl #28
     b8c:	0e9c0100 	fmleqe	f0, f4, f0
     b90:	2100000c 	tstcs	r0, ip
     b94:	01006469 	tsteq	r0, r9, ror #8
     b98:	0000739b 	muleq	r0, fp, r3
     b9c:	0000a300 	andeq	sl, r0, r0, lsl #6
     ba0:	07b52200 	ldreq	r2, [r5, r0, lsl #4]!
     ba4:	9d010000 	stcls	0, cr0, [r1, #-0]
     ba8:	00000691 	muleq	r0, r1, r6
     bac:	00335a16 	eorseq	r5, r3, r6, lsl sl
     bb0:	00322e08 	eorseq	r2, r2, r8, lsl #28
     bb4:	000bca00 	andeq	ip, fp, r0, lsl #20
     bb8:	52011700 	andpl	r1, r1, #0, 14
     bbc:	01173001 	tsteq	r7, r1
     bc0:	17360151 			; <UNDEFINED> instruction: 0x17360151
     bc4:	74025001 	strvc	r5, [r2], #-1
     bc8:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
     bcc:	49080033 	stmdbmi	r8, {r0, r1, r4, r5}
     bd0:	16000032 			; <UNDEFINED> instruction: 0x16000032
     bd4:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     bd8:	0000322e 	andeq	r3, r0, lr, lsr #4
     bdc:	00000bf1 	strdeq	r0, [r0], -r1
     be0:	01520117 	cmpeq	r2, r7, lsl r1
     be4:	51011730 	tstpl	r1, r0, lsr r7
     be8:	01173801 	tsteq	r7, r1, lsl #16
     bec:	00740250 	rsbseq	r0, r4, r0, asr r2
     bf0:	336c1500 	cmncc	ip, #0, 10
     bf4:	32490800 	subcc	r0, r9, #0, 16
     bf8:	761b0000 	ldrvc	r0, [fp], -r0
     bfc:	48080033 	stmdami	r8, {r0, r1, r4, r5}
     c00:	1700000b 	strne	r0, [r0, -fp]
     c04:	03055001 	movweq	r5, #20481	; 0x5001
     c08:	08006130 	stmdaeq	r0, {r4, r5, r8, sp, lr}
     c0c:	93200000 	nopls	{0}	; <UNPREDICTABLE>
     c10:	0100000b 	tsteq	r0, fp
     c14:	00337ca6 	eorseq	r7, r3, r6, lsr #25
     c18:	00003008 	andeq	r3, r0, r8
     c1c:	a09c0100 	addsge	r0, ip, r0, lsl #2
     c20:	2100000c 	tstcs	r0, ip
     c24:	01006469 	tsteq	r0, r9, ror #8
     c28:	000073a6 	andeq	r7, r0, r6, lsr #7
     c2c:	0000c400 	andeq	ip, r0, r0, lsl #8
     c30:	07b52200 	ldreq	r2, [r5, r0, lsl #4]!
     c34:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
     c38:	00000691 	muleq	r0, r1, r6
     c3c:	00338816 	eorseq	r8, r3, r6, lsl r8
     c40:	00322e08 	eorseq	r2, r2, r8, lsl #28
     c44:	000c5a00 	andeq	r5, ip, r0, lsl #20
     c48:	52011700 	andpl	r1, r1, #0, 14
     c4c:	01173001 	tsteq	r7, r1
     c50:	17360151 			; <UNDEFINED> instruction: 0x17360151
     c54:	74025001 	strvc	r5, [r2], #-1
     c58:	8c150000 	ldchi	0, cr0, [r5], {-0}
     c5c:	49080033 	stmdbmi	r8, {r0, r1, r4, r5}
     c60:	16000032 			; <UNDEFINED> instruction: 0x16000032
     c64:	08003398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, sp}
     c68:	0000322e 	andeq	r3, r0, lr, lsr #4
     c6c:	00000c83 	andeq	r0, r0, r3, lsl #25
     c70:	03520117 	cmpeq	r2, #-1073741819	; 0xc0000005
     c74:	1703ff0a 	strne	pc, [r3, -sl, lsl #30]
     c78:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
     c7c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     c80:	15000074 	strne	r0, [r0, #-116]	; 0x74
     c84:	0800339c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, sp}
     c88:	00003249 	andeq	r3, r0, r9, asr #4
     c8c:	0033a61b 	eorseq	sl, r3, fp, lsl r6
     c90:	000b4808 	andeq	r4, fp, r8, lsl #16
     c94:	50011700 	andpl	r1, r1, r0, lsl #14
     c98:	61510305 	cmpvs	r1, r5, lsl #6
     c9c:	00000800 	andeq	r0, r0, r0, lsl #16
     ca0:	00045e13 	andeq	r5, r4, r3, lsl lr
     ca4:	042e0100 	strteq	r0, [lr], #-256	; 0x100
     ca8:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     cac:	0000004c 	andeq	r0, r0, ip, asr #32
     cb0:	0cd09c01 	ldcleq	12, cr9, [r0], {1}
     cb4:	431e0000 	tstmi	lr, #0
     cb8:	01000014 	tsteq	r0, r4, lsl r0
     cbc:	0691042e 	ldreq	r0, [r1], lr, lsr #8
     cc0:	00e50000 	rsceq	r0, r5, r0
     cc4:	da230000 	ble	8c0ccc <__Stack_Size+0x8c08cc>
     cc8:	48080033 	stmdami	r8, {r0, r1, r4, r5}
     ccc:	0000000b 	andeq	r0, r0, fp
     cd0:	000e0f13 	andeq	r0, lr, r3, lsl pc
     cd4:	04510100 	ldrbeq	r0, [r1], #-256	; 0x100
     cd8:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     cdc:	00000094 	muleq	r0, r4, r0
     ce0:	0e0b9c01 	cdpeq	12, 0, cr9, cr11, cr1, {0}
     ce4:	00160000 	andseq	r0, r6, r0
     ce8:	54080034 	strpl	r0, [r8], #-52	; 0x34
     cec:	f9000032 			; <UNDEFINED> instruction: 0xf9000032
     cf0:	1700000c 	strne	r0, [r0, -ip]
     cf4:	31015001 	tstcc	r1, r1
     cf8:	340a1600 	strcc	r1, [sl], #-1536	; 0x600
     cfc:	0b480800 	bleq	1202d04 <__Stack_Size+0x1202904>
     d00:	0d100000 	ldceq	0, cr0, [r0, #-0]
     d04:	01170000 	tsteq	r7, r0
     d08:	a4030550 	strge	r0, [r3], #-1360	; 0x550
     d0c:	00080062 	andeq	r0, r8, r2, rrx
     d10:	00341016 	eorseq	r1, r4, r6, lsl r0
     d14:	00325408 	eorseq	r5, r2, r8, lsl #8
     d18:	000d2300 	andeq	r2, sp, r0, lsl #6
     d1c:	50011700 	andpl	r1, r1, r0, lsl #14
     d20:	16003201 	strne	r3, [r0], -r1, lsl #4
     d24:	0800341a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp}
     d28:	00000b48 	andeq	r0, r0, r8, asr #22
     d2c:	00000d3a 	andeq	r0, r0, sl, lsr sp
     d30:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     d34:	0062ba03 	rsbeq	fp, r2, r3, lsl #20
     d38:	20160008 	andscs	r0, r6, r8
     d3c:	54080034 	strpl	r0, [r8], #-52	; 0x34
     d40:	4d000032 	stcmi	0, cr0, [r0, #-200]	; 0xffffff38
     d44:	1700000d 	strne	r0, [r0, -sp]
     d48:	34015001 	strcc	r5, [r1], #-1
     d4c:	342a1600 	strtcc	r1, [sl], #-1536	; 0x600
     d50:	0b480800 	bleq	1202d58 <__Stack_Size+0x1202958>
     d54:	0d640000 	stcleq	0, cr0, [r4, #-0]
     d58:	01170000 	tsteq	r7, r0
     d5c:	ce030550 	cfrshl32gt	mvfx3, mvfx0, r0
     d60:	00080062 	andeq	r0, r8, r2, rrx
     d64:	00343016 	eorseq	r3, r4, r6, lsl r0
     d68:	00325408 	eorseq	r5, r2, r8, lsl #8
     d6c:	000d7700 	andeq	r7, sp, r0, lsl #14
     d70:	50011700 	andpl	r1, r1, r0, lsl #14
     d74:	16003801 	strne	r3, [r0], -r1, lsl #16
     d78:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
     d7c:	00000b48 	andeq	r0, r0, r8, asr #22
     d80:	00000d8e 	andeq	r0, r0, lr, lsl #27
     d84:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     d88:	0062df03 	rsbeq	sp, r2, r3, lsl #30
     d8c:	40160008 	andsmi	r0, r6, r8
     d90:	54080034 	strpl	r0, [r8], #-52	; 0x34
     d94:	a1000032 	tstge	r0, r2, lsr r0
     d98:	1700000d 	strne	r0, [r0, -sp]
     d9c:	40015001 	andmi	r5, r1, r1
     da0:	344a1600 	strbcc	r1, [sl], #-1536	; 0x600
     da4:	0b480800 	bleq	1202dac <__Stack_Size+0x12029ac>
     da8:	0db80000 	ldceq	0, cr0, [r8]
     dac:	01170000 	tsteq	r7, r0
     db0:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
     db4:	00080062 	andeq	r0, r8, r2, rrx
     db8:	00345016 	eorseq	r5, r4, r6, lsl r0
     dbc:	00325408 	eorseq	r5, r2, r8, lsl #8
     dc0:	000dcc00 	andeq	ip, sp, r0, lsl #24
     dc4:	50011700 	andpl	r1, r1, r0, lsl #14
     dc8:	00200802 	eoreq	r0, r0, r2, lsl #16
     dcc:	00345a16 	eorseq	r5, r4, r6, lsl sl
     dd0:	000b4808 	andeq	r4, fp, r8, lsl #16
     dd4:	000de300 	andeq	lr, sp, r0, lsl #6
     dd8:	50011700 	andpl	r1, r1, r0, lsl #14
     ddc:	63050305 	movwvs	r0, #21253	; 0x5305
     de0:	16000800 	strne	r0, [r0], -r0, lsl #16
     de4:	08003460 	stmdaeq	r0, {r5, r6, sl, ip, sp}
     de8:	00003254 	andeq	r3, r0, r4, asr r2
     dec:	00000df7 	strdeq	r0, [r0], -r7
     df0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     df4:	1b004008 	blne	10e1c <__Stack_Size+0x10a1c>
     df8:	0800346e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp}
     dfc:	00000b48 	andeq	r0, r0, r8, asr #22
     e00:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     e04:	00631603 	rsbeq	r1, r3, r3, lsl #12
     e08:	13000008 	movwne	r0, #8
     e0c:	00000858 	andeq	r0, r0, r8, asr r8
     e10:	8c047501 	cfstr32hi	mvfx7, [r4], {1}
     e14:	2e080034 	mcrcs	0, 0, r0, cr8, cr4, {1}
     e18:	01000000 	mrseq	r0, (UNDEF: 0)
     e1c:	000e549c 	muleq	lr, ip, r4
     e20:	036b1e00 	cmneq	fp, #0, 28
     e24:	75010000 	strvc	r0, [r1, #-0]
     e28:	00006904 	andeq	r6, r0, r4, lsl #18
     e2c:	00011300 	andeq	r1, r1, r0, lsl #6
     e30:	0b831400 	bleq	fe0c5e38 <SCS_BASE+0x1e0b7e38>
     e34:	77010000 	strvc	r0, [r1, -r0]
     e38:	00006904 	andeq	r6, r0, r4, lsl #18
     e3c:	00013400 	andeq	r3, r1, r0, lsl #8
     e40:	34a61500 	strtcc	r1, [r6], #1280	; 0x500
     e44:	0af10800 	beq	ffc42e4c <SCS_BASE+0x1fc34e4c>
     e48:	ba230000 	blt	8c0e50 <__Stack_Size+0x8c0a50>
     e4c:	f1080034 			; <UNDEFINED> instruction: 0xf1080034
     e50:	0000000a 	andeq	r0, r0, sl
     e54:	0004d513 	andeq	sp, r4, r3, lsl r5
     e58:	046f0100 	strbteq	r0, [pc], #-256	; e60 <__Stack_Size+0xa60>
     e5c:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     e60:	00000014 	andeq	r0, r0, r4, lsl r0
     e64:	0e9a9c01 	cdpeq	12, 9, cr9, cr10, cr1, {0}
     e68:	de1e0000 	cdple	0, 1, cr0, cr14, cr0, {0}
     e6c:	01000003 	tsteq	r0, r3
     e70:	0057046f 	subseq	r0, r7, pc, ror #8
     e74:	01520000 	cmpeq	r2, r0
     e78:	c4160000 	ldrgt	r0, [r6], #-0
     e7c:	0b080034 	bleq	200f54 <__Stack_Size+0x200b54>
     e80:	9000000e 	andls	r0, r0, lr
     e84:	1700000e 	strne	r0, [r0, -lr]
     e88:	74045001 	strvc	r5, [r4], #-1
     e8c:	00253800 	eoreq	r3, r5, r0, lsl #16
     e90:	0034ce23 	eorseq	ip, r4, r3, lsr #28
     e94:	000e0b08 	andeq	r0, lr, r8, lsl #22
     e98:	e7200000 	str	r0, [r0, -r0]!
     e9c:	01000008 	tsteq	r0, r8
     ea0:	0034ceb4 	ldrhteq	ip, [r4], -r4
     ea4:	00003a08 	andeq	r3, r0, r8, lsl #20
     ea8:	5e9c0100 	fmlple	f0, f4, f0
     eac:	2100000f 	tstcs	r0, pc
     eb0:	01006469 	tsteq	r0, r9, ror #8
     eb4:	000073b4 			; <UNDEFINED> instruction: 0x000073b4
     eb8:	00017300 	andeq	r7, r1, r0, lsl #6
     ebc:	026d2400 	rsbeq	r2, sp, #0, 8
     ec0:	b4010000 	strlt	r0, [r1], #-0
     ec4:	00000691 	muleq	r0, r1, r6
     ec8:	00000194 	muleq	r0, r4, r1
     ecc:	00062825 	andeq	r2, r6, r5, lsr #16
     ed0:	91b50100 			; <UNDEFINED> instruction: 0x91b50100
     ed4:	b5000006 	strlt	r0, [r0, #-6]
     ed8:	25000001 	strcs	r0, [r0, #-1]
     edc:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
     ee0:	0691bb01 	ldreq	fp, [r1], r1, lsl #22
     ee4:	01e70000 	mvneq	r0, r0
     ee8:	de160000 	cdple	0, 1, cr0, cr6, cr0, {0}
     eec:	2e080034 	mcrcs	0, 0, r0, cr8, cr4, {1}
     ef0:	16000032 			; <UNDEFINED> instruction: 0x16000032
     ef4:	1700000f 	strne	r0, [r0, -pc]
     ef8:	0a145201 	beq	515704 <__Stack_Size+0x515304>
     efc:	01f30400 	mvnseq	r0, r0, lsl #8
     f00:	01f31c51 	mvnseq	r1, r1, asr ip
     f04:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
     f08:	01282d30 			; <UNDEFINED> instruction: 0x01282d30
     f0c:	17131600 	ldrne	r1, [r3, -r0, lsl #12]
     f10:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     f14:	e2150020 	ands	r0, r5, #32
     f18:	49080034 	stmdbmi	r8, {r2, r4, r5}
     f1c:	16000032 			; <UNDEFINED> instruction: 0x16000032
     f20:	080034ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, sp}
     f24:	00000b48 	andeq	r0, r0, r8, asr #22
     f28:	00000f36 	andeq	r0, r0, r6, lsr pc
     f2c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
     f30:	00634603 	rsbeq	r4, r3, r3, lsl #12
     f34:	f4160008 			; <UNDEFINED> instruction: 0xf4160008
     f38:	54080034 	strpl	r0, [r8], #-52	; 0x34
     f3c:	4a00000e 	bmi	f7c <__Stack_Size+0xb7c>
     f40:	1700000f 	strne	r0, [r0, -pc]
     f44:	74025001 	strvc	r5, [r2], #-1
     f48:	fe1b0000 	cdp2	0, 1, cr0, cr11, cr0, {0}
     f4c:	48080034 	stmdami	r8, {r2, r4, r5}
     f50:	1700000b 	strne	r0, [r0, -fp]
     f54:	03055001 	movweq	r5, #20481	; 0x5001
     f58:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}
     f5c:	53130000 	tstpl	r3, #0
     f60:	01000009 	tsteq	r0, r9
     f64:	350802e2 	strcc	r0, [r8, #-738]	; 0x2e2
     f68:	00180800 	andseq	r0, r8, r0, lsl #16
     f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f70:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
     f74:	00026d1e 	andeq	r6, r2, lr, lsl sp
     f78:	02e20100 	rsceq	r0, r2, #0, 2
     f7c:	00000691 	muleq	r0, r1, r6
     f80:	00000210 	andeq	r0, r0, r0, lsl r2
     f84:	00351416 	eorseq	r1, r5, r6, lsl r4
     f88:	000e9a08 	andeq	r9, lr, r8, lsl #20
     f8c:	000f9d00 	andeq	r9, pc, r0, lsl #26
     f90:	51011700 	tstpl	r1, r0, lsl #14
     f94:	17007402 	strne	r7, [r0, -r2, lsl #8]
     f98:	34015001 	strcc	r5, [r1], #-1
     f9c:	35201b00 	strcc	r1, [r0, #-2816]!	; 0xb00
     fa0:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
     fa4:	01170000 	tsteq	r7, r0
     fa8:	01f30451 	mvnseq	r0, r1, asr r4
     fac:	01171f50 	tsteq	r7, r0, asr pc
     fb0:	00330150 	eorseq	r0, r3, r0, asr r1
     fb4:	0d7d0f00 	ldcleq	15, cr0, [sp, #-0]
     fb8:	e7010000 	str	r0, [r1, -r0]
     fbc:	0fcf0102 	svceq	0x00cf0102
     fc0:	6d100000 	ldcvs	0, cr0, [r0, #-0]
     fc4:	01000002 	tsteq	r0, r2
     fc8:	069102e7 	ldreq	r0, [r1], r7, ror #5
     fcc:	26000000 	strcs	r0, [r0], -r0
     fd0:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
     fd4:	08003520 	stmdaeq	r0, {r5, r8, sl, ip, sp}
     fd8:	00000006 	andeq	r0, r0, r6
     fdc:	0ffe9c01 	svceq	0x00fe9c01
     fe0:	c2270000 	eorgt	r0, r7, #0
     fe4:	4a00000f 	bmi	1028 <__Stack_Size+0xc28>
     fe8:	1b000002 	blne	ff8 <__Stack_Size+0xbf8>
     fec:	08003526 	stmdaeq	r0, {r1, r2, r5, r8, sl, ip, sp}
     ff0:	00000f5e 	andeq	r0, r0, lr, asr pc
     ff4:	04500117 	ldrbeq	r0, [r0], #-279	; 0x117
     ff8:	1f5001f3 	svcne	0x005001f3
     ffc:	f8280000 			; <UNDEFINED> instruction: 0xf8280000
    1000:	01000001 	tsteq	r0, r1
    1004:	352602eb 	strcc	r0, [r6, #-747]!	; 0x2eb
    1008:	001a0800 	andseq	r0, sl, r0, lsl #16
    100c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1010:	00001045 	andeq	r1, r0, r5, asr #32
    1014:	00353216 	eorseq	r3, r5, r6, lsl r2
    1018:	000e9a08 	andeq	r9, lr, r8, lsl #20
    101c:	00102e00 	andseq	r2, r0, r0, lsl #28
    1020:	51011700 	tstpl	r1, r0, lsl #14
    1024:	015e0a03 	cmpeq	lr, r3, lsl #20
    1028:	01500117 	cmpeq	r0, r7, lsl r1
    102c:	401b0034 	andsmi	r0, fp, r4, lsr r0
    1030:	9a080035 	bls	20110c <__Stack_Size+0x200d0c>
    1034:	1700000e 	strne	r0, [r0, -lr]
    1038:	0a035101 	beq	d5444 <__Stack_Size+0xd5044>
    103c:	0117015e 	tsteq	r7, lr, asr r1
    1040:	00330150 	eorseq	r0, r3, r0, asr r1
    1044:	007b2800 	rsbseq	r2, fp, r0, lsl #16
    1048:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    104c:	00354002 	eorseq	r4, r5, r2
    1050:	00001a08 	andeq	r1, r0, r8, lsl #20
    1054:	8c9c0100 	ldfhis	f0, [ip], {0}
    1058:	16000010 			; <UNDEFINED> instruction: 0x16000010
    105c:	0800354c 	stmdaeq	r0, {r2, r3, r6, r8, sl, ip, sp}
    1060:	00000e9a 	muleq	r0, sl, lr
    1064:	00001075 	andeq	r1, r0, r5, ror r0
    1068:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    106c:	17015e0a 	strne	r5, [r1, -sl, lsl #28]
    1070:	34015001 	strcc	r5, [r1], #-1
    1074:	355a1b00 	ldrbcc	r1, [sl, #-2816]	; 0xb00
    1078:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
    107c:	01170000 	tsteq	r7, r0
    1080:	5e0a0351 	mcrpl	3, 0, r0, cr10, cr1, {2}
    1084:	50011701 	andpl	r1, r1, r1, lsl #14
    1088:	00003301 	andeq	r3, r0, r1, lsl #6
    108c:	00080120 	andeq	r0, r8, r0, lsr #2
    1090:	5ac80100 	bpl	ff201498 <SCS_BASE+0x1f1f3498>
    1094:	4a080035 	bmi	201170 <__Stack_Size+0x200d70>
    1098:	01000000 	mrseq	r0, (UNDEF: 0)
    109c:	00116d9c 	mulseq	r1, ip, sp
    10a0:	64692100 	strbtvs	r2, [r9], #-256	; 0x100
    10a4:	73c80100 	bicvc	r0, r8, #0, 2
    10a8:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    10ac:	24000002 	strcs	r0, [r0], #-2
    10b0:	000008f8 	strdeq	r0, [r0], -r8
    10b4:	0691c801 	ldreq	ip, [r1], r1, lsl #16
    10b8:	029a0000 	addseq	r0, sl, #0
    10bc:	6d240000 	stcvs	0, cr0, [r4, #-0]
    10c0:	01000002 	tsteq	r0, r2
    10c4:	000691c8 	andeq	r9, r6, r8, asr #3
    10c8:	0002c600 	andeq	ip, r2, r0, lsl #12
    10cc:	06c82500 	strbeq	r2, [r8], r0, lsl #10
    10d0:	ca010000 	bgt	410d8 <__Stack_Size+0x40cd8>
    10d4:	00000691 	muleq	r0, r1, r6
    10d8:	000002e7 	andeq	r0, r0, r7, ror #5
    10dc:	0007b525 	andeq	fp, r7, r5, lsr #10
    10e0:	91d30100 	bicsls	r0, r3, r0, lsl #2
    10e4:	18000006 	stmdane	r0, {r1, r2}
    10e8:	16000003 	strne	r0, [r0], -r3
    10ec:	08003566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, ip, sp}
    10f0:	00000e9a 	muleq	r0, sl, lr
    10f4:	00001106 	andeq	r1, r0, r6, lsl #2
    10f8:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    10fc:	175201f3 	smmlsrne	r2, r3, r1, r0
    1100:	75025001 	strvc	r5, [r2, #-1]
    1104:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
    1108:	2e080035 	mcrcs	0, 0, r0, cr8, cr5, {1}
    110c:	25000032 	strcs	r0, [r0, #-50]	; 0x32
    1110:	17000011 	smladne	r0, r1, r0, r0
    1114:	74025201 	strvc	r5, [r2], #-513	; 0x201
    1118:	51011700 	tstpl	r1, r0, lsl #14
    111c:	01174e01 	tsteq	r7, r1, lsl #28
    1120:	00750250 	rsbseq	r0, r5, r0, asr r2
    1124:	357c1500 	ldrbcc	r1, [ip, #-1280]!	; 0x500
    1128:	32490800 	subcc	r0, r9, #0, 16
    112c:	88160000 	ldmdahi	r6, {}	; <UNPREDICTABLE>
    1130:	48080035 	stmdami	r8, {r0, r2, r4, r5}
    1134:	4500000b 	strmi	r0, [r0, #-11]
    1138:	17000011 	smladne	r0, r1, r0, r0
    113c:	03055001 	movweq	r5, #20481	; 0x5001
    1140:	08006334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp, lr}
    1144:	358e1600 	strcc	r1, [lr, #1536]	; 0x600
    1148:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    114c:	11590000 	cmpne	r9, r0
    1150:	01170000 	tsteq	r7, r0
    1154:	00740250 	rsbseq	r0, r4, r0, asr r2
    1158:	35981b00 	ldrcc	r1, [r8, #2816]	; 0xb00
    115c:	0b480800 	bleq	1203164 <__Stack_Size+0x1202d64>
    1160:	01170000 	tsteq	r7, r0
    1164:	2f030550 	svccs	0x00030550
    1168:	00080063 	andeq	r0, r8, r3, rrx
    116c:	07911300 	ldreq	r1, [r1, r0, lsl #6]
    1170:	fd010000 	stc2	0, cr0, [r1, #-0]
    1174:	0035a402 	eorseq	sl, r5, r2, lsl #8
    1178:	00001e08 	andeq	r1, r0, r8, lsl #28
    117c:	e09c0100 	adds	r0, ip, r0, lsl #2
    1180:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    1184:	00000234 	andeq	r0, r0, r4, lsr r2
    1188:	9102fd01 	tstls	r2, r1, lsl #26	; <UNPREDICTABLE>
    118c:	41000006 	tstmi	r0, r6
    1190:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1194:	0000023f 	andeq	r0, r0, pc, lsr r2
    1198:	9102fd01 	tstls	r2, r1, lsl #26	; <UNPREDICTABLE>
    119c:	6d000006 	stcvs	0, cr0, [r0, #-24]	; 0xffffffe8
    11a0:	16000003 	strne	r0, [r0], -r3
    11a4:	080035b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, sp}
    11a8:	0000108c 	andeq	r1, r0, ip, lsl #1
    11ac:	000011c3 	andeq	r1, r0, r3, asr #3
    11b0:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    11b4:	01176408 	tsteq	r7, r8, lsl #8
    11b8:	01f30351 	mvnseq	r0, r1, asr r3
    11bc:	50011750 	andpl	r1, r1, r0, asr r7
    11c0:	1b003201 	blne	d9cc <__Stack_Size+0xd5cc>
    11c4:	080035c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, sp}
    11c8:	0000108c 	andeq	r1, r0, ip, lsl #1
    11cc:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    11d0:	01176408 	tsteq	r7, r8, lsl #8
    11d4:	01f30351 	mvnseq	r0, r1, asr r3
    11d8:	50011751 	andpl	r1, r1, r1, asr r7
    11dc:	00003101 	andeq	r3, r0, r1, lsl #2
    11e0:	00069e26 	andeq	r9, r6, r6, lsr #28
    11e4:	0035c200 	eorseq	ip, r5, r0, lsl #4
    11e8:	00001208 	andeq	r1, r0, r8, lsl #4
    11ec:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    11f0:	27000012 	smladcs	r0, r2, r0, r0
    11f4:	000006ab 	andeq	r0, r0, fp, lsr #13
    11f8:	000003a4 	andeq	r0, r0, r4, lsr #7
    11fc:	0006b727 	andeq	fp, r6, r7, lsr #14
    1200:	0003c200 	andeq	ip, r3, r0, lsl #4
    1204:	06c32700 	strbeq	r2, [r3], r0, lsl #14
    1208:	03ee0000 	mvneq	r0, #0
    120c:	ce1a0000 	cdpgt	0, 1, cr0, cr10, cr0, {0}
    1210:	6d080035 	stcvs	0, cr0, [r8, #-212]	; 0xffffff2c
    1214:	17000011 	smladne	r0, r1, r0, r0
    1218:	f3035101 	vrhadd.u8	d5, d3, d1
    121c:	01175201 	tsteq	r7, r1, lsl #4
    1220:	01f30350 	mvnseq	r0, r0, asr r3
    1224:	20000051 	andcs	r0, r0, r1, asr r0
    1228:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    122c:	35d4df01 	ldrbcc	sp, [r4, #3841]	; 0xf01
    1230:	00340800 	eorseq	r0, r4, r0, lsl #16
    1234:	9c010000 	stcls	0, cr0, [r1], {-0}
    1238:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    123c:	00646921 	rsbeq	r6, r4, r1, lsr #18
    1240:	0073df01 	rsbseq	sp, r3, r1, lsl #30
    1244:	040f0000 	streq	r0, [pc], #-0	; 124c <__Stack_Size+0xe4c>
    1248:	b5250000 	strlt	r0, [r5, #-0]!
    124c:	01000007 	tsteq	r0, r7
    1250:	000691e1 	andeq	r9, r6, r1, ror #3
    1254:	00043000 	andeq	r3, r4, r0
    1258:	35de1600 	ldrbcc	r1, [lr, #1536]	; 0x600
    125c:	32690800 	rsbcc	r0, r9, #0, 16
    1260:	12710000 	rsbsne	r0, r1, #0
    1264:	01170000 	tsteq	r7, r0
    1268:	17310152 			; <UNDEFINED> instruction: 0x17310152
    126c:	49015101 	stmdbmi	r1, {r0, r8, ip, lr}
    1270:	35e21500 	strbcc	r1, [r2, #1280]!	; 0x500
    1274:	32490800 	subcc	r0, r9, #0, 16
    1278:	ee160000 	cdp	0, 1, cr0, cr6, cr0, {0}
    127c:	48080035 	stmdami	r8, {r0, r2, r4, r5}
    1280:	9100000b 	tstls	r0, fp
    1284:	17000012 	smladne	r0, r2, r0, r0
    1288:	03055001 	movweq	r5, #20481	; 0x5001
    128c:	08006334 	stmdaeq	r0, {r2, r4, r5, r8, r9, sp, lr}
    1290:	35f41600 	ldrbcc	r1, [r4, #1536]!	; 0x600
    1294:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    1298:	12a50000 	adcne	r0, r5, #0
    129c:	01170000 	tsteq	r7, r0
    12a0:	00740250 	rsbseq	r0, r4, r0, asr r2
    12a4:	35fe1b00 	ldrbcc	r1, [lr, #2816]!	; 0xb00
    12a8:	0b480800 	bleq	12032b0 <__Stack_Size+0x1202eb0>
    12ac:	01170000 	tsteq	r7, r0
    12b0:	2f030550 	svccs	0x00030550
    12b4:	00080063 	andeq	r0, r8, r3, rrx
    12b8:	05b32000 	ldreq	r2, [r3, #0]!
    12bc:	ec010000 	stc	0, cr0, [r1], {-0}
    12c0:	08003608 	stmdaeq	r0, {r3, r9, sl, ip, sp}
    12c4:	00000034 	andeq	r0, r0, r4, lsr r0
    12c8:	134b9c01 	movtne	r9, #48129	; 0xbc01
    12cc:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    12d0:	ec010064 	stc	0, cr0, [r1], {100}	; 0x64
    12d4:	00000073 	andeq	r0, r0, r3, ror r0
    12d8:	00000459 	andeq	r0, r0, r9, asr r4
    12dc:	0007b525 	andeq	fp, r7, r5, lsr #10
    12e0:	91ee0100 	mvnls	r0, r0, lsl #2
    12e4:	7a000006 	bvc	1304 <__Stack_Size+0xf04>
    12e8:	16000004 	strne	r0, [r0], -r4
    12ec:	08003612 	stmdaeq	r0, {r1, r4, r9, sl, ip, sp}
    12f0:	00003269 	andeq	r3, r0, r9, ror #4
    12f4:	00001303 	andeq	r1, r0, r3, lsl #6
    12f8:	01520117 	cmpeq	r2, r7, lsl r1
    12fc:	51011730 	tstpl	r1, r0, lsr r7
    1300:	15004901 	strne	r4, [r0, #-2305]	; 0x901
    1304:	08003616 	stmdaeq	r0, {r1, r2, r4, r9, sl, ip, sp}
    1308:	00003249 	andeq	r3, r0, r9, asr #4
    130c:	00362216 	eorseq	r2, r6, r6, lsl r2
    1310:	000b4808 	andeq	r4, fp, r8, lsl #16
    1314:	00132300 	andseq	r2, r3, r0, lsl #6
    1318:	50011700 	andpl	r1, r1, r0, lsl #14
    131c:	63340305 	teqvs	r4, #335544320	; 0x14000000
    1320:	16000800 	strne	r0, [r0], -r0, lsl #16
    1324:	08003628 	stmdaeq	r0, {r3, r5, r9, sl, ip, sp}
    1328:	00000e54 	andeq	r0, r0, r4, asr lr
    132c:	00001337 	andeq	r1, r0, r7, lsr r3
    1330:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1334:	1b000074 	blne	150c <__Stack_Size+0x110c>
    1338:	08003632 	stmdaeq	r0, {r1, r4, r5, r9, sl, ip, sp}
    133c:	00000b48 	andeq	r0, r0, r8, asr #22
    1340:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1344:	00632f03 	rsbeq	r2, r3, r3, lsl #30
    1348:	28000008 	stmdacs	r0, {r3}
    134c:	00000689 	andeq	r0, r0, r9, lsl #13
    1350:	3c02cc01 	stccc	12, cr12, [r2], {1}
    1354:	64080036 	strvs	r0, [r8], #-54	; 0x36
    1358:	01000000 	mrseq	r0, (UNDEF: 0)
    135c:	0014449c 	mulseq	r4, ip, r4
    1360:	36481600 	strbcc	r1, [r8], -r0, lsl #12
    1364:	12b90800 	adcsne	r0, r9, #0, 16
    1368:	13740000 	cmnne	r4, #0
    136c:	01170000 	tsteq	r7, r0
    1370:	00340150 	eorseq	r0, r4, r0, asr r1
    1374:	00364e16 	eorseq	r4, r6, r6, lsl lr
    1378:	0012b908 	andseq	fp, r2, r8, lsl #18
    137c:	00138700 	andseq	r8, r3, r0, lsl #14
    1380:	50011700 	andpl	r1, r1, r0, lsl #14
    1384:	16003301 	strne	r3, [r0], -r1, lsl #6
    1388:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
    138c:	000031cc 	andeq	r3, r0, ip, asr #3
    1390:	000013a2 	andeq	r1, r0, r2, lsr #7
    1394:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    1398:	1720000a 	strne	r0, [r0, -sl]!
    139c:	75025001 	strvc	r5, [r2, #-1]
    13a0:	62160000 	andsvs	r0, r6, #0
    13a4:	cc080036 	stcgt	0, cr0, [r8], {54}	; 0x36
    13a8:	bd000031 	stclt	0, cr0, [r0, #-196]	; 0xffffff3c
    13ac:	17000013 	smladne	r0, r3, r0, r0
    13b0:	0a035101 	beq	d57bc <__Stack_Size+0xd53bc>
    13b4:	01172000 	tsteq	r7, r0
    13b8:	00740250 	rsbseq	r0, r4, r0, asr r2
    13bc:	366c1600 	strbtcc	r1, [ip], -r0, lsl #12
    13c0:	31cc0800 	biccc	r0, ip, r0, lsl #16
    13c4:	13d80000 	bicsne	r0, r8, #0
    13c8:	01170000 	tsteq	r7, r0
    13cc:	000a0351 	andeq	r0, sl, r1, asr r3
    13d0:	50011740 	andpl	r1, r1, r0, asr #14
    13d4:	00007402 	andeq	r7, r0, r2, lsl #8
    13d8:	00367616 	eorseq	r7, r6, r6, lsl r6
    13dc:	0031cc08 	eorseq	ip, r1, r8, lsl #24
    13e0:	0013f300 	andseq	pc, r3, r0, lsl #6
    13e4:	51011700 	tstpl	r1, r0, lsl #14
    13e8:	80000b03 	andhi	r0, r0, r3, lsl #22
    13ec:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    13f0:	16000074 			; <UNDEFINED> instruction: 0x16000074
    13f4:	08003680 	stmdaeq	r0, {r7, r9, sl, ip, sp}
    13f8:	000031cc 	andeq	r3, r0, ip, asr #3
    13fc:	0000140e 	andeq	r1, r0, lr, lsl #8
    1400:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    1404:	1740000a 	strbne	r0, [r0, -sl]
    1408:	75025001 	strvc	r5, [r2, #-1]
    140c:	8a160000 	bhi	581414 <__Stack_Size+0x581014>
    1410:	cc080036 	stcgt	0, cr0, [r8], {54}	; 0x36
    1414:	29000031 	stmdbcs	r0, {r0, r4, r5}
    1418:	17000014 	smladne	r0, r4, r0, r0
    141c:	0b035101 	bleq	d5828 <__Stack_Size+0xd5428>
    1420:	01178000 	tsteq	r7, r0
    1424:	00750250 	rsbseq	r0, r5, r0, asr r2
    1428:	36981b00 	ldrcc	r1, [r8], r0, lsl #22
    142c:	31cc0800 	biccc	r0, ip, r0, lsl #16
    1430:	01170000 	tsteq	r7, r0
    1434:	000a0351 	andeq	r0, sl, r1, asr r3
    1438:	50011710 	andpl	r1, r1, r0, lsl r7
    143c:	0c000c05 	stceq	12, cr0, [r0], {5}
    1440:	00004001 	andeq	r4, r0, r1
    1444:	000d9b20 	andeq	r9, sp, r0, lsr #22
    1448:	a0fb0100 	rscsge	r0, fp, r0, lsl #2
    144c:	38080036 	stmdacc	r8, {r1, r2, r4, r5}
    1450:	01000000 	mrseq	r0, (UNDEF: 0)
    1454:	0014e19c 	mulseq	r4, ip, r1
    1458:	64692100 	strbtvs	r2, [r9], #-256	; 0x100
    145c:	73fb0100 	mvnsvc	r0, #0, 2
    1460:	a3000000 	movwge	r0, #0
    1464:	24000004 	strcs	r0, [r0], #-4
    1468:	00000a8d 	andeq	r0, r0, sp, lsl #21
    146c:	14e1fb01 	strbtne	pc, [r1], #2817	; 0xb01	; <UNPREDICTABLE>
    1470:	04c40000 	strbeq	r0, [r4], #0
    1474:	b5250000 	strlt	r0, [r5, #-0]!
    1478:	01000007 	tsteq	r0, r7
    147c:	000691fd 	strdeq	r9, [r6], -sp
    1480:	0004f000 	andeq	pc, r4, r0
    1484:	36aa1600 	strtcc	r1, [sl], r0, lsl #12
    1488:	32840800 	addcc	r0, r4, #0, 16
    148c:	14990000 	ldrne	r0, [r9], #0
    1490:	01170000 	tsteq	r7, r0
    1494:	20080251 	andcs	r0, r8, r1, asr r2
    1498:	36b01500 	ldrtcc	r1, [r0], r0, lsl #10
    149c:	32490800 	subcc	r0, r9, #0, 16
    14a0:	bc160000 	ldclt	0, cr0, [r6], {-0}
    14a4:	48080036 	stmdami	r8, {r1, r2, r4, r5}
    14a8:	b900000b 	stmdblt	r0, {r0, r1, r3}
    14ac:	17000014 	smladne	r0, r4, r0, r0
    14b0:	03055001 	movweq	r5, #20481	; 0x5001
    14b4:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
    14b8:	36c21600 	strbcc	r1, [r2], r0, lsl #12
    14bc:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    14c0:	14cd0000 	strbne	r0, [sp], #0
    14c4:	01170000 	tsteq	r7, r0
    14c8:	00740250 	rsbseq	r0, r4, r0, asr r2
    14cc:	36cc1b00 	strbcc	r1, [ip], r0, lsl #22
    14d0:	0b480800 	bleq	12034d8 <__Stack_Size+0x12030d8>
    14d4:	01170000 	tsteq	r7, r0
    14d8:	2f030550 	svccs	0x00030550
    14dc:	00080063 	andeq	r0, r8, r3, rrx
    14e0:	e7041200 	str	r1, [r4, -r0, lsl #4]
    14e4:	03000014 	movweq	r0, #20
    14e8:	0b1e0704 	bleq	783100 <__Stack_Size+0x782d00>
    14ec:	af130000 	svcge	0x00130000
    14f0:	01000004 	tsteq	r0, r4
    14f4:	36d8010b 	ldrbcc	r0, [r8], fp, lsl #2
    14f8:	00380800 	eorseq	r0, r8, r0, lsl #16
    14fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1500:	0000158f 	andeq	r1, r0, pc, lsl #11
    1504:	00646929 	rsbeq	r6, r4, r9, lsr #18
    1508:	73010b01 	movwvc	r0, #6913	; 0x1b01
    150c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1510:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1514:	000001aa 	andeq	r0, r0, sl, lsr #3
    1518:	e1010b01 	tst	r1, r1, lsl #22
    151c:	3a000014 	bcc	1574 <__Stack_Size+0x1174>
    1520:	14000005 	strne	r0, [r0], #-5
    1524:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    1528:	91010d01 	tstls	r1, r1, lsl #26
    152c:	66000006 	strvs	r0, [r0], -r6
    1530:	16000005 	strne	r0, [r0], -r5
    1534:	080036e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, ip, sp}
    1538:	00003284 	andeq	r3, r0, r4, lsl #5
    153c:	00001547 	andeq	r1, r0, r7, asr #10
    1540:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1544:	15002408 	strne	r2, [r0, #-1032]	; 0x408
    1548:	080036e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, sp}
    154c:	00003249 	andeq	r3, r0, r9, asr #4
    1550:	0036f416 	eorseq	pc, r6, r6, lsl r4	; <UNPREDICTABLE>
    1554:	000b4808 	andeq	r4, fp, r8, lsl #16
    1558:	00156700 	andseq	r6, r5, r0, lsl #14
    155c:	50011700 	andpl	r1, r1, r0, lsl #14
    1560:	63450305 	movtvs	r0, #21253	; 0x5305
    1564:	16000800 	strne	r0, [r0], -r0, lsl #16
    1568:	080036fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip, sp}
    156c:	00000e54 	andeq	r0, r0, r4, asr lr
    1570:	0000157b 	andeq	r1, r0, fp, ror r5
    1574:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1578:	1b000074 	blne	1750 <__Stack_Size+0x1350>
    157c:	08003704 	stmdaeq	r0, {r2, r8, r9, sl, ip, sp}
    1580:	00000b48 	andeq	r0, r0, r8, asr #22
    1584:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1588:	00632f03 	rsbeq	r2, r3, r3, lsl #30
    158c:	13000008 	movwne	r0, #8
    1590:	0000062e 	andeq	r0, r0, lr, lsr #12
    1594:	10030201 	andne	r0, r3, r1, lsl #4
    1598:	34080037 	strcc	r0, [r8], #-55	; 0x37
    159c:	01000000 	mrseq	r0, (UNDEF: 0)
    15a0:	0016339c 	mulseq	r6, ip, r3
    15a4:	01bb1e00 			; <UNDEFINED> instruction: 0x01bb1e00
    15a8:	02010000 	andeq	r0, r1, #0
    15ac:	0006d003 	andeq	sp, r6, r3
    15b0:	00058f00 	andeq	r8, r5, r0, lsl #30
    15b4:	02341e00 	eorseq	r1, r4, #0, 28
    15b8:	02010000 	andeq	r0, r1, #0
    15bc:	00069103 	andeq	r9, r6, r3, lsl #2
    15c0:	0005ad00 	andeq	sl, r5, r0, lsl #26
    15c4:	023f1e00 	eorseq	r1, pc, #0, 28
    15c8:	02010000 	andeq	r0, r1, #0
    15cc:	00069103 	andeq	r9, r6, r3, lsl #2
    15d0:	0005cb00 	andeq	ip, r5, r0, lsl #22
    15d4:	02731900 	rsbseq	r1, r3, #0, 18
    15d8:	03010000 	movweq	r0, #4096	; 0x1000
    15dc:	00069103 	andeq	r9, r6, r3, lsl #2
    15e0:	68910200 	ldmvs	r1, {r9}
    15e4:	00028219 	andeq	r8, r2, r9, lsl r2
    15e8:	03040100 	movweq	r0, #16640	; 0x4100
    15ec:	00000691 	muleq	r0, r1, r6
    15f0:	2a6c9102 	bcs	1b25a00 <__Stack_Size+0x1b25600>
    15f4:	00736261 	rsbseq	r6, r3, r1, ror #4
    15f8:	06910008 	ldreq	r0, [r1], r8
    15fc:	16040000 	strne	r0, [r4], -r0
    1600:	002b0000 	eoreq	r0, fp, r0
    1604:	00372016 	eorseq	r2, r7, r6, lsl r0
    1608:	0014ee08 	andseq	lr, r4, r8, lsl #28
    160c:	00161d00 	andseq	r1, r6, r0, lsl #26
    1610:	51011700 	tstpl	r1, r0, lsl #14
    1614:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    1618:	31015001 	tstcc	r1, r1
    161c:	37281a00 	strcc	r1, [r8, -r0, lsl #20]!
    1620:	14ee0800 	strbtne	r0, [lr], #2048	; 0x800
    1624:	01170000 	tsteq	r7, r0
    1628:	007d0251 	rsbseq	r0, sp, r1, asr r2
    162c:	01500117 	cmpeq	r0, r7, lsl r1
    1630:	13000032 	movwne	r0, #50	; 0x32
    1634:	00000751 	andeq	r0, r0, r1, asr r7
    1638:	44031301 	strmi	r1, [r3], #-769	; 0x301
    163c:	3c080037 	stccc	0, cr0, [r8], {55}	; 0x37
    1640:	01000000 	mrseq	r0, (UNDEF: 0)
    1644:	0016d79c 	mulseq	r6, ip, r7
    1648:	01bb1e00 			; <UNDEFINED> instruction: 0x01bb1e00
    164c:	13010000 	movwne	r0, #4096	; 0x1000
    1650:	0006d003 	andeq	sp, r6, r3
    1654:	0005e900 	andeq	lr, r5, r0, lsl #18
    1658:	0d651e00 	stcleq	14, cr1, [r5, #-0]
    165c:	13010000 	movwne	r0, #4096	; 0x1000
    1660:	0014e703 	andseq	lr, r4, r3, lsl #14
    1664:	00060700 	andeq	r0, r6, r0, lsl #14
    1668:	0d711e00 	ldcleq	14, cr1, [r1, #-0]
    166c:	13010000 	movwne	r0, #4096	; 0x1000
    1670:	0014e703 	andseq	lr, r4, r3, lsl #14
    1674:	00062500 	andeq	r2, r6, r0, lsl #10
    1678:	02731900 	rsbseq	r1, r3, #0, 18
    167c:	14010000 	strne	r0, [r1], #-0
    1680:	00069103 	andeq	r9, r6, r3, lsl #2
    1684:	68910200 	ldmvs	r1, {r9}
    1688:	00028219 	andeq	r8, r2, r9, lsl r2
    168c:	03150100 	tsteq	r5, #0, 2
    1690:	00000691 	muleq	r0, r1, r6
    1694:	2a6c9102 	bcs	1b25aa4 <__Stack_Size+0x1b256a4>
    1698:	00736261 	rsbseq	r6, r3, r1, ror #4
    169c:	06910008 	ldreq	r0, [r1], r8
    16a0:	16a80000 	strtne	r0, [r8], r0
    16a4:	002b0000 	eoreq	r0, fp, r0
    16a8:	00375416 	eorseq	r5, r7, r6, lsl r4
    16ac:	0014ee08 	andseq	lr, r4, r8, lsl #28
    16b0:	0016c100 	andseq	ip, r6, r0, lsl #2
    16b4:	51011700 	tstpl	r1, r0, lsl #14
    16b8:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    16bc:	31015001 	tstcc	r1, r1
    16c0:	375c1a00 	ldrbcc	r1, [ip, -r0, lsl #20]
    16c4:	14ee0800 	strbtne	r0, [lr], #2048	; 0x800
    16c8:	01170000 	tsteq	r7, r0
    16cc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    16d0:	01500117 	cmpeq	r0, r7, lsl r1
    16d4:	13000032 	movwne	r0, #50	; 0x32
    16d8:	0000067b 	andeq	r0, r0, fp, ror r6
    16dc:	80011d01 	andhi	r1, r1, r1, lsl #26
    16e0:	38080037 	stmdacc	r8, {r0, r1, r2, r4, r5}
    16e4:	01000000 	mrseq	r0, (UNDEF: 0)
    16e8:	0017799c 	mulseq	r7, ip, r9
    16ec:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    16f0:	1d010000 	stcne	0, cr0, [r1, #-0]
    16f4:	00007301 	andeq	r7, r0, r1, lsl #6
    16f8:	00064300 	andeq	r4, r6, r0, lsl #6
    16fc:	01641e00 	cmneq	r4, r0, lsl #28
    1700:	1d010000 	stcne	0, cr0, [r1, #-0]
    1704:	00069801 	andeq	r9, r6, r1, lsl #16
    1708:	00066400 	andeq	r6, r6, r0, lsl #8
    170c:	07b51400 	ldreq	r1, [r5, r0, lsl #8]!
    1710:	1f010000 	svcne	0x00010000
    1714:	00069101 	andeq	r9, r6, r1, lsl #2
    1718:	00069000 	andeq	r9, r6, r0
    171c:	378a1600 	strcc	r1, [sl, r0, lsl #12]
    1720:	329e0800 	addscc	r0, lr, #0, 16
    1724:	17310000 	ldrne	r0, [r1, -r0]!
    1728:	01170000 	tsteq	r7, r0
    172c:	20080251 	andcs	r0, r8, r1, asr r2
    1730:	37901500 	ldrcc	r1, [r0, r0, lsl #10]
    1734:	32490800 	subcc	r0, r9, #0, 16
    1738:	9c160000 	ldcls	0, cr0, [r6], {-0}
    173c:	48080037 	stmdami	r8, {r0, r1, r2, r4, r5}
    1740:	5100000b 	tstpl	r0, fp
    1744:	17000017 	smladne	r0, r7, r0, r0
    1748:	03055001 	movweq	r5, #20481	; 0x5001
    174c:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
    1750:	37a21600 	strcc	r1, [r2, r0, lsl #12]!
    1754:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    1758:	17650000 	strbne	r0, [r5, -r0]!
    175c:	01170000 	tsteq	r7, r0
    1760:	00740250 	rsbseq	r0, r4, r0, asr r2
    1764:	37ac1b00 	strcc	r1, [ip, r0, lsl #22]!
    1768:	0b480800 	bleq	1203770 <__Stack_Size+0x1203370>
    176c:	01170000 	tsteq	r7, r0
    1770:	2f030550 	svccs	0x00030550
    1774:	00080063 	andeq	r0, r8, r3, rrx
    1778:	0a4f1300 	beq	13c6380 <__Stack_Size+0x13c5f80>
    177c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1780:	0037b801 	eorseq	fp, r7, r1, lsl #16
    1784:	00003808 	andeq	r3, r0, r8, lsl #16
    1788:	1b9c0100 	blne	fe701b90 <SCS_BASE+0x1e6f3b90>
    178c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    1790:	00000581 	andeq	r0, r0, r1, lsl #11
    1794:	73012d01 	movwvc	r2, #7425	; 0x1d01
    1798:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    179c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    17a0:	00000799 	muleq	r0, r9, r7
    17a4:	98012d01 	stmdals	r1, {r0, r8, sl, fp, sp}
    17a8:	da000006 	ble	17c8 <__Stack_Size+0x13c8>
    17ac:	14000006 	strne	r0, [r0], #-6
    17b0:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    17b4:	91012f01 	tstls	r1, r1, lsl #30
    17b8:	06000006 	streq	r0, [r0], -r6
    17bc:	16000007 	strne	r0, [r0], -r7
    17c0:	080037c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, ip, sp}
    17c4:	0000329e 	muleq	r0, lr, r2
    17c8:	000017d3 	ldrdeq	r1, [r0], -r3
    17cc:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    17d0:	15002108 	strne	r2, [r0, #-264]	; 0x108
    17d4:	080037c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, sp}
    17d8:	00003249 	andeq	r3, r0, r9, asr #4
    17dc:	0037d416 	eorseq	sp, r7, r6, lsl r4
    17e0:	000b4808 	andeq	r4, fp, r8, lsl #16
    17e4:	0017f300 	andseq	pc, r7, r0, lsl #6
    17e8:	50011700 	andpl	r1, r1, r0, lsl #14
    17ec:	63450305 	movtvs	r0, #21253	; 0x5305
    17f0:	16000800 	strne	r0, [r0], -r0, lsl #16
    17f4:	080037da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip, sp}
    17f8:	00000e54 	andeq	r0, r0, r4, asr lr
    17fc:	00001807 	andeq	r1, r0, r7, lsl #16
    1800:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1804:	1b000074 	blne	19dc <__Stack_Size+0x15dc>
    1808:	080037e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, sp}
    180c:	00000b48 	andeq	r0, r0, r8, asr #22
    1810:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1814:	00632f03 	rsbeq	r2, r3, r3, lsl #30
    1818:	13000008 	movwne	r0, #8
    181c:	000002a1 	andeq	r0, r0, r1, lsr #5
    1820:	f0013b01 			; <UNDEFINED> instruction: 0xf0013b01
    1824:	4c080037 	stcmi	0, cr0, [r8], {55}	; 0x37
    1828:	01000000 	mrseq	r0, (UNDEF: 0)
    182c:	0018f39c 	mulseq	r8, ip, r3
    1830:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    1834:	3b010000 	blcc	4183c <__Stack_Size+0x4143c>
    1838:	00007301 	andeq	r7, r0, r1, lsl #6
    183c:	00072f00 	andeq	r2, r7, r0, lsl #30
    1840:	07991e00 	ldreq	r1, [r9, r0, lsl #28]
    1844:	3b010000 	blcc	4184c <__Stack_Size+0x4144c>
    1848:	00069801 	andeq	r9, r6, r1, lsl #16
    184c:	00075000 	andeq	r5, r7, r0
    1850:	07b51400 	ldreq	r1, [r5, r0, lsl #8]!
    1854:	3d010000 	stccc	0, cr0, [r1, #-0]
    1858:	00069101 	andeq	r9, r6, r1, lsl #2
    185c:	00079500 	andeq	r9, r7, r0, lsl #10
    1860:	37fa1600 	ldrbcc	r1, [sl, r0, lsl #12]!
    1864:	329e0800 	addscc	r0, lr, #0, 16
    1868:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    186c:	01170000 	tsteq	r7, r0
    1870:	004a0151 	subeq	r0, sl, r1, asr r1
    1874:	00380015 	eorseq	r0, r8, r5, lsl r0
    1878:	00324908 	eorseq	r4, r2, r8, lsl #18
    187c:	38081600 	stmdacc	r8, {r9, sl, ip}
    1880:	0b480800 	bleq	1203888 <__Stack_Size+0x1203488>
    1884:	18940000 	ldmne	r4, {}	; <UNPREDICTABLE>
    1888:	01170000 	tsteq	r7, r0
    188c:	55030550 	strpl	r0, [r3, #-1360]	; 0x550
    1890:	00080063 	andeq	r0, r8, r3, rrx
    1894:	00380e15 	eorseq	r0, r8, r5, lsl lr
    1898:	000e5408 	andeq	r5, lr, r8, lsl #8
    189c:	38141600 	ldmdacc	r4, {r9, sl, ip}
    18a0:	0b480800 	bleq	12038a8 <__Stack_Size+0x12034a8>
    18a4:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    18a8:	01170000 	tsteq	r7, r0
    18ac:	2f030550 	svccs	0x00030550
    18b0:	00080063 	andeq	r0, r8, r3, rrx
    18b4:	00381e16 	eorseq	r1, r8, r6, lsl lr
    18b8:	000b4808 	andeq	r4, fp, r8, lsl #16
    18bc:	0018cb00 	andseq	ip, r8, r0, lsl #22
    18c0:	50011700 	andpl	r1, r1, r0, lsl #14
    18c4:	63450305 	movtvs	r0, #21253	; 0x5305
    18c8:	16000800 	strne	r0, [r0], -r0, lsl #16
    18cc:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
    18d0:	00000e54 	andeq	r0, r0, r4, asr lr
    18d4:	000018df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    18d8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    18dc:	1b000074 	blne	1ab4 <__Stack_Size+0x16b4>
    18e0:	0800382e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip, sp}
    18e4:	00000b48 	andeq	r0, r0, r8, asr #22
    18e8:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    18ec:	00632f03 	rsbeq	r2, r3, r3, lsl #30
    18f0:	13000008 	movwne	r0, #8
    18f4:	00000aa3 	andeq	r0, r0, r3, lsr #21
    18f8:	3c014c01 	stccc	12, cr4, [r1], {1}
    18fc:	38080038 	stmdacc	r8, {r3, r4, r5}
    1900:	01000000 	mrseq	r0, (UNDEF: 0)
    1904:	0019949c 	mulseq	r9, ip, r4
    1908:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    190c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1910:	00007301 	andeq	r7, r0, r1, lsl #6
    1914:	0007be00 	andeq	fp, r7, r0, lsl #28
    1918:	07991e00 	ldreq	r1, [r9, r0, lsl #28]
    191c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1920:	00069801 	andeq	r9, r6, r1, lsl #16
    1924:	0007df00 	andeq	sp, r7, r0, lsl #30
    1928:	07b51400 	ldreq	r1, [r5, r0, lsl #8]!
    192c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1930:	00069101 	andeq	r9, r6, r1, lsl #2
    1934:	00080b00 	andeq	r0, r8, r0, lsl #22
    1938:	38461600 	stmdacc	r6, {r9, sl, ip}^
    193c:	329e0800 	addscc	r0, lr, #0, 16
    1940:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
    1944:	01170000 	tsteq	r7, r0
    1948:	004b0151 	subeq	r0, fp, r1, asr r1
    194c:	00384c15 	eorseq	r4, r8, r5, lsl ip
    1950:	00324908 	eorseq	r4, r2, r8, lsl #18
    1954:	38581600 	ldmdacc	r8, {r9, sl, ip}^
    1958:	0b480800 	bleq	1203960 <__Stack_Size+0x1203560>
    195c:	196c0000 	stmdbne	ip!, {}^	; <UNPREDICTABLE>
    1960:	01170000 	tsteq	r7, r0
    1964:	45030550 	strmi	r0, [r3, #-1360]	; 0x550
    1968:	00080063 	andeq	r0, r8, r3, rrx
    196c:	00385e16 	eorseq	r5, r8, r6, lsl lr
    1970:	000e5408 	andeq	r5, lr, r8, lsl #8
    1974:	00198000 	andseq	r8, r9, r0
    1978:	50011700 	andpl	r1, r1, r0, lsl #14
    197c:	00007402 	andeq	r7, r0, r2, lsl #8
    1980:	0038681b 	eorseq	r6, r8, fp, lsl r8
    1984:	000b4808 	andeq	r4, fp, r8, lsl #16
    1988:	50011700 	andpl	r1, r1, r0, lsl #14
    198c:	632f0305 			; <UNDEFINED> instruction: 0x632f0305
    1990:	00000800 	andeq	r0, r0, r0, lsl #16
    1994:	0009c413 	andeq	ip, r9, r3, lsl r4
    1998:	015a0100 	cmpeq	sl, r0, lsl #2
    199c:	08003874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp}
    19a0:	00000038 	andeq	r0, r0, r8, lsr r0
    19a4:	1a359c01 	bne	d689b0 <__Stack_Size+0xd685b0>
    19a8:	811e0000 	tsthi	lr, r0
    19ac:	01000005 	tsteq	r0, r5
    19b0:	0073015a 	rsbseq	r0, r3, sl, asr r1
    19b4:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    19b8:	991e0000 	ldmdbls	lr, {}	; <UNPREDICTABLE>
    19bc:	01000007 	tsteq	r0, r7
    19c0:	0698015a 			; <UNDEFINED> instruction: 0x0698015a
    19c4:	08550000 	ldmdaeq	r5, {}^	; <UNPREDICTABLE>
    19c8:	b5140000 	ldrlt	r0, [r4, #-0]
    19cc:	01000007 	tsteq	r0, r7
    19d0:	0691015c 			; <UNDEFINED> instruction: 0x0691015c
    19d4:	08810000 	stmeq	r1, {}	; <UNPREDICTABLE>
    19d8:	7e160000 	cdpvc	0, 1, cr0, cr6, cr0, {0}
    19dc:	9e080038 	mcrls	0, 0, r0, cr8, cr8, {1}
    19e0:	ed000032 	stc	0, cr0, [r0, #-200]	; 0xffffff38
    19e4:	17000019 	smladne	r0, r9, r0, r0
    19e8:	4c015101 	stfmis	f5, [r1], {1}
    19ec:	38841500 	stmcc	r4, {r8, sl, ip}
    19f0:	32490800 	subcc	r0, r9, #0, 16
    19f4:	90160000 	andsls	r0, r6, r0
    19f8:	48080038 	stmdami	r8, {r3, r4, r5}
    19fc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1a00:	1700001a 	smladne	r0, sl, r0, r0
    1a04:	03055001 	movweq	r5, #20481	; 0x5001
    1a08:	08006345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, lr}
    1a0c:	38961600 	ldmcc	r6, {r9, sl, ip}
    1a10:	0e540800 	cdpeq	8, 5, cr0, cr4, cr0, {0}
    1a14:	1a210000 	bne	841a1c <__Stack_Size+0x84161c>
    1a18:	01170000 	tsteq	r7, r0
    1a1c:	00740250 	rsbseq	r0, r4, r0, asr r2
    1a20:	38a01b00 	stmiacc	r0!, {r8, r9, fp, ip}
    1a24:	0b480800 	bleq	1203a2c <__Stack_Size+0x120362c>
    1a28:	01170000 	tsteq	r7, r0
    1a2c:	2f030550 	svccs	0x00030550
    1a30:	00080063 	andeq	r0, r8, r3, rrx
    1a34:	05201300 	streq	r1, [r0, #-768]!	; 0x300
    1a38:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1a3c:	0038ac01 	eorseq	sl, r8, r1, lsl #24
    1a40:	00003808 	andeq	r3, r0, r8, lsl #16
    1a44:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    1a48:	1e00001a 	mcrne	0, 0, r0, cr0, cr10, {0}
    1a4c:	00000581 	andeq	r0, r0, r1, lsl #11
    1a50:	73016901 	movwvc	r6, #6401	; 0x1901
    1a54:	aa000000 	bge	1a5c <__Stack_Size+0x165c>
    1a58:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1a5c:	00000799 	muleq	r0, r9, r7
    1a60:	98016901 	stmdals	r1, {r0, r8, fp, sp, lr}
    1a64:	cb000006 	blgt	1a84 <__Stack_Size+0x1684>
    1a68:	14000008 	strne	r0, [r0], #-8
    1a6c:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    1a70:	91016b01 	tstls	r1, r1, lsl #22
    1a74:	f7000006 			; <UNDEFINED> instruction: 0xf7000006
    1a78:	16000008 	strne	r0, [r0], -r8
    1a7c:	080038b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip, sp}
    1a80:	0000329e 	muleq	r0, lr, r2
    1a84:	00001a8e 	andeq	r1, r0, lr, lsl #21
    1a88:	01510117 	cmpeq	r1, r7, lsl r1
    1a8c:	bc15004d 	ldclt	0, cr0, [r5], {77}	; 0x4d
    1a90:	49080038 	stmdbmi	r8, {r3, r4, r5}
    1a94:	16000032 			; <UNDEFINED> instruction: 0x16000032
    1a98:	080038c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp}
    1a9c:	00000b48 	andeq	r0, r0, r8, asr #22
    1aa0:	00001aae 	andeq	r1, r0, lr, lsr #21
    1aa4:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1aa8:	00634503 	rsbeq	r4, r3, r3, lsl #10
    1aac:	ce160008 	cdpgt	0, 1, cr0, cr6, cr8, {0}
    1ab0:	54080038 	strpl	r0, [r8], #-56	; 0x38
    1ab4:	c200000e 	andgt	r0, r0, #14
    1ab8:	1700001a 	smladne	r0, sl, r0, r0
    1abc:	74025001 	strvc	r5, [r2], #-1
    1ac0:	d81b0000 	ldmdale	fp, {}	; <UNPREDICTABLE>
    1ac4:	48080038 	stmdami	r8, {r3, r4, r5}
    1ac8:	1700000b 	strne	r0, [r0, -fp]
    1acc:	03055001 	movweq	r5, #20481	; 0x5001
    1ad0:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}
    1ad4:	57130000 	ldrpl	r0, [r3, -r0]
    1ad8:	01000000 	mrseq	r0, (UNDEF: 0)
    1adc:	38e40177 	stmiacc	r4!, {r0, r1, r2, r4, r5, r6, r8}^
    1ae0:	00380800 	eorseq	r0, r8, r0, lsl #16
    1ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ae8:	00001b77 	andeq	r1, r0, r7, ror fp
    1aec:	0005811e 	andeq	r8, r5, lr, lsl r1
    1af0:	01770100 	cmneq	r7, r0, lsl #2
    1af4:	00000073 	andeq	r0, r0, r3, ror r0
    1af8:	00000920 	andeq	r0, r0, r0, lsr #18
    1afc:	0007991e 	andeq	r9, r7, lr, lsl r9
    1b00:	01770100 	cmneq	r7, r0, lsl #2
    1b04:	00000698 	muleq	r0, r8, r6
    1b08:	00000941 	andeq	r0, r0, r1, asr #18
    1b0c:	0007b514 	andeq	fp, r7, r4, lsl r5
    1b10:	01790100 	cmneq	r9, r0, lsl #2
    1b14:	00000691 	muleq	r0, r1, r6
    1b18:	0000096d 	andeq	r0, r0, sp, ror #18
    1b1c:	0038ee16 	eorseq	lr, r8, r6, lsl lr
    1b20:	00329e08 	eorseq	r9, r2, r8, lsl #28
    1b24:	001b2f00 	andseq	r2, fp, r0, lsl #30
    1b28:	51011700 	tstpl	r1, r0, lsl #14
    1b2c:	15004e01 	strne	r4, [r0, #-3585]	; 0xe01
    1b30:	080038f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, sp}
    1b34:	00003249 	andeq	r3, r0, r9, asr #4
    1b38:	00390016 	eorseq	r0, r9, r6, lsl r0
    1b3c:	000b4808 	andeq	r4, fp, r8, lsl #16
    1b40:	001b4f00 	andseq	r4, fp, r0, lsl #30
    1b44:	50011700 	andpl	r1, r1, r0, lsl #14
    1b48:	63450305 	movtvs	r0, #21253	; 0x5305
    1b4c:	16000800 	strne	r0, [r0], -r0, lsl #16
    1b50:	08003906 	stmdaeq	r0, {r1, r2, r8, fp, ip, sp}
    1b54:	00000e54 	andeq	r0, r0, r4, asr lr
    1b58:	00001b63 	andeq	r1, r0, r3, ror #22
    1b5c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1b60:	1b000074 	blne	1d38 <__Stack_Size+0x1938>
    1b64:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
    1b68:	00000b48 	andeq	r0, r0, r8, asr #22
    1b6c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1b70:	00632f03 	rsbeq	r2, r3, r3, lsl #30
    1b74:	13000008 	movwne	r0, #8
    1b78:	00000131 	andeq	r0, r0, r1, lsr r1
    1b7c:	1c018501 	cfstr32ne	mvfx8, [r1], {1}
    1b80:	38080039 	stmdacc	r8, {r0, r3, r4, r5}
    1b84:	01000000 	mrseq	r0, (UNDEF: 0)
    1b88:	001c189c 	mulseq	ip, ip, r8
    1b8c:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    1b90:	85010000 	strhi	r0, [r1, #-0]
    1b94:	00007301 	andeq	r7, r0, r1, lsl #6
    1b98:	00099600 	andeq	r9, r9, r0, lsl #12
    1b9c:	07991e00 	ldreq	r1, [r9, r0, lsl #28]
    1ba0:	85010000 	strhi	r0, [r1, #-0]
    1ba4:	00069801 	andeq	r9, r6, r1, lsl #16
    1ba8:	0009b700 	andeq	fp, r9, r0, lsl #14
    1bac:	07b51400 	ldreq	r1, [r5, r0, lsl #8]!
    1bb0:	87010000 	strhi	r0, [r1, -r0]
    1bb4:	00069101 	andeq	r9, r6, r1, lsl #2
    1bb8:	0009e300 	andeq	lr, r9, r0, lsl #6
    1bbc:	39261600 	stmdbcc	r6!, {r9, sl, ip}
    1bc0:	329e0800 	addscc	r0, lr, #0, 16
    1bc4:	1bd00000 	blne	ff401bcc <SCS_BASE+0x1f3f3bcc>
    1bc8:	01170000 	tsteq	r7, r0
    1bcc:	004f0151 	subeq	r0, pc, r1, asr r1	; <UNPREDICTABLE>
    1bd0:	00392c15 	eorseq	r2, r9, r5, lsl ip
    1bd4:	00324908 	eorseq	r4, r2, r8, lsl #18
    1bd8:	39381600 	ldmdbcc	r8!, {r9, sl, ip}
    1bdc:	0b480800 	bleq	1203be4 <__Stack_Size+0x12037e4>
    1be0:	1bf00000 	blne	ffc01be8 <SCS_BASE+0x1fbf3be8>
    1be4:	01170000 	tsteq	r7, r0
    1be8:	45030550 	strmi	r0, [r3, #-1360]	; 0x550
    1bec:	00080063 	andeq	r0, r8, r3, rrx
    1bf0:	00393e16 	eorseq	r3, r9, r6, lsl lr
    1bf4:	000e5408 	andeq	r5, lr, r8, lsl #8
    1bf8:	001c0400 	andseq	r0, ip, r0, lsl #8
    1bfc:	50011700 	andpl	r1, r1, r0, lsl #14
    1c00:	00007402 	andeq	r7, r0, r2, lsl #8
    1c04:	0039481b 	eorseq	r4, r9, fp, lsl r8
    1c08:	000b4808 	andeq	r4, fp, r8, lsl #16
    1c0c:	50011700 	andpl	r1, r1, r0, lsl #14
    1c10:	632f0305 			; <UNDEFINED> instruction: 0x632f0305
    1c14:	00000800 	andeq	r0, r0, r0, lsl #16
    1c18:	00063b13 	andeq	r3, r6, r3, lsl fp
    1c1c:	01930100 	orrseq	r0, r3, r0, lsl #2
    1c20:	08003954 	stmdaeq	r0, {r2, r4, r6, r8, fp, ip, sp}
    1c24:	00000038 	andeq	r0, r0, r8, lsr r0
    1c28:	1cba9c01 	ldcne	12, cr9, [sl], #4
    1c2c:	811e0000 	tsthi	lr, r0
    1c30:	01000005 	tsteq	r0, r5
    1c34:	00730193 			; <UNDEFINED> instruction: 0x00730193
    1c38:	0a0c0000 	beq	301c40 <__Stack_Size+0x301840>
    1c3c:	991e0000 	ldmdbls	lr, {}	; <UNPREDICTABLE>
    1c40:	01000007 	tsteq	r0, r7
    1c44:	14e10193 	strbtne	r0, [r1], #403	; 0x193
    1c48:	0a2d0000 	beq	b41c50 <__Stack_Size+0xb41850>
    1c4c:	b5140000 	ldrlt	r0, [r4, #-0]
    1c50:	01000007 	tsteq	r0, r7
    1c54:	06910195 			; <UNDEFINED> instruction: 0x06910195
    1c58:	0a590000 	beq	1641c60 <__Stack_Size+0x1641860>
    1c5c:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    1c60:	84080039 	strhi	r0, [r8], #-57	; 0x39
    1c64:	72000032 	andvc	r0, r0, #50	; 0x32
    1c68:	1700001c 	smladne	r0, ip, r0, r0
    1c6c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    1c70:	64150023 	ldrvs	r0, [r5], #-35	; 0x23
    1c74:	49080039 	stmdbmi	r8, {r0, r3, r4, r5}
    1c78:	16000032 			; <UNDEFINED> instruction: 0x16000032
    1c7c:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
    1c80:	00000b48 	andeq	r0, r0, r8, asr #22
    1c84:	00001c92 	muleq	r0, r2, ip
    1c88:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1c8c:	00634503 	rsbeq	r4, r3, r3, lsl #10
    1c90:	76160008 	ldrvc	r0, [r6], -r8
    1c94:	54080039 	strpl	r0, [r8], #-57	; 0x39
    1c98:	a600000e 	strge	r0, [r0], -lr
    1c9c:	1700001c 	smladne	r0, ip, r0, r0
    1ca0:	74025001 	strvc	r5, [r2], #-1
    1ca4:	801b0000 	andshi	r0, fp, r0
    1ca8:	48080039 	stmdami	r8, {r0, r3, r4, r5}
    1cac:	1700000b 	strne	r0, [r0, -fp]
    1cb0:	03055001 	movweq	r5, #20481	; 0x5001
    1cb4:	0800632f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sp, lr}
    1cb8:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    1cbc:	0100000d 	tsteq	r0, sp
    1cc0:	398c01a0 	stmibcc	ip, {r5, r7, r8}
    1cc4:	00340800 	eorseq	r0, r4, r0, lsl #16
    1cc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ccc:	00001d63 	andeq	r1, r0, r3, ror #26
    1cd0:	0005811e 	andeq	r8, r5, lr, lsl r1
    1cd4:	01a00100 	lsleq	r0, r0, #2
    1cd8:	00000073 	andeq	r0, r0, r3, ror r0
    1cdc:	00000a82 	andeq	r0, r0, r2, lsl #21
    1ce0:	000ac31e 	andeq	ip, sl, lr, lsl r3
    1ce4:	01a00100 	lsleq	r0, r0, #2
    1ce8:	00000691 	muleq	r0, r1, r6
    1cec:	00000aa3 	andeq	r0, r0, r3, lsr #21
    1cf0:	0007b514 	andeq	fp, r7, r4, lsl r5
    1cf4:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    1cf8:	00000691 	muleq	r0, r1, r6
    1cfc:	00000acf 	andeq	r0, r0, pc, asr #21
    1d00:	00399616 	eorseq	r9, r9, r6, lsl r6
    1d04:	00326908 	eorseq	r6, r2, r8, lsl #18
    1d08:	001d1b00 	andseq	r1, sp, r0, lsl #22
    1d0c:	52011700 	andpl	r1, r1, #0, 14
    1d10:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
    1d14:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1d18:	15002808 	strne	r2, [r0, #-2056]	; 0x808
    1d1c:	0800399a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp, ip, sp}
    1d20:	00003249 	andeq	r3, r0, r9, asr #4
    1d24:	0039a616 	eorseq	sl, r9, r6, lsl r6
    1d28:	000b4808 	andeq	r4, fp, r8, lsl #16
    1d2c:	001d3b00 	andseq	r3, sp, r0, lsl #22
    1d30:	50011700 	andpl	r1, r1, r0, lsl #14
    1d34:	63450305 	movtvs	r0, #21253	; 0x5305
    1d38:	16000800 	strne	r0, [r0], -r0, lsl #16
    1d3c:	080039ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, sp}
    1d40:	00000e54 	andeq	r0, r0, r4, asr lr
    1d44:	00001d4f 	andeq	r1, r0, pc, asr #26
    1d48:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1d4c:	1b000074 	blne	1f24 <__Stack_Size+0x1b24>
    1d50:	080039b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, ip, sp}
    1d54:	00000b48 	andeq	r0, r0, r8, asr #22
    1d58:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    1d5c:	00632f03 	rsbeq	r2, r3, r3, lsl #30
    1d60:	13000008 	movwne	r0, #8
    1d64:	00000701 	andeq	r0, r0, r1, lsl #14
    1d68:	c001ac01 	andgt	sl, r1, r1, lsl #24
    1d6c:	1a080039 	bne	201e58 <__Stack_Size+0x201a58>
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	001dd39c 	mulseq	sp, ip, r3
    1d78:	05811e00 	streq	r1, [r1, #3584]	; 0xe00
    1d7c:	ac010000 	stcge	0, cr0, [r1], {-0}
    1d80:	00007301 	andeq	r7, r0, r1, lsl #6
    1d84:	000af800 	andeq	pc, sl, r0, lsl #16
    1d88:	047c1e00 	ldrbteq	r1, [ip], #-3584	; 0xe00
    1d8c:	ac010000 	stcge	0, cr0, [r1], {-0}
    1d90:	00069101 	andeq	r9, r6, r1, lsl #2
    1d94:	000b1900 	andeq	r1, fp, r0, lsl #18
    1d98:	07b51400 	ldreq	r1, [r5, r0, lsl #8]!
    1d9c:	ad010000 	stcge	0, cr0, [r1, #-0]
    1da0:	00069101 	andeq	r9, r6, r1, lsl #2
    1da4:	000b3700 	andeq	r3, fp, r0, lsl #14
    1da8:	39d01600 	ldmibcc	r0, {r9, sl, ip}^
    1dac:	32690800 	rsbcc	r0, r9, #0, 16
    1db0:	1dc90000 	stclne	0, cr0, [r9]
    1db4:	01170000 	tsteq	r7, r0
    1db8:	00740252 	rsbseq	r0, r4, r2, asr r2
    1dbc:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1dc0:	01172908 	tsteq	r7, r8, lsl #18
    1dc4:	00750250 	rsbseq	r0, r5, r0, asr r2
    1dc8:	39d41500 	ldmibcc	r4, {r8, sl, ip}^
    1dcc:	32490800 	subcc	r0, r9, #0, 16
    1dd0:	13000000 	movwne	r0, #0
    1dd4:	00000824 	andeq	r0, r0, r4, lsr #16
    1dd8:	da048901 	ble	1241e4 <__Stack_Size+0x123de4>
    1ddc:	8e080039 	mcrhi	0, 0, r0, cr8, cr9, {1}
    1de0:	01000000 	mrseq	r0, (UNDEF: 0)
    1de4:	001eec9c 	mulseq	lr, ip, ip
    1de8:	0b3a1900 	bleq	e881f0 <__Stack_Size+0xe87df0>
    1dec:	8b010000 	blhi	41df4 <__Stack_Size+0x419f4>
    1df0:	00059004 	andeq	r9, r5, r4
    1df4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1df8:	00054b19 	andeq	r4, r5, r9, lsl fp
    1dfc:	048c0100 	streq	r0, [ip], #256	; 0x100
    1e00:	00000604 	andeq	r0, r0, r4, lsl #12
    1e04:	16689102 	strbtne	r9, [r8], -r2, lsl #2
    1e08:	080039e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, ip, sp}
    1e0c:	000032b8 			; <UNDEFINED> instruction: 0x000032b8
    1e10:	00001e1b 	andeq	r1, r0, fp, lsl lr
    1e14:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1e18:	16005c91 			; <UNDEFINED> instruction: 0x16005c91
    1e1c:	080039ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip, sp}
    1e20:	000032d0 	ldrdeq	r3, [r0], -r0
    1e24:	00001e2f 	andeq	r1, r0, pc, lsr #28
    1e28:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    1e2c:	16006891 			; <UNDEFINED> instruction: 0x16006891
    1e30:	080039f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, sp}
    1e34:	000032e8 	andeq	r3, r0, r8, ror #5
    1e38:	00001e44 	andeq	r1, r0, r4, asr #28
    1e3c:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1e40:	00244a40 	eoreq	r4, r4, r0, asr #20
    1e44:	003a1216 	eorseq	r1, sl, r6, lsl r2
    1e48:	00330008 	eorseq	r0, r3, r8
    1e4c:	001e5f00 	andseq	r5, lr, r0, lsl #30
    1e50:	51011700 	tstpl	r1, r0, lsl #14
    1e54:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
    1e58:	40035001 	andmi	r5, r3, r1
    1e5c:	1600244a 	strne	r2, [r0], -sl, asr #8
    1e60:	08003a20 	stmdaeq	r0, {r5, r9, fp, ip, sp}
    1e64:	00003317 	andeq	r3, r0, r7, lsl r3
    1e68:	00001e80 	andeq	r1, r0, r0, lsl #29
    1e6c:	01520117 	cmpeq	r2, r7, lsl r1
    1e70:	51011731 	tstpl	r1, r1, lsr r7
    1e74:	02d20a03 	sbcseq	r0, r2, #12288	; 0x3000
    1e78:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1e7c:	00244a40 	eoreq	r4, r4, r0, asr #20
    1e80:	003a3e16 	eorseq	r3, sl, r6, lsl lr
    1e84:	00333308 	eorseq	r3, r3, r8, lsl #6
    1e88:	001e9b00 	andseq	r9, lr, r0, lsl #22
    1e8c:	51011700 	tstpl	r1, r0, lsl #14
    1e90:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
    1e94:	40035001 	andmi	r5, r3, r1
    1e98:	1600244a 	strne	r2, [r0], -sl, asr #8
    1e9c:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
    1ea0:	0000334a 	andeq	r3, r0, sl, asr #6
    1ea4:	00001eb6 			; <UNDEFINED> instruction: 0x00001eb6
    1ea8:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    1eac:	01170074 	tsteq	r7, r4, ror r0
    1eb0:	4a400350 	bmi	1002bf8 <__Stack_Size+0x10027f8>
    1eb4:	54160024 	ldrpl	r0, [r6], #-36	; 0x24
    1eb8:	6108003a 	tstvs	r8, sl, lsr r0
    1ebc:	d5000033 	strle	r0, [r0, #-51]	; 0x33
    1ec0:	1700001e 	smladne	r0, lr, r0, r0
    1ec4:	31015201 	tstcc	r1, r1, lsl #4
    1ec8:	01510117 	cmpeq	r1, r7, lsl r1
    1ecc:	50011732 	andpl	r1, r1, r2, lsr r7
    1ed0:	244a4003 	strbcs	r4, [sl], #-3
    1ed4:	3a5e1a00 	bcc	17886dc <__Stack_Size+0x17882dc>
    1ed8:	337d0800 	cmncc	sp, #0, 16
    1edc:	01170000 	tsteq	r7, r0
    1ee0:	17310151 			; <UNDEFINED> instruction: 0x17310151
    1ee4:	40035001 	andmi	r5, r3, r1
    1ee8:	0000244a 	andeq	r2, r0, sl, asr #8
    1eec:	0006d313 	andeq	sp, r6, r3, lsl r3
    1ef0:	04ae0100 	strteq	r0, [lr], #256	; 0x100
    1ef4:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
    1ef8:	00000054 	andeq	r0, r0, r4, asr r0
    1efc:	1f5d9c01 	svcne	0x005d9c01
    1f00:	74160000 	ldrvc	r0, [r6], #-0
    1f04:	9408003a 	strls	r0, [r8], #-58	; 0x3a
    1f08:	1c000033 	stcne	0, cr0, [r0], {51}	; 0x33
    1f0c:	1700001f 	smladne	r0, pc, r0, r0	; <UNPREDICTABLE>
    1f10:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    1f14:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1f18:	00244a40 	eoreq	r4, r4, r0, asr #20
    1f1c:	003a8016 	eorseq	r8, sl, r6, lsl r0
    1f20:	0033af08 	eorseq	sl, r3, r8, lsl #30
    1f24:	001f3600 	andseq	r3, pc, r0, lsl #12
    1f28:	51011700 	tstpl	r1, r0, lsl #14
    1f2c:	01173201 	tsteq	r7, r1, lsl #4
    1f30:	4a400350 	bmi	1002c78 <__Stack_Size+0x1002878>
    1f34:	88160024 	ldmdahi	r6, {r2, r5}
    1f38:	c608003a 			; <UNDEFINED> instruction: 0xc608003a
    1f3c:	4b000033 	blmi	2010 <__Stack_Size+0x1c10>
    1f40:	1700001f 	smladne	r0, pc, r0, r0	; <UNPREDICTABLE>
    1f44:	40035001 	andmi	r5, r3, r1
    1f48:	1a00244a 	bne	b078 <__Stack_Size+0xac78>
    1f4c:	08003aa2 	stmdaeq	r0, {r1, r5, r7, r9, fp, ip, sp}
    1f50:	000033dc 	ldrdeq	r3, [r0], -ip
    1f54:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1f58:	00244a40 	eoreq	r4, r4, r0, asr #20
    1f5c:	043c1300 	ldrteq	r1, [ip], #-768	; 0x300
    1f60:	bd010000 	stclt	0, cr0, [r1, #-0]
    1f64:	003abc04 	eorseq	fp, sl, r4, lsl #24
    1f68:	00003008 	andeq	r3, r0, r8
    1f6c:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    1f70:	1600001f 			; <UNDEFINED> instruction: 0x1600001f
    1f74:	08003ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp, ip, sp}
    1f78:	000033f3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    1f7c:	00001f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    1f80:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    1f84:	1705250a 	strne	r2, [r5, -sl, lsl #10]
    1f88:	0c055001 	stceq	0, cr5, [r5], {1}
    1f8c:	40013800 	andmi	r3, r1, r0, lsl #16
    1f90:	3adc1a00 	bcc	ff708798 <SCS_BASE+0x1f6fa798>
    1f94:	340d0800 	strcc	r0, [sp], #-2048	; 0x800
    1f98:	01170000 	tsteq	r7, r0
    1f9c:	000c0550 	andeq	r0, ip, r0, asr r5
    1fa0:	00400138 	subeq	r0, r0, r8, lsr r1
    1fa4:	06e61300 	strbteq	r1, [r6], r0, lsl #6
    1fa8:	c3010000 	movwgt	r0, #4096	; 0x1000
    1fac:	003aec04 	eorseq	lr, sl, r4, lsl #24
    1fb0:	00001408 	andeq	r1, r0, r8, lsl #8
    1fb4:	e09c0100 	adds	r0, ip, r0, lsl #2
    1fb8:	1600001f 			; <UNDEFINED> instruction: 0x1600001f
    1fbc:	08003af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, ip, sp}
    1fc0:	00003422 	andeq	r3, r0, r2, lsr #8
    1fc4:	00001fd0 	ldrdeq	r1, [r0], -r0
    1fc8:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1fcc:	0023280a 	eoreq	r2, r3, sl, lsl #16
    1fd0:	003b001b 	eorseq	r0, fp, fp, lsl r0
    1fd4:	00343308 	eorseq	r3, r4, r8, lsl #6
    1fd8:	50011700 	andpl	r1, r1, r0, lsl #14
    1fdc:	00003101 	andeq	r3, r0, r1, lsl #2
    1fe0:	000cba1c 	andeq	fp, ip, ip, lsl sl
    1fe4:	04cc0100 	strbeq	r0, [ip], #256	; 0x100
    1fe8:	08003b00 	stmdaeq	r0, {r8, r9, fp, ip, sp}
    1fec:	00000018 	andeq	r0, r0, r8, lsl r0
    1ff0:	98139c01 	ldmdals	r3, {r0, sl, fp, ip, pc}
    1ff4:	01000005 	tsteq	r0, r5
    1ff8:	3b1804d2 	blcc	603348 <__Stack_Size+0x602f48>
    1ffc:	00300800 	eorseq	r0, r0, r0, lsl #16
    2000:	9c010000 	stcls	0, cr0, [r1], {-0}
    2004:	00002049 	andeq	r2, r0, r9, asr #32
    2008:	000e091e 	andeq	r0, lr, lr, lsl r9
    200c:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2010:	00000045 	andeq	r0, r0, r5, asr #32
    2014:	00000b57 	andeq	r0, r0, r7, asr fp
    2018:	003b2216 	eorseq	r2, fp, r6, lsl r2
    201c:	00344408 	eorseq	r4, r4, r8, lsl #8
    2020:	00202b00 	eoreq	r2, r0, r0, lsl #22
    2024:	50011700 	andpl	r1, r1, r0, lsl #14
    2028:	16003101 	strne	r3, [r0], -r1, lsl #2
    202c:	08003b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, sp}
    2030:	00003444 	andeq	r3, r0, r4, asr #8
    2034:	0000203f 	andeq	r2, r0, pc, lsr r0
    2038:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    203c:	2300fe09 	movwcs	pc, #3593	; 0xe09	; <UNPREDICTABLE>
    2040:	08003b42 	stmdaeq	r0, {r1, r6, r8, r9, fp, ip, sp}
    2044:	00003444 	andeq	r3, r0, r4, asr #8
    2048:	034c1300 	movteq	r1, #49920	; 0xc300
    204c:	bd010000 	stclt	0, cr0, [r1, #-0]
    2050:	003b4801 	eorseq	r4, fp, r1, lsl #16
    2054:	00003208 	andeq	r3, r0, r8, lsl #4
    2058:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    205c:	1e000020 	cdpne	0, 0, cr0, cr0, cr0, {1}
    2060:	00000581 	andeq	r0, r0, r1, lsl #11
    2064:	7301bd01 	movwvc	fp, #7425	; 0x1d01
    2068:	92000000 	andls	r0, r0, #0
    206c:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    2070:	00000ac3 	andeq	r0, r0, r3, asr #21
    2074:	9101bd01 	tstls	r1, r1, lsl #26
    2078:	b3000006 	movwlt	r0, #6
    207c:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    2080:	0000047c 	andeq	r0, r0, ip, ror r4
    2084:	9101bd01 	tstls	r1, r1, lsl #26
    2088:	df000006 	svcle	0x00000006
    208c:	2c00000b 	stccs	0, cr0, [r0], {11}
    2090:	be01006b 	cdplt	0, 0, cr0, cr1, cr11, {3}
    2094:	00069101 	andeq	r9, r6, r1, lsl #2
    2098:	000c0b00 	andeq	r0, ip, r0, lsl #22
    209c:	3b561600 	blcc	15878a4 <__Stack_Size+0x15874a4>
    20a0:	1d630800 	stclne	8, cr0, [r3, #-0]
    20a4:	20b70000 	adcscs	r0, r7, r0
    20a8:	01170000 	tsteq	r7, r0
    20ac:	fe080251 	mcr2	2, 0, r0, cr8, cr1, {2}
    20b0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    20b4:	16000075 			; <UNDEFINED> instruction: 0x16000075
    20b8:	08003b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, ip, sp}
    20bc:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
    20c0:	000020d1 	ldrdeq	r2, [r0], -r1
    20c4:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    20c8:	01170074 	tsteq	r7, r4, ror r0
    20cc:	00750250 	rsbseq	r0, r5, r0, asr r2
    20d0:	3b6a1600 	blcc	1a878d8 <__Stack_Size+0x1a874d8>
    20d4:	1ff20800 	svcne	0x00f20800
    20d8:	20e40000 	rsccs	r0, r4, r0
    20dc:	01170000 	tsteq	r7, r0
    20e0:	00310150 	eorseq	r0, r1, r0, asr r1
    20e4:	003b7a1b 	eorseq	r7, fp, fp, lsl sl
    20e8:	001d6308 	andseq	r6, sp, r8, lsl #6
    20ec:	51011700 	tstpl	r1, r0, lsl #14
    20f0:	00003001 	andeq	r3, r0, r1
    20f4:	00018028 	andeq	r8, r1, r8, lsr #32
    20f8:	027e0100 	rsbseq	r0, lr, #0, 2
    20fc:	08003b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp}
    2100:	0000004a 	andeq	r0, r0, sl, asr #32
    2104:	21d69c01 	bicscs	r9, r6, r1, lsl #24
    2108:	86160000 	ldrhi	r0, [r6], -r0
    210c:	4908003b 	stmdbmi	r8, {r0, r1, r3, r4, r5}
    2110:	29000020 	stmdbcs	r0, {r5}
    2114:	17000021 	strne	r0, [r0, -r1, lsr #32]
    2118:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    211c:	5101177d 	tstpl	r1, sp, ror r7
    2120:	01174301 	tsteq	r7, r1, lsl #6
    2124:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2128:	3b901600 	blcc	fe407930 <SCS_BASE+0x1e3f9930>
    212c:	20490800 	subcs	r0, r9, r0, lsl #16
    2130:	21480000 	mrscs	r0, (UNDEF: 72)
    2134:	01170000 	tsteq	r7, r0
    2138:	7d080252 	sfmvc	f0, 4, [r8, #-328]	; 0xfffffeb8
    213c:	01510117 	cmpeq	r1, r7, lsl r1
    2140:	50011740 	andpl	r1, r1, r0, asr #14
    2144:	00640802 	rsbeq	r0, r4, r2, lsl #16
    2148:	003b9a16 	eorseq	r9, fp, r6, lsl sl
    214c:	00204908 	eoreq	r4, r0, r8, lsl #18
    2150:	00216700 	eoreq	r6, r1, r0, lsl #14
    2154:	52011700 	andpl	r1, r1, #0, 14
    2158:	17fa0802 	ldrbne	r0, [sl, r2, lsl #16]!
    215c:	40015101 	andmi	r5, r1, r1, lsl #2
    2160:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2164:	16006408 	strne	r6, [r0], -r8, lsl #8
    2168:	08003ba2 	stmdaeq	r0, {r1, r5, r7, r8, r9, fp, ip, sp}
    216c:	00001ff2 	strdeq	r1, [r0], -r2
    2170:	0000217c 	andeq	r2, r0, ip, ror r1
    2174:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    2178:	0001f40a 	andeq	pc, r1, sl, lsl #8
    217c:	003bac16 	eorseq	sl, fp, r6, lsl ip
    2180:	00204908 	eoreq	r4, r0, r8, lsl #18
    2184:	00219b00 	eoreq	r9, r1, r0, lsl #22
    2188:	52011700 	andpl	r1, r1, #0, 14
    218c:	177d0802 	ldrbne	r0, [sp, -r2, lsl #16]!
    2190:	3e015101 	adfccs	f5, f1, f1
    2194:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2198:	16006408 	strne	r6, [r0], -r8, lsl #8
    219c:	08003bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip, sp}
    21a0:	00002049 	andeq	r2, r0, r9, asr #32
    21a4:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    21a8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    21ac:	01177d08 	tsteq	r7, r8, lsl #26
    21b0:	17400151 	smlsldne	r0, r0, r1, r1	; <UNPREDICTABLE>
    21b4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    21b8:	c41b0064 	ldrgt	r0, [fp], #-100	; 0x64
    21bc:	4908003b 	stmdbmi	r8, {r0, r1, r3, r4, r5}
    21c0:	17000020 	strne	r0, [r0, -r0, lsr #32]
    21c4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    21c8:	510117fa 	strdpl	r1, [r1, -sl]
    21cc:	01174301 	tsteq	r7, r1, lsl #6
    21d0:	64080250 	strvs	r0, [r8], #-592	; 0x250
    21d4:	fb280000 	blx	a021de <__Stack_Size+0xa01dde>
    21d8:	01000009 	tsteq	r0, r9
    21dc:	3bc4028b 	blcc	ff102c10 <SCS_BASE+0x1f0f4c10>
    21e0:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    21e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21e8:	0000235b 	andeq	r2, r0, fp, asr r3
    21ec:	003bd016 	eorseq	sp, fp, r6, lsl r0
    21f0:	00204908 	eoreq	r4, r0, r8, lsl #18
    21f4:	00220b00 	eoreq	r0, r2, r0, lsl #22
    21f8:	52011700 	andpl	r1, r1, #0, 14
    21fc:	177d0802 	ldrbne	r0, [sp, -r2, lsl #16]!
    2200:	46015101 	strmi	r5, [r1], -r1, lsl #2
    2204:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2208:	16006408 	strne	r6, [r0], -r8, lsl #8
    220c:	08003bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip, sp}
    2210:	00001ff2 	strdeq	r1, [r0], -r2
    2214:	0000221f 	andeq	r2, r0, pc, lsl r2
    2218:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    221c:	16007d08 	strne	r7, [r0], -r8, lsl #26
    2220:	08003be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, ip, sp}
    2224:	00002049 	andeq	r2, r0, r9, asr #32
    2228:	0000223e 	andeq	r2, r0, lr, lsr r2
    222c:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2230:	01177d08 	tsteq	r7, r8, lsl #26
    2234:	17480151 	smlsldne	r0, r8, r1, r1
    2238:	08025001 	stmdaeq	r2, {r0, ip, lr}
    223c:	ea160064 	b	5823d4 <__Stack_Size+0x581fd4>
    2240:	4908003b 	stmdbmi	r8, {r0, r1, r3, r4, r5}
    2244:	5d000020 	stcpl	0, cr0, [r0, #-128]	; 0xffffff80
    2248:	17000022 	strne	r0, [r0, -r2, lsr #32]
    224c:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    2250:	5101177d 	tstpl	r1, sp, ror r7
    2254:	01174401 	tsteq	r7, r1, lsl #8
    2258:	64080250 	strvs	r0, [r8], #-592	; 0x250
    225c:	3bf01600 	blcc	ffc07a64 <SCS_BASE+0x1fbf9a64>
    2260:	1ff20800 	svcne	0x00f20800
    2264:	22710000 	rsbscs	r0, r1, #0
    2268:	01170000 	tsteq	r7, r0
    226c:	7d080250 	sfmvc	f0, 4, [r8, #-320]	; 0xfffffec0
    2270:	3bfc1600 	blcc	fff07a78 <SCS_BASE+0x1fef9a78>
    2274:	20490800 	subcs	r0, r9, r0, lsl #16
    2278:	22910000 	addscs	r0, r1, #0
    227c:	01170000 	tsteq	r7, r0
    2280:	f40a0352 	vst2.16	{d0-d3}, [sl :64], r2
    2284:	51011701 	tstpl	r1, r1, lsl #14
    2288:	01174601 	tsteq	r7, r1, lsl #12
    228c:	64080250 	strvs	r0, [r8], #-592	; 0x250
    2290:	3c021600 	stccc	6, cr1, [r2], {-0}
    2294:	1ff20800 	svcne	0x00f20800
    2298:	22a50000 	adccs	r0, r5, #0
    229c:	01170000 	tsteq	r7, r0
    22a0:	7d080250 	sfmvc	f0, 4, [r8, #-320]	; 0xfffffec0
    22a4:	3c0c1600 	stccc	6, cr1, [ip], {-0}
    22a8:	20490800 	subcs	r0, r9, r0, lsl #16
    22ac:	22c40000 	sbccs	r0, r4, #0
    22b0:	01170000 	tsteq	r7, r0
    22b4:	7d080252 	sfmvc	f0, 4, [r8, #-328]	; 0xfffffeb8
    22b8:	01510117 	cmpeq	r1, r7, lsl r1
    22bc:	50011749 	andpl	r1, r1, r9, asr #14
    22c0:	00640802 	rsbeq	r0, r4, r2, lsl #16
    22c4:	003c1216 	eorseq	r1, ip, r6, lsl r2
    22c8:	001ff208 	andseq	pc, pc, r8, lsl #4
    22cc:	0022d800 	eoreq	sp, r2, r0, lsl #16
    22d0:	50011700 	andpl	r1, r1, r0, lsl #14
    22d4:	007d0802 	rsbseq	r0, sp, r2, lsl #16
    22d8:	003c1c16 	eorseq	r1, ip, r6, lsl ip
    22dc:	00204908 	eoreq	r4, r0, r8, lsl #18
    22e0:	0022f700 	eoreq	pc, r2, r0, lsl #14
    22e4:	52011700 	andpl	r1, r1, #0, 14
    22e8:	177d0802 	ldrbne	r0, [sp, -r2, lsl #16]!
    22ec:	48015101 	stmdami	r1, {r0, r8, ip, lr}
    22f0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    22f4:	16006408 	strne	r6, [r0], -r8, lsl #8
    22f8:	08003c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, ip, sp}
    22fc:	00002049 	andeq	r2, r0, r9, asr #32
    2300:	00002316 	andeq	r2, r0, r6, lsl r3
    2304:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    2308:	01177d08 	tsteq	r7, r8, lsl #26
    230c:	17440151 	smlsldne	r0, r4, r1, r1
    2310:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2314:	2c160064 	ldccs	0, cr0, [r6], {100}	; 0x64
    2318:	f208003c 	vqadd.s8	d0, d8, d28
    231c:	2a00001f 	bcs	23a0 <__Stack_Size+0x1fa0>
    2320:	17000023 	strne	r0, [r0, -r3, lsr #32]
    2324:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2328:	3816007d 	ldmdacc	r6, {r0, r2, r3, r4, r5, r6}
    232c:	4908003c 	stmdbmi	r8, {r2, r3, r4, r5}
    2330:	4a000020 	bmi	23b8 <__Stack_Size+0x1fb8>
    2334:	17000023 	strne	r0, [r0, -r3, lsr #32]
    2338:	0a035201 	beq	d6b44 <__Stack_Size+0xd6744>
    233c:	011701f4 			; <UNDEFINED> instruction: 0x011701f4
    2340:	17460151 	smlsldne	r0, r6, r1, r1
    2344:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2348:	421b0064 	andsmi	r0, fp, #100	; 0x64
    234c:	f208003c 	vqadd.s8	d0, d8, d28
    2350:	1700001f 	smladne	r0, pc, r0, r0	; <UNPREDICTABLE>
    2354:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2358:	2800007d 	stmdacs	r0, {r0, r2, r3, r4, r5, r6}
    235c:	0000055f 	andeq	r0, r0, pc, asr r5
    2360:	4202a001 	andmi	sl, r2, #1
    2364:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2368:	01000001 	tsteq	r0, r1
    236c:	00263d9c 	mlaeq	r6, ip, sp, r3
    2370:	007a2c00 	rsbseq	r2, sl, r0, lsl #24
    2374:	9102a101 	tstls	r2, r1, lsl #2
    2378:	2a000006 	bcs	2398 <__Stack_Size+0x1f98>
    237c:	1600000c 	strne	r0, [r0], -ip
    2380:	08003c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, sp}
    2384:	00000b48 	andeq	r0, r0, r8, asr #22
    2388:	00002396 	muleq	r0, r6, r3
    238c:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2390:	00636003 	rsbeq	r6, r3, r3
    2394:	52160008 	andspl	r0, r6, #8
    2398:	2708003c 	smladxcs	r8, ip, r0, r0
    239c:	a9000012 	stmdbge	r0, {r1, r4}
    23a0:	17000023 	strne	r0, [r0, -r3, lsr #32]
    23a4:	34015001 	strcc	r5, [r1], #-1
    23a8:	3c581600 	mrrccc	6, 0, r1, r8, cr0
    23ac:	12270800 	eorne	r0, r7, #0, 16
    23b0:	23bc0000 			; <UNDEFINED> instruction: 0x23bc0000
    23b4:	01170000 	tsteq	r7, r0
    23b8:	00330150 	eorseq	r0, r3, r0, asr r1
    23bc:	003c5e16 	eorseq	r5, ip, r6, lsl lr
    23c0:	000b4808 	andeq	r4, fp, r8, lsl #16
    23c4:	0023d300 	eoreq	sp, r3, r0, lsl #6
    23c8:	50011700 	andpl	r1, r1, r0, lsl #14
    23cc:	63740305 	cmnvs	r4, #335544320	; 0x14000000
    23d0:	16000800 	strne	r0, [r0], -r0, lsl #16
    23d4:	08003c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, sp}
    23d8:	000031cc 	andeq	r3, r0, ip, asr #3
    23dc:	000023f1 	strdeq	r2, [r0], -r1
    23e0:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    23e4:	1720000a 	strne	r0, [r0, -sl]!
    23e8:	0c055001 	stceq	0, cr5, [r5], {1}
    23ec:	40011000 	andmi	r1, r1, r0
    23f0:	3c721600 	ldclcc	6, cr1, [r2], #-0
    23f4:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    23f8:	240f0000 	strcs	r0, [pc], #-0	; 2400 <__Stack_Size+0x2000>
    23fc:	01170000 	tsteq	r7, r0
    2400:	000a0351 	andeq	r0, sl, r1, asr r3
    2404:	50011720 	andpl	r1, r1, r0, lsr #14
    2408:	0c000c05 	stceq	12, cr0, [r0], {5}
    240c:	16004001 	strne	r4, [r0], -r1
    2410:	08003c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
    2414:	00001ff2 	strdeq	r1, [r0], -r2
    2418:	00002423 	andeq	r2, r0, r3, lsr #8
    241c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2420:	16006408 	strne	r6, [r0], -r8, lsl #8
    2424:	08003c82 	stmdaeq	r0, {r1, r7, sl, fp, ip, sp}
    2428:	000031cc 	andeq	r3, r0, ip, asr #3
    242c:	00002441 	andeq	r2, r0, r1, asr #8
    2430:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2434:	1720000a 	strne	r0, [r0, -sl]!
    2438:	0c055001 	stceq	0, cr5, [r5], {1}
    243c:	40010c00 	andmi	r0, r1, r0, lsl #24
    2440:	3c8c1600 	stccc	6, cr1, [ip], {0}
    2444:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    2448:	245f0000 	ldrbcs	r0, [pc], #-0	; 2450 <__Stack_Size+0x2050>
    244c:	01170000 	tsteq	r7, r0
    2450:	000a0351 	andeq	r0, sl, r1, asr r3
    2454:	50011740 	andpl	r1, r1, r0, asr #14
    2458:	0c000c05 	stceq	12, cr0, [r0], {5}
    245c:	16004001 	strne	r4, [r0], -r1
    2460:	08003c92 	stmdaeq	r0, {r1, r4, r7, sl, fp, ip, sp}
    2464:	00001ff2 	strdeq	r1, [r0], -r2
    2468:	00002473 	andeq	r2, r0, r3, ror r4
    246c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2470:	16006408 	strne	r6, [r0], -r8, lsl #8
    2474:	08003c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, sp}
    2478:	000031cc 	andeq	r3, r0, ip, asr #3
    247c:	00002491 	muleq	r0, r1, r4
    2480:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2484:	1740000a 	strbne	r0, [r0, -sl]
    2488:	0c055001 	stceq	0, cr5, [r5], {1}
    248c:	40010c00 	andmi	r0, r1, r0, lsl #24
    2490:	3ca61600 	stccc	6, cr1, [r6]
    2494:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    2498:	24af0000 	strtcs	r0, [pc], #0	; 24a0 <__Stack_Size+0x20a0>
    249c:	01170000 	tsteq	r7, r0
    24a0:	000b0351 	andeq	r0, fp, r1, asr r3
    24a4:	50011780 	andpl	r1, r1, r0, lsl #15
    24a8:	0c000c05 	stceq	12, cr0, [r0], {5}
    24ac:	16004001 	strne	r4, [r0], -r1
    24b0:	08003cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip, sp}
    24b4:	00001ff2 	strdeq	r1, [r0], -r2
    24b8:	000024c3 	andeq	r2, r0, r3, asr #9
    24bc:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    24c0:	16006408 	strne	r6, [r0], -r8, lsl #8
    24c4:	08003cb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, ip, sp}
    24c8:	000031cc 	andeq	r3, r0, ip, asr #3
    24cc:	000024e1 	andeq	r2, r0, r1, ror #9
    24d0:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    24d4:	1780000b 	strne	r0, [r0, fp]
    24d8:	0c055001 	stceq	0, cr5, [r5], {1}
    24dc:	40010c00 	andmi	r0, r1, r0, lsl #24
    24e0:	3cc01600 	stclcc	6, cr1, [r0], {0}
    24e4:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    24e8:	24ff0000 	ldrbtcs	r0, [pc], #0	; 24f0 <__Stack_Size+0x20f0>
    24ec:	01170000 	tsteq	r7, r0
    24f0:	000a0351 	andeq	r0, sl, r1, asr r3
    24f4:	50011740 	andpl	r1, r1, r0, asr #14
    24f8:	10000c05 	andne	r0, r0, r5, lsl #24
    24fc:	16004001 	strne	r4, [r0], -r1
    2500:	08003cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, ip, sp}
    2504:	00001ff2 	strdeq	r1, [r0], -r2
    2508:	00002513 	andeq	r2, r0, r3, lsl r5
    250c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2510:	16006408 	strne	r6, [r0], -r8, lsl #8
    2514:	08003cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp}
    2518:	000031cc 	andeq	r3, r0, ip, asr #3
    251c:	00002531 	andeq	r2, r0, r1, lsr r5
    2520:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2524:	1740000a 	strbne	r0, [r0, -sl]
    2528:	0c055001 	stceq	0, cr5, [r5], {1}
    252c:	40011000 	andmi	r1, r1, r0
    2530:	3cda1600 	ldclcc	6, cr1, [sl], {0}
    2534:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    2538:	254f0000 	strbcs	r0, [pc, #-0]	; 2540 <__Stack_Size+0x2140>
    253c:	01170000 	tsteq	r7, r0
    2540:	000b0351 	andeq	r0, fp, r1, asr r3
    2544:	50011780 	andpl	r1, r1, r0, lsl #15
    2548:	10000c05 	andne	r0, r0, r5, lsl #24
    254c:	16004001 	strne	r4, [r0], -r1
    2550:	08003ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, ip, sp}
    2554:	00001ff2 	strdeq	r1, [r0], -r2
    2558:	00002563 	andeq	r2, r0, r3, ror #10
    255c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2560:	16006408 	strne	r6, [r0], -r8, lsl #8
    2564:	08003cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip, sp}
    2568:	000031cc 	andeq	r3, r0, ip, asr #3
    256c:	00002581 	andeq	r2, r0, r1, lsl #11
    2570:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2574:	1780000b 	strne	r0, [r0, fp]
    2578:	0c055001 	stceq	0, cr5, [r5], {1}
    257c:	40011000 	andmi	r1, r1, r0
    2580:	3cf41600 	ldclcc	6, cr1, [r4]
    2584:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    2588:	259f0000 	ldrcs	r0, [pc]	; 2590 <__Stack_Size+0x2190>
    258c:	01170000 	tsteq	r7, r0
    2590:	000a0351 	andeq	r0, sl, r1, asr r3
    2594:	50011710 	andpl	r1, r1, r0, lsl r7
    2598:	0c000c05 	stceq	12, cr0, [r0], {5}
    259c:	16004001 	strne	r4, [r0], -r1
    25a0:	08003cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp, ip, sp}
    25a4:	00001ff2 	strdeq	r1, [r0], -r2
    25a8:	000025b3 			; <UNDEFINED> instruction: 0x000025b3
    25ac:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    25b0:	16006408 	strne	r6, [r0], -r8, lsl #8
    25b4:	08003d04 	stmdaeq	r0, {r2, r8, sl, fp, ip, sp}
    25b8:	000031cc 	andeq	r3, r0, ip, asr #3
    25bc:	000025d1 	ldrdeq	r2, [r0], -r1
    25c0:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    25c4:	1710000a 	ldrne	r0, [r0, -sl]
    25c8:	0c055001 	stceq	0, cr5, [r5], {1}
    25cc:	40010c00 	andmi	r0, r1, r0, lsl #24
    25d0:	3d0e1600 	stccc	6, cr1, [lr, #-0]
    25d4:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    25d8:	25ef0000 	strbcs	r0, [pc, #0]!	; 25e0 <__Stack_Size+0x21e0>
    25dc:	01170000 	tsteq	r7, r0
    25e0:	000a0351 	andeq	r0, sl, r1, asr r3
    25e4:	50011720 	andpl	r1, r1, r0, lsr #14
    25e8:	10000c05 	andne	r0, r0, r5, lsl #24
    25ec:	16004001 	strne	r4, [r0], -r1
    25f0:	08003d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, ip, sp}
    25f4:	00001ff2 	strdeq	r1, [r0], -r2
    25f8:	00002603 	andeq	r2, r0, r3, lsl #12
    25fc:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2600:	16006408 	strne	r6, [r0], -r8, lsl #8
    2604:	08003d1a 	stmdaeq	r0, {r1, r3, r4, r8, sl, fp, ip, sp}
    2608:	00000b48 	andeq	r0, r0, r8, asr #22
    260c:	0000261a 	andeq	r2, r0, sl, lsl r6
    2610:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2614:	00637d03 	rsbeq	r7, r3, r3, lsl #26
    2618:	20160008 	andscs	r0, r6, r8
    261c:	b908003d 	stmdblt	r8, {r0, r2, r3, r4, r5}
    2620:	2d000012 	stccs	0, cr0, [r0, #-72]	; 0xffffffb8
    2624:	17000026 	strne	r0, [r0, -r6, lsr #32]
    2628:	34015001 	strcc	r5, [r1], #-1
    262c:	3d261a00 	vstmdbcc	r6!, {s2-s1}
    2630:	12b90800 	adcsne	r0, r9, #0, 16
    2634:	01170000 	tsteq	r7, r0
    2638:	00330150 	eorseq	r0, r3, r0, asr r1
    263c:	02031300 	andeq	r1, r3, #0, 6
    2640:	0b010000 	bleq	42648 <__Stack_Size+0x42248>
    2644:	003d4403 	eorseq	r4, sp, r3, lsl #8
    2648:	00003408 	andeq	r3, r0, r8, lsl #8
    264c:	e39c0100 	orrs	r0, ip, #0, 2
    2650:	1e000026 	cdpne	0, 0, cr0, cr0, cr6, {1}
    2654:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    2658:	d0030b01 	andle	r0, r3, r1, lsl #22
    265c:	6b000006 	blvs	267c <__Stack_Size+0x227c>
    2660:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    2664:	00000d65 	andeq	r0, r0, r5, ror #26
    2668:	e7030b01 	str	r0, [r3, -r1, lsl #22]
    266c:	97000014 	smladls	r0, r4, r0, r0
    2670:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    2674:	00000d71 	andeq	r0, r0, r1, ror sp
    2678:	e7030b01 	str	r0, [r3, -r1, lsl #22]
    267c:	c3000014 	movwgt	r0, #20
    2680:	1600000c 	strne	r0, [r0], -ip
    2684:	08003d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp, ip, sp}
    2688:	00000e9a 	muleq	r0, sl, lr
    268c:	0000269d 	muleq	r0, sp, r6
    2690:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2694:	1702bc0a 	strne	fp, [r2, -sl, lsl #24]
    2698:	34015001 	strcc	r5, [r1], #-1
    269c:	3d5e1600 	ldclcc	6, cr1, [lr, #-0]
    26a0:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
    26a4:	26b70000 	ldrtcs	r0, [r7], r0
    26a8:	01170000 	tsteq	r7, r0
    26ac:	440b0351 	strmi	r0, [fp], #-849	; 0x351
    26b0:	500117fd 	strdpl	r1, [r1], -sp
    26b4:	16003301 	strne	r3, [r0], -r1, lsl #6
    26b8:	08003d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, ip, sp}
    26bc:	00001ff2 	strdeq	r1, [r0], -r2
    26c0:	000026cc 	andeq	r2, r0, ip, asr #13
    26c4:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    26c8:	0003e80a 	andeq	lr, r3, sl, lsl #16
    26cc:	003d6e1a 	eorseq	r6, sp, sl, lsl lr
    26d0:	00116d08 	andseq	r6, r1, r8, lsl #26
    26d4:	51011700 	tstpl	r1, r0, lsl #14
    26d8:	17007502 	strne	r7, [r0, -r2, lsl #10]
    26dc:	76025001 	strvc	r5, [r2], -r1
    26e0:	26000000 	strcs	r0, [r0], -r0
    26e4:	0000066b 	andeq	r0, r0, fp, ror #12
    26e8:	08003d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, sp}
    26ec:	00000048 	andeq	r0, r0, r8, asr #32
    26f0:	27c09c01 	strbcs	r9, [r0, r1, lsl #24]
    26f4:	78270000 	stmdavc	r7!, {}	; <UNPREDICTABLE>
    26f8:	ef000006 	svc	0x00000006
    26fc:	2700000c 	strcs	r0, [r0, -ip]
    2700:	00000684 	andeq	r0, r0, r4, lsl #13
    2704:	00000d34 	andeq	r0, r0, r4, lsr sp
    2708:	0000002d 	andeq	r0, r0, sp, lsr #32
    270c:	0027a900 	eoreq	sl, r7, r0, lsl #18
    2710:	06782700 	ldrbteq	r2, [r8], -r0, lsl #14
    2714:	0d790000 	ldcleq	0, cr0, [r9, #-0]
    2718:	84270000 	strthi	r0, [r7], #-0
    271c:	9a000006 	bls	273c <__Stack_Size+0x233c>
    2720:	2e00000d 	cdpcs	0, 0, cr0, cr0, cr13, {0}
    2724:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    2728:	08003d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, sp}
    272c:	00000006 	andeq	r0, r0, r6
    2730:	52032b01 	andpl	r2, r3, #1024	; 0x400
    2734:	27000027 	strcs	r0, [r0, -r7, lsr #32]
    2738:	00000fc2 	andeq	r0, r0, r2, asr #31
    273c:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
    2740:	003d9e1a 	eorseq	r9, sp, sl, lsl lr
    2744:	000f5e08 	andeq	r5, pc, r8, lsl #28
    2748:	50011700 	andpl	r1, r1, r0, lsl #14
    274c:	fc010b03 	stc2	11, cr0, [r1], {3}
    2750:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
    2754:	4b08003d 	blmi	202850 <__Stack_Size+0x202450>
    2758:	16000013 			; <UNDEFINED> instruction: 0x16000013
    275c:	08003d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, sp}
    2760:	000031b6 			; <UNDEFINED> instruction: 0x000031b6
    2764:	00002779 	andeq	r2, r0, r9, ror r7
    2768:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    276c:	1740000a 	strbne	r0, [r0, -sl]
    2770:	0c055001 	stceq	0, cr5, [r5], {1}
    2774:	40011000 	andmi	r1, r1, r0
    2778:	3da61600 	stccc	6, cr1, [r6]
    277c:	1ff20800 	svcne	0x00f20800
    2780:	278e0000 	strcs	r0, [lr, r0]
    2784:	01170000 	tsteq	r7, r0
    2788:	e80a0350 	stmda	sl, {r4, r6, r8, r9}
    278c:	aa150003 	bge	5427a0 <__Stack_Size+0x5423a0>
    2790:	fe08003d 	mcr2	0, 0, r0, cr8, cr13, {1}
    2794:	1b00000f 	blne	27d8 <__Stack_Size+0x23d8>
    2798:	08003db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, ip, sp}
    279c:	00001ff2 	strdeq	r1, [r0], -r2
    27a0:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    27a4:	000bb80a 	andeq	fp, fp, sl, lsl #16
    27a8:	3d841a00 	vstrcc	s2, [r4]
    27ac:	181b0800 	ldmdane	fp, {fp}
    27b0:	01170000 	tsteq	r7, r0
    27b4:	00750251 	rsbseq	r0, r5, r1, asr r2
    27b8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    27bc:	00006408 	andeq	r6, r0, r8, lsl #8
    27c0:	000baf13 	andeq	sl, fp, r3, lsl pc
    27c4:	03d00100 	bicseq	r0, r0, #0, 2
    27c8:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
    27cc:	0000007c 	andeq	r0, r0, ip, ror r0
    27d0:	28da9c01 	ldmcs	sl, {r0, sl, fp, ip, pc}^
    27d4:	fc1e0000 	ldc2	0, cr0, [lr], {-0}
    27d8:	01000006 	tsteq	r0, r6
    27dc:	006903d0 	ldrdeq	r0, [r9], #-48	; 0xffffffd0	; <UNPREDICTABLE>
    27e0:	0dd10000 	ldcleq	0, cr0, [r1]
    27e4:	df1e0000 	svcle	0x001e0000
    27e8:	01000000 	mrseq	r0, (UNDEF: 0)
    27ec:	004503d0 	ldrdeq	r0, [r5], #-48	; 0xffffffd0
    27f0:	0df20000 	ldcleq	0, cr0, [r2]
    27f4:	9f190000 	svcls	0x00190000
    27f8:	01000005 	tsteq	r0, r5
    27fc:	066003d3 			; <UNDEFINED> instruction: 0x066003d3
    2800:	91020000 	mrsls	r0, (UNDEF: 2)
    2804:	3dce1660 	stclcc	6, cr1, [lr, #384]	; 0x180
    2808:	34550800 	ldrbcc	r0, [r5], #-2048	; 0x800
    280c:	28190000 	ldmdacs	r9, {}	; <UNPREDICTABLE>
    2810:	01170000 	tsteq	r7, r0
    2814:	007d0250 	rsbseq	r0, sp, r0, asr r2
    2818:	3df01600 	ldclcc	6, cr1, [r0]
    281c:	346c0800 	strbtcc	r0, [ip], #-2048	; 0x800
    2820:	28300000 	ldmdacs	r0!, {}	; <UNPREDICTABLE>
    2824:	01170000 	tsteq	r7, r0
    2828:	000c0550 	andeq	r0, ip, r0, asr r5
    282c:	00400138 	subeq	r0, r0, r8, lsr r1
    2830:	003df616 	eorseq	pc, sp, r6, lsl r6	; <UNPREDICTABLE>
    2834:	001ff208 	andseq	pc, pc, r8, lsl #4
    2838:	00284300 	eoreq	r4, r8, r0, lsl #6
    283c:	50011700 	andpl	r1, r1, r0, lsl #14
    2840:	16003a01 	strne	r3, [r0], -r1, lsl #20
    2844:	08003dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    2848:	0000347d 	andeq	r3, r0, sp, ror r4
    284c:	00002860 	andeq	r2, r0, r0, ror #16
    2850:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2854:	0117007d 	tsteq	r7, sp, ror r0
    2858:	000c0550 	andeq	r0, ip, r0, asr r5
    285c:	00400138 	subeq	r0, r0, r8, lsr r1
    2860:	003e0a16 	eorseq	r0, lr, r6, lsl sl
    2864:	00349308 	eorseq	r9, r4, r8, lsl #6
    2868:	00288300 	eoreq	r8, r8, r0, lsl #6
    286c:	52011700 	andpl	r1, r1, #0, 14
    2870:	01173101 	tsteq	r7, r1, lsl #2
    2874:	250a0351 	strcs	r0, [sl, #-849]	; 0x351
    2878:	50011705 	andpl	r1, r1, r5, lsl #14
    287c:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    2880:	16004001 	strne	r4, [r0], -r1
    2884:	08003e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, sp}
    2888:	0000346c 	andeq	r3, r0, ip, ror #8
    288c:	0000289a 	muleq	r0, sl, r8
    2890:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    2894:	0048000c 	subeq	r0, r8, ip
    2898:	1e160040 	cdpne	0, 1, cr0, cr6, cr0, {2}
    289c:	f208003e 	vqadd.s8	d0, d8, d30
    28a0:	ad00001f 	stcge	0, cr0, [r0, #-124]	; 0xffffff84
    28a4:	17000028 	strne	r0, [r0, -r8, lsr #32]
    28a8:	3a015001 	bcc	568b4 <__Stack_Size+0x564b4>
    28ac:	3e261600 	cfmadda32cc	mvax0, mvax1, mvfx6, mvfx0
    28b0:	347d0800 	ldrbtcc	r0, [sp], #-2048	; 0x800
    28b4:	28ca0000 	stmiacs	sl, {}^	; <UNPREDICTABLE>
    28b8:	01170000 	tsteq	r7, r0
    28bc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    28c0:	05500117 	ldrbeq	r0, [r0, #-279]	; 0x117
    28c4:	0048000c 	subeq	r0, r8, ip
    28c8:	2e1a0040 	cdpcs	0, 1, cr0, cr10, cr0, {2}
    28cc:	e208003e 	and	r0, r8, #62	; 0x3e
    28d0:	17000031 	smladxne	r0, r1, r0, r0
    28d4:	31015101 	tstcc	r1, r1, lsl #2
    28d8:	58280000 	stmdapl	r8!, {}	; <UNPREDICTABLE>
    28dc:	01000001 	tsteq	r0, r1
    28e0:	3e3c026a 	cdpcc	2, 3, cr0, cr12, cr10, {3}
    28e4:	00300800 	eorseq	r0, r0, r0, lsl #16
    28e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    28ec:	00002945 	andeq	r2, r0, r5, asr #18
    28f0:	003e4215 	eorseq	r4, lr, r5, lsl r2
    28f4:	0006d608 	andeq	sp, r6, r8, lsl #12
    28f8:	3e461500 	cdpcc	5, 4, cr1, cr6, cr0, {0}
    28fc:	082e0800 	stmdaeq	lr!, {fp}
    2900:	4a150000 	bmi	542908 <__Stack_Size+0x542508>
    2904:	a908003e 	stmdbge	r8, {r1, r2, r3, r4, r5}
    2908:	15000008 	strne	r0, [r0, #-8]
    290c:	08003e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, sp}
    2910:	00001fa5 	andeq	r1, r0, r5, lsr #31
    2914:	003e5215 	eorseq	r5, lr, r5, lsl r2
    2918:	001dd308 	andseq	sp, sp, r8, lsl #6
    291c:	3e5a1600 	cdpcc	6, 5, cr1, cr10, cr0, {0}
    2920:	34ae0800 	strtcc	r0, [lr], #2048	; 0x800
    2924:	29350000 	ldmdbcs	r5!, {}	; <UNPREDICTABLE>
    2928:	01170000 	tsteq	r7, r0
    292c:	17310151 			; <UNDEFINED> instruction: 0x17310151
    2930:	30015001 	andcc	r5, r1, r1
    2934:	3e681b00 	vmulcc.f64	d17, d8, d0
    2938:	27c00800 	strbcs	r0, [r0, r0, lsl #16]
    293c:	01170000 	tsteq	r7, r0
    2940:	00320150 	eorseq	r0, r2, r0, asr r1
    2944:	06601300 	strbteq	r1, [r0], -r0, lsl #6
    2948:	cb010000 	blgt	42950 <__Stack_Size+0x42550>
    294c:	003e6c03 	eorseq	r6, lr, r3, lsl #24
    2950:	00000808 	andeq	r0, r0, r8, lsl #16
    2954:	829c0100 	addshi	r0, ip, #0, 2
    2958:	1e000029 	cdpne	0, 0, cr0, cr0, cr9, {1}
    295c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2960:	4503cb01 	strmi	ip, [r3, #-2817]	; 0xb01
    2964:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2968:	1b00000e 	blne	29a8 <__Stack_Size+0x25a8>
    296c:	08003e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, sp}
    2970:	000027c0 	andeq	r2, r0, r0, asr #15
    2974:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2978:	175001f3 	smmlsrne	r0, r3, r1, r0
    297c:	30015001 	andcc	r5, r1, r1
    2980:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 2988 <__Stack_Size+0x2588>
    2984:	0100000a 	tsteq	r0, sl
    2988:	069101d2 			; <UNDEFINED> instruction: 0x069101d2
    298c:	5fc80000 	svcpl	0x00c80000
    2990:	01540800 	cmpeq	r4, r0, lsl #16
    2994:	9c010000 	stcls	0, cr0, [r1], {-0}
    2998:	00002e91 	muleq	r0, r1, lr
    299c:	0001582f 	andeq	r5, r1, pc, lsr #16
    29a0:	01d70100 	bicseq	r0, r7, r0, lsl #2
    29a4:	00000691 	muleq	r0, r1, r6
    29a8:	000029ae 	andeq	r2, r0, lr, lsr #19
    29ac:	3d30002b 	ldccc	0, cr0, [r0, #-172]!	; 0xffffff54
    29b0:	0100000a 	tsteq	r0, sl
    29b4:	069101dd 			; <UNDEFINED> instruction: 0x069101dd
    29b8:	30320000 	eorscc	r0, r2, r0
    29bc:	00000b2b 	andeq	r0, r0, fp, lsr #22
    29c0:	9101de01 	tstls	r1, r1, lsl #28
    29c4:	fa000006 	blx	29e4 <__Stack_Size+0x25e4>
    29c8:	0001c214 	andeq	ip, r1, r4, lsl r2
    29cc:	01e20100 	mvneq	r0, r0, lsl #2
    29d0:	00000691 	muleq	r0, r1, r6
    29d4:	00000e4a 	andeq	r0, r0, sl, asr #28
    29d8:	00017a19 	andeq	r7, r1, r9, lsl sl
    29dc:	01ea0100 	mvneq	r0, r0, lsl #2
    29e0:	00000073 	andeq	r0, r0, r3, ror r0
    29e4:	195a9102 	ldmdbne	sl, {r1, r8, ip, pc}^
    29e8:	00000176 	andeq	r0, r0, r6, ror r1
    29ec:	7301eb01 	movwvc	lr, #6913	; 0x1b01
    29f0:	02000000 	andeq	r0, r0, #0
    29f4:	bb195b91 	bllt	659840 <__Stack_Size+0x659440>
    29f8:	01000001 	tsteq	r0, r1
    29fc:	069101f1 			; <UNDEFINED> instruction: 0x069101f1
    2a00:	91020000 	mrsls	r0, (UNDEF: 2)
    2a04:	0d65195c 	stcleq	9, cr1, [r5, #-368]!	; 0xfffffe90
    2a08:	f2010000 	vhadd.s8	d0, d1, d0
    2a0c:	0014e701 	andseq	lr, r4, r1, lsl #14
    2a10:	60910200 	addsvs	r0, r1, r0, lsl #4
    2a14:	000d7119 	andeq	r7, sp, r9, lsl r1
    2a18:	01f30100 	mvnseq	r0, r0, lsl #2
    2a1c:	000014e7 	andeq	r1, r0, r7, ror #9
    2a20:	14649102 	strbtne	r9, [r4], #-258	; 0x102
    2a24:	00000234 	andeq	r0, r0, r4, lsr r2
    2a28:	9101f601 	tstls	r1, r1, lsl #12	; <UNPREDICTABLE>
    2a2c:	8d000006 	stchi	0, cr0, [r0, #-24]	; 0xffffffe8
    2a30:	1400000e 	strne	r0, [r0], #-14
    2a34:	0000023f 	andeq	r0, r0, pc, lsr r2
    2a38:	9101f701 	tstls	r1, r1, lsl #14	; <UNPREDICTABLE>
    2a3c:	ae000006 	cdpge	0, 0, cr0, cr0, cr6, {0}
    2a40:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    2a44:	00000018 	andeq	r0, r0, r8, lsl r0
    2a48:	00002acf 	andeq	r2, r0, pc, asr #21
    2a4c:	0001802f 	andeq	r8, r1, pc, lsr #32
    2a50:	01ff0100 	mvnseq	r0, r0, lsl #2
    2a54:	00000691 	muleq	r0, r1, r6
    2a58:	00002a5e 	andeq	r2, r0, lr, asr sl
    2a5c:	5f2f002b 	svcpl	0x002f002b
    2a60:	01000005 	tsteq	r0, r5
    2a64:	06910201 	ldreq	r0, [r1], r1, lsl #4
    2a68:	2a700000 	bcs	1c02a70 <__Stack_Size+0x1c02670>
    2a6c:	002b0000 	eoreq	r0, fp, r0
    2a70:	000d6519 	andeq	r6, sp, r9, lsl r5
    2a74:	02030100 	andeq	r0, r3, #0, 2
    2a78:	000014e7 	andeq	r1, r0, r7, ror #9
    2a7c:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
    2a80:	00000d71 	andeq	r0, r0, r1, ror sp
    2a84:	e7020401 	str	r0, [r2, -r1, lsl #8]
    2a88:	02000014 	andeq	r0, r0, #20
    2a8c:	18156c91 	ldmdane	r5, {r0, r4, r7, sl, fp, sp, lr}
    2a90:	f4080060 	vst4.16	{d0-d3}, [r8 :128], r0
    2a94:	15000020 	strne	r0, [r0, #-32]
    2a98:	0800601c 	stmdaeq	r0, {r2, r3, r4, sp, lr}
    2a9c:	0000235b 	andeq	r2, r0, fp, asr r3
    2aa0:	00602416 	rsbeq	r2, r0, r6, lsl r4
    2aa4:	0014ee08 	andseq	lr, r4, r8, lsl #28
    2aa8:	002ab900 	eoreq	fp, sl, r0, lsl #18
    2aac:	51011700 	tstpl	r1, r0, lsl #14
    2ab0:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
    2ab4:	32015001 	andcc	r5, r1, #1
    2ab8:	602c1a00 	eorvs	r1, ip, r0, lsl #20
    2abc:	14ee0800 	strbtne	r0, [lr], #2048	; 0x800
    2ac0:	01170000 	tsteq	r7, r0
    2ac4:	6c910251 	lfmvs	f0, 4, [r1], {81}	; 0x51
    2ac8:	01500117 	cmpeq	r0, r7, lsl r1
    2acc:	2d000031 	stccs	0, cr0, [r0, #-196]	; 0xffffff3c
    2ad0:	00000030 	andeq	r0, r0, r0, lsr r0
    2ad4:	00002b4a 	andeq	r2, r0, sl, asr #22
    2ad8:	0006892f 	andeq	r8, r6, pc, lsr #18
    2adc:	02100100 	andseq	r0, r0, #0, 2
    2ae0:	00000691 	muleq	r0, r1, r6
    2ae4:	00002aea 	andeq	r2, r0, sl, ror #21
    2ae8:	532f002b 			; <UNDEFINED> instruction: 0x532f002b
    2aec:	01000009 	tsteq	r0, r9
    2af0:	06910212 			; <UNDEFINED> instruction: 0x06910212
    2af4:	2afc0000 	bcs	fff02afc <SCS_BASE+0x1fef4afc>
    2af8:	002b0000 	eoreq	r0, fp, r0
    2afc:	00603415 	rsbeq	r3, r0, r5, lsl r4
    2b00:	00134b08 	andseq	r4, r3, r8, lsl #22
    2b04:	603e1600 	eorsvs	r1, lr, r0, lsl #12
    2b08:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    2b0c:	2b230000 	blcs	8c2b14 <__Stack_Size+0x8c2714>
    2b10:	01170000 	tsteq	r7, r0
    2b14:	000a0351 	andeq	r0, sl, r1, asr r3
    2b18:	50011720 	andpl	r1, r1, r0, lsr #14
    2b1c:	0c000c05 	stceq	12, cr0, [r0], {5}
    2b20:	16004001 	strne	r4, [r0], -r1
    2b24:	08006046 	stmdaeq	r0, {r1, r2, r6, sp, lr}
    2b28:	00000f5e 	andeq	r0, r0, lr, asr pc
    2b2c:	00002b38 	andeq	r2, r0, r8, lsr fp
    2b30:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    2b34:	0002bc0a 	andeq	fp, r2, sl, lsl #24
    2b38:	0060521a 	rsbeq	r5, r0, sl, lsl r2
    2b3c:	001ff208 	andseq	pc, pc, r8, lsl #4
    2b40:	50011700 	andpl	r1, r1, r0, lsl #14
    2b44:	05dc0a03 	ldrbeq	r0, [ip, #2563]	; 0xa03
    2b48:	52310000 	eorspl	r0, r1, #0
    2b4c:	40080060 	andmi	r0, r8, r0, rrx
    2b50:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2b54:	2f00002c 	svccs	0x0000002c
    2b58:	00000689 	andeq	r0, r0, r9, lsl #13
    2b5c:	91021001 	tstls	r2, r1
    2b60:	69000006 	stmdbvs	r0, {r1, r2}
    2b64:	2b00002b 	blcs	2c18 <__Stack_Size+0x2818>
    2b68:	01f82f00 	mvnseq	r2, r0, lsl #30
    2b6c:	24010000 	strcs	r0, [r1], #-0
    2b70:	00069102 	andeq	r9, r6, r2, lsl #2
    2b74:	002b7b00 	eoreq	r7, fp, r0, lsl #22
    2b78:	2f002b00 	svccs	0x00002b00
    2b7c:	0000061f 	andeq	r0, r0, pc, lsl r6
    2b80:	91022801 	tstls	r2, r1, lsl #16
    2b84:	8d000006 	stchi	0, cr0, [r0, #-24]	; 0xffffffe8
    2b88:	2b00002b 	blcs	2c3c <__Stack_Size+0x283c>
    2b8c:	605a3100 	subsvs	r3, sl, r0, lsl #2
    2b90:	000a0800 	andeq	r0, sl, r0, lsl #16
    2b94:	2bbd0000 	blcs	fef42b9c <SCS_BASE+0x1ef34b9c>
    2b98:	032f0000 			; <UNDEFINED> instruction: 0x032f0000
    2b9c:	01000002 	tsteq	r0, r2
    2ba0:	0691021e 			; <UNDEFINED> instruction: 0x0691021e
    2ba4:	2bac0000 	blcs	feb02bac <SCS_BASE+0x1eaf4bac>
    2ba8:	002b0000 	eoreq	r0, fp, r0
    2bac:	0060641a 	rsbeq	r6, r0, sl, lsl r4
    2bb0:	00263d08 	eoreq	r3, r6, r8, lsl #26
    2bb4:	50011700 	andpl	r1, r1, r0, lsl #14
    2bb8:	005c9102 	subseq	r9, ip, r2, lsl #2
    2bbc:	60681500 	rsbvs	r1, r8, r0, lsl #10
    2bc0:	134b0800 	movtne	r0, #47104	; 0xb800
    2bc4:	72160000 	andsvc	r0, r6, #0
    2bc8:	b6080060 	strlt	r0, [r8], -r0, rrx
    2bcc:	e4000031 	str	r0, [r0], #-49	; 0x31
    2bd0:	1700002b 	strne	r0, [r0, -fp, lsr #32]
    2bd4:	0a035101 	beq	d6fe0 <__Stack_Size+0xd6be0>
    2bd8:	01174000 	tsteq	r7, r0
    2bdc:	000c0550 	andeq	r0, ip, r0, asr r5
    2be0:	0040010c 	subeq	r0, r0, ip, lsl #2
    2be4:	00607615 	rsbeq	r7, r0, r5, lsl r6
    2be8:	000ffe08 	andeq	pc, pc, r8, lsl #28
    2bec:	60801600 	addvs	r1, r0, r0, lsl #12
    2bf0:	18f30800 	ldmne	r3!, {fp}^
    2bf4:	2c070000 	stccs	0, cr0, [r7], {-0}
    2bf8:	01170000 	tsteq	r7, r0
    2bfc:	5a910251 	bpl	fe443548 <SCS_BASE+0x1e435548>
    2c00:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2c04:	1a006408 	bne	1bc2c <__Stack_Size+0x1b82c>
    2c08:	0800608a 	stmdaeq	r0, {r1, r3, r7, sp, lr}
    2c0c:	0000066b 	andeq	r0, r0, fp, ror #12
    2c10:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2c14:	01175b91 			; <UNDEFINED> instruction: 0x01175b91
    2c18:	fa080250 	blx	203560 <__Stack_Size+0x203160>
    2c1c:	92310000 	eorsls	r0, r1, #0
    2c20:	7c080060 	stcvc	0, cr0, [r8], {96}	; 0x60
    2c24:	cf000000 	svcgt	0x00000000
    2c28:	2f00002d 	svccs	0x0000002d
    2c2c:	00000953 	andeq	r0, r0, r3, asr r9
    2c30:	91021201 	tstls	r2, r1, lsl #4
    2c34:	3d000006 	stccc	0, cr0, [r0, #-24]	; 0xffffffe8
    2c38:	2b00002c 	blcs	2cf0 <__Stack_Size+0x28f0>
    2c3c:	061f2f00 	ldreq	r2, [pc], -r0, lsl #30
    2c40:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2c44:	00069102 	andeq	r9, r6, r2, lsl #2
    2c48:	002c4f00 	eoreq	r4, ip, r0, lsl #30
    2c4c:	31002b00 	tstcc	r0, r0, lsl #22
    2c50:	080060bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, lr}
    2c54:	0000000c 	andeq	r0, r0, ip
    2c58:	00002cb1 			; <UNDEFINED> instruction: 0x00002cb1
    2c5c:	00070a2f 	andeq	r0, r7, pc, lsr #20
    2c60:	02390100 	eorseq	r0, r9, #0, 2
    2c64:	00000691 	muleq	r0, r1, r6
    2c68:	00002c6e 	andeq	r2, r0, lr, ror #24
    2c6c:	9e32002b 	cdpls	0, 3, cr0, cr2, cr11, {1}
    2c70:	bc000006 	stclt	0, cr0, [r0], {6}
    2c74:	0c080060 	stceq	0, cr0, [r8], {96}	; 0x60
    2c78:	01000000 	mrseq	r0, (UNDEF: 0)
    2c7c:	c3270239 			; <UNDEFINED> instruction: 0xc3270239
    2c80:	cf000006 	svcgt	0x00000006
    2c84:	2700000e 	strcs	r0, [r0, -lr]
    2c88:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    2c8c:	00000ee2 	andeq	r0, r0, r2, ror #29
    2c90:	0006ab27 	andeq	sl, r6, r7, lsr #22
    2c94:	000ef500 	andeq	pc, lr, r0, lsl #10
    2c98:	60c41a00 	sbcvs	r1, r4, r0, lsl #20
    2c9c:	116d0800 	cmnne	sp, r0, lsl #16
    2ca0:	01170000 	tsteq	r7, r0
    2ca4:	00750251 	rsbseq	r0, r5, r1, asr r2
    2ca8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2cac:	00000074 	andeq	r0, r0, r4, ror r0
    2cb0:	60ce3100 	sbcvs	r3, lr, r0, lsl #2
    2cb4:	000a0800 	andeq	r0, sl, r0, lsl #16
    2cb8:	2ced0000 	stclcs	0, cr0, [sp]
    2cbc:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
    2cc0:	01000006 	tsteq	r0, r6
    2cc4:	0691023d 			; <UNDEFINED> instruction: 0x0691023d
    2cc8:	2cd00000 	ldclcs	0, cr0, [r0], {0}
    2ccc:	002b0000 	eoreq	r0, fp, r0
    2cd0:	0060d81a 	rsbeq	sp, r0, sl, lsl r8
    2cd4:	00158f08 	andseq	r8, r5, r8, lsl #30
    2cd8:	52011700 	andpl	r1, r1, #0, 14
    2cdc:	17007502 	strne	r7, [r0, -r2, lsl #10]
    2ce0:	74025101 	strvc	r5, [r2], #-257	; 0x101
    2ce4:	50011700 	andpl	r1, r1, r0, lsl #14
    2ce8:	005c9102 	subseq	r9, ip, r2, lsl #2
    2cec:	60de3100 	sbcsvs	r3, lr, r0, lsl #2
    2cf0:	000a0800 	andeq	r0, sl, r0, lsl #16
    2cf4:	2d1d0000 	ldccs	0, cr0, [sp, #-0]
    2cf8:	032f0000 			; <UNDEFINED> instruction: 0x032f0000
    2cfc:	01000002 	tsteq	r0, r2
    2d00:	0691021e 			; <UNDEFINED> instruction: 0x0691021e
    2d04:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    2d08:	002b0000 	eoreq	r0, fp, r0
    2d0c:	0060e81a 	rsbeq	lr, r0, sl, lsl r8
    2d10:	00263d08 	eoreq	r3, r6, r8, lsl #26
    2d14:	50011700 	andpl	r1, r1, r0, lsl #14
    2d18:	005c9102 	subseq	r9, ip, r2, lsl #2
    2d1c:	60ee3100 	rscvs	r3, lr, r0, lsl #2
    2d20:	000a0800 	andeq	r0, sl, r0, lsl #16
    2d24:	2d4d0000 	stclcs	0, cr0, [sp, #-0]
    2d28:	512f0000 			; <UNDEFINED> instruction: 0x512f0000
    2d2c:	01000007 	tsteq	r0, r7
    2d30:	06910246 	ldreq	r0, [r1], r6, asr #4
    2d34:	2d3c0000 	ldccs	0, cr0, [ip, #-0]
    2d38:	002b0000 	eoreq	r0, fp, r0
    2d3c:	0060f81a 	rsbeq	pc, r0, sl, lsl r8	; <UNPREDICTABLE>
    2d40:	00163308 	andseq	r3, r6, r8, lsl #6
    2d44:	50011700 	andpl	r1, r1, r0, lsl #14
    2d48:	005c9102 	subseq	r9, ip, r2, lsl #2
    2d4c:	609c1600 	addsvs	r1, ip, r0, lsl #12
    2d50:	31b60800 			; <UNDEFINED> instruction: 0x31b60800
    2d54:	2d6b0000 	stclcs	0, cr0, [fp, #-0]
    2d58:	01170000 	tsteq	r7, r0
    2d5c:	000a0351 	andeq	r0, sl, r1, asr r3
    2d60:	50011740 	andpl	r1, r1, r0, asr #14
    2d64:	10000c05 	andne	r0, r0, r5, lsl #24
    2d68:	16004001 	strne	r4, [r0], -r1
    2d6c:	080060a6 	stmdaeq	r0, {r1, r2, r5, r7, sp, lr}
    2d70:	000031b6 			; <UNDEFINED> instruction: 0x000031b6
    2d74:	00002d89 	andeq	r2, r0, r9, lsl #27
    2d78:	03510117 	cmpeq	r1, #-1073741819	; 0xc0000005
    2d7c:	1780000b 	strne	r0, [r0, fp]
    2d80:	0c055001 	stceq	0, cr5, [r5], {1}
    2d84:	40010c00 	andmi	r0, r1, r0, lsl #24
    2d88:	60ae1600 	adcvs	r1, lr, r0, lsl #12
    2d8c:	0f5e0800 	svceq	0x005e0800
    2d90:	2d9e0000 	ldccs	0, cr0, [lr]
    2d94:	01170000 	tsteq	r7, r0
    2d98:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    2d9c:	b8160003 	ldmdalt	r6, {r0, r1}
    2da0:	f3080060 	vhadd.u8	q0, q4, q8
    2da4:	b8000018 	stmdalt	r0, {r3, r4}
    2da8:	1700002d 	strne	r0, [r0, -sp, lsr #32]
    2dac:	91025101 	tstls	r2, r1, lsl #2
    2db0:	5001175a 	andpl	r1, r1, sl, asr r7
    2db4:	00640802 	rsbeq	r0, r4, r2, lsl #16
    2db8:	0061021a 	rsbeq	r0, r1, sl, lsl r2
    2dbc:	00066b08 	andeq	r6, r6, r8, lsl #22
    2dc0:	51011700 	tstpl	r1, r0, lsl #14
    2dc4:	175b9102 	ldrbne	r9, [fp, -r2, lsl #2]
    2dc8:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2dcc:	150000fa 	strne	r0, [r0, #-250]	; 0xfa
    2dd0:	08005fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip, lr}
    2dd4:	000028da 	ldrdeq	r2, [r0], -sl
    2dd8:	005fd616 	subseq	sp, pc, r6, lsl r6	; <UNPREDICTABLE>
    2ddc:	000b7e08 	andeq	r7, fp, r8, lsl #28
    2de0:	002deb00 	eoreq	lr, sp, r0, lsl #22
    2de4:	50011700 	andpl	r1, r1, r0, lsl #14
    2de8:	16003401 	strne	r3, [r0], -r1, lsl #8
    2dec:	08005fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
    2df0:	00000b7e 	andeq	r0, r0, lr, ror fp
    2df4:	00002dfe 	strdeq	r2, [r0], -lr
    2df8:	01500117 	cmpeq	r0, r7, lsl r1
    2dfc:	e6160033 			; <UNDEFINED> instruction: 0xe6160033
    2e00:	9a08005f 	bls	202f84 <__Stack_Size+0x202b84>
    2e04:	1800000e 	stmdane	r0, {r1, r2, r3}
    2e08:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    2e0c:	0a035101 	beq	d7218 <__Stack_Size+0xd6e18>
    2e10:	011702bc 			; <UNDEFINED> instruction: 0x011702bc
    2e14:	00340150 	eorseq	r0, r4, r0, asr r1
    2e18:	005ff016 	subseq	pc, pc, r6, lsl r0	; <UNPREDICTABLE>
    2e1c:	000e9a08 	andeq	r9, lr, r8, lsl #20
    2e20:	002e3200 	eoreq	r3, lr, r0, lsl #4
    2e24:	51011700 	tstpl	r1, r0, lsl #14
    2e28:	02bc0a03 	adcseq	r0, ip, #12288	; 0x3000
    2e2c:	01500117 	cmpeq	r0, r7, lsl r1
    2e30:	f8160033 			; <UNDEFINED> instruction: 0xf8160033
    2e34:	9a08005f 	bls	202fb8 <__Stack_Size+0x202bb8>
    2e38:	4a00000e 	bmi	2e78 <__Stack_Size+0x2a78>
    2e3c:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    2e40:	30015101 	andcc	r5, r1, r1, lsl #2
    2e44:	01500117 	cmpeq	r0, r7, lsl r1
    2e48:	00160034 	andseq	r0, r6, r4, lsr r0
    2e4c:	9a080060 	bls	202fd4 <__Stack_Size+0x202bd4>
    2e50:	6200000e 	andvs	r0, r0, #14
    2e54:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    2e58:	30015101 	andcc	r5, r1, r1, lsl #2
    2e5c:	01500117 	cmpeq	r0, r7, lsl r1
    2e60:	0c160033 	ldceq	0, cr0, [r6], {51}	; 0x33
    2e64:	ee080060 	cdp	0, 0, cr0, cr8, cr0, {3}
    2e68:	7b000014 	blvc	2ec0 <__Stack_Size+0x2ac0>
    2e6c:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    2e70:	91025101 	tstls	r2, r1, lsl #2
    2e74:	50011760 	andpl	r1, r1, r0, ror #14
    2e78:	1a003201 	bne	f684 <__Stack_Size+0xf284>
    2e7c:	08006014 	stmdaeq	r0, {r2, r4, sp, lr}
    2e80:	000014ee 	andeq	r1, r0, lr, ror #9
    2e84:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2e88:	01176491 			; <UNDEFINED> instruction: 0x01176491
    2e8c:	00310150 	eorseq	r0, r1, r0, asr r1
    2e90:	0a7f1300 	beq	1fc7a98 <__Stack_Size+0x1fc7698>
    2e94:	e1010000 	mrs	r0, (UNDEF: 1)
    2e98:	003e7404 	eorseq	r7, lr, r4, lsl #8
    2e9c:	00000c08 	andeq	r0, r0, r8, lsl #24
    2ea0:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    2ea4:	3300002e 	movwcc	r0, #46	; 0x2e
    2ea8:	00000028 	andeq	r0, r0, r8, lsr #32
    2eac:	2504e101 	strcs	lr, [r4, #-257]	; 0x101
    2eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2eb4:	071d0050 			; <UNDEFINED> instruction: 0x071d0050
    2eb8:	0100000a 	tsteq	r0, sl
    2ebc:	006904e6 	rsbeq	r0, r9, r6, ror #9
    2ec0:	3e800000 	cdpcc	0, 8, cr0, cr0, cr0, {0}
    2ec4:	00140800 	andseq	r0, r4, r0, lsl #16
    2ec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ecc:	00006934 	andeq	r6, r0, r4, lsr r9
    2ed0:	002edc00 	eoreq	sp, lr, r0, lsl #24
    2ed4:	01053500 	tsteq	r5, r0, lsl #10
    2ed8:	00ff0000 	rscseq	r0, pc, r0
    2edc:	00071936 	andeq	r1, r7, r6, lsr r9
    2ee0:	ed420100 	stfe	f0, [r2, #-0]
    2ee4:	0500002e 	streq	r0, [r0, #-46]	; 0x2e
    2ee8:	00001a03 	andeq	r1, r0, r3, lsl #20
    2eec:	2ecc0520 	cdpcs	5, 12, cr0, cr12, cr0, {1}
    2ef0:	a6360000 	ldrtge	r0, [r6], -r0
    2ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ef8:	002f0343 	eoreq	r0, pc, r3, asr #6
    2efc:	18030500 	stmdane	r3, {r8, sl}
    2f00:	05200000 	streq	r0, [r0, #-0]!
    2f04:	00000069 	andeq	r0, r0, r9, rrx
    2f08:	000d1336 	andeq	r1, sp, r6, lsr r3
    2f0c:	03430100 	movteq	r0, #12544	; 0x3100
    2f10:	0500002f 	streq	r0, [r0, #-47]	; 0x2f
    2f14:	00001903 	andeq	r1, r0, r3, lsl #18
    2f18:	052f3620 	streq	r3, [pc, #-1568]!	; 2900 <__Stack_Size+0x2500>
    2f1c:	44010000 	strmi	r0, [r1], #-0
    2f20:	0000007a 	andeq	r0, r0, sl, ror r0
    2f24:	01240305 			; <UNDEFINED> instruction: 0x01240305
    2f28:	df362000 	svcle	0x00362000
    2f2c:	01000004 	tsteq	r0, r4
    2f30:	00007a44 	andeq	r7, r0, r4, asr #20
    2f34:	20030500 	andcs	r0, r3, r0, lsl #10
    2f38:	36200001 	strtcc	r0, [r0], -r1
    2f3c:	00000124 	andeq	r0, r0, r4, lsr #2
    2f40:	00454501 	subeq	r4, r5, r1, lsl #10
    2f44:	03050000 	movweq	r0, #20480	; 0x5000
    2f48:	20000010 	andcs	r0, r0, r0, lsl r0
    2f4c:	0005ca36 	andeq	ip, r5, r6, lsr sl
    2f50:	45460100 	strbmi	r0, [r6, #-256]	; 0x100
    2f54:	05000000 	streq	r0, [r0, #-0]
    2f58:	00000403 	andeq	r0, r0, r3, lsl #8
    2f5c:	02643620 	rsbeq	r3, r4, #32, 12	; 0x2000000
    2f60:	47010000 	strmi	r0, [r1, -r0]
    2f64:	0000008a 	andeq	r0, r0, sl, lsl #1
    2f68:	00000305 	andeq	r0, r0, r5, lsl #6
    2f6c:	c7362000 	ldrgt	r2, [r6, -r0]!
    2f70:	01000003 	tsteq	r0, r3
    2f74:	00007a48 	andeq	r7, r0, r8, asr #20
    2f78:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2f7c:	34200001 	strtcc	r0, [r0], #-1
    2f80:	00000057 	andeq	r0, r0, r7, asr r0
    2f84:	00002f8f 	andeq	r2, r0, pc, lsl #31
    2f88:	00010535 	andeq	r0, r1, r5, lsr r5
    2f8c:	36000100 	strcc	r0, [r0], -r0, lsl #2
    2f90:	00000d8b 	andeq	r0, r0, fp, lsl #27
    2f94:	2f7f4901 	svccs	0x007f4901
    2f98:	03050000 	movweq	r0, #20480	; 0x5000
    2f9c:	2000000a 	andcs	r0, r0, sl
    2fa0:	0005c136 	andeq	ip, r5, r6, lsr r1
    2fa4:	574b0100 	strbpl	r0, [fp, -r0, lsl #2]
    2fa8:	05000000 	streq	r0, [r0, #-0]
    2fac:	00012e03 	andeq	r2, r1, r3, lsl #28
    2fb0:	07853620 	streq	r3, [r5, r0, lsr #12]
    2fb4:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2fb8:	00000057 	andeq	r0, r0, r7, asr r0
    2fbc:	012c0305 			; <UNDEFINED> instruction: 0x012c0305
    2fc0:	75362000 	ldrvc	r2, [r6, #-0]!
    2fc4:	01000006 	tsteq	r0, r6
    2fc8:	0000694d 	andeq	r6, r0, sp, asr #18
    2fcc:	2b030500 	blcs	c43d4 <__Stack_Size+0xc3fd4>
    2fd0:	36200001 	strtcc	r0, [r0], -r1
    2fd4:	00000404 	andeq	r0, r0, r4, lsl #8
    2fd8:	00694e01 	rsbeq	r4, r9, r1, lsl #28
    2fdc:	03050000 	movweq	r0, #20480	; 0x5000
    2fe0:	2000012a 	andcs	r0, r0, sl, lsr #2
    2fe4:	00646937 	rsbeq	r6, r4, r7, lsr r9
    2fe8:	00694f01 	rsbeq	r4, r9, r1, lsl #30
    2fec:	03050000 	movweq	r0, #20480	; 0x5000
    2ff0:	20000008 	andcs	r0, r0, r8
    2ff4:	0001b336 	andeq	fp, r1, r6, lsr r3
    2ff8:	69500100 	ldmdbvs	r0, {r8}^
    2ffc:	05000000 	streq	r0, [r0, #-0]
    3000:	00012903 	andeq	r2, r1, r3, lsl #18
    3004:	14433620 	strbne	r3, [r3], #-1568	; 0x620
    3008:	50010000 	andpl	r0, r1, r0
    300c:	00000069 	andeq	r0, r0, r9, rrx
    3010:	01280305 			; <UNDEFINED> instruction: 0x01280305
    3014:	3c382000 	ldccc	0, cr2, [r8], #-0
    3018:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    301c:	06a039fd 			; <UNDEFINED> instruction: 0x06a039fd
    3020:	fe090000 	cdp2	0, 0, cr0, cr9, cr0, {0}
    3024:	0000302e 	andeq	r3, r0, lr, lsr #32
    3028:	0000453a 	andeq	r4, r0, sl, lsr r5
    302c:	bd3b0000 	ldclt	0, cr0, [fp, #-0]
    3030:	09000002 	stmdbeq	r0, {r1}
    3034:	0000faff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
    3038:	04f13c00 	ldrbteq	r3, [r1], #3072	; 0xc00
    303c:	12090000 	andne	r0, r9, #0
    3040:	00305001 	eorseq	r5, r0, r1
    3044:	00453a00 	subeq	r3, r5, r0, lsl #20
    3048:	da3a0000 	ble	e83050 <__Stack_Size+0xe82c50>
    304c:	00000000 	andeq	r0, r0, r0
    3050:	0005f93c 	andeq	pc, r5, ip, lsr r9	; <UNPREDICTABLE>
    3054:	01130900 	tsteq	r3, r0, lsl #18
    3058:	00003067 	andeq	r3, r0, r7, rrx
    305c:	0000453a 	andeq	r4, r0, sl, lsr r5
    3060:	00da3a00 	sbcseq	r3, sl, r0, lsl #20
    3064:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3068:	0000044a 	andeq	r0, r0, sl, asr #8
    306c:	3078420a 	rsbscc	r4, r8, sl, lsl #4
    3070:	da3a0000 	ble	e83078 <__Stack_Size+0xe82c78>
    3074:	00000000 	andeq	r0, r0, r0
    3078:	00093b39 	andeq	r3, r9, r9, lsr fp
    307c:	89b60b00 	ldmibhi	r6!, {r8, r9, fp}
    3080:	3a000030 	bcc	3148 <__Stack_Size+0x2d48>
    3084:	00000045 	andeq	r0, r0, r5, asr #32
    3088:	08473900 	stmdaeq	r7, {r8, fp, ip, sp}^
    308c:	b40b0000 	strlt	r0, [fp], #-0
    3090:	0000309a 	muleq	r0, sl, r0
    3094:	0000453a 	andeq	r4, r0, sl, lsr r5
    3098:	9e3c0000 	cdpls	0, 3, cr0, cr12, cr0, {0}
    309c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    30a0:	30ac0106 	adccc	r0, ip, r6, lsl #2
    30a4:	453a0000 	ldrmi	r0, [sl, #-0]!
    30a8:	00000000 	andeq	r0, r0, r0
    30ac:	0002543c 	andeq	r5, r2, ip, lsr r4
    30b0:	01080900 	tsteq	r8, r0, lsl #18
    30b4:	000030be 	strheq	r3, [r0], -lr
    30b8:	0000453a 	andeq	r4, r0, sl, lsr r5
    30bc:	dd3c0000 	ldcle	0, cr0, [ip, #-0]
    30c0:	09000007 	stmdbeq	r0, {r0, r1, r2}
    30c4:	30d00107 	sbcscc	r0, r0, r7, lsl #2
    30c8:	453a0000 	ldrmi	r0, [sl, #-0]!
    30cc:	00000000 	andeq	r0, r0, r0
    30d0:	00018b3c 	andeq	r8, r1, ip, lsr fp
    30d4:	01020900 	tsteq	r2, r0, lsl #18
    30d8:	000030e7 	andeq	r3, r0, r7, ror #1
    30dc:	0000453a 	andeq	r4, r0, sl, lsr r5
    30e0:	00453a00 	subeq	r3, r5, r0, lsl #20
    30e4:	3c000000 	stccc	0, cr0, [r0], {-0}
    30e8:	00000cc6 	andeq	r0, r0, r6, asr #25
    30ec:	f9010309 			; <UNDEFINED> instruction: 0xf9010309
    30f0:	3a000030 	bcc	31b8 <__Stack_Size+0x2db8>
    30f4:	000000da 	ldrdeq	r0, [r0], -sl
    30f8:	08fe3d00 	ldmeq	lr!, {r8, sl, fp, ip, sp}^
    30fc:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    3100:	0000af01 	andeq	sl, r0, r1, lsl #30
    3104:	00310f00 	eorseq	r0, r1, r0, lsl #30
    3108:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    310c:	3c000000 	stccc	0, cr0, [r0], {-0}
    3110:	00000017 	andeq	r0, r0, r7, lsl r0
    3114:	21010409 	tstcs	r1, r9, lsl #8
    3118:	3a000031 	bcc	31e4 <__Stack_Size+0x2de4>
    311c:	00000045 	andeq	r0, r0, r5, asr #32
    3120:	0ad93e00 	beq	ff652928 <SCS_BASE+0x1f644928>
    3124:	05090000 	streq	r0, [r9, #-0]
    3128:	00006901 	andeq	r6, r0, r1, lsl #18
    312c:	0b503c00 	bleq	1412134 <__Stack_Size+0x1411d34>
    3130:	0f050000 	svceq	0x00050000
    3134:	00314401 	eorseq	r4, r1, r1, lsl #8
    3138:	00453a00 	subeq	r3, r5, r0, lsl #20
    313c:	453a0000 	ldrmi	r0, [sl, #-0]!
    3140:	00000000 	andeq	r0, r0, r0
    3144:	000cfa39 	andeq	pc, ip, r9, lsr sl	; <UNPREDICTABLE>
    3148:	55ff0500 	ldrbpl	r0, [pc, #1280]!	; 3650 <__Stack_Size+0x3250>
    314c:	3a000031 	bcc	3218 <__Stack_Size+0x2e18>
    3150:	00000045 	andeq	r0, r0, r5, asr #32
    3154:	080a3c00 	stmdaeq	sl, {sl, fp, ip, sp}
    3158:	00050000 	andeq	r0, r5, r0
    315c:	00316701 	eorseq	r6, r1, r1, lsl #14
    3160:	31673a00 	cmncc	r7, r0, lsl #20
    3164:	12000000 	andne	r0, r0, #0
    3168:	00054004 	andeq	r4, r5, r4
    316c:	00473900 	subeq	r3, r7, r0, lsl #18
    3170:	dc040000 	stcle	0, cr0, [r4], {-0}
    3174:	0000317e 	andeq	r3, r0, lr, ror r1
    3178:	00317e3a 	eorseq	r7, r1, sl, lsr lr
    317c:	04120000 	ldreq	r0, [r2], #-0
    3180:	000004fc 	strdeq	r0, [r0], -ip
    3184:	00024a39 	andeq	r4, r2, r9, lsr sl
    3188:	9adb0400 	bls	ff6c4190 <SCS_BASE+0x1f6b6190>
    318c:	3a000031 	bcc	3258 <__Stack_Size+0x2e58>
    3190:	0000319a 	muleq	r0, sl, r1
    3194:	00317e3a 	eorseq	r7, r1, sl, lsr lr
    3198:	04120000 	ldreq	r0, [r2], #-0
    319c:	00000171 	andeq	r0, r0, r1, ror r1
    31a0:	00041939 	andeq	r1, r4, r9, lsr r9
    31a4:	b6e80400 	strbtlt	r0, [r8], r0, lsl #8
    31a8:	3a000031 	bcc	3274 <__Stack_Size+0x2e74>
    31ac:	00000045 	andeq	r0, r0, r5, asr #32
    31b0:	0000da3a 	andeq	sp, r0, sl, lsr sl
    31b4:	38390000 	ldmdacc	r9!, {}	; <UNPREDICTABLE>
    31b8:	04000008 	streq	r0, [r0], #-8
    31bc:	0031cce2 	eorseq	ip, r1, r2, ror #25
    31c0:	319a3a00 	orrscc	r3, sl, r0, lsl #20
    31c4:	573a0000 	ldrpl	r0, [sl, -r0]!
    31c8:	00000000 	andeq	r0, r0, r0
    31cc:	0003f739 	andeq	pc, r3, r9, lsr r7	; <UNPREDICTABLE>
    31d0:	e2e10400 	rsc	r0, r1, #0, 8
    31d4:	3a000031 	bcc	32a0 <__Stack_Size+0x2ea0>
    31d8:	0000319a 	muleq	r0, sl, r1
    31dc:	0000573a 	andeq	r5, r0, sl, lsr r7
    31e0:	32390000 	eorscc	r0, r9, #0
    31e4:	07000000 	streq	r0, [r0, -r0]
    31e8:	0031f8e4 	eorseq	pc, r1, r4, ror #17
    31ec:	31f83a00 	mvnscc	r3, r0, lsl #20
    31f0:	da3a0000 	ble	e831f8 <__Stack_Size+0xe82df8>
    31f4:	00000000 	andeq	r0, r0, r0
    31f8:	04580412 	ldrbeq	r0, [r8], #-1042	; 0x412
    31fc:	cf390000 	svcgt	0x00390000
    3200:	07000003 	streq	r0, [r0, -r3]
    3204:	003214ec 	eorseq	r1, r2, ip, ror #9
    3208:	31f83a00 	mvnscc	r3, r0, lsl #20
    320c:	573a0000 	ldrpl	r0, [sl, -r0]!
    3210:	00000000 	andeq	r0, r0, r0
    3214:	0007ed3f 	andeq	lr, r7, pc, lsr sp
    3218:	aff60700 	svcge	0x00f60700
    321c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3220:	3a000032 	bcc	32f0 <__Stack_Size+0x2ef0>
    3224:	000031f8 	strdeq	r3, [r0], -r8
    3228:	0000573a 	andeq	r5, r0, sl, lsr r7
    322c:	81390000 	teqhi	r9, r0
    3230:	0c000004 	stceq	0, cr0, [r0], {4}
    3234:	00324949 	eorseq	r4, r2, r9, asr #18
    3238:	06913a00 	ldreq	r3, [r1], r0, lsl #20
    323c:	913a0000 	teqls	sl, r0
    3240:	3a000006 	bcc	3260 <__Stack_Size+0x2e60>
    3244:	00000691 	muleq	r0, r1, r6
    3248:	07ad3b00 	streq	r3, [sp, r0, lsl #22]!
    324c:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    3250:	00000691 	muleq	r0, r1, r6
    3254:	000e343f 	andeq	r3, lr, pc, lsr r4
    3258:	91210c00 			; <UNDEFINED> instruction: 0x91210c00
    325c:	69000006 	stmdbvs	r0, {r1, r2}
    3260:	3a000032 	bcc	3330 <__Stack_Size+0x2f30>
    3264:	00000691 	muleq	r0, r1, r6
    3268:	042d3900 	strteq	r3, [sp], #-2304	; 0x900
    326c:	470c0000 	strmi	r0, [ip, -r0]
    3270:	00003284 	andeq	r3, r0, r4, lsl #5
    3274:	0006913a 	andeq	r9, r6, sl, lsr r1
    3278:	06913a00 	ldreq	r3, [r1], r0, lsl #20
    327c:	913a0000 	teqls	sl, r0
    3280:	00000006 	andeq	r0, r0, r6
    3284:	000c723f 	andeq	r7, ip, pc, lsr r2
    3288:	91480c00 	cmpls	r8, r0, lsl #24
    328c:	9e000006 	cdpls	0, 0, cr0, cr0, cr6, {0}
    3290:	3a000032 	bcc	3360 <__Stack_Size+0x2f60>
    3294:	00000691 	muleq	r0, r1, r6
    3298:	0006913a 	andeq	r9, r6, sl, lsr r1
    329c:	c33f0000 	teqgt	pc, #0
    32a0:	0c00000b 	stceq	0, cr0, [r0], {11}
    32a4:	00069146 	andeq	r9, r6, r6, asr #2
    32a8:	0032b800 	eorseq	fp, r2, r0, lsl #16
    32ac:	06913a00 	ldreq	r3, [r1], r0, lsl #20
    32b0:	913a0000 	teqls	sl, r0
    32b4:	00000006 	andeq	r0, r0, r6
    32b8:	000af93c 	andeq	pc, sl, ip, lsr r9	; <UNPREDICTABLE>
    32bc:	02ac0600 	adceq	r0, ip, #0, 12
    32c0:	000032ca 	andeq	r3, r0, sl, asr #5
    32c4:	0032ca3a 	eorseq	ip, r2, sl, lsr sl
    32c8:	04120000 	ldreq	r0, [r2], #-0
    32cc:	00000590 	muleq	r0, r0, r5
    32d0:	000cd13c 	andeq	sp, ip, ip, lsr r1
    32d4:	02ad0600 	adceq	r0, sp, #0, 12
    32d8:	000032e2 	andeq	r3, r0, r2, ror #5
    32dc:	0032e23a 	eorseq	lr, r2, sl, lsr r2
    32e0:	04120000 	ldreq	r0, [r2], #-0
    32e4:	00000604 	andeq	r0, r0, r4, lsl #12
    32e8:	000b883c 	andeq	r8, fp, ip, lsr r8
    32ec:	02a30600 	adceq	r0, r3, #0, 12
    32f0:	000032fa 	strdeq	r3, [r0], -sl
    32f4:	0032fa3a 	eorseq	pc, r2, sl, lsr sl	; <UNPREDICTABLE>
    32f8:	04120000 	ldreq	r0, [r2], #-0
    32fc:	0000038e 	andeq	r0, r0, lr, lsl #7
    3300:	0007613c 	andeq	r6, r7, ip, lsr r1
    3304:	02a40600 	adceq	r0, r4, #0, 12
    3308:	00003317 	andeq	r3, r0, r7, lsl r3
    330c:	0032fa3a 	eorseq	pc, r2, sl, lsr sl	; <UNPREDICTABLE>
    3310:	32ca3a00 	sbccc	r3, sl, #0, 20
    3314:	3c000000 	stccc	0, cr0, [r0], {-0}
    3318:	00000df5 	strdeq	r0, [r0], -r5
    331c:	3302c006 	movwcc	ip, #8198	; 0x2006
    3320:	3a000033 	bcc	33f4 <__Stack_Size+0x2ff4>
    3324:	000032fa 	strdeq	r3, [r0], -sl
    3328:	0000573a 	andeq	r5, r0, sl, lsr r7
    332c:	00573a00 	subseq	r3, r7, r0, lsl #20
    3330:	3c000000 	stccc	0, cr0, [r0], {-0}
    3334:	000001c8 	andeq	r0, r0, r8, asr #3
    3338:	4a02a506 	bmi	ac758 <__Stack_Size+0xac358>
    333c:	3a000033 	bcc	3410 <__Stack_Size+0x3010>
    3340:	000032fa 	strdeq	r3, [r0], -sl
    3344:	0032e23a 	eorseq	lr, r2, sl, lsr r2
    3348:	d43c0000 	ldrtle	r0, [ip], #-0
    334c:	06000001 	streq	r0, [r0], -r1
    3350:	336102cd 	cmncc	r1, #-805306356	; 0xd000000c
    3354:	fa3a0000 	blx	e8335c <__Stack_Size+0xe82f5c>
    3358:	3a000032 	bcc	3428 <__Stack_Size+0x3028>
    335c:	00000057 	andeq	r0, r0, r7, asr r0
    3360:	0a5f3c00 	beq	17d2368 <__Stack_Size+0x17d1f68>
    3364:	b2060000 	andlt	r0, r6, #0
    3368:	00337d02 	eorseq	r7, r3, r2, lsl #26
    336c:	32fa3a00 	rscscc	r3, sl, #0, 20
    3370:	573a0000 	ldrpl	r0, [sl, -r0]!
    3374:	3a000000 	bcc	337c <__Stack_Size+0x2f7c>
    3378:	000000da 	ldrdeq	r0, [r0], -sl
    337c:	0d933c00 	ldceq	12, cr3, [r3]
    3380:	b0060000 	andlt	r0, r6, r0
    3384:	00339402 	eorseq	r9, r3, r2, lsl #8
    3388:	32fa3a00 	rscscc	r3, sl, #0, 20
    338c:	da3a0000 	ble	e83394 <__Stack_Size+0xe82f94>
    3390:	00000000 	andeq	r0, r0, r0
    3394:	000d293d 	andeq	r2, sp, sp, lsr r9
    3398:	02fd0600 	rscseq	r0, sp, #0, 12
    339c:	000000ba 	strheq	r0, [r0], -sl
    33a0:	000033af 	andeq	r3, r0, pc, lsr #7
    33a4:	0032fa3a 	eorseq	pc, r2, sl, lsr sl	; <UNPREDICTABLE>
    33a8:	00573a00 	subseq	r3, r7, r0, lsl #20
    33ac:	3c000000 	stccc	0, cr0, [r0], {-0}
    33b0:	00000375 	andeq	r0, r0, r5, ror r3
    33b4:	c602fe06 	strgt	pc, [r2], -r6, lsl #28
    33b8:	3a000033 	bcc	348c <__Stack_Size+0x308c>
    33bc:	000032fa 	strdeq	r3, [r0], -sl
    33c0:	0000573a 	andeq	r5, r0, sl, lsr r7
    33c4:	df3d0000 	svcle	0x003d0000
    33c8:	06000002 	streq	r0, [r0], -r2
    33cc:	005702f5 	ldrsheq	r0, [r7], #-37	; 0xffffffdb
    33d0:	33dc0000 	bicscc	r0, ip, #0
    33d4:	fa3a0000 	blx	e833dc <__Stack_Size+0xe82fdc>
    33d8:	00000032 	andeq	r0, r0, r2, lsr r0
    33dc:	000d553c 	andeq	r5, sp, ip, lsr r5
    33e0:	02ec0600 	rsceq	r0, ip, #0, 12
    33e4:	000033f3 	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    33e8:	0032fa3a 	eorseq	pc, r2, sl, lsr sl	; <UNPREDICTABLE>
    33ec:	00573a00 	subseq	r3, r7, r0, lsl #20
    33f0:	3f000000 	svccc	0x00000000
    33f4:	000000e8 	andeq	r0, r0, r8, ror #1
    33f8:	00baf807 	adcseq	pc, sl, r7, lsl #16
    33fc:	340d0000 	strcc	r0, [sp], #-0
    3400:	f83a0000 			; <UNDEFINED> instruction: 0xf83a0000
    3404:	3a000031 	bcc	34d0 <__Stack_Size+0x30d0>
    3408:	00000057 	andeq	r0, r0, r7, asr r0
    340c:	032a3f00 			; <UNDEFINED> instruction: 0x032a3f00
    3410:	ed070000 	stc	0, cr0, [r7, #-0]
    3414:	00000057 	andeq	r0, r0, r7, asr r0
    3418:	00003422 	andeq	r3, r0, r2, lsr #8
    341c:	0031f83a 	eorseq	pc, r1, sl, lsr r8	; <UNPREDICTABLE>
    3420:	22390000 	eorscs	r0, r9, #0
    3424:	0d000002 	stceq	0, cr0, [r0, #-8]
    3428:	00343338 	eorseq	r3, r4, r8, lsr r3
    342c:	00453a00 	subeq	r3, r5, r0, lsl #20
    3430:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3434:	000008d6 	ldrdeq	r0, [r0], -r6
    3438:	34443a0d 	strbcc	r3, [r4], #-2573	; 0xa0d
    343c:	da3a0000 	ble	e83444 <__Stack_Size+0xe83044>
    3440:	00000000 	andeq	r0, r0, r0
    3444:	000a6c39 	andeq	r6, sl, r9, lsr ip
    3448:	55390d00 	ldrpl	r0, [r9, #-3328]!	; 0xd00
    344c:	3a000034 	bcc	3524 <__Stack_Size+0x3124>
    3450:	00000045 	andeq	r0, r0, r5, asr #32
    3454:	049e3900 	ldreq	r3, [lr], #2304	; 0x900
    3458:	e1070000 	mrs	r0, (UNDEF: 7)
    345c:	00003466 	andeq	r3, r0, r6, ror #8
    3460:	0034663a 	eorseq	r6, r4, sl, lsr r6
    3464:	04120000 	ldreq	r0, [r2], #-0
    3468:	00000660 	andeq	r0, r0, r0, ror #12
    346c:	000bd139 	andeq	sp, fp, r9, lsr r1
    3470:	7ddf0700 	ldclvc	7, cr0, [pc]	; 3478 <__Stack_Size+0x3078>
    3474:	3a000034 	bcc	354c <__Stack_Size+0x314c>
    3478:	000031f8 	strdeq	r3, [r0], -r8
    347c:	01413900 	cmpeq	r1, r0, lsl #18
    3480:	e0070000 	and	r0, r7, r0
    3484:	00003493 	muleq	r0, r3, r4
    3488:	0031f83a 	eorseq	pc, r1, sl, lsr r8	; <UNPREDICTABLE>
    348c:	34663a00 	strbtcc	r3, [r6], #-2560	; 0xa00
    3490:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    3494:	00000a2e 	andeq	r0, r0, lr, lsr #20
    3498:	34aee507 	strtcc	lr, [lr], #1287	; 0x507
    349c:	f83a0000 			; <UNDEFINED> instruction: 0xf83a0000
    34a0:	3a000031 	bcc	356c <__Stack_Size+0x316c>
    34a4:	00000057 	andeq	r0, r0, r7, asr r0
    34a8:	0000da3a 	andeq	sp, r0, sl, lsr sl
    34ac:	c6400000 	strbgt	r0, [r0], -r0
    34b0:	0c00000d 	stceq	0, cr0, [r0], {13}
    34b4:	0006910c 	andeq	r9, r6, ip, lsl #2
    34b8:	06913a00 	ldreq	r3, [r1], r0, lsl #20
    34bc:	913a0000 	teqls	sl, r0
    34c0:	00000006 	andeq	r0, r0, r6
    34c4:	00058000 	andeq	r8, r5, r0
    34c8:	ce000400 	cfcpysgt	mvf0, mvf0
    34cc:	04000003 	streq	r0, [r0], #-3
    34d0:	00086201 	andeq	r6, r8, r1, lsl #4
    34d4:	132f0100 			; <UNDEFINED> instruction: 0x132f0100
    34d8:	00fa0000 	rscseq	r0, sl, r0
    34dc:	3e940000 	cdpcc	0, 9, cr0, cr4, cr0, {0}
    34e0:	00900800 	addseq	r0, r0, r0, lsl #16
    34e4:	04f90000 	ldrbteq	r0, [r9], #0
    34e8:	4f020000 	svcmi	0x00020000
    34ec:	01000010 	tsteq	r0, r0, lsl r0
    34f0:	003e9423 	eorseq	r9, lr, r3, lsr #8
    34f4:	00000208 	andeq	r0, r0, r8, lsl #4
    34f8:	029c0100 	addseq	r0, ip, #0, 2
    34fc:	00000ea2 	andeq	r0, r0, r2, lsr #29
    3500:	3e962e01 	cdpcc	14, 9, cr2, cr6, cr1, {0}
    3504:	00020800 	andeq	r0, r2, r0, lsl #16
    3508:	9c010000 	stcls	0, cr0, [r1], {-0}
    350c:	00103c02 	andseq	r3, r0, r2, lsl #24
    3510:	983d0100 	ldmdals	sp!, {r8}
    3514:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3518:	01000000 	mrseq	r0, (UNDEF: 0)
    351c:	0e4b029c 	mcreq	2, 2, r0, cr11, cr12, {4}
    3520:	4c010000 	stcmi	0, cr0, [r1], {-0}
    3524:	08003e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, ip, sp}
    3528:	00000002 	andeq	r0, r0, r2
    352c:	bc029c01 	stclt	12, cr9, [r2], {1}
    3530:	01000010 	tsteq	r0, r0, lsl r0
    3534:	003e9c5b 	eorseq	r9, lr, fp, asr ip
    3538:	00000208 	andeq	r0, r0, r8, lsl #4
    353c:	029c0100 	addseq	r0, ip, #0, 2
    3540:	00000f0b 	andeq	r0, r0, fp, lsl #30
    3544:	3e9e6a01 	vfnmscc.f32	s12, s28, s2
    3548:	00020800 	andeq	r0, r2, r0, lsl #16
    354c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3550:	000fd402 	andeq	sp, pc, r2, lsl #8
    3554:	a0750100 	rsbsge	r0, r5, r0, lsl #2
    3558:	0208003e 	andeq	r0, r8, #62	; 0x3e
    355c:	01000000 	mrseq	r0, (UNDEF: 0)
    3560:	1318029c 	tstne	r8, #156, 4	; 0xc0000009
    3564:	80010000 	andhi	r0, r1, r0
    3568:	08003ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, ip, sp}
    356c:	00000002 	andeq	r0, r0, r2
    3570:	20039c01 	andcs	r9, r3, r1, lsl #24
    3574:	01000013 	tsteq	r0, r3, lsl r0
    3578:	003ea48b 	eorseq	sl, lr, fp, lsl #9
    357c:	00000408 	andeq	r0, r0, r8, lsl #8
    3580:	dd9c0100 	ldfles	f0, [ip]
    3584:	04000000 	streq	r0, [r0], #-0
    3588:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    358c:	00dd8d01 	sbcseq	r8, sp, r1, lsl #26
    3590:	00d30000 	sbcseq	r0, r3, r0
    3594:	00050000 	andeq	r0, r5, r0
    3598:	003ea806 	eorseq	sl, lr, r6, lsl #16
    359c:	00055208 	andeq	r5, r5, r8, lsl #4
    35a0:	04070000 	streq	r0, [r7], #-0
    35a4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    35a8:	12d40200 	sbcsne	r0, r4, #0, 4
    35ac:	97010000 	strls	r0, [r1, -r0]
    35b0:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    35b4:	00000002 	andeq	r0, r0, r2
    35b8:	93029c01 	movwls	r9, #11265	; 0x2c01
    35bc:	0100000e 	tsteq	r0, lr
    35c0:	003eaaa2 	eorseq	sl, lr, r2, lsr #21
    35c4:	00000208 	andeq	r0, r0, r8, lsl #4
    35c8:	029c0100 	addseq	r0, ip, #0, 2
    35cc:	00000ec7 	andeq	r0, r0, r7, asr #29
    35d0:	3eacad01 	cdpcc	13, 10, cr10, cr12, cr1, {0}
    35d4:	00020800 	andeq	r0, r2, r0, lsl #16
    35d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    35dc:	000ff102 	andeq	pc, pc, r2, lsl #2
    35e0:	aeb80100 	frdgee	f0, f0, f0
    35e4:	0208003e 	andeq	r0, r8, #62	; 0x3e
    35e8:	01000000 	mrseq	r0, (UNDEF: 0)
    35ec:	10ab029c 	umlalne	r0, fp, ip, r2
    35f0:	c3010000 	movwgt	r0, #4096	; 0x1000
    35f4:	08003eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp}
    35f8:	00000002 	andeq	r0, r0, r2
    35fc:	d9029c01 	stmdble	r2, {r0, sl, fp, ip, pc}
    3600:	0100000e 	tsteq	r0, lr
    3604:	003eb2ce 	eorseq	fp, lr, lr, asr #5
    3608:	00000208 	andeq	r0, r0, r8, lsl #4
    360c:	029c0100 	addseq	r0, ip, #0, 2
    3610:	00000e82 	andeq	r0, r0, r2, lsl #29
    3614:	3eb4d901 	cdpcc	9, 11, cr13, cr4, cr1, {0}
    3618:	00020800 	andeq	r0, r2, r0, lsl #16
    361c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3620:	00118402 	andseq	r8, r1, r2, lsl #8
    3624:	b6e40100 	strbtlt	r0, [r4], r0, lsl #2
    3628:	0208003e 	andeq	r0, r8, #62	; 0x3e
    362c:	01000000 	mrseq	r0, (UNDEF: 0)
    3630:	0e5d029c 	mrceq	2, 2, r0, cr13, cr12, {4}
    3634:	ef010000 	svc	0x00010000
    3638:	08003eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, sp}
    363c:	00000002 	andeq	r0, r0, r2
    3640:	5c029c01 	stcpl	12, cr9, [r2], {1}
    3644:	01000010 	tsteq	r0, r0, lsl r0
    3648:	003ebafa 	ldrshteq	fp, [lr], -sl
    364c:	00000208 	andeq	r0, r0, r8, lsl #4
    3650:	089c0100 	ldmeq	ip, {r8}
    3654:	000012f4 	strdeq	r1, [r0], -r4
    3658:	bc010501 	cfstr32lt	mvfx0, [r1], {1}
    365c:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3660:	01000000 	mrseq	r0, (UNDEF: 0)
    3664:	0fbb089c 	svceq	0x00bb089c
    3668:	10010000 	andne	r0, r1, r0
    366c:	003ebe01 	eorseq	fp, lr, r1, lsl #28
    3670:	00000208 	andeq	r0, r0, r8, lsl #4
    3674:	089c0100 	ldmeq	ip, {r8}
    3678:	00001247 	andeq	r1, r0, r7, asr #4
    367c:	c0011b01 	andgt	r1, r1, r1, lsl #22
    3680:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3684:	01000000 	mrseq	r0, (UNDEF: 0)
    3688:	0f18089c 	svceq	0x0018089c
    368c:	26010000 	strcs	r0, [r1], -r0
    3690:	003ec201 	eorseq	ip, lr, r1, lsl #4
    3694:	00000208 	andeq	r0, r0, r8, lsl #4
    3698:	089c0100 	ldmeq	ip, {r8}
    369c:	0000115b 	andeq	r1, r0, fp, asr r1
    36a0:	c4013101 	strgt	r3, [r1], #-257	; 0x101
    36a4:	0208003e 	andeq	r0, r8, #62	; 0x3e
    36a8:	01000000 	mrseq	r0, (UNDEF: 0)
    36ac:	135f089c 	cmpne	pc, #156, 16	; 0x9c0000
    36b0:	3c010000 	stccc	0, cr0, [r1], {-0}
    36b4:	003ec601 	eorseq	ip, lr, r1, lsl #12
    36b8:	00000208 	andeq	r0, r0, r8, lsl #4
    36bc:	089c0100 	ldmeq	ip, {r8}
    36c0:	0000110f 	andeq	r1, r0, pc, lsl #2
    36c4:	c8014701 	stmdagt	r1, {r0, r8, r9, sl, lr}
    36c8:	0208003e 	andeq	r0, r8, #62	; 0x3e
    36cc:	01000000 	mrseq	r0, (UNDEF: 0)
    36d0:	1346089c 	movtne	r0, #26780	; 0x689c
    36d4:	52010000 	andpl	r0, r1, #0
    36d8:	003eca01 	eorseq	ip, lr, r1, lsl #20
    36dc:	00000208 	andeq	r0, r0, r8, lsl #4
    36e0:	089c0100 	ldmeq	ip, {r8}
    36e4:	00000eb5 			; <UNDEFINED> instruction: 0x00000eb5
    36e8:	cc015e01 	stcgt	14, cr5, [r1], {1}
    36ec:	0208003e 	andeq	r0, r8, #62	; 0x3e
    36f0:	01000000 	mrseq	r0, (UNDEF: 0)
    36f4:	11f7089c 			; <UNDEFINED> instruction: 0x11f7089c
    36f8:	6a010000 	bvs	43700 <__Stack_Size+0x43300>
    36fc:	003ece01 	eorseq	ip, lr, r1, lsl #28
    3700:	00000208 	andeq	r0, r0, r8, lsl #4
    3704:	089c0100 	ldmeq	ip, {r8}
    3708:	000011dd 	ldrdeq	r1, [r0], -sp
    370c:	d0017601 	andle	r7, r1, r1, lsl #12
    3710:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3714:	01000000 	mrseq	r0, (UNDEF: 0)
    3718:	0ef8089c 	mrceq	8, 7, r0, cr8, cr12, {4}
    371c:	81010000 	mrshi	r0, (UNDEF: 1)
    3720:	003ed201 	eorseq	sp, lr, r1, lsl #4
    3724:	00000208 	andeq	r0, r0, r8, lsl #4
    3728:	089c0100 	ldmeq	ip, {r8}
    372c:	00001148 	andeq	r1, r0, r8, asr #2
    3730:	d4018c01 	strle	r8, [r1], #-3073	; 0xc01
    3734:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3738:	01000000 	mrseq	r0, (UNDEF: 0)
    373c:	1305089c 	movwne	r0, #22684	; 0x589c
    3740:	97010000 	strls	r0, [r1, -r0]
    3744:	003ed601 	eorseq	sp, lr, r1, lsl #12
    3748:	00000208 	andeq	r0, r0, r8, lsl #4
    374c:	089c0100 	ldmeq	ip, {r8}
    3750:	00000e6e 	andeq	r0, r0, lr, ror #28
    3754:	d801a201 	stmdale	r1, {r0, r9, sp, pc}
    3758:	0208003e 	andeq	r0, r8, #62	; 0x3e
    375c:	01000000 	mrseq	r0, (UNDEF: 0)
    3760:	0f31089c 	svceq	0x0031089c
    3764:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    3768:	003eda01 	eorseq	sp, lr, r1, lsl #20
    376c:	00000208 	andeq	r0, r0, r8, lsl #4
    3770:	089c0100 	ldmeq	ip, {r8}
    3774:	00001293 	muleq	r0, r3, r2
    3778:	dc01ba01 	stcle	10, cr11, [r1], {1}
    377c:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3780:	01000000 	mrseq	r0, (UNDEF: 0)
    3784:	0f57089c 	svceq	0x0057089c
    3788:	c5010000 	strgt	r0, [r1, #-0]
    378c:	003ede01 	eorseq	sp, lr, r1, lsl #28
    3790:	00000208 	andeq	r0, r0, r8, lsl #4
    3794:	099c0100 	ldmibeq	ip, {r8}
    3798:	00000ee8 	andeq	r0, r0, r8, ror #29
    379c:	e001d001 	and	sp, r1, r1
    37a0:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    37a4:	01000000 	mrseq	r0, (UNDEF: 0)
    37a8:	0003049c 	muleq	r3, ip, r4
    37ac:	06d30a00 	ldrbeq	r0, [r3], r0, lsl #20
    37b0:	d2010000 	andle	r0, r1, #0
    37b4:	0000dd01 	andeq	sp, r0, r1, lsl #26
    37b8:	0002fa00 	andeq	pc, r2, r0, lsl #20
    37bc:	06000500 	streq	r0, [r0], -r0, lsl #10
    37c0:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
    37c4:	00000563 	andeq	r0, r0, r3, ror #10
    37c8:	11380800 	teqne	r8, r0, lsl #16
    37cc:	dc010000 	stcle	0, cr0, [r1], {-0}
    37d0:	003ee401 	eorseq	lr, lr, r1, lsl #8
    37d4:	00000208 	andeq	r0, r0, r8, lsl #4
    37d8:	089c0100 	ldmeq	ip, {r8}
    37dc:	00001283 	andeq	r1, r0, r3, lsl #5
    37e0:	e601e701 	str	lr, [r1], -r1, lsl #14
    37e4:	0208003e 	andeq	r0, r8, #62	; 0x3e
    37e8:	01000000 	mrseq	r0, (UNDEF: 0)
    37ec:	10d0089c 	smullsne	r0, r0, ip, r8	; <UNPREDICTABLE>
    37f0:	f2010000 	vhadd.s8	d0, d1, d0
    37f4:	003ee801 	eorseq	lr, lr, r1, lsl #16
    37f8:	00000208 	andeq	r0, r0, r8, lsl #4
    37fc:	089c0100 	ldmeq	ip, {r8}
    3800:	00001210 	andeq	r1, r0, r0, lsl r2
    3804:	ea01fd01 	b	82c10 <__Stack_Size+0x82810>
    3808:	0208003e 	andeq	r0, r8, #62	; 0x3e
    380c:	01000000 	mrseq	r0, (UNDEF: 0)
    3810:	11a5089c 			; <UNDEFINED> instruction: 0x11a5089c
    3814:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3818:	003eec02 	eorseq	lr, lr, r2, lsl #24
    381c:	00000208 	andeq	r0, r0, r8, lsl #4
    3820:	089c0100 	ldmeq	ip, {r8}
    3824:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    3828:	ee021301 	cdp	3, 0, cr1, cr2, cr1, {0}
    382c:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3830:	01000000 	mrseq	r0, (UNDEF: 0)
    3834:	1223089c 	eorne	r0, r3, #156, 16	; 0x9c0000
    3838:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    383c:	003ef002 	eorseq	pc, lr, r2
    3840:	00000208 	andeq	r0, r0, r8, lsl #4
    3844:	089c0100 	ldmeq	ip, {r8}
    3848:	000012e4 	andeq	r1, r0, r4, ror #5
    384c:	f2022901 	vmla.i8	d2, d2, d1
    3850:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3854:	01000000 	mrseq	r0, (UNDEF: 0)
    3858:	11cb099c 			; <UNDEFINED> instruction: 0x11cb099c
    385c:	34010000 	strcc	r0, [r1], #-0
    3860:	003ef402 	eorseq	pc, lr, r2, lsl #8
    3864:	00000408 	andeq	r0, r0, r8, lsl #8
    3868:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    386c:	0a000003 	beq	3880 <__Stack_Size+0x3480>
    3870:	0000043c 	andeq	r0, r0, ip, lsr r4
    3874:	dd023601 	stcle	6, cr3, [r2, #-4]
    3878:	bc000000 	stclt	0, cr0, [r0], {-0}
    387c:	05000003 	streq	r0, [r0, #-3]
    3880:	3ef80600 	cdpcc	6, 15, cr0, cr8, cr0, {0}
    3884:	05750800 	ldrbeq	r0, [r5, #-2048]!	; 0x800
    3888:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    388c:	00001271 	andeq	r1, r0, r1, ror r2
    3890:	f8024001 			; <UNDEFINED> instruction: 0xf8024001
    3894:	0208003e 	andeq	r0, r8, #62	; 0x3e
    3898:	01000000 	mrseq	r0, (UNDEF: 0)
    389c:	0fdf089c 	svceq	0x00df089c
    38a0:	4b010000 	blmi	438a8 <__Stack_Size+0x434a8>
    38a4:	003efa02 	eorseq	pc, lr, r2, lsl #20
    38a8:	00000208 	andeq	r0, r0, r8, lsl #4
    38ac:	089c0100 	ldmeq	ip, {r8}
    38b0:	00000fa6 	andeq	r0, r0, r6, lsr #31
    38b4:	fc025601 	stc2	6, cr5, [r2], {1}
    38b8:	0208003e 	andeq	r0, r8, #62	; 0x3e
    38bc:	01000000 	mrseq	r0, (UNDEF: 0)
    38c0:	10fb089c 	smlalsne	r0, fp, ip, r8
    38c4:	61010000 	mrsvs	r0, (UNDEF: 1)
    38c8:	003efe02 	eorseq	pc, lr, r2, lsl #28
    38cc:	00000208 	andeq	r0, r0, r8, lsl #4
    38d0:	089c0100 	ldmeq	ip, {r8}
    38d4:	00001086 	andeq	r1, r0, r6, lsl #1
    38d8:	00026c01 	andeq	r6, r2, r1, lsl #24
    38dc:	0208003f 	andeq	r0, r8, #63	; 0x3f
    38e0:	01000000 	mrseq	r0, (UNDEF: 0)
    38e4:	1233089c 	eorsne	r0, r3, #156, 16	; 0x9c0000
    38e8:	77010000 	strvc	r0, [r1, -r0]
    38ec:	003f0202 	eorseq	r0, pc, r2, lsl #4
    38f0:	00000208 	andeq	r0, r0, r8, lsl #4
    38f4:	089c0100 	ldmeq	ip, {r8}
    38f8:	00000f44 	andeq	r0, r0, r4, asr #30
    38fc:	04028301 	streq	r8, [r2], #-769	; 0x301
    3900:	0208003f 	andeq	r0, r8, #63	; 0x3f
    3904:	01000000 	mrseq	r0, (UNDEF: 0)
    3908:	10e3089c 	smlalne	r0, r3, ip, r8
    390c:	8f010000 	svchi	0x00010000
    3910:	003f0602 	eorseq	r0, pc, r2, lsl #12
    3914:	00000208 	andeq	r0, r0, r8, lsl #4
    3918:	089c0100 	ldmeq	ip, {r8}
    391c:	00000f6a 	andeq	r0, r0, sl, ror #30
    3920:	08029a01 	stmdaeq	r2, {r0, r9, fp, ip, pc}
    3924:	0208003f 	andeq	r0, r8, #63	; 0x3f
    3928:	01000000 	mrseq	r0, (UNDEF: 0)
    392c:	1195089c 			; <UNDEFINED> instruction: 0x1195089c
    3930:	a5010000 	strge	r0, [r1, #-0]
    3934:	003f0a02 	eorseq	r0, pc, r2, lsl #20
    3938:	00000208 	andeq	r0, r0, r8, lsl #4
    393c:	089c0100 	ldmeq	ip, {r8}
    3940:	00001174 	andeq	r1, r0, r4, ror r1
    3944:	0c02b001 	stceq	0, cr11, [r2], {1}
    3948:	0208003f 	andeq	r0, r8, #63	; 0x3f
    394c:	01000000 	mrseq	r0, (UNDEF: 0)
    3950:	109b089c 	umullsne	r0, fp, ip, r8
    3954:	bb010000 	bllt	4395c <__Stack_Size+0x4355c>
    3958:	003f0e02 	eorseq	r0, pc, r2, lsl #28
    395c:	00000208 	andeq	r0, r0, r8, lsl #4
    3960:	089c0100 	ldmeq	ip, {r8}
    3964:	00001011 	andeq	r1, r0, r1, lsl r0
    3968:	1002c601 	andne	ip, r2, r1, lsl #12
    396c:	0208003f 	andeq	r0, r8, #63	; 0x3f
    3970:	01000000 	mrseq	r0, (UNDEF: 0)
    3974:	1128089c 			; <UNDEFINED> instruction: 0x1128089c
    3978:	d1010000 	mrsle	r0, (UNDEF: 1)
    397c:	003f1202 	eorseq	r1, pc, r2, lsl #4
    3980:	00000208 	andeq	r0, r0, r8, lsl #4
    3984:	089c0100 	ldmeq	ip, {r8}
    3988:	00001260 	andeq	r1, r0, r0, ror #4
    398c:	1402dc01 	strne	sp, [r2], #-3073	; 0xc01
    3990:	0208003f 	andeq	r0, r8, #63	; 0x3f
    3994:	01000000 	mrseq	r0, (UNDEF: 0)
    3998:	1000089c 	mulne	r0, ip, r8
    399c:	e7010000 	str	r0, [r1, -r0]
    39a0:	003f1602 	eorseq	r1, pc, r2, lsl #12
    39a4:	00000208 	andeq	r0, r0, r8, lsl #4
    39a8:	089c0100 	ldmeq	ip, {r8}
    39ac:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    39b0:	1802f201 	stmdane	r2, {r0, r9, ip, sp, lr, pc}
    39b4:	0208003f 	andeq	r0, r8, #63	; 0x3f
    39b8:	01000000 	mrseq	r0, (UNDEF: 0)
    39bc:	12c4089c 	sbcne	r0, r4, #156, 16	; 0x9c0000
    39c0:	fd010000 	stc2	0, cr0, [r1, #-0]
    39c4:	003f1a02 	eorseq	r1, pc, r2, lsl #20
    39c8:	00000208 	andeq	r0, r0, r8, lsl #4
    39cc:	089c0100 	ldmeq	ip, {r8}
    39d0:	000012ab 	andeq	r1, r0, fp, lsr #5
    39d4:	1c030801 	stcne	8, cr0, [r3], {1}
    39d8:	0208003f 	andeq	r0, r8, #63	; 0x3f
    39dc:	01000000 	mrseq	r0, (UNDEF: 0)
    39e0:	0f7d089c 	svceq	0x007d089c
    39e4:	13010000 	movwne	r0, #4096	; 0x1000
    39e8:	003f1e03 	eorseq	r1, pc, r3, lsl #28
    39ec:	00000208 	andeq	r0, r0, r8, lsl #4
    39f0:	089c0100 	ldmeq	ip, {r8}
    39f4:	0000106d 	andeq	r1, r0, sp, rrx
    39f8:	20031e01 	andcs	r1, r3, r1, lsl #28
    39fc:	0208003f 	andeq	r0, r8, #63	; 0x3f
    3a00:	01000000 	mrseq	r0, (UNDEF: 0)
    3a04:	1021089c 	mlane	r1, ip, r8, r0
    3a08:	2a010000 	bcs	43a10 <__Stack_Size+0x43610>
    3a0c:	003f2203 	eorseq	r2, pc, r3, lsl #4
    3a10:	00000208 	andeq	r0, r0, r8, lsl #4
    3a14:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    3a18:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    3a1c:	00dd8d01 	sbcseq	r8, sp, r1, lsl #26
    3a20:	05630000 	strbeq	r0, [r3, #-0]!
    3a24:	00050000 	andeq	r0, r5, r0
    3a28:	0006d30a 	andeq	sp, r6, sl, lsl #6
    3a2c:	01d20100 	bicseq	r0, r2, r0, lsl #2
    3a30:	000000dd 	ldrdeq	r0, [r0], -sp
    3a34:	00000575 	andeq	r0, r0, r5, ror r5
    3a38:	3c0b0005 	stccc	0, cr0, [fp], {5}
    3a3c:	01000004 	tsteq	r0, r4
    3a40:	00dd0236 	sbcseq	r0, sp, r6, lsr r2
    3a44:	00050000 	andeq	r0, r5, r0
    3a48:	0002d400 	andeq	sp, r2, r0, lsl #8
    3a4c:	9b000400 	blls	4a54 <__Stack_Size+0x4654>
    3a50:	04000004 	streq	r0, [r0], #-4
    3a54:	00086201 	andeq	r6, r8, r1, lsl #4
    3a58:	13bb0100 			; <UNDEFINED> instruction: 0x13bb0100
    3a5c:	00fa0000 	rscseq	r0, sl, r0
    3a60:	3f240000 	svccc	0x00240000
    3a64:	00620800 	rsbeq	r0, r2, r0, lsl #16
    3a68:	06220000 	strteq	r0, [r2], -r0
    3a6c:	06020000 	streq	r0, [r2], -r0
    3a70:	01000014 	tsteq	r0, r4, lsl r0
    3a74:	00007f04 	andeq	r7, r0, r4, lsl #30
    3a78:	003f2400 	eorseq	r2, pc, r0, lsl #8
    3a7c:	00000c08 	andeq	r0, r0, r8, lsl #24
    3a80:	7f9c0100 	svcvc	0x009c0100
    3a84:	03000000 	movweq	r0, #0
    3a88:	00001388 	andeq	r1, r0, r8, lsl #7
    3a8c:	007f0401 	rsbseq	r0, pc, r1, lsl #8
    3a90:	0f0a0000 	svceq	0x000a0000
    3a94:	df030000 	svcle	0x00030000
    3a98:	01000000 	mrseq	r0, (UNDEF: 0)
    3a9c:	00007f04 	andeq	r7, r0, r4, lsl #30
    3aa0:	000f2b00 	andeq	r2, pc, r0, lsl #22
    3aa4:	06600400 	strbteq	r0, [r0], -r0, lsl #8
    3aa8:	0b010000 	bleq	43ab0 <__Stack_Size+0x436b0>
    3aac:	0000007f 	andeq	r0, r0, pc, ror r0
    3ab0:	0000006d 	andeq	r0, r0, sp, rrx
    3ab4:	2c060005 	stccs	0, cr0, [r6], {5}
    3ab8:	5308003f 	movwpl	r0, #32831	; 0x803f
    3abc:	07000002 	streq	r0, [r0, -r2]
    3ac0:	f3035001 	vhadd.u8	d5, d3, d1
    3ac4:	00005101 	andeq	r5, r0, r1, lsl #2
    3ac8:	69050408 	stmdbvs	r5, {r3, sl}
    3acc:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3ad0:	000013cd 	andeq	r1, r0, sp, asr #7
    3ad4:	3f300f01 	svccc	0x00300f01
    3ad8:	00040800 	andeq	r0, r4, r0, lsl #16
    3adc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ae0:	000000b6 	strheq	r0, [r0], -r6
    3ae4:	000a2004 	andeq	r2, sl, r4
    3ae8:	7f140100 	svcvc	0x00140100
    3aec:	ac000000 	stcge	0, cr0, [r0], {-0}
    3af0:	05000000 	streq	r0, [r0, #-0]
    3af4:	3f340a00 	svccc	0x00340a00
    3af8:	02640800 	rsbeq	r0, r4, #0, 16
    3afc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3b00:	00001391 	muleq	r0, r1, r3
    3b04:	3f341701 	svccc	0x00341701
    3b08:	00040800 	andeq	r0, r4, r0, lsl #16
    3b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b10:	000000e6 	andeq	r0, r0, r6, ror #1
    3b14:	00008504 	andeq	r8, r0, r4, lsl #10
    3b18:	7f1b0100 	svcvc	0x001b0100
    3b1c:	dc000000 	stcle	0, cr0, [r0], {-0}
    3b20:	05000000 	streq	r0, [r0, #-0]
    3b24:	3f380a00 	svccc	0x00380a00
    3b28:	02750800 	rsbseq	r0, r5, #0, 16
    3b2c:	02000000 	andeq	r0, r0, #0
    3b30:	000013e6 	andeq	r1, r0, r6, ror #7
    3b34:	007f1e01 	rsbseq	r1, pc, r1, lsl #28
    3b38:	3f380000 	svccc	0x00380000
    3b3c:	001e0800 	andseq	r0, lr, r0, lsl #16
    3b40:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b44:	00000145 	andeq	r0, r0, r5, asr #2
    3b48:	00139f03 	andseq	r9, r3, r3, lsl #30
    3b4c:	451e0100 	ldrmi	r0, [lr, #-256]	; 0x100
    3b50:	4c000001 	stcmi	0, cr0, [r0], {1}
    3b54:	0300000f 	movweq	r0, #15
    3b58:	000013f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3b5c:	007f1e01 	rsbseq	r1, pc, r1, lsl #28
    3b60:	0f6a0000 	svceq	0x006a0000
    3b64:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    3b68:	4b250100 	blmi	943f70 <__Stack_Size+0x943b70>
    3b6c:	88000001 	stmdahi	r0, {r0}
    3b70:	0400000f 	streq	r0, [r0], #-15
    3b74:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    3b78:	007f2701 	rsbseq	r2, pc, r1, lsl #14
    3b7c:	013b0000 	teqeq	fp, r0
    3b80:	00050000 	andeq	r0, r5, r0
    3b84:	003f4e0c 	eorseq	r4, pc, ip, lsl #28
    3b88:	00028608 	andeq	r8, r2, r8, lsl #12
    3b8c:	040d0000 	streq	r0, [sp], #-0
    3b90:	0000014b 	andeq	r0, r0, fp, asr #2
    3b94:	7508010e 	strvc	r0, [r8, #-270]	; 0x10e
    3b98:	0200000b 	andeq	r0, r0, #11
    3b9c:	000013db 	ldrdeq	r1, [r0], -fp
    3ba0:	007f2c01 	rsbseq	r2, pc, r1, lsl #24
    3ba4:	3f560000 	svccc	0x00560000
    3ba8:	00240800 	eoreq	r0, r4, r0, lsl #16
    3bac:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bb0:	000001d5 	ldrdeq	r0, [r0], -r5
    3bb4:	00139f03 	andseq	r9, r3, r3, lsl #30
    3bb8:	452c0100 	strmi	r0, [ip, #-256]!	; 0x100
    3bbc:	bd000001 	stclt	0, cr0, [r0, #-4]
    3bc0:	0300000f 	movweq	r0, #15
    3bc4:	000013f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3bc8:	007f2c01 	rsbseq	r2, pc, r1, lsl #24
    3bcc:	0fdb0000 	svceq	0x00db0000
    3bd0:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    3bd4:	4b330100 	blmi	cc3fdc <__Stack_Size+0xcc3bdc>
    3bd8:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
    3bdc:	0f00000f 	svceq	0x0000000f
    3be0:	08003f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip, sp}
    3be4:	00000010 	andeq	r0, r0, r0, lsl r0
    3be8:	00061004 	andeq	r1, r6, r4
    3bec:	7f360100 	svcvc	0x00360100
    3bf0:	b0000000 	andlt	r0, r0, r0
    3bf4:	05000001 	streq	r0, [r0, #-1]
    3bf8:	0a140400 	beq	504c00 <__Stack_Size+0x504800>
    3bfc:	37010000 	strcc	r0, [r1, -r0]
    3c00:	0000007f 	andeq	r0, r0, pc, ror r0
    3c04:	000001c1 	andeq	r0, r0, r1, asr #3
    3c08:	680c0005 	stmdavs	ip, {r0, r2}
    3c0c:	9708003f 	smladxls	r8, pc, r0, r0	; <UNPREDICTABLE>
    3c10:	0c000002 	stceq	0, cr0, [r0], {2}
    3c14:	08003f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip, sp}
    3c18:	000002a8 	andeq	r0, r0, r8, lsr #5
    3c1c:	a7090000 	strge	r0, [r9, -r0]
    3c20:	01000013 	tsteq	r0, r3, lsl r0
    3c24:	003f7a3e 	eorseq	r7, pc, lr, lsr sl	; <UNPREDICTABLE>
    3c28:	00000808 	andeq	r0, r0, r8, lsl #16
    3c2c:	1f9c0100 	svcne	0x009c0100
    3c30:	03000002 	movweq	r0, #2
    3c34:	000013fb 	strdeq	r1, [r0], -fp
    3c38:	007f3e01 	rsbseq	r3, pc, r1, lsl #28
    3c3c:	10390000 	eorsne	r0, r9, r0
    3c40:	7f040000 	svcvc	0x00040000
    3c44:	0100000a 	tsteq	r0, sl
    3c48:	00007f44 	andeq	r7, r0, r4, asr #30
    3c4c:	00020a00 	andeq	r0, r2, r0, lsl #20
    3c50:	10000500 	andne	r0, r0, r0, lsl #10
    3c54:	08003f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip, sp}
    3c58:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3c5c:	06500107 	ldrbeq	r0, [r0], -r7, lsl #2
    3c60:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    3c64:	00001e64 	andeq	r1, r0, r4, ror #28
    3c68:	00137802 	andseq	r7, r3, r2, lsl #16
    3c6c:	7f470100 	svcvc	0x00470100
    3c70:	82000000 	andhi	r0, r0, #0
    3c74:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    3c78:	01000000 	mrseq	r0, (UNDEF: 0)
    3c7c:	0002539c 	muleq	r2, ip, r3
    3c80:	0a070400 	beq	1c4c88 <__Stack_Size+0x1c4888>
    3c84:	4c010000 	stcmi	0, cr0, [r1], {-0}
    3c88:	0000007f 	andeq	r0, r0, pc, ror r0
    3c8c:	00000249 	andeq	r0, r0, r9, asr #4
    3c90:	860a0005 	strhi	r0, [sl], -r5
    3c94:	ca08003f 	bgt	203d98 <__Stack_Size+0x203998>
    3c98:	00000002 	andeq	r0, r0, r2
    3c9c:	00066004 	andeq	r6, r6, r4
    3ca0:	7f0b0100 	svcvc	0x000b0100
    3ca4:	64000000 	strvs	r0, [r0], #-0
    3ca8:	05000002 	streq	r0, [r0, #-2]
    3cac:	0a200400 	beq	804cb4 <__Stack_Size+0x8048b4>
    3cb0:	14010000 	strne	r0, [r1], #-0
    3cb4:	0000007f 	andeq	r0, r0, pc, ror r0
    3cb8:	00000275 	andeq	r0, r0, r5, ror r2
    3cbc:	85040005 	strhi	r0, [r4, #-5]
    3cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    3cc4:	00007f1b 	andeq	r7, r0, fp, lsl pc
    3cc8:	00028600 	andeq	r8, r2, r0, lsl #12
    3ccc:	04000500 	streq	r0, [r0], #-1280	; 0x500
    3cd0:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    3cd4:	007f2701 	rsbseq	r2, pc, r1, lsl #14
    3cd8:	02970000 	addseq	r0, r7, #0
    3cdc:	00050000 	andeq	r0, r5, r0
    3ce0:	00061004 	andeq	r1, r6, r4
    3ce4:	7f360100 	svcvc	0x00360100
    3ce8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3cec:	05000002 	streq	r0, [r0, #-2]
    3cf0:	0a140400 	beq	504cf8 <__Stack_Size+0x5048f8>
    3cf4:	37010000 	strcc	r0, [r1, -r0]
    3cf8:	0000007f 	andeq	r0, r0, pc, ror r0
    3cfc:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    3d00:	7f040005 	svcvc	0x00040005
    3d04:	0100000a 	tsteq	r0, sl
    3d08:	00007f44 	andeq	r7, r0, r4, asr #30
    3d0c:	0002ca00 	andeq	ip, r2, r0, lsl #20
    3d10:	11000500 	tstne	r0, r0, lsl #10
    3d14:	00000a07 	andeq	r0, r0, r7, lsl #20
    3d18:	007f4c01 	rsbseq	r4, pc, r1, lsl #24
    3d1c:	00050000 	andeq	r0, r5, r0
    3d20:	00073000 	andeq	r3, r7, r0
    3d24:	92000400 	andls	r0, r0, #0, 8
    3d28:	04000005 	streq	r0, [r0], #-5
    3d2c:	00086201 	andeq	r6, r8, r1, lsl #4
    3d30:	14b90100 	ldrtne	r0, [r9], #256	; 0x100
    3d34:	00fa0000 	rscseq	r0, sl, r0
    3d38:	3f880000 	svccc	0x00880000
    3d3c:	037c0800 	cmneq	ip, #0, 16
    3d40:	06880000 	streq	r0, [r8], r0
    3d44:	24020000 	strcs	r0, [r2], #-0
    3d48:	01000014 	tsteq	r0, r4, lsl r0
    3d4c:	005c0128 	subseq	r0, ip, r8, lsr #2
    3d50:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    3d54:	5c2a0100 	stfpls	f0, [sl], #-0
    3d58:	04000000 	streq	r0, [r0], #-0
    3d5c:	000014d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3d60:	005c2b01 	subseq	r2, ip, r1, lsl #22
    3d64:	cd040000 	stcgt	0, cr0, [r4, #-0]
    3d68:	01000014 	tsteq	r0, r4, lsl r0
    3d6c:	00005c2b 	andeq	r5, r0, fp, lsr #24
    3d70:	14b00400 	ldrtne	r0, [r0], #1024	; 0x400
    3d74:	2c010000 	stccs	0, cr0, [r1], {-0}
    3d78:	0000005c 	andeq	r0, r0, ip, asr r0
    3d7c:	08010500 	stmdaeq	r1, {r8, sl}
    3d80:	00000b75 	andeq	r0, r0, r5, ror fp
    3d84:	0014a202 	andseq	sl, r4, r2, lsl #4
    3d88:	016b0100 	cmneq	fp, r0, lsl #2
    3d8c:	00000098 	muleq	r0, r8, r0
    3d90:	01006903 	tsteq	r0, r3, lsl #18
    3d94:	00005c6d 	andeq	r5, r0, sp, ror #24
    3d98:	006a0300 	rsbeq	r0, sl, r0, lsl #6
    3d9c:	005c6d01 	subseq	r6, ip, r1, lsl #26
    3da0:	32040000 	andcc	r0, r4, #0
    3da4:	01000014 	tsteq	r0, r4, lsl r0
    3da8:	00005c6d 	andeq	r5, r0, sp, ror #24
    3dac:	14b00400 	ldrtne	r0, [r0], #1024	; 0x400
    3db0:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    3db4:	0000005c 	andeq	r0, r0, ip, asr r0
    3db8:	15210600 	strne	r0, [r1, #-1536]!	; 0x600
    3dbc:	d5010000 	strle	r0, [r1, #-0]
    3dc0:	15310701 	ldrne	r0, [r1, #-1793]!	; 0x701
    3dc4:	11010000 	mrsne	r0, (UNDEF: 1)
    3dc8:	0000d601 	andeq	sp, r0, r1, lsl #12
    3dcc:	00d60100 	sbcseq	r0, r6, r0, lsl #2
    3dd0:	9a080000 	bls	203dd8 <__Stack_Size+0x2039d8>
    3dd4:	01000014 	tsteq	r0, r4, lsl r0
    3dd8:	00d60111 	sbcseq	r0, r6, r1, lsl r1
    3ddc:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    3de0:	01000014 	tsteq	r0, r4, lsl r0
    3de4:	00d60111 	sbcseq	r0, r6, r1, lsl r1
    3de8:	7b090000 	blvc	243df0 <__Stack_Size+0x2439f0>
    3dec:	0100000c 	tsteq	r0, ip
    3df0:	00dd0113 	sbcseq	r0, sp, r3, lsl r1
    3df4:	0a000000 	beq	3dfc <__Stack_Size+0x39fc>
    3df8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3dfc:	02050074 	andeq	r0, r5, #116	; 0x74
    3e00:	000d3907 	andeq	r3, sp, r7, lsl #18
    3e04:	14920700 	ldrne	r0, [r2], #1792	; 0x700
    3e08:	1b010000 	blne	43e10 <__Stack_Size+0x43a10>
    3e0c:	0000d601 	andeq	sp, r0, r1, lsl #12
    3e10:	010e0100 	mrseq	r0, (UNDEF: 30)
    3e14:	7b080000 	blvc	203e1c <__Stack_Size+0x203a1c>
    3e18:	0100000c 	tsteq	r0, ip
    3e1c:	00d6011b 	sbcseq	r0, r6, fp, lsl r1
    3e20:	f3090000 	vhadd.u8	d0, d9, d0
    3e24:	01000014 	tsteq	r0, r4, lsl r0
    3e28:	00dd011d 	sbcseq	r0, sp, sp, lsl r1
    3e2c:	07000000 	streq	r0, [r0, -r0]
    3e30:	00001466 	andeq	r1, r0, r6, ror #8
    3e34:	d6012301 	strle	r2, [r1], -r1, lsl #6
    3e38:	01000000 	mrseq	r0, (UNDEF: 0)
    3e3c:	00000138 	andeq	r0, r0, r8, lsr r1
    3e40:	000c7b08 	andeq	r7, ip, r8, lsl #22
    3e44:	01230100 			; <UNDEFINED> instruction: 0x01230100
    3e48:	000000d6 	ldrdeq	r0, [r0], -r6
    3e4c:	0014f309 	andseq	pc, r4, r9, lsl #6
    3e50:	01250100 			; <UNDEFINED> instruction: 0x01250100
    3e54:	000000dd 	ldrdeq	r0, [r0], -sp
    3e58:	0dc60b00 	vstreq	d16, [r6]
    3e5c:	13010000 	movwne	r0, #4096	; 0x1000
    3e60:	000000d6 	ldrdeq	r0, [r0], -r6
    3e64:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
    3e68:	0000002c 	andeq	r0, r0, ip, lsr #32
    3e6c:	019f9c01 	orrseq	r9, pc, r1, lsl #24
    3e70:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    3e74:	01000013 	tsteq	r0, r3, lsl r0
    3e78:	0000d613 	andeq	sp, r0, r3, lsl r6
    3e7c:	00105a00 	andseq	r5, r0, r0, lsl #20
    3e80:	15b00c00 	ldrne	r0, [r0, #3072]!	; 0xc00
    3e84:	13010000 	movwne	r0, #4096	; 0x1000
    3e88:	000000d6 	ldrdeq	r0, [r0], -r6
    3e8c:	0000107b 	andeq	r1, r0, fp, ror r0
    3e90:	0000df0d 	andeq	sp, r0, sp, lsl #30
    3e94:	d6150100 	ldrle	r0, [r5], -r0, lsl #2
    3e98:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    3e9c:	0e000010 	mcreq	0, 0, r0, cr0, cr0, {0}
    3ea0:	08003f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, sp}
    3ea4:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    3ea8:	0b51010f 	bleq	14442ec <__Stack_Size+0x1443eec>
    3eac:	1e84800c 	cdpne	0, 8, cr8, cr4, cr12, {0}
    3eb0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3eb4:	0f1b0123 	svceq	0x001b0123
    3eb8:	f3035001 	vhadd.u8	d5, d3, d1
    3ebc:	00005001 	andeq	r5, r0, r1
    3ec0:	0015b810 	andseq	fp, r5, r0, lsl r8
    3ec4:	b4230100 	strtlt	r0, [r3], #-256	; 0x100
    3ec8:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    3ecc:	01000000 	mrseq	r0, (UNDEF: 0)
    3ed0:	0001be9c 	muleq	r1, ip, lr
    3ed4:	3fb81100 	svccc	0x00b81100
    3ed8:	06cf0800 	strbeq	r0, [pc], r0, lsl #16
    3edc:	12000000 	andne	r0, r0, #0
    3ee0:	00000025 	andeq	r0, r0, r5, lsr #32
    3ee4:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    3ee8:	0000009c 	muleq	r0, ip, r0
    3eec:	02449c01 	subeq	r9, r4, #256	; 0x100
    3ef0:	31130000 	tstcc	r3, r0
    3ef4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3ef8:	14000010 	strne	r0, [r0], #-16
    3efc:	0000003a 	andeq	r0, r0, sl, lsr r0
    3f00:	00004514 	andeq	r4, r0, r4, lsl r5
    3f04:	00501300 	subseq	r1, r0, r0, lsl #6
    3f08:	11380000 	teqne	r8, r0
    3f0c:	16150000 	ldrne	r0, [r5], -r0
    3f10:	3e080040 	cdpcc	0, 0, cr0, cr8, cr0, {2}
    3f14:	3a000000 	bcc	3f1c <__Stack_Size+0x3b1c>
    3f18:	14000002 	strne	r0, [r0], #-2
    3f1c:	00000031 	andeq	r0, r0, r1, lsr r0
    3f20:	00003a13 	andeq	r3, r0, r3, lsl sl
    3f24:	00116200 	andseq	r6, r1, r0, lsl #4
    3f28:	00451300 	subeq	r1, r5, r0, lsl #6
    3f2c:	11750000 	cmnne	r5, r0
    3f30:	50140000 	andspl	r0, r4, r0
    3f34:	16000000 	strne	r0, [r0], -r0
    3f38:	08004026 	stmdaeq	r0, {r1, r2, r5, lr}
    3f3c:	000006d6 	ldrdeq	r0, [r0], -r6
    3f40:	00000230 	andeq	r0, r0, r0, lsr r2
    3f44:	0251010f 	subseq	r0, r1, #-1073741821	; 0xc0000003
    3f48:	010f0074 	tsteq	pc, r4, ror r0	; <UNPREDICTABLE>
    3f4c:	04760250 	ldrbteq	r0, [r6], #-592	; 0x250
    3f50:	40461700 	submi	r1, r6, r0, lsl #14
    3f54:	06f60800 	ldrbteq	r0, [r6], r0, lsl #16
    3f58:	17000000 	strne	r0, [r0, -r0]
    3f5c:	08004016 	stmdaeq	r0, {r1, r2, r4, lr}
    3f60:	00000707 	andeq	r0, r0, r7, lsl #14
    3f64:	00631200 	rsbeq	r1, r3, r0, lsl #4
    3f68:	40540000 	subsmi	r0, r4, r0
    3f6c:	01500800 	cmpeq	r0, r0, lsl #16
    3f70:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f74:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    3f78:	00006f14 	andeq	r6, r0, r4, lsl pc
    3f7c:	00781400 	rsbseq	r1, r8, r0, lsl #8
    3f80:	81130000 	tsthi	r3, r0
    3f84:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3f88:	18000011 	stmdane	r0, {r0, r4}
    3f8c:	0000008c 	andeq	r0, r0, ip, lsl #1
    3f90:	00601900 	rsbeq	r1, r0, r0, lsl #18
    3f94:	02a70000 	adceq	r0, r7, #0
    3f98:	6f130000 	svcvs	0x00130000
    3f9c:	9b000000 	blls	3fa4 <__Stack_Size+0x3ba4>
    3fa0:	13000011 	movwne	r0, #17
    3fa4:	00000078 	andeq	r0, r0, r8, ror r0
    3fa8:	0000120a 	andeq	r1, r0, sl, lsl #4
    3fac:	00008113 	andeq	r8, r0, r3, lsl r1
    3fb0:	00123e00 	andseq	r3, r2, r0, lsl #28
    3fb4:	008c1300 	addeq	r1, ip, r0, lsl #6
    3fb8:	12510000 	subsne	r0, r1, #0
    3fbc:	50170000 	andspl	r0, r7, r0
    3fc0:	0e080041 	cdpeq	0, 0, cr0, cr8, cr1, {2}
    3fc4:	00000007 	andeq	r0, r0, r7
    3fc8:	00409017 	subeq	r9, r0, r7, lsl r0
    3fcc:	00070e08 	andeq	r0, r7, r8, lsl #28
    3fd0:	40a81700 	adcmi	r1, r8, r0, lsl #14
    3fd4:	07280800 	streq	r0, [r8, -r0, lsl #16]!
    3fd8:	12000000 	andne	r0, r0, #0
    3fdc:	00000098 	muleq	r0, r8, r0
    3fe0:	080041a4 	stmdaeq	r0, {r2, r5, r7, r8, lr}
    3fe4:	00000020 	andeq	r0, r0, r0, lsr #32
    3fe8:	02e09c01 	rsceq	r9, r0, #256	; 0x100
    3fec:	aa170000 	bge	5c3ff4 <__Stack_Size+0x5c3bf4>
    3ff0:	25080041 	strcs	r0, [r8, #-65]	; 0x41
    3ff4:	17000000 	strne	r0, [r0, -r0]
    3ff8:	080041b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, lr}
    3ffc:	00000063 	andeq	r0, r0, r3, rrx
    4000:	07ad1a00 	streq	r1, [sp, r0, lsl #20]!
    4004:	e6010000 	str	r0, [r1], -r0
    4008:	000000d6 	ldrdeq	r0, [r0], -r6
    400c:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
    4010:	0000000c 	andeq	r0, r0, ip
    4014:	f8109c01 			; <UNDEFINED> instruction: 0xf8109c01
    4018:	01000014 	tsteq	r0, r4, lsl r0
    401c:	0041d0eb 	subeq	sp, r1, fp, ror #1
    4020:	00000c08 	andeq	r0, r0, r8, lsl #24
    4024:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    4028:	1b000003 	blne	403c <__Stack_Size+0x3c3c>
    402c:	01006469 	tsteq	r0, r9, ror #8
    4030:	0000d6eb 	andeq	sp, r0, fp, ror #13
    4034:	00500100 	subseq	r0, r0, r0, lsl #2
    4038:	00156710 	andseq	r6, r5, r0, lsl r7
    403c:	dcf00100 	ldflee	f0, [r0]
    4040:	0c080041 	stceq	0, cr0, [r8], {65}	; 0x41
    4044:	01000000 	mrseq	r0, (UNDEF: 0)
    4048:	00033a9c 	muleq	r3, ip, sl
    404c:	15781c00 	ldrbne	r1, [r8, #-3072]!	; 0xc00
    4050:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    4054:	000000d6 	ldrdeq	r0, [r0], -r6
    4058:	10005001 	andne	r5, r0, r1
    405c:	00001477 	andeq	r1, r0, r7, ror r4
    4060:	41e8f501 	mvnmi	pc, r1, lsl #10
    4064:	000c0800 	andeq	r0, ip, r0, lsl #16
    4068:	9c010000 	stcls	0, cr0, [r1], {-0}
    406c:	0000036c 	andeq	r0, r0, ip, ror #6
    4070:	0015960c 	andseq	r9, r5, ip, lsl #12
    4074:	d6f50100 	ldrbtle	r0, [r5], r0, lsl #2
    4078:	7d000000 	stcvc	0, cr0, [r0, #-0]
    407c:	1c000012 	stcne	0, cr0, [r0], {18}
    4080:	0000151b 	andeq	r1, r0, fp, lsl r5
    4084:	00d6f501 	sbcseq	pc, r6, r1, lsl #10
    4088:	51010000 	mrspl	r0, (UNDEF: 1)
    408c:	14db1000 	ldrbne	r1, [fp], #0
    4090:	fa010000 	blx	44098 <__Stack_Size+0x43c98>
    4094:	080041f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, lr}
    4098:	0000000c 	andeq	r0, r0, ip
    409c:	038f9c01 	orreq	r9, pc, #256	; 0x100
    40a0:	5f1c0000 	svcpl	0x001c0000
    40a4:	01000014 	tsteq	r0, r4, lsl r0
    40a8:	0000d6fa 	strdeq	sp, [r0], -sl
    40ac:	00500100 	subseq	r0, r0, r0, lsl #2
    40b0:	000e340b 	andeq	r3, lr, fp, lsl #8
    40b4:	d6ff0100 	ldrbtle	r0, [pc], r0, lsl #2
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	14080042 	strne	r0, [r8], #-66	; 0x42
    40c0:	01000000 	mrseq	r0, (UNDEF: 0)
    40c4:	0003b89c 	muleq	r3, ip, r8
    40c8:	15840c00 	strne	r0, [r4, #3072]	; 0xc00
    40cc:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    40d0:	000000d6 	ldrdeq	r0, [r0], -r6
    40d4:	000012a3 	andeq	r1, r0, r3, lsr #5
    40d8:	144e1d00 	strbne	r1, [lr], #-3328	; 0xd00
    40dc:	07010000 	streq	r0, [r1, -r0]
    40e0:	0000d601 	andeq	sp, r0, r1, lsl #12
    40e4:	00421400 	subeq	r1, r2, r0, lsl #8
    40e8:	00000c08 	andeq	r0, r0, r8, lsl #24
    40ec:	1e9c0100 	fmlnee	f0, f4, f0
    40f0:	0000153e 	andeq	r1, r0, lr, lsr r5
    40f4:	d6010c01 	strle	r0, [r1], -r1, lsl #24
    40f8:	20000000 	andcs	r0, r0, r0
    40fc:	10080042 	andne	r0, r8, r2, asr #32
    4100:	01000000 	mrseq	r0, (UNDEF: 0)
    4104:	0003f99c 	muleq	r3, ip, r9
    4108:	15961f00 	ldrne	r1, [r6, #3840]	; 0xf00
    410c:	0c010000 	stceq	0, cr0, [r1], {-0}
    4110:	0000d601 	andeq	sp, r0, r1, lsl #12
    4114:	0012c400 	andseq	ip, r2, r0, lsl #8
    4118:	a0120000 	andsge	r0, r2, r0
    411c:	30000000 	andcc	r0, r0, r0
    4120:	08080042 	stmdaeq	r8, {r1, r6}
    4124:	01000000 	mrseq	r0, (UNDEF: 0)
    4128:	0004269c 	muleq	r4, ip, r6
    412c:	00b12000 	adcseq	r2, r1, r0
    4130:	12f80000 	rscsne	r0, r8, #0
    4134:	bd210000 	stclt	0, cr0, [r1, #-0]
    4138:	01000000 	mrseq	r0, (UNDEF: 0)
    413c:	00c91351 	sbceq	r1, r9, r1, asr r3
    4140:	13190000 	tstne	r9, #0
    4144:	12000000 	andne	r0, r0, #0
    4148:	000000e4 	andeq	r0, r0, r4, ror #1
    414c:	08004238 	stmdaeq	r0, {r3, r4, r5, r9, lr}
    4150:	00000004 	andeq	r0, r0, r4
    4154:	044c9c01 	strbeq	r9, [ip], #-3073	; 0xc01
    4158:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
    415c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    4160:	13000013 	movwne	r0, #19
    4164:	00000101 	andeq	r0, r0, r1, lsl #2
    4168:	0000136f 	andeq	r1, r0, pc, ror #6
    416c:	010e1200 	mrseq	r1, LR_fiq
    4170:	423c0000 	eorsmi	r0, ip, #0
    4174:	00060800 	andeq	r0, r6, r0, lsl #16
    4178:	9c010000 	stcls	0, cr0, [r1], {-0}
    417c:	00000472 	andeq	r0, r0, r2, ror r4
    4180:	00011f20 	andeq	r1, r1, r0, lsr #30
    4184:	00139800 	andseq	r9, r3, r0, lsl #16
    4188:	012b1300 			; <UNDEFINED> instruction: 0x012b1300
    418c:	13b90000 			; <UNDEFINED> instruction: 0x13b90000
    4190:	22000000 	andcs	r0, r0, #0
    4194:	00001438 	andeq	r1, r0, r8, lsr r4
    4198:	42012c01 	andmi	r2, r1, #256	; 0x100
    419c:	1a080042 	bne	2042ac <__Stack_Size+0x203eac>
    41a0:	01000000 	mrseq	r0, (UNDEF: 0)
    41a4:	0004a19c 	muleq	r4, ip, r1
    41a8:	64692300 	strbtvs	r2, [r9], #-768	; 0x300
    41ac:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    41b0:	000000d6 	ldrdeq	r0, [r0], -r6
    41b4:	000013e8 	andeq	r1, r0, r8, ror #7
    41b8:	00425811 	subeq	r5, r2, r1, lsl r8
    41bc:	00009808 	andeq	r9, r0, r8, lsl #16
    41c0:	c31e0000 	tstgt	lr, #0
    41c4:	0100000b 	tsteq	r0, fp
    41c8:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    41cc:	425c0000 	subsmi	r0, ip, #0
    41d0:	00280800 	eoreq	r0, r8, r0, lsl #16
    41d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    41d8:	000004e4 	andeq	r0, r0, r4, ror #9
    41dc:	00646923 	rsbeq	r6, r4, r3, lsr #18
    41e0:	d6013701 	strle	r3, [r1], -r1, lsl #14
    41e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    41e8:	1f000014 	svcne	0x00000014
    41ec:	00001bed 	andeq	r1, r0, sp, ror #23
    41f0:	d6013701 	strle	r3, [r1], -r1, lsl #14
    41f4:	2a000000 	bcs	41fc <__Stack_Size+0x3dfc>
    41f8:	17000014 	smladne	r0, r4, r0, r0
    41fc:	0800427a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, lr}
    4200:	00000098 	muleq	r0, r8, r0
    4204:	042d2200 	strteq	r2, [sp], #-512	; 0x200
    4208:	46010000 	strmi	r0, [r1], -r0
    420c:	00428401 	subeq	r8, r2, r1, lsl #8
    4210:	00002408 	andeq	r2, r0, r8, lsl #8
    4214:	339c0100 	orrscc	r0, ip, #0, 2
    4218:	23000005 	movwcs	r0, #5
    421c:	01006469 	tsteq	r0, r9, ror #8
    4220:	00d60146 	sbcseq	r0, r6, r6, asr #2
    4224:	144b0000 	strbne	r0, [fp], #-0
    4228:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 4230 <__Stack_Size+0x3e30>
    422c:	0100001b 	tsteq	r0, fp, lsl r0
    4230:	00d60146 	sbcseq	r0, r6, r6, asr #2
    4234:	146c0000 	strbtne	r0, [ip], #-0
    4238:	1b1f0000 	blne	7c4240 <__Stack_Size+0x7c3e40>
    423c:	01000015 	tsteq	r0, r5, lsl r0
    4240:	00d60146 	sbcseq	r0, r6, r6, asr #2
    4244:	148d0000 	strne	r0, [sp], #0
    4248:	a4110000 	ldrge	r0, [r1], #-0
    424c:	98080042 	stmdals	r8, {r1, r6}
    4250:	00000000 	andeq	r0, r0, r0
    4254:	000c721e 	andeq	r7, ip, lr, lsl r2
    4258:	01530100 	cmpeq	r3, r0, lsl #2
    425c:	000000d6 	ldrdeq	r0, [r0], -r6
    4260:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    4264:	00000030 	andeq	r0, r0, r0, lsr r0
    4268:	05b09c01 	ldreq	r9, [r0, #3073]!	; 0xc01
    426c:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    4270:	53010064 	movwpl	r0, #4196	; 0x1064
    4274:	0000d601 	andeq	sp, r0, r1, lsl #12
    4278:	0014ae00 	andseq	sl, r4, r0, lsl #28
    427c:	1bed1f00 	blne	ffb4be84 <SCS_BASE+0x1fb3de84>
    4280:	53010000 	movwpl	r0, #4096	; 0x1000
    4284:	0000d601 	andeq	sp, r0, r1, lsl #12
    4288:	0014cf00 	andseq	ip, r4, r0, lsl #30
    428c:	00a02400 	adceq	r2, r0, r0, lsl #8
    4290:	42c40000 	sbcmi	r0, r4, #0
    4294:	000c0800 	andeq	r0, ip, r0, lsl #16
    4298:	62010000 	andvs	r0, r1, #0
    429c:	0005a601 	andeq	sl, r5, r1, lsl #12
    42a0:	00bd2000 	adcseq	r2, sp, r0
    42a4:	14f00000 	ldrbtne	r0, [r0], #0
    42a8:	b1200000 			; <UNDEFINED> instruction: 0xb1200000
    42ac:	2d000000 	stccs	0, cr0, [r0, #-0]
    42b0:	25000015 	strcs	r0, [r0, #-21]
    42b4:	080042c4 	stmdaeq	r0, {r2, r6, r7, r9, lr}
    42b8:	0000000c 	andeq	r0, r0, ip
    42bc:	0000c913 	andeq	ip, r0, r3, lsl r9
    42c0:	00155500 	andseq	r5, r5, r0, lsl #10
    42c4:	17000000 	strne	r0, [r0, -r0]
    42c8:	080042c4 	stmdaeq	r0, {r2, r6, r7, r9, lr}
    42cc:	00000098 	muleq	r0, r8, r0
    42d0:	04812200 	streq	r2, [r1], #512	; 0x200
    42d4:	65010000 	strvs	r0, [r1, #-0]
    42d8:	0042d801 	subeq	sp, r2, r1, lsl #16
    42dc:	00002c08 	andeq	r2, r0, r8, lsl #24
    42e0:	289c0100 	ldmcs	ip, {r8}
    42e4:	23000006 	movwcs	r0, #6
    42e8:	01006469 	tsteq	r0, r9, ror #8
    42ec:	00d60165 	sbcseq	r0, r6, r5, ror #2
    42f0:	15990000 	ldrne	r0, [r9]
    42f4:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 42fc <__Stack_Size+0x3efc>
    42f8:	0100001b 	tsteq	r0, fp, lsl r0
    42fc:	00d60165 	sbcseq	r0, r6, r5, ror #2
    4300:	15ba0000 	ldrne	r0, [sl, #0]!
    4304:	1b1f0000 	blne	7c430c <__Stack_Size+0x7c3f0c>
    4308:	01000015 	tsteq	r0, r5, lsl r0
    430c:	00d60165 	sbcseq	r0, r6, r5, ror #2
    4310:	15db0000 	ldrbne	r0, [fp]
    4314:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    4318:	e4000001 	str	r0, [r0], #-1
    431c:	04080042 	streq	r0, [r8], #-66	; 0x42
    4320:	01000000 	mrseq	r0, (UNDEF: 0)
    4324:	061e016d 	ldreq	r0, [lr], -sp, ror #2
    4328:	1f260000 	svcne	0x00260000
    432c:	25000001 	strcs	r0, [r0, #-1]
    4330:	080042e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, lr}
    4334:	00000004 	andeq	r0, r0, r4
    4338:	00012b14 	andeq	r2, r1, r4, lsl fp
    433c:	11000000 	mrsne	r0, (UNDEF: 0)
    4340:	080042fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, lr}
    4344:	00000098 	muleq	r0, r8, r0
    4348:	005c2700 	subseq	r2, ip, r0, lsl #14
    434c:	06380000 	ldrteq	r0, [r8], -r0
    4350:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    4354:	9f000006 	svcls	0x00000006
    4358:	07040500 	streq	r0, [r4, -r0, lsl #10]
    435c:	00000b10 	andeq	r0, r0, r0, lsl fp
    4360:	00159c29 	andseq	r9, r5, r9, lsr #24
    4364:	280b0100 	stmdacs	fp, {r8}
    4368:	05000006 	streq	r0, [r0, #-6]
    436c:	00013403 	andeq	r3, r1, r3, lsl #8
    4370:	005c2720 	subseq	r2, ip, r0, lsr #14
    4374:	06600000 	strbteq	r0, [r0], -r0
    4378:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    437c:	45000006 	strmi	r0, [r0, #-6]
    4380:	150c2900 	strne	r2, [ip, #-2304]	; 0x900
    4384:	0c010000 	stceq	0, cr0, [r1], {-0}
    4388:	00000650 	andeq	r0, r0, r0, asr r6
    438c:	01d60305 	bicseq	r0, r6, r5, lsl #6
    4390:	13292000 			; <UNDEFINED> instruction: 0x13292000
    4394:	01000014 	tsteq	r0, r4, lsl r0
    4398:	00005c0d 	andeq	r5, r0, sp, lsl #24
    439c:	d5030500 	strle	r0, [r3, #-1280]	; 0x500
    43a0:	29200001 	stmdbcs	r0!, {r0}
    43a4:	00001559 	andeq	r1, r0, r9, asr r5
    43a8:	005c0e01 	subseq	r0, ip, r1, lsl #28
    43ac:	03050000 	movweq	r0, #20480	; 0x5000
    43b0:	200001d4 	ldrdcs	r0, [r0], -r4
    43b4:	00144129 	andseq	r4, r4, r9, lsr #2
    43b8:	d60f0100 	strle	r0, [pc], -r0, lsl #2
    43bc:	05000000 	streq	r0, [r0, #-0]
    43c0:	00001403 	andeq	r1, r0, r3, lsl #8
    43c4:	158b2920 	strne	r2, [fp, #2336]	; 0x920
    43c8:	10010000 	andne	r0, r1, r0
    43cc:	000000d6 	ldrdeq	r0, [r0], -r6
    43d0:	01300305 	teqeq	r0, r5, lsl #6
    43d4:	062a2000 	strteq	r2, [sl], -r0
    43d8:	02000014 	andeq	r0, r0, #20
    43dc:	0000d60b 	andeq	sp, r0, fp, lsl #12
    43e0:	0006cf00 	andeq	ip, r6, r0, lsl #30
    43e4:	00d62b00 	sbcseq	r2, r6, r0, lsl #22
    43e8:	d62b0000 	strtle	r0, [fp], -r0
    43ec:	00000000 	andeq	r0, r0, r0
    43f0:	0013cd2c 	andseq	ip, r3, ip, lsr #26
    43f4:	2a0c0200 	bcs	304bfc <__Stack_Size+0x3047fc>
    43f8:	000013e6 	andeq	r1, r0, r6, ror #7
    43fc:	00d60e02 	sbcseq	r0, r6, r2, lsl #28
    4400:	06f00000 	ldrbteq	r0, [r0], r0
    4404:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    4408:	2b000006 	blcs	4428 <__Stack_Size+0x4028>
    440c:	000000d6 	ldrdeq	r0, [r0], -r6
    4410:	5c042d00 	stcpl	13, cr2, [r4], {-0}
    4414:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4418:	000013a7 	andeq	r1, r0, r7, lsr #7
    441c:	07071002 	streq	r1, [r7, -r2]
    4420:	d62b0000 	strtle	r0, [fp], -r0
    4424:	00000000 	andeq	r0, r0, r0
    4428:	0013912c 	andseq	r9, r3, ip, lsr #2
    442c:	2a0d0200 	bcs	344c34 <__Stack_Size+0x344834>
    4430:	000013db 	ldrdeq	r1, [r0], -fp
    4434:	00d60f02 	sbcseq	r0, r6, r2, lsl #30
    4438:	07280000 	streq	r0, [r8, -r0]!
    443c:	f02b0000 			; <UNDEFINED> instruction: 0xf02b0000
    4440:	2b000006 	blcs	4460 <__Stack_Size+0x4060>
    4444:	000000d6 	ldrdeq	r0, [r0], -r6
    4448:	13782f00 	cmnne	r8, #0, 30
    444c:	11020000 	mrsne	r0, (UNDEF: 2)
    4450:	000000d6 	ldrdeq	r0, [r0], -r6
    4454:	0008b700 	andeq	fp, r8, r0, lsl #14
    4458:	51000400 	tstpl	r0, r0, lsl #8
    445c:	04000008 	streq	r0, [r0], #-8
    4460:	00086201 	andeq	r6, r8, r1, lsl #4
    4464:	175b0100 	ldrbne	r0, [fp, -r0, lsl #2]
    4468:	00fa0000 	rscseq	r0, sl, r0
    446c:	43040000 	movwmi	r0, #16384	; 0x4000
    4470:	04800800 	streq	r0, [r0], #2048	; 0x800
    4474:	07e00000 	strbeq	r0, [r0, r0]!
    4478:	04020000 	streq	r0, [r2], #-0
    447c:	0009e205 	andeq	lr, r9, r5, lsl #4
    4480:	05020200 	streq	r0, [r2, #-512]	; 0x200
    4484:	000009a6 	andeq	r0, r0, r6, lsr #19
    4488:	77060102 	strvc	r0, [r6, -r2, lsl #2]
    448c:	0300000b 	movweq	r0, #11
    4490:	00323375 	eorseq	r3, r2, r5, ror r3
    4494:	00452702 	subeq	r2, r5, r2, lsl #14
    4498:	04020000 	streq	r0, [r2], #-0
    449c:	000b1907 	andeq	r1, fp, r7, lsl #18
    44a0:	31750300 	cmncc	r5, r0, lsl #6
    44a4:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    44a8:	00000057 	andeq	r0, r0, r7, asr r0
    44ac:	39070202 	stmdbcc	r7, {r1, r9}
    44b0:	0300000d 	movweq	r0, #13
    44b4:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    44b8:	00006829 	andeq	r6, r0, r9, lsr #16
    44bc:	08010200 	stmdaeq	r1, {r9}
    44c0:	00000b75 	andeq	r0, r0, r5, ror fp
    44c4:	0004ec04 	andeq	lr, r4, r4, lsl #24
    44c8:	7a2f0200 	bvc	bc4cd0 <__Stack_Size+0xbc48d0>
    44cc:	05000000 	streq	r0, [r0, #-0]
    44d0:	00000045 	andeq	r0, r0, r5, asr #32
    44d4:	00034704 	andeq	r4, r3, r4, lsl #14
    44d8:	8a300200 	bhi	c04ce0 <__Stack_Size+0xc048e0>
    44dc:	05000000 	streq	r0, [r0, #-0]
    44e0:	00000057 	andeq	r0, r0, r7, asr r0
    44e4:	39020106 	stmdbcc	r2, {r1, r2, r8}
    44e8:	000000a4 	andeq	r0, r0, r4, lsr #1
    44ec:	00198d07 	andseq	r8, r9, r7, lsl #26
    44f0:	53080000 	movwpl	r0, #32768	; 0x8000
    44f4:	01005445 	tsteq	r0, r5, asr #8
    44f8:	09050400 	stmdbeq	r5, {sl}
    44fc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    4500:	0000008f 	andeq	r0, r0, pc, lsl #1
    4504:	3b020106 	blcc	84924 <__Stack_Size+0x84524>
    4508:	000000c4 	andeq	r0, r0, r4, asr #1
    450c:	0005f107 	andeq	pc, r5, r7, lsl #2
    4510:	f2070000 	vhadd.s8	d0, d7, d0
    4514:	0100000a 	tsteq	r0, sl
    4518:	01140400 	tsteq	r4, r0, lsl #8
    451c:	3b020000 	blcc	84524 <__Stack_Size+0x84124>
    4520:	000000af 	andeq	r0, r0, pc, lsr #1
    4524:	10070402 	andne	r0, r7, r2, lsl #8
    4528:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    452c:	010c0324 	tsteq	ip, r4, lsr #6
    4530:	00000152 	andeq	r0, r0, r2, asr r1
    4534:	5243410a 	subpl	r4, r3, #-2147483646	; 0x80000002
    4538:	010e0300 	mrseq	r0, ELR_hyp
    453c:	0000006f 	andeq	r0, r0, pc, rrx
    4540:	16d40b00 	ldrbne	r0, [r4], r0, lsl #22
    4544:	0f030000 	svceq	0x00030000
    4548:	00006f01 	andeq	r6, r0, r1, lsl #30
    454c:	d10b0400 	tstle	fp, r0, lsl #8
    4550:	03000016 	movweq	r0, #22
    4554:	006f0110 	rsbeq	r0, pc, r0, lsl r1	; <UNPREDICTABLE>
    4558:	0a080000 	beq	204560 <__Stack_Size+0x204160>
    455c:	03005253 	movweq	r5, #595	; 0x253
    4560:	006f0111 	rsbeq	r0, pc, r1, lsl r1	; <UNPREDICTABLE>
    4564:	0a0c0000 	beq	30456c <__Stack_Size+0x30416c>
    4568:	03005243 	movweq	r5, #579	; 0x243
    456c:	006f0112 	rsbeq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    4570:	0a100000 	beq	404578 <__Stack_Size+0x404178>
    4574:	03005241 	movweq	r5, #577	; 0x241
    4578:	006f0113 	rsbeq	r0, pc, r3, lsl r1	; <UNPREDICTABLE>
    457c:	0b140000 	bleq	504584 <__Stack_Size+0x504184>
    4580:	00001904 	andeq	r1, r0, r4, lsl #18
    4584:	6f011403 	svcvs	0x00011403
    4588:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    458c:	52424f0a 	subpl	r4, r2, #10, 30	; 0x28
    4590:	01150300 	tsteq	r5, r0, lsl #6
    4594:	0000006f 	andeq	r0, r0, pc, rrx
    4598:	165e0b1c 			; <UNDEFINED> instruction: 0x165e0b1c
    459c:	16030000 	strne	r0, [r3], -r0
    45a0:	00006f01 	andeq	r6, r0, r1, lsl #30
    45a4:	0c002000 	stceq	0, cr2, [r0], {-0}
    45a8:	0000190d 	andeq	r1, r0, sp, lsl #18
    45ac:	d6011703 	strle	r1, [r1], -r3, lsl #14
    45b0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    45b4:	01190310 	tsteq	r9, r0, lsl r3
    45b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    45bc:	5044520a 	subpl	r5, r4, sl, lsl #4
    45c0:	011b0300 	tsteq	fp, r0, lsl #6
    45c4:	0000007f 	andeq	r0, r0, pc, ror r0
    45c8:	18cc0b00 	stmiane	ip, {r8, r9, fp}^
    45cc:	1c030000 	stcne	0, cr0, [r3], {-0}
    45d0:	00007f01 	andeq	r7, r0, r1, lsl #30
    45d4:	d10b0200 	mrsle	r0, R11_fiq
    45d8:	03000018 	movweq	r0, #24
    45dc:	007f011d 	rsbseq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    45e0:	0b040000 	bleq	1045e8 <__Stack_Size+0x1041e8>
    45e4:	000018d7 	ldrdeq	r1, [r0], -r7
    45e8:	7f011e03 	svcvc	0x00011e03
    45ec:	06000000 	streq	r0, [r0], -r0
    45f0:	00169a0b 	andseq	r9, r6, fp, lsl #20
    45f4:	011f0300 	tsteq	pc, r0, lsl #6
    45f8:	0000007f 	andeq	r0, r0, pc, ror r0
    45fc:	169f0b08 	ldrne	r0, [pc], r8, lsl #22
    4600:	20030000 	andcs	r0, r3, r0
    4604:	00007f01 	andeq	r7, r0, r1, lsl #30
    4608:	a40b0a00 	strge	r0, [fp], #-2560	; 0xa00
    460c:	03000016 	movweq	r0, #22
    4610:	007f0121 	rsbseq	r0, pc, r1, lsr #2
    4614:	0b0c0000 	bleq	30461c <__Stack_Size+0x30421c>
    4618:	000016a9 	andeq	r1, r0, r9, lsr #13
    461c:	7f012203 	svcvc	0x00012203
    4620:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4624:	18370c00 	ldmdane	r7!, {sl, fp}
    4628:	23030000 	movwcs	r0, #12288	; 0x3000
    462c:	00015e01 	andeq	r5, r1, r1, lsl #28
    4630:	04010600 	streq	r0, [r1], #-1536	; 0x600
    4634:	0002031d 	andeq	r0, r2, sp, lsl r3
    4638:	17b20700 	ldrne	r0, [r2, r0, lsl #14]!
    463c:	07010000 	streq	r0, [r1, -r0]
    4640:	00001737 	andeq	r1, r0, r7, lsr r7
    4644:	160c0702 	strne	r0, [ip], -r2, lsl #14
    4648:	07030000 	streq	r0, [r3, -r0]
    464c:	000017a3 	andeq	r1, r0, r3, lsr #15
    4650:	17c70704 	strbne	r0, [r7, r4, lsl #14]
    4654:	00050000 	andeq	r0, r5, r0
    4658:	00168404 	andseq	r8, r6, r4, lsl #8
    465c:	dc230400 	cfstrsle	mvf0, [r3], #-0
    4660:	0d000001 	stceq	0, cr0, [r0, #-4]
    4664:	00001827 	andeq	r1, r0, r7, lsr #16
    4668:	03033f01 	movweq	r3, #16129	; 0x3f01
    466c:	01000002 	tsteq	r0, r2
    4670:	0000022c 	andeq	r0, r0, ip, lsr #4
    4674:	0017140e 	andseq	r1, r7, lr, lsl #8
    4678:	03410100 	movteq	r0, #4352	; 0x1100
    467c:	00000203 	andeq	r0, r0, r3, lsl #4
    4680:	08470f00 	stmdaeq	r7, {r8, r9, sl, fp}^
    4684:	56010000 	strpl	r0, [r1], -r0
    4688:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
    468c:	00000018 	andeq	r0, r0, r8, lsl r0
    4690:	02519c01 	subseq	r9, r1, #256	; 0x100
    4694:	2c100000 	ldccs	0, cr0, [r0], {-0}
    4698:	01000016 	tsteq	r0, r6, lsl r0
    469c:	00003a56 	andeq	r3, r0, r6, asr sl
    46a0:	0015fc00 	andseq	pc, r5, r0, lsl #24
    46a4:	420f0000 	andmi	r0, pc, #0
    46a8:	01000018 	tsteq	r0, r8, lsl r0
    46ac:	00431c6a 	subeq	r1, r3, sl, ror #24
    46b0:	00001808 	andeq	r1, r0, r8, lsl #16
    46b4:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    46b8:	10000002 	andne	r0, r0, r2
    46bc:	00001811 	andeq	r1, r0, r1, lsl r8
    46c0:	003a6a01 	eorseq	r6, sl, r1, lsl #20
    46c4:	161d0000 	ldrne	r0, [sp], -r0
    46c8:	0f000000 	svceq	0x00000000
    46cc:	0000093b 	andeq	r0, r0, fp, lsr r9
    46d0:	43347e01 	teqmi	r4, #1, 28
    46d4:	00180800 	andseq	r0, r8, r0, lsl #16
    46d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    46dc:	0000029b 	muleq	r0, fp, r2
    46e0:	00193610 	andseq	r3, r9, r0, lsl r6
    46e4:	3a7e0100 	bcc	1f84aec <__Stack_Size+0x1f846ec>
    46e8:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    46ec:	00000016 	andeq	r0, r0, r6, lsl r0
    46f0:	00166311 	andseq	r6, r6, r1, lsl r3
    46f4:	4c900100 	ldfmis	f0, [r0], {0}
    46f8:	18080043 	stmdane	r8, {r0, r1, r6}
    46fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4700:	1746119c 			; <UNDEFINED> instruction: 0x1746119c
    4704:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    4708:	08004364 	stmdaeq	r0, {r2, r5, r6, r8, r9, lr}
    470c:	00000010 	andeq	r0, r0, r0, lsl r0
    4710:	77129c01 	ldrvc	r9, [r2, -r1, lsl #24]
    4714:	01000018 	tsteq	r0, r8, lsl r0
    4718:	003a0296 	mlaseq	sl, r6, r2, r0
    471c:	43740000 	cmnmi	r4, #0
    4720:	000c0800 	andeq	r0, ip, r0, lsl #16
    4724:	9c010000 	stcls	0, cr0, [r1], {-0}
    4728:	0016ae12 	andseq	sl, r6, r2, lsl lr
    472c:	02a30100 	adceq	r0, r3, #0, 2
    4730:	0000003a 	andeq	r0, r0, sl, lsr r0
    4734:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
    4738:	0000000c 	andeq	r0, r0, ip
    473c:	dd139c01 	ldcle	12, cr9, [r3, #-4]
    4740:	01000017 	tsteq	r0, r7, lsl r0
    4744:	00a402b1 	strhteq	r0, [r4], r1
    4748:	438c0000 	orrmi	r0, ip, #0
    474c:	00100800 	andseq	r0, r0, r0, lsl #16
    4750:	9c010000 	stcls	0, cr0, [r1], {-0}
    4754:	00000314 	andeq	r0, r0, r4, lsl r3
    4758:	0015fe14 	andseq	pc, r5, r4, lsl lr	; <UNPREDICTABLE>
    475c:	02b30100 	adcseq	r0, r3, #0, 2
    4760:	000000a4 	andeq	r0, r0, r4, lsr #1
    4764:	0000165f 	andeq	r1, r0, pc, asr r6
    4768:	163a1300 	ldrtne	r1, [sl], -r0, lsl #6
    476c:	c7010000 	strgt	r0, [r1, -r0]
    4770:	0000a402 	andeq	sl, r0, r2, lsl #8
    4774:	00439c00 	subeq	r9, r3, r0, lsl #24
    4778:	00001008 	andeq	r1, r0, r8
    477c:	3f9c0100 	svccc	0x009c0100
    4780:	14000003 	strne	r0, [r0], #-3
    4784:	00001720 	andeq	r1, r0, r0, lsr #14
    4788:	a402c901 	strge	ip, [r2], #-2305	; 0x901
    478c:	84000000 	strhi	r0, [r0], #-0
    4790:	00000016 	andeq	r0, r0, r6, lsl r0
    4794:	0015c615 	andseq	ip, r5, r5, lsl r6
    4798:	02e20100 	rsceq	r0, r2, #0, 2
    479c:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
    47a0:	00000018 	andeq	r0, r0, r8, lsl r0
    47a4:	03749c01 	cmneq	r4, #256	; 0x100
    47a8:	e9160000 	ldmdb	r6, {}	; <UNPREDICTABLE>
    47ac:	01000018 	tsteq	r0, r8, lsl r0
    47b0:	004c02e2 	subeq	r0, ip, r2, ror #5
    47b4:	16aa0000 	strtne	r0, [sl], r0
    47b8:	91170000 	tstls	r7, r0
    47bc:	01000016 	tsteq	r0, r6, lsl r0
    47c0:	00c402e2 	sbceq	r0, r4, r2, ror #5
    47c4:	51010000 	mrspl	r0, (UNDEF: 1)
    47c8:	177f1300 	ldrbne	r1, [pc, -r0, lsl #6]!
    47cc:	01010000 	mrseq	r0, (UNDEF: 1)
    47d0:	0000a403 	andeq	sl, r0, r3, lsl #8
    47d4:	0043c400 	subeq	ip, r3, r0, lsl #8
    47d8:	00002008 	andeq	r2, r0, r8
    47dc:	af9c0100 	svcge	0x009c0100
    47e0:	16000003 	strne	r0, [r0], -r3
    47e4:	000018a5 	andeq	r1, r0, r5, lsr #17
    47e8:	4c030101 	stfmis	f0, [r3], {1}
    47ec:	e4000000 	str	r0, [r0], #-0
    47f0:	14000016 	strne	r0, [r0], #-22
    47f4:	00001720 	andeq	r1, r0, r0, lsr #14
    47f8:	a4030301 	strge	r0, [r3], #-769	; 0x301
    47fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4800:	00000017 	andeq	r0, r0, r7, lsl r0
    4804:	00179315 	andseq	r9, r7, r5, lsl r3
    4808:	032e0100 			; <UNDEFINED> instruction: 0x032e0100
    480c:	080043e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, lr}
    4810:	0000000c 	andeq	r0, r0, ip
    4814:	03d49c01 	bicseq	r9, r4, #256	; 0x100
    4818:	a5170000 	ldrge	r0, [r7, #-0]
    481c:	01000018 	tsteq	r0, r8, lsl r0
    4820:	004c032e 	subeq	r0, ip, lr, lsr #6
    4824:	50010000 	andpl	r0, r1, r0
    4828:	020e1800 	andeq	r1, lr, #0, 16
    482c:	43f00000 	mvnsmi	r0, #0
    4830:	00280800 	eoreq	r0, r8, r0, lsl #16
    4834:	9c010000 	stcls	0, cr0, [r1], {-0}
    4838:	00000400 	andeq	r0, r0, r0, lsl #8
    483c:	00021f19 	andeq	r1, r2, r9, lsl pc
    4840:	00173d00 	andseq	r3, r7, r0, lsl #26
    4844:	43fe1a00 	mvnsmi	r1, #0, 20
    4848:	000e0800 	andeq	r0, lr, r0, lsl #16
    484c:	1f1b0000 	svcne	0x001b0000
    4850:	00000002 	andeq	r0, r0, r2
    4854:	16581c00 	ldrbne	r1, [r8], -r0, lsl #24
    4858:	85010000 	strhi	r0, [r1, #-0]
    485c:	04180103 	ldreq	r0, [r8], #-259	; 0x103
    4860:	691d0000 	ldmdbvs	sp, {}	; <UNPREDICTABLE>
    4864:	03870100 	orreq	r0, r7, #0, 2
    4868:	0000006f 	andeq	r0, r0, pc, rrx
    486c:	191b1300 	ldmdbne	fp, {r8, r9, ip}
    4870:	66010000 	strvs	r0, [r1], -r0
    4874:	00020303 	andeq	r0, r2, r3, lsl #6
    4878:	00441800 	subeq	r1, r4, r0, lsl #16
    487c:	00003608 	andeq	r3, r0, r8, lsl #12
    4880:	8c9c0100 	ldfhis	f0, [ip], {0}
    4884:	16000004 	strne	r0, [r0], -r4
    4888:	000017d5 	ldrdeq	r1, [r0], -r5
    488c:	3a036601 	bcc	de098 <__Stack_Size+0xddc98>
    4890:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4894:	14000017 	strne	r0, [r0], #-23
    4898:	00001719 	andeq	r1, r0, r9, lsl r7
    489c:	03036801 	movweq	r6, #14337	; 0x3801
    48a0:	7a000002 	bvc	48b0 <__Stack_Size+0x44b0>
    48a4:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    48a8:	00000400 	andeq	r0, r0, r0, lsl #8
    48ac:	08004426 	stmdaeq	r0, {r1, r2, r5, sl, lr}
    48b0:	00000012 	andeq	r0, r0, r2, lsl r0
    48b4:	79037001 	stmdbvc	r3, {r0, ip, sp, lr}
    48b8:	1a000004 	bne	48d0 <__Stack_Size+0x44d0>
    48bc:	08004426 	stmdaeq	r0, {r1, r2, r5, sl, lr}
    48c0:	00000012 	andeq	r0, r0, r2, lsl r0
    48c4:	00040d1f 	andeq	r0, r4, pc, lsl sp
    48c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    48cc:	20200000 	eorcs	r0, r0, r0
    48d0:	0e080044 	cdpeq	0, 0, cr0, cr8, cr4, {2}
    48d4:	20000002 	andcs	r0, r0, r2
    48d8:	0800443c 	stmdaeq	r0, {r2, r3, r4, r5, sl, lr}
    48dc:	0000020e 	andeq	r0, r0, lr, lsl #4
    48e0:	161c2100 	ldrne	r2, [ip], -r0, lsl #2
    48e4:	ad010000 	stcge	0, cr0, [r1, #-0]
    48e8:	00000203 	andeq	r0, r0, r3, lsl #4
    48ec:	0800444e 	stmdaeq	r0, {r1, r2, r3, r6, sl, lr}
    48f0:	00000042 	andeq	r0, r0, r2, asr #32
    48f4:	04ea9c01 	strbteq	r9, [sl], #3073	; 0xc01
    48f8:	2a100000 	bcs	404900 <__Stack_Size+0x404500>
    48fc:	01000017 	tsteq	r0, r7, lsl r0
    4900:	00003aad 	andeq	r3, r0, sp, lsr #21
    4904:	0017af00 	andseq	sl, r7, r0, lsl #30
    4908:	17192200 	ldrne	r2, [r9, -r0, lsl #4]
    490c:	af010000 	svcge	0x00010000
    4910:	00000203 	andeq	r0, r0, r3, lsl #4
    4914:	000017db 	ldrdeq	r1, [r0], -fp
    4918:	00445a23 	subeq	r5, r4, r3, lsr #20
    491c:	00041808 	andeq	r1, r4, r8, lsl #16
    4920:	0004d800 	andeq	sp, r4, r0, lsl #16
    4924:	50012400 	andpl	r2, r1, r0, lsl #8
    4928:	0fff0a03 	svceq	0x00ff0a03
    492c:	447a2500 	ldrbtmi	r2, [sl], #-1280	; 0x500
    4930:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4934:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4938:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    493c:	2100000f 	tstcs	r0, pc
    4940:	00001670 	andeq	r1, r0, r0, ror r6
    4944:	0203d401 	andeq	sp, r3, #16777216	; 0x1000000
    4948:	44900000 	ldrmi	r0, [r0], #0
    494c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    4950:	9c010000 	stcls	0, cr0, [r1], {-0}
    4954:	00000539 	andeq	r0, r0, r9, lsr r5
    4958:	00171922 	andseq	r1, r7, r2, lsr #18
    495c:	03d60100 	bicseq	r0, r6, #0, 2
    4960:	05000002 	streq	r0, [r0, #-2]
    4964:	23000018 	movwcs	r0, #24
    4968:	0800449a 	stmdaeq	r0, {r1, r3, r4, r7, sl, lr}
    496c:	00000418 	andeq	r0, r0, r8, lsl r4
    4970:	00000527 	andeq	r0, r0, r7, lsr #10
    4974:	03500124 	cmpeq	r0, #36, 2
    4978:	000fff0a 	andeq	pc, pc, sl, lsl #30
    497c:	0044b825 	subeq	fp, r4, r5, lsr #16
    4980:	00041808 	andeq	r1, r4, r8, lsl #16
    4984:	50012400 	andpl	r2, r1, r0, lsl #8
    4988:	0fff0a03 	svceq	0x00ff0a03
    498c:	e7210000 	str	r0, [r1, -r0]!
    4990:	01000015 	tsteq	r0, r5, lsl r0
    4994:	000203f7 	strdeq	r0, [r2], -r7
    4998:	0044cc00 	subeq	ip, r4, r0, lsl #24
    499c:	00007008 	andeq	r7, r0, r8
    49a0:	9b9c0100 	blls	fe704da8 <SCS_BASE+0x1e6f6da8>
    49a4:	22000005 	andcs	r0, r0, #5
    49a8:	00001719 	andeq	r1, r0, r9, lsl r7
    49ac:	0203f901 	andeq	pc, r3, #16384	; 0x4000
    49b0:	182f0000 	stmdane	pc!, {}	; <UNPREDICTABLE>
    49b4:	d6230000 	strtle	r0, [r3], -r0
    49b8:	18080044 	stmdane	r8, {r2, r6}
    49bc:	76000004 	strvc	r0, [r0], -r4
    49c0:	24000005 	strcs	r0, [r0], #-5
    49c4:	0a035001 	beq	d89d0 <__Stack_Size+0xd85d0>
    49c8:	23000fff 	movwcs	r0, #4095	; 0xfff
    49cc:	080044fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, lr}
    49d0:	00000418 	andeq	r0, r0, r8, lsl r4
    49d4:	0000058b 	andeq	r0, r0, fp, lsl #11
    49d8:	03500124 	cmpeq	r0, #36, 2
    49dc:	000fff0a 	andeq	pc, pc, sl, lsl #30
    49e0:	00452025 	subeq	r2, r5, r5, lsr #32
    49e4:	00041808 	andeq	r1, r4, r8, lsl #16
    49e8:	50012400 	andpl	r2, r1, r0, lsl #8
    49ec:	00003f01 	andeq	r3, r0, r1, lsl #30
    49f0:	0018f213 	andseq	pc, r8, r3, lsl r2	; <UNPREDICTABLE>
    49f4:	01360100 	teqeq	r6, r0, lsl #2
    49f8:	00000203 	andeq	r0, r0, r3, lsl #4
    49fc:	0800453c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, lr}
    4a00:	00000048 	andeq	r0, r0, r8, asr #32
    4a04:	061b9c01 	ldreq	r9, [fp], -r1, lsl #24
    4a08:	13160000 	tstne	r6, #0
    4a0c:	0100002f 	tsteq	r0, pc, lsr #32
    4a10:	003a0136 	eorseq	r0, sl, r6, lsr r1
    4a14:	18640000 	stmdane	r4!, {}^	; <UNPREDICTABLE>
    4a18:	0c160000 	ldceq	0, cr0, [r6], {-0}
    4a1c:	01000018 	tsteq	r0, r8, lsl r0
    4a20:	003a0136 	eorseq	r0, sl, r6, lsr r1
    4a24:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
    4a28:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    4a2c:	01000017 	tsteq	r0, r7, lsl r0
    4a30:	02030138 	andeq	r0, r3, #56, 2
    4a34:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    4a38:	48230000 	stmdami	r3!, {}	; <UNPREDICTABLE>
    4a3c:	18080045 	stmdane	r8, {r0, r2, r6}
    4a40:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    4a44:	24000005 	strcs	r0, [r0], #-5
    4a48:	3f015001 	svccc	0x00015001
    4a4c:	45602300 	strbmi	r2, [r0, #-768]!	; 0x300
    4a50:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4a54:	060b0000 	streq	r0, [fp], -r0
    4a58:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4a5c:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4a60:	00456e25 	subeq	r6, r5, r5, lsr #28
    4a64:	00041808 	andeq	r1, r4, r8, lsl #16
    4a68:	50012400 	andpl	r2, r1, r0, lsl #8
    4a6c:	00003f01 	andeq	r3, r0, r1, lsl #30
    4a70:	00188f13 	andseq	r8, r8, r3, lsl pc
    4a74:	01710100 	cmneq	r1, r0, lsl #2
    4a78:	00000203 	andeq	r0, r0, r3, lsl #4
    4a7c:	08004584 	stmdaeq	r0, {r2, r7, r8, sl, lr}
    4a80:	00000038 	andeq	r0, r0, r8, lsr r0
    4a84:	06889c01 	streq	r9, [r8], r1, lsl #24
    4a88:	13160000 	tstne	r6, #0
    4a8c:	0100002f 	tsteq	r0, pc, lsr #32
    4a90:	003a0171 	eorseq	r0, sl, r1, ror r1
    4a94:	18f10000 	ldmne	r1!, {}^	; <UNPREDICTABLE>
    4a98:	0c160000 	ldceq	0, cr0, [r6], {-0}
    4a9c:	01000018 	tsteq	r0, r8, lsl r0
    4aa0:	004c0171 	subeq	r0, ip, r1, ror r1
    4aa4:	191d0000 	ldmdbne	sp, {}	; <UNPREDICTABLE>
    4aa8:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    4aac:	01000017 	tsteq	r0, r7, lsl r0
    4ab0:	02030173 	andeq	r0, r3, #-1073741796	; 0xc000001c
    4ab4:	193e0000 	ldmdbne	lr!, {}	; <UNPREDICTABLE>
    4ab8:	90230000 	eorls	r0, r3, r0
    4abc:	18080045 	stmdane	r8, {r0, r2, r6}
    4ac0:	78000004 	stmdavc	r0, {r2}
    4ac4:	24000006 	strcs	r0, [r0], #-6
    4ac8:	3f015001 	svccc	0x00015001
    4acc:	45a62500 	strmi	r2, [r6, #1280]!	; 0x500
    4ad0:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4ad4:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4ad8:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4adc:	185b1300 	ldmdane	fp, {r8, r9, ip}^
    4ae0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    4ae4:	00020301 	andeq	r0, r2, r1, lsl #6
    4ae8:	0045bc00 	subeq	fp, r5, r0, lsl #24
    4aec:	00004808 	andeq	r4, r0, r8, lsl #16
    4af0:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    4af4:	16000006 	strne	r0, [r0], -r6
    4af8:	00002f13 	andeq	r2, r0, r3, lsl pc
    4afc:	3a019901 	bcc	6af08 <__Stack_Size+0x6ab08>
    4b00:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4b04:	16000019 			; <UNDEFINED> instruction: 0x16000019
    4b08:	0000180c 	andeq	r1, r0, ip, lsl #16
    4b0c:	5e019901 	cdppl	9, 0, cr9, cr1, cr1, {0}
    4b10:	94000000 	strls	r0, [r0], #-0
    4b14:	14000019 	strne	r0, [r0], #-25
    4b18:	00001719 	andeq	r1, r0, r9, lsl r7
    4b1c:	03019b01 	movweq	r9, #6913	; 0x1b01
    4b20:	b5000002 	strlt	r0, [r0, #-2]
    4b24:	23000019 	movwcs	r0, #25
    4b28:	080045c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, lr}
    4b2c:	00000418 	andeq	r0, r0, r8, lsl r4
    4b30:	000006e5 	andeq	r0, r0, r5, ror #13
    4b34:	01500124 	cmpeq	r0, r4, lsr #2
    4b38:	ea25003f 	b	944c3c <__Stack_Size+0x94483c>
    4b3c:	18080045 	stmdane	r8, {r0, r2, r6}
    4b40:	24000004 	strcs	r0, [r0], #-4
    4b44:	3f015001 	svccc	0x00015001
    4b48:	b0130000 	andslt	r0, r3, r0
    4b4c:	01000018 	tsteq	r0, r8, lsl r0
    4b50:	020301ca 	andeq	r0, r3, #-2147483598	; 0x80000032
    4b54:	46040000 	strmi	r0, [r4], -r0
    4b58:	00a00800 	adceq	r0, r0, r0, lsl #16
    4b5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b60:	000007cb 	andeq	r0, r0, fp, asr #15
    4b64:	0018dd16 	andseq	sp, r8, r6, lsl sp
    4b68:	01ca0100 	biceq	r0, sl, r0, lsl #2
    4b6c:	0000003a 	andeq	r0, r0, sl, lsr r0
    4b70:	000019df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4b74:	00180714 	andseq	r0, r8, r4, lsl r7
    4b78:	01cc0100 	biceq	r0, ip, r0, lsl #2
    4b7c:	0000004c 	andeq	r0, r0, ip, asr #32
    4b80:	00001a28 	andeq	r1, r0, r8, lsr #20
    4b84:	0017bd14 	andseq	fp, r7, r4, lsl sp
    4b88:	01cc0100 	biceq	r0, ip, r0, lsl #2
    4b8c:	0000004c 	andeq	r0, r0, ip, asr #32
    4b90:	00001a74 	andeq	r1, r0, r4, ror sl
    4b94:	0015d514 	andseq	sp, r5, r4, lsl r5
    4b98:	01cc0100 	biceq	r0, ip, r0, lsl #2
    4b9c:	0000004c 	andeq	r0, r0, ip, asr #32
    4ba0:	00001acc 	andeq	r1, r0, ip, asr #21
    4ba4:	00175114 	andseq	r5, r7, r4, lsl r1
    4ba8:	01cc0100 	biceq	r0, ip, r0, lsl #2
    4bac:	0000004c 	andeq	r0, r0, ip, asr #32
    4bb0:	00001b28 	andeq	r1, r0, r8, lsr #22
    4bb4:	00171914 	andseq	r1, r7, r4, lsl r9
    4bb8:	01ce0100 	biceq	r0, lr, r0, lsl #2
    4bbc:	00000203 	andeq	r0, r0, r3, lsl #4
    4bc0:	00001b70 	andeq	r1, r0, r0, ror fp
    4bc4:	00460e23 	subeq	r0, r6, r3, lsr #28
    4bc8:	00041808 	andeq	r1, r4, r8, lsl #16
    4bcc:	00078200 	andeq	r8, r7, r0, lsl #4
    4bd0:	50012400 	andpl	r2, r1, r0, lsl #8
    4bd4:	23003f01 	movwcs	r3, #3841	; 0xf01
    4bd8:	08004642 	stmdaeq	r0, {r1, r6, r9, sl, lr}
    4bdc:	00000418 	andeq	r0, r0, r8, lsl r4
    4be0:	00000795 	muleq	r0, r5, r7
    4be4:	01500124 	cmpeq	r0, r4, lsr #2
    4be8:	5423003f 	strtpl	r0, [r3], #-63	; 0x3f
    4bec:	18080046 	stmdane	r8, {r1, r2, r6}
    4bf0:	a8000004 	stmdage	r0, {r2}
    4bf4:	24000007 	strcs	r0, [r0], #-7
    4bf8:	3f015001 	svccc	0x00015001
    4bfc:	466c2300 	strbtmi	r2, [ip], -r0, lsl #6
    4c00:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    4c04:	07bb0000 	ldreq	r0, [fp, r0]!
    4c08:	01240000 			; <UNDEFINED> instruction: 0x01240000
    4c0c:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    4c10:	00468625 	subeq	r8, r6, r5, lsr #12
    4c14:	00041808 	andeq	r1, r4, r8, lsl #16
    4c18:	50012400 	andpl	r2, r1, r0, lsl #8
    4c1c:	00003f01 	andeq	r3, r0, r1, lsl #30
    4c20:	0016fc13 	andseq	pc, r6, r3, lsl ip	; <UNPREDICTABLE>
    4c24:	02190100 	andseq	r0, r9, #0, 2
    4c28:	00000203 	andeq	r0, r0, r3, lsl #4
    4c2c:	080046a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, lr}
    4c30:	0000008c 	andeq	r0, r0, ip, lsl #1
    4c34:	08419c01 	stmdaeq	r1, {r0, sl, fp, ip, pc}^
    4c38:	91160000 	tstls	r6, r0
    4c3c:	01000016 	tsteq	r0, r6, lsl r0
    4c40:	00c40219 	sbceq	r0, r4, r9, lsl r2
    4c44:	1bc60000 	blne	ff184c4c <SCS_BASE+0x1f176c4c>
    4c48:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    4c4c:	01000017 	tsteq	r0, r7, lsl r0
    4c50:	0203021b 	andeq	r0, r3, #-1342177279	; 0xb0000001
    4c54:	1be70000 	blne	ff9c4c5c <SCS_BASE+0x1f9b6c5c>
    4c58:	b0230000 	eorlt	r0, r3, r0
    4c5c:	18080046 	stmdane	r8, {r1, r2, r6}
    4c60:	1a000004 	bne	4c78 <__Stack_Size+0x4878>
    4c64:	24000008 	strcs	r0, [r0], #-8
    4c68:	0a035001 	beq	d8c74 <__Stack_Size+0xd8874>
    4c6c:	23000fff 	movwcs	r0, #4095	; 0xfff
    4c70:	080046d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, lr}
    4c74:	00000418 	andeq	r0, r0, r8, lsl r4
    4c78:	0000082f 	andeq	r0, r0, pc, lsr #16
    4c7c:	03500124 	cmpeq	r0, #36, 2
    4c80:	000fff0a 	andeq	pc, pc, sl, lsl #30
    4c84:	00470225 	subeq	r0, r7, r5, lsr #4
    4c88:	00041808 	andeq	r1, r4, r8, lsl #16
    4c8c:	50012400 	andpl	r2, r1, r0, lsl #8
    4c90:	0fff0a03 	svceq	0x00ff0a03
    4c94:	d9260000 	stmdble	r6!, {}	; <UNPREDICTABLE>
    4c98:	01000016 	tsteq	r0, r6, lsl r0
    4c9c:	0203026a 	andeq	r0, r3, #-1610612730	; 0xa0000006
    4ca0:	47300000 	ldrmi	r0, [r0, -r0]!
    4ca4:	00540800 	subseq	r0, r4, r0, lsl #16
    4ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cac:	0016f416 	andseq	pc, r6, r6, lsl r4	; <UNPREDICTABLE>
    4cb0:	026a0100 	rsbeq	r0, sl, #0, 2
    4cb4:	0000004c 	andeq	r0, r0, ip, asr #32
    4cb8:	00001c1c 	andeq	r1, r0, ip, lsl ip
    4cbc:	0015df16 	andseq	sp, r5, r6, lsl pc
    4cc0:	026a0100 	rsbeq	r0, sl, #0, 2
    4cc4:	0000004c 	andeq	r0, r0, ip, asr #32
    4cc8:	00001c3d 	andeq	r1, r0, sp, lsr ip
    4ccc:	0017fe16 	andseq	pc, r7, r6, lsl lr	; <UNPREDICTABLE>
    4cd0:	026a0100 	rsbeq	r0, sl, #0, 2
    4cd4:	0000004c 	andeq	r0, r0, ip, asr #32
    4cd8:	00001c5e 	andeq	r1, r0, lr, asr ip
    4cdc:	00171914 	andseq	r1, r7, r4, lsl r9
    4ce0:	026c0100 	rsbeq	r0, ip, #0, 2
    4ce4:	00000203 	andeq	r0, r0, r3, lsl #4
    4ce8:	00001c7f 	andeq	r1, r0, pc, ror ip
    4cec:	00474a23 	subeq	r4, r7, r3, lsr #20
    4cf0:	00041808 	andeq	r1, r4, r8, lsl #16
    4cf4:	0008aa00 	andeq	sl, r8, r0, lsl #20
    4cf8:	50012400 	andpl	r2, r1, r0, lsl #8
    4cfc:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    4d00:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
    4d04:	00000418 	andeq	r0, r0, r8, lsl r4
    4d08:	01500124 	cmpeq	r0, r4, lsr #2
    4d0c:	0000003f 	andeq	r0, r0, pc, lsr r0
    4d10:	00000743 	andeq	r0, r0, r3, asr #14
    4d14:	0a9f0004 	beq	fe7c4d2c <SCS_BASE+0x1e7b6d2c>
    4d18:	01040000 	mrseq	r0, (UNDEF: 4)
    4d1c:	00000862 	andeq	r0, r0, r2, ror #16
    4d20:	0019a801 	andseq	sl, r9, r1, lsl #16
    4d24:	0000fa00 	andeq	pc, r0, r0, lsl #20
    4d28:	00478400 	subeq	r8, r7, r0, lsl #8
    4d2c:	00025608 	andeq	r5, r2, r8, lsl #12
    4d30:	0009ea00 	andeq	lr, r9, r0, lsl #20
    4d34:	05040200 	streq	r0, [r4, #-512]	; 0x200
    4d38:	000009e2 	andeq	r0, r0, r2, ror #19
    4d3c:	a6050202 	strge	r0, [r5], -r2, lsl #4
    4d40:	02000009 	andeq	r0, r0, #9
    4d44:	0b770601 	bleq	1dc6550 <__Stack_Size+0x1dc6150>
    4d48:	75030000 	strvc	r0, [r3, #-0]
    4d4c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    4d50:	00004527 	andeq	r4, r0, r7, lsr #10
    4d54:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4d58:	00000b19 	andeq	r0, r0, r9, lsl fp
    4d5c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    4d60:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    4d64:	02000000 	andeq	r0, r0, #0
    4d68:	0d390702 	ldceq	7, cr0, [r9, #-8]!
    4d6c:	75030000 	strvc	r0, [r3, #-0]
    4d70:	29020038 	stmdbcs	r2, {r3, r4, r5}
    4d74:	00000068 	andeq	r0, r0, r8, rrx
    4d78:	75080102 	strvc	r0, [r8, #-258]	; 0x102
    4d7c:	0400000b 	streq	r0, [r0], #-11
    4d80:	000004ec 	andeq	r0, r0, ip, ror #9
    4d84:	007a2f02 	rsbseq	r2, sl, r2, lsl #30
    4d88:	45050000 	strmi	r0, [r5, #-0]
    4d8c:	06000000 	streq	r0, [r0], -r0
    4d90:	943b0201 	ldrtls	r0, [fp], #-513	; 0x201
    4d94:	07000000 	streq	r0, [r0, -r0]
    4d98:	000005f1 	strdeq	r0, [r0], -r1
    4d9c:	0af20700 	beq	ffc869a4 <SCS_BASE+0x1fc789a4>
    4da0:	00010000 	andeq	r0, r1, r0
    4da4:	00011404 	andeq	r1, r1, r4, lsl #8
    4da8:	7f3b0200 	svcvc	0x003b0200
    4dac:	02000000 	andeq	r0, r0, #0
    4db0:	0b100704 	bleq	4069c8 <__Stack_Size+0x4065c8>
    4db4:	1c080000 	stcne	0, cr0, [r8], {-0}
    4db8:	0b014e03 	bleq	585cc <__Stack_Size+0x581cc>
    4dbc:	09000001 	stmdbeq	r0, {r0}
    4dc0:	004c5243 	subeq	r5, ip, r3, asr #4
    4dc4:	6f015003 	svcvs	0x00015003
    4dc8:	00000000 	andeq	r0, r0, r0
    4dcc:	48524309 	ldmdami	r2, {r0, r3, r8, r9, lr}^
    4dd0:	01510300 	cmpeq	r1, r0, lsl #6
    4dd4:	0000006f 	andeq	r0, r0, pc, rrx
    4dd8:	44490904 	strbmi	r0, [r9], #-2308	; 0x904
    4ddc:	52030052 	andpl	r0, r3, #82	; 0x52
    4de0:	00006f01 	andeq	r6, r0, r1, lsl #30
    4de4:	4f090800 	svcmi	0x00090800
    4de8:	03005244 	movweq	r5, #580	; 0x244
    4dec:	006f0153 	rsbeq	r0, pc, r3, asr r1	; <UNPREDICTABLE>
    4df0:	0a0c0000 	beq	304df8 <__Stack_Size+0x3049f8>
    4df4:	00000076 	andeq	r0, r0, r6, ror r0
    4df8:	6f015403 	svcvs	0x00015403
    4dfc:	10000000 	andne	r0, r0, r0
    4e00:	52524209 	subspl	r4, r2, #-1879048192	; 0x90000000
    4e04:	01550300 	cmpeq	r5, r0, lsl #6
    4e08:	0000006f 	andeq	r0, r0, pc, rrx
    4e0c:	0e2f0a14 	mcreq	10, 1, r0, cr15, cr4, {0}
    4e10:	56030000 	strpl	r0, [r3], -r0
    4e14:	00006f01 	andeq	r6, r0, r1, lsl #30
    4e18:	0b001800 	bleq	ae20 <__Stack_Size+0xaa20>
    4e1c:	00000a96 	muleq	r0, r6, sl
    4e20:	a6015703 	strge	r5, [r1], -r3, lsl #14
    4e24:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4e28:	01590318 	cmpeq	r9, r8, lsl r3
    4e2c:	00000148 	andeq	r0, r0, r8, asr #2
    4e30:	001af70a 	andseq	pc, sl, sl, lsl #14
    4e34:	015b0300 	cmpeq	fp, r0, lsl #6
    4e38:	0000006f 	andeq	r0, r0, pc, rrx
    4e3c:	1adc0a00 	bne	ff707644 <SCS_BASE+0x1f6f9644>
    4e40:	5c030000 	stcpl	0, cr0, [r3], {-0}
    4e44:	00006f01 	andeq	r6, r0, r1, lsl #30
    4e48:	a10a0400 	tstge	sl, r0, lsl #8
    4e4c:	03000019 	movweq	r0, #25
    4e50:	0158015d 	cmpeq	r8, sp, asr r1
    4e54:	00080000 	andeq	r0, r8, r0
    4e58:	00006f0c 	andeq	r6, r0, ip, lsl #30
    4e5c:	00015800 	andeq	r5, r1, r0, lsl #16
    4e60:	009f0d00 	addseq	r0, pc, r0, lsl #26
    4e64:	00030000 	andeq	r0, r3, r0
    4e68:	00014805 	andeq	r4, r1, r5, lsl #16
    4e6c:	1ac50b00 	bne	ff147a74 <SCS_BASE+0x1f139a74>
    4e70:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    4e74:	00011701 	andeq	r1, r1, r1, lsl #14
    4e78:	04010600 	streq	r0, [r1], #-1536	; 0x600
    4e7c:	00018423 	andeq	r8, r1, r3, lsr #8
    4e80:	03ab0700 			; <UNDEFINED> instruction: 0x03ab0700
    4e84:	07010000 	streq	r0, [r1, -r0]
    4e88:	00000291 	muleq	r0, r1, r2
    4e8c:	0b9e0702 	bleq	fe786a9c <SCS_BASE+0x1e778a9c>
    4e90:	00030000 	andeq	r0, r3, r0
    4e94:	00091004 	andeq	r1, r9, r4
    4e98:	69270400 	stmdbvs	r7!, {sl}
    4e9c:	06000001 	streq	r0, [r0], -r1
    4ea0:	c92e0401 	stmdbgt	lr!, {r0, sl}
    4ea4:	07000001 	streq	r0, [r0, -r1]
    4ea8:	0000092d 	andeq	r0, r0, sp, lsr #18
    4eac:	0dd50700 	ldcleq	7, cr0, [r5]
    4eb0:	07040000 	streq	r0, [r4, -r0]
    4eb4:	0000046e 	andeq	r0, r0, lr, ror #8
    4eb8:	04900728 	ldreq	r0, [r0], #1832	; 0x728
    4ebc:	00c80000 	sbceq	r0, r8, r0
    4ec0:	0004c407 	andeq	ip, r4, r7, lsl #8
    4ec4:	00071400 	andeq	r1, r7, r0, lsl #8
    4ec8:	10000000 	andne	r0, r0, r0
    4ecc:	00081407 	andeq	r1, r8, r7, lsl #8
    4ed0:	d2071c00 	andle	r1, r7, #0, 24
    4ed4:	18000009 	stmdane	r0, {r0, r3}
    4ed8:	0ab20400 	beq	fec85ee0 <SCS_BASE+0x1ec77ee0>
    4edc:	36040000 	strcc	r0, [r4], -r0
    4ee0:	0000018f 	andeq	r0, r0, pc, lsl #3
    4ee4:	3e04040e 	cdpcc	4, 0, cr0, cr4, cr14, {0}
    4ee8:	00000201 	andeq	r0, r0, r1, lsl #4
    4eec:	0000d60f 	andeq	sp, r0, pc, lsl #12
    4ef0:	4c400400 	cfstrdmi	mvd0, [r0], {-0}
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	0009f00f 	andeq	pc, r9, pc
    4efc:	84410400 	strbhi	r0, [r1], #-1024	; 0x400
    4f00:	02000001 	andeq	r0, r0, #1
    4f04:	0000bd0f 	andeq	fp, r0, pc, lsl #26
    4f08:	c9420400 	stmdbgt	r2, {sl}^
    4f0c:	03000001 	movweq	r0, #1
    4f10:	0b640400 	bleq	1905f18 <__Stack_Size+0x1905b18>
    4f14:	43040000 	movwmi	r0, #16384	; 0x4000
    4f18:	000001d4 	ldrdeq	r0, [r0], -r4
    4f1c:	47040106 	strmi	r0, [r4, -r6, lsl #2]
    4f20:	00000221 	andeq	r0, r0, r1, lsr #4
    4f24:	00198907 	andseq	r8, r9, r7, lsl #18
    4f28:	52070000 	andpl	r0, r7, #0
    4f2c:	01000019 	tsteq	r0, r9, lsl r0
    4f30:	1ad20400 	bne	ff485f38 <SCS_BASE+0x1f477f38>
    4f34:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    4f38:	0000020c 	andeq	r0, r0, ip, lsl #4
    4f3c:	0019e310 	andseq	lr, r9, r0, lsl r3
    4f40:	84330100 	ldrthi	r0, [r3], #-256	; 0x100
    4f44:	a4080047 	strge	r0, [r8], #-71	; 0x47
    4f48:	01000000 	mrseq	r0, (UNDEF: 0)
    4f4c:	00030d9c 	muleq	r3, ip, sp
    4f50:	1ae11100 	bne	ff849358 <SCS_BASE+0x1f83b358>
    4f54:	33010000 	movwcc	r0, #4096	; 0x1000
    4f58:	0000030d 	andeq	r0, r0, sp, lsl #6
    4f5c:	00001ca9 	andeq	r1, r0, r9, lsr #25
    4f60:	0047ae12 	subeq	sl, r7, r2, lsl lr
    4f64:	00073308 	andeq	r3, r7, r8, lsl #6
    4f68:	00026800 	andeq	r6, r2, r0, lsl #16
    4f6c:	51011300 	mrspl	r1, SP_irq
    4f70:	01133101 	tsteq	r3, r1, lsl #2
    4f74:	00340150 	eorseq	r0, r4, r0, asr r1
    4f78:	0047d012 	subeq	sp, r7, r2, lsl r0
    4f7c:	00073308 	andeq	r3, r7, r8, lsl #6
    4f80:	00028100 	andeq	r8, r2, r0, lsl #2
    4f84:	51011300 	mrspl	r1, SP_irq
    4f88:	01133101 	tsteq	r3, r1, lsl #2
    4f8c:	40080250 	andmi	r0, r8, r0, asr r2
    4f90:	47dc1200 	ldrbmi	r1, [ip, r0, lsl #4]
    4f94:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    4f98:	02990000 	addseq	r0, r9, #0
    4f9c:	01130000 	tsteq	r3, r0
    4fa0:	13310151 	teqne	r1, #1073741844	; 0x40000014
    4fa4:	38015001 	stmdacc	r1, {r0, ip, lr}
    4fa8:	47e81200 	strbmi	r1, [r8, r0, lsl #4]!
    4fac:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    4fb0:	02b10000 	adcseq	r0, r1, #0
    4fb4:	01130000 	tsteq	r3, r0
    4fb8:	13310151 	teqne	r1, #1073741844	; 0x40000014
    4fbc:	40015001 	andmi	r5, r1, r1
    4fc0:	47f41200 	ldrbmi	r1, [r4, r0, lsl #4]!
    4fc4:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    4fc8:	02ca0000 	sbceq	r0, sl, #0
    4fcc:	01130000 	tsteq	r3, r0
    4fd0:	13310151 	teqne	r1, #1073741844	; 0x40000014
    4fd4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    4fd8:	00120020 	andseq	r0, r2, r0, lsr #32
    4fdc:	33080048 	movwcc	r0, #32840	; 0x8048
    4fe0:	e3000007 	movw	r0, #7
    4fe4:	13000002 	movwne	r0, #2
    4fe8:	31015101 	tstcc	r1, r1, lsl #2
    4fec:	02500113 	subseq	r0, r0, #-1073741820	; 0xc0000004
    4ff0:	12008008 	andne	r8, r0, #8
    4ff4:	0800480e 	stmdaeq	r0, {r1, r2, r3, fp, lr}
    4ff8:	00000733 	andeq	r0, r0, r3, lsr r7
    4ffc:	000002fd 	strdeq	r0, [r0], -sp
    5000:	01510113 	cmpeq	r1, r3, lsl r1
    5004:	50011331 	andpl	r1, r1, r1, lsr r3
    5008:	01000a03 	tsteq	r0, r3, lsl #20
    500c:	481c1400 	ldmdami	ip, {sl, ip}
    5010:	07330800 	ldreq	r0, [r3, -r0, lsl #16]!
    5014:	01130000 	tsteq	r3, r0
    5018:	00300151 	eorseq	r0, r0, r1, asr r1
    501c:	0b041500 	bleq	10a424 <__Stack_Size+0x10a024>
    5020:	10000001 	andne	r0, r0, r1
    5024:	00001b13 	andeq	r1, r0, r3, lsl fp
    5028:	48286b01 	stmdami	r8!, {r0, r8, r9, fp, sp, lr}
    502c:	00160800 	andseq	r0, r6, r0, lsl #16
    5030:	9c010000 	stcls	0, cr0, [r1], {-0}
    5034:	00000355 	andeq	r0, r0, r5, asr r3
    5038:	00483212 	subeq	r3, r8, r2, lsl r2
    503c:	00073308 	andeq	r3, r7, r8, lsl #6
    5040:	00034000 	andeq	r4, r3, r0
    5044:	51011300 	mrspl	r1, SP_irq
    5048:	01133101 	tsteq	r3, r1, lsl #2
    504c:	00310150 	eorseq	r0, r1, r0, asr r1
    5050:	00483e14 	subeq	r3, r8, r4, lsl lr
    5054:	00073308 	andeq	r3, r7, r8, lsl #6
    5058:	51011300 	mrspl	r1, SP_irq
    505c:	01133001 	tsteq	r3, r1
    5060:	00310150 	eorseq	r0, r1, r0, asr r1
    5064:	024a1000 	subeq	r1, sl, #0
    5068:	7c010000 	stcvc	0, cr0, [r1], {-0}
    506c:	0800483e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, lr}
    5070:	0000009c 	muleq	r0, ip, r0
    5074:	03e19c01 	mvneq	r9, #256	; 0x100
    5078:	e1160000 	tst	r6, r0
    507c:	0100001a 	tsteq	r0, sl, lsl r0
    5080:	00030d7c 	andeq	r0, r3, ip, ror sp
    5084:	11500100 	cmpne	r0, r0, lsl #2
    5088:	00001ae7 	andeq	r1, r0, r7, ror #21
    508c:	03e17c01 	mvneq	r7, #256	; 0x100
    5090:	1d6b0000 	stclne	0, cr0, [fp, #-0]
    5094:	36170000 	ldrcc	r0, [r7], -r0
    5098:	0100001a 	tsteq	r0, sl, lsl r0
    509c:	00003a7e 	andeq	r3, r0, lr, ror sl
    50a0:	001d8c00 	andseq	r8, sp, r0, lsl #24
    50a4:	1a961700 	bne	fe58acac <SCS_BASE+0x1e57ccac>
    50a8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    50ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    50b0:	00001dbb 			; <UNDEFINED> instruction: 0x00001dbb
    50b4:	00194b17 	andseq	r4, r9, r7, lsl fp
    50b8:	3a7e0100 	bcc	1f854c0 <__Stack_Size+0x1f850c0>
    50bc:	e5000000 	str	r0, [r0, #-0]
    50c0:	1800001d 	stmdane	r0, {r0, r2, r3, r4}
    50c4:	00736f70 	rsbseq	r6, r3, r0, ror pc
    50c8:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    50cc:	1e1b0000 	cdpne	0, 1, cr0, cr11, cr0, {0}
    50d0:	27170000 	ldrcs	r0, [r7, -r0]
    50d4:	0100001a 	tsteq	r0, sl, lsl r0
    50d8:	00003a7f 	andeq	r3, r0, pc, ror sl
    50dc:	001e7900 	andseq	r7, lr, r0, lsl #18
    50e0:	19cb1700 	stmibne	fp, {r8, r9, sl, ip}^
    50e4:	7f010000 	svcvc	0x00010000
    50e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    50ec:	00001ea3 	andeq	r1, r0, r3, lsr #29
    50f0:	01041500 	tsteq	r4, r0, lsl #10
    50f4:	10000002 	andne	r0, r0, r2
    50f8:	00000047 	andeq	r0, r0, r7, asr #32
    50fc:	48dae501 	ldmmi	sl, {r0, r8, sl, sp, lr, pc}^
    5100:	00100800 	andseq	r0, r0, r0, lsl #16
    5104:	9c010000 	stcls	0, cr0, [r1], {-0}
    5108:	0000040a 	andeq	r0, r0, sl, lsl #8
    510c:	001ae716 	andseq	lr, sl, r6, lsl r7
    5110:	e1e50100 	mvn	r0, r0, lsl #2
    5114:	01000003 	tsteq	r0, r3
    5118:	11190050 	tstne	r9, r0, asr r0
    511c:	0100001a 	tsteq	r0, sl, lsl r0
    5120:	00005ef6 	strdeq	r5, [r0], -r6
    5124:	0048ea00 	subeq	lr, r8, r0, lsl #20
    5128:	00000c08 	andeq	r0, r0, r8, lsl #24
    512c:	4f9c0100 	svcmi	0x009c0100
    5130:	11000004 	tstne	r0, r4
    5134:	00001ae1 	andeq	r1, r0, r1, ror #21
    5138:	030df601 	movweq	pc, #54785	; 0xd601	; <UNPREDICTABLE>
    513c:	1f090000 	svcne	0x00090000
    5140:	d6160000 	ldrle	r0, [r6], -r0
    5144:	01000000 	mrseq	r0, (UNDEF: 0)
    5148:	00004cf6 	strdeq	r4, [r0], -r6
    514c:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    5150:	00001720 	andeq	r1, r0, r0, lsr #14
    5154:	005ef801 	subseq	pc, lr, r1, lsl #16
    5158:	1f2a0000 	svcne	0x002a0000
    515c:	1a000000 	bne	5164 <__Stack_Size+0x4d64>
    5160:	00001a68 	andeq	r1, r0, r8, ror #20
    5164:	4c011001 	stcmi	0, cr1, [r1], {1}
    5168:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    516c:	06080048 	streq	r0, [r8], -r8, asr #32
    5170:	01000000 	mrseq	r0, (UNDEF: 0)
    5174:	00047a9c 	muleq	r4, ip, sl
    5178:	1ae11b00 	bne	ff84bd80 <SCS_BASE+0x1f83dd80>
    517c:	10010000 	andne	r0, r1, r0
    5180:	00030d01 	andeq	r0, r3, r1, lsl #26
    5184:	001f5400 	andseq	r5, pc, r0, lsl #8
    5188:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
    518c:	0100001a 	tsteq	r0, sl, lsl r0
    5190:	005e0121 	subseq	r0, lr, r1, lsr #2
    5194:	48fc0000 	ldmmi	ip!, {}^	; <UNPREDICTABLE>
    5198:	000c0800 	andeq	r0, ip, r0, lsl #16
    519c:	9c010000 	stcls	0, cr0, [r1], {-0}
    51a0:	000004c3 	andeq	r0, r0, r3, asr #9
    51a4:	001ae11b 	andseq	lr, sl, fp, lsl r1
    51a8:	01210100 			; <UNDEFINED> instruction: 0x01210100
    51ac:	0000030d 	andeq	r0, r0, sp, lsl #6
    51b0:	00001f75 	andeq	r1, r0, r5, ror pc
    51b4:	0000d61c 	andeq	sp, r0, ip, lsl r6
    51b8:	01210100 			; <UNDEFINED> instruction: 0x01210100
    51bc:	0000004c 	andeq	r0, r0, ip, asr #32
    51c0:	201d5101 	andscs	r5, sp, r1, lsl #2
    51c4:	01000017 	tsteq	r0, r7, lsl r0
    51c8:	005e0123 	subseq	r0, lr, r3, lsr #2
    51cc:	1f960000 	svcne	0x00960000
    51d0:	1a000000 	bne	51d8 <__Stack_Size+0x4dd8>
    51d4:	0000195a 	andeq	r1, r0, sl, asr r9
    51d8:	4c013b01 	stcmi	11, cr3, [r1], {1}
    51dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    51e0:	06080049 	streq	r0, [r8], -r9, asr #32
    51e4:	01000000 	mrseq	r0, (UNDEF: 0)
    51e8:	0004ee9c 	muleq	r4, ip, lr
    51ec:	1ae11b00 	bne	ff84bdf4 <SCS_BASE+0x1f83ddf4>
    51f0:	3b010000 	blcc	451f8 <__Stack_Size+0x44df8>
    51f4:	00030d01 	andeq	r0, r3, r1, lsl #26
    51f8:	001fc000 	andseq	ip, pc, r0
    51fc:	f71e0000 			; <UNDEFINED> instruction: 0xf71e0000
    5200:	01000003 	tsteq	r0, r3
    5204:	490e014d 	stmdbmi	lr, {r0, r2, r3, r6, r8}
    5208:	00040800 	andeq	r0, r4, r0, lsl #16
    520c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5210:	00000521 	andeq	r0, r0, r1, lsr #10
    5214:	001ae11c 	andseq	lr, sl, ip, lsl r1
    5218:	014d0100 	mrseq	r0, (UNDEF: 93)
    521c:	0000030d 	andeq	r0, r0, sp, lsl #6
    5220:	d61c5001 	ldrle	r5, [ip], -r1
    5224:	01000000 	mrseq	r0, (UNDEF: 0)
    5228:	004c014d 	subeq	r0, ip, sp, asr #2
    522c:	51010000 	mrspl	r0, (UNDEF: 1)
    5230:	08381e00 	ldmdaeq	r8!, {r9, sl, fp, ip}
    5234:	60010000 	andvs	r0, r1, r0
    5238:	00491201 	subeq	r1, r9, r1, lsl #4
    523c:	00000408 	andeq	r0, r0, r8, lsl #8
    5240:	549c0100 	ldrpl	r0, [ip], #256	; 0x100
    5244:	1c000005 	stcne	0, cr0, [r0], {5}
    5248:	00001ae1 	andeq	r1, r0, r1, ror #21
    524c:	0d016001 	stceq	0, cr6, [r1, #-4]
    5250:	01000003 	tsteq	r0, r3
    5254:	00d61c50 	sbcseq	r1, r6, r0, asr ip
    5258:	60010000 	andvs	r0, r1, r0
    525c:	00004c01 	andeq	r4, r0, r1, lsl #24
    5260:	00510100 	subseq	r0, r1, r0, lsl #2
    5264:	0019931e 	andseq	r9, r9, lr, lsl r3
    5268:	01760100 	cmneq	r6, r0, lsl #2
    526c:	08004916 	stmdaeq	r0, {r1, r2, r4, r8, fp, lr}
    5270:	0000000a 	andeq	r0, r0, sl
    5274:	05959c01 	ldreq	r9, [r5, #3073]	; 0xc01
    5278:	e11c0000 	tst	ip, r0
    527c:	0100001a 	tsteq	r0, sl, lsl r0
    5280:	030d0176 	movweq	r0, #53622	; 0xd176
    5284:	50010000 	andpl	r0, r1, r0
    5288:	0000d61c 	andeq	sp, r0, ip, lsl r6
    528c:	01760100 	cmneq	r6, r0, lsl #2
    5290:	0000004c 	andeq	r0, r0, ip, asr #32
    5294:	821c5101 	andshi	r5, ip, #1073741824	; 0x40000000
    5298:	01000019 	tsteq	r0, r9, lsl r0
    529c:	02210176 	eoreq	r0, r1, #-2147483619	; 0x8000001d
    52a0:	52010000 	andpl	r0, r1, #0
    52a4:	1aa11e00 	bne	fe84caac <SCS_BASE+0x1e83eaac>
    52a8:	90010000 	andls	r0, r1, r0
    52ac:	00492001 	subeq	r2, r9, r1
    52b0:	00000408 	andeq	r0, r0, r8, lsl #8
    52b4:	c89c0100 	ldmgt	ip, {r8}
    52b8:	1c000005 	stcne	0, cr0, [r0], {5}
    52bc:	00001ae1 	andeq	r1, r0, r1, ror #21
    52c0:	0d019001 	stceq	0, cr9, [r1, #-4]
    52c4:	01000003 	tsteq	r0, r3
    52c8:	1a2e1c50 	bne	b8c410 <__Stack_Size+0xb8c010>
    52cc:	90010000 	andls	r0, r1, r0
    52d0:	00004c01 	andeq	r4, r0, r1, lsl #24
    52d4:	00510100 	subseq	r0, r1, r0, lsl #2
    52d8:	001a831e 	andseq	r8, sl, lr, lsl r3
    52dc:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    52e0:	08004924 	stmdaeq	r0, {r2, r5, r8, fp, lr}
    52e4:	00000010 	andeq	r0, r0, r0, lsl r0
    52e8:	060b9c01 	streq	r9, [fp], -r1, lsl #24
    52ec:	e11c0000 	tst	ip, r0
    52f0:	0100001a 	tsteq	r0, sl, lsl r0
    52f4:	030d01a2 	movweq	r0, #53666	; 0xd1a2
    52f8:	50010000 	andpl	r0, r1, r0
    52fc:	0000d61c 	andeq	sp, r0, ip, lsl r6
    5300:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
    5304:	0000004c 	andeq	r0, r0, ip, asr #32
    5308:	741f5101 	ldrvc	r5, [pc], #-257	; 5310 <__Stack_Size+0x4f10>
    530c:	0100706d 	tsteq	r0, sp, rrx
    5310:	003a01a4 	eorseq	r0, sl, r4, lsr #3
    5314:	1fe10000 	svcne	0x00e10000
    5318:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    531c:	000019ef 	andeq	r1, r0, pc, ror #19
    5320:	3401c301 	strcc	ip, [r1], #-769	; 0x301
    5324:	1c080049 	stcne	0, cr0, [r8], {73}	; 0x49
    5328:	01000000 	mrseq	r0, (UNDEF: 0)
    532c:	0006529c 	muleq	r6, ip, r2
    5330:	19d31b00 	ldmibne	r3, {r8, r9, fp, ip}^
    5334:	c3010000 	movwgt	r0, #4096	; 0x1000
    5338:	00005e01 	andeq	r5, r0, r1, lsl #28
    533c:	00200200 	eoreq	r0, r0, r0, lsl #4
    5340:	1a421b00 	bne	108bf48 <__Stack_Size+0x108bb48>
    5344:	c3010000 	movwgt	r0, #4096	; 0x1000
    5348:	00005e01 	andeq	r5, r0, r1, lsl #28
    534c:	00202300 	eoreq	r2, r0, r0, lsl #6
    5350:	1a271d00 	bne	9cc758 <__Stack_Size+0x9cc358>
    5354:	c5010000 	strgt	r0, [r1, #-0]
    5358:	00003a01 	andeq	r3, r0, r1, lsl #20
    535c:	00204400 	eoreq	r4, r0, r0, lsl #8
    5360:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    5364:	01000019 	tsteq	r0, r9, lsl r0
    5368:	495001dc 	ldmdbmi	r0, {r2, r3, r4, r6, r7, r8}^
    536c:	000c0800 	andeq	r0, ip, r0, lsl #16
    5370:	9c010000 	stcls	0, cr0, [r1], {-0}
    5374:	00000677 	andeq	r0, r0, r7, ror r6
    5378:	0016911c 	andseq	r9, r6, ip, lsl r1
    537c:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    5380:	00000094 	muleq	r0, r4, r0
    5384:	1e005001 	cdpne	0, 0, cr5, cr0, cr1, {0}
    5388:	00000419 	andeq	r0, r0, r9, lsl r4
    538c:	5c020701 	stcpl	7, cr0, [r2], {1}
    5390:	54080049 	strpl	r0, [r8], #-73	; 0x49
    5394:	01000000 	mrseq	r0, (UNDEF: 0)
    5398:	0006ec9c 	muleq	r6, ip, ip
    539c:	1a061b00 	bne	18bfa4 <__Stack_Size+0x18bba4>
    53a0:	07010000 	streq	r0, [r1, -r0]
    53a4:	00003a02 	andeq	r3, r0, r2, lsl #20
    53a8:	00207c00 	eoreq	r7, r0, r0, lsl #24
    53ac:	16911c00 	ldrne	r1, [r1], r0, lsl #24
    53b0:	07010000 	streq	r0, [r1, -r0]
    53b4:	00009402 	andeq	r9, r0, r2, lsl #8
    53b8:	1f510100 	svcne	0x00510100
    53bc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    53c0:	3a020901 	bcc	877cc <__Stack_Size+0x873cc>
    53c4:	9d000000 	stcls	0, cr0, [r0, #-0]
    53c8:	1d000020 	stcne	0, cr0, [r0, #-128]	; 0xffffff80
    53cc:	00001aac 	andeq	r1, r0, ip, lsr #21
    53d0:	3a020901 	bcc	877dc <__Stack_Size+0x873dc>
    53d4:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    53d8:	1d000020 	stcne	0, cr0, [r0, #-128]	; 0xffffff80
    53dc:	00001a27 	andeq	r1, r0, r7, lsr #20
    53e0:	3a020901 	bcc	877ec <__Stack_Size+0x873ec>
    53e4:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    53e8:	1d000020 	stcne	0, cr0, [r0, #-128]	; 0xffffff80
    53ec:	00001a7b 	andeq	r1, r0, fp, ror sl
    53f0:	3a020901 	bcc	877fc <__Stack_Size+0x873fc>
    53f4:	16000000 	strne	r0, [r0], -r0
    53f8:	00000021 	andeq	r0, r0, r1, lsr #32
    53fc:	001ab11e 	andseq	fp, sl, lr, lsl r1
    5400:	02390100 	eorseq	r0, r9, #0, 2
    5404:	080049b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, lr}
    5408:	0000002a 	andeq	r0, r0, sl, lsr #32
    540c:	07339c01 	ldreq	r9, [r3, -r1, lsl #24]!
    5410:	d31b0000 	tstle	fp, #0
    5414:	01000019 	tsteq	r0, r9, lsl r0
    5418:	005e0239 	subseq	r0, lr, r9, lsr r2
    541c:	21510000 	cmpcs	r1, r0
    5420:	421b0000 	andsmi	r0, fp, #0
    5424:	0100001a 	tsteq	r0, sl, lsl r0
    5428:	005e0239 	subseq	r0, lr, r9, lsr r2
    542c:	21720000 	cmncs	r2, r0
    5430:	741f0000 	ldrvc	r0, [pc], #-0	; 5438 <__Stack_Size+0x5038>
    5434:	0100706d 	tsteq	r0, sp, rrx
    5438:	003a023b 	eorseq	r0, sl, fp, lsr r2
    543c:	21930000 	orrscs	r0, r3, r0
    5440:	20000000 	andcs	r0, r0, r0
    5444:	00001a51 	andeq	r1, r0, r1, asr sl
    5448:	21011405 	tstcs	r1, r5, lsl #8
    544c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5450:	00009421 	andeq	r9, r0, r1, lsr #8
    5454:	64000000 	strvs	r0, [r0], #-0
    5458:	04000009 	streq	r0, [r0], #-9
    545c:	000c8700 	andeq	r8, ip, r0, lsl #14
    5460:	62010400 	andvs	r0, r1, #0, 8
    5464:	01000008 	tsteq	r0, r8
    5468:	00001c23 	andeq	r1, r0, r3, lsr #24
    546c:	000000fa 	strdeq	r0, [r0], -sl
    5470:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    5474:	00000314 	andeq	r0, r0, r4, lsl r3
    5478:	00000b6c 	andeq	r0, r0, ip, ror #22
    547c:	e2050402 	and	r0, r5, #33554432	; 0x2000000
    5480:	02000009 	andeq	r0, r0, #9
    5484:	09a60502 	stmibeq	r6!, {r1, r8, sl}
    5488:	01020000 	mrseq	r0, (UNDEF: 2)
    548c:	000b7706 	andeq	r7, fp, r6, lsl #14
    5490:	33750300 	cmncc	r5, #0, 6
    5494:	27020032 	smladxcs	r2, r2, r0, r0
    5498:	00000045 	andeq	r0, r0, r5, asr #32
    549c:	19070402 	stmdbne	r7, {r1, sl}
    54a0:	0300000b 	movweq	r0, #11
    54a4:	00363175 	eorseq	r3, r6, r5, ror r1
    54a8:	00572802 	subseq	r2, r7, r2, lsl #16
    54ac:	02020000 	andeq	r0, r2, #0
    54b0:	000d3907 	andeq	r3, sp, r7, lsl #18
    54b4:	38750300 	ldmdacc	r5!, {r8, r9}^
    54b8:	68290200 	stmdavs	r9!, {r9}
    54bc:	02000000 	andeq	r0, r0, #0
    54c0:	0b750801 	bleq	1d474cc <__Stack_Size+0x1d470cc>
    54c4:	ec040000 	stc	0, cr0, [r4], {-0}
    54c8:	02000004 	andeq	r0, r0, #4
    54cc:	00007a2f 	andeq	r7, r0, pc, lsr #20
    54d0:	00450500 	subeq	r0, r5, r0, lsl #10
    54d4:	bb040000 	bllt	1054dc <__Stack_Size+0x1050dc>
    54d8:	0200001e 	andeq	r0, r0, #30
    54dc:	00008a33 	andeq	r8, r0, r3, lsr sl
    54e0:	007a0600 	rsbseq	r0, sl, r0, lsl #12
    54e4:	01070000 	mrseq	r0, (UNDEF: 7)
    54e8:	00a43902 	adceq	r3, r4, r2, lsl #18
    54ec:	8d080000 	stchi	0, cr0, [r8, #-0]
    54f0:	00000019 	andeq	r0, r0, r9, lsl r0
    54f4:	54455309 	strbpl	r5, [r5], #-777	; 0x309
    54f8:	04000100 	streq	r0, [r0], #-256	; 0x100
    54fc:	00002115 	andeq	r2, r0, r5, lsl r1
    5500:	008f3902 	addeq	r3, pc, r2, lsl #18
    5504:	01070000 	mrseq	r0, (UNDEF: 7)
    5508:	00c43b02 	sbceq	r3, r4, r2, lsl #22
    550c:	f1080000 	cpsie	
    5510:	00000005 	andeq	r0, r0, r5
    5514:	000af208 	andeq	pc, sl, r8, lsl #4
    5518:	04000100 	streq	r0, [r0], #-256	; 0x100
    551c:	00000114 	andeq	r0, r0, r4, lsl r1
    5520:	00af3b02 	adceq	r3, pc, r2, lsl #22
    5524:	04020000 	streq	r0, [r2], #-0
    5528:	000b1007 	andeq	r1, fp, r7
    552c:	033c0a00 	teqeq	ip, #0, 20
    5530:	77018103 	strvc	r8, [r1, -r3, lsl #2]
    5534:	0b000001 	bleq	5540 <__Stack_Size+0x5140>
    5538:	00001e41 	andeq	r1, r0, r1, asr #28
    553c:	87018303 	strhi	r8, [r1, -r3, lsl #6]
    5540:	00000001 	andeq	r0, r0, r1
    5544:	0009600b 	andeq	r6, r9, fp
    5548:	01840300 	orreq	r0, r4, r0, lsl #6
    554c:	0000018c 	andeq	r0, r0, ip, lsl #3
    5550:	1e050b08 	vmlane.f64	d0, d5, d8
    5554:	85030000 	strhi	r0, [r3, #-0]
    5558:	00019c01 	andeq	r9, r1, r1, lsl #24
    555c:	9a0b8000 	bls	2e5564 <__Stack_Size+0x2e5164>
    5560:	0300001d 	movweq	r0, #29
    5564:	018c0186 	orreq	r0, ip, r6, lsl #3
    5568:	0c880000 	stceq	0, cr0, [r8], {0}
    556c:	00001e1b 	andeq	r1, r0, fp, lsl lr
    5570:	a1018703 	tstge	r1, r3, lsl #14
    5574:	00000001 	andeq	r0, r0, r1
    5578:	09740c01 	ldmdbeq	r4!, {r0, sl, fp}^
    557c:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    5580:	00018c01 	andeq	r8, r1, r1, lsl #24
    5584:	0c010800 	stceq	8, cr0, [r1], {-0}
    5588:	00001d5d 	andeq	r1, r0, sp, asr sp
    558c:	a6018903 	strge	r8, [r1], -r3, lsl #18
    5590:	80000001 	andhi	r0, r0, r1
    5594:	097e0c01 	ldmdbeq	lr!, {r0, sl, fp}^
    5598:	8a030000 	bhi	c55a0 <__Stack_Size+0xc51a0>
    559c:	00018c01 	andeq	r8, r1, r1, lsl #24
    55a0:	0c018800 	stceq	8, cr8, [r1], {-0}
    55a4:	00001b23 	andeq	r1, r0, r3, lsr #22
    55a8:	ab018b03 	blge	681bc <__Stack_Size+0x67dbc>
    55ac:	00000001 	andeq	r0, r0, r1
    55b0:	09880c02 	stmibeq	r8, {r1, sl, fp}
    55b4:	8c030000 	stchi	0, cr0, [r3], {-0}
    55b8:	0001b001 	andeq	fp, r1, r1
    55bc:	0d020800 	stceq	8, cr0, [r2, #-0]
    55c0:	00525049 	subseq	r5, r2, r9, asr #32
    55c4:	d0018d03 	andle	r8, r1, r3, lsl #26
    55c8:	00000001 	andeq	r0, r0, r1
    55cc:	6f0e0003 	svcvs	0x000e0003
    55d0:	87000000 	strhi	r0, [r0, -r0]
    55d4:	0f000001 	svceq	0x00000001
    55d8:	000000cf 	andeq	r0, r0, pc, asr #1
    55dc:	77050001 	strvc	r0, [r5, -r1]
    55e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    55e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    55e8:	0000019c 	muleq	r0, ip, r1
    55ec:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    55f0:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    55f4:	00000177 	andeq	r0, r0, r7, ror r1
    55f8:	00017705 	andeq	r7, r1, r5, lsl #14
    55fc:	01770500 	cmneq	r7, r0, lsl #10
    5600:	77050000 	strvc	r0, [r5, -r0]
    5604:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    5608:	0000003a 	andeq	r0, r0, sl, lsr r0
    560c:	000001c0 	andeq	r0, r0, r0, asr #3
    5610:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    5614:	0e003d00 	cdpeq	13, 0, cr3, cr0, cr0, {0}
    5618:	0000006f 	andeq	r0, r0, pc, rrx
    561c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5620:	0000cf0f 	andeq	ip, r0, pc, lsl #30
    5624:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    5628:	000001c0 	andeq	r0, r0, r0, asr #3
    562c:	001d7d10 	andseq	r7, sp, r0, lsl sp
    5630:	018e0300 	orreq	r0, lr, r0, lsl #6
    5634:	000000d6 	ldrdeq	r0, [r0], -r6
    5638:	90034011 	andls	r4, r3, r1, lsl r0
    563c:	0002a101 	andeq	sl, r2, r1, lsl #2
    5640:	1c4e0b00 	mcrrne	11, 0, r0, lr, cr0
    5644:	92030000 	andls	r0, r3, #0
    5648:	00007f01 	andeq	r7, r0, r1, lsl #30
    564c:	a60b0000 	strge	r0, [fp], -r0
    5650:	0300001c 	movweq	r0, #28
    5654:	006f0193 	mlseq	pc, r3, r1, r0	; <UNPREDICTABLE>
    5658:	0b040000 	bleq	105660 <__Stack_Size+0x105260>
    565c:	00001e16 	andeq	r1, r0, r6, lsl lr
    5660:	6f019403 	svcvs	0x00019403
    5664:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5668:	001d570b 	andseq	r5, sp, fp, lsl #14
    566c:	01950300 	orrseq	r0, r5, r0, lsl #6
    5670:	0000006f 	andeq	r0, r0, pc, rrx
    5674:	4353120c 	cmpmi	r3, #12, 4	; 0xc0000000
    5678:	96030052 			; <UNDEFINED> instruction: 0x96030052
    567c:	00006f01 	andeq	r6, r0, r1, lsl #30
    5680:	43121000 	tstmi	r2, #0
    5684:	03005243 	movweq	r5, #579	; 0x243
    5688:	006f0197 	mlseq	pc, r7, r1, r0	; <UNPREDICTABLE>
    568c:	0b140000 	bleq	505694 <__Stack_Size+0x505294>
    5690:	00001d72 	andeq	r1, r0, r2, ror sp
    5694:	b1019803 	tstlt	r1, r3, lsl #16
    5698:	18000002 	stmdane	r0, {r1}
    569c:	001d770b 	andseq	r7, sp, fp, lsl #14
    56a0:	01990300 	orrseq	r0, r9, r0, lsl #6
    56a4:	0000006f 	andeq	r0, r0, pc, rrx
    56a8:	1d320b24 	vldmdbne	r2!, {d0-d17}
    56ac:	9a030000 	bls	c56b4 <__Stack_Size+0xc52b4>
    56b0:	00006f01 	andeq	r6, r0, r1, lsl #30
    56b4:	250b2800 	strcs	r2, [fp, #-2048]	; 0x800
    56b8:	0300001e 	movweq	r0, #30
    56bc:	006f019b 	mlseq	pc, fp, r1, r0	; <UNPREDICTABLE>
    56c0:	0b2c0000 	bleq	b056c8 <__Stack_Size+0xb052c8>
    56c4:	00001e20 	andeq	r1, r0, r0, lsr #28
    56c8:	6f019c03 	svcvs	0x00019c03
    56cc:	30000000 	andcc	r0, r0, r0
    56d0:	001db40b 	andseq	fp, sp, fp, lsl #8
    56d4:	019d0300 	orrseq	r0, sp, r0, lsl #6
    56d8:	0000006f 	andeq	r0, r0, pc, rrx
    56dc:	1d090b34 	vstrne	d0, [r9, #-208]	; 0xffffff30
    56e0:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    56e4:	00006f01 	andeq	r6, r0, r1, lsl #30
    56e8:	3c0b3800 	stccc	8, cr3, [fp], {-0}
    56ec:	0300001e 	movweq	r0, #30
    56f0:	006f019f 	mlseq	pc, pc, r1, r0	; <UNPREDICTABLE>
    56f4:	003c0000 	eorseq	r0, ip, r0
    56f8:	00006f0e 	andeq	r6, r0, lr, lsl #30
    56fc:	0002b100 	andeq	fp, r2, r0, lsl #2
    5700:	00cf0f00 	sbceq	r0, pc, r0, lsl #30
    5704:	00020000 	andeq	r0, r2, r0
    5708:	0002a105 	andeq	sl, r2, r5, lsl #2
    570c:	1e621000 	cdpne	0, 6, cr1, cr2, cr0, {0}
    5710:	a0030000 	andge	r0, r3, r0
    5714:	0001e101 	andeq	lr, r1, r1, lsl #2
    5718:	04041300 	streq	r1, [r4], #-768	; 0x300
    571c:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    5720:	07c21400 	strbeq	r1, [r2, r0, lsl #8]
    5724:	1c040000 	stcne	0, cr0, [r4], {-0}
    5728:	0000005e 	andeq	r0, r0, lr, asr r0
    572c:	0da41400 	cfstrseq	mvf1, [r4]
    5730:	1d040000 	stcne	0, cr0, [r4, #-0]
    5734:	0000005e 	andeq	r0, r0, lr, asr r0
    5738:	0c921401 	cfldrseq	mvf1, [r2], {1}
    573c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    5740:	0000005e 	andeq	r0, r0, lr, asr r0
    5744:	05081402 	streq	r1, [r8, #-1026]	; 0x402
    5748:	1f040000 	svcne	0x00040000
    574c:	000000c4 	andeq	r0, r0, r4, asr #1
    5750:	5a040003 	bpl	105764 <__Stack_Size+0x105364>
    5754:	04000003 	streq	r0, [r0], #-3
    5758:	0002c220 	andeq	ip, r2, r0, lsr #4
    575c:	1fa01500 	svcne	0x00a01500
    5760:	24010000 	strcs	r0, [r1], #-0
    5764:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    5768:	00000034 	andeq	r0, r0, r4, lsr r0
    576c:	032b9c01 			; <UNDEFINED> instruction: 0x032b9c01
    5770:	96160000 	ldrls	r0, [r6], -r0
    5774:	01000015 	tsteq	r0, r5, lsl r0
    5778:	00003a26 	andeq	r3, r0, r6, lsr #20
    577c:	0021d000 	eoreq	sp, r1, r0
    5780:	11150000 	tstne	r5, r0
    5784:	0100001f 	tsteq	r0, pc, lsl r0
    5788:	004a103b 	subeq	r1, sl, fp, lsr r0
    578c:	00003008 	andeq	r3, r0, r8
    5790:	509c0100 	addspl	r0, ip, r0, lsl #2
    5794:	16000003 	strne	r0, [r0], -r3
    5798:	00001596 	muleq	r0, r6, r5
    579c:	003a3d01 	eorseq	r3, sl, r1, lsl #26
    57a0:	21ef0000 	mvncs	r0, r0
    57a4:	15000000 	strne	r0, [r0, #-0]
    57a8:	00000cfa 	strdeq	r0, [r0], -sl
    57ac:	4a406101 	bmi	101dbb8 <__Stack_Size+0x101d7b8>
    57b0:	00140800 	andseq	r0, r4, r0, lsl #16
    57b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    57b8:	00000375 	andeq	r0, r0, r5, ror r3
    57bc:	001c5417 	andseq	r5, ip, r7, lsl r4
    57c0:	3a610100 	bcc	1845bc8 <__Stack_Size+0x18457c8>
    57c4:	27000000 	strcs	r0, [r0, -r0]
    57c8:	00000022 	andeq	r0, r0, r2, lsr #32
    57cc:	00080a15 	andeq	r0, r8, r5, lsl sl
    57d0:	54740100 	ldrbtpl	r0, [r4], #-256	; 0x100
    57d4:	8408004a 	strhi	r0, [r8], #-74	; 0x4a
    57d8:	01000000 	mrseq	r0, (UNDEF: 0)
    57dc:	0003e39c 	muleq	r3, ip, r3
    57e0:	1b471800 	blne	11cb7e8 <__Stack_Size+0x11cb3e8>
    57e4:	74010000 	strvc	r0, [r1], #-0
    57e8:	000003e3 	andeq	r0, r0, r3, ror #7
    57ec:	0a165001 	beq	5997f8 <__Stack_Size+0x5993f8>
    57f0:	0100001e 	tsteq	r0, lr, lsl r0
    57f4:	00003a76 	andeq	r3, r0, r6, ror sl
    57f8:	00224800 	eoreq	r4, r2, r0, lsl #16
    57fc:	1a271600 	bne	9cb004 <__Stack_Size+0x9cac04>
    5800:	76010000 	strvc	r0, [r1], -r0
    5804:	0000003a 	andeq	r0, r0, sl, lsr r0
    5808:	000022a4 	andeq	r2, r0, r4, lsr #5
    580c:	001a7b16 	andseq	r7, sl, r6, lsl fp
    5810:	3a760100 	bcc	1d85c18 <__Stack_Size+0x1d85818>
    5814:	da000000 	ble	581c <__Stack_Size+0x541c>
    5818:	16000022 	strne	r0, [r0], -r2, lsr #32
    581c:	00001bcf 	andeq	r1, r0, pc, asr #23
    5820:	003a7701 	eorseq	r7, sl, r1, lsl #14
    5824:	23150000 	tstcs	r5, #0
    5828:	ba160000 	blt	585830 <__Stack_Size+0x585430>
    582c:	0100001d 	tsteq	r0, sp, lsl r0
    5830:	00003a77 	andeq	r3, r0, r7, ror sl
    5834:	00235e00 	eoreq	r5, r3, r0, lsl #28
    5838:	04190000 	ldreq	r0, [r9], #-0
    583c:	000002fb 	strdeq	r0, [r0], -fp
    5840:	001df515 	andseq	pc, sp, r5, lsl r5	; <UNPREDICTABLE>
    5844:	d8a80100 	stmiale	r8!, {r8}
    5848:	0c08004a 	stceq	0, cr0, [r8], {74}	; 0x4a
    584c:	01000000 	mrseq	r0, (UNDEF: 0)
    5850:	00040c9c 	muleq	r4, ip, ip
    5854:	1b471800 	blne	11cb85c <__Stack_Size+0x11cb45c>
    5858:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    585c:	000003e3 	andeq	r0, r0, r3, ror #7
    5860:	15005001 	strne	r5, [r0, #-1]
    5864:	00001ba6 	andeq	r1, r0, r6, lsr #23
    5868:	4ae4b801 	bmi	ff933874 <SCS_BASE+0x1f925874>
    586c:	00040800 	andeq	r0, r4, r0, lsl #16
    5870:	9c010000 	stcls	0, cr0, [r1], {-0}
    5874:	0000042b 	andeq	r0, r0, fp, lsr #8
    5878:	004ae81a 	subeq	lr, sl, sl, lsl r8
    587c:	00092f08 	andeq	r2, r9, r8, lsl #30
    5880:	d6150000 	ldrle	r0, [r5], -r0
    5884:	0100001b 	tsteq	r0, fp, lsl r0
    5888:	004ae8c4 	subeq	lr, sl, r4, asr #17
    588c:	00000408 	andeq	r0, r0, r8, lsl #8
    5890:	4a9c0100 	bmi	fe705c98 <SCS_BASE+0x1e6f7c98>
    5894:	1a000004 	bne	58ac <__Stack_Size+0x54ac>
    5898:	08004aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, lr}
    589c:	00000936 	andeq	r0, r0, r6, lsr r9
    58a0:	1e2a1500 	cfsh64ne	mvdx1, mvdx10, #0
    58a4:	d0010000 	andle	r0, r1, r0
    58a8:	08004aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, lr}
    58ac:	00000004 	andeq	r0, r0, r4
    58b0:	04699c01 	strbteq	r9, [r9], #-3073	; 0xc01
    58b4:	f01a0000 			; <UNDEFINED> instruction: 0xf01a0000
    58b8:	3d08004a 	stccc	0, cr0, [r8, #-296]	; 0xfffffed8
    58bc:	00000009 	andeq	r0, r0, r9
    58c0:	001c6715 	andseq	r6, ip, r5, lsl r7
    58c4:	f0dc0100 			; <UNDEFINED> instruction: 0xf0dc0100
    58c8:	0408004a 	streq	r0, [r8], #-74	; 0x4a
    58cc:	01000000 	mrseq	r0, (UNDEF: 0)
    58d0:	0004889c 	muleq	r4, ip, r8
    58d4:	4af41a00 	bmi	ffd0c0dc <SCS_BASE+0x1fcfe0dc>
    58d8:	09440800 	stmdbeq	r4, {fp}^
    58dc:	15000000 	strne	r0, [r0, #-0]
    58e0:	00001cf6 	strdeq	r1, [r0], -r6
    58e4:	4af4ea01 	bmi	ffd400f0 <SCS_BASE+0x1fd320f0>
    58e8:	00060800 	andeq	r0, r6, r0, lsl #16
    58ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    58f0:	000004c0 	andeq	r0, r0, r0, asr #9
    58f4:	001f2017 	andseq	r2, pc, r7, lsl r0	; <UNPREDICTABLE>
    58f8:	3aea0100 	bcc	ffa85d00 <SCS_BASE+0x1fa77d00>
    58fc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    5900:	1b000023 	blne	5994 <__Stack_Size+0x5594>
    5904:	08004afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, lr}
    5908:	0000094b 	andeq	r0, r0, fp, asr #18
    590c:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    5910:	345001f3 	ldrbcc	r0, [r0], #-499	; 0x1f3
    5914:	1d000024 	stcne	0, cr0, [r0, #-144]	; 0xffffff70
    5918:	00001d8a 	andeq	r1, r0, sl, lsl #27
    591c:	003af901 	eorseq	pc, sl, r1, lsl #18
    5920:	4afa0000 	bmi	ffe85928 <SCS_BASE+0x1fe77928>
    5924:	00040800 	andeq	r0, r4, r0, lsl #16
    5928:	9c010000 	stcls	0, cr0, [r1], {-0}
    592c:	000004e3 	andeq	r0, r0, r3, ror #9
    5930:	004afe1a 	subeq	pc, sl, sl, lsl lr	; <UNPREDICTABLE>
    5934:	00095c08 	andeq	r5, r9, r8, lsl #24
    5938:	571e0000 	ldrpl	r0, [lr, -r0]
    593c:	0100001b 	tsteq	r0, fp, lsl r0
    5940:	004c0105 	subeq	r0, ip, r5, lsl #2
    5944:	4afe0000 	bmi	fff8594c <SCS_BASE+0x1ff7794c>
    5948:	000e0800 	andeq	r0, lr, r0, lsl #16
    594c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5950:	001eee1f 	andseq	lr, lr, pc, lsl lr
    5954:	01120100 	tsteq	r2, r0, lsl #2
    5958:	000000a4 	andeq	r0, r0, r4, lsr #1
    595c:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
    5960:	00000020 	andeq	r0, r0, r0, lsr #32
    5964:	05449c01 	strbeq	r9, [r4, #-3073]	; 0xc01
    5968:	c2200000 	eorgt	r0, r0, #0
    596c:	01000007 	tsteq	r0, r7
    5970:	005e0112 	subseq	r0, lr, r2, lsl r1
    5974:	23b90000 			; <UNDEFINED> instruction: 0x23b90000
    5978:	ac210000 	stcge	0, cr0, [r1], #-0
    597c:	0100001f 	tsteq	r0, pc, lsl r0
    5980:	00a40114 	adceq	r0, r4, r4, lsl r1
    5984:	23da0000 	bicscs	r0, sl, #0
    5988:	74220000 	strtvc	r0, [r2], #-0
    598c:	0100706d 	tsteq	r0, sp, rrx
    5990:	003a0115 	eorseq	r0, sl, r5, lsl r1
    5994:	24010000 	strcs	r0, [r1], #-0
    5998:	23000000 	movwcs	r0, #0
    599c:	00001d0e 	andeq	r1, r0, lr, lsl #26
    59a0:	2c012e01 	stccs	14, cr2, [r1], {1}
    59a4:	0c08004b 	stceq	0, cr0, [r8], {75}	; 0x4b
    59a8:	01000000 	mrseq	r0, (UNDEF: 0)
    59ac:	0005699c 	muleq	r5, ip, r9
    59b0:	07c22400 	strbeq	r2, [r2, r0, lsl #8]
    59b4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    59b8:	00005e01 	andeq	r5, r0, r1, lsl #28
    59bc:	00500100 	subseq	r0, r0, r0, lsl #2
    59c0:	001b2823 	andseq	r2, fp, r3, lsr #16
    59c4:	013d0100 	teqeq	sp, r0, lsl #2
    59c8:	08004b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, lr}
    59cc:	00000018 	andeq	r0, r0, r8, lsl r0
    59d0:	05909c01 	ldreq	r9, [r0, #3073]	; 0xc01
    59d4:	c2200000 	eorgt	r0, r0, #0
    59d8:	01000007 	tsteq	r0, r7
    59dc:	005e013d 	subseq	r0, lr, sp, lsr r1
    59e0:	24200000 	strtcs	r0, [r0], #-0
    59e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    59e8:	00001c7b 	andeq	r1, r0, fp, ror ip
    59ec:	4c014d01 	stcmi	13, cr4, [r1], {1}
    59f0:	50000000 	andpl	r0, r0, r0
    59f4:	1008004b 	andne	r0, r8, fp, asr #32
    59f8:	01000000 	mrseq	r0, (UNDEF: 0)
    59fc:	1f7e1f9c 	svcne	0x007e1f9c
    5a00:	5a010000 	bpl	45a08 <__Stack_Size+0x45608>
    5a04:	0000a401 	andeq	sl, r0, r1, lsl #8
    5a08:	004b6000 	subeq	r6, fp, r0
    5a0c:	00002008 	andeq	r2, r0, r8
    5a10:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    5a14:	20000005 	andcs	r0, r0, r5
    5a18:	000007c2 	andeq	r0, r0, r2, asr #15
    5a1c:	5e015a01 	vmlapl.f32	s10, s2, s2
    5a20:	41000000 	mrsmi	r0, (UNDEF: 0)
    5a24:	21000024 	tstcs	r0, r4, lsr #32
    5a28:	00001f39 	andeq	r1, r0, r9, lsr pc
    5a2c:	a4015c01 	strge	r5, [r1], #-3073	; 0xc01
    5a30:	62000000 	andvs	r0, r0, #0
    5a34:	22000024 	andcs	r0, r0, #36	; 0x24
    5a38:	00706d74 	rsbseq	r6, r0, r4, ror sp
    5a3c:	3a015d01 	bcc	5ce48 <__Stack_Size+0x5ca48>
    5a40:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    5a44:	00000024 	andeq	r0, r0, r4, lsr #32
    5a48:	001c461e 	andseq	r4, ip, lr, lsl r6
    5a4c:	01770100 	cmneq	r7, r0, lsl #2
    5a50:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a54:	08004b80 	stmdaeq	r0, {r7, r8, r9, fp, lr}
    5a58:	0000000c 	andeq	r0, r0, ip
    5a5c:	50239c01 	eorpl	r9, r3, r1, lsl #24
    5a60:	0100000b 	tsteq	r0, fp
    5a64:	4b8c0189 	blmi	fe306090 <SCS_BASE+0x1e2f8090>
    5a68:	00140800 	andseq	r0, r4, r0, lsl #16
    5a6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a70:	0000063e 	andeq	r0, r0, lr, lsr r6
    5a74:	001f2c20 	andseq	r2, pc, r0, lsr #24
    5a78:	01890100 	orreq	r0, r9, r0, lsl #2
    5a7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a80:	000024a8 	andeq	r2, r0, r8, lsr #9
    5a84:	001dee20 	andseq	lr, sp, r0, lsr #28
    5a88:	01890100 	orreq	r0, r9, r0, lsl #2
    5a8c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a90:	000024c9 	andeq	r2, r0, r9, asr #9
    5a94:	1bb62500 	blne	fed8ee9c <SCS_BASE+0x1ed80e9c>
    5a98:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    5a9c:	004ba001 	subeq	sl, fp, r1
    5aa0:	00001008 	andeq	r1, r0, r8
    5aa4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    5aa8:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
    5aac:	b001a501 	andlt	sl, r1, r1, lsl #10
    5ab0:	1008004b 	andne	r0, r8, fp, asr #32
    5ab4:	01000000 	mrseq	r0, (UNDEF: 0)
    5ab8:	1dda239c 	ldclne	3, cr2, [sl, #624]	; 0x270
    5abc:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    5ac0:	004bc001 	subeq	ip, fp, r1
    5ac4:	00001808 	andeq	r1, r0, r8, lsl #16
    5ac8:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    5acc:	20000006 	andcs	r0, r0, r6
    5ad0:	00001f71 	andeq	r1, r0, r1, ror pc
    5ad4:	5e01b801 	cdppl	8, 0, cr11, cr1, cr1, {0}
    5ad8:	ea000000 	b	5ae0 <__Stack_Size+0x56e0>
    5adc:	24000024 	strcs	r0, [r0], #-36	; 0x24
    5ae0:	00001691 	muleq	r0, r1, r6
    5ae4:	c401b801 	strgt	fp, [r1], #-2049	; 0x801
    5ae8:	01000000 	mrseq	r0, (UNDEF: 0)
    5aec:	c1230051 	qsubgt	r0, r1, r3
    5af0:	0100001d 	tsteq	r0, sp, lsl r0
    5af4:	4bd801d6 	blmi	ff606254 <SCS_BASE+0x1f5f8254>
    5af8:	00200800 	eoreq	r0, r0, r0, lsl #16
    5afc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b00:	000006de 	ldrdeq	r0, [r0], -lr
    5b04:	001c9820 	andseq	r9, ip, r0, lsr #16
    5b08:	01d60100 	bicseq	r0, r6, r0, lsl #2
    5b0c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5b10:	00002524 	andeq	r2, r0, r4, lsr #10
    5b14:	00169120 	andseq	r9, r6, r0, lsr #2
    5b18:	01d60100 	bicseq	r0, r6, r0, lsl #2
    5b1c:	000000c4 	andeq	r0, r0, r4, asr #1
    5b20:	00002545 	andeq	r2, r0, r5, asr #10
    5b24:	001a2721 	andseq	r2, sl, r1, lsr #14
    5b28:	01d80100 	bicseq	r0, r8, r0, lsl #2
    5b2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5b30:	0000257f 	andeq	r2, r0, pc, ror r5
    5b34:	1bf52300 	blne	ffd4e73c <SCS_BASE+0x1fd4073c>
    5b38:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    5b3c:	004bf801 	subeq	pc, fp, r1, lsl #16
    5b40:	00004c08 	andeq	r4, r0, r8, lsl #24
    5b44:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    5b48:	20000007 	andcs	r0, r0, r7
    5b4c:	00001c98 	muleq	r0, r8, ip
    5b50:	3a01fe01 	bcc	8535c <__Stack_Size+0x84f5c>
    5b54:	c7000000 	strgt	r0, [r0, -r0]
    5b58:	20000025 	andcs	r0, r0, r5, lsr #32
    5b5c:	00001ece 	andeq	r1, r0, lr, asr #29
    5b60:	5e01fe01 	cdppl	14, 0, cr15, cr1, cr1, {0}
    5b64:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    5b68:	20000025 	andcs	r0, r0, r5, lsr #32
    5b6c:	00001b8d 	andeq	r1, r0, sp, lsl #23
    5b70:	5e01ff01 	cdppl	15, 0, cr15, cr1, cr1, {0}
    5b74:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5b78:	21000026 	tstcs	r0, r6, lsr #32
    5b7c:	00001aac 	andeq	r1, r0, ip, lsr #21
    5b80:	3a020101 	bcc	85f8c <__Stack_Size+0x85b8c>
    5b84:	2a000000 	bcs	5b8c <__Stack_Size+0x578c>
    5b88:	21000026 	tstcs	r0, r6, lsr #32
    5b8c:	00001e6e 	andeq	r1, r0, lr, ror #28
    5b90:	3a020101 	bcc	85f9c <__Stack_Size+0x85b9c>
    5b94:	67000000 	strvs	r0, [r0, -r0]
    5b98:	21000026 	tstcs	r0, r6, lsr #32
    5b9c:	00001f56 	andeq	r1, r0, r6, asr pc
    5ba0:	3a020101 	bcc	85fac <__Stack_Size+0x85bac>
    5ba4:	97000000 	strls	r0, [r0, -r0]
    5ba8:	21000026 	tstcs	r0, r6, lsr #32
    5bac:	00001e0a 	andeq	r1, r0, sl, lsl #28
    5bb0:	3a020201 	bcc	863bc <__Stack_Size+0x85fbc>
    5bb4:	bb000000 	bllt	5bbc <__Stack_Size+0x57bc>
    5bb8:	00000026 	andeq	r0, r0, r6, lsr #32
    5bbc:	001e731f 	andseq	r7, lr, pc, lsl r3
    5bc0:	02280100 	eoreq	r0, r8, #0, 2
    5bc4:	000000a4 	andeq	r0, r0, r4, lsr #1
    5bc8:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
    5bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
    5bd0:	07c09c01 	strbeq	r9, [r0, r1, lsl #24]
    5bd4:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
    5bd8:	0100001c 	tsteq	r0, ip, lsl r0
    5bdc:	003a0228 	eorseq	r0, sl, r8, lsr #4
    5be0:	27000000 	strcs	r0, [r0, -r0]
    5be4:	20210000 	eorcs	r0, r1, r0
    5be8:	01000017 	tsteq	r0, r7, lsl r0
    5bec:	00a4022a 	adceq	r0, r4, sl, lsr #4
    5bf0:	27210000 	strcs	r0, [r1, -r0]!
    5bf4:	74220000 	strtvc	r0, [r2], #-0
    5bf8:	0100706d 	tsteq	r0, sp, rrx
    5bfc:	003a022b 	eorseq	r0, sl, fp, lsr #4
    5c00:	27480000 	strbcs	r0, [r8, -r0]
    5c04:	2b210000 	blcs	845c0c <__Stack_Size+0x84580c>
    5c08:	0100001d 	tsteq	r0, sp, lsl r0
    5c0c:	003a022b 	eorseq	r0, sl, fp, lsr #4
    5c10:	27770000 	ldrbcs	r0, [r7, -r0]!
    5c14:	23000000 	movwcs	r0, #0
    5c18:	00001d37 	andeq	r1, r0, r7, lsr sp
    5c1c:	60024e01 	andvs	r4, r2, r1, lsl #28
    5c20:	1808004c 	stmdane	r8, {r2, r3, r6}
    5c24:	01000000 	mrseq	r0, (UNDEF: 0)
    5c28:	0007f79c 	muleq	r7, ip, r7
    5c2c:	1c982000 	ldcne	0, cr2, [r8], {0}
    5c30:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    5c34:	00003a02 	andeq	r3, r0, r2, lsl #20
    5c38:	0027c000 	eoreq	ip, r7, r0
    5c3c:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    5c40:	50010070 	andpl	r0, r1, r0, ror r0
    5c44:	00003a02 	andeq	r3, r0, r2, lsl #20
    5c48:	0027e100 	eoreq	lr, r7, r0, lsl #2
    5c4c:	99230000 	stmdbls	r3!, {}	; <UNPREDICTABLE>
    5c50:	0100001e 	tsteq	r0, lr, lsl r0
    5c54:	4c780266 	lfmmi	f0, 2, [r8], #-408	; 0xfffffe68
    5c58:	00180800 	andseq	r0, r8, r0, lsl #16
    5c5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c60:	0000082e 	andeq	r0, r0, lr, lsr #16
    5c64:	001c9820 	andseq	r9, ip, r0, lsr #16
    5c68:	02660100 	rsbeq	r0, r6, #0, 2
    5c6c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5c70:	00002803 	andeq	r2, r0, r3, lsl #16
    5c74:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    5c78:	02680100 	rsbeq	r0, r8, #0, 2
    5c7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    5c80:	00002824 	andeq	r2, r0, r4, lsr #16
    5c84:	1cd11f00 	ldclne	15, cr1, [r1], {0}
    5c88:	84010000 	strhi	r0, [r1], #-0
    5c8c:	0000a402 	andeq	sl, r0, r2, lsl #8
    5c90:	004c9000 	subeq	r9, ip, r0
    5c94:	00001c08 	andeq	r1, r0, r8, lsl #24
    5c98:	899c0100 	ldmibhi	ip, {r8}
    5c9c:	20000008 	andcs	r0, r0, r8
    5ca0:	00001c98 	muleq	r0, r8, ip
    5ca4:	3a028401 	bcc	a6cb0 <__Stack_Size+0xa68b0>
    5ca8:	53000000 	movwpl	r0, #0
    5cac:	21000028 	tstcs	r0, r8, lsr #32
    5cb0:	00001720 	andeq	r1, r0, r0, lsr #14
    5cb4:	a4028601 	strge	r8, [r2], #-1537	; 0x601
    5cb8:	74000000 	strvc	r0, [r0], #-0
    5cbc:	22000028 	andcs	r0, r0, #40	; 0x28
    5cc0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    5cc4:	3a028801 	bcc	a7cd0 <__Stack_Size+0xa78d0>
    5cc8:	9b000000 	blls	5cd0 <__Stack_Size+0x58d0>
    5ccc:	21000028 	tstcs	r0, r8, lsr #32
    5cd0:	00001d2b 	andeq	r1, r0, fp, lsr #26
    5cd4:	3a028801 	bcc	a7ce0 <__Stack_Size+0xa78e0>
    5cd8:	ca000000 	bgt	5ce0 <__Stack_Size+0x58e0>
    5cdc:	00000028 	andeq	r0, r0, r8, lsr #32
    5ce0:	001e461f 	andseq	r4, lr, pc, lsl r6
    5ce4:	02ac0100 	adceq	r0, ip, #0, 2
    5ce8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5cec:	08004cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, lr}
    5cf0:	00000030 	andeq	r0, r0, r0, lsr r0
    5cf4:	08e49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}^
    5cf8:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
    5cfc:	0100001c 	tsteq	r0, ip, lsl r0
    5d00:	003a02ac 	eorseq	r0, sl, ip, lsr #5
    5d04:	29130000 	ldmdbcs	r3, {}	; <UNPREDICTABLE>
    5d08:	c1210000 			; <UNDEFINED> instruction: 0xc1210000
    5d0c:	0100001e 	tsteq	r0, lr, lsl r0
    5d10:	003a02ae 	eorseq	r0, sl, lr, lsr #5
    5d14:	29660000 	stmdbcs	r6!, {}^	; <UNPREDICTABLE>
    5d18:	27210000 	strcs	r0, [r1, -r0]!
    5d1c:	0100001a 	tsteq	r0, sl, lsl r0
    5d20:	003a02af 	eorseq	r0, sl, pc, lsr #5
    5d24:	29b30000 	ldmibcs	r3!, {}	; <UNPREDICTABLE>
    5d28:	2b210000 	blcs	845d30 <__Stack_Size+0x845930>
    5d2c:	0100001d 	tsteq	r0, sp, lsl r0
    5d30:	003a02af 	eorseq	r0, sl, pc, lsr #5
    5d34:	2a020000 	bcs	85d3c <__Stack_Size+0x8593c>
    5d38:	1f000000 	svcne	0x00000000
    5d3c:	00001b78 	andeq	r1, r0, r8, ror fp
    5d40:	3a02da01 	bcc	bc54c <__Stack_Size+0xbc14c>
    5d44:	dc000000 	stcle	0, cr0, [r0], {-0}
    5d48:	1408004c 	strne	r0, [r8], #-76	; 0x4c
    5d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    5d50:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    5d54:	1c982000 	ldcne	0, cr2, [r8], {0}
    5d58:	da010000 	ble	45d60 <__Stack_Size+0x45960>
    5d5c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5d60:	002a7f00 	eoreq	r7, sl, r0, lsl #30
    5d64:	1be82100 	blne	ffa0e16c <SCS_BASE+0x1fa0016c>
    5d68:	dc010000 	stcle	0, cr0, [r1], {-0}
    5d6c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5d70:	002aa000 	eoreq	sl, sl, r0
    5d74:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    5d78:	dd010070 	stcle	0, cr0, [r1, #-448]	; 0xfffffe40
    5d7c:	00003a02 	andeq	r3, r0, r2, lsl #20
    5d80:	002abf00 	eoreq	fp, sl, r0, lsl #30
    5d84:	49260000 	stmdbmi	r6!, {}	; <UNPREDICTABLE>
    5d88:	0500001f 	streq	r0, [r0, #-31]
    5d8c:	1f622629 	svcne	0x00622629
    5d90:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    5d94:	001cab26 	andseq	sl, ip, r6, lsr #22
    5d98:	262c0500 	strtcs	r0, [ip], -r0, lsl #10
    5d9c:	00001da3 	andeq	r1, r0, r3, lsr #27
    5da0:	62272b05 	eorvs	r2, r7, #5120	; 0x1400
    5da4:	0500001d 	streq	r0, [r0, #-29]
    5da8:	00095c2e 	andeq	r5, r9, lr, lsr #24
    5dac:	003a2800 	eorseq	r2, sl, r0, lsl #16
    5db0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5db4:	00001c16 	andeq	r1, r0, r6, lsl ip
    5db8:	003a2f05 	eorseq	r2, sl, r5, lsl #30
    5dbc:	c2000000 	andgt	r0, r0, #0
    5dc0:	04000002 	streq	r0, [r0], #-2
    5dc4:	000ef400 	andeq	pc, lr, r0, lsl #8
    5dc8:	62010400 	andvs	r0, r1, #0, 8
    5dcc:	01000008 	tsteq	r0, r8
    5dd0:	00002026 	andeq	r2, r0, r6, lsr #32
    5dd4:	000000fa 	strdeq	r0, [r0], -sl
    5dd8:	08004cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, lr}
    5ddc:	000000c8 	andeq	r0, r0, r8, asr #1
    5de0:	00000d3e 	andeq	r0, r0, lr, lsr sp
    5de4:	e2050402 	and	r0, r5, #33554432	; 0x2000000
    5de8:	02000009 	andeq	r0, r0, #9
    5dec:	09a60502 	stmibeq	r6!, {r1, r8, sl}
    5df0:	01020000 	mrseq	r0, (UNDEF: 2)
    5df4:	000b7706 	andeq	r7, fp, r6, lsl #14
    5df8:	33750300 	cmncc	r5, #0, 6
    5dfc:	27020032 	smladxcs	r2, r2, r0, r0
    5e00:	00000045 	andeq	r0, r0, r5, asr #32
    5e04:	19070402 	stmdbne	r7, {r1, sl}
    5e08:	0200000b 	andeq	r0, r0, #11
    5e0c:	0d390702 	ldceq	7, cr0, [r9, #-8]!
    5e10:	75030000 	strvc	r0, [r3, #-0]
    5e14:	29020038 	stmdbcs	r2, {r3, r4, r5}
    5e18:	0000005d 	andeq	r0, r0, sp, asr r0
    5e1c:	75080102 	strvc	r0, [r8, #-258]	; 0x102
    5e20:	0400000b 	streq	r0, [r0], #-11
    5e24:	000004ec 	andeq	r0, r0, ip, ror #9
    5e28:	006f2f02 	rsbeq	r2, pc, r2, lsl #30
    5e2c:	45050000 	strmi	r0, [r5, #-0]
    5e30:	06000000 	streq	r0, [r0], -r0
    5e34:	89390201 	ldmdbhi	r9!, {r0, r9}
    5e38:	07000000 	streq	r0, [r0, -r0]
    5e3c:	0000198d 	andeq	r1, r0, sp, lsl #19
    5e40:	45530800 	ldrbmi	r0, [r3, #-2048]	; 0x800
    5e44:	00010054 	andeq	r0, r1, r4, asr r0
    5e48:	00090504 	andeq	r0, r9, r4, lsl #10
    5e4c:	74390200 	ldrtvc	r0, [r9], #-512	; 0x200
    5e50:	06000000 	streq	r0, [r0], -r0
    5e54:	a93b0201 	ldmdbge	fp!, {r0, r9}
    5e58:	07000000 	streq	r0, [r0, -r0]
    5e5c:	000005f1 	strdeq	r0, [r0], -r1
    5e60:	0af20700 	beq	ffc87a68 <SCS_BASE+0x1fc79a68>
    5e64:	00010000 	andeq	r0, r1, r0
    5e68:	00011404 	andeq	r1, r1, r4, lsl #8
    5e6c:	943b0200 	ldrtls	r0, [fp], #-512	; 0x200
    5e70:	02000000 	andeq	r0, r0, #0
    5e74:	0b100704 	bleq	407a8c <__Stack_Size+0x40768c>
    5e78:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    5e7c:	de01a303 	cdple	3, 0, cr10, cr1, cr3, {0}
    5e80:	0a000000 	beq	5e88 <__Stack_Size+0x5a88>
    5e84:	03005243 	movweq	r5, #579	; 0x243
    5e88:	006401a5 	rsbeq	r0, r4, r5, lsr #3
    5e8c:	0a000000 	beq	5e94 <__Stack_Size+0x5a94>
    5e90:	00525343 	subseq	r5, r2, r3, asr #6
    5e94:	6401a603 	strvs	sl, [r1], #-1539	; 0x603
    5e98:	04000000 	streq	r0, [r0], #-0
    5e9c:	200f0b00 	andcs	r0, pc, r0, lsl #22
    5ea0:	a7030000 	strge	r0, [r3, -r0]
    5ea4:	0000bb01 	andeq	fp, r0, r1, lsl #22
    5ea8:	1fe00c00 	svcne	0x00e00c00
    5eac:	43010000 	movwmi	r0, #4096	; 0x1000
    5eb0:	08004cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, lr}
    5eb4:	0000001a 	andeq	r0, r0, sl, lsl r0
    5eb8:	01309c01 	teqeq	r0, r1, lsl #24
    5ebc:	fc0d0000 	stc2	0, cr0, [sp], {-0}
    5ec0:	a008004c 	andge	r0, r8, ip, asr #32
    5ec4:	19000002 	stmdbne	r0, {r1}
    5ec8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    5ecc:	31015101 	tstcc	r1, r1, lsl #2
    5ed0:	0350010e 	cmpeq	r0, #-2147483645	; 0x80000003
    5ed4:	00244840 	eoreq	r4, r4, r0, asr #16
    5ed8:	004d0a0f 	subeq	r0, sp, pc, lsl #20
    5edc:	0002a008 	andeq	sl, r2, r8
    5ee0:	51010e00 	tstpl	r1, r0, lsl #28
    5ee4:	010e3001 	tsteq	lr, r1
    5ee8:	48400350 	stmdami	r0, {r4, r6, r8, r9}^
    5eec:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    5ef0:	0000044a 	andeq	r0, r0, sl, asr #8
    5ef4:	4d0a5101 	stfmis	f5, [sl, #-4]
    5ef8:	000a0800 	andeq	r0, sl, r0, lsl #16
    5efc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f00:	00000153 	andeq	r0, r0, r3, asr r1
    5f04:	00169110 	andseq	r9, r6, r0, lsl r1
    5f08:	a9510100 	ldmdbge	r1, {r8}^
    5f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    5f10:	1b0c0050 	blne	306058 <__Stack_Size+0x305c58>
    5f14:	01000020 	tsteq	r0, r0, lsr #32
    5f18:	004d1461 	subeq	r1, sp, r1, ror #8
    5f1c:	00000c08 	andeq	r0, r0, r8, lsl #24
    5f20:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    5f24:	10000001 	andne	r0, r0, r1
    5f28:	00001691 	muleq	r0, r1, r6
    5f2c:	00a96101 	adceq	r6, r9, r1, lsl #2
    5f30:	50010000 	andpl	r0, r1, r0
    5f34:	20480c00 	subcs	r0, r8, r0, lsl #24
    5f38:	7a010000 	bvc	45f40 <__Stack_Size+0x45b40>
    5f3c:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    5f40:	00000014 	andeq	r0, r0, r4, lsl r0
    5f44:	01aa9c01 			; <UNDEFINED> instruction: 0x01aa9c01
    5f48:	f9110000 			; <UNDEFINED> instruction: 0xf9110000
    5f4c:	0100001f 	tsteq	r0, pc, lsl r0
    5f50:	00003a7a 	andeq	r3, r0, sl, ror sl
    5f54:	002aea00 	eoreq	lr, sl, r0, lsl #20
    5f58:	1a271200 	bne	9ca760 <__Stack_Size+0x9ca360>
    5f5c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    5f60:	0000003a 	andeq	r0, r0, sl, lsr r0
    5f64:	00002b0b 	andeq	r2, r0, fp, lsl #22
    5f68:	20b00c00 	adcscs	r0, r0, r0, lsl #24
    5f6c:	95010000 	strls	r0, [r1, #-0]
    5f70:	08004d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, lr}
    5f74:	0000000c 	andeq	r0, r0, ip
    5f78:	01cd9c01 	biceq	r9, sp, r1, lsl #24
    5f7c:	91100000 	tstls	r0, r0
    5f80:	01000016 	tsteq	r0, r6, lsl r0
    5f84:	0000a995 	muleq	r0, r5, r9
    5f88:	00500100 	subseq	r0, r0, r0, lsl #2
    5f8c:	0020790c 	eoreq	r7, r0, ip, lsl #18
    5f90:	40ad0100 	adcmi	r0, sp, r0, lsl #2
    5f94:	2c08004d 	stccs	0, cr0, [r8], {77}	; 0x4d
    5f98:	01000000 	mrseq	r0, (UNDEF: 0)
    5f9c:	0002229c 	muleq	r2, ip, r2
    5fa0:	1feb1100 	svcne	0x00eb1100
    5fa4:	ad010000 	stcge	0, cr0, [r1, #-0]
    5fa8:	0000003a 	andeq	r0, r0, sl, lsr r0
    5fac:	00002b35 	andeq	r2, r0, r5, lsr fp
    5fb0:	0020a211 	eoreq	sl, r0, r1, lsl r2
    5fb4:	53ad0100 			; <UNDEFINED> instruction: 0x53ad0100
    5fb8:	56000000 	strpl	r0, [r0], -r0
    5fbc:	1200002b 	andne	r0, r0, #43	; 0x2b
    5fc0:	00001a27 	andeq	r1, r0, r7, lsr #20
    5fc4:	003aaf01 	eorseq	sl, sl, r1, lsl #30
    5fc8:	2b900000 	blcs	fe405fd0 <SCS_BASE+0x1e3f7fd0>
    5fcc:	60130000 	andsvs	r0, r3, r0
    5fd0:	b708004d 	strlt	r0, [r8, -sp, asr #32]
    5fd4:	13000002 	movwne	r0, #2
    5fd8:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
    5fdc:	000002be 			; <UNDEFINED> instruction: 0x000002be
    5fe0:	1fbd0c00 	svcne	0x00bd0c00
    5fe4:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    5fe8:	08004d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, lr}
    5fec:	00000028 	andeq	r0, r0, r8, lsr #32
    5ff0:	02419c01 	subeq	r9, r1, #256	; 0x100
    5ff4:	8c130000 	ldchi	0, cr0, [r3], {-0}
    5ff8:	b708004d 	strlt	r0, [r8, -sp, asr #32]
    5ffc:	00000002 	andeq	r0, r0, r2
    6000:	00205b14 	eoreq	r5, r0, r4, lsl fp
    6004:	89f20100 	ldmibhi	r2!, {r8}^
    6008:	94000000 	strls	r0, [r0], #-0
    600c:	1408004d 	strne	r0, [r8], #-77	; 0x4d
    6010:	01000000 	mrseq	r0, (UNDEF: 0)
    6014:	0002799c 	muleq	r2, ip, r9
    6018:	20061100 	andcs	r1, r6, r0, lsl #2
    601c:	f2010000 	vhadd.s8	d0, d1, d0
    6020:	0000003a 	andeq	r0, r0, sl, lsr r0
    6024:	00002bc5 	andeq	r2, r0, r5, asr #23
    6028:	00172012 	andseq	r2, r7, r2, lsl r0
    602c:	89f40100 	ldmibhi	r4!, {r8}^
    6030:	e6000000 	str	r0, [r0], -r0
    6034:	0000002b 	andeq	r0, r0, fp, lsr #32
    6038:	001fd215 	andseq	sp, pc, r5, lsl r2	; <UNPREDICTABLE>
    603c:	01100100 	tsteq	r0, r0, lsl #2
    6040:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    6044:	00000010 	andeq	r0, r0, r0, lsl r0
    6048:	02a09c01 	adceq	r9, r0, #256	; 0x100
    604c:	06160000 	ldreq	r0, [r6], -r0
    6050:	01000020 	tsteq	r0, r0, lsr #32
    6054:	003a0110 	eorseq	r0, sl, r0, lsl r1
    6058:	2c1f0000 	ldccs	0, cr0, [pc], {-0}
    605c:	17000000 	strne	r0, [r0, -r0]
    6060:	0000208b 	andeq	r2, r0, fp, lsl #1
    6064:	b7011505 	strlt	r1, [r1, -r5, lsl #10]
    6068:	18000002 	stmdane	r0, {r1}
    606c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6070:	0000a918 	andeq	sl, r0, r8, lsl r9
    6074:	73190000 	tstvc	r9, #0
    6078:	04000020 	streq	r0, [r0], #-32
    607c:	206d191b 	rsbcs	r1, sp, fp, lsl r9
    6080:	1c040000 	stcne	0, cr0, [r4], {-0}
    6084:	00086d00 	andeq	r6, r8, r0, lsl #26
    6088:	68000400 	stmdavs	r0, {sl}
    608c:	04000010 	streq	r0, [r0], #-16
    6090:	00086201 	andeq	r6, r8, r1, lsl #4
    6094:	23410100 	movtcs	r0, #4352	; 0x1100
    6098:	00fa0000 	rscseq	r0, sl, r0
    609c:	4db80000 	ldcmi	0, cr0, [r8]
    60a0:	033c0800 	teqeq	ip, #0, 16
    60a4:	0e290000 	cdpeq	0, 2, cr0, cr9, cr0, {0}
    60a8:	04020000 	streq	r0, [r2], #-0
    60ac:	0009e205 	andeq	lr, r9, r5, lsl #4
    60b0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    60b4:	000009a6 	andeq	r0, r0, r6, lsr #19
    60b8:	77060102 	strvc	r0, [r6, -r2, lsl #2]
    60bc:	0300000b 	movweq	r0, #11
    60c0:	00323375 	eorseq	r3, r2, r5, ror r3
    60c4:	00452702 	subeq	r2, r5, r2, lsl #14
    60c8:	04020000 	streq	r0, [r2], #-0
    60cc:	000b1907 	andeq	r1, fp, r7, lsl #18
    60d0:	31750300 	cmncc	r5, r0, lsl #6
    60d4:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    60d8:	00000057 	andeq	r0, r0, r7, asr r0
    60dc:	39070202 	stmdbcc	r7, {r1, r9}
    60e0:	0300000d 	movweq	r0, #13
    60e4:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    60e8:	00006829 	andeq	r6, r0, r9, lsr #16
    60ec:	08010200 	stmdaeq	r1, {r9}
    60f0:	00000b75 	andeq	r0, r0, r5, ror fp
    60f4:	38637503 	stmdacc	r3!, {r0, r1, r8, sl, ip, sp, lr}^
    60f8:	7a2d0200 	bvc	b46900 <__Stack_Size+0xb46500>
    60fc:	04000000 	streq	r0, [r0], #-0
    6100:	00000068 	andeq	r0, r0, r8, rrx
    6104:	0004ec05 	andeq	lr, r4, r5, lsl #24
    6108:	8a2f0200 	bhi	bc6910 <__Stack_Size+0xbc6510>
    610c:	06000000 	streq	r0, [r0], -r0
    6110:	00000045 	andeq	r0, r0, r5, asr #32
    6114:	38757603 	ldmdacc	r5!, {r0, r1, r9, sl, ip, sp, lr}^
    6118:	9a310200 	bls	c46920 <__Stack_Size+0xc46520>
    611c:	06000000 	streq	r0, [r0], -r0
    6120:	00000068 	andeq	r0, r0, r8, rrx
    6124:	39020107 	stmdbcc	r2, {r0, r1, r2, r8}
    6128:	000000b4 	strheq	r0, [r0], -r4
    612c:	00198d08 	andseq	r8, r9, r8, lsl #26
    6130:	53090000 	movwpl	r0, #36864	; 0x9000
    6134:	01005445 	tsteq	r0, r5, asr #8
    6138:	09050500 	stmdbeq	r5, {r8, sl}
    613c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    6140:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6144:	00211505 	eoreq	r1, r1, r5, lsl #10
    6148:	9f390200 	svcls	0x00390200
    614c:	07000000 	streq	r0, [r0, -r0]
    6150:	df3b0201 	svcle	0x003b0201
    6154:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6158:	000005f1 	strdeq	r0, [r0], -r1
    615c:	0af20800 	beq	ffc88164 <SCS_BASE+0x1fc7a164>
    6160:	00010000 	andeq	r0, r1, r0
    6164:	00011405 	andeq	r1, r1, r5, lsl #8
    6168:	ca3b0200 	bgt	ec6970 <__Stack_Size+0xec6570>
    616c:	07000000 	streq	r0, [r0, -r0]
    6170:	ff3e0201 			; <UNDEFINED> instruction: 0xff3e0201
    6174:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6178:	00000011 	andeq	r0, r0, r1, lsl r0
    617c:	05d60800 	ldrbeq	r0, [r6, #2048]	; 0x800
    6180:	00010000 	andeq	r0, r1, r0
    6184:	00014c05 	andeq	r4, r1, r5, lsl #24
    6188:	ea3e0200 	b	f86990 <__Stack_Size+0xf86590>
    618c:	02000000 	andeq	r0, r0, #0
    6190:	0b100704 	bleq	407da8 <__Stack_Size+0x4079a8>
    6194:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    6198:	9c01aa03 	stcls	10, cr10, [r1], {3}
    619c:	0b000001 	bleq	61a8 <__Stack_Size+0x5da8>
    61a0:	03005243 	movweq	r5, #579	; 0x243
    61a4:	007f01ac 	rsbseq	r0, pc, ip, lsr #3
    61a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    61ac:	0000216f 	andeq	r2, r0, pc, ror #2
    61b0:	7f01ad03 	svcvc	0x0001ad03
    61b4:	04000000 	streq	r0, [r0], #-0
    61b8:	5249430b 	subpl	r4, r9, #738197504	; 0x2c000000
    61bc:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    61c0:	0000007f 	andeq	r0, r0, pc, ror r0
    61c4:	21ce0c08 	biccs	r0, lr, r8, lsl #24
    61c8:	af030000 	svcge	0x00030000
    61cc:	00007f01 	andeq	r7, r0, r1, lsl #30
    61d0:	cd0c0c00 	stcgt	12, cr0, [ip, #-0]
    61d4:	03000020 	movweq	r0, #32
    61d8:	007f01b0 	ldrhteq	r0, [pc], #-16
    61dc:	0c100000 	ldceq	0, cr0, [r0], {-0}
    61e0:	000021f0 	strdeq	r2, [r0], -r0
    61e4:	7f01b103 	svcvc	0x0001b103
    61e8:	14000000 	strne	r0, [r0], #-0
    61ec:	0022010c 	eoreq	r0, r2, ip, lsl #2
    61f0:	01b20300 			; <UNDEFINED> instruction: 0x01b20300
    61f4:	0000007f 	andeq	r0, r0, pc, ror r0
    61f8:	21830c18 	orrcs	r0, r3, r8, lsl ip
    61fc:	b3030000 	movwlt	r0, #12288	; 0x3000
    6200:	00007f01 	andeq	r7, r0, r1, lsl #30
    6204:	1e0c1c00 	cdpne	12, 0, cr1, cr12, cr0, {0}
    6208:	03000021 	movweq	r0, #33	; 0x21
    620c:	007f01b4 	ldrhteq	r0, [pc], #-20
    6210:	0b200000 	bleq	806218 <__Stack_Size+0x805e18>
    6214:	00525343 	subseq	r5, r2, r3, asr #6
    6218:	7f01b503 	svcvc	0x0001b503
    621c:	24000000 	strcs	r0, [r0], #-0
    6220:	20c10d00 	sbccs	r0, r1, r0, lsl #26
    6224:	b6030000 	strlt	r0, [r3], -r0
    6228:	00011101 	andeq	r1, r1, r1, lsl #2
    622c:	04140e00 	ldreq	r0, [r4], #-3584	; 0xe00
    6230:	0001ed19 	andeq	lr, r1, r9, lsl sp
    6234:	22b60f00 	adcscs	r0, r6, #0, 30
    6238:	1b040000 	blne	106240 <__Stack_Size+0x105e40>
    623c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6240:	21740f00 	cmncs	r4, r0, lsl #30
    6244:	1c040000 	stcne	0, cr0, [r4], {-0}
    6248:	0000003a 	andeq	r0, r0, sl, lsr r0
    624c:	230e0f04 	movwcs	r0, #61188	; 0xef04
    6250:	1d040000 	stcne	0, cr0, [r4, #-0]
    6254:	0000003a 	andeq	r0, r0, sl, lsr r0
    6258:	22d20f08 	sbcscs	r0, r2, #8, 30
    625c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    6260:	0000003a 	andeq	r0, r0, sl, lsr r0
    6264:	22490f0c 	subcs	r0, r9, #12, 30	; 0x30
    6268:	1f040000 	svcne	0x00040000
    626c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6270:	3c050010 	stccc	0, cr0, [r5], {16}
    6274:	04000021 	streq	r0, [r0], #-33	; 0x21
    6278:	0001a820 	andeq	sl, r1, r0, lsr #16
    627c:	003c1000 	eorseq	r1, ip, r0
    6280:	7c010000 	stcvc	0, cr0, [r1], {-0}
    6284:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    6288:	0000003c 	andeq	r0, r0, ip, lsr r0
    628c:	a0119c01 	andsge	r9, r1, r1, lsl #24
    6290:	01000006 	tsteq	r0, r6
    6294:	004df49f 	umaaleq	pc, sp, pc, r4	; <UNPREDICTABLE>
    6298:	00003808 	andeq	r3, r0, r8, lsl #16
    629c:	2c9c0100 	ldfcss	f0, [ip], {0}
    62a0:	12000002 	andne	r0, r0, #2
    62a4:	000022f5 	strdeq	r2, [r0], -r5
    62a8:	003a9f01 	eorseq	r9, sl, r1, lsl #30
    62ac:	50010000 	andpl	r0, r1, r0
    62b0:	222b1100 	eorcs	r1, fp, #0, 2
    62b4:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    62b8:	08004e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, lr}
    62bc:	00000014 	andeq	r0, r0, r4, lsl r0
    62c0:	02609c01 	rsbeq	r9, r0, #256	; 0x100
    62c4:	35130000 	ldrcc	r0, [r3, #-0]
    62c8:	01000022 	tsteq	r0, r2, lsr #32
    62cc:	00005ee9 	andeq	r5, r0, r9, ror #29
    62d0:	002c4000 	eoreq	r4, ip, r0
    62d4:	1a271400 	bne	9cb2dc <__Stack_Size+0x9caedc>
    62d8:	eb010000 	bl	462e0 <__Stack_Size+0x45ee0>
    62dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    62e0:	00002c61 	andeq	r2, r0, r1, ror #24
    62e4:	239a1500 	orrscs	r1, sl, #0, 10
    62e8:	06010000 	streq	r0, [r1], -r0
    62ec:	004e4001 	subeq	r4, lr, r1
    62f0:	00000c08 	andeq	r0, r0, r8, lsl #24
    62f4:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    62f8:	16000002 	strne	r0, [r0], -r2
    62fc:	00001691 	muleq	r0, r1, r6
    6300:	df010601 	svcle	0x00010601
    6304:	01000000 	mrseq	r0, (UNDEF: 0)
    6308:	8b150050 	blhi	546450 <__Stack_Size+0x546050>
    630c:	01000001 	tsteq	r0, r1
    6310:	4e4c011f 	mcrmi	1, 2, r0, cr12, cr15, {0}
    6314:	00140800 	andseq	r0, r4, r0, lsl #16
    6318:	9c010000 	stcls	0, cr0, [r1], {-0}
    631c:	000002cc 	andeq	r0, r0, ip, asr #5
    6320:	00226317 	eoreq	r6, r2, r7, lsl r3
    6324:	011f0100 	tsteq	pc, r0, lsl #2
    6328:	0000003a 	andeq	r0, r0, sl, lsr r0
    632c:	00002c8b 	andeq	r2, r0, fp, lsl #25
    6330:	00214e17 	eoreq	r4, r1, r7, lsl lr
    6334:	011f0100 	tsteq	pc, r0, lsl #2
    6338:	0000003a 	andeq	r0, r0, sl, lsr r0
    633c:	00002cac 	andeq	r2, r0, ip, lsr #25
    6340:	001a2718 	andseq	r2, sl, r8, lsl r7
    6344:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6348:	0000003a 	andeq	r0, r0, sl, lsr r0
    634c:	00002ccd 	andeq	r2, r0, sp, asr #25
    6350:	0cc61500 	cfstr64eq	mvdx1, [r6], {0}
    6354:	3c010000 	stccc	0, cr0, [r1], {-0}
    6358:	004e6001 	subeq	r6, lr, r1
    635c:	00000c08 	andeq	r0, r0, r8, lsl #24
    6360:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    6364:	16000002 	strne	r0, [r0], -r2
    6368:	00001691 	muleq	r0, r1, r6
    636c:	df013c01 	svcle	0x00013c01
    6370:	01000000 	mrseq	r0, (UNDEF: 0)
    6374:	17150050 			; <UNDEFINED> instruction: 0x17150050
    6378:	01000000 	mrseq	r0, (UNDEF: 0)
    637c:	4e6c014f 	powmiem	f0, f4, #10.0
    6380:	00140800 	andseq	r0, r4, r0, lsl #16
    6384:	9c010000 	stcls	0, cr0, [r1], {-0}
    6388:	00000328 	andeq	r0, r0, r8, lsr #6
    638c:	0022fd17 	eoreq	pc, r2, r7, lsl sp	; <UNPREDICTABLE>
    6390:	014f0100 	mrseq	r0, (UNDEF: 95)
    6394:	0000003a 	andeq	r0, r0, sl, lsr r0
    6398:	00002d0a 	andeq	r2, r0, sl, lsl #26
    639c:	001a2718 	andseq	r2, sl, r8, lsl r7
    63a0:	01510100 	cmpeq	r1, r0, lsl #2
    63a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    63a8:	00002d2b 	andeq	r2, r0, fp, lsr #26
    63ac:	0ad91900 	beq	ff64c7b4 <SCS_BASE+0x1f63e7b4>
    63b0:	6d010000 	stcvs	0, cr0, [r1, #-0]
    63b4:	00005e01 	andeq	r5, r0, r1, lsl #28
    63b8:	004e8000 	subeq	r8, lr, r0
    63bc:	00001008 	andeq	r1, r0, r8
    63c0:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    63c4:	0000079e 	muleq	r0, lr, r7
    63c8:	90018401 	andls	r8, r1, r1, lsl #8
    63cc:	1408004e 	strne	r0, [r8], #-78	; 0x4e
    63d0:	01000000 	mrseq	r0, (UNDEF: 0)
    63d4:	0003759c 	muleq	r3, ip, r5
    63d8:	22a11700 	adccs	r1, r1, #0, 14
    63dc:	84010000 	strhi	r0, [r1], #-0
    63e0:	00003a01 	andeq	r3, r0, r1, lsl #20
    63e4:	002d5500 	eoreq	r5, sp, r0, lsl #10
    63e8:	1a271800 	bne	9cc3f0 <__Stack_Size+0x9cbff0>
    63ec:	86010000 	strhi	r0, [r1], -r0
    63f0:	00003a01 	andeq	r3, r0, r1, lsl #20
    63f4:	002d7600 	eoreq	r7, sp, r0, lsl #12
    63f8:	dd150000 	ldcle	0, cr0, [r5, #-0]
    63fc:	01000007 	tsteq	r0, r7
    6400:	4ea401a5 	fdvmidp	f0, f4, f5
    6404:	00140800 	andseq	r0, r4, r0, lsl #16
    6408:	9c010000 	stcls	0, cr0, [r1], {-0}
    640c:	000003ac 	andeq	r0, r0, ip, lsr #7
    6410:	0020d617 	eoreq	sp, r0, r7, lsl r6
    6414:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    6418:	0000003a 	andeq	r0, r0, sl, lsr r0
    641c:	00002da0 	andeq	r2, r0, r0, lsr #27
    6420:	001a2718 	andseq	r2, sl, r8, lsl r7
    6424:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    6428:	0000003a 	andeq	r0, r0, sl, lsr r0
    642c:	00002dc1 	andeq	r2, r0, r1, asr #27
    6430:	02541500 	subseq	r1, r4, #0, 10
    6434:	c6010000 	strgt	r0, [r1], -r0
    6438:	004eb801 	subeq	fp, lr, r1, lsl #16
    643c:	00001408 	andeq	r1, r0, r8, lsl #8
    6440:	e39c0100 	orrs	r0, ip, #0, 2
    6444:	17000003 	strne	r0, [r0, -r3]
    6448:	000020d6 	ldrdeq	r2, [r0], -r6
    644c:	3a01c601 	bcc	77c58 <__Stack_Size+0x77858>
    6450:	eb000000 	bl	6458 <__Stack_Size+0x6058>
    6454:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    6458:	00001a27 	andeq	r1, r0, r7, lsr #20
    645c:	3a01c801 	bcc	78468 <__Stack_Size+0x78068>
    6460:	0c000000 	stceq	0, cr0, [r0], {-0}
    6464:	0000002e 	andeq	r0, r0, lr, lsr #32
    6468:	0022e215 	eoreq	lr, r2, r5, lsl r2
    646c:	01e90100 	mvneq	r0, r0, lsl #2
    6470:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    6474:	00000018 	andeq	r0, r0, r8, lsl r0
    6478:	04189c01 	ldreq	r9, [r8], #-3073	; 0xc01
    647c:	ad170000 	ldcge	0, cr0, [r7, #-0]
    6480:	01000023 	tsteq	r0, r3, lsr #32
    6484:	005e01e9 	subseq	r0, lr, r9, ror #3
    6488:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    648c:	91160000 	tstls	r6, r0
    6490:	01000016 	tsteq	r0, r6, lsl r0
    6494:	00df01e9 	sbcseq	r0, pc, r9, ror #3
    6498:	51010000 	mrspl	r0, (UNDEF: 1)
    649c:	21b21500 			; <UNDEFINED> instruction: 0x21b21500
    64a0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    64a4:	004ee402 	subeq	lr, lr, r2, lsl #8
    64a8:	00000c08 	andeq	r0, r0, r8, lsl #24
    64ac:	3d9c0100 	ldfccs	f0, [ip]
    64b0:	16000004 	strne	r0, [r0], -r4
    64b4:	00002282 	andeq	r2, r0, r2, lsl #5
    64b8:	3a020801 	bcc	884c4 <__Stack_Size+0x880c4>
    64bc:	01000000 	mrseq	r0, (UNDEF: 0)
    64c0:	df150050 	svcle	0x00150050
    64c4:	01000020 	tsteq	r0, r0, lsr #32
    64c8:	4ef0021d 	mrcmi	2, 7, r0, cr0, cr13, {0}
    64cc:	00140800 	andseq	r0, r4, r0, lsl #16
    64d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    64d4:	00000474 	andeq	r0, r0, r4, ror r4
    64d8:	00213217 	eoreq	r3, r1, r7, lsl r2
    64dc:	021d0100 	andseq	r0, sp, #0, 2
    64e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    64e4:	00002e70 	andeq	r2, r0, r0, ror lr
    64e8:	001a2718 	andseq	r2, sl, r8, lsl r7
    64ec:	021f0100 	andseq	r0, pc, #0, 2
    64f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    64f4:	00002e91 	muleq	r0, r1, lr
    64f8:	23631500 	cmncs	r3, #0, 10
    64fc:	3c010000 	stccc	0, cr0, [r1], {-0}
    6500:	004f0402 	subeq	r0, pc, r2, lsl #8
    6504:	00002008 	andeq	r2, r0, r8
    6508:	999c0100 	ldmibls	ip, {r8}
    650c:	16000004 	strne	r0, [r0], -r4
    6510:	00002106 	andeq	r2, r0, r6, lsl #2
    6514:	5e023c01 	cdppl	12, 0, cr3, cr2, cr1, {0}
    6518:	01000000 	mrseq	r0, (UNDEF: 0)
    651c:	c3150050 	tstgt	r5, #80	; 0x50
    6520:	01000021 	tsteq	r0, r1, lsr #32
    6524:	4f240263 	svcmi	0x00240263
    6528:	000c0800 	andeq	r0, ip, r0, lsl #16
    652c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6530:	000004be 			; <UNDEFINED> instruction: 0x000004be
    6534:	00169116 	andseq	r9, r6, r6, lsl r1
    6538:	02630100 	rsbeq	r0, r3, #0, 2
    653c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6540:	15005001 	strne	r5, [r0, #-1]
    6544:	00002271 	andeq	r2, r0, r1, ror r2
    6548:	30027901 	andcc	r7, r2, r1, lsl #18
    654c:	1008004f 	andne	r0, r8, pc, asr #32
    6550:	01000000 	mrseq	r0, (UNDEF: 0)
    6554:	0004e59c 	muleq	r4, ip, r5
    6558:	21991700 	orrscs	r1, r9, r0, lsl #14
    655c:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    6560:	00003a02 	andeq	r3, r0, r2, lsl #20
    6564:	002ebb00 	eoreq	fp, lr, r0, lsl #22
    6568:	71150000 	tstvc	r5, r0
    656c:	01000023 	tsteq	r0, r3, lsr #32
    6570:	4f40028c 	svcmi	0x0040028c
    6574:	000c0800 	andeq	r0, ip, r0, lsl #16
    6578:	9c010000 	stcls	0, cr0, [r1], {-0}
    657c:	0000050a 	andeq	r0, r0, sl, lsl #10
    6580:	00169116 	andseq	r9, r6, r6, lsl r1
    6584:	028c0100 	addeq	r0, ip, #0, 2
    6588:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    658c:	15005001 	strne	r5, [r0, #-1]
    6590:	0000232f 	andeq	r2, r0, pc, lsr #6
    6594:	4c029c01 	stcmi	12, cr9, [r2], {1}
    6598:	8408004f 	strhi	r0, [r8], #-79	; 0x4f
    659c:	01000000 	mrseq	r0, (UNDEF: 0)
    65a0:	00056f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    65a4:	22c71600 	sbccs	r1, r7, #0, 12
    65a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    65ac:	00056f02 	andeq	r6, r5, r2, lsl #30
    65b0:	1a500100 	bne	14069b8 <__Stack_Size+0x14065b8>
    65b4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    65b8:	3a029e01 	bcc	addc4 <__Stack_Size+0xad9c4>
    65bc:	dc000000 	stcle	0, cr0, [r0], {-0}
    65c0:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    65c4:	000021aa 	andeq	r2, r0, sl, lsr #3
    65c8:	3a029e01 	bcc	addd4 <__Stack_Size+0xad9d4>
    65cc:	60000000 	andvs	r0, r0, r0
    65d0:	1800002f 	stmdane	r0, {r0, r1, r2, r3, r5}
    65d4:	000021e6 	andeq	r2, r0, r6, ror #3
    65d8:	3a029e01 	bcc	adde4 <__Stack_Size+0xad9e4>
    65dc:	90000000 	andls	r0, r0, r0
    65e0:	1800002f 	stmdane	r0, {r0, r1, r2, r3, r5}
    65e4:	000022ef 	andeq	r2, r0, pc, ror #5
    65e8:	3a029e01 	bcc	addf4 <__Stack_Size+0xad9f4>
    65ec:	b5000000 	strlt	r0, [r0, #-0]
    65f0:	0000002f 	andeq	r0, r0, pc, lsr #32
    65f4:	01ed041b 	mvneq	r0, fp, lsl r4
    65f8:	59150000 	ldmdbpl	r5, {}	; <UNPREDICTABLE>
    65fc:	01000021 	tsteq	r0, r1, lsr #32
    6600:	4fd00300 	svcmi	0x00d00300
    6604:	00180800 	andseq	r0, r8, r0, lsl #16
    6608:	9c010000 	stcls	0, cr0, [r1], {-0}
    660c:	000005aa 	andeq	r0, r0, sl, lsr #11
    6610:	0023b417 	eoreq	fp, r3, r7, lsl r4
    6614:	03000100 	movweq	r0, #256	; 0x100
    6618:	0000003a 	andeq	r0, r0, sl, lsr r0
    661c:	00003040 	andeq	r3, r0, r0, asr #32
    6620:	00169116 	andseq	r9, r6, r6, lsl r1
    6624:	03000100 	movweq	r0, #256	; 0x100
    6628:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    662c:	15005101 	strne	r5, [r0, #-257]	; 0x101
    6630:	000004f1 	strdeq	r0, [r0], -r1
    6634:	e8032101 	stmda	r3, {r0, r8, sp}
    6638:	1808004f 	stmdane	r8, {r0, r1, r2, r3, r6}
    663c:	01000000 	mrseq	r0, (UNDEF: 0)
    6640:	0005df9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    6644:	21231700 			; <UNDEFINED> instruction: 0x21231700
    6648:	21010000 	mrscs	r0, (UNDEF: 1)
    664c:	00003a03 	andeq	r3, r0, r3, lsl #20
    6650:	00307a00 	eorseq	r7, r0, r0, lsl #20
    6654:	16911600 	ldrne	r1, [r1], r0, lsl #12
    6658:	21010000 	mrscs	r0, (UNDEF: 1)
    665c:	0000df03 	andeq	sp, r0, r3, lsl #30
    6660:	00510100 	subseq	r0, r1, r0, lsl #2
    6664:	0005f915 	andeq	pc, r5, r5, lsl r9	; <UNPREDICTABLE>
    6668:	03430100 	movteq	r0, #12544	; 0x3100
    666c:	08005000 	stmdaeq	r0, {ip, lr}
    6670:	00000018 	andeq	r0, r0, r8, lsl r0
    6674:	06149c01 	ldreq	r9, [r4], -r1, lsl #24
    6678:	d7170000 	ldrle	r0, [r7, -r0]
    667c:	01000021 	tsteq	r0, r1, lsr #32
    6680:	003a0343 	eorseq	r0, sl, r3, asr #6
    6684:	30b40000 	adcscc	r0, r4, r0
    6688:	91160000 	tstls	r6, r0
    668c:	01000016 	tsteq	r0, r6, lsl r0
    6690:	00df0343 	sbcseq	r0, pc, r3, asr #6
    6694:	51010000 	mrspl	r0, (UNDEF: 1)
    6698:	1a511500 	bne	144baa0 <__Stack_Size+0x144b6a0>
    669c:	63010000 	movwvs	r0, #4096	; 0x1000
    66a0:	00501803 	subseq	r1, r0, r3, lsl #16
    66a4:	00001808 	andeq	r1, r0, r8, lsl #16
    66a8:	499c0100 	ldmibmi	ip, {r8}
    66ac:	17000006 	strne	r0, [r0, -r6]
    66b0:	00002123 	andeq	r2, r0, r3, lsr #2
    66b4:	3a036301 	bcc	df2c0 <__Stack_Size+0xdeec0>
    66b8:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    66bc:	16000030 			; <UNDEFINED> instruction: 0x16000030
    66c0:	00001691 	muleq	r0, r1, r6
    66c4:	df036301 	svcle	0x00036301
    66c8:	01000000 	mrseq	r0, (UNDEF: 0)
    66cc:	8b150051 	blhi	546818 <__Stack_Size+0x546418>
    66d0:	01000020 	tsteq	r0, r0, lsr #32
    66d4:	50300384 	eorspl	r0, r0, r4, lsl #7
    66d8:	00180800 	andseq	r0, r8, r0, lsl #16
    66dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    66e0:	0000067e 	andeq	r0, r0, lr, ror r6
    66e4:	0021d717 	eoreq	sp, r1, r7, lsl r7
    66e8:	03840100 	orreq	r0, r4, #0, 2
    66ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    66f0:	00003128 	andeq	r3, r0, r8, lsr #2
    66f4:	00169116 	andseq	r9, r6, r6, lsl r1
    66f8:	03840100 	orreq	r0, r4, #0, 2
    66fc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6700:	15005101 	strne	r5, [r0, #-257]	; 0x101
    6704:	00002218 	andeq	r2, r0, r8, lsl r2
    6708:	48039c01 	stmdami	r3, {r0, sl, fp, ip, pc}
    670c:	0c080050 	stceq	0, cr0, [r8], {80}	; 0x50
    6710:	01000000 	mrseq	r0, (UNDEF: 0)
    6714:	0006a39c 	muleq	r6, ip, r3
    6718:	16911600 	ldrne	r1, [r1], r0, lsl #12
    671c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6720:	0000df03 	andeq	sp, r0, r3, lsl #30
    6724:	00500100 	subseq	r0, r0, r0, lsl #2
    6728:	00237f15 	eoreq	r7, r3, r5, lsl pc
    672c:	03ac0100 			; <UNDEFINED> instruction: 0x03ac0100
    6730:	08005054 	stmdaeq	r0, {r2, r4, r6, ip, lr}
    6734:	0000000c 	andeq	r0, r0, ip
    6738:	06c89c01 	strbeq	r9, [r8], r1, lsl #24
    673c:	91160000 	tstls	r6, r0
    6740:	01000016 	tsteq	r0, r6, lsl r0
    6744:	00df03ac 	sbcseq	r0, pc, ip, lsr #7
    6748:	50010000 	andpl	r0, r1, r0
    674c:	218b1500 	orrcs	r1, fp, r0, lsl #10
    6750:	c1010000 	mrsgt	r0, (UNDEF: 1)
    6754:	00506003 	subseq	r6, r0, r3
    6758:	00000c08 	andeq	r0, r0, r8, lsl #24
    675c:	ed9c0100 	ldfs	f0, [ip]
    6760:	16000006 	strne	r0, [r0], -r6
    6764:	000023a5 	andeq	r2, r0, r5, lsr #7
    6768:	5e03c101 	mvfpls	f4, f1
    676c:	01000000 	mrseq	r0, (UNDEF: 0)
    6770:	fe1c0050 	mrc2	0, 0, r0, cr12, cr0, {2}
    6774:	01000008 	tsteq	r0, r8
    6778:	00b403dd 	ldrsbteq	r0, [r4], sp
    677c:	506c0000 	rsbpl	r0, ip, r0
    6780:	00280800 	eoreq	r0, r8, r0, lsl #16
    6784:	9c010000 	stcls	0, cr0, [r1], {-0}
    6788:	00000748 	andeq	r0, r0, r8, asr #14
    678c:	00225a17 	eoreq	r5, r2, r7, lsl sl
    6790:	03dd0100 	bicseq	r0, sp, #0, 2
    6794:	0000005e 	andeq	r0, r0, lr, asr r0
    6798:	00003162 	andeq	r3, r0, r2, ror #2
    679c:	706d741a 	rsbvc	r7, sp, sl, lsl r4
    67a0:	03df0100 	bicseq	r0, pc, #0, 2
    67a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    67a8:	00003183 	andeq	r3, r0, r3, lsl #3
    67ac:	0021f718 	eoreq	pc, r1, r8, lsl r7	; <UNPREDICTABLE>
    67b0:	03e00100 	mvneq	r0, #0, 2
    67b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    67b8:	000031cc 	andeq	r3, r0, ip, asr #3
    67bc:	00172018 	andseq	r2, r7, r8, lsl r0
    67c0:	03e10100 	mvneq	r0, #0, 2
    67c4:	000000b4 	strheq	r0, [r0], -r4
    67c8:	00003202 	andeq	r3, r0, r2, lsl #4
    67cc:	02bd1d00 	adcseq	r1, sp, #0, 26
    67d0:	c6010000 	strgt	r0, [r1], -r0
    67d4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    67d8:	08005094 	stmdaeq	r0, {r2, r4, r7, ip, lr}
    67dc:	0000002e 	andeq	r0, r0, lr, lsr #32
    67e0:	07b29c01 	ldreq	r9, [r2, r1, lsl #24]!
    67e4:	091e0000 	ldmdbeq	lr, {}	; <UNPREDICTABLE>
    67e8:	01000022 	tsteq	r0, r2, lsr #32
    67ec:	00007fc8 	andeq	r7, r0, r8, asr #31
    67f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    67f4:	00171914 	andseq	r1, r7, r4, lsl r9
    67f8:	ffc90100 			; <UNDEFINED> instruction: 0xffc90100
    67fc:	45000000 	strmi	r0, [r0, #-0]
    6800:	14000032 	strne	r0, [r0], #-50	; 0x32
    6804:	000022ac 	andeq	r2, r0, ip, lsr #5
    6808:	00b4ca01 	adcseq	ip, r4, r1, lsl #20
    680c:	326a0000 	rsbcc	r0, sl, #0
    6810:	a01f0000 	andsge	r0, pc, r0
    6814:	ed080050 	stc	0, cr0, [r8, #-320]	; 0xfffffec0
    6818:	a1000006 	tstge	r0, r6
    681c:	20000007 	andcs	r0, r0, r7
    6820:	08025001 	stmdaeq	r2, {r0, ip, lr}
    6824:	b6210031 			; <UNDEFINED> instruction: 0xb6210031
    6828:	ed080050 	stc	0, cr0, [r8, #-320]	; 0xfffffec0
    682c:	20000006 	andcs	r0, r0, r6
    6830:	08025001 	stmdaeq	r2, {r0, ip, lr}
    6834:	22000031 	andcs	r0, r0, #49	; 0x31
    6838:	00002293 	muleq	r0, r3, r2
    683c:	c2041001 	andgt	r1, r4, #1
    6840:	12080050 	andne	r0, r8, #80	; 0x50
    6844:	01000000 	mrseq	r0, (UNDEF: 0)
    6848:	210e1c9c 			; <UNDEFINED> instruction: 0x210e1c9c
    684c:	24010000 	strcs	r0, [r1], #-0
    6850:	0000bf04 	andeq	fp, r0, r4, lsl #30
    6854:	0050d400 	subseq	sp, r0, r0, lsl #8
    6858:	00001408 	andeq	r1, r0, r8, lsl #8
    685c:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    6860:	17000007 	strne	r0, [r0, -r7]
    6864:	000023ad 	andeq	r2, r0, sp, lsr #7
    6868:	5e042401 	cdppl	4, 0, cr2, cr4, cr1, {0}
    686c:	7d000000 	stcvc	0, cr0, [r0, #-0]
    6870:	18000032 	stmdane	r0, {r1, r4, r5}
    6874:	00001720 	andeq	r1, r0, r0, lsr #14
    6878:	bf042601 	svclt	0x00042601
    687c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    6880:	00000032 	andeq	r0, r0, r2, lsr r0
    6884:	0020f015 	eoreq	pc, r0, r5, lsl r0	; <UNPREDICTABLE>
    6888:	04470100 	strbeq	r0, [r7], #-256	; 0x100
    688c:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
    6890:	0000000c 	andeq	r0, r0, ip
    6894:	08249c01 	stmdaeq	r4!, {r0, sl, fp, ip, pc}
    6898:	ad160000 	ldcge	0, cr0, [r6, #-0]
    689c:	01000023 	tsteq	r0, r3, lsr #32
    68a0:	005e0447 	subseq	r0, lr, r7, asr #8
    68a4:	50010000 	andpl	r0, r1, r0
    68a8:	006f2300 	rsbeq	r2, pc, r0, lsl #6
    68ac:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    68b0:	0a240000 	beq	9068b8 <__Stack_Size+0x9064b8>
    68b4:	0f000001 	svceq	0x00000001
    68b8:	231e1e00 	tstcs	lr, #0, 28
    68bc:	6f010000 	svcvs	0x00010000
    68c0:	00000845 	andeq	r0, r0, r5, asr #16
    68c4:	611c0305 	tstvs	ip, r5, lsl #6
    68c8:	24040800 	strcs	r0, [r4], #-2048	; 0x800
    68cc:	23000008 	movwcs	r0, #8
    68d0:	0000006f 	andeq	r0, r0, pc, rrx
    68d4:	0000085a 	andeq	r0, r0, sl, asr r8
    68d8:	00010a24 	andeq	r0, r1, r4, lsr #20
    68dc:	1e000300 	cdpne	3, 0, cr0, cr0, cr0, {0}
    68e0:	000023c2 	andeq	r2, r0, r2, asr #7
    68e4:	086b7001 	stmdaeq	fp!, {r0, ip, sp, lr}^
    68e8:	03050000 	movweq	r0, #20480	; 0x5000
    68ec:	0800612c 	stmdaeq	r0, {r2, r3, r5, r8, sp, lr}
    68f0:	00084a04 	andeq	r4, r8, r4, lsl #20
    68f4:	02070000 	andeq	r0, r7, #0
    68f8:	00040000 	andeq	r0, r4, r0
    68fc:	0000128f 	andeq	r1, r0, pc, lsl #5
    6900:	08620104 	stmdaeq	r2!, {r2, r8}^
    6904:	0c010000 	stceq	0, cr0, [r1], {-0}
    6908:	fa000024 	blx	69a0 <__Stack_Size+0x65a0>
    690c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    6910:	8c080050 	stchi	0, cr0, [r8], {80}	; 0x50
    6914:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    6918:	0200000f 	andeq	r0, r0, #15
    691c:	09e20504 	stmibeq	r2!, {r2, r8, sl}^
    6920:	02020000 	andeq	r0, r2, #0
    6924:	0009a605 	andeq	sl, r9, r5, lsl #12
    6928:	06010200 	streq	r0, [r1], -r0, lsl #4
    692c:	00000b77 	andeq	r0, r0, r7, ror fp
    6930:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    6934:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    6938:	02000000 	andeq	r0, r0, #0
    693c:	0b190704 	bleq	648554 <__Stack_Size+0x648154>
    6940:	02020000 	andeq	r0, r2, #0
    6944:	000d3907 	andeq	r3, sp, r7, lsl #18
    6948:	38750300 	ldmdacc	r5!, {r8, r9}^
    694c:	5d290200 	sfmpl	f0, 4, [r9, #-0]
    6950:	02000000 	andeq	r0, r0, #0
    6954:	0b750801 	bleq	1d48960 <__Stack_Size+0x1d48560>
    6958:	ec040000 	stc	0, cr0, [r4], {-0}
    695c:	02000004 	andeq	r0, r0, #4
    6960:	00006f2f 	andeq	r6, r0, pc, lsr #30
    6964:	00450500 	subeq	r0, r5, r0, lsl #10
    6968:	bb040000 	bllt	106970 <__Stack_Size+0x106570>
    696c:	0200001e 	andeq	r0, r0, #30
    6970:	00007f33 	andeq	r7, r0, r3, lsr pc
    6974:	006f0600 	rsbeq	r0, pc, r0, lsl #12
    6978:	01070000 	mrseq	r0, (UNDEF: 7)
    697c:	00993902 	addseq	r3, r9, r2, lsl #18
    6980:	8d080000 	stchi	0, cr0, [r8, #-0]
    6984:	00000019 	andeq	r0, r0, r9, lsl r0
    6988:	54455309 	strbpl	r5, [r5], #-777	; 0x309
    698c:	04000100 	streq	r0, [r0], #-256	; 0x100
    6990:	00000905 	andeq	r0, r0, r5, lsl #18
    6994:	00843902 	addeq	r3, r4, r2, lsl #18
    6998:	01070000 	mrseq	r0, (UNDEF: 7)
    699c:	00b93b02 	adcseq	r3, r9, r2, lsl #22
    69a0:	f1080000 	cpsie	
    69a4:	00000005 	andeq	r0, r0, r5
    69a8:	000af208 	andeq	pc, sl, r8, lsl #4
    69ac:	04000100 	streq	r0, [r0], #-256	; 0x100
    69b0:	00000114 	andeq	r0, r0, r4, lsl r1
    69b4:	00a43b02 	adceq	r3, r4, r2, lsl #22
    69b8:	04020000 	streq	r0, [r2], #-0
    69bc:	000b1007 	andeq	r1, fp, r7
    69c0:	03100a00 	tsteq	r0, #0, 20
    69c4:	01090202 	tsteq	r9, r2, lsl #4
    69c8:	320b0000 	andcc	r0, fp, #0
    69cc:	03000024 	movweq	r0, #36	; 0x24
    69d0:	00640204 	rsbeq	r0, r4, r4, lsl #4
    69d4:	0b000000 	bleq	69dc <__Stack_Size+0x65dc>
    69d8:	0000245f 	andeq	r2, r0, pc, asr r4
    69dc:	64020503 	strvs	r0, [r2], #-1283	; 0x503
    69e0:	04000000 	streq	r0, [r0], #-0
    69e4:	4c41560c 	mcrrmi	6, 0, r5, r1, cr12
    69e8:	02060300 	andeq	r0, r6, #0, 6
    69ec:	00000064 	andeq	r0, r0, r4, rrx
    69f0:	24060b08 	strcs	r0, [r6], #-2824	; 0xb08
    69f4:	07030000 	streq	r0, [r3, -r0]
    69f8:	00007402 	andeq	r7, r0, r2, lsl #8
    69fc:	0d000c00 	stceq	12, cr0, [r0, #-0]
    6a00:	00002464 	andeq	r2, r0, r4, ror #8
    6a04:	cb020803 	blgt	88a18 <__Stack_Size+0x88618>
    6a08:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6a0c:	00002447 	andeq	r2, r0, r7, asr #8
    6a10:	50f42b01 	rscspl	r2, r4, r1, lsl #22
    6a14:	00180800 	andseq	r0, r8, r0, lsl #16
    6a18:	9c010000 	stcls	0, cr0, [r1], {-0}
    6a1c:	00000138 	andeq	r0, r0, r8, lsr r1
    6a20:	0024740f 	eoreq	r7, r4, pc, lsl #8
    6a24:	3a2b0100 	bcc	ac6e2c <__Stack_Size+0xac6a2c>
    6a28:	01000000 	mrseq	r0, (UNDEF: 0)
    6a2c:	220e0050 	andcs	r0, lr, #80	; 0x50
    6a30:	01000002 	tsteq	r0, r2
    6a34:	00510c42 	subseq	r0, r1, r2, asr #24
    6a38:	00000c08 	andeq	r0, r0, r8, lsl #24
    6a3c:	5b9c0100 	blpl	fe706e44 <SCS_BASE+0x1e6f8e44>
    6a40:	0f000001 	svceq	0x00000001
    6a44:	0000022d 	andeq	r0, r0, sp, lsr #4
    6a48:	003a4201 	eorseq	r4, sl, r1, lsl #4
    6a4c:	50010000 	andpl	r0, r1, r0
    6a50:	0a6c0e00 	beq	1b0a258 <__Stack_Size+0x1b09e58>
    6a54:	55010000 	strpl	r0, [r1, #-0]
    6a58:	08005118 	stmdaeq	r0, {r3, r4, r8, ip, lr}
    6a5c:	00000028 	andeq	r0, r0, r8, lsr #32
    6a60:	01809c01 	orreq	r9, r0, r1, lsl #24
    6a64:	37100000 	ldrcc	r0, [r0, -r0]
    6a68:	01000024 	tsteq	r0, r4, lsr #32
    6a6c:	00003a55 	andeq	r3, r0, r5, asr sl
    6a70:	0032dd00 	eorseq	sp, r2, r0, lsl #26
    6a74:	d60e0000 	strle	r0, [lr], -r0
    6a78:	01000008 	tsteq	r0, r8
    6a7c:	00514070 	subseq	r4, r1, r0, ror r0
    6a80:	00001808 	andeq	r1, r0, r8, lsl #16
    6a84:	a39c0100 	orrsge	r0, ip, #0, 2
    6a88:	0f000001 	svceq	0x00000001
    6a8c:	00001691 	muleq	r0, r1, r6
    6a90:	00b97001 	adcseq	r7, r9, r1
    6a94:	50010000 	andpl	r0, r1, r0
    6a98:	23d01100 	bicscs	r1, r0, #0, 2
    6a9c:	86010000 	strhi	r0, [r1], -r0
    6aa0:	0000003a 	andeq	r0, r0, sl, lsr r0
    6aa4:	08005158 	stmdaeq	r0, {r3, r4, r6, r8, ip, lr}
    6aa8:	0000000c 	andeq	r0, r0, ip
    6aac:	e3129c01 	tst	r2, #256	; 0x100
    6ab0:	01000023 	tsteq	r0, r3, lsr #32
    6ab4:	00009996 	muleq	r0, r6, r9
    6ab8:	00516400 	subseq	r6, r1, r0, lsl #8
    6abc:	00001c08 	andeq	r1, r0, r8, lsl #24
    6ac0:	109c0100 	addsne	r0, ip, r0, lsl #2
    6ac4:	000023f9 	strdeq	r2, [r0], -r9
    6ac8:	00539601 	subseq	r9, r3, r1, lsl #12
    6acc:	33180000 	tstcc	r8, #0
    6ad0:	f7130000 			; <UNDEFINED> instruction: 0xf7130000
    6ad4:	01000021 	tsteq	r0, r1, lsr #32
    6ad8:	00003a98 	muleq	r0, r8, sl
    6adc:	00333900 	eorseq	r3, r3, r0, lsl #18
    6ae0:	6d741400 	cfldrdvs	mvd1, [r4, #-0]
    6ae4:	98010070 	stmdals	r1, {r4, r5, r6}
    6ae8:	0000003a 	andeq	r0, r0, sl, lsr r0
    6aec:	00003358 	andeq	r3, r0, r8, asr r3
    6af0:	00172013 	andseq	r2, r7, r3, lsl r0
    6af4:	99990100 	ldmibls	r9, {r8}
    6af8:	85000000 	strhi	r0, [r0, #-0]
    6afc:	00000033 	andeq	r0, r0, r3, lsr r0
    6b00:	001f3e00 	andseq	r3, pc, r0, lsl #28
    6b04:	b7000400 	strlt	r0, [r0, -r0, lsl #8]
    6b08:	04000013 	streq	r0, [r0], #-19
    6b0c:	00086201 	andeq	r6, r8, r1, lsl #4
    6b10:	276e0100 	strbcs	r0, [lr, -r0, lsl #2]!
    6b14:	00fa0000 	rscseq	r0, sl, r0
    6b18:	51800000 	orrpl	r0, r0, r0
    6b1c:	0a440800 	beq	1108b24 <__Stack_Size+0x1108724>
    6b20:	107e0000 	rsbsne	r0, lr, r0
    6b24:	04020000 	streq	r0, [r2], #-0
    6b28:	0009e205 	andeq	lr, r9, r5, lsl #4
    6b2c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    6b30:	000009a6 	andeq	r0, r0, r6, lsr #19
    6b34:	77060102 	strvc	r0, [r6, -r2, lsl #2]
    6b38:	0300000b 	movweq	r0, #11
    6b3c:	00323375 	eorseq	r3, r2, r5, ror r3
    6b40:	00452702 	subeq	r2, r5, r2, lsl #14
    6b44:	04020000 	streq	r0, [r2], #-0
    6b48:	000b1907 	andeq	r1, fp, r7, lsl #18
    6b4c:	31750300 	cmncc	r5, r0, lsl #6
    6b50:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    6b54:	00000057 	andeq	r0, r0, r7, asr r0
    6b58:	39070202 	stmdbcc	r7, {r1, r9}
    6b5c:	0300000d 	movweq	r0, #13
    6b60:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    6b64:	00006829 	andeq	r6, r0, r9, lsr #16
    6b68:	08010200 	stmdaeq	r1, {r9}
    6b6c:	00000b75 	andeq	r0, r0, r5, ror fp
    6b70:	0004ec04 	andeq	lr, r4, r4, lsl #24
    6b74:	7a2f0200 	bvc	bc737c <__Stack_Size+0xbc6f7c>
    6b78:	05000000 	streq	r0, [r0, #-0]
    6b7c:	00000045 	andeq	r0, r0, r5, asr #32
    6b80:	00034704 	andeq	r4, r3, r4, lsl #14
    6b84:	8a300200 	bhi	c0738c <__Stack_Size+0xc06f8c>
    6b88:	05000000 	streq	r0, [r0, #-0]
    6b8c:	00000057 	andeq	r0, r0, r7, asr r0
    6b90:	39020106 	stmdbcc	r2, {r1, r2, r8}
    6b94:	000000a4 	andeq	r0, r0, r4, lsr #1
    6b98:	00198d07 	andseq	r8, r9, r7, lsl #26
    6b9c:	53080000 	movwpl	r0, #32768	; 0x8000
    6ba0:	01005445 	tsteq	r0, r5, asr #8
    6ba4:	09050400 	stmdbeq	r5, {sl}
    6ba8:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    6bac:	0000008f 	andeq	r0, r0, pc, lsl #1
    6bb0:	00211504 	eoreq	r1, r1, r4, lsl #10
    6bb4:	8f390200 	svchi	0x00390200
    6bb8:	06000000 	streq	r0, [r0], -r0
    6bbc:	cf3b0201 	svcgt	0x003b0201
    6bc0:	07000000 	streq	r0, [r0, -r0]
    6bc4:	000005f1 	strdeq	r0, [r0], -r1
    6bc8:	0af20700 	beq	ffc887d0 <SCS_BASE+0x1fc7a7d0>
    6bcc:	00010000 	andeq	r0, r1, r0
    6bd0:	00011404 	andeq	r1, r1, r4, lsl #8
    6bd4:	ba3b0200 	blt	ec73dc <__Stack_Size+0xec6fdc>
    6bd8:	02000000 	andeq	r0, r0, #0
    6bdc:	0b100704 	bleq	4087f4 <__Stack_Size+0x4083f4>
    6be0:	50090000 	andpl	r0, r9, r0
    6be4:	f2020b03 	vqdmulh.s<illegal width 8>	d0, d2, d3
    6be8:	0a000002 	beq	6bf8 <__Stack_Size+0x67f8>
    6bec:	00315243 	eorseq	r5, r1, r3, asr #4
    6bf0:	7f020d03 	svcvc	0x00020d03
    6bf4:	00000000 	andeq	r0, r0, r0
    6bf8:	0009600b 	andeq	r6, r9, fp
    6bfc:	020e0300 	andeq	r0, lr, #0, 6
    6c00:	0000004c 	andeq	r0, r0, ip, asr #32
    6c04:	52430a02 	subpl	r0, r3, #8192	; 0x2000
    6c08:	0f030032 	svceq	0x00030032
    6c0c:	00007f02 	andeq	r7, r0, r2, lsl #30
    6c10:	6a0b0400 	bvs	2c7c18 <__Stack_Size+0x2c7818>
    6c14:	03000009 	movweq	r0, #9
    6c18:	004c0210 	subeq	r0, ip, r0, lsl r2
    6c1c:	0b060000 	bleq	186c24 <__Stack_Size+0x186824>
    6c20:	0000069b 	muleq	r0, fp, r6
    6c24:	7f021103 	svcvc	0x00021103
    6c28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6c2c:	0009740b 	andeq	r7, r9, fp, lsl #8
    6c30:	02120300 	andseq	r0, r2, #0, 6
    6c34:	0000004c 	andeq	r0, r0, ip, asr #32
    6c38:	051b0b0a 	ldreq	r0, [fp, #-2826]	; 0xb0a
    6c3c:	13030000 	movwne	r0, #12288	; 0x3000
    6c40:	00007f02 	andeq	r7, r0, r2, lsl #30
    6c44:	7e0b0c00 	cdpvc	12, 0, cr0, cr11, cr0, {0}
    6c48:	03000009 	movweq	r0, #9
    6c4c:	004c0214 	subeq	r0, ip, r4, lsl r2
    6c50:	0a0e0000 	beq	386c58 <__Stack_Size+0x386858>
    6c54:	03005253 	movweq	r5, #595	; 0x253
    6c58:	007f0215 	rsbseq	r0, pc, r5, lsl r2	; <UNPREDICTABLE>
    6c5c:	0b100000 	bleq	406c64 <__Stack_Size+0x406864>
    6c60:	00000988 	andeq	r0, r0, r8, lsl #19
    6c64:	4c021603 	stcmi	6, cr1, [r2], {3}
    6c68:	12000000 	andne	r0, r0, #0
    6c6c:	5247450a 	subpl	r4, r7, #41943040	; 0x2800000
    6c70:	02170300 	andseq	r0, r7, #0, 6
    6c74:	0000007f 	andeq	r0, r0, pc, ror r0
    6c78:	09920b14 	ldmibeq	r2, {r2, r4, r8, r9, fp}
    6c7c:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    6c80:	00004c02 	andeq	r4, r0, r2, lsl #24
    6c84:	9f0b1600 	svcls	0x000b1600
    6c88:	03000003 	movweq	r0, #3
    6c8c:	007f0219 	rsbseq	r0, pc, r9, lsl r2	; <UNPREDICTABLE>
    6c90:	0b180000 	bleq	606c98 <__Stack_Size+0x606898>
    6c94:	0000099c 	muleq	r0, ip, r9
    6c98:	4c021a03 	stcmi	10, cr1, [r2], {3}
    6c9c:	1a000000 	bne	6ca4 <__Stack_Size+0x68a4>
    6ca0:	0003a50b 	andeq	sl, r3, fp, lsl #10
    6ca4:	021b0300 	andseq	r0, fp, #0, 6
    6ca8:	0000007f 	andeq	r0, r0, pc, ror r0
    6cac:	0deb0b1c 	stcleq	11, cr0, [fp, #112]!	; 0x70
    6cb0:	1c030000 	stcne	0, cr0, [r3], {-0}
    6cb4:	00004c02 	andeq	r4, r0, r2, lsl #24
    6cb8:	bc0b1e00 	stclt	14, cr1, [fp], {-0}
    6cbc:	03000005 	movweq	r0, #5
    6cc0:	007f021d 	rsbseq	r0, pc, sp, lsl r2	; <UNPREDICTABLE>
    6cc4:	0b200000 	bleq	806ccc <__Stack_Size+0x8068cc>
    6cc8:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    6ccc:	4c021e03 	stcmi	14, cr1, [r2], {3}
    6cd0:	22000000 	andcs	r0, r0, #0
    6cd4:	544e430a 	strbpl	r4, [lr], #-778	; 0x30a
    6cd8:	021f0300 	andseq	r0, pc, #0, 6
    6cdc:	0000007f 	andeq	r0, r0, pc, ror r0
    6ce0:	09ba0b24 	ldmibeq	sl!, {r2, r5, r8, r9, fp}
    6ce4:	20030000 	andcs	r0, r3, r0
    6ce8:	00004c02 	andeq	r4, r0, r2, lsl #24
    6cec:	500a2600 	andpl	r2, sl, r0, lsl #12
    6cf0:	03004353 	movweq	r4, #851	; 0x353
    6cf4:	007f0221 	rsbseq	r0, pc, r1, lsr #4
    6cf8:	0b280000 	bleq	a06d00 <__Stack_Size+0xa06900>
    6cfc:	00000bf1 	strdeq	r0, [r0], -r1
    6d00:	4c022203 	sfmmi	f2, 4, [r2], {3}
    6d04:	2a000000 	bcs	6d0c <__Stack_Size+0x690c>
    6d08:	5252410a 	subspl	r4, r2, #-2147483646	; 0x80000002
    6d0c:	02230300 	eoreq	r0, r3, #0, 6
    6d10:	0000007f 	andeq	r0, r0, pc, ror r0
    6d14:	0bfc0b2c 	bleq	fff099cc <SCS_BASE+0x1fefb9cc>
    6d18:	24030000 	strcs	r0, [r3], #-0
    6d1c:	00004c02 	andeq	r4, r0, r2, lsl #24
    6d20:	520a2e00 	andpl	r2, sl, #0, 28
    6d24:	03005243 	movweq	r5, #579	; 0x243
    6d28:	007f0225 	rsbseq	r0, pc, r5, lsr #4
    6d2c:	0b300000 	bleq	c06d34 <__Stack_Size+0xc06934>
    6d30:	00000c07 	andeq	r0, r0, r7, lsl #24
    6d34:	4c022603 	stcmi	6, cr2, [r2], {3}
    6d38:	32000000 	andcc	r0, r0, #0
    6d3c:	00038b0b 	andeq	r8, r3, fp, lsl #22
    6d40:	02270300 	eoreq	r0, r7, #0, 6
    6d44:	0000007f 	andeq	r0, r0, pc, ror r0
    6d48:	0c120b34 	ldceq	11, cr0, [r2], {52}	; 0x34
    6d4c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    6d50:	00004c02 	andeq	r4, r0, r2, lsl #24
    6d54:	900b3600 	andls	r3, fp, r0, lsl #12
    6d58:	03000003 	movweq	r0, #3
    6d5c:	007f0229 	rsbseq	r0, pc, r9, lsr #4
    6d60:	0b380000 	bleq	e06d68 <__Stack_Size+0xe06968>
    6d64:	00000c1d 	andeq	r0, r0, sp, lsl ip
    6d68:	4c022a03 	stcmi	10, cr2, [r2], {3}
    6d6c:	3a000000 	bcc	6d74 <__Stack_Size+0x6974>
    6d70:	0003950b 	andeq	r9, r3, fp, lsl #10
    6d74:	022b0300 	eoreq	r0, fp, #0, 6
    6d78:	0000007f 	andeq	r0, r0, pc, ror r0
    6d7c:	0c280b3c 	stceq	11, cr0, [r8], #-240	; 0xffffff10
    6d80:	2c030000 	stccs	0, cr0, [r3], {-0}
    6d84:	00004c02 	andeq	r4, r0, r2, lsl #24
    6d88:	9a0b3e00 	bls	2d6590 <__Stack_Size+0x2d6190>
    6d8c:	03000003 	movweq	r0, #3
    6d90:	007f022d 	rsbseq	r0, pc, sp, lsr #4
    6d94:	0b400000 	bleq	1006d9c <__Stack_Size+0x100699c>
    6d98:	00000c33 	andeq	r0, r0, r3, lsr ip
    6d9c:	4c022e03 	stcmi	14, cr2, [r2], {3}
    6da0:	42000000 	andmi	r0, r0, #0
    6da4:	00033c0b 	andeq	r3, r3, fp, lsl #24
    6da8:	022f0300 	eoreq	r0, pc, #0, 6
    6dac:	0000007f 	andeq	r0, r0, pc, ror r0
    6db0:	0c3e0b44 	ldceq	11, cr0, [lr], #-272	; 0xfffffef0
    6db4:	30030000 	andcc	r0, r3, r0
    6db8:	00004c02 	andeq	r4, r0, r2, lsl #24
    6dbc:	440a4600 	strmi	r4, [sl], #-1536	; 0x600
    6dc0:	03005243 	movweq	r5, #579	; 0x243
    6dc4:	007f0231 	rsbseq	r0, pc, r1, lsr r2	; <UNPREDICTABLE>
    6dc8:	0b480000 	bleq	1206dd0 <__Stack_Size+0x12069d0>
    6dcc:	00000c49 	andeq	r0, r0, r9, asr #24
    6dd0:	4c023203 	sfmmi	f3, 4, [r2], {3}
    6dd4:	4a000000 	bmi	6ddc <__Stack_Size+0x69dc>
    6dd8:	0009eb0b 	andeq	lr, r9, fp, lsl #22
    6ddc:	02330300 	eorseq	r0, r3, #0, 6
    6de0:	0000007f 	andeq	r0, r0, pc, ror r0
    6de4:	0c540b4c 	mrrceq	11, 4, r0, r4, cr12
    6de8:	34030000 	strcc	r0, [r3], #-0
    6dec:	00004c02 	andeq	r4, r0, r2, lsl #24
    6df0:	0c004e00 	stceq	14, cr4, [r0], {-0}
    6df4:	000002d3 	ldrdeq	r0, [r0], -r3
    6df8:	e1023503 	tst	r2, r3, lsl #10
    6dfc:	0d000000 	stceq	0, cr0, [r0, #-0]
    6e00:	431b040a 	tstmi	fp, #167772160	; 0xa000000
    6e04:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6e08:	00000068 	andeq	r0, r0, r8, rrx
    6e0c:	004c1d04 	subeq	r1, ip, r4, lsl #26
    6e10:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6e14:	00000645 	andeq	r0, r0, r5, asr #12
    6e18:	004c1e04 	subeq	r1, ip, r4, lsl #28
    6e1c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6e20:	000007d2 	ldrdeq	r0, [r0], -r2
    6e24:	004c1f04 	subeq	r1, ip, r4, lsl #30
    6e28:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6e2c:	00000308 	andeq	r0, r0, r8, lsl #6
    6e30:	004c2004 	subeq	r2, ip, r4
    6e34:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    6e38:	0000056b 	andeq	r0, r0, fp, ror #10
    6e3c:	005e2104 	subseq	r2, lr, r4, lsl #2
    6e40:	00080000 	andeq	r0, r8, r0
    6e44:	000ce204 	andeq	lr, ip, r4, lsl #4
    6e48:	fe220400 	cdp2	4, 2, cr0, cr2, cr0, {0}
    6e4c:	0d000002 	stceq	0, cr0, [r0, #-8]
    6e50:	b7250410 			; <UNDEFINED> instruction: 0xb7250410
    6e54:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6e58:	00000922 	andeq	r0, r0, r2, lsr #18
    6e5c:	004c2704 	subeq	r2, ip, r4, lsl #14
    6e60:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6e64:	0000031a 	andeq	r0, r0, sl, lsl r3
    6e68:	004c2804 	subeq	r2, ip, r4, lsl #16
    6e6c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6e70:	00000ac8 	andeq	r0, r0, r8, asr #21
    6e74:	004c2904 	subeq	r2, ip, r4, lsl #18
    6e78:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6e7c:	000002ef 	andeq	r0, r0, pc, ror #5
    6e80:	004c2a04 	subeq	r2, ip, r4, lsl #20
    6e84:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    6e88:	000000c7 	andeq	r0, r0, r7, asr #1
    6e8c:	004c2b04 	subeq	r2, ip, r4, lsl #22
    6e90:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    6e94:	00000588 	andeq	r0, r0, r8, lsl #11
    6e98:	004c2c04 	subeq	r2, ip, r4, lsl #24
    6e9c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    6ea0:	00000212 	andeq	r0, r0, r2, lsl r2
    6ea4:	004c2d04 	subeq	r2, ip, r4, lsl #26
    6ea8:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    6eac:	00000740 	andeq	r0, r0, r0, asr #14
    6eb0:	004c2e04 	subeq	r2, ip, r4, lsl #28
    6eb4:	000e0000 	andeq	r0, lr, r0
    6eb8:	00009404 	andeq	r9, r0, r4, lsl #8
    6ebc:	4e2f0400 	cdpmi	4, 2, cr0, cr15, cr0, {0}
    6ec0:	0d000003 	stceq	0, cr0, [r0, #-12]
    6ec4:	0732040a 	ldreq	r0, [r2, -sl, lsl #8]!
    6ec8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    6ecc:	00002a8c 	andeq	r2, r0, ip, lsl #21
    6ed0:	004c3404 	subeq	r3, ip, r4, lsl #8
    6ed4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6ed8:	00002b73 	andeq	r2, r0, r3, ror fp
    6edc:	004c3504 	subeq	r3, ip, r4, lsl #10
    6ee0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6ee4:	00002b17 	andeq	r2, r0, r7, lsl fp
    6ee8:	004c3604 	subeq	r3, ip, r4, lsl #12
    6eec:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6ef0:	00002861 	andeq	r2, r0, r1, ror #16
    6ef4:	004c3704 	subeq	r3, ip, r4, lsl #14
    6ef8:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    6efc:	00002d08 	andeq	r2, r0, r8, lsl #26
    6f00:	004c3804 	subeq	r3, ip, r4, lsl #16
    6f04:	00080000 	andeq	r0, r8, r0
    6f08:	00255e04 	eoreq	r5, r5, r4, lsl #28
    6f0c:	c2390400 	eorsgt	r0, r9, #0, 8
    6f10:	0d000003 	stceq	0, cr0, [r0, #-12]
    6f14:	6f3c040e 	svcvs	0x003c040e
    6f18:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    6f1c:	00002b65 	andeq	r2, r0, r5, ror #22
    6f20:	004c3e04 	subeq	r3, ip, r4, lsl #28
    6f24:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6f28:	0000267e 	andeq	r2, r0, lr, ror r6
    6f2c:	004c3f04 	subeq	r3, ip, r4, lsl #30
    6f30:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    6f34:	00002834 	andeq	r2, r0, r4, lsr r8
    6f38:	004c4004 	subeq	r4, ip, r4
    6f3c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    6f40:	00002c46 	andeq	r2, r0, r6, asr #24
    6f44:	004c4104 	subeq	r4, ip, r4, lsl #2
    6f48:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    6f4c:	0000292a 	andeq	r2, r0, sl, lsr #18
    6f50:	004c4204 	subeq	r4, ip, r4, lsl #4
    6f54:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    6f58:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    6f5c:	004c4304 	subeq	r4, ip, r4, lsl #6
    6f60:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    6f64:	00002bf6 	strdeq	r2, [r0], -r6
    6f68:	004c4404 	subeq	r4, ip, r4, lsl #8
    6f6c:	000c0000 	andeq	r0, ip, r0
    6f70:	0028b704 	eoreq	fp, r8, r4, lsl #14
    6f74:	12450400 	subne	r0, r5, #0, 8
    6f78:	0f000004 	svceq	0x00000004
    6f7c:	00002d3d 	andeq	r2, r0, sp, lsr sp
    6f80:	01051801 	tsteq	r5, r1, lsl #16
    6f84:	000004ac 	andeq	r0, r0, ip, lsr #9
    6f88:	00263610 	eoreq	r3, r6, r0, lsl r6
    6f8c:	05180100 	ldreq	r0, [r8, #-256]	; 0x100
    6f90:	000004ac 	andeq	r0, r0, ip, lsr #9
    6f94:	00257010 	eoreq	r7, r5, r0, lsl r0
    6f98:	05180100 	ldreq	r0, [r8, #-256]	; 0x100
    6f9c:	0000004c 	andeq	r0, r0, ip, asr #32
    6fa0:	00261c11 	eoreq	r1, r6, r1, lsl ip
    6fa4:	051a0100 	ldreq	r0, [sl, #-256]	; 0x100
    6fa8:	0000004c 	andeq	r0, r0, ip, asr #32
    6fac:	f2041200 	vhsub.s8	d1, d4, d0
    6fb0:	13000002 	movwne	r0, #2
    6fb4:	000026b7 			; <UNDEFINED> instruction: 0x000026b7
    6fb8:	800bed01 	andhi	lr, fp, r1, lsl #26
    6fbc:	32080051 	andcc	r0, r8, #81	; 0x51
    6fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    6fc4:	0005279c 	muleq	r5, ip, r7
    6fc8:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    6fcc:	ed010000 	stc	0, cr0, [r1, #-0]
    6fd0:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    6fd4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6fd8:	00002b73 	andeq	r2, r0, r3, ror fp
    6fdc:	4c0bed01 	stcmi	13, cr14, [fp], {1}
    6fe0:	c4000000 	strgt	r0, [r0], #-0
    6fe4:	15000033 	strne	r0, [r0, #-51]	; 0x33
    6fe8:	00002b17 	andeq	r2, r0, r7, lsl fp
    6fec:	4c0bed01 	stcmi	13, cr14, [fp], {1}
    6ff0:	e5000000 	str	r0, [r0, #-0]
    6ff4:	15000033 	strne	r0, [r0, #-51]	; 0x33
    6ff8:	00002d08 	andeq	r2, r0, r8, lsl #26
    6ffc:	4c0bee01 	stcmi	14, cr14, [fp], {1}
    7000:	06000000 	streq	r0, [r0], -r0
    7004:	16000034 			; <UNDEFINED> instruction: 0x16000034
    7008:	00002a7a 	andeq	r2, r0, sl, ror sl
    700c:	4c0bf001 	stcmi	0, cr15, [fp], {1}
    7010:	27000000 	strcs	r0, [r0, -r0]
    7014:	16000034 			; <UNDEFINED> instruction: 0x16000034
    7018:	000027a3 	andeq	r2, r0, r3, lsr #15
    701c:	4c0bf001 	stcmi	0, cr15, [fp], {1}
    7020:	62000000 	andvs	r0, r0, #0
    7024:	00000034 	andeq	r0, r0, r4, lsr r0
    7028:	00254013 	eoreq	r4, r5, r3, lsl r0
    702c:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    7030:	080051b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip, lr}
    7034:	0000003a 	andeq	r0, r0, sl, lsr r0
    7038:	05ac9c01 	streq	r9, [ip, #3073]!	; 0xc01
    703c:	36140000 	ldrcc	r0, [r4], -r0
    7040:	01000026 	tsteq	r0, r6, lsr #32
    7044:	04ac0c1b 	strteq	r0, [ip], #3099	; 0xc1b
    7048:	50010000 	andpl	r0, r1, r0
    704c:	002b7315 	eoreq	r7, fp, r5, lsl r3
    7050:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    7054:	0000004c 	andeq	r0, r0, ip, asr #32
    7058:	0000348c 	andeq	r3, r0, ip, lsl #9
    705c:	002b1715 	eoreq	r1, fp, r5, lsl r7
    7060:	0c1b0100 	ldfeqs	f0, [fp], {-0}
    7064:	0000004c 	andeq	r0, r0, ip, asr #32
    7068:	000034ad 	andeq	r3, r0, sp, lsr #9
    706c:	002d0815 	eoreq	r0, sp, r5, lsl r8
    7070:	0c1c0100 	ldfeqs	f0, [ip], {-0}
    7074:	0000004c 	andeq	r0, r0, ip, asr #32
    7078:	000034ce 	andeq	r3, r0, lr, asr #9
    707c:	002a7a16 	eoreq	r7, sl, r6, lsl sl
    7080:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    7084:	0000004c 	andeq	r0, r0, ip, asr #32
    7088:	000034ef 	andeq	r3, r0, pc, ror #9
    708c:	0027a316 	eoreq	sl, r7, r6, lsl r3
    7090:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    7094:	0000004c 	andeq	r0, r0, ip, asr #32
    7098:	00003519 	andeq	r3, r0, r9, lsl r5
    709c:	706d7417 	rsbvc	r7, sp, r7, lsl r4
    70a0:	0c1e0100 	ldfeqs	f0, [lr], {-0}
    70a4:	0000004c 	andeq	r0, r0, ip, asr #32
    70a8:	00003543 	andeq	r3, r0, r3, asr #10
    70ac:	0b881800 	bleq	fe20d0b4 <SCS_BASE+0x1e1ff0b4>
    70b0:	86010000 	strhi	r0, [r1], -r0
    70b4:	080051ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, lr}
    70b8:	000000c8 	andeq	r0, r0, r8, asr #1
    70bc:	06b89c01 	ldrteq	r9, [r8], r1, lsl #24
    70c0:	36190000 	ldrcc	r0, [r9], -r0
    70c4:	01000026 	tsteq	r0, r6, lsr #32
    70c8:	0004ac86 	andeq	sl, r4, r6, lsl #25
    70cc:	00357600 	eorseq	r7, r5, r0, lsl #12
    70d0:	52141a00 	andspl	r1, r4, #0, 20
    70d4:	1f170800 	svcne	0x00170800
    70d8:	05e80000 	strbeq	r0, [r8, #0]!
    70dc:	011b0000 	tsteq	fp, r0
    70e0:	1b310151 	blne	c4762c <__Stack_Size+0xc4722c>
    70e4:	31015001 	tstcc	r1, r1
    70e8:	52441a00 	subpl	r1, r4, #0, 20
    70ec:	1f2e0800 	svcne	0x002e0800
    70f0:	06020000 	streq	r0, [r2], -r0
    70f4:	011b0000 	tsteq	fp, r0
    70f8:	1b310151 	blne	c47644 <__Stack_Size+0xc47244>
    70fc:	0a035001 	beq	db108 <__Stack_Size+0xdad08>
    7100:	1a000800 	bne	9108 <__Stack_Size+0x8d08>
    7104:	08005252 	stmdaeq	r0, {r1, r4, r6, r9, ip, lr}
    7108:	00001f17 	andeq	r1, r0, r7, lsl pc
    710c:	0000061a 	andeq	r0, r0, sl, lsl r6
    7110:	0151011b 	cmpeq	r1, fp, lsl r1
    7114:	50011b31 	andpl	r1, r1, r1, lsr fp
    7118:	1c003201 	sfmne	f3, 4, [r0], {1}
    711c:	0800525e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, ip, lr}
    7120:	00001f17 	andeq	r1, r0, r7, lsl pc
    7124:	0000062d 	andeq	r0, r0, sp, lsr #12
    7128:	0151011b 	cmpeq	r1, fp, lsl r1
    712c:	661a0030 			; <UNDEFINED> instruction: 0x661a0030
    7130:	17080052 	smlsdne	r8, r2, r0, r0
    7134:	4500001f 	strmi	r0, [r0, #-31]
    7138:	1b000006 	blne	7158 <__Stack_Size+0x6d58>
    713c:	31015101 	tstcc	r1, r1, lsl #2
    7140:	0150011b 	cmpeq	r0, fp, lsl r1
    7144:	721a0034 	andsvc	r0, sl, #52	; 0x34
    7148:	17080052 	smlsdne	r8, r2, r0, r0
    714c:	5d00001f 	stcpl	0, cr0, [r0, #-124]	; 0xffffff84
    7150:	1b000006 	blne	7170 <__Stack_Size+0x6d70>
    7154:	31015101 	tstcc	r1, r1, lsl #2
    7158:	0150011b 	cmpeq	r0, fp, lsl r1
    715c:	7e1a0038 	mrcvc	0, 0, r0, cr10, cr8, {1}
    7160:	17080052 	smlsdne	r8, r2, r0, r0
    7164:	7500001f 	strvc	r0, [r0, #-31]
    7168:	1b000006 	blne	7188 <__Stack_Size+0x6d88>
    716c:	31015101 	tstcc	r1, r1, lsl #2
    7170:	0150011b 	cmpeq	r0, fp, lsl r1
    7174:	8a1a0040 	bhi	68727c <__Stack_Size+0x686e7c>
    7178:	17080052 	smlsdne	r8, r2, r0, r0
    717c:	8e00001f 	mcrhi	0, 0, r0, cr0, cr15, {0}
    7180:	1b000006 	blne	71a0 <__Stack_Size+0x6da0>
    7184:	31015101 	tstcc	r1, r1, lsl #2
    7188:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    718c:	1a002008 	bne	f1b4 <__Stack_Size+0xedb4>
    7190:	08005298 	stmdaeq	r0, {r3, r4, r7, r9, ip, lr}
    7194:	00001f2e 	andeq	r1, r0, lr, lsr #30
    7198:	000006a8 	andeq	r0, r0, r8, lsr #13
    719c:	0151011b 	cmpeq	r1, fp, lsl r1
    71a0:	50011b31 	andpl	r1, r1, r1, lsr fp
    71a4:	20000a03 	andcs	r0, r0, r3, lsl #20
    71a8:	52a61d00 	adcpl	r1, r6, #0, 26
    71ac:	1f2e0800 	svcne	0x002e0800
    71b0:	011b0000 	tsteq	fp, r0
    71b4:	00300151 	eorseq	r0, r0, r1, asr r1
    71b8:	07611800 	strbeq	r1, [r1, -r0, lsl #16]!
    71bc:	c6010000 	strgt	r0, [r1], -r0
    71c0:	080052b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, lr}
    71c4:	0000003c 	andeq	r0, r0, ip, lsr r0
    71c8:	06e89c01 	strbteq	r9, [r8], r1, lsl #24
    71cc:	361e0000 	ldrcc	r0, [lr], -r0
    71d0:	01000026 	tsteq	r0, r6, lsr #32
    71d4:	0004acc6 	andeq	sl, r4, r6, asr #25
    71d8:	1e500100 	rdfnes	f0, f0, f0
    71dc:	000027fc 	strdeq	r2, [r0], -ip
    71e0:	06e8c601 	strbteq	ip, [r8], r1, lsl #12
    71e4:	51010000 	mrspl	r0, (UNDEF: 1)
    71e8:	43041200 	movwmi	r1, #16896	; 0x4200
    71ec:	18000003 	stmdane	r0, {r0, r1}
    71f0:	000001c8 	andeq	r0, r0, r8, asr #3
    71f4:	52f0ed01 	rscspl	lr, r0, #1, 26	; 0x40
    71f8:	00740800 	rsbseq	r0, r4, r0, lsl #16
    71fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7200:	0000074b 	andeq	r0, r0, fp, asr #14
    7204:	0026361e 	eoreq	r3, r6, lr, lsl r6
    7208:	aced0100 	stfgee	f0, [sp]
    720c:	01000004 	tsteq	r0, r4
    7210:	29f71e50 	ldmibcs	r7!, {r4, r6, r9, sl, fp, ip}^
    7214:	ed010000 	stc	0, cr0, [r1, #-0]
    7218:	0000074b 	andeq	r0, r0, fp, asr #14
    721c:	221f5101 	andscs	r5, pc, #1073741824	; 0x40000000
    7220:	01000028 	tsteq	r0, r8, lsr #32
    7224:	00004cef 	andeq	r4, r0, pc, ror #25
    7228:	00365100 	eorseq	r5, r6, r0, lsl #2
    722c:	27a31f00 	strcs	r1, [r3, r0, lsl #30]!
    7230:	ef010000 	svc	0x00010000
    7234:	0000004c 	andeq	r0, r0, ip, asr #32
    7238:	00003670 	andeq	r3, r0, r0, ror r6
    723c:	002cdb1f 	eoreq	sp, ip, pc, lsl fp
    7240:	4cef0100 	stfmie	f0, [pc]	; 7248 <__Stack_Size+0x6e48>
    7244:	9a000000 	bls	724c <__Stack_Size+0x6e4c>
    7248:	00000036 	andeq	r0, r0, r6, lsr r0
    724c:	03b70412 			; <UNDEFINED> instruction: 0x03b70412
    7250:	93200000 	nopls	{0}	; <UNPREDICTABLE>
    7254:	01000026 	tsteq	r0, r6, lsr #32
    7258:	53640148 	cmnpl	r4, #72, 2
    725c:	00880800 	addeq	r0, r8, r0, lsl #16
    7260:	9c010000 	stcls	0, cr0, [r1], {-0}
    7264:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    7268:	00263614 	eoreq	r3, r6, r4, lsl r6
    726c:	01480100 	mrseq	r0, (UNDEF: 88)
    7270:	000004ac 	andeq	r0, r0, ip, lsr #9
    7274:	f7145001 			; <UNDEFINED> instruction: 0xf7145001
    7278:	01000029 	tsteq	r0, r9, lsr #32
    727c:	074b0148 	strbeq	r0, [fp, -r8, asr #2]
    7280:	51010000 	mrspl	r0, (UNDEF: 1)
    7284:	00282216 	eoreq	r2, r8, r6, lsl r2
    7288:	014a0100 	mrseq	r0, (UNDEF: 90)
    728c:	0000004c 	andeq	r0, r0, ip, asr #32
    7290:	000036d6 	ldrdeq	r3, [r0], -r6
    7294:	0027a316 	eoreq	sl, r7, r6, lsl r3
    7298:	014a0100 	mrseq	r0, (UNDEF: 90)
    729c:	0000004c 	andeq	r0, r0, ip, asr #32
    72a0:	000036f5 	strdeq	r3, [r0], -r5
    72a4:	002cdb16 	eoreq	sp, ip, r6, lsl fp
    72a8:	014a0100 	mrseq	r0, (UNDEF: 90)
    72ac:	0000004c 	andeq	r0, r0, ip, asr #32
    72b0:	00003756 	andeq	r3, r0, r6, asr r7
    72b4:	27132000 	ldrcs	r2, [r3, -r0]
    72b8:	a4010000 	strge	r0, [r1], #-0
    72bc:	0053ec01 	subseq	lr, r3, r1, lsl #24
    72c0:	00008408 	andeq	r8, r0, r8, lsl #8
    72c4:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    72c8:	14000008 	strne	r0, [r0], #-8
    72cc:	00002636 	andeq	r2, r0, r6, lsr r6
    72d0:	ac01a401 	cfstrsge	mvf10, [r1], {1}
    72d4:	01000004 	tsteq	r0, r4
    72d8:	29f71450 	ldmibcs	r7!, {r4, r6, sl, ip}^
    72dc:	a4010000 	strge	r0, [r1], #-0
    72e0:	00074b01 	andeq	r4, r7, r1, lsl #22
    72e4:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    72e8:	00002822 	andeq	r2, r0, r2, lsr #16
    72ec:	4c01a601 	stcmi	6, cr10, [r1], {1}
    72f0:	8b000000 	blhi	72f8 <__Stack_Size+0x6ef8>
    72f4:	16000037 			; <UNDEFINED> instruction: 0x16000037
    72f8:	000027a3 	andeq	r2, r0, r3, lsr #15
    72fc:	4c01a601 	stcmi	6, cr10, [r1], {1}
    7300:	aa000000 	bge	7308 <__Stack_Size+0x6f08>
    7304:	16000037 			; <UNDEFINED> instruction: 0x16000037
    7308:	00002cdb 	ldrdeq	r2, [r0], -fp
    730c:	4c01a601 	stcmi	6, cr10, [r1], {1}
    7310:	0b000000 	bleq	7318 <__Stack_Size+0x6f18>
    7314:	00000038 	andeq	r0, r0, r8, lsr r0
    7318:	0029c820 	eoreq	ip, r9, r0, lsr #16
    731c:	02000100 	andeq	r0, r0, #0, 2
    7320:	08005470 	stmdaeq	r0, {r4, r5, r6, sl, ip, lr}
    7324:	00000068 	andeq	r0, r0, r8, rrx
    7328:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    732c:	36140000 	ldrcc	r0, [r4], -r0
    7330:	01000026 	tsteq	r0, r6, lsr #32
    7334:	04ac0200 	strteq	r0, [ip], #512	; 0x200
    7338:	50010000 	andpl	r0, r1, r0
    733c:	0029f715 	eoreq	pc, r9, r5, lsl r7	; <UNPREDICTABLE>
    7340:	02000100 	andeq	r0, r0, #0, 2
    7344:	0000074b 	andeq	r0, r0, fp, asr #14
    7348:	00003840 	andeq	r3, r0, r0, asr #16
    734c:	00282216 	eoreq	r2, r8, r6, lsl r2
    7350:	02020100 	andeq	r0, r2, #0, 2
    7354:	0000004c 	andeq	r0, r0, ip, asr #32
    7358:	00003861 	andeq	r3, r0, r1, ror #16
    735c:	0027a316 	eoreq	sl, r7, r6, lsl r3
    7360:	02020100 	andeq	r0, r2, #0, 2
    7364:	0000004c 	andeq	r0, r0, ip, asr #32
    7368:	00003880 	andeq	r3, r0, r0, lsl #17
    736c:	002cdb16 	eoreq	sp, ip, r6, lsl fp
    7370:	02020100 	andeq	r0, r2, #0, 2
    7374:	0000004c 	andeq	r0, r0, ip, asr #32
    7378:	000038aa 	andeq	r3, r0, sl, lsr #17
    737c:	2ba82000 	blcs	fea0f384 <SCS_BASE+0x1ea01384>
    7380:	d1010000 	mrsle	r0, (UNDEF: 1)
    7384:	0054d802 	subseq	sp, r4, r2, lsl #16
    7388:	00002208 	andeq	r2, r0, r8, lsl #4
    738c:	af9c0100 	svcge	0x009c0100
    7390:	14000008 	strne	r0, [r0], #-8
    7394:	00002636 	andeq	r2, r0, r6, lsr r6
    7398:	ac02d101 	stfged	f5, [r2], {1}
    739c:	01000004 	tsteq	r0, r4
    73a0:	27901450 			; <UNDEFINED> instruction: 0x27901450
    73a4:	d1010000 	mrsle	r0, (UNDEF: 1)
    73a8:	0008af02 	andeq	sl, r8, r2, lsl #30
    73ac:	00510100 	subseq	r0, r1, r0, lsl #2
    73b0:	046f0412 	strbteq	r0, [pc], #-1042	; 73b8 <__Stack_Size+0x6fb8>
    73b4:	f9200000 			; <UNDEFINED> instruction: 0xf9200000
    73b8:	0100000a 	tsteq	r0, sl
    73bc:	54fa02ee 	ldrbtpl	r0, [sl], #750	; 0x2ee
    73c0:	00120800 	andseq	r0, r2, r0, lsl #16
    73c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    73c8:	000008da 	ldrdeq	r0, [r0], -sl
    73cc:	0027fc14 	eoreq	pc, r7, r4, lsl ip	; <UNPREDICTABLE>
    73d0:	02ee0100 	rsceq	r0, lr, #0, 2
    73d4:	000006e8 	andeq	r0, r0, r8, ror #13
    73d8:	20005001 	andcs	r5, r0, r1
    73dc:	00000cd1 	ldrdeq	r0, [r0], -r1
    73e0:	0c030001 	stceq	0, cr0, [r3], {1}
    73e4:	14080055 	strne	r0, [r8], #-85	; 0x55
    73e8:	01000000 	mrseq	r0, (UNDEF: 0)
    73ec:	0008ff9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
    73f0:	29f71400 	ldmibcs	r7!, {sl, ip}^
    73f4:	00010000 	andeq	r0, r1, r0
    73f8:	00074b03 	andeq	r4, r7, r3, lsl #22
    73fc:	00500100 	subseq	r0, r0, r0, lsl #2
    7400:	0024ae20 	eoreq	sl, r4, r0, lsr #28
    7404:	03150100 	tsteq	r5, #0, 2
    7408:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
    740c:	00000010 	andeq	r0, r0, r0, lsl r0
    7410:	09249c01 	stmdbeq	r4!, {r0, sl, fp, ip, pc}
    7414:	76140000 	ldrvc	r0, [r4], -r0
    7418:	01000029 	tsteq	r0, r9, lsr #32
    741c:	09240315 	stmdbeq	r4!, {r0, r2, r4, r8, r9}
    7420:	50010000 	andpl	r0, r1, r0
    7424:	07041200 	streq	r1, [r4, -r0, lsl #4]
    7428:	20000004 	andcs	r0, r0, r4
    742c:	00002c80 	andeq	r2, r0, r0, lsl #25
    7430:	30032701 	andcc	r2, r3, r1, lsl #14
    7434:	12080055 	andne	r0, r8, #85	; 0x55
    7438:	01000000 	mrseq	r0, (UNDEF: 0)
    743c:	00094f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    7440:	27901400 	ldrcs	r1, [r0, r0, lsl #8]
    7444:	27010000 	strcs	r0, [r1, -r0]
    7448:	0008af03 	andeq	sl, r8, r3, lsl #30
    744c:	00500100 	subseq	r0, r0, r0, lsl #2
    7450:	000d9320 	andeq	r9, sp, r0, lsr #6
    7454:	033c0100 	teqeq	ip, #0, 2
    7458:	08005542 	stmdaeq	r0, {r1, r6, r8, sl, ip, lr}
    745c:	00000018 	andeq	r0, r0, r8, lsl r0
    7460:	09829c01 	stmibeq	r2, {r0, sl, fp, ip, pc}
    7464:	36140000 	ldrcc	r0, [r4], -r0
    7468:	01000026 	tsteq	r0, r6, lsr #32
    746c:	04ac033c 	strteq	r0, [ip], #828	; 0x33c
    7470:	50010000 	andpl	r0, r1, r0
    7474:	00169114 	andseq	r9, r6, r4, lsl r1
    7478:	033c0100 	teqeq	ip, #0, 2
    747c:	000000cf 	andeq	r0, r0, pc, asr #1
    7480:	20005101 	andcs	r5, r0, r1, lsl #2
    7484:	00002b82 	andeq	r2, r0, r2, lsl #23
    7488:	5a035701 	bpl	dd094 <__Stack_Size+0xdcc94>
    748c:	1c080055 	stcne	0, cr0, [r8], {85}	; 0x55
    7490:	01000000 	mrseq	r0, (UNDEF: 0)
    7494:	0009b59c 	muleq	r9, ip, r5
    7498:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    749c:	57010000 	strpl	r0, [r1, -r0]
    74a0:	0004ac03 	andeq	sl, r4, r3, lsl #24
    74a4:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    74a8:	00001691 	muleq	r0, r1, r6
    74ac:	cf035701 	svcgt	0x00035701
    74b0:	01000000 	mrseq	r0, (UNDEF: 0)
    74b4:	5f200051 	svcpl	0x00200051
    74b8:	0100000a 	tsteq	r0, sl
    74bc:	5576037d 	ldrbpl	r0, [r6, #-893]!	; 0x37d
    74c0:	00120800 	andseq	r0, r2, r0, lsl #16
    74c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    74c8:	000009f8 	strdeq	r0, [r0], -r8
    74cc:	00263614 	eoreq	r3, r6, r4, lsl r6
    74d0:	037d0100 	cmneq	sp, #0, 2
    74d4:	000004ac 	andeq	r0, r0, ip, lsr #9
    74d8:	e2155001 	ands	r5, r5, #1
    74dc:	0100002c 	tsteq	r0, ip, lsr #32
    74e0:	004c037d 	subeq	r0, ip, sp, ror r3
    74e4:	38d40000 	ldmcc	r4, {}^	; <UNPREDICTABLE>
    74e8:	91140000 	tstls	r4, r0
    74ec:	01000016 	tsteq	r0, r6, lsl r0
    74f0:	00cf037d 	sbceq	r0, pc, sp, ror r3	; <UNPREDICTABLE>
    74f4:	52010000 	andpl	r0, r1, #0
    74f8:	28e02000 	stmiacs	r0!, {sp}^
    74fc:	a0010000 	andge	r0, r1, r0
    7500:	00558803 	subseq	r8, r5, r3, lsl #16
    7504:	00000408 	andeq	r0, r0, r8, lsl #8
    7508:	2b9c0100 	blcs	fe707910 <SCS_BASE+0x1e6f9910>
    750c:	1400000a 	strne	r0, [r0], #-10
    7510:	00002636 	andeq	r2, r0, r6, lsr r6
    7514:	ac03a001 	stcge	0, cr10, [r3], {1}
    7518:	01000004 	tsteq	r0, r4
    751c:	2a6a1450 	bcs	1a8c664 <__Stack_Size+0x1a8c264>
    7520:	a0010000 	andge	r0, r1, r0
    7524:	00004c03 	andeq	r4, r0, r3, lsl #24
    7528:	00510100 	subseq	r0, r1, r0, lsl #2
    752c:	00274b20 	eoreq	r4, r7, r0, lsr #22
    7530:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    7534:	0800558c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, lr}
    7538:	00000008 	andeq	r0, r0, r8
    753c:	0a6e9c01 	beq	1bae548 <__Stack_Size+0x1bae148>
    7540:	36140000 	ldrcc	r0, [r4], -r0
    7544:	01000026 	tsteq	r0, r6, lsr #32
    7548:	04ac03bf 	strteq	r0, [ip], #959	; 0x3bf
    754c:	50010000 	andpl	r0, r1, r0
    7550:	0028ab14 	eoreq	sl, r8, r4, lsl fp
    7554:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
    7558:	0000004c 	andeq	r0, r0, ip, asr #32
    755c:	f2155101 	vrhadd.s16	d5, d5, d1
    7560:	01000026 	tsteq	r0, r6, lsr #32
    7564:	004c03bf 	strheq	r0, [ip], #-63	; 0xffffffc1
    7568:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    756c:	20000000 	andcs	r0, r0, r0
    7570:	00002c1c 	andeq	r2, r0, ip, lsl ip
    7574:	9403dc01 	strls	sp, [r3], #-3073	; 0xc01
    7578:	12080055 	andne	r0, r8, #85	; 0x55
    757c:	01000000 	mrseq	r0, (UNDEF: 0)
    7580:	000ab19c 	muleq	sl, ip, r1
    7584:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7588:	dc010000 	stcle	0, cr0, [r1], {-0}
    758c:	0004ac03 	andeq	sl, r4, r3, lsl #24
    7590:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7594:	00002d15 	andeq	r2, r0, r5, lsl sp
    7598:	4c03dc01 	stcmi	12, cr13, [r3], {1}
    759c:	2f000000 	svccs	0x00000000
    75a0:	14000039 	strne	r0, [r0], #-57	; 0x39
    75a4:	00001691 	muleq	r0, r1, r6
    75a8:	cf03dc01 	svcgt	0x0003dc01
    75ac:	01000000 	mrseq	r0, (UNDEF: 0)
    75b0:	cf200052 	svcgt	0x00200052
    75b4:	0100002a 	tsteq	r0, sl, lsr #32
    75b8:	55a603f8 	strpl	r0, [r6, #1016]!	; 0x3f8
    75bc:	000e0800 	andeq	r0, lr, r0, lsl #16
    75c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    75c4:	00000ad6 	ldrdeq	r0, [r0], -r6
    75c8:	00263614 	eoreq	r3, r6, r4, lsl r6
    75cc:	03f80100 	mvnseq	r0, #0, 2
    75d0:	000004ac 	andeq	r0, r0, ip, lsr #9
    75d4:	20005001 	andcs	r5, r0, r1
    75d8:	0000272f 	andeq	r2, r0, pc, lsr #14
    75dc:	b4040e01 	strlt	r0, [r4], #-3585	; 0xe01
    75e0:	1a080055 	bne	20773c <__Stack_Size+0x20733c>
    75e4:	01000000 	mrseq	r0, (UNDEF: 0)
    75e8:	000b3f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    75ec:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    75f0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    75f4:	0004ac04 	andeq	sl, r4, r4, lsl #24
    75f8:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    75fc:	00002570 	andeq	r2, r0, r0, ror r5
    7600:	4c040e01 	stcmi	14, cr0, [r4], {1}
    7604:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    7608:	21000039 	tstcs	r0, r9, lsr r0
    760c:	0000047a 	andeq	r0, r0, sl, ror r4
    7610:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
    7614:	0000000e 	andeq	r0, r0, lr
    7618:	22041501 	andcs	r1, r4, #4194304	; 0x400000
    761c:	00000493 	muleq	r0, r3, r4
    7620:	00003969 	andeq	r3, r0, r9, ror #18
    7624:	00048723 	andeq	r8, r4, r3, lsr #14
    7628:	24500100 	ldrbcs	r0, [r0], #-256	; 0x100
    762c:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
    7630:	0000000e 	andeq	r0, r0, lr
    7634:	00049f25 	andeq	r9, r4, r5, lsr #30
    7638:	00398a00 	eorseq	r8, r9, r0, lsl #20
    763c:	00000000 	andeq	r0, r0, r0
    7640:	002bc720 	eoreq	ip, fp, r0, lsr #14
    7644:	042d0100 	strteq	r0, [sp], #-256	; 0x100
    7648:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
    764c:	00000034 	andeq	r0, r0, r4, lsr r0
    7650:	0bee9c01 	bleq	ffbae65c <SCS_BASE+0x1fba065c>
    7654:	36150000 	ldrcc	r0, [r5], -r0
    7658:	01000026 	tsteq	r0, r6, lsr #32
    765c:	04ac042d 	strteq	r0, [ip], #1069	; 0x42d
    7660:	39bf0000 	ldmibcc	pc!, {}	; <UNPREDICTABLE>
    7664:	34150000 	ldrcc	r0, [r5], #-0
    7668:	01000029 	tsteq	r0, r9, lsr #32
    766c:	004c042d 	subeq	r0, ip, sp, lsr #8
    7670:	39f30000 	ldmibcc	r3!, {}^	; <UNPREDICTABLE>
    7674:	73150000 	tstvc	r5, #0
    7678:	0100002b 	tsteq	r0, fp, lsr #32
    767c:	004c042e 	subeq	r0, ip, lr, lsr #8
    7680:	3a140000 	bcc	507688 <__Stack_Size+0x507288>
    7684:	0c150000 	ldceq	0, cr0, [r5], {-0}
    7688:	0100002d 	tsteq	r0, sp, lsr #32
    768c:	004c042e 	subeq	r0, ip, lr, lsr #8
    7690:	3a350000 	bcc	d47698 <__Stack_Size+0xd47298>
    7694:	7a260000 	bvc	98769c <__Stack_Size+0x98729c>
    7698:	e8000004 	stmda	r0, {r2}
    769c:	0e080055 	mcreq	0, 0, r0, cr8, cr5, {2}
    76a0:	01000000 	mrseq	r0, (UNDEF: 0)
    76a4:	0bcb0441 	bleq	ff2c87b0 <SCS_BASE+0x1f2ba7b0>
    76a8:	93230000 			; <UNDEFINED> instruction: 0x93230000
    76ac:	01000004 	tsteq	r0, r4
    76b0:	04872355 	streq	r2, [r7], #853	; 0x355
    76b4:	54010000 	strpl	r0, [r1], #-0
    76b8:	0055e824 	subseq	lr, r5, r4, lsr #16
    76bc:	00000e08 	andeq	r0, r0, r8, lsl #28
    76c0:	049f2500 	ldreq	r2, [pc], #1280	; 76c8 <__Stack_Size+0x72c8>
    76c4:	3a6f0000 	bcc	1bc76cc <__Stack_Size+0x1bc72cc>
    76c8:	00000000 	andeq	r0, r0, r0
    76cc:	0055e21a 	subseq	lr, r5, sl, lsl r2
    76d0:	00052708 	andeq	r2, r5, r8, lsl #14
    76d4:	000be400 	andeq	lr, fp, r0, lsl #8
    76d8:	52011b00 	andpl	r1, r1, #0, 22
    76dc:	011b3101 	tsteq	fp, r1, lsl #2
    76e0:	00740250 	rsbseq	r0, r4, r0, asr r2
    76e4:	55e82700 	strbpl	r2, [r8, #1792]!	; 0x700
    76e8:	04b20800 	ldrteq	r0, [r2], #2048	; 0x800
    76ec:	20000000 	andcs	r0, r0, r0
    76f0:	00002a3b 	andeq	r2, r0, fp, lsr sl
    76f4:	0204b101 	andeq	fp, r4, #1073741824	; 0x40000000
    76f8:	14080056 	strne	r0, [r8], #-86	; 0x56
    76fc:	01000000 	mrseq	r0, (UNDEF: 0)
    7700:	000c519c 	muleq	ip, ip, r1
    7704:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7708:	b1010000 	mrslt	r0, (UNDEF: 1)
    770c:	0004ac04 	andeq	sl, r4, r4, lsl #24
    7710:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7714:	00002587 	andeq	r2, r0, r7, lsl #11
    7718:	4c04b101 	stfmid	f3, [r4], {1}
    771c:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    7720:	1400003a 	strne	r0, [r0], #-58	; 0x3a
    7724:	00002cb9 			; <UNDEFINED> instruction: 0x00002cb9
    7728:	4c04b101 	stfmid	f3, [r4], {1}
    772c:	01000000 	mrseq	r0, (UNDEF: 0)
    7730:	2a081552 	bcs	20cc80 <__Stack_Size+0x20c880>
    7734:	b2010000 	andlt	r0, r1, #0
    7738:	00004c04 	andeq	r4, r0, r4, lsl #24
    773c:	003aba00 	eorseq	fp, sl, r0, lsl #20
    7740:	261c1600 	ldrcs	r1, [ip], -r0, lsl #12
    7744:	b4010000 	strlt	r0, [r1], #-0
    7748:	00004c04 	andeq	r4, r0, r4, lsl #24
    774c:	003adb00 	eorseq	sp, sl, r0, lsl #22
    7750:	27200000 	strcs	r0, [r0, -r0]!
    7754:	0100002b 	tsteq	r0, fp, lsr #32
    7758:	5616045b 			; <UNDEFINED> instruction: 0x5616045b
    775c:	001a0800 	andseq	r0, sl, r0, lsl #16
    7760:	9c010000 	stcls	0, cr0, [r1], {-0}
    7764:	00000cc8 	andeq	r0, r0, r8, asr #25
    7768:	00263615 	eoreq	r3, r6, r5, lsl r6
    776c:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    7770:	000004ac 	andeq	r0, r0, ip, lsr #9
    7774:	00003b0a 	andeq	r3, r0, sl, lsl #22
    7778:	00258715 	eoreq	r8, r5, r5, lsl r7
    777c:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    7780:	0000004c 	andeq	r0, r0, ip, asr #32
    7784:	00003b28 	andeq	r3, r0, r8, lsr #22
    7788:	002cb915 	eoreq	fp, ip, r5, lsl r9
    778c:	045b0100 	ldrbeq	r0, [fp], #-256	; 0x100
    7790:	0000004c 	andeq	r0, r0, ip, asr #32
    7794:	00003b49 	andeq	r3, r0, r9, asr #22
    7798:	002a0815 	eoreq	r0, sl, r5, lsl r8
    779c:	045c0100 	ldrbeq	r0, [ip], #-256	; 0x100
    77a0:	0000004c 	andeq	r0, r0, ip, asr #32
    77a4:	00003b6a 	andeq	r3, r0, sl, ror #22
    77a8:	00261c16 	eoreq	r1, r6, r6, lsl ip
    77ac:	045e0100 	ldrbeq	r0, [lr], #-256	; 0x100
    77b0:	0000004c 	andeq	r0, r0, ip, asr #32
    77b4:	00003b8b 	andeq	r3, r0, fp, lsl #23
    77b8:	00561e28 	subseq	r1, r6, r8, lsr #28
    77bc:	000bee08 	andeq	lr, fp, r8, lsl #28
    77c0:	50011b00 	andpl	r1, r1, r0, lsl #22
    77c4:	00007402 	andeq	r7, r0, r2, lsl #8
    77c8:	269f2000 	ldrcs	r2, [pc], r0
    77cc:	8d010000 	stchi	0, cr0, [r1, #-0]
    77d0:	00563004 	subseq	r3, r6, r4
    77d4:	00001408 	andeq	r1, r0, r8, lsl #8
    77d8:	2f9c0100 	svccs	0x009c0100
    77dc:	1500000d 	strne	r0, [r0, #-13]
    77e0:	00002636 	andeq	r2, r0, r6, lsr r6
    77e4:	ac048d01 	stcge	13, cr8, [r4], {1}
    77e8:	c8000004 	stmdagt	r0, {r2}
    77ec:	1500003b 	strne	r0, [r0, #-59]	; 0x3b
    77f0:	00002587 	andeq	r2, r0, r7, lsl #11
    77f4:	4c048d01 	stcmi	13, cr8, [r4], {1}
    77f8:	e6000000 	str	r0, [r0], -r0
    77fc:	1500003b 	strne	r0, [r0, #-59]	; 0x3b
    7800:	00002cb9 			; <UNDEFINED> instruction: 0x00002cb9
    7804:	4c048e01 	stcmi	14, cr8, [r4], {1}
    7808:	07000000 	streq	r0, [r0, -r0]
    780c:	1500003c 	strne	r0, [r0, #-60]	; 0x3c
    7810:	00002a08 	andeq	r2, r0, r8, lsl #20
    7814:	4c048e01 	stcmi	14, cr8, [r4], {1}
    7818:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    781c:	2800003c 	stmdacs	r0, {r2, r3, r4, r5}
    7820:	08005638 	stmdaeq	r0, {r3, r4, r5, r9, sl, ip, lr}
    7824:	00000bee 	andeq	r0, r0, lr, ror #23
    7828:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    782c:	00000074 	andeq	r0, r0, r4, ror r0
    7830:	000df520 	andeq	pc, sp, r0, lsr #10
    7834:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    7838:	08005644 	stmdaeq	r0, {r2, r6, r9, sl, ip, lr}
    783c:	00000006 	andeq	r0, r0, r6
    7840:	0d709c01 	ldcleq	12, cr9, [r0, #-4]!
    7844:	36140000 	ldrcc	r0, [r4], -r0
    7848:	01000026 	tsteq	r0, r6, lsr #32
    784c:	04ac04d6 	strteq	r0, [ip], #1238	; 0x4d6
    7850:	50010000 	andpl	r0, r1, r0
    7854:	002af114 	eoreq	pc, sl, r4, lsl r1	; <UNPREDICTABLE>
    7858:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    785c:	0000004c 	andeq	r0, r0, ip, asr #32
    7860:	7d145101 	ldfvcs	f5, [r4, #-4]
    7864:	01000028 	tsteq	r0, r8, lsr #32
    7868:	004c04d6 	ldrdeq	r0, [ip], #-70	; 0xffffffba
    786c:	52010000 	andpl	r0, r1, #0
    7870:	29922000 	ldmibcs	r2, {sp}
    7874:	f2010000 	vhadd.s8	d0, d1, d0
    7878:	00564a04 	subseq	r4, r6, r4, lsl #20
    787c:	00001008 	andeq	r1, r0, r8
    7880:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
    7884:	1400000d 	strne	r0, [r0], #-13
    7888:	00002636 	andeq	r2, r0, r6, lsr r6
    788c:	ac04f201 	sfmge	f7, 1, [r4], {1}
    7890:	01000004 	tsteq	r0, r4
    7894:	06451550 			; <UNDEFINED> instruction: 0x06451550
    7898:	f2010000 	vhadd.s8	d0, d1, d0
    789c:	00004c04 	andeq	r4, r0, r4, lsl #24
    78a0:	003c4900 	eorseq	r4, ip, r0, lsl #18
    78a4:	268c1600 	strcs	r1, [ip], r0, lsl #12
    78a8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    78ac:	00004c04 	andeq	r4, r0, r4, lsl #24
    78b0:	003c6a00 	eorseq	r6, ip, r0, lsl #20
    78b4:	7a290000 	bvc	a478bc <__Stack_Size+0xa474bc>
    78b8:	5a000004 	bpl	78d0 <__Stack_Size+0x74d0>
    78bc:	10080056 	andne	r0, r8, r6, asr r0
    78c0:	01000000 	mrseq	r0, (UNDEF: 0)
    78c4:	000de29c 	muleq	sp, ip, r2
    78c8:	04872300 	streq	r2, [r7], #768	; 0x300
    78cc:	50010000 	andpl	r0, r1, r0
    78d0:	00049322 	andeq	r9, r4, r2, lsr #6
    78d4:	003c9f00 	eorseq	r9, ip, r0, lsl #30
    78d8:	049f2500 	ldreq	r2, [pc], #1280	; 78e0 <__Stack_Size+0x74e0>
    78dc:	3cc00000 	stclcc	0, cr0, [r0], {0}
    78e0:	20000000 	andcs	r0, r0, r0
    78e4:	00002906 	andeq	r2, r0, r6, lsl #18
    78e8:	6a054501 	bvs	158cf4 <__Stack_Size+0x1588f4>
    78ec:	3c080056 	stccc	0, cr0, [r8], {86}	; 0x56
    78f0:	01000000 	mrseq	r0, (UNDEF: 0)
    78f4:	000e679c 	muleq	lr, ip, r7
    78f8:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    78fc:	45010000 	strmi	r0, [r1, #-0]
    7900:	0004ac05 	andeq	sl, r4, r5, lsl #24
    7904:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7908:	00002851 	andeq	r2, r0, r1, asr r8
    790c:	4c054501 	cfstr32mi	mvfx4, [r5], {1}
    7910:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    7914:	1500003c 	strne	r0, [r0, #-60]	; 0x3c
    7918:	0000260c 	andeq	r2, r0, ip, lsl #12
    791c:	4c054601 	stcmi	6, cr4, [r5], {1}
    7920:	16000000 	strne	r0, [r0], -r0
    7924:	1500003d 	strne	r0, [r0, #-61]	; 0x3d
    7928:	0000264c 	andeq	r2, r0, ip, asr #12
    792c:	4c054601 	stcmi	6, cr4, [r5], {1}
    7930:	37000000 	strcc	r0, [r0, -r0]
    7934:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    7938:	0000261c 	andeq	r2, r0, ip, lsl r6
    793c:	4c054801 	stcmi	8, cr4, [r5], {1}
    7940:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    7944:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    7948:	00002a7a 	andeq	r2, r0, sl, ror sl
    794c:	4c054901 	stcmi	9, cr4, [r5], {1}
    7950:	8d000000 	stchi	0, cr0, [r0, #-0]
    7954:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    7958:	000027a3 	andeq	r2, r0, r3, lsr #15
    795c:	4c054a01 	stcmi	10, cr4, [r5], {1}
    7960:	b7000000 	strlt	r0, [r0, -r0]
    7964:	0000003d 	andeq	r0, r0, sp, lsr r0
    7968:	002c2720 	eoreq	r2, ip, r0, lsr #14
    796c:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 7874 <__Stack_Size+0x7474>
    7970:	080056a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, lr}
    7974:	00000010 	andeq	r0, r0, r0, lsl r0
    7978:	0eac9c01 	cdpeq	12, 10, cr9, cr12, cr1, {0}
    797c:	36140000 	ldrcc	r0, [r4], -r0
    7980:	01000026 	tsteq	r0, r6, lsr #32
    7984:	04ac057f 	strteq	r0, [ip], #1407	; 0x57f
    7988:	50010000 	andpl	r0, r1, r0
    798c:	00263b15 	eoreq	r3, r6, r5, lsl fp
    7990:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 7898 <__Stack_Size+0x7498>
    7994:	0000004c 	andeq	r0, r0, ip, asr #32
    7998:	00003de1 	andeq	r3, r0, r1, ror #27
    799c:	002a7a16 	eoreq	r7, sl, r6, lsl sl
    79a0:	05810100 	streq	r0, [r1, #256]	; 0x100
    79a4:	0000004c 	andeq	r0, r0, ip, asr #32
    79a8:	00003e02 	andeq	r3, r0, r2, lsl #28
    79ac:	25c52000 	strbcs	r2, [r5]
    79b0:	a1010000 	mrsge	r0, (UNDEF: 1)
    79b4:	0056b605 	subseq	fp, r6, r5, lsl #12
    79b8:	00001408 	andeq	r1, r0, r8, lsl #8
    79bc:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    79c0:	1400000e 	strne	r0, [r0], #-14
    79c4:	00002636 	andeq	r2, r0, r6, lsr r6
    79c8:	ac05a101 	stfged	f2, [r5], {1}
    79cc:	01000004 	tsteq	r0, r4
    79d0:	263b1550 			; <UNDEFINED> instruction: 0x263b1550
    79d4:	a1010000 	mrsge	r0, (UNDEF: 1)
    79d8:	00004c05 	andeq	r4, r0, r5, lsl #24
    79dc:	003e3700 	eorseq	r3, lr, r0, lsl #14
    79e0:	2a7a1600 	bcs	1e8d1e8 <__Stack_Size+0x1e8cde8>
    79e4:	a3010000 	movwge	r0, #4096	; 0x1000
    79e8:	00004c05 	andeq	r4, r0, r5, lsl #24
    79ec:	003e5800 	eorseq	r5, lr, r0, lsl #16
    79f0:	e9200000 	stmdb	r0!, {}	; <UNPREDICTABLE>
    79f4:	0100002c 	tsteq	r0, ip, lsr #32
    79f8:	56ca05c3 	strbpl	r0, [sl], r3, asr #11
    79fc:	00100800 	andseq	r0, r0, r0, lsl #16
    7a00:	9c010000 	stcls	0, cr0, [r1], {-0}
    7a04:	00000f36 	andeq	r0, r0, r6, lsr pc
    7a08:	00263614 	eoreq	r3, r6, r4, lsl r6
    7a0c:	05c30100 	strbeq	r0, [r3, #256]	; 0x100
    7a10:	000004ac 	andeq	r0, r0, ip, lsr #9
    7a14:	3b155001 	blcc	55ba20 <__Stack_Size+0x55b620>
    7a18:	01000026 	tsteq	r0, r6, lsr #32
    7a1c:	004c05c3 	subeq	r0, ip, r3, asr #11
    7a20:	3e8d0000 	cdpcc	0, 8, cr0, cr13, cr0, {0}
    7a24:	83160000 	tsthi	r6, #0
    7a28:	0100002a 	tsteq	r0, sl, lsr #32
    7a2c:	004c05c5 	subeq	r0, ip, r5, asr #11
    7a30:	3eae0000 	cdpcc	0, 10, cr0, cr14, cr0, {0}
    7a34:	20000000 	andcs	r0, r0, r0
    7a38:	000029d4 	ldrdeq	r2, [r0], -r4
    7a3c:	da05e501 	ble	180e48 <__Stack_Size+0x180a48>
    7a40:	14080056 	strne	r0, [r8], #-86	; 0x56
    7a44:	01000000 	mrseq	r0, (UNDEF: 0)
    7a48:	000f7b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
    7a4c:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7a50:	e5010000 	str	r0, [r1, #-0]
    7a54:	0004ac05 	andeq	sl, r4, r5, lsl #24
    7a58:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7a5c:	0000263b 	andeq	r2, r0, fp, lsr r6
    7a60:	4c05e501 	cfstr32mi	mvfx14, [r5], {1}
    7a64:	e3000000 	movw	r0, #0
    7a68:	1600003e 			; <UNDEFINED> instruction: 0x1600003e
    7a6c:	00002a83 	andeq	r2, r0, r3, lsl #21
    7a70:	4c05e701 	stcmi	7, cr14, [r5], {1}
    7a74:	04000000 	streq	r0, [r0], #-0
    7a78:	0000003f 	andeq	r0, r0, pc, lsr r0
    7a7c:	00275920 	eoreq	r5, r7, r0, lsr #18
    7a80:	06020100 	streq	r0, [r2], -r0, lsl #2
    7a84:	080056ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, lr}
    7a88:	00000018 	andeq	r0, r0, r8, lsl r0
    7a8c:	0fae9c01 	svceq	0x00ae9c01
    7a90:	36140000 	ldrcc	r0, [r4], -r0
    7a94:	01000026 	tsteq	r0, r6, lsr #32
    7a98:	04ac0602 	strteq	r0, [ip], #1538	; 0x602
    7a9c:	50010000 	andpl	r0, r1, r0
    7aa0:	00169114 	andseq	r9, r6, r4, lsl r1
    7aa4:	06020100 	streq	r0, [r2], -r0, lsl #2
    7aa8:	000000cf 	andeq	r0, r0, pc, asr #1
    7aac:	20005101 	andcs	r5, r0, r1, lsl #2
    7ab0:	00002a98 	muleq	r0, r8, sl
    7ab4:	06061d01 	streq	r1, [r6], -r1, lsl #26
    7ab8:	18080057 	stmdane	r8, {r0, r1, r2, r4, r6}
    7abc:	01000000 	mrseq	r0, (UNDEF: 0)
    7ac0:	000fe19c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    7ac4:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7ac8:	1d010000 	stcne	0, cr0, [r1, #-0]
    7acc:	0004ac06 	andeq	sl, r4, r6, lsl #24
    7ad0:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    7ad4:	00001691 	muleq	r0, r1, r6
    7ad8:	cf061d01 	svcgt	0x00061d01
    7adc:	01000000 	mrseq	r0, (UNDEF: 0)
    7ae0:	f1200051 			; <UNDEFINED> instruction: 0xf1200051
    7ae4:	01000025 	tsteq	r0, r5, lsr #32
    7ae8:	571e0639 			; <UNDEFINED> instruction: 0x571e0639
    7aec:	00180800 	andseq	r0, r8, r0, lsl #16
    7af0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7af4:	00001014 	andeq	r1, r0, r4, lsl r0
    7af8:	00263614 	eoreq	r3, r6, r4, lsl r6
    7afc:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    7b00:	000004ac 	andeq	r0, r0, ip, lsr #9
    7b04:	91145001 	tstls	r4, r1
    7b08:	01000016 	tsteq	r0, r6, lsl r0
    7b0c:	00cf0639 	sbceq	r0, pc, r9, lsr r6	; <UNPREDICTABLE>
    7b10:	51010000 	mrspl	r0, (UNDEF: 1)
    7b14:	2aa62000 	bcs	fe98fb1c <SCS_BASE+0x1e981b1c>
    7b18:	55010000 	strpl	r0, [r1, #-0]
    7b1c:	00573606 	subseq	r3, r7, r6, lsl #12
    7b20:	00001808 	andeq	r1, r0, r8, lsl #16
    7b24:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    7b28:	14000010 	strne	r0, [r0], #-16
    7b2c:	00002636 	andeq	r2, r0, r6, lsr r6
    7b30:	ac065501 	cfstr32ge	mvfx5, [r6], {1}
    7b34:	01000004 	tsteq	r0, r4
    7b38:	16911450 			; <UNDEFINED> instruction: 0x16911450
    7b3c:	55010000 	strpl	r0, [r1, #-0]
    7b40:	0000cf06 	andeq	ip, r0, r6, lsl #30
    7b44:	00510100 	subseq	r0, r1, r0, lsl #2
    7b48:	0001d420 	andeq	sp, r1, r0, lsr #8
    7b4c:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    7b50:	0800574e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip, lr}
    7b54:	00000010 	andeq	r0, r0, r0, lsl r0
    7b58:	108c9c01 	addne	r9, ip, r1, lsl #24
    7b5c:	36140000 	ldrcc	r0, [r4], -r0
    7b60:	01000026 	tsteq	r0, r6, lsr #32
    7b64:	04ac0674 	strteq	r0, [ip], #1652	; 0x674
    7b68:	50010000 	andpl	r0, r1, r0
    7b6c:	00250b15 	eoreq	r0, r5, r5, lsl fp
    7b70:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    7b74:	0000004c 	andeq	r0, r0, ip, asr #32
    7b78:	00003f39 	andeq	r3, r0, r9, lsr pc
    7b7c:	002a7a16 	eoreq	r7, sl, r6, lsl sl
    7b80:	06760100 	ldrbteq	r0, [r6], -r0, lsl #2
    7b84:	0000004c 	andeq	r0, r0, ip, asr #32
    7b88:	00003f5a 	andeq	r3, r0, sl, asr pc
    7b8c:	25b02000 	ldrcs	r2, [r0, #0]!
    7b90:	95010000 	strls	r0, [r1, #-0]
    7b94:	00575e06 	subseq	r5, r7, r6, lsl #28
    7b98:	00001408 	andeq	r1, r0, r8, lsl #8
    7b9c:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    7ba0:	14000010 	strne	r0, [r0], #-16
    7ba4:	00002636 	andeq	r2, r0, r6, lsr r6
    7ba8:	ac069501 	cfstr32ge	mvfx9, [r6], {1}
    7bac:	01000004 	tsteq	r0, r4
    7bb0:	250b1550 	strcs	r1, [fp, #-1360]	; 0x550
    7bb4:	95010000 	strls	r0, [r1, #-0]
    7bb8:	00004c06 	andeq	r4, r0, r6, lsl #24
    7bbc:	003f8f00 	eorseq	r8, pc, r0, lsl #30
    7bc0:	2a7a1600 	bcs	1e8d3c8 <__Stack_Size+0x1e8cfc8>
    7bc4:	97010000 	strls	r0, [r1, -r0]
    7bc8:	00004c06 	andeq	r4, r0, r6, lsl #24
    7bcc:	003fb000 	eorseq	fp, pc, r0
    7bd0:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    7bd4:	01000025 	tsteq	r0, r5, lsr #32
    7bd8:	577206b6 			; <UNDEFINED> instruction: 0x577206b6
    7bdc:	00100800 	andseq	r0, r0, r0, lsl #16
    7be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7be4:	00001116 	andeq	r1, r0, r6, lsl r1
    7be8:	00263614 	eoreq	r3, r6, r4, lsl r6
    7bec:	06b60100 	ldrteq	r0, [r6], r0, lsl #2
    7bf0:	000004ac 	andeq	r0, r0, ip, lsr #9
    7bf4:	0b155001 	bleq	55bc00 <__Stack_Size+0x55b800>
    7bf8:	01000025 	tsteq	r0, r5, lsr #32
    7bfc:	004c06b6 	strheq	r0, [ip], #-102	; 0xffffff9a
    7c00:	3fe50000 	svccc	0x00e50000
    7c04:	83160000 	tsthi	r6, #0
    7c08:	0100002a 	tsteq	r0, sl, lsr #32
    7c0c:	004c06b8 	strheq	r0, [ip], #-104	; 0xffffff98
    7c10:	40060000 	andmi	r0, r6, r0
    7c14:	20000000 	andcs	r0, r0, r0
    7c18:	000024bf 			; <UNDEFINED> instruction: 0x000024bf
    7c1c:	8206d701 	andhi	sp, r6, #262144	; 0x40000
    7c20:	14080057 	strne	r0, [r8], #-87	; 0x57
    7c24:	01000000 	mrseq	r0, (UNDEF: 0)
    7c28:	00115b9c 	mulseq	r1, ip, fp
    7c2c:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7c30:	d7010000 	strle	r0, [r1, -r0]
    7c34:	0004ac06 	andeq	sl, r4, r6, lsl #24
    7c38:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7c3c:	0000250b 	andeq	r2, r0, fp, lsl #10
    7c40:	4c06d701 	stcmi	7, cr13, [r6], {1}
    7c44:	3b000000 	blcc	7c4c <__Stack_Size+0x784c>
    7c48:	16000040 	strne	r0, [r0], -r0, asr #32
    7c4c:	00002a83 	andeq	r2, r0, r3, lsl #21
    7c50:	4c06d901 	stcmi	9, cr13, [r6], {1}
    7c54:	5c000000 	stcpl	0, cr0, [r0], {-0}
    7c58:	00000040 	andeq	r0, r0, r0, asr #32
    7c5c:	002a2920 	eoreq	r2, sl, r0, lsr #18
    7c60:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    7c64:	08005796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, lr}
    7c68:	00000010 	andeq	r0, r0, r0, lsl r0
    7c6c:	11a09c01 	lslne	r9, r1, #24
    7c70:	36140000 	ldrcc	r0, [r4], -r0
    7c74:	01000026 	tsteq	r0, r6, lsr #32
    7c78:	04ac06f7 	strteq	r0, [ip], #1783	; 0x6f7
    7c7c:	50010000 	andpl	r0, r1, r0
    7c80:	00254b15 	eoreq	r4, r5, r5, lsl fp
    7c84:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    7c88:	0000004c 	andeq	r0, r0, ip, asr #32
    7c8c:	00004091 	muleq	r0, r1, r0
    7c90:	002a7a16 	eoreq	r7, sl, r6, lsl sl
    7c94:	06f90100 	ldrbteq	r0, [r9], r0, lsl #2
    7c98:	0000004c 	andeq	r0, r0, ip, asr #32
    7c9c:	000040b2 	strheq	r4, [r0], -r2
    7ca0:	27c02000 	strbcs	r2, [r0, r0]
    7ca4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    7ca8:	0057a607 	subseq	sl, r7, r7, lsl #12
    7cac:	00001408 	andeq	r1, r0, r8, lsl #8
    7cb0:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    7cb4:	14000011 	strne	r0, [r0], #-17
    7cb8:	00002636 	andeq	r2, r0, r6, lsr r6
    7cbc:	ac071801 	stcge	8, cr1, [r7], {1}
    7cc0:	01000004 	tsteq	r0, r4
    7cc4:	254b1550 	strbcs	r1, [fp, #-1360]	; 0x550
    7cc8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    7ccc:	00004c07 	andeq	r4, r0, r7, lsl #24
    7cd0:	0040e700 	subeq	lr, r0, r0, lsl #14
    7cd4:	2a7a1600 	bcs	1e8d4dc <__Stack_Size+0x1e8d0dc>
    7cd8:	1a010000 	bne	47ce0 <__Stack_Size+0x478e0>
    7cdc:	00004c07 	andeq	r4, r0, r7, lsl #24
    7ce0:	00410800 	subeq	r0, r1, r0, lsl #16
    7ce4:	24200000 	strtcs	r0, [r0], #-0
    7ce8:	01000026 	tsteq	r0, r6, lsr #32
    7cec:	57ba0739 			; <UNDEFINED> instruction: 0x57ba0739
    7cf0:	00100800 	andseq	r0, r0, r0, lsl #16
    7cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    7cf8:	0000122a 	andeq	r1, r0, sl, lsr #4
    7cfc:	00263614 	eoreq	r3, r6, r4, lsl r6
    7d00:	07390100 	ldreq	r0, [r9, -r0, lsl #2]!
    7d04:	000004ac 	andeq	r0, r0, ip, lsr #9
    7d08:	4b155001 	blmi	55bd14 <__Stack_Size+0x55b914>
    7d0c:	01000025 	tsteq	r0, r5, lsr #32
    7d10:	004c0739 	subeq	r0, ip, r9, lsr r7
    7d14:	413d0000 	teqmi	sp, r0
    7d18:	83160000 	tsthi	r6, #0
    7d1c:	0100002a 	tsteq	r0, sl, lsr #32
    7d20:	004c073b 	subeq	r0, ip, fp, lsr r7
    7d24:	415e0000 	cmpmi	lr, r0
    7d28:	20000000 	andcs	r0, r0, r0
    7d2c:	00002486 	andeq	r2, r0, r6, lsl #9
    7d30:	ca075a01 	bgt	1de53c <__Stack_Size+0x1de13c>
    7d34:	14080057 	strne	r0, [r8], #-87	; 0x57
    7d38:	01000000 	mrseq	r0, (UNDEF: 0)
    7d3c:	00126f9c 	mulseq	r2, ip, pc	; <UNPREDICTABLE>
    7d40:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7d44:	5a010000 	bpl	47d4c <__Stack_Size+0x4794c>
    7d48:	0004ac07 	andeq	sl, r4, r7, lsl #24
    7d4c:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7d50:	0000254b 	andeq	r2, r0, fp, asr #10
    7d54:	4c075a01 	stcmi	10, cr5, [r7], {1}
    7d58:	93000000 	movwls	r0, #0
    7d5c:	16000041 	strne	r0, [r0], -r1, asr #32
    7d60:	00002a83 	andeq	r2, r0, r3, lsl #21
    7d64:	4c075c01 	stcmi	12, cr5, [r7], {1}
    7d68:	b4000000 	strlt	r0, [r0], #-0
    7d6c:	00000041 	andeq	r0, r0, r1, asr #32
    7d70:	002c9320 	eoreq	r9, ip, r0, lsr #6
    7d74:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    7d78:	080057de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
    7d7c:	00000010 	andeq	r0, r0, r0, lsl r0
    7d80:	12b49c01 	adcsne	r9, r4, #256	; 0x100
    7d84:	36140000 	ldrcc	r0, [r4], -r0
    7d88:	01000026 	tsteq	r0, r6, lsr #32
    7d8c:	04ac077b 	strteq	r0, [ip], #1915	; 0x77b
    7d90:	50010000 	andpl	r0, r1, r0
    7d94:	00287115 	eoreq	r7, r8, r5, lsl r1
    7d98:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    7d9c:	0000004c 	andeq	r0, r0, ip, asr #32
    7da0:	000041e9 	andeq	r4, r0, r9, ror #3
    7da4:	002a7a16 	eoreq	r7, sl, r6, lsl sl
    7da8:	077d0100 	ldrbeq	r0, [sp, -r0, lsl #2]!
    7dac:	0000004c 	andeq	r0, r0, ip, asr #32
    7db0:	0000420a 	andeq	r4, r0, sl, lsl #4
    7db4:	2bb72000 	blcs	fedcfdbc <SCS_BASE+0x1edc1dbc>
    7db8:	9b010000 	blls	47dc0 <__Stack_Size+0x479c0>
    7dbc:	0057ee07 	subseq	lr, r7, r7, lsl #28
    7dc0:	00001008 	andeq	r1, r0, r8
    7dc4:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    7dc8:	14000012 	strne	r0, [r0], #-18
    7dcc:	00002636 	andeq	r2, r0, r6, lsr r6
    7dd0:	ac079b01 	stcge	11, cr9, [r7], {1}
    7dd4:	01000004 	tsteq	r0, r4
    7dd8:	28711550 	ldmdacs	r1!, {r4, r6, r8, sl, ip}^
    7ddc:	9b010000 	blls	47de4 <__Stack_Size+0x479e4>
    7de0:	00004c07 	andeq	r4, r0, r7, lsl #24
    7de4:	00423f00 	subeq	r3, r2, r0, lsl #30
    7de8:	2a7a1600 	bcs	1e8d5f0 <__Stack_Size+0x1e8d1f0>
    7dec:	9d010000 	stcls	0, cr0, [r1, #-0]
    7df0:	00004c07 	andeq	r4, r0, r7, lsl #24
    7df4:	00426000 	subeq	r6, r2, r0
    7df8:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
    7dfc:	01000029 	tsteq	r0, r9, lsr #32
    7e00:	57fe07bb 			; <UNDEFINED> instruction: 0x57fe07bb
    7e04:	00100800 	andseq	r0, r0, r0, lsl #16
    7e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    7e0c:	0000133e 	andeq	r1, r0, lr, lsr r3
    7e10:	00263614 	eoreq	r3, r6, r4, lsl r6
    7e14:	07bb0100 	ldreq	r0, [fp, r0, lsl #2]!
    7e18:	000004ac 	andeq	r0, r0, ip, lsr #9
    7e1c:	71155001 	tstvc	r5, r1
    7e20:	01000028 	tsteq	r0, r8, lsr #32
    7e24:	004c07bb 	strheq	r0, [ip], #-123	; 0xffffff85
    7e28:	428a0000 	addmi	r0, sl, #0
    7e2c:	83160000 	tsthi	r6, #0
    7e30:	0100002a 	tsteq	r0, sl, lsr #32
    7e34:	004c07bd 	strheq	r0, [ip], #-125	; 0xffffff83
    7e38:	42ab0000 	adcmi	r0, fp, #0
    7e3c:	20000000 	andcs	r0, r0, r0
    7e40:	0000271f 	andeq	r2, r0, pc, lsl r7
    7e44:	0e07db01 	vmlaeq.f64	d13, d7, d1
    7e48:	10080058 	andne	r0, r8, r8, asr r0
    7e4c:	01000000 	mrseq	r0, (UNDEF: 0)
    7e50:	0013839c 	mulseq	r3, ip, r3
    7e54:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7e58:	db010000 	blle	47e60 <__Stack_Size+0x47a60>
    7e5c:	0004ac07 	andeq	sl, r4, r7, lsl #24
    7e60:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7e64:	00002871 	andeq	r2, r0, r1, ror r8
    7e68:	4c07db01 	stcmi	11, cr13, [r7], {1}
    7e6c:	e0000000 	and	r0, r0, r0
    7e70:	16000042 	strne	r0, [r0], -r2, asr #32
    7e74:	00002a83 	andeq	r2, r0, r3, lsl #21
    7e78:	4c07dd01 	stcmi	13, cr13, [r7], {1}
    7e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    7e80:	00000043 	andeq	r0, r0, r3, asr #32
    7e84:	00249820 	eoreq	r9, r4, r0, lsr #16
    7e88:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    7e8c:	0800581e 	stmdaeq	r0, {r1, r2, r3, r4, fp, ip, lr}
    7e90:	00000010 	andeq	r0, r0, r0, lsl r0
    7e94:	13c89c01 	bicne	r9, r8, #256	; 0x100
    7e98:	36140000 	ldrcc	r0, [r4], -r0
    7e9c:	01000026 	tsteq	r0, r6, lsr #32
    7ea0:	04ac07fb 	strteq	r0, [ip], #2043	; 0x7fb
    7ea4:	50010000 	andpl	r0, r1, r0
    7ea8:	0000c715 	andeq	ip, r0, r5, lsl r7
    7eac:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    7eb0:	0000004c 	andeq	r0, r0, ip, asr #32
    7eb4:	0000432b 	andeq	r4, r0, fp, lsr #6
    7eb8:	0027a316 	eoreq	sl, r7, r6, lsl r3
    7ebc:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    7ec0:	0000004c 	andeq	r0, r0, ip, asr #32
    7ec4:	0000434c 	andeq	r4, r0, ip, asr #6
    7ec8:	2a492000 	bcs	124fed0 <__Stack_Size+0x124fad0>
    7ecc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    7ed0:	00582e08 	subseq	r2, r8, r8, lsl #28
    7ed4:	00001008 	andeq	r1, r0, r8
    7ed8:	0d9c0100 	ldfeqs	f0, [ip]
    7edc:	14000014 	strne	r0, [r0], #-20
    7ee0:	00002636 	andeq	r2, r0, r6, lsr r6
    7ee4:	ac081801 	stcge	8, cr1, [r8], {1}
    7ee8:	01000004 	tsteq	r0, r4
    7eec:	05881550 	streq	r1, [r8, #1360]	; 0x550
    7ef0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    7ef4:	00004c08 	andeq	r4, r0, r8, lsl #24
    7ef8:	00438100 	subeq	r8, r3, r0, lsl #2
    7efc:	27a31600 	strcs	r1, [r3, r0, lsl #12]!
    7f00:	1a010000 	bne	47f08 <__Stack_Size+0x47b08>
    7f04:	00004c08 	andeq	r4, r0, r8, lsl #24
    7f08:	0043a200 	subeq	sl, r3, r0, lsl #4
    7f0c:	54200000 	strtpl	r0, [r0], #-0
    7f10:	0100002d 	tsteq	r0, sp, lsr #32
    7f14:	583e0836 	ldmdapl	lr!, {r1, r2, r4, r5, fp}
    7f18:	00140800 	andseq	r0, r4, r0, lsl #16
    7f1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7f20:	00001452 	andeq	r1, r0, r2, asr r4
    7f24:	00263614 	eoreq	r3, r6, r4, lsl r6
    7f28:	08360100 	ldmdaeq	r6!, {r8}
    7f2c:	000004ac 	andeq	r0, r0, ip, lsr #9
    7f30:	c7155001 	ldrgt	r5, [r5, -r1]
    7f34:	01000000 	mrseq	r0, (UNDEF: 0)
    7f38:	004c0836 	subeq	r0, ip, r6, lsr r8
    7f3c:	43d70000 	bicsmi	r0, r7, #0
    7f40:	a3160000 	tstge	r6, #0
    7f44:	01000027 	tsteq	r0, r7, lsr #32
    7f48:	004c0838 	subeq	r0, ip, r8, lsr r8
    7f4c:	43f80000 	mvnsmi	r0, #0
    7f50:	20000000 	andcs	r0, r0, r0
    7f54:	00002c53 	andeq	r2, r0, r3, asr ip
    7f58:	52085301 	andpl	r5, r8, #67108864	; 0x4000000
    7f5c:	14080058 	strne	r0, [r8], #-88	; 0x58
    7f60:	01000000 	mrseq	r0, (UNDEF: 0)
    7f64:	0014979c 	mulseq	r4, ip, r7
    7f68:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    7f6c:	53010000 	movwpl	r0, #4096	; 0x1000
    7f70:	0004ac08 	andeq	sl, r4, r8, lsl #24
    7f74:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    7f78:	00000588 	andeq	r0, r0, r8, lsl #11
    7f7c:	4c085301 	stcmi	3, cr5, [r8], {1}
    7f80:	2d000000 	stccs	0, cr0, [r0, #-0]
    7f84:	16000044 	strne	r0, [r0], -r4, asr #32
    7f88:	000027a3 	andeq	r2, r0, r3, lsr #15
    7f8c:	4c085501 	cfstr32mi	mvfx5, [r8], {1}
    7f90:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    7f94:	00000044 	andeq	r0, r0, r4, asr #32
    7f98:	002ca320 	eoreq	sl, ip, r0, lsr #6
    7f9c:	08710100 	ldmdaeq	r1!, {r8}^
    7fa0:	08005866 	stmdaeq	r0, {r1, r2, r5, r6, fp, ip, lr}
    7fa4:	00000014 	andeq	r0, r0, r4, lsl r0
    7fa8:	14dc9c01 	ldrbne	r9, [ip], #3073	; 0xc01
    7fac:	36140000 	ldrcc	r0, [r4], -r0
    7fb0:	01000026 	tsteq	r0, r6, lsr #32
    7fb4:	04ac0871 	strteq	r0, [ip], #2161	; 0x871
    7fb8:	50010000 	andpl	r0, r1, r0
    7fbc:	0000c715 	andeq	ip, r0, r5, lsl r7
    7fc0:	08710100 	ldmdaeq	r1!, {r8}^
    7fc4:	0000004c 	andeq	r0, r0, ip, asr #32
    7fc8:	00004483 	andeq	r4, r0, r3, lsl #9
    7fcc:	0027a316 	eoreq	sl, r7, r6, lsl r3
    7fd0:	08730100 	ldmdaeq	r3!, {r8}^
    7fd4:	0000004c 	andeq	r0, r0, ip, asr #32
    7fd8:	000044a4 	andeq	r4, r0, r4, lsr #9
    7fdc:	24f42000 	ldrbtcs	r2, [r4], #0
    7fe0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    7fe4:	00587a08 	subseq	r7, r8, r8, lsl #20
    7fe8:	00001408 	andeq	r1, r0, r8, lsl #8
    7fec:	219c0100 	orrscs	r0, ip, r0, lsl #2
    7ff0:	14000015 	strne	r0, [r0], #-21
    7ff4:	00002636 	andeq	r2, r0, r6, lsr r6
    7ff8:	ac088e01 	stcge	14, cr8, [r8], {1}
    7ffc:	01000004 	tsteq	r0, r4
    8000:	05881550 	streq	r1, [r8, #1360]	; 0x550
    8004:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    8008:	00004c08 	andeq	r4, r0, r8, lsl #24
    800c:	0044d900 	subeq	sp, r4, r0, lsl #18
    8010:	27a31600 	strcs	r1, [r3, r0, lsl #12]!
    8014:	90010000 	andls	r0, r1, r0
    8018:	00004c08 	andeq	r4, r0, r8, lsl #24
    801c:	0044fa00 	subeq	pc, r4, r0, lsl #20
    8020:	6a200000 	bvs	808028 <__Stack_Size+0x807c28>
    8024:	0100002c 	tsteq	r0, ip, lsr #32
    8028:	588e08ac 	stmpl	lr, {r2, r3, r5, r7, fp}
    802c:	00140800 	andseq	r0, r4, r0, lsl #16
    8030:	9c010000 	stcls	0, cr0, [r1], {-0}
    8034:	00001566 	andeq	r1, r0, r6, ror #10
    8038:	00263614 	eoreq	r3, r6, r4, lsl r6
    803c:	08ac0100 	stmiaeq	ip!, {r8}
    8040:	000004ac 	andeq	r0, r0, ip, lsr #9
    8044:	c7155001 	ldrgt	r5, [r5, -r1]
    8048:	01000000 	mrseq	r0, (UNDEF: 0)
    804c:	004c08ac 	subeq	r0, ip, ip, lsr #17
    8050:	452f0000 	strmi	r0, [pc, #-0]!	; 8058 <__Stack_Size+0x7c58>
    8054:	a3160000 	tstge	r6, #0
    8058:	01000027 	tsteq	r0, r7, lsr #32
    805c:	004c08ae 	subeq	r0, ip, lr, lsr #17
    8060:	45500000 	ldrbmi	r0, [r0, #-0]
    8064:	20000000 	andcs	r0, r0, r0
    8068:	0000288f 	andeq	r2, r0, pc, lsl #17
    806c:	a208ce01 	andge	ip, r8, #1, 28
    8070:	1c080058 	stcne	0, cr0, [r8], {88}	; 0x58
    8074:	01000000 	mrseq	r0, (UNDEF: 0)
    8078:	0015a99c 	mulseq	r5, ip, r9
    807c:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    8080:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    8084:	0004ac08 	andeq	sl, r4, r8, lsl #24
    8088:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    808c:	00002a8c 	andeq	r2, r0, ip, lsl #21
    8090:	4c08ce01 	stcmi	14, cr12, [r8], {1}
    8094:	01000000 	mrseq	r0, (UNDEF: 0)
    8098:	2afb1551 	bcs	ffecd5e4 <SCS_BASE+0x1febf5e4>
    809c:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    80a0:	00004c08 	andeq	r4, r0, r8, lsl #24
    80a4:	00458500 	subeq	r8, r5, r0, lsl #10
    80a8:	9b200000 	blls	8080b0 <__Stack_Size+0x807cb0>
    80ac:	01000025 	tsteq	r0, r5, lsr #32
    80b0:	58be08ea 	ldmpl	lr!, {r1, r3, r5, r6, r7, fp}
    80b4:	001c0800 	andseq	r0, ip, r0, lsl #16
    80b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    80bc:	000015ec 	andeq	r1, r0, ip, ror #11
    80c0:	00263614 	eoreq	r3, r6, r4, lsl r6
    80c4:	08ea0100 	stmiaeq	sl!, {r8}^
    80c8:	000004ac 	andeq	r0, r0, ip, lsr #9
    80cc:	8c145001 	ldchi	0, cr5, [r4], {1}
    80d0:	0100002a 	tsteq	r0, sl, lsr #32
    80d4:	004c08ea 	subeq	r0, ip, sl, ror #17
    80d8:	51010000 	mrspl	r0, (UNDEF: 1)
    80dc:	00292115 	eoreq	r2, r9, r5, lsl r1
    80e0:	08ea0100 	stmiaeq	sl!, {r8}^
    80e4:	0000004c 	andeq	r0, r0, ip, asr #32
    80e8:	000045a6 	andeq	r4, r0, r6, lsr #11
    80ec:	28132000 	ldmdacs	r3, {sp}
    80f0:	12010000 	andne	r0, r1, #0
    80f4:	0058da09 	subseq	sp, r8, r9, lsl #20
    80f8:	00004408 	andeq	r4, r0, r8, lsl #8
    80fc:	339c0100 	orrscc	r0, ip, #0, 2
    8100:	15000016 	strne	r0, [r0, #-22]
    8104:	00002636 	andeq	r2, r0, r6, lsr r6
    8108:	ac091201 	sfmge	f1, 4, [r9], {1}
    810c:	c7000004 	strgt	r0, [r0, -r4]
    8110:	15000045 	strne	r0, [r0, #-69]	; 0x45
    8114:	00002a8c 	andeq	r2, r0, ip, lsl #21
    8118:	4c091201 	sfmmi	f1, 4, [r9], {1}
    811c:	e7000000 	str	r0, [r0, -r0]
    8120:	15000045 	strne	r0, [r0, #-69]	; 0x45
    8124:	00000922 	andeq	r0, r0, r2, lsr #18
    8128:	4c091201 	sfmmi	f1, 4, [r9], {1}
    812c:	21000000 	mrscs	r0, (UNDEF: 0)
    8130:	00000046 	andeq	r0, r0, r6, asr #32
    8134:	00294d20 	eoreq	r4, r9, r0, lsr #26
    8138:	09380100 	ldmdbeq	r8!, {r8}
    813c:	0800591e 	stmdaeq	r0, {r1, r2, r3, r4, r8, fp, ip, lr}
    8140:	00000018 	andeq	r0, r0, r8, lsl r0
    8144:	16669c01 	strbtne	r9, [r6], -r1, lsl #24
    8148:	36140000 	ldrcc	r0, [r4], -r0
    814c:	01000026 	tsteq	r0, r6, lsr #32
    8150:	04ac0938 	strteq	r0, [ip], #2360	; 0x938
    8154:	50010000 	andpl	r0, r1, r0
    8158:	00169114 	andseq	r9, r6, r4, lsl r1
    815c:	09380100 	ldmdbeq	r8!, {r8}
    8160:	000000cf 	andeq	r0, r0, pc, asr #1
    8164:	20005101 	andcs	r5, r0, r1, lsl #2
    8168:	000025d9 	ldrdeq	r2, [r0], -r9
    816c:	36095501 	strcc	r5, [r9], -r1, lsl #10
    8170:	18080059 	stmdane	r8, {r0, r3, r4, r6}
    8174:	01000000 	mrseq	r0, (UNDEF: 0)
    8178:	0016999c 	mulseq	r6, ip, r9
    817c:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    8180:	55010000 	strpl	r0, [r1, #-0]
    8184:	0004ac09 	andeq	sl, r4, r9, lsl #24
    8188:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    818c:	00002965 	andeq	r2, r0, r5, ror #18
    8190:	4c095501 	cfstr32mi	mvfx5, [r9], {1}
    8194:	01000000 	mrseq	r0, (UNDEF: 0)
    8198:	cb200051 	blgt	8082e4 <__Stack_Size+0x807ee4>
    819c:	01000028 	tsteq	r0, r8, lsr #32
    81a0:	594e0970 	stmdbpl	lr, {r4, r5, r6, r8, fp}^
    81a4:	00180800 	andseq	r0, r8, r0, lsl #16
    81a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    81ac:	000016cc 	andeq	r1, r0, ip, asr #13
    81b0:	00263614 	eoreq	r3, r6, r4, lsl r6
    81b4:	09700100 	ldmdbeq	r0!, {r8}^
    81b8:	000004ac 	andeq	r0, r0, ip, lsr #9
    81bc:	91145001 	tstls	r4, r1
    81c0:	01000016 	tsteq	r0, r6, lsl r0
    81c4:	00cf0970 	sbceq	r0, pc, r0, ror r9	; <UNPREDICTABLE>
    81c8:	51010000 	mrspl	r0, (UNDEF: 1)
    81cc:	2b3f2000 	blcs	fd01d4 <__Stack_Size+0xfcfdd4>
    81d0:	8d010000 	stchi	0, cr0, [r1, #-0]
    81d4:	00596609 	subseq	r6, r9, r9, lsl #12
    81d8:	00001608 	andeq	r1, r0, r8, lsl #12
    81dc:	019c0100 	orrseq	r0, ip, r0, lsl #2
    81e0:	14000017 	strne	r0, [r0], #-23
    81e4:	00002636 	andeq	r2, r0, r6, lsr r6
    81e8:	ac098d01 	stcge	13, cr8, [r9], {1}
    81ec:	01000004 	tsteq	r0, r4
    81f0:	26011550 			; <UNDEFINED> instruction: 0x26011550
    81f4:	8d010000 	stchi	0, cr0, [r1, #-0]
    81f8:	00004c09 	andeq	r4, r0, r9, lsl #24
    81fc:	00464200 	subeq	r4, r6, r0, lsl #4
    8200:	e4200000 	strt	r0, [r0], #-0
    8204:	01000027 	tsteq	r0, r7, lsr #32
    8208:	597c09ae 	ldmdbpl	ip!, {r1, r2, r3, r5, r7, r8, fp}^
    820c:	00160800 	andseq	r0, r6, r0, lsl #16
    8210:	9c010000 	stcls	0, cr0, [r1], {-0}
    8214:	00001736 	andeq	r1, r0, r6, lsr r7
    8218:	00263614 	eoreq	r3, r6, r4, lsl r6
    821c:	09ae0100 	stmibeq	lr!, {r8}
    8220:	000004ac 	andeq	r0, r0, ip, lsr #9
    8224:	56155001 	ldrpl	r5, [r5], -r1
    8228:	0100002b 	tsteq	r0, fp, lsr #32
    822c:	004c09ae 	subeq	r0, ip, lr, lsr #19
    8230:	46630000 	strbtmi	r0, [r3], -r0
    8234:	20000000 	andcs	r0, r0, r0
    8238:	00002a15 	andeq	r2, r0, r5, lsl sl
    823c:	9209ca01 	andls	ip, r9, #4096	; 0x1000
    8240:	16080059 			; <UNDEFINED> instruction: 0x16080059
    8244:	01000000 	mrseq	r0, (UNDEF: 0)
    8248:	00176b9c 	mulseq	r7, ip, fp
    824c:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    8250:	ca010000 	bgt	48258 <__Stack_Size+0x47e58>
    8254:	0004ac09 	andeq	sl, r4, r9, lsl #24
    8258:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    825c:	00002670 	andeq	r2, r0, r0, ror r6
    8260:	4c09ca01 	stcmi	10, cr12, [r9], {1}
    8264:	84000000 	strhi	r0, [r0], #-0
    8268:	00000046 	andeq	r0, r0, r6, asr #32
    826c:	002d2320 	eoreq	r2, sp, r0, lsr #6
    8270:	09e40100 	stmibeq	r4!, {r8}^
    8274:	080059a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip, lr}
    8278:	00000016 	andeq	r0, r0, r6, lsl r0
    827c:	17a09c01 	strne	r9, [r0, r1, lsl #24]!
    8280:	36140000 	ldrcc	r0, [r4], -r0
    8284:	01000026 	tsteq	r0, r6, lsr #32
    8288:	04ac09e4 	strteq	r0, [ip], #2532	; 0x9e4
    828c:	50010000 	andpl	r0, r1, r0
    8290:	002be215 	eoreq	lr, fp, r5, lsl r2
    8294:	09e40100 	stmibeq	r4!, {r8}^
    8298:	0000004c 	andeq	r0, r0, ip, asr #32
    829c:	000046a5 	andeq	r4, r0, r5, lsr #13
    82a0:	28422000 	stmdacs	r2, {sp}^
    82a4:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    82a8:	0059be09 	subseq	fp, r9, r9, lsl #28
    82ac:	00000408 	andeq	r0, r0, r8, lsl #8
    82b0:	d39c0100 	orrsle	r0, ip, #0, 2
    82b4:	14000017 	strne	r0, [r0], #-23
    82b8:	00002636 	andeq	r2, r0, r6, lsr r6
    82bc:	ac09f901 	stcge	9, cr15, [r9], {1}
    82c0:	01000004 	tsteq	r0, r4
    82c4:	243f1450 	ldrtcs	r1, [pc], #-1104	; 82cc <__Stack_Size+0x7ecc>
    82c8:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    82cc:	00004c09 	andeq	r4, r0, r9, lsl #24
    82d0:	00510100 	subseq	r0, r1, r0, lsl #2
    82d4:	002c0a20 	eoreq	r0, ip, r0, lsr #20
    82d8:	0a0a0100 	beq	2886e0 <__Stack_Size+0x2882e0>
    82dc:	080059c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, ip, lr}
    82e0:	00000004 	andeq	r0, r0, r4
    82e4:	18069c01 	stmdane	r6, {r0, sl, fp, ip, pc}
    82e8:	36140000 	ldrcc	r0, [r4], -r0
    82ec:	01000026 	tsteq	r0, r6, lsr #32
    82f0:	04ac0a0a 	strteq	r0, [ip], #2570	; 0xa0a
    82f4:	50010000 	andpl	r0, r1, r0
    82f8:	002c1114 	eoreq	r1, ip, r4, lsl r1
    82fc:	0a0a0100 	beq	288704 <__Stack_Size+0x288304>
    8300:	0000004c 	andeq	r0, r0, ip, asr #32
    8304:	20005101 	andcs	r5, r0, r1, lsl #2
    8308:	00000d55 	andeq	r0, r0, r5, asr sp
    830c:	c60a1c01 	strgt	r1, [sl], -r1, lsl #24
    8310:	04080059 	streq	r0, [r8], #-89	; 0x59
    8314:	01000000 	mrseq	r0, (UNDEF: 0)
    8318:	0018399c 	mulseq	r8, ip, r9
    831c:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    8320:	1c010000 	stcne	0, cr0, [r1], {-0}
    8324:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    8328:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    832c:	00000d5c 	andeq	r0, r0, ip, asr sp
    8330:	4c0a1c01 	stcmi	12, cr1, [sl], {1}
    8334:	01000000 	mrseq	r0, (UNDEF: 0)
    8338:	d4200051 	strtle	r0, [r0], #-81	; 0x51
    833c:	01000024 	tsteq	r0, r4, lsr #32
    8340:	59ca0a2e 	stmibpl	sl, {r1, r2, r3, r5, r9, fp}^
    8344:	00040800 	andeq	r0, r4, r0, lsl #16
    8348:	9c010000 	stcls	0, cr0, [r1], {-0}
    834c:	0000186c 	andeq	r1, r0, ip, ror #16
    8350:	00263614 	eoreq	r3, r6, r4, lsl r6
    8354:	0a2e0100 	beq	b8875c <__Stack_Size+0xb8835c>
    8358:	000004ac 	andeq	r0, r0, ip, lsr #9
    835c:	db145001 	blle	51c368 <__Stack_Size+0x51bf68>
    8360:	01000024 	tsteq	r0, r4, lsr #32
    8364:	004c0a2e 	subeq	r0, ip, lr, lsr #20
    8368:	51010000 	mrspl	r0, (UNDEF: 1)
    836c:	29a82000 	stmibcs	r8!, {sp}
    8370:	40010000 	andmi	r0, r1, r0
    8374:	0059ce0a 	subseq	ip, r9, sl, lsl #28
    8378:	00000408 	andeq	r0, r0, r8, lsl #8
    837c:	9f9c0100 	svcls	0x009c0100
    8380:	14000018 	strne	r0, [r0], #-24
    8384:	00002636 	andeq	r2, r0, r6, lsr r6
    8388:	ac0a4001 	stcge	0, cr4, [sl], {1}
    838c:	01000004 	tsteq	r0, r4
    8390:	29af1450 	stmibcs	pc!, {r4, r6, sl, ip}	; <UNPREDICTABLE>
    8394:	40010000 	andmi	r0, r1, r0
    8398:	00004c0a 	andeq	r4, r0, sl, lsl #24
    839c:	00510100 	subseq	r0, r1, r0, lsl #2
    83a0:	0024e420 	eoreq	lr, r4, r0, lsr #8
    83a4:	0a520100 	beq	14887ac <__Stack_Size+0x14883ac>
    83a8:	080059d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, lr}
    83ac:	00000006 	andeq	r0, r0, r6
    83b0:	18d29c01 	ldmne	r2, {r0, sl, fp, ip, pc}^
    83b4:	36140000 	ldrcc	r0, [r4], -r0
    83b8:	01000026 	tsteq	r0, r6, lsr #32
    83bc:	04ac0a52 	strteq	r0, [ip], #2642	; 0xa52
    83c0:	50010000 	andpl	r0, r1, r0
    83c4:	0024eb14 	eoreq	lr, r4, r4, lsl fp
    83c8:	0a520100 	beq	14887d0 <__Stack_Size+0x14883d0>
    83cc:	0000004c 	andeq	r0, r0, ip, asr #32
    83d0:	20005101 	andcs	r5, r0, r1, lsl #2
    83d4:	00002ae7 	andeq	r2, r0, r7, ror #21
    83d8:	d80a6a01 	stmdale	sl, {r0, r9, fp, sp, lr}
    83dc:	16080059 			; <UNDEFINED> instruction: 0x16080059
    83e0:	01000000 	mrseq	r0, (UNDEF: 0)
    83e4:	0019079c 	mulseq	r9, ip, r7
    83e8:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    83ec:	6a010000 	bvs	483f4 <__Stack_Size+0x47ff4>
    83f0:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    83f4:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    83f8:	00002a60 	andeq	r2, r0, r0, ror #20
    83fc:	4c0a6a01 	stcmi	10, cr6, [sl], {1}
    8400:	c6000000 	strgt	r0, [r0], -r0
    8404:	00000046 	andeq	r0, r0, r6, asr #32
    8408:	0028f220 	eoreq	pc, r8, r0, lsr #4
    840c:	0a860100 	beq	fe188814 <SCS_BASE+0x1e17a814>
    8410:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
    8414:	0000001a 	andeq	r0, r0, sl, lsl r0
    8418:	193c9c01 	ldmdbne	ip!, {r0, sl, fp, ip, pc}
    841c:	36140000 	ldrcc	r0, [r4], -r0
    8420:	01000026 	tsteq	r0, r6, lsr #32
    8424:	04ac0a86 	strteq	r0, [ip], #2694	; 0xa86
    8428:	50010000 	andpl	r0, r1, r0
    842c:	002a6015 	eoreq	r6, sl, r5, lsl r0
    8430:	0a860100 	beq	fe188838 <SCS_BASE+0x1e17a838>
    8434:	0000004c 	andeq	r0, r0, ip, asr #32
    8438:	000046e7 	andeq	r4, r0, r7, ror #13
    843c:	2ccc2000 	stclcs	0, cr2, [ip], {0}
    8440:	8a010000 	bhi	48448 <__Stack_Size+0x48048>
    8444:	005a0802 	subseq	r0, sl, r2, lsl #16
    8448:	00006e08 	andeq	r6, r0, r8, lsl #28
    844c:	3e9c0100 	fmlcce	f0, f4, f0
    8450:	1500001a 	strne	r0, [r0, #-26]
    8454:	00002636 	andeq	r2, r0, r6, lsr r6
    8458:	ac028a01 	stcge	10, cr8, [r2], {1}
    845c:	08000004 	stmdaeq	r0, {r2}
    8460:	15000047 	strne	r0, [r0, #-71]	; 0x47
    8464:	00002976 	andeq	r2, r0, r6, ror r9
    8468:	24028a01 	strcs	r8, [r2], #-2561	; 0xa01
    846c:	6e000009 	cdpvs	0, 0, cr0, cr0, cr9, {0}
    8470:	16000047 	strne	r0, [r0], -r7, asr #32
    8474:	00002b95 	muleq	r0, r5, fp
    8478:	4c028c01 	stcmi	12, cr8, [r2], {1}
    847c:	b3000000 	movwlt	r0, #0
    8480:	16000047 	strne	r0, [r0], -r7, asr #32
    8484:	00002abb 			; <UNDEFINED> instruction: 0x00002abb
    8488:	4c028d01 	stcmi	13, cr8, [r2], {1}
    848c:	dd000000 	stcle	0, cr0, [r0, #-0]
    8490:	1a000047 	bne	85b4 <__Stack_Size+0x81b4>
    8494:	08005a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip, lr}
    8498:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    849c:	000019a6 	andeq	r1, r0, r6, lsr #19
    84a0:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    84a4:	1a000075 	bne	8680 <__Stack_Size+0x8280>
    84a8:	08005a3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, fp, ip, lr}
    84ac:	000018d2 	ldrdeq	r1, [r0], -r2
    84b0:	000019ba 			; <UNDEFINED> instruction: 0x000019ba
    84b4:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    84b8:	1a000075 	bne	8694 <__Stack_Size+0x8294>
    84bc:	08005a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip, lr}
    84c0:	00000527 	andeq	r0, r0, r7, lsr #10
    84c4:	000019da 	ldrdeq	r1, [r0], -sl
    84c8:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    84cc:	011b0076 	tsteq	fp, r6, ror r0
    84d0:	00770251 	rsbseq	r0, r7, r1, asr r2
    84d4:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    84d8:	1c000075 	stcne	0, cr0, [r0], {117}	; 0x75
    84dc:	08005a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, ip, lr}
    84e0:	00001907 	andeq	r1, r0, r7, lsl #18
    84e4:	000019ef 	andeq	r1, r0, pc, ror #19
    84e8:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    84ec:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    84f0:	005a5627 	subseq	r5, sl, r7, lsr #12
    84f4:	00052708 	andeq	r2, r5, r8, lsl #14
    84f8:	5a5e1a00 	bpl	178ed00 <__Stack_Size+0x178e900>
    84fc:	19070800 	stmdbne	r7, {fp}
    8500:	1a0c0000 	bne	308508 <__Stack_Size+0x308108>
    8504:	011b0000 	tsteq	fp, r0
    8508:	00750250 	rsbseq	r0, r5, r0, asr r2
    850c:	5a6a1a00 	bpl	1a8ed14 <__Stack_Size+0x1a8e914>
    8510:	04b20800 	ldrteq	r0, [r2], #2048	; 0x800
    8514:	1a2c0000 	bne	b0851c <__Stack_Size+0xb0811c>
    8518:	011b0000 	tsteq	fp, r0
    851c:	00760252 	rsbseq	r0, r6, r2, asr r2
    8520:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    8524:	011b0077 	tsteq	fp, r7, ror r0
    8528:	00750250 	rsbseq	r0, r5, r0, asr r2
    852c:	5a761d00 	bpl	1d8f934 <__Stack_Size+0x1d8f534>
    8530:	18d20800 	ldmne	r2, {fp}^
    8534:	011b0000 	tsteq	fp, r0
    8538:	01f30350 	mvnseq	r0, r0, asr r3
    853c:	20000050 	andcs	r0, r0, r0, asr r0
    8540:	00002b03 	andeq	r2, r0, r3, lsl #22
    8544:	760aa201 	strvc	sl, [sl], -r1, lsl #4
    8548:	1608005a 			; <UNDEFINED> instruction: 0x1608005a
    854c:	01000000 	mrseq	r0, (UNDEF: 0)
    8550:	001a739c 	mulseq	sl, ip, r3
    8554:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    8558:	a2010000 	andge	r0, r1, #0
    855c:	0004ac0a 	andeq	sl, r4, sl, lsl #24
    8560:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    8564:	00002a60 	andeq	r2, r0, r0, ror #20
    8568:	4c0aa201 	sfmmi	f2, 1, [sl], {1}
    856c:	07000000 	streq	r0, [r0, -r0]
    8570:	00000048 	andeq	r0, r0, r8, asr #32
    8574:	00265c20 	eoreq	r5, r6, r0, lsr #24
    8578:	0abe0100 	beq	fef88980 <SCS_BASE+0x1ef7a980>
    857c:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    8580:	0000001a 	andeq	r0, r0, sl, lsl r0
    8584:	1aa89c01 	bne	fea2f590 <SCS_BASE+0x1ea21590>
    8588:	36140000 	ldrcc	r0, [r4], -r0
    858c:	01000026 	tsteq	r0, r6, lsr #32
    8590:	04ac0abe 	strteq	r0, [ip], #2750	; 0xabe
    8594:	50010000 	andpl	r0, r1, r0
    8598:	002a6015 	eoreq	r6, sl, r5, lsl r0
    859c:	0abe0100 	beq	fef889a4 <SCS_BASE+0x1ef7a9a4>
    85a0:	0000004c 	andeq	r0, r0, ip, asr #32
    85a4:	00004828 	andeq	r4, r0, r8, lsr #16
    85a8:	29872a00 	stmibcs	r7, {r9, fp, sp}
    85ac:	4b010000 	blmi	485b4 <__Stack_Size+0x481b4>
    85b0:	1b0a010c 	blne	2889e8 <__Stack_Size+0x2885e8>
    85b4:	36100000 	ldrcc	r0, [r0], -r0
    85b8:	01000026 	tsteq	r0, r6, lsr #32
    85bc:	04ac0c4b 	strteq	r0, [ip], #3147	; 0xc4b
    85c0:	73100000 	tstvc	r0, #0
    85c4:	0100002b 	tsteq	r0, fp, lsr #32
    85c8:	004c0c4b 	subeq	r0, ip, fp, asr #24
    85cc:	17100000 	ldrne	r0, [r0, -r0]
    85d0:	0100002b 	tsteq	r0, fp, lsr #32
    85d4:	004c0c4b 	subeq	r0, ip, fp, asr #24
    85d8:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    85dc:	0100002d 	tsteq	r0, sp, lsr #32
    85e0:	004c0c4c 	subeq	r0, ip, ip, asr #24
    85e4:	83110000 	tsthi	r1, #0
    85e8:	0100002a 	tsteq	r0, sl, lsr #32
    85ec:	004c0c4e 	subeq	r0, ip, lr, asr #24
    85f0:	a3110000 	tstge	r1, #0
    85f4:	01000027 	tsteq	r0, r7, lsr #32
    85f8:	004c0c4e 	subeq	r0, ip, lr, asr #24
    85fc:	742b0000 	strtvc	r0, [fp], #-0
    8600:	0100706d 	tsteq	r0, sp, rrx
    8604:	004c0c4e 	subeq	r0, ip, lr, asr #24
    8608:	2a000000 	bcs	8610 <__Stack_Size+0x8210>
    860c:	00002c3b 	andeq	r2, r0, fp, lsr ip
    8610:	010c7a01 	tsteq	ip, r1, lsl #20
    8614:	00001b6c 	andeq	r1, r0, ip, ror #22
    8618:	00263610 	eoreq	r3, r6, r0, lsl r6
    861c:	0c7a0100 	ldfeqe	f0, [sl], #-0
    8620:	000004ac 	andeq	r0, r0, ip, lsr #9
    8624:	002b7310 	eoreq	r7, fp, r0, lsl r3
    8628:	0c7a0100 	ldfeqe	f0, [sl], #-0
    862c:	0000004c 	andeq	r0, r0, ip, asr #32
    8630:	002b1710 	eoreq	r1, fp, r0, lsl r7
    8634:	0c7a0100 	ldfeqe	f0, [sl], #-0
    8638:	0000004c 	andeq	r0, r0, ip, asr #32
    863c:	002d0810 	eoreq	r0, sp, r0, lsl r8
    8640:	0c7b0100 	ldfeqe	f0, [fp], #-0
    8644:	0000004c 	andeq	r0, r0, ip, asr #32
    8648:	002a8311 	eoreq	r8, sl, r1, lsl r3
    864c:	0c7d0100 	ldfeqe	f0, [sp], #-0
    8650:	0000004c 	andeq	r0, r0, ip, asr #32
    8654:	0027a311 	eoreq	sl, r7, r1, lsl r3
    8658:	0c7d0100 	ldfeqe	f0, [sp], #-0
    865c:	0000004c 	andeq	r0, r0, ip, asr #32
    8660:	706d742b 	rsbvc	r7, sp, fp, lsr #8
    8664:	0c7d0100 	ldfeqe	f0, [sp], #-0
    8668:	0000004c 	andeq	r0, r0, ip, asr #32
    866c:	2cfd2000 	ldclcs	0, cr2, [sp]
    8670:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    8674:	005aa602 	subseq	sl, sl, r2, lsl #12
    8678:	0000b608 	andeq	fp, r0, r8, lsl #12
    867c:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    8680:	1500001c 	strne	r0, [r0, #-28]
    8684:	00002636 	andeq	r2, r0, r6, lsr r6
    8688:	ac024901 	stcge	9, cr4, [r2], {1}
    868c:	49000004 	stmdbmi	r0, {r2}
    8690:	15000048 	strne	r0, [r0, #-72]	; 0x48
    8694:	00002976 	andeq	r2, r0, r6, ror r9
    8698:	24024901 	strcs	r4, [r2], #-2305	; 0x901
    869c:	e1000009 	tst	r0, r9
    86a0:	2c000048 	stccs	0, cr0, [r0], {72}	; 0x48
    86a4:	00001aa8 	andeq	r1, r0, r8, lsr #21
    86a8:	08005ae0 	stmdaeq	r0, {r5, r6, r7, r9, fp, ip, lr}
    86ac:	00000078 	andeq	r0, r0, r8, ror r0
    86b0:	fc026a01 	stc2	10, cr6, [r2], {1}
    86b4:	2200001b 	andcs	r0, r0, #27
    86b8:	00001ad9 	ldrdeq	r1, [r0], -r9
    86bc:	0000493f 	andeq	r4, r0, pc, lsr r9
    86c0:	001acd22 	andseq	ip, sl, r2, lsr #26
    86c4:	00495200 	subeq	r5, r9, r0, lsl #4
    86c8:	1ac12200 	bne	ff050ed0 <SCS_BASE+0x1f042ed0>
    86cc:	49650000 	stmdbmi	r5!, {}^	; <UNPREDICTABLE>
    86d0:	b5220000 	strlt	r0, [r2, #-0]!
    86d4:	7800001a 	stmdavc	r0, {r1, r3, r4}
    86d8:	2d000049 	stccs	0, cr0, [r0, #-292]	; 0xfffffedc
    86dc:	00000078 	andeq	r0, r0, r8, ror r0
    86e0:	001ae525 	andseq	lr, sl, r5, lsr #10
    86e4:	00499900 	subeq	r9, r9, r0, lsl #18
    86e8:	1af12500 	bne	ffc51af0 <SCS_BASE+0x1fc43af0>
    86ec:	49d40000 	ldmibmi	r4, {}^	; <UNPREDICTABLE>
    86f0:	fd250000 	stc2	0, cr0, [r5, #-0]
    86f4:	0a00001a 	beq	8764 <__Stack_Size+0x8364>
    86f8:	0000004a 	andeq	r0, r0, sl, asr #32
    86fc:	1b0a2c00 	blne	293704 <__Stack_Size+0x293304>
    8700:	5b1e0000 	blpl	788708 <__Stack_Size+0x788308>
    8704:	00980800 	addseq	r0, r8, r0, lsl #16
    8708:	74010000 	strvc	r0, [r1], #-0
    870c:	001c5602 	andseq	r5, ip, r2, lsl #12
    8710:	1b3b2200 	blne	ed0f18 <__Stack_Size+0xed0b18>
    8714:	4a2d0000 	bmi	b4871c <__Stack_Size+0xb4831c>
    8718:	2f220000 	svccs	0x00220000
    871c:	4000001b 	andmi	r0, r0, fp, lsl r0
    8720:	2200004a 	andcs	r0, r0, #74	; 0x4a
    8724:	00001b23 	andeq	r1, r0, r3, lsr #22
    8728:	00004a53 	andeq	r4, r0, r3, asr sl
    872c:	001b1722 	andseq	r1, fp, r2, lsr #14
    8730:	004a6600 	subeq	r6, sl, r0, lsl #12
    8734:	00982d00 	addseq	r2, r8, r0, lsl #26
    8738:	47250000 	strmi	r0, [r5, -r0]!
    873c:	8700001b 	smladhi	r0, fp, r0, r0
    8740:	2500004a 	strcs	r0, [r0, #-74]	; 0x4a
    8744:	00001b53 	andeq	r1, r0, r3, asr fp
    8748:	00004ace 	andeq	r4, r0, lr, asr #21
    874c:	001b5f25 	andseq	r5, fp, r5, lsr #30
    8750:	004b0900 	subeq	r0, fp, r0, lsl #18
    8754:	1a000000 	bne	875c <__Stack_Size+0x835c>
    8758:	08005aba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, fp, ip, lr}
    875c:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    8760:	00001c6a 	andeq	r1, r0, sl, ror #24
    8764:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    8768:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    876c:	08005ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, ip, lr}
    8770:	000018d2 	ldrdeq	r1, [r0], -r2
    8774:	00001c7f 	andeq	r1, r0, pc, ror ip
    8778:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    877c:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    8780:	005ace27 	subseq	ip, sl, r7, lsr #28
    8784:	00052708 	andeq	r2, r5, r8, lsl #14
    8788:	5ada1c00 	bpl	ff68f790 <SCS_BASE+0x1f681790>
    878c:	19070800 	stmdbne	r7, {fp}
    8790:	1c9d0000 	ldcne	0, cr0, [sp], {0}
    8794:	011b0000 	tsteq	fp, r0
    8798:	01f30350 	mvnseq	r0, r0, asr r3
    879c:	1e1c0050 	mrcne	0, 0, r0, cr12, cr0, {2}
    87a0:	3e08005b 	mcrcc	0, 0, r0, cr8, cr11, {2}
    87a4:	b200001a 	andlt	r0, r0, #26
    87a8:	1b00001c 	blne	8820 <__Stack_Size+0x8420>
    87ac:	f3035001 	vhadd.u8	d5, d3, d1
    87b0:	1d005001 	stcne	0, cr5, [r0, #-4]
    87b4:	08005b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, lr}
    87b8:	00001a73 	andeq	r1, r0, r3, ror sl
    87bc:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
    87c0:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    87c4:	27ab2000 	strcs	r2, [fp, r0]!
    87c8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    87cc:	005b5c0a 	subseq	r5, fp, sl, lsl #24
    87d0:	00001008 	andeq	r1, r0, r8
    87d4:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    87d8:	1400001c 	strne	r0, [r0], #-28
    87dc:	00002636 	andeq	r2, r0, r6, lsr r6
    87e0:	ac0ad801 	stcge	8, cr13, [sl], {1}
    87e4:	01000004 	tsteq	r0, r4
    87e8:	25561550 	ldrbcs	r1, [r6, #-1360]	; 0x550
    87ec:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    87f0:	00004c0a 	andeq	r4, r0, sl, lsl #24
    87f4:	004b2c00 	subeq	r2, fp, r0, lsl #24
    87f8:	df2e0000 	svcle	0x002e0000
    87fc:	01000002 	tsteq	r0, r2
    8800:	004c0aec 	subeq	r0, ip, ip, ror #21
    8804:	5b6c0000 	blpl	1b0880c <__Stack_Size+0x1b0840c>
    8808:	00060800 	andeq	r0, r6, r0, lsl #16
    880c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8810:	00001d24 	andeq	r1, r0, r4, lsr #26
    8814:	00263615 	eoreq	r3, r6, r5, lsl r6
    8818:	0aec0100 	beq	ffb08c20 <SCS_BASE+0x1fafac20>
    881c:	000004ac 	andeq	r0, r0, ip, lsr #9
    8820:	00004b4d 	andeq	r4, r0, sp, asr #22
    8824:	26c22e00 	strbcs	r2, [r2], r0, lsl #28
    8828:	fd010000 	stc2	0, cr0, [r1, #-0]
    882c:	00004c0a 	andeq	r4, r0, sl, lsl #24
    8830:	005b7200 	subseq	r7, fp, r0, lsl #4
    8834:	00000608 	andeq	r0, r0, r8, lsl #12
    8838:	4f9c0100 	svcmi	0x009c0100
    883c:	1500001d 	strne	r0, [r0, #-29]
    8840:	00002636 	andeq	r2, r0, r6, lsr r6
    8844:	ac0afd01 	stcge	13, cr15, [sl], {1}
    8848:	6e000004 	cdpvs	0, 0, cr0, cr0, cr4, {0}
    884c:	0000004b 	andeq	r0, r0, fp, asr #32
    8850:	0026d22e 	eoreq	sp, r6, lr, lsr #4
    8854:	0b0e0100 	bleq	388c5c <__Stack_Size+0x38885c>
    8858:	0000004c 	andeq	r0, r0, ip, asr #32
    885c:	08005b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, lr}
    8860:	00000006 	andeq	r0, r0, r6
    8864:	1d7a9c01 	ldclne	12, cr9, [sl, #-4]!
    8868:	36150000 	ldrcc	r0, [r5], -r0
    886c:	01000026 	tsteq	r0, r6, lsr #32
    8870:	04ac0b0e 	strteq	r0, [ip], #2830	; 0xb0e
    8874:	4b8f0000 	blmi	fe3c887c <SCS_BASE+0x1e3ba87c>
    8878:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    887c:	000026e2 	andeq	r2, r0, r2, ror #13
    8880:	4c0b1f01 	stcmi	15, cr1, [fp], {1}
    8884:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    8888:	0808005b 	stmdaeq	r8, {r0, r1, r3, r4, r6}
    888c:	01000000 	mrseq	r0, (UNDEF: 0)
    8890:	001da59c 	mulseq	sp, ip, r5
    8894:	26361500 	ldrtcs	r1, [r6], -r0, lsl #10
    8898:	1f010000 	svcne	0x00010000
    889c:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    88a0:	004bb000 	subeq	fp, fp, r0
    88a4:	e82e0000 	stmda	lr!, {}	; <UNPREDICTABLE>
    88a8:	01000029 	tsteq	r0, r9, lsr #32
    88ac:	004c0b2f 	subeq	r0, ip, pc, lsr #22
    88b0:	5b860000 	blpl	fe1888b8 <SCS_BASE+0x1e17a8b8>
    88b4:	00060800 	andeq	r0, r6, r0, lsl #16
    88b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    88bc:	00001dd0 	ldrdeq	r1, [r0], -r0
    88c0:	00263615 	eoreq	r3, r6, r5, lsl r6
    88c4:	0b2f0100 	bleq	bc8ccc <__Stack_Size+0xbc88cc>
    88c8:	000004ac 	andeq	r0, r0, ip, lsr #9
    88cc:	00004bd1 	ldrdeq	r4, [r0], -r1
    88d0:	289a2e00 	ldmcs	sl, {r9, sl, fp, sp}
    88d4:	3f010000 	svccc	0x00010000
    88d8:	00004c0b 	andeq	r4, r0, fp, lsl #24
    88dc:	005b8c00 	subseq	r8, fp, r0, lsl #24
    88e0:	00000608 	andeq	r0, r0, r8, lsl #12
    88e4:	fb9c0100 	blx	fe708cee <SCS_BASE+0x1e6facee>
    88e8:	1500001d 	strne	r0, [r0, #-29]
    88ec:	00002636 	andeq	r2, r0, r6, lsr r6
    88f0:	ac0b3f01 	stcge	15, cr3, [fp], {1}
    88f4:	f2000004 	vhadd.s8	d0, d0, d4
    88f8:	0000004b 	andeq	r0, r0, fp, asr #32
    88fc:	00252e2e 	eoreq	r2, r5, lr, lsr #28
    8900:	0b5d0100 	bleq	1748d08 <__Stack_Size+0x1748908>
    8904:	000000a4 	andeq	r0, r0, r4, lsr #1
    8908:	08005b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, lr}
    890c:	0000000c 	andeq	r0, r0, ip
    8910:	1e449c01 	cdpne	12, 4, cr9, cr4, cr1, {0}
    8914:	36150000 	ldrcc	r0, [r5], -r0
    8918:	01000026 	tsteq	r0, r6, lsr #32
    891c:	04ac0b5d 	strteq	r0, [ip], #2909	; 0xb5d
    8920:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    8924:	2b140000 	blcs	50892c <__Stack_Size+0x50852c>
    8928:	01000028 	tsteq	r0, r8, lsr #32
    892c:	004c0b5d 	subeq	r0, ip, sp, asr fp
    8930:	51010000 	mrspl	r0, (UNDEF: 1)
    8934:	00172016 	andseq	r2, r7, r6, lsl r0
    8938:	0b5f0100 	bleq	17c8d40 <__Stack_Size+0x17c8940>
    893c:	000000af 	andeq	r0, r0, pc, lsr #1
    8940:	00004c34 	andeq	r4, r0, r4, lsr ip
    8944:	27052000 	strcs	r2, [r5, -r0]
    8948:	86010000 	strhi	r0, [r1], -r0
    894c:	005b9e0b 	subseq	r9, fp, fp, lsl #28
    8950:	00000808 	andeq	r0, r0, r8, lsl #16
    8954:	799c0100 	ldmibvc	ip, {r8}
    8958:	1400001e 	strne	r0, [r0], #-30
    895c:	00002636 	andeq	r2, r0, r6, lsr r6
    8960:	ac0b8601 	stcge	6, cr8, [fp], {1}
    8964:	01000004 	tsteq	r0, r4
    8968:	282b1550 	stmdacs	fp!, {r4, r6, r8, sl, ip}
    896c:	86010000 	strhi	r0, [r1], -r0
    8970:	00004c0b 	andeq	r4, r0, fp, lsl #24
    8974:	004c5c00 	subeq	r5, ip, r0, lsl #24
    8978:	292e0000 	stmdbcs	lr!, {}	; <UNPREDICTABLE>
    897c:	0100000d 	tsteq	r0, sp
    8980:	00af0ba2 	adceq	r0, pc, r2, lsr #23
    8984:	5ba60000 	blpl	fe98898c <SCS_BASE+0x1e97a98c>
    8988:	00160800 	andseq	r0, r6, r0, lsl #16
    898c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8990:	00001ee2 	andeq	r1, r0, r2, ror #29
    8994:	00263615 	eoreq	r3, r6, r5, lsl r6
    8998:	0ba20100 	bleq	fe888da0 <SCS_BASE+0x1e87ada0>
    899c:	000004ac 	andeq	r0, r0, ip, lsr #9
    89a0:	00004c7d 	andeq	r4, r0, sp, ror ip
    89a4:	002ce214 	eoreq	lr, ip, r4, lsl r2
    89a8:	0ba20100 	bleq	fe888db0 <SCS_BASE+0x1e87adb0>
    89ac:	0000004c 	andeq	r0, r0, ip, asr #32
    89b0:	20165101 	andscs	r5, r6, r1, lsl #2
    89b4:	01000017 	tsteq	r0, r7, lsl r0
    89b8:	00af0ba4 	adceq	r0, pc, r4, lsr #23
    89bc:	4c9e0000 	ldcmi	0, cr0, [lr], {0}
    89c0:	21160000 	tstcs	r6, r0
    89c4:	01000017 	tsteq	r0, r7, lsl r0
    89c8:	004c0ba5 	subeq	r0, ip, r5, lsr #23
    89cc:	4cbd0000 	ldcmi	0, cr0, [sp]
    89d0:	a7160000 	ldrge	r0, [r6, -r0]
    89d4:	01000025 	tsteq	r0, r5, lsr #32
    89d8:	004c0ba5 	subeq	r0, ip, r5, lsr #23
    89dc:	4ce10000 	stclmi	0, cr0, [r1]
    89e0:	20000000 	andcs	r0, r0, r0
    89e4:	00000375 	andeq	r0, r0, r5, ror r3
    89e8:	bc0bcd01 	stclt	13, cr12, [fp], {1}
    89ec:	0808005b 	stmdaeq	r8, {r0, r1, r3, r4, r6}
    89f0:	01000000 	mrseq	r0, (UNDEF: 0)
    89f4:	001f179c 	mulseq	pc, ip, r7	; <UNPREDICTABLE>
    89f8:	26361400 	ldrtcs	r1, [r6], -r0, lsl #8
    89fc:	cd010000 	stcgt	0, cr0, [r1, #-0]
    8a00:	0004ac0b 	andeq	sl, r4, fp, lsl #24
    8a04:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    8a08:	00002ce2 	andeq	r2, r0, r2, ror #25
    8a0c:	4c0bcd01 	stcmi	13, cr12, [fp], {1}
    8a10:	05000000 	streq	r0, [r0, #-0]
    8a14:	0000004d 	andeq	r0, r0, sp, asr #32
    8a18:	00208b2f 	eoreq	r8, r0, pc, lsr #22
    8a1c:	01150500 	tsteq	r5, r0, lsl #10
    8a20:	00001f2e 	andeq	r1, r0, lr, lsr #30
    8a24:	00003a30 	andeq	r3, r0, r0, lsr sl
    8a28:	00cf3000 	sbceq	r3, pc, r0
    8a2c:	31000000 	mrscc	r0, (UNDEF: 0)
    8a30:	00001a51 	andeq	r1, r0, r1, asr sl
    8a34:	30011405 	andcc	r1, r1, r5, lsl #8
    8a38:	0000003a 	andeq	r0, r0, sl, lsr r0
    8a3c:	0000cf30 	andeq	ip, r0, r0, lsr pc
    8a40:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8a44:	0400000a 	streq	r0, [r0], #-10
    8a48:	00167500 	andseq	r7, r6, r0, lsl #10
    8a4c:	62010400 	andvs	r0, r1, #0, 8
    8a50:	01000008 	tsteq	r0, r8
    8a54:	00003011 	andeq	r3, r0, r1, lsl r0
    8a58:	000000fa 	strdeq	r0, [r0], -sl
    8a5c:	08005bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, lr}
    8a60:	00000342 	andeq	r0, r0, r2, asr #6
    8a64:	00001559 	andeq	r1, r0, r9, asr r5
    8a68:	1e070402 	cdpne	4, 0, cr0, cr7, cr2, {0}
    8a6c:	0200000b 	andeq	r0, r0, #11
    8a70:	09e20504 	stmibeq	r2!, {r2, r8, sl}^
    8a74:	02020000 	andeq	r0, r2, #0
    8a78:	0009a605 	andeq	sl, r9, r5, lsl #12
    8a7c:	06010200 	streq	r0, [r1], -r0, lsl #4
    8a80:	00000b77 	andeq	r0, r0, r7, ror fp
    8a84:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    8a88:	4c270200 	sfmmi	f0, 4, [r7], #-0
    8a8c:	02000000 	andeq	r0, r0, #0
    8a90:	0b190704 	bleq	64a6a8 <__Stack_Size+0x64a2a8>
    8a94:	75030000 	strvc	r0, [r3, #-0]
    8a98:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    8a9c:	00005e28 	andeq	r5, r0, r8, lsr #28
    8aa0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8aa4:	00000d39 	andeq	r0, r0, r9, lsr sp
    8aa8:	00387503 	eorseq	r7, r8, r3, lsl #10
    8aac:	006f2902 	rsbeq	r2, pc, r2, lsl #18
    8ab0:	01020000 	mrseq	r0, (UNDEF: 2)
    8ab4:	000b7508 	andeq	r7, fp, r8, lsl #10
    8ab8:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    8abc:	2f020000 	svccs	0x00020000
    8ac0:	00000081 	andeq	r0, r0, r1, lsl #1
    8ac4:	00004c05 	andeq	r4, r0, r5, lsl #24
    8ac8:	03470400 	movteq	r0, #29696	; 0x7400
    8acc:	30020000 	andcc	r0, r2, r0
    8ad0:	00000091 	muleq	r0, r1, r0
    8ad4:	00005e05 	andeq	r5, r0, r5, lsl #28
    8ad8:	02010600 	andeq	r0, r1, #0, 12
    8adc:	0000ab39 	andeq	sl, r0, r9, lsr fp
    8ae0:	198d0700 	stmibne	sp, {r8, r9, sl}
    8ae4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8ae8:	00544553 	subseq	r4, r4, r3, asr r5
    8aec:	05040001 	streq	r0, [r4, #-1]
    8af0:	02000009 	andeq	r0, r0, #9
    8af4:	00009639 	andeq	r9, r0, r9, lsr r6
    8af8:	21150400 	tstcs	r5, r0, lsl #8
    8afc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    8b00:	00000096 	muleq	r0, r6, r0
    8b04:	3b020106 	blcc	88f24 <__Stack_Size+0x88b24>
    8b08:	000000d6 	ldrdeq	r0, [r0], -r6
    8b0c:	0005f107 	andeq	pc, r5, r7, lsl #2
    8b10:	f2070000 	vhadd.s8	d0, d7, d0
    8b14:	0100000a 	tsteq	r0, sl
    8b18:	01140400 	tsteq	r4, r0, lsl #8
    8b1c:	3b020000 	blcc	88b24 <__Stack_Size+0x88724>
    8b20:	000000c1 	andeq	r0, r0, r1, asr #1
    8b24:	10070402 	andne	r0, r7, r2, lsl #8
    8b28:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8b2c:	0238031c 	eorseq	r0, r8, #28, 6	; 0x70000000
    8b30:	000001a6 	andeq	r0, r0, r6, lsr #3
    8b34:	0052530a 	subseq	r5, r2, sl, lsl #6
    8b38:	86023a03 	strhi	r3, [r2], -r3, lsl #20
    8b3c:	00000000 	andeq	r0, r0, r0
    8b40:	0009600b 	andeq	r6, r9, fp
    8b44:	023b0300 	eorseq	r0, fp, #0, 6
    8b48:	00000053 	andeq	r0, r0, r3, asr r0
    8b4c:	52440a02 	subpl	r0, r4, #8192	; 0x2000
    8b50:	023c0300 	eorseq	r0, ip, #0, 6
    8b54:	00000086 	andeq	r0, r0, r6, lsl #1
    8b58:	096a0b04 	stmdbeq	sl!, {r2, r8, r9, fp}^
    8b5c:	3d030000 	stccc	0, cr0, [r3, #-0]
    8b60:	00005302 	andeq	r5, r0, r2, lsl #6
    8b64:	420a0600 	andmi	r0, sl, #0, 12
    8b68:	03005252 	movweq	r5, #594	; 0x252
    8b6c:	0086023e 	addeq	r0, r6, lr, lsr r2
    8b70:	0b080000 	bleq	208b78 <__Stack_Size+0x208778>
    8b74:	00000974 	andeq	r0, r0, r4, ror r9
    8b78:	53023f03 	movwpl	r3, #12035	; 0x2f03
    8b7c:	0a000000 	beq	8b84 <__Stack_Size+0x8784>
    8b80:	3152430a 	cmpcc	r2, sl, lsl #6
    8b84:	02400300 	subeq	r0, r0, #0, 6
    8b88:	00000086 	andeq	r0, r0, r6, lsl #1
    8b8c:	097e0b0c 	ldmdbeq	lr!, {r2, r3, r8, r9, fp}^
    8b90:	41030000 	mrsmi	r0, (UNDEF: 3)
    8b94:	00005302 	andeq	r5, r0, r2, lsl #6
    8b98:	430a0e00 	movwmi	r0, #44544	; 0xae00
    8b9c:	03003252 	movweq	r3, #594	; 0x252
    8ba0:	00860242 	addeq	r0, r6, r2, asr #4
    8ba4:	0b100000 	bleq	408bac <__Stack_Size+0x4087ac>
    8ba8:	00000988 	andeq	r0, r0, r8, lsl #19
    8bac:	53024303 	movwpl	r4, #8963	; 0x2303
    8bb0:	12000000 	andne	r0, r0, #0
    8bb4:	3352430a 	cmpcc	r2, #671088640	; 0x28000000
    8bb8:	02440300 	subeq	r0, r4, #0, 6
    8bbc:	00000086 	andeq	r0, r0, r6, lsl #1
    8bc0:	09920b14 	ldmibeq	r2, {r2, r4, r8, r9, fp}
    8bc4:	45030000 	strmi	r0, [r3, #-0]
    8bc8:	00005302 	andeq	r5, r0, r2, lsl #6
    8bcc:	ae0b1600 	cfmadd32ge	mvax0, mvfx1, mvfx11, mvfx0
    8bd0:	03000002 	movweq	r0, #2
    8bd4:	00860246 	addeq	r0, r6, r6, asr #4
    8bd8:	0b180000 	bleq	608be0 <__Stack_Size+0x6087e0>
    8bdc:	0000099c 	muleq	r0, ip, r9
    8be0:	53024703 	movwpl	r4, #9987	; 0x2703
    8be4:	1a000000 	bne	8bec <__Stack_Size+0x87ec>
    8be8:	053d0c00 	ldreq	r0, [sp, #-3072]!	; 0xc00
    8bec:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
    8bf0:	0000e802 	andeq	lr, r0, r2, lsl #16
    8bf4:	04100d00 	ldreq	r0, [r0], #-3328	; 0xd00
    8bf8:	0002031a 	andeq	r0, r2, sl, lsl r3
    8bfc:	02f90e00 	rscseq	r0, r9, #0, 28
    8c00:	1c040000 	stcne	0, cr0, [r4], {-0}
    8c04:	00000041 	andeq	r0, r0, r1, asr #32
    8c08:	01990e00 	orrseq	r0, r9, r0, lsl #28
    8c0c:	1d040000 	stcne	0, cr0, [r4, #-0]
    8c10:	00000053 	andeq	r0, r0, r3, asr r0
    8c14:	01e90e04 	mvneq	r0, r4, lsl #28
    8c18:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    8c1c:	00000053 	andeq	r0, r0, r3, asr r0
    8c20:	0cad0e06 	stceq	14, cr0, [sp], #24
    8c24:	1f040000 	svcne	0x00040000
    8c28:	00000053 	andeq	r0, r0, r3, asr r0
    8c2c:	06550e08 	ldrbeq	r0, [r5], -r8, lsl #28
    8c30:	20040000 	andcs	r0, r4, r0
    8c34:	00000053 	andeq	r0, r0, r3, asr r0
    8c38:	06ae0e0a 	strteq	r0, [lr], sl, lsl #28
    8c3c:	21040000 	mrscs	r0, (UNDEF: 4)
    8c40:	00000053 	andeq	r0, r0, r3, asr r0
    8c44:	8004000c 	andhi	r0, r4, ip
    8c48:	0400000c 	streq	r0, [r0], #-12
    8c4c:	0001b222 	andeq	fp, r1, r2, lsr #4
    8c50:	04080d00 	streq	r0, [r8], #-3328	; 0xd00
    8c54:	00024725 	andeq	r4, r2, r5, lsr #14
    8c58:	2f430e00 	svccs	0x00430e00
    8c5c:	27040000 	strcs	r0, [r4, -r0]
    8c60:	00000053 	andeq	r0, r0, r3, asr r0
    8c64:	2ff10e00 	svccs	0x00f10e00
    8c68:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    8c6c:	00000053 	andeq	r0, r0, r3, asr r0
    8c70:	2d790e02 	ldclcs	14, cr0, [r9, #-8]!
    8c74:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    8c78:	00000053 	andeq	r0, r0, r3, asr r0
    8c7c:	30030e04 	andcc	r0, r3, r4, lsl #28
    8c80:	2a040000 	bcs	108c88 <__Stack_Size+0x108888>
    8c84:	00000053 	andeq	r0, r0, r3, asr r0
    8c88:	b2040006 	andlt	r0, r4, #6
    8c8c:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    8c90:	00020e2b 	andeq	r0, r2, fp, lsr #28
    8c94:	05140d00 	ldreq	r0, [r4, #-3328]	; 0xd00
    8c98:	00029719 	andeq	r9, r2, r9, lsl r7
    8c9c:	22b60e00 	adcscs	r0, r6, #0, 28
    8ca0:	1b050000 	blne	148ca8 <__Stack_Size+0x1488a8>
    8ca4:	00000041 	andeq	r0, r0, r1, asr #32
    8ca8:	21740e00 	cmncs	r4, r0, lsl #28
    8cac:	1c050000 	stcne	0, cr0, [r5], {-0}
    8cb0:	00000041 	andeq	r0, r0, r1, asr #32
    8cb4:	230e0e04 	movwcs	r0, #60932	; 0xee04
    8cb8:	1d050000 	stcne	0, cr0, [r5, #-0]
    8cbc:	00000041 	andeq	r0, r0, r1, asr #32
    8cc0:	22d20e08 	sbcscs	r0, r2, #8, 28	; 0x80
    8cc4:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
    8cc8:	00000041 	andeq	r0, r0, r1, asr #32
    8ccc:	22490e0c 	subcs	r0, r9, #12, 28	; 0xc0
    8cd0:	1f050000 	svcne	0x00050000
    8cd4:	00000041 	andeq	r0, r0, r1, asr #32
    8cd8:	3c040010 	stccc	0, cr0, [r4], {16}
    8cdc:	05000021 	streq	r0, [r0, #-33]	; 0x21
    8ce0:	00025220 	andeq	r5, r2, r0, lsr #4
    8ce4:	0bd10f00 	bleq	ff44c8ec <SCS_BASE+0x1f43e8ec>
    8ce8:	5a010000 	bpl	48cf0 <__Stack_Size+0x488f0>
    8cec:	08005bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, lr}
    8cf0:	00000094 	muleq	r0, r4, r0
    8cf4:	03729c01 	cmneq	r2, #256	; 0x100
    8cf8:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    8cfc:	0100002e 	tsteq	r0, lr, lsr #32
    8d00:	0003725a 	andeq	r7, r3, sl, asr r2
    8d04:	004d2600 	subeq	r2, sp, r0, lsl #12
    8d08:	5bf81100 	blpl	ffe0d110 <SCS_BASE+0x1fdff110>
    8d0c:	09e50800 	stmibeq	r5!, {fp}^
    8d10:	02e00000 	rsceq	r0, r0, #0
    8d14:	01120000 	tsteq	r2, r0
    8d18:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    8d1c:	0a035001 	beq	dcd28 <__Stack_Size+0xdc928>
    8d20:	13004000 	movwne	r4, #0
    8d24:	08005c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, lr}
    8d28:	000009e5 	andeq	r0, r0, r5, ror #19
    8d2c:	000002fa 	strdeq	r0, [r0], -sl
    8d30:	01510112 	cmpeq	r1, r2, lsl r1
    8d34:	50011230 	andpl	r1, r1, r0, lsr r2
    8d38:	40000a03 	andmi	r0, r0, r3, lsl #20
    8d3c:	5c101100 	ldfpls	f1, [r0], {-0}
    8d40:	09fc0800 	ldmibeq	ip!, {fp}^
    8d44:	03140000 	tsteq	r4, #0
    8d48:	01120000 	tsteq	r2, r0
    8d4c:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    8d50:	40035001 	andmi	r5, r3, r1
    8d54:	1100243d 	tstne	r0, sp, lsr r4
    8d58:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    8d5c:	000009fc 	strdeq	r0, [r0], -ip
    8d60:	0000032e 	andeq	r0, r0, lr, lsr #6
    8d64:	01510112 	cmpeq	r1, r2, lsl r1
    8d68:	50011231 	andpl	r1, r1, r1, lsr r2
    8d6c:	243e4003 	ldrtcs	r4, [lr], #-3
    8d70:	5c301100 	ldfpls	f1, [r0], #-0
    8d74:	09fc0800 	ldmibeq	ip!, {fp}^
    8d78:	03480000 	movteq	r0, #32768	; 0x8000
    8d7c:	01120000 	tsteq	r2, r0
    8d80:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    8d84:	40035001 	andmi	r5, r3, r1
    8d88:	1100243f 	tstne	r0, pc, lsr r4
    8d8c:	08005c40 	stmdaeq	r0, {r6, sl, fp, ip, lr}
    8d90:	000009fc 	strdeq	r0, [r0], -ip
    8d94:	00000362 	andeq	r0, r0, r2, ror #6
    8d98:	01510112 	cmpeq	r1, r2, lsl r1
    8d9c:	50011231 	andpl	r1, r1, r1, lsr r2
    8da0:	24404003 	strbcs	r4, [r0], #-3
    8da4:	5c4e1400 	cfstrdpl	mvd1, [lr], {-0}
    8da8:	09fc0800 	ldmibeq	ip!, {fp}^
    8dac:	01120000 	tsteq	r2, r0
    8db0:	00300151 	eorseq	r0, r0, r1, asr r1
    8db4:	a6041500 	strge	r1, [r4], -r0, lsl #10
    8db8:	0f000001 	svceq	0x00000001
    8dbc:	00000141 	andeq	r0, r0, r1, asr #2
    8dc0:	5c588c01 	mrrcpl	12, 0, r8, r8, cr1	; <UNPREDICTABLE>
    8dc4:	00880800 	addeq	r0, r8, r0, lsl #16
    8dc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    8dcc:	00000415 	andeq	r0, r0, r5, lsl r4
    8dd0:	002ef510 	eoreq	pc, lr, r0, lsl r5	; <UNPREDICTABLE>
    8dd4:	728c0100 	addvc	r0, ip, #0, 2
    8dd8:	b6000003 	strlt	r0, [r0], -r3
    8ddc:	1000004d 	andne	r0, r0, sp, asr #32
    8de0:	00002efc 	strdeq	r2, [r0], -ip
    8de4:	04158c01 	ldreq	r8, [r5], #-3073	; 0xc01
    8de8:	4de20000 	stclmi	0, cr0, [r2]
    8dec:	27160000 	ldrcs	r0, [r6, -r0]
    8df0:	0100001a 	tsteq	r0, sl, lsl r0
    8df4:	0000418e 	andeq	r4, r0, lr, lsl #3
    8df8:	004e0e00 	subeq	r0, lr, r0, lsl #28
    8dfc:	2e0f1600 	cfmadd32cs	mvax0, mvfx1, mvfx15, mvfx0
    8e00:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    8e04:	00000041 	andeq	r0, r0, r1, asr #32
    8e08:	00004efb 	strdeq	r4, [r0], -fp
    8e0c:	002d6a16 	eoreq	r6, sp, r6, lsl sl
    8e10:	418f0100 	orrmi	r0, pc, r0, lsl #2
    8e14:	72000000 	andvc	r0, r0, #0
    8e18:	1600004f 	strne	r0, [r0], -pc, asr #32
    8e1c:	00002f82 	andeq	r2, r0, r2, lsl #31
    8e20:	00419001 	subeq	r9, r1, r1
    8e24:	4feb0000 	svcmi	0x00eb0000
    8e28:	a5160000 	ldrge	r0, [r6, #-0]
    8e2c:	0100002e 	tsteq	r0, lr, lsr #32
    8e30:	00004191 	muleq	r0, r1, r1
    8e34:	004db600 	subeq	fp, sp, r0, lsl #12
    8e38:	2eb01700 	cdpcs	7, 11, cr1, cr0, cr0, {0}
    8e3c:	92010000 	andls	r0, r1, #0
    8e40:	00000297 	muleq	r0, r7, r2
    8e44:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
    8e48:	08005c9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, fp, ip, lr}
    8e4c:	00000a13 	andeq	r0, r0, r3, lsl sl
    8e50:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    8e54:	00005c91 	muleq	r0, r1, ip
    8e58:	02030415 	andeq	r0, r3, #352321536	; 0x15000000
    8e5c:	9e0f0000 	cdpls	0, 0, cr0, cr15, cr0, {0}
    8e60:	01000004 	tsteq	r0, r4
    8e64:	005ce0e8 	subseq	lr, ip, r8, ror #1
    8e68:	00001608 	andeq	r1, r0, r8, lsl #12
    8e6c:	3e9c0100 	fmlcce	f0, f4, f0
    8e70:	19000004 	stmdbne	r0, {r2}
    8e74:	00002efc 	strdeq	r2, [r0], -ip
    8e78:	0415e801 	ldreq	lr, [r5], #-2049	; 0x801
    8e7c:	50010000 	andpl	r0, r1, r0
    8e80:	2fbe0f00 	svccs	0x00be0f00
    8e84:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    8e88:	08005cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp, ip, lr}
    8e8c:	00000020 	andeq	r0, r0, r0, lsr #32
    8e90:	04809c01 	streq	r9, [r0], #3073	; 0xc01
    8e94:	f5190000 			; <UNDEFINED> instruction: 0xf5190000
    8e98:	0100002e 	tsteq	r0, lr, lsr #32
    8e9c:	000372ff 	strdeq	r7, [r3], -pc	; <UNPREDICTABLE>
    8ea0:	10500100 	subsne	r0, r0, r0, lsl #2
    8ea4:	00002e6c 	andeq	r2, r0, ip, ror #28
    8ea8:	0480ff01 	streq	pc, [r0], #3841	; 0xf01
    8eac:	50890000 	addpl	r0, r9, r0
    8eb0:	271a0000 	ldrcs	r0, [sl, -r0]
    8eb4:	0100001a 	tsteq	r0, sl, lsl r0
    8eb8:	00410101 	subeq	r0, r1, r1, lsl #2
    8ebc:	50aa0000 	adcpl	r0, sl, r0
    8ec0:	15000000 	strne	r0, [r0, #-0]
    8ec4:	00024704 	andeq	r4, r2, r4, lsl #14
    8ec8:	2e8f1b00 	vdivcs.f64	d1, d15, d0
    8ecc:	23010000 	movwcs	r0, #4096	; 0x1000
    8ed0:	005d1601 	subseq	r1, sp, r1, lsl #12
    8ed4:	00000c08 	andeq	r0, r0, r8, lsl #24
    8ed8:	ab9c0100 	blge	fe7092e0 <SCS_BASE+0x1e6fb2e0>
    8edc:	1c000004 	stcne	0, cr0, [r0], {4}
    8ee0:	00002e6c 	andeq	r2, r0, ip, ror #28
    8ee4:	80012301 	andhi	r2, r1, r1, lsl #6
    8ee8:	01000004 	tsteq	r0, r4
    8eec:	321b0050 	andscc	r0, fp, #80	; 0x50
    8ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ef4:	5d220137 	stfpls	f0, [r2, #-220]!	; 0xffffff24
    8ef8:	00180800 	andseq	r0, r8, r0, lsl #16
    8efc:	9c010000 	stcls	0, cr0, [r1], {-0}
    8f00:	000004de 	ldrdeq	r0, [r0], -lr
    8f04:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    8f08:	01370100 	teqeq	r7, r0, lsl #2
    8f0c:	00000372 	andeq	r0, r0, r2, ror r3
    8f10:	911c5001 	tstls	ip, r1
    8f14:	01000016 	tsteq	r0, r6, lsl r0
    8f18:	00d60137 	sbcseq	r0, r6, r7, lsr r1
    8f1c:	51010000 	mrspl	r0, (UNDEF: 1)
    8f20:	0a2e1b00 	beq	b8fb28 <__Stack_Size+0xb8f728>
    8f24:	62010000 	andvs	r0, r1, #0
    8f28:	005d3a01 	subseq	r3, sp, r1, lsl #20
    8f2c:	00003208 	andeq	r3, r0, r8, lsl #4
    8f30:	639c0100 	orrsvs	r0, ip, #0, 2
    8f34:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    8f38:	00002ef5 	strdeq	r2, [r0], -r5
    8f3c:	72016201 	andvc	r6, r1, #268435456	; 0x10000000
    8f40:	e4000003 	str	r0, [r0], #-3
    8f44:	1d000050 	stcne	0, cr0, [r0, #-320]	; 0xfffffec0
    8f48:	00002df7 	strdeq	r2, [r0], -r7
    8f4c:	53016201 	movwpl	r6, #4609	; 0x1201
    8f50:	1d000000 	stcne	0, cr0, [r0, #-0]
    8f54:	1d000051 	stcne	0, cr0, [r0, #-324]	; 0xfffffebc
    8f58:	00001691 	muleq	r0, r1, r6
    8f5c:	d6016201 	strle	r6, [r1], -r1, lsl #4
    8f60:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    8f64:	1a000051 	bne	90b0 <__Stack_Size+0x8cb0>
    8f68:	00003035 	andeq	r3, r0, r5, lsr r0
    8f6c:	41016401 	tstmi	r1, r1, lsl #8
    8f70:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    8f74:	1a000051 	bne	90c0 <__Stack_Size+0x8cc0>
    8f78:	00002f1c 	andeq	r2, r0, ip, lsl pc
    8f7c:	41016401 	tstmi	r1, r1, lsl #8
    8f80:	9c000000 	stcls	0, cr0, [r0], {-0}
    8f84:	1a000051 	bne	90d0 <__Stack_Size+0x8cd0>
    8f88:	00002ffc 	strdeq	r2, [r0], -ip
    8f8c:	41016401 	tstmi	r1, r1, lsl #8
    8f90:	d7000000 	strle	r0, [r0, -r0]
    8f94:	1e000051 	mcrne	0, 0, r0, cr0, cr1, {2}
    8f98:	00002ea5 	andeq	r2, r0, r5, lsr #29
    8f9c:	41016501 	tstmi	r1, r1, lsl #10
    8fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    8fa4:	ea1b0050 	b	6c90ec <__Stack_Size+0x6c8cec>
    8fa8:	0100002d 	tsteq	r0, sp, lsr #32
    8fac:	5d6c019d 	stfple	f0, [ip, #-628]!	; 0xfffffd8c
    8fb0:	00120800 	andseq	r0, r2, r0, lsl #16
    8fb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    8fb8:	000005a6 	andeq	r0, r0, r6, lsr #11
    8fbc:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    8fc0:	019d0100 	orrseq	r0, sp, r0, lsl #2
    8fc4:	00000372 	andeq	r0, r0, r2, ror r3
    8fc8:	821d5001 	andshi	r5, sp, #1
    8fcc:	0100002e 	tsteq	r0, lr, lsr #32
    8fd0:	0053019d 			; <UNDEFINED> instruction: 0x0053019d
    8fd4:	521f0000 	andspl	r0, pc, #0
    8fd8:	911c0000 	tstls	ip, r0
    8fdc:	01000016 	tsteq	r0, r6, lsl r0
    8fe0:	00d6019d 	smullseq	r0, r6, sp, r1
    8fe4:	52010000 	andpl	r0, r1, #0
    8fe8:	2ec11b00 	vdivcs.f64	d17, d1, d0
    8fec:	bc010000 	stclt	0, cr0, [r1], {-0}
    8ff0:	005d7e01 	subseq	r7, sp, r1, lsl #28
    8ff4:	00001608 	andeq	r1, r0, r8, lsl #12
    8ff8:	db9c0100 	blle	fe709400 <SCS_BASE+0x1e6fb400>
    8ffc:	1c000005 	stcne	0, cr0, [r0], {5}
    9000:	00002ef5 	strdeq	r2, [r0], -r5
    9004:	7201bc01 	andvc	fp, r1, #256	; 0x100
    9008:	01000003 	tsteq	r0, r3
    900c:	2f0d1d50 	svccs	0x000d1d50
    9010:	bc010000 	stclt	0, cr0, [r1], {-0}
    9014:	00006501 	andeq	r6, r0, r1, lsl #10
    9018:	00525900 	subseq	r5, r2, r0, lsl #18
    901c:	ce1b0000 	cdpgt	0, 1, cr0, cr11, cr0, {0}
    9020:	0100002f 	tsteq	r0, pc, lsr #32
    9024:	5d9401d5 	ldfpls	f0, [r4, #852]	; 0x354
    9028:	00160800 	andseq	r0, r6, r0, lsl #16
    902c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9030:	00000610 	andeq	r0, r0, r0, lsl r6
    9034:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    9038:	01d50100 	bicseq	r0, r5, r0, lsl #2
    903c:	00000372 	andeq	r0, r0, r2, ror r3
    9040:	dd1d5001 	ldcle	0, cr5, [sp, #-4]
    9044:	0100002d 	tsteq	r0, sp, lsr #32
    9048:	005301d5 	ldrsbeq	r0, [r3], #-21	; 0xffffffeb
    904c:	527a0000 	rsbspl	r0, sl, #0
    9050:	1b000000 	blne	9058 <__Stack_Size+0x8c58>
    9054:	00002f4f 	andeq	r2, r0, pc, asr #30
    9058:	aa01ea01 	bge	83864 <__Stack_Size+0x83464>
    905c:	1808005d 	stmdane	r8, {r0, r2, r3, r4, r6}
    9060:	01000000 	mrseq	r0, (UNDEF: 0)
    9064:	0006439c 	muleq	r6, ip, r3
    9068:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    906c:	ea010000 	b	49074 <__Stack_Size+0x48c74>
    9070:	00037201 	andeq	r7, r3, r1, lsl #4
    9074:	1c500100 	ldfnee	f0, [r0], {-0}
    9078:	00001691 	muleq	r0, r1, r6
    907c:	d601ea01 	strle	lr, [r1], -r1, lsl #20
    9080:	01000000 	mrseq	r0, (UNDEF: 0)
    9084:	401b0051 	andsmi	r0, fp, r1, asr r0
    9088:	0100002e 	tsteq	r0, lr, lsr #32
    908c:	5dc2020a 	sfmpl	f0, 2, [r2, #40]	; 0x28
    9090:	00160800 	andseq	r0, r6, r0, lsl #16
    9094:	9c010000 	stcls	0, cr0, [r1], {-0}
    9098:	00000678 	andeq	r0, r0, r8, ror r6
    909c:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    90a0:	020a0100 	andeq	r0, sl, #0, 2
    90a4:	00000372 	andeq	r0, r0, r2, ror r3
    90a8:	971d5001 	ldrls	r5, [sp, -r1]
    90ac:	0100002d 	tsteq	r0, sp, lsr #32
    90b0:	0053020a 	subseq	r0, r3, sl, lsl #4
    90b4:	529b0000 	addspl	r0, fp, #0
    90b8:	1b000000 	blne	90c0 <__Stack_Size+0x8cc0>
    90bc:	00002f75 	andeq	r2, r0, r5, ror pc
    90c0:	d8021f01 	stmdale	r2, {r0, r8, r9, sl, fp, ip}
    90c4:	1808005d 	stmdane	r8, {r0, r2, r3, r4, r6}
    90c8:	01000000 	mrseq	r0, (UNDEF: 0)
    90cc:	0006ab9c 	muleq	r6, ip, fp
    90d0:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    90d4:	1f010000 	svcne	0x00010000
    90d8:	00037202 	andeq	r7, r3, r2, lsl #4
    90dc:	1c500100 	ldfnee	f0, [r0], {-0}
    90e0:	00001691 	muleq	r0, r1, r6
    90e4:	d6021f01 	strle	r1, [r2], -r1, lsl #30
    90e8:	01000000 	mrseq	r0, (UNDEF: 0)
    90ec:	cf1b0051 	svcgt	0x001b0051
    90f0:	01000003 	tsteq	r0, r3
    90f4:	5df0023b 	lfmpl	f0, 2, [r0, #236]!	; 0xec
    90f8:	00080800 	andeq	r0, r8, r0, lsl #16
    90fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9100:	000006e0 	andeq	r0, r0, r0, ror #13
    9104:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    9108:	023b0100 	eorseq	r0, fp, #0, 2
    910c:	00000372 	andeq	r0, r0, r2, ror r3
    9110:	0c1d5001 	ldceq	0, cr5, [sp], {1}
    9114:	01000018 	tsteq	r0, r8, lsl r0
    9118:	0053023b 	subseq	r0, r3, fp, lsr r2
    911c:	52bc0000 	adcspl	r0, ip, #0
    9120:	1f000000 	svcne	0x00000000
    9124:	0000032a 	andeq	r0, r0, sl, lsr #6
    9128:	53024e01 	movwpl	r4, #11777	; 0x2e01
    912c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    9130:	0808005d 	stmdaeq	r8, {r0, r2, r3, r4, r6}
    9134:	01000000 	mrseq	r0, (UNDEF: 0)
    9138:	00070b9c 	muleq	r7, ip, fp
    913c:	2ef51d00 	cdpcs	13, 15, cr1, cr5, cr0, {0}
    9140:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    9144:	00037202 	andeq	r7, r3, r2, lsl #4
    9148:	0052dd00 	subseq	sp, r2, r0, lsl #26
    914c:	e51b0000 	ldr	r0, [fp, #-0]
    9150:	0100002e 	tsteq	r0, lr, lsr #32
    9154:	5e000260 	cdppl	2, 0, cr0, cr0, cr0, {3}
    9158:	000c0800 	andeq	r0, ip, r0, lsl #16
    915c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9160:	00000730 	andeq	r0, r0, r0, lsr r7
    9164:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    9168:	02600100 	rsbeq	r0, r0, #0, 2
    916c:	00000372 	andeq	r0, r0, r2, ror r3
    9170:	1b005001 	blne	1d17c <__Stack_Size+0x1cd7c>
    9174:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9178:	0c027301 	stceq	3, cr7, [r2], {1}
    917c:	1208005e 	andne	r0, r8, #94	; 0x5e
    9180:	01000000 	mrseq	r0, (UNDEF: 0)
    9184:	0007659c 	muleq	r7, ip, r5
    9188:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    918c:	73010000 	movwvc	r0, #4096	; 0x1000
    9190:	00037202 	andeq	r7, r3, r2, lsl #4
    9194:	1d500100 	ldfnee	f0, [r0, #-0]
    9198:	00002e30 	andeq	r2, r0, r0, lsr lr
    919c:	65027301 	strvs	r7, [r2, #-769]	; 0x301
    91a0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    91a4:	00000052 	andeq	r0, r0, r2, asr r0
    91a8:	002d841b 	eoreq	r8, sp, fp, lsl r4
    91ac:	02890100 	addeq	r0, r9, #0, 2
    91b0:	08005e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp, ip, lr}
    91b4:	00000012 	andeq	r0, r0, r2, lsl r0
    91b8:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    91bc:	f51c0000 			; <UNDEFINED> instruction: 0xf51c0000
    91c0:	0100002e 	tsteq	r0, lr, lsr #32
    91c4:	03720289 	cmneq	r2, #-1879048184	; 0x90000008
    91c8:	50010000 	andpl	r0, r1, r0
    91cc:	002fe11d 	eoreq	lr, pc, sp, lsl r1	; <UNPREDICTABLE>
    91d0:	02890100 	addeq	r0, r9, #0, 2
    91d4:	00000065 	andeq	r0, r0, r5, rrx
    91d8:	0000531f 	andeq	r5, r0, pc, lsl r3
    91dc:	2fab1b00 	svccs	0x00ab1b00
    91e0:	9f010000 	svcls	0x00010000
    91e4:	005e3002 	subseq	r3, lr, r2
    91e8:	00001808 	andeq	r1, r0, r8, lsl #16
    91ec:	cd9c0100 	ldfgts	f0, [ip]
    91f0:	1c000007 	stcne	0, cr0, [r0], {7}
    91f4:	00002ef5 	strdeq	r2, [r0], -r5
    91f8:	72029f01 	andvc	r9, r2, #1, 30
    91fc:	01000003 	tsteq	r0, r3
    9200:	16911c50 			; <UNDEFINED> instruction: 0x16911c50
    9204:	9f010000 	svcls	0x00010000
    9208:	0000d602 	andeq	sp, r0, r2, lsl #12
    920c:	00510100 	subseq	r0, r1, r0, lsl #2
    9210:	002f941b 	eoreq	r9, pc, fp, lsl r4	; <UNPREDICTABLE>
    9214:	02bc0100 	adcseq	r0, ip, #0, 2
    9218:	08005e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, lr}
    921c:	00000018 	andeq	r0, r0, r8, lsl r0
    9220:	08009c01 	stmdaeq	r0, {r0, sl, fp, ip, pc}
    9224:	f51c0000 			; <UNDEFINED> instruction: 0xf51c0000
    9228:	0100002e 	tsteq	r0, lr, lsr #32
    922c:	037202bc 	cmneq	r2, #188, 4	; 0xc000000b
    9230:	50010000 	andpl	r0, r1, r0
    9234:	0016911c 	andseq	r9, r6, ip, lsl r1
    9238:	02bc0100 	adcseq	r0, ip, #0, 2
    923c:	000000d6 	ldrdeq	r0, [r0], -r6
    9240:	1b005101 	blne	1d64c <__Stack_Size+0x1d24c>
    9244:	00002dc9 	andeq	r2, r0, r9, asr #27
    9248:	6002d901 	andvs	sp, r2, r1, lsl #18
    924c:	1808005e 	stmdane	r8, {r1, r2, r3, r4, r6}
    9250:	01000000 	mrseq	r0, (UNDEF: 0)
    9254:	0008339c 	muleq	r8, ip, r3
    9258:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    925c:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    9260:	00037202 	andeq	r7, r3, r2, lsl #4
    9264:	1c500100 	ldfnee	f0, [r0], {-0}
    9268:	00001691 	muleq	r0, r1, r6
    926c:	d602d901 	strle	sp, [r2], -r1, lsl #18
    9270:	01000000 	mrseq	r0, (UNDEF: 0)
    9274:	321b0051 	andscc	r0, fp, #81	; 0x51
    9278:	0100002f 	tsteq	r0, pc, lsr #32
    927c:	5e7802f8 	mrcpl	2, 3, r0, cr8, cr8, {7}
    9280:	00160800 	andseq	r0, r6, r0, lsl #16
    9284:	9c010000 	stcls	0, cr0, [r1], {-0}
    9288:	00000868 	andeq	r0, r0, r8, ror #16
    928c:	002ef51c 	eoreq	pc, lr, ip, lsl r5	; <UNPREDICTABLE>
    9290:	02f80100 	rscseq	r0, r8, #0, 2
    9294:	00000372 	andeq	r0, r0, r2, ror r3
    9298:	001d5001 	andseq	r5, sp, r1
    929c:	0100002e 	tsteq	r0, lr, lsr #32
    92a0:	005302f8 	ldrsheq	r0, [r3], #-40	; 0xffffffd8
    92a4:	53400000 	movtpl	r0, #0
    92a8:	1b000000 	blne	92b0 <__Stack_Size+0x8eb0>
    92ac:	00002f67 	andeq	r2, r0, r7, ror #30
    92b0:	8e030d01 	cdphi	13, 0, cr0, cr3, cr1, {0}
    92b4:	1808005e 	stmdane	r8, {r1, r2, r3, r4, r6}
    92b8:	01000000 	mrseq	r0, (UNDEF: 0)
    92bc:	00089b9c 	muleq	r8, ip, fp
    92c0:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    92c4:	0d010000 	stceq	0, cr0, [r1, #-0]
    92c8:	00037203 	andeq	r7, r3, r3, lsl #4
    92cc:	1c500100 	ldfnee	f0, [r0], {-0}
    92d0:	00001691 	muleq	r0, r1, r6
    92d4:	d6030d01 	strle	r0, [r3], -r1, lsl #26
    92d8:	01000000 	mrseq	r0, (UNDEF: 0)
    92dc:	ed1f0051 	ldc	0, cr0, [pc, #-324]	; 91a0 <__Stack_Size+0x8da0>
    92e0:	01000007 	tsteq	r0, r7
    92e4:	00ab0335 	adceq	r0, fp, r5, lsr r3
    92e8:	5ea60000 	cdppl	0, 10, cr0, cr6, cr0, {0}
    92ec:	000c0800 	andeq	r0, ip, r0, lsl #16
    92f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    92f4:	000008e4 	andeq	r0, r0, r4, ror #17
    92f8:	002ef51d 	eoreq	pc, lr, sp, lsl r5	; <UNPREDICTABLE>
    92fc:	03350100 	teqeq	r5, #0, 2
    9300:	00000372 	andeq	r0, r0, r2, ror r3
    9304:	00005361 	andeq	r5, r0, r1, ror #6
    9308:	002e611c 	eoreq	r6, lr, ip, lsl r1
    930c:	03350100 	teqeq	r5, #0, 2
    9310:	00000053 	andeq	r0, r0, r3, asr r0
    9314:	201a5101 	andscs	r5, sl, r1, lsl #2
    9318:	01000017 	tsteq	r0, r7, lsl r0
    931c:	00ab0337 	adceq	r0, fp, r7, lsr r3
    9320:	53820000 	orrpl	r0, r2, #0
    9324:	1b000000 	blne	932c <__Stack_Size+0x8f2c>
    9328:	00002f22 	andeq	r2, r0, r2, lsr #30
    932c:	b2036901 	andlt	r6, r3, #16384	; 0x4000
    9330:	0808005e 	stmdaeq	r8, {r1, r2, r3, r4, r6}
    9334:	01000000 	mrseq	r0, (UNDEF: 0)
    9338:	0009199c 	muleq	r9, ip, r9
    933c:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    9340:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    9344:	00037203 	andeq	r7, r3, r3, lsl #4
    9348:	1d500100 	ldfnee	f0, [r0, #-0]
    934c:	00002e61 	andeq	r2, r0, r1, ror #28
    9350:	53036901 	movwpl	r6, #14593	; 0x3901
    9354:	aa000000 	bge	935c <__Stack_Size+0x8f5c>
    9358:	00000053 	andeq	r0, r0, r3, asr r0
    935c:	0000e81f 	andeq	lr, r0, pc, lsl r8
    9360:	038a0100 	orreq	r0, sl, #0, 2
    9364:	000000b6 	strheq	r0, [r0], -r6
    9368:	08005eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip, lr}
    936c:	0000003e 	andeq	r0, r0, lr, lsr r0
    9370:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    9374:	f51d0000 			; <UNDEFINED> instruction: 0xf51d0000
    9378:	0100002e 	tsteq	r0, lr, lsr #32
    937c:	0372038a 	cmneq	r2, #671088642	; 0x28000002
    9380:	53cb0000 	bicpl	r0, fp, #0
    9384:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    9388:	0100002d 	tsteq	r0, sp, lsr #32
    938c:	0053038a 	subseq	r0, r3, sl, lsl #7
    9390:	54050000 	strpl	r0, [r5], #-0
    9394:	1b1a0000 	blne	68939c <__Stack_Size+0x688f9c>
    9398:	0100002f 	tsteq	r0, pc, lsr #32
    939c:	0041038c 	subeq	r0, r1, ip, lsl #7
    93a0:	54310000 	ldrtpl	r0, [r1], #-0
    93a4:	fc1a0000 	ldc2	0, cr0, [sl], {-0}
    93a8:	0100002f 	tsteq	r0, pc, lsr #32
    93ac:	0041038c 	subeq	r0, r1, ip, lsl #7
    93b0:	54af0000 	strtpl	r0, [pc], #0	; 93b8 <__Stack_Size+0x8fb8>
    93b4:	351a0000 	ldrcc	r0, [sl, #-0]
    93b8:	01000030 	tsteq	r0, r0, lsr r0
    93bc:	0041038c 	subeq	r0, r1, ip, lsl #7
    93c0:	54f70000 	ldrbtpl	r0, [r7], #0
    93c4:	201a0000 	andscs	r0, sl, r0
    93c8:	01000017 	tsteq	r0, r7, lsl r0
    93cc:	00b6038d 	adcseq	r0, r6, sp, lsl #7
    93d0:	551b0000 	ldrpl	r0, [fp, #-0]
    93d4:	1b000000 	blne	93dc <__Stack_Size+0x8fdc>
    93d8:	00002e18 	andeq	r2, r0, r8, lsl lr
    93dc:	f803da01 			; <UNDEFINED> instruction: 0xf803da01
    93e0:	0e08005e 	mcreq	0, 0, r0, cr8, cr14, {2}
    93e4:	01000000 	mrseq	r0, (UNDEF: 0)
    93e8:	0009e59c 	muleq	r9, ip, r5
    93ec:	2ef51c00 	cdpcs	12, 15, cr1, cr5, cr0, {0}
    93f0:	da010000 	ble	493f8 <__Stack_Size+0x48ff8>
    93f4:	00037203 	andeq	r7, r3, r3, lsl #4
    93f8:	1d500100 	ldfnee	f0, [r0, #-0]
    93fc:	00002df7 	strdeq	r2, [r0], -r7
    9400:	5303da01 	movwpl	sp, #14849	; 0x3a01
    9404:	3a000000 	bcc	940c <__Stack_Size+0x900c>
    9408:	1a000055 	bne	9564 <__Stack_Size+0x9164>
    940c:	00002f1b 	andeq	r2, r0, fp, lsl pc
    9410:	5303dc01 	movwpl	sp, #15361	; 0x3c01
    9414:	5b000000 	blpl	941c <__Stack_Size+0x901c>
    9418:	20000055 	andcs	r0, r0, r5, asr r0
    941c:	00002ffc 	strdeq	r2, [r0], -ip
    9420:	5303dc01 	movwpl	sp, #15361	; 0x3c01
    9424:	00000000 	andeq	r0, r0, r0
    9428:	001a5121 	andseq	r5, sl, r1, lsr #2
    942c:	01140500 	tsteq	r4, r0, lsl #10
    9430:	000009fc 	strdeq	r0, [r0], -ip
    9434:	00004122 	andeq	r4, r0, r2, lsr #2
    9438:	00d62200 	sbcseq	r2, r6, r0, lsl #4
    943c:	21000000 	mrscs	r0, (UNDEF: 0)
    9440:	0000208b 	andeq	r2, r0, fp, lsl #1
    9444:	13011505 	movwne	r1, #5381	; 0x1505
    9448:	2200000a 	andcs	r0, r0, #10
    944c:	00000041 	andeq	r0, r0, r1, asr #32
    9450:	0000d622 	andeq	sp, r0, r2, lsr #12
    9454:	2f210000 	svccs	0x00210000
    9458:	05000023 	streq	r0, [r0, #-35]	; 0x23
    945c:	0a250110 	beq	9498a4 <__Stack_Size+0x9494a4>
    9460:	25220000 	strcs	r0, [r2, #-0]!
    9464:	0000000a 	andeq	r0, r0, sl
    9468:	02970415 	addseq	r0, r7, #352321536	; 0x15000000
    946c:	61000000 	mrsvs	r0, (UNDEF: 0)
    9470:	02000000 	andeq	r0, r0, #0
    9474:	00186200 	andseq	r6, r8, r0, lsl #4
    9478:	33010400 	movwcc	r0, #5120	; 0x1400
    947c:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    9480:	7608005f 			; <UNDEFINED> instruction: 0x7608005f
    9484:	7308005f 	movwvc	r0, #32863	; 0x805f
    9488:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    948c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    9490:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    9494:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    9498:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    949c:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    94a0:	616d5f33 	cmnvs	sp, r3, lsr pc
    94a4:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    94a8:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    94ac:	2f656d6f 	svccs	0x00656d6f
    94b0:	6d656c63 	stclvs	12, cr6, [r5, #-396]!	; 0xfffffe74
    94b4:	2f746e65 	svccs	0x00746e65
    94b8:	30314f4d 	eorscc	r4, r1, sp, asr #30
    94bc:	6f522f33 	svcvs	0x00522f33
    94c0:	00746f62 	rsbseq	r6, r4, r2, ror #30
    94c4:	20554e47 	subscs	r4, r5, r7, asr #28
    94c8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    94cc:	2e34322e 	cdpcs	2, 3, cr3, cr4, cr14, {1}
    94d0:	80010030 	andhi	r0, r1, r0, lsr r0
    94d4:	0000010f 	andeq	r0, r0, pc, lsl #2
    94d8:	18760004 	ldmdane	r6!, {r2}^
    94dc:	01040000 	mrseq	r0, (UNDEF: 4)
    94e0:	00000862 	andeq	r0, r0, r2, ror #16
    94e4:	00307801 	eorseq	r7, r0, r1, lsl #16
    94e8:	0000fa00 	andeq	pc, r0, r0, lsl #20
    94ec:	005f7800 	subseq	r7, pc, r0, lsl #16
    94f0:	00005008 	andeq	r5, r0, r8
    94f4:	0017d700 	andseq	sp, r7, r0, lsl #14
    94f8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    94fc:	000009e2 	andeq	r0, r0, r2, ror #19
    9500:	a6050202 	strge	r0, [r5], -r2, lsl #4
    9504:	02000009 	andeq	r0, r0, #9
    9508:	0b770601 	bleq	1dcad14 <__Stack_Size+0x1dca914>
    950c:	04020000 	streq	r0, [r2], #-0
    9510:	000b1907 	andeq	r1, fp, r7, lsl #18
    9514:	07020200 	streq	r0, [r2, -r0, lsl #4]
    9518:	00000d39 	andeq	r0, r0, r9, lsr sp
    951c:	75080102 	strvc	r0, [r8, #-258]	; 0x102
    9520:	0200000b 	andeq	r0, r0, #11
    9524:	0b100704 	bleq	40b13c <__Stack_Size+0x40ad3c>
    9528:	4d030000 	stcmi	0, cr0, [r3, #-0]
    952c:	01000030 	tsteq	r0, r0, lsr r0
    9530:	005f7891 			; <UNDEFINED> instruction: 0x005f7891
    9534:	00005008 	andeq	r5, r0, r8
    9538:	8f9c0100 	svchi	0x009c0100
    953c:	04000000 	streq	r0, [r0], #-0
    9540:	000030aa 	andeq	r3, r0, sl, lsr #1
    9544:	008f9301 	addeq	r9, pc, r1, lsl #6
    9548:	5b050000 	blpl	149550 <__Stack_Size+0x149150>
    954c:	01000030 	tsteq	r0, r0, lsr r0
    9550:	00008f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    9554:	00558200 	subseq	r8, r5, r0, lsl #4
    9558:	5faa0600 	svcpl	0x00aa0600
    955c:	01000800 	tsteq	r0, r0, lsl #16
    9560:	07000000 	streq	r0, [r0, -r0]
    9564:	00003a04 	andeq	r3, r0, r4, lsl #20
    9568:	30630800 	rsbcc	r0, r3, r0, lsl #16
    956c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    9570:	0000003a 	andeq	r0, r0, sl, lsr r0
    9574:	00304608 	eorseq	r4, r0, r8, lsl #12
    9578:	3a1b0100 	bcc	6c9980 <__Stack_Size+0x6c9580>
    957c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9580:	00003071 	andeq	r3, r0, r1, ror r0
    9584:	003a1d01 	eorseq	r1, sl, r1, lsl #26
    9588:	b1080000 	mrslt	r0, (UNDEF: 8)
    958c:	01000030 	tsteq	r0, r0, lsr r0
    9590:	00003a20 	andeq	r3, r0, r0, lsr #20
    9594:	306b0800 	rsbcc	r0, fp, r0, lsl #16
    9598:	22010000 	andcs	r0, r1, #0
    959c:	0000003a 	andeq	r0, r0, sl, lsr r0
    95a0:	00303e09 	eorseq	r3, r0, r9, lsl #28
    95a4:	0a250100 	beq	9499ac <__Stack_Size+0x9495ac>
    95a8:	000000e3 	andeq	r0, r0, r3, ror #1
    95ac:	000000e3 	andeq	r0, r0, r3, ror #1
    95b0:	00004f0b 	andeq	r4, r0, fp, lsl #30
    95b4:	07004c00 	streq	r4, [r0, -r0, lsl #24]
    95b8:	0000e904 	andeq	lr, r0, r4, lsl #18
    95bc:	9d0d0c00 	stcls	12, cr0, [sp, #-0]
    95c0:	01000030 	tsteq	r0, r0, lsr r0
    95c4:	0000fb39 	andeq	pc, r0, r9, lsr fp	; <UNPREDICTABLE>
    95c8:	00030500 	andeq	r0, r3, r0, lsl #10
    95cc:	0e080030 	mcreq	0, 0, r0, cr8, cr0, {1}
    95d0:	000000d3 	ldrdeq	r0, [r0], -r3
    95d4:	000aed0f 	andeq	lr, sl, pc, lsl #26
    95d8:	0b2c0100 	bleq	b099e0 <__Stack_Size+0xb095e0>
    95dc:	10000001 	andne	r0, r0, r1
    95e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    95e4:	Address 0x000095e4 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
       c:	10011117 	andne	r1, r1, r7, lsl r1
      10:	02000017 	andeq	r0, r0, #23
      14:	08030016 	stmdaeq	r3, {r1, r2, r4}
      18:	0b3b0b3a 	bleq	ec2d08 <__Stack_Size+0xec2908>
      1c:	00001349 	andeq	r1, r0, r9, asr #6
      20:	0b002403 	bleq	9034 <__Stack_Size+0x8c34>
      24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      28:	0400000e 	streq	r0, [r0], #-14
      2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      30:	0b3b0b3a 	bleq	ec2d20 <__Stack_Size+0xec2920>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      40:	0b0b0104 	bleq	2c0458 <__Stack_Size+0x2c0058>
      44:	0b3b0b3a 	bleq	ec2d34 <__Stack_Size+0xec2934>
      48:	00001301 	andeq	r1, r0, r1, lsl #6
      4c:	03002807 	movweq	r2, #2055	; 0x807
      50:	000d1c0e 	andeq	r1, sp, lr, lsl #24
      54:	00280800 	eoreq	r0, r8, r0, lsl #16
      58:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      5c:	13090000 	movwne	r0, #36864	; 0x9000
      60:	3a0b0b01 	bcc	2c2c6c <__Stack_Size+0x2c286c>
      64:	01053b0b 	tsteq	r5, fp, lsl #22
      68:	0a000013 	beq	bc <_Minimum_Stack_Size-0x44>
      6c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
      74:	0b381349 	bleq	e04da0 <__Stack_Size+0xe049a0>
      78:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      7c:	3a0e0300 	bcc	380c84 <__Stack_Size+0x380884>
      80:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      84:	000b3813 	andeq	r3, fp, r3, lsl r8
      88:	00160c00 	andseq	r0, r6, r0, lsl #24
      8c:	0b3a0e03 	bleq	e838a0 <__Stack_Size+0xe834a0>
      90:	1349053b 	movtne	r0, #38203	; 0x953b
      94:	130d0000 	movwne	r0, #53248	; 0xd000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c28a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2998>
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe049d8>
      b0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
      b4:	03193f01 	tsteq	r9, #1, 30
      b8:	3b0b3a0e 	blcc	2ce8f8 <__Stack_Size+0x2ce4f8>
      bc:	20192705 	andscs	r2, r9, r5, lsl #14
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	00051000 	andeq	r1, r5, r0
      c8:	0b3a0e03 	bleq	e838dc <__Stack_Size+0xe834dc>
      cc:	1349053b 	movtne	r0, #38203	; 0x953b
      d0:	24110000 	ldrcs	r0, [r1], #-0
      d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      d8:	0008030b 	andeq	r0, r8, fp, lsl #6
      dc:	000f1200 	andeq	r1, pc, r0, lsl #4
      e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      e4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      e8:	03193f01 	tsteq	r9, #1, 30
      ec:	3b0b3a0e 	blcc	2ce92c <__Stack_Size+0x2ce52c>
      f0:	11192705 	tstne	r9, r5, lsl #14
      f4:	40061201 	andmi	r1, r6, r1, lsl #4
      f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
     100:	03003414 	movweq	r3, #1044	; 0x414
     104:	3b0b3a0e 	blcc	2ce944 <__Stack_Size+0x2ce544>
     108:	02134905 	andseq	r4, r3, #81920	; 0x14000
     10c:	15000017 	strne	r0, [r0, #-23]
     110:	00018289 	andeq	r8, r1, r9, lsl #5
     114:	13310111 	teqne	r1, #1073741828	; 0x40000004
     118:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     11c:	11010182 	smlabbne	r1, r2, r1, r0
     120:	01133101 	tsteq	r3, r1, lsl #2
     124:	17000013 	smladne	r0, r3, r0, r0
     128:	0001828a 	andeq	r8, r1, sl, lsl #5
     12c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     130:	18000018 	stmdane	r0, {r3, r4}
     134:	01018289 	smlabbeq	r1, r9, r2, r8
     138:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     13c:	01133119 	tsteq	r3, r9, lsl r1
     140:	19000013 	stmdbne	r0, {r0, r1, r4}
     144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     14c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     150:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     154:	11010182 	smlabbne	r1, r2, r1, r0
     158:	00133101 	andseq	r3, r3, r1, lsl #2
     15c:	82891b00 	addhi	r1, r9, #0, 22
     160:	01110101 	tsteq	r1, r1, lsl #2
     164:	31194295 			; <UNDEFINED> instruction: 0x31194295
     168:	1c000013 	stcne	0, cr0, [r0], {19}
     16c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     170:	0b3a0e03 	bleq	e83984 <__Stack_Size+0xe83584>
     174:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     178:	06120111 			; <UNDEFINED> instruction: 0x06120111
     17c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     180:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
     184:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     188:	0b3a0e03 	bleq	e8399c <__Stack_Size+0xe8359c>
     18c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     190:	01111349 	tsteq	r1, r9, asr #6
     194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     198:	00194297 	mulseq	r9, r7, r2
     19c:	00051e00 	andeq	r1, r5, r0, lsl #28
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001702 	andeq	r1, r0, r2, lsl #14
     1ac:	3f012e1f 	svccc	0x00012e1f
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	11134919 	tstne	r3, r9, lsl r9
     1bc:	40061201 	andmi	r1, r6, r1, lsl #4
     1c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     1c4:	00001301 	andeq	r1, r0, r1, lsl #6
     1c8:	3f012e20 	svccc	0x00012e20
     1cc:	3a0e0319 	bcc	380e38 <__Stack_Size+0x380a38>
     1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1d8:	97184006 	ldrls	r4, [r8, -r6]
     1dc:	13011942 	movwne	r1, #6466	; 0x1942
     1e0:	05210000 	streq	r0, [r1, #-0]!
     1e4:	3a080300 	bcc	200dec <__Stack_Size+0x2009ec>
     1e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1ec:	00170213 	andseq	r0, r7, r3, lsl r2
     1f0:	00342200 	eorseq	r2, r4, r0, lsl #4
     1f4:	0b3a0e03 	bleq	e83a08 <__Stack_Size+0xe83608>
     1f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1fc:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     200:	11000182 	smlabbne	r0, r2, r1, r0
     204:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     208:	00001331 	andeq	r1, r0, r1, lsr r3
     20c:	03000524 	movweq	r0, #1316	; 0x524
     210:	3b0b3a0e 	blcc	2cea50 <__Stack_Size+0x2ce650>
     214:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     218:	25000017 	strcs	r0, [r0, #-23]
     21c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     220:	0b3b0b3a 	bleq	ec2f10 <__Stack_Size+0xec2b10>
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     22c:	11133101 	tstne	r3, r1, lsl #2
     230:	40061201 	andmi	r1, r6, r1, lsl #4
     234:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     238:	00001301 	andeq	r1, r0, r1, lsl #6
     23c:	31000527 	tstcc	r0, r7, lsr #10
     240:	00170213 	andseq	r0, r7, r3, lsl r2
     244:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
     248:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     24c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     250:	06120111 			; <UNDEFINED> instruction: 0x06120111
     254:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     258:	00130119 	andseq	r0, r3, r9, lsl r1
     25c:	00052900 	andeq	r2, r5, r0, lsl #18
     260:	0b3a0803 	bleq	e82274 <__Stack_Size+0xe81e74>
     264:	1349053b 	movtne	r0, #38203	; 0x953b
     268:	00001702 	andeq	r1, r0, r2, lsl #14
     26c:	3f012e2a 	svccc	0x00012e2a
     270:	3a080319 	bcc	200edc <__Stack_Size+0x200adc>
     274:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     278:	01193c13 	tsteq	r9, r3, lsl ip
     27c:	2b000013 	blcs	2d0 <_Minimum_Stack_Size+0x1d0>
     280:	00000018 	andeq	r0, r0, r8, lsl r0
     284:	0300342c 	movweq	r3, #1068	; 0x42c
     288:	3b0b3a08 	blcc	2ceab0 <__Stack_Size+0x2ce6b0>
     28c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     290:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
     294:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     298:	00001301 	andeq	r1, r0, r1, lsl #6
     29c:	31011d2e 	tstcc	r1, lr, lsr #26
     2a0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2a4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     2a8:	00130105 	andseq	r0, r3, r5, lsl #2
     2ac:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
     2b0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2b8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     2bc:	00001301 	andeq	r1, r0, r1, lsl #6
     2c0:	03003430 	movweq	r3, #1072	; 0x430
     2c4:	3b0b3a0e 	blcc	2ceb04 <__Stack_Size+0x2ce704>
     2c8:	1c134905 	ldcne	9, cr4, [r3], {5}
     2cc:	3100000b 	tstcc	r0, fp
     2d0:	0111010b 	tsteq	r1, fp, lsl #2
     2d4:	13010612 	movwne	r0, #5650	; 0x1612
     2d8:	1d320000 	ldcne	0, cr0, [r2, #-0]
     2dc:	11133101 	tstne	r3, r1, lsl #2
     2e0:	58061201 	stmdapl	r6, {r0, r9, ip}
     2e4:	0005590b 	andeq	r5, r5, fp, lsl #18
     2e8:	00053300 	andeq	r3, r5, r0, lsl #6
     2ec:	0b3a0e03 	bleq	e83b00 <__Stack_Size+0xe83700>
     2f0:	1349053b 	movtne	r0, #38203	; 0x953b
     2f4:	00001802 	andeq	r1, r0, r2, lsl #16
     2f8:	49010134 	stmdbmi	r1, {r2, r4, r5, r8}
     2fc:	00130113 	andseq	r0, r3, r3, lsl r1
     300:	00213500 	eoreq	r3, r1, r0, lsl #10
     304:	0b2f1349 	bleq	bc5030 <__Stack_Size+0xbc4c30>
     308:	34360000 	ldrtcc	r0, [r6], #-0
     30c:	3a0e0300 	bcc	380f14 <__Stack_Size+0x380b14>
     310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     314:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     318:	37000018 	smladcc	r0, r8, r0, r0
     31c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     320:	0b3b0b3a 	bleq	ec3010 <__Stack_Size+0xec2c10>
     324:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     328:	00001802 	andeq	r1, r0, r2, lsl #16
     32c:	3f002e38 	svccc	0x00002e38
     330:	3a0e0319 	bcc	380f9c <__Stack_Size+0x380b9c>
     334:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     338:	00193c19 	andseq	r3, r9, r9, lsl ip
     33c:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     340:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     344:	0b3b0b3a 	bleq	ec3034 <__Stack_Size+0xec2c34>
     348:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     34c:	00001301 	andeq	r1, r0, r1, lsl #6
     350:	4900053a 	stmdbmi	r0, {r1, r3, r4, r5, r8, sl}
     354:	3b000013 	blcc	3a8 <_Minimum_Stack_Size+0x2a8>
     358:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     35c:	0b3a0e03 	bleq	e83b70 <__Stack_Size+0xe83770>
     360:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     364:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     368:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
     36c:	03193f01 	tsteq	r9, #1, 30
     370:	3b0b3a0e 	blcc	2cebb0 <__Stack_Size+0x2ce7b0>
     374:	3c192705 	ldccc	7, cr2, [r9], {5}
     378:	00130119 	andseq	r0, r3, r9, lsl r1
     37c:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
     380:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     384:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     388:	13491927 	movtne	r1, #39207	; 0x9927
     38c:	1301193c 	movwne	r1, #6460	; 0x193c
     390:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
     394:	03193f00 	tsteq	r9, #0, 30
     398:	3b0b3a0e 	blcc	2cebd8 <__Stack_Size+0x2ce7d8>
     39c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     3a0:	00193c13 	andseq	r3, r9, r3, lsl ip
     3a4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
     3a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3ac:	0b3b0b3a 	bleq	ec309c <__Stack_Size+0xec2c9c>
     3b0:	13491927 	movtne	r1, #39207	; 0x9927
     3b4:	1301193c 	movwne	r1, #6460	; 0x193c
     3b8:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
     3bc:	03193f01 	tsteq	r9, #1, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <__Stack_Size+0x2ce800>
     3c4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3c8:	00193c13 	andseq	r3, r9, r3, lsl ip
     3cc:	11010000 	mrsne	r0, (UNDEF: 1)
     3d0:	130e2501 	movwne	r2, #58625	; 0xe501
     3d4:	1b0e030b 	blne	381008 <__Stack_Size+0x380c08>
     3d8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     3dc:	00171006 	andseq	r1, r7, r6
     3e0:	002e0200 	eoreq	r0, lr, r0, lsl #4
     3e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3e8:	0b3b0b3a 	bleq	ec30d8 <__Stack_Size+0xec2cd8>
     3ec:	01111927 	tsteq	r1, r7, lsr #18
     3f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     3f4:	00194297 	mulseq	r9, r7, r2
     3f8:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
     3fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     400:	0b3b0b3a 	bleq	ec30f0 <__Stack_Size+0xec2cf0>
     404:	01111927 	tsteq	r1, r7, lsr #18
     408:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     40c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     410:	04000013 	streq	r0, [r0], #-19
     414:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     418:	0b3a0e03 	bleq	e83c2c <__Stack_Size+0xe8382c>
     41c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     420:	1301193c 	movwne	r1, #6460	; 0x193c
     424:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
     428:	06000000 	streq	r0, [r0], -r0
     42c:	00018289 	andeq	r8, r1, r9, lsl #5
     430:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     434:	00133119 	andseq	r3, r3, r9, lsl r1
     438:	00240700 	eoreq	r0, r4, r0, lsl #14
     43c:	0b3e0b0b 	bleq	f83070 <__Stack_Size+0xf82c70>
     440:	00000803 	andeq	r0, r0, r3, lsl #16
     444:	3f002e08 	svccc	0x00002e08
     448:	3a0e0319 	bcc	3810b4 <__Stack_Size+0x380cb4>
     44c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     450:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     454:	97184006 	ldrls	r4, [r8, -r6]
     458:	00001942 	andeq	r1, r0, r2, asr #18
     45c:	3f012e09 	svccc	0x00012e09
     460:	3a0e0319 	bcc	3810cc <__Stack_Size+0x380ccc>
     464:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     468:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     46c:	97184006 	ldrls	r4, [r8, -r6]
     470:	13011942 	movwne	r1, #6466	; 0x1942
     474:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     478:	03193f01 	tsteq	r9, #1, 30
     47c:	3b0b3a0e 	blcc	2cecbc <__Stack_Size+0x2ce8bc>
     480:	3c134905 	ldccc	9, cr4, [r3], {5}
     484:	00130119 	andseq	r0, r3, r9, lsl r1
     488:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
     48c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     490:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     494:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     498:	01000000 	mrseq	r0, (UNDEF: 0)
     49c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     4a0:	0e030b13 	vmoveq.32	d3[0], r0
     4a4:	01110e1b 	tsteq	r1, fp, lsl lr
     4a8:	17100612 			; <UNDEFINED> instruction: 0x17100612
     4ac:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     4b0:	03193f01 	tsteq	r9, #1, 30
     4b4:	3b0b3a0e 	blcc	2cecf4 <__Stack_Size+0x2ce8f4>
     4b8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     4bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     4c0:	97184006 	ldrls	r4, [r8, -r6]
     4c4:	13011942 	movwne	r1, #6466	; 0x1942
     4c8:	05030000 	streq	r0, [r3, #-0]
     4cc:	3a0e0300 	bcc	3810d4 <__Stack_Size+0x380cd4>
     4d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d4:	00170213 	andseq	r0, r7, r3, lsl r2
     4d8:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
     4dc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4e0:	0b3b0b3a 	bleq	ec31d0 <__Stack_Size+0xec2dd0>
     4e4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     4e8:	00001301 	andeq	r1, r0, r1, lsl #6
     4ec:	00001805 	andeq	r1, r0, r5, lsl #16
     4f0:	82890600 	addhi	r0, r9, #0, 12
     4f4:	01110101 	tsteq	r1, r1, lsl #2
     4f8:	00001331 	andeq	r1, r0, r1, lsr r3
     4fc:	01828a07 	orreq	r8, r2, r7, lsl #20
     500:	91180200 	tstls	r8, r0, lsl #4
     504:	00001842 	andeq	r1, r0, r2, asr #16
     508:	0b002408 	bleq	9530 <__Stack_Size+0x9130>
     50c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     510:	09000008 	stmdbeq	r0, {r3}
     514:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     518:	0b3a0e03 	bleq	e83d2c <__Stack_Size+0xe8392c>
     51c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     520:	06120111 			; <UNDEFINED> instruction: 0x06120111
     524:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     528:	00130119 	andseq	r0, r3, r9, lsl r1
     52c:	82890a00 	addhi	r0, r9, #0, 20
     530:	01110001 	tsteq	r1, r1
     534:	31194295 			; <UNDEFINED> instruction: 0x31194295
     538:	0b000013 	bleq	58c <__Stack_Size+0x18c>
     53c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     540:	0b3b0b3a 	bleq	ec3230 <__Stack_Size+0xec2e30>
     544:	17021349 	strne	r1, [r2, -r9, asr #6]
     548:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     54c:	11000182 	smlabbne	r0, r2, r1, r0
     550:	00133101 	andseq	r3, r3, r1, lsl #2
     554:	000f0d00 	andeq	r0, pc, r0, lsl #26
     558:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     55c:	240e0000 	strcs	r0, [lr], #-0
     560:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     564:	000e030b 	andeq	r0, lr, fp, lsl #6
     568:	010b0f00 	tsteq	fp, r0, lsl #30
     56c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     570:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
     574:	11010182 	smlabbne	r1, r2, r1, r0
     578:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     57c:	00001331 	andeq	r1, r0, r1, lsr r3
     580:	3f012e11 	svccc	0x00012e11
     584:	3a0e0319 	bcc	3811f0 <__Stack_Size+0x380df0>
     588:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     58c:	00193c13 	andseq	r3, r9, r3, lsl ip
     590:	11010000 	mrsne	r0, (UNDEF: 1)
     594:	130e2501 	movwne	r2, #58625	; 0xe501
     598:	1b0e030b 	blne	3811cc <__Stack_Size+0x380dcc>
     59c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     5a0:	00171006 	andseq	r1, r7, r6
     5a4:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
     5a8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5ac:	0b3b0b3a 	bleq	ec329c <__Stack_Size+0xec2e9c>
     5b0:	0b201927 	bleq	806a54 <__Stack_Size+0x806654>
     5b4:	00001301 	andeq	r1, r0, r1, lsl #6
     5b8:	03003403 	movweq	r3, #1027	; 0x403
     5bc:	3b0b3a08 	blcc	2cede4 <__Stack_Size+0x2ce9e4>
     5c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     5c4:	00340400 	eorseq	r0, r4, r0, lsl #8
     5c8:	0b3a0e03 	bleq	e83ddc <__Stack_Size+0xe839dc>
     5cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5d0:	24050000 	strcs	r0, [r5], #-0
     5d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     5d8:	000e030b 	andeq	r0, lr, fp, lsl #6
     5dc:	002e0600 	eoreq	r0, lr, r0, lsl #12
     5e0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     5e4:	0b3b0b3a 	bleq	ec32d4 <__Stack_Size+0xec2ed4>
     5e8:	0b201927 	bleq	806a8c <__Stack_Size+0x80668c>
     5ec:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     5f0:	03193f01 	tsteq	r9, #1, 30
     5f4:	3b0b3a0e 	blcc	2cee34 <__Stack_Size+0x2cea34>
     5f8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     5fc:	010b2013 	tsteq	fp, r3, lsl r0
     600:	08000013 	stmdaeq	r0, {r0, r1, r4}
     604:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     608:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     60c:	00001349 	andeq	r1, r0, r9, asr #6
     610:	03003409 	movweq	r3, #1033	; 0x409
     614:	3b0b3a0e 	blcc	2cee54 <__Stack_Size+0x2cea54>
     618:	00134905 	andseq	r4, r3, r5, lsl #18
     61c:	00240a00 	eoreq	r0, r4, r0, lsl #20
     620:	0b3e0b0b 	bleq	f83254 <__Stack_Size+0xf82e54>
     624:	00000803 	andeq	r0, r0, r3, lsl #16
     628:	3f012e0b 	svccc	0x00012e0b
     62c:	3a0e0319 	bcc	381298 <__Stack_Size+0x380e98>
     630:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     634:	11134919 	tstne	r3, r9, lsl r9
     638:	40061201 	andmi	r1, r6, r1, lsl #4
     63c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     640:	00001301 	andeq	r1, r0, r1, lsl #6
     644:	0300050c 	movweq	r0, #1292	; 0x50c
     648:	3b0b3a0e 	blcc	2cee88 <__Stack_Size+0x2cea88>
     64c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     650:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
     654:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     658:	0b3b0b3a 	bleq	ec3348 <__Stack_Size+0xec2f48>
     65c:	17021349 	strne	r1, [r2, -r9, asr #6]
     660:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
     664:	11010182 	smlabbne	r1, r2, r1, r0
     668:	00133101 	andseq	r3, r3, r1, lsl #2
     66c:	828a0f00 	addhi	r0, sl, #0, 30
     670:	18020001 	stmdane	r2, {r0}
     674:	00184291 	mulseq	r8, r1, r2
     678:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
     67c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     680:	0b3b0b3a 	bleq	ec3370 <__Stack_Size+0xec2f70>
     684:	01111927 	tsteq	r1, r7, lsr #18
     688:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     68c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     690:	11000013 	tstne	r0, r3, lsl r0
     694:	00018289 	andeq	r8, r1, r9, lsl #5
     698:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     69c:	00133119 	andseq	r3, r3, r9, lsl r1
     6a0:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
     6a4:	01111331 	tsteq	r1, r1, lsr r3
     6a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
     6b0:	13000013 	movwne	r0, #19
     6b4:	13310034 	teqne	r1, #52	; 0x34
     6b8:	00001702 	andeq	r1, r0, r2, lsl #14
     6bc:	31003414 	tstcc	r0, r4, lsl r4
     6c0:	15000013 	strne	r0, [r0, #-19]
     6c4:	0111010b 	tsteq	r1, fp, lsl #2
     6c8:	13010612 	movwne	r0, #5650	; 0x1612
     6cc:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     6d0:	11010182 	smlabbne	r1, r2, r1, r0
     6d4:	01133101 	tsteq	r3, r1, lsl #2
     6d8:	17000013 	smladne	r0, r3, r0, r0
     6dc:	00018289 	andeq	r8, r1, r9, lsl #5
     6e0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     6e4:	34180000 	ldrcc	r0, [r8], #-0
     6e8:	1c133100 	ldfnes	f3, [r3], {-0}
     6ec:	1900000b 	stmdbne	r0, {r0, r1, r3}
     6f0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     6f4:	00001301 	andeq	r1, r0, r1, lsl #6
     6f8:	3f002e1a 	svccc	0x00002e1a
     6fc:	3a0e0319 	bcc	381368 <__Stack_Size+0x380f68>
     700:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     704:	11134919 	tstne	r3, r9, lsl r9
     708:	40061201 	andmi	r1, r6, r1, lsl #4
     70c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     710:	051b0000 	ldreq	r0, [fp, #-0]
     714:	3a080300 	bcc	20131c <__Stack_Size+0x200f1c>
     718:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     71c:	00180213 	andseq	r0, r8, r3, lsl r2
     720:	00051c00 	andeq	r1, r5, r0, lsl #24
     724:	0b3a0e03 	bleq	e83f38 <__Stack_Size+0xe83b38>
     728:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     72c:	00001802 	andeq	r1, r0, r2, lsl #16
     730:	3f002e1d 	svccc	0x00002e1d
     734:	3a0e0319 	bcc	3813a0 <__Stack_Size+0x380fa0>
     738:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     73c:	11134919 	tstne	r3, r9, lsl r9
     740:	40061201 	andmi	r1, r6, r1, lsl #4
     744:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     748:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     74c:	03193f01 	tsteq	r9, #1, 30
     750:	3b0b3a0e 	blcc	2cef90 <__Stack_Size+0x2ceb90>
     754:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     758:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     75c:	97184006 	ldrls	r4, [r8, -r6]
     760:	13011942 	movwne	r1, #6466	; 0x1942
     764:	051f0000 	ldreq	r0, [pc, #-0]	; 76c <__Stack_Size+0x36c>
     768:	3a0e0300 	bcc	381370 <__Stack_Size+0x380f70>
     76c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     770:	00170213 	andseq	r0, r7, r3, lsl r2
     774:	00052000 	andeq	r2, r5, r0
     778:	17021331 	smladxne	r2, r1, r3, r1
     77c:	05210000 	streq	r0, [r1, #-0]!
     780:	02133100 	andseq	r3, r3, #0, 2
     784:	22000018 	andcs	r0, r0, #24
     788:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     78c:	0b3a0e03 	bleq	e83fa0 <__Stack_Size+0xe83ba0>
     790:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     794:	06120111 			; <UNDEFINED> instruction: 0x06120111
     798:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     79c:	00130119 	andseq	r0, r3, r9, lsl r1
     7a0:	00052300 	andeq	r2, r5, r0, lsl #6
     7a4:	0b3a0803 	bleq	e827b8 <__Stack_Size+0xe823b8>
     7a8:	1349053b 	movtne	r0, #38203	; 0x953b
     7ac:	00001702 	andeq	r1, r0, r2, lsl #14
     7b0:	31011d24 	tstcc	r1, r4, lsr #26
     7b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     7b8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     7bc:	00130105 	andseq	r0, r3, r5, lsl #2
     7c0:	010b2500 	tsteq	fp, r0, lsl #10
     7c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7c8:	05260000 	streq	r0, [r6, #-0]!
     7cc:	00133100 	andseq	r3, r3, r0, lsl #2
     7d0:	01012700 	tsteq	r1, r0, lsl #14
     7d4:	13011349 	movwne	r1, #4937	; 0x1349
     7d8:	21280000 			; <UNDEFINED> instruction: 0x21280000
     7dc:	2f134900 	svccs	0x00134900
     7e0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     7e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7e8:	0b3b0b3a 	bleq	ec34d8 <__Stack_Size+0xec30d8>
     7ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     7f0:	00001802 	andeq	r1, r0, r2, lsl #16
     7f4:	3f012e2a 	svccc	0x00012e2a
     7f8:	3a0e0319 	bcc	381464 <__Stack_Size+0x381064>
     7fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     800:	3c134919 	ldccc	9, cr4, [r3], {25}
     804:	00130119 	andseq	r0, r3, r9, lsl r1
     808:	00052b00 	andeq	r2, r5, r0, lsl #22
     80c:	00001349 	andeq	r1, r0, r9, asr #6
     810:	3f002e2c 	svccc	0x00002e2c
     814:	3a0e0319 	bcc	381480 <__Stack_Size+0x381080>
     818:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     81c:	00193c19 	andseq	r3, r9, r9, lsl ip
     820:	000f2d00 	andeq	r2, pc, r0, lsl #26
     824:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     828:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     82c:	03193f01 	tsteq	r9, #1, 30
     830:	3b0b3a0e 	blcc	2cf070 <__Stack_Size+0x2cec70>
     834:	3c19270b 	ldccc	7, cr2, [r9], {11}
     838:	00130119 	andseq	r0, r3, r9, lsl r1
     83c:	002e2f00 	eoreq	r2, lr, r0, lsl #30
     840:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     844:	0b3b0b3a 	bleq	ec3534 <__Stack_Size+0xec3134>
     848:	13491927 	movtne	r1, #39207	; 0x9927
     84c:	0000193c 	andeq	r1, r0, ip, lsr r9
     850:	01110100 	tsteq	r1, r0, lsl #2
     854:	0b130e25 	bleq	4c40f0 <__Stack_Size+0x4c3cf0>
     858:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     85c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     860:	00001710 	andeq	r1, r0, r0, lsl r7
     864:	0b002402 	bleq	9874 <__Stack_Size+0x9474>
     868:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     86c:	0300000e 	movweq	r0, #14
     870:	08030016 	stmdaeq	r3, {r1, r2, r4}
     874:	0b3b0b3a 	bleq	ec3564 <__Stack_Size+0xec3164>
     878:	00001349 	andeq	r1, r0, r9, asr #6
     87c:	03001604 	movweq	r1, #1540	; 0x604
     880:	3b0b3a0e 	blcc	2cf0c0 <__Stack_Size+0x2cecc0>
     884:	0013490b 	andseq	r4, r3, fp, lsl #18
     888:	00350500 	eorseq	r0, r5, r0, lsl #10
     88c:	00001349 	andeq	r1, r0, r9, asr #6
     890:	0b010406 	bleq	418b0 <__Stack_Size+0x414b0>
     894:	3b0b3a0b 	blcc	2cf0c8 <__Stack_Size+0x2cecc8>
     898:	0013010b 	andseq	r0, r3, fp, lsl #2
     89c:	00280700 	eoreq	r0, r8, r0, lsl #14
     8a0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     8a4:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     8a8:	1c080300 	stcne	3, cr0, [r8], {-0}
     8ac:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     8b0:	0b0b0113 	bleq	2c0d04 <__Stack_Size+0x2c0904>
     8b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	03000d0a 	movweq	r0, #3338	; 0xd0a
     8c0:	3b0b3a08 	blcc	2cf0e8 <__Stack_Size+0x2cece8>
     8c4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     8c8:	0b00000b 	bleq	8fc <__Stack_Size+0x4fc>
     8cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8d4:	0b381349 	bleq	e05600 <__Stack_Size+0xe05200>
     8d8:	160c0000 	strne	r0, [ip], -r0
     8dc:	3a0e0300 	bcc	3814e4 <__Stack_Size+0x3810e4>
     8e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     8e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8ec:	0b3a0e03 	bleq	e84100 <__Stack_Size+0xe83d00>
     8f0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8f4:	0b201349 	bleq	805620 <__Stack_Size+0x805220>
     8f8:	00001301 	andeq	r1, r0, r1, lsl #6
     8fc:	0300340e 	movweq	r3, #1038	; 0x40e
     900:	3b0b3a0e 	blcc	2cf140 <__Stack_Size+0x2ced40>
     904:	00134905 	andseq	r4, r3, r5, lsl #18
     908:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     90c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     910:	0b3b0b3a 	bleq	ec3600 <__Stack_Size+0xec3200>
     914:	01111927 	tsteq	r1, r7, lsr #18
     918:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     91c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     920:	10000013 	andne	r0, r0, r3, lsl r0
     924:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     928:	0b3b0b3a 	bleq	ec3618 <__Stack_Size+0xec3218>
     92c:	17021349 	strne	r1, [r2, -r9, asr #6]
     930:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     934:	03193f00 	tsteq	r9, #0, 30
     938:	3b0b3a0e 	blcc	2cf178 <__Stack_Size+0x2ced78>
     93c:	1119270b 	tstne	r9, fp, lsl #14
     940:	40061201 	andmi	r1, r6, r1, lsl #4
     944:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     948:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     94c:	03193f00 	tsteq	r9, #0, 30
     950:	3b0b3a0e 	blcc	2cf190 <__Stack_Size+0x2ced90>
     954:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     958:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     95c:	97184006 	ldrls	r4, [r8, -r6]
     960:	00001942 	andeq	r1, r0, r2, asr #18
     964:	3f012e13 	svccc	0x00012e13
     968:	3a0e0319 	bcc	3815d4 <__Stack_Size+0x3811d4>
     96c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     970:	11134919 	tstne	r3, r9, lsl r9
     974:	40061201 	andmi	r1, r6, r1, lsl #4
     978:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     97c:	00001301 	andeq	r1, r0, r1, lsl #6
     980:	03003414 	movweq	r3, #1044	; 0x414
     984:	3b0b3a0e 	blcc	2cf1c4 <__Stack_Size+0x2cedc4>
     988:	02134905 	andseq	r4, r3, #81920	; 0x14000
     98c:	15000017 	strne	r0, [r0, #-23]
     990:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     994:	0b3a0e03 	bleq	e841a8 <__Stack_Size+0xe83da8>
     998:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     99c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9a4:	00130119 	andseq	r0, r3, r9, lsl r1
     9a8:	00051600 	andeq	r1, r5, r0, lsl #12
     9ac:	0b3a0e03 	bleq	e841c0 <__Stack_Size+0xe83dc0>
     9b0:	1349053b 	movtne	r0, #38203	; 0x953b
     9b4:	00001702 	andeq	r1, r0, r2, lsl #14
     9b8:	03000517 	movweq	r0, #1303	; 0x517
     9bc:	3b0b3a0e 	blcc	2cf1fc <__Stack_Size+0x2cedfc>
     9c0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9c4:	18000018 	stmdane	r0, {r3, r4}
     9c8:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     9cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9d4:	00130119 	andseq	r0, r3, r9, lsl r1
     9d8:	00341900 	eorseq	r1, r4, r0, lsl #18
     9dc:	17021331 	smladxne	r2, r1, r3, r1
     9e0:	0b1a0000 	bleq	6809e8 <__Stack_Size+0x6805e8>
     9e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9e8:	1b000006 	blne	a08 <__Stack_Size+0x608>
     9ec:	13310034 	teqne	r1, #52	; 0x34
     9f0:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     9f4:	3a0e0301 	bcc	381600 <__Stack_Size+0x381200>
     9f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9fc:	010b2019 	tsteq	fp, r9, lsl r0
     a00:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     a04:	08030034 	stmdaeq	r3, {r2, r4, r5}
     a08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a0c:	00001349 	andeq	r1, r0, r9, asr #6
     a10:	31011d1e 	tstcc	r1, lr, lsl sp
     a14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a18:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     a1c:	00130105 	andseq	r0, r3, r5, lsl #2
     a20:	00341f00 	eorseq	r1, r4, r0, lsl #30
     a24:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     a28:	89200000 	stmdbhi	r0!, {}	; <UNPREDICTABLE>
     a2c:	11000182 	smlabbne	r0, r2, r1, r0
     a30:	00133101 	andseq	r3, r3, r1, lsl #2
     a34:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     a38:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a3c:	0b3b0b3a 	bleq	ec372c <__Stack_Size+0xec332c>
     a40:	13491927 	movtne	r1, #39207	; 0x9927
     a44:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a48:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a4c:	00130119 	andseq	r0, r3, r9, lsl r1
     a50:	00342200 	eorseq	r2, r4, r0, lsl #4
     a54:	0b3a0e03 	bleq	e84268 <__Stack_Size+0xe83e68>
     a58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a5c:	00001702 	andeq	r1, r0, r2, lsl #14
     a60:	01828923 	orreq	r8, r2, r3, lsr #18
     a64:	31011101 	tstcc	r1, r1, lsl #2
     a68:	00130113 	andseq	r0, r3, r3, lsl r1
     a6c:	828a2400 	addhi	r2, sl, #0, 8
     a70:	18020001 	stmdane	r2, {r0}
     a74:	00184291 	mulseq	r8, r1, r2
     a78:	82892500 	addhi	r2, r9, #0, 10
     a7c:	01110101 	tsteq	r1, r1, lsl #2
     a80:	00001331 	andeq	r1, r0, r1, lsr r3
     a84:	3f012e26 	svccc	0x00012e26
     a88:	3a0e0319 	bcc	3816f4 <__Stack_Size+0x3812f4>
     a8c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a90:	11134919 	tstne	r3, r9, lsl r9
     a94:	40061201 	andmi	r1, r6, r1, lsl #4
     a98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a9c:	01000000 	mrseq	r0, (UNDEF: 0)
     aa0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     aa4:	0e030b13 	vmoveq.32	d3[0], r0
     aa8:	01110e1b 	tsteq	r1, fp, lsl lr
     aac:	17100612 			; <UNDEFINED> instruction: 0x17100612
     ab0:	24020000 	strcs	r0, [r2], #-0
     ab4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ab8:	000e030b 	andeq	r0, lr, fp, lsl #6
     abc:	00160300 	andseq	r0, r6, r0, lsl #6
     ac0:	0b3a0803 	bleq	e82ad4 <__Stack_Size+0xe826d4>
     ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ac8:	16040000 	strne	r0, [r4], -r0
     acc:	3a0e0300 	bcc	3816d4 <__Stack_Size+0x3812d4>
     ad0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ad4:	05000013 	streq	r0, [r0, #-19]
     ad8:	13490035 	movtne	r0, #36917	; 0x9035
     adc:	04060000 	streq	r0, [r6], #-0
     ae0:	3a0b0b01 	bcc	2c36ec <__Stack_Size+0x2c32ec>
     ae4:	010b3b0b 	tsteq	fp, fp, lsl #22
     ae8:	07000013 	smladeq	r0, r3, r0, r0
     aec:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     af0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     af4:	0b011308 	bleq	4571c <__Stack_Size+0x4531c>
     af8:	3b0b3a0b 	blcc	2cf32c <__Stack_Size+0x2cef2c>
     afc:	00130105 	andseq	r0, r3, r5, lsl #2
     b00:	000d0900 	andeq	r0, sp, r0, lsl #18
     b04:	0b3a0803 	bleq	e82b18 <__Stack_Size+0xe82718>
     b08:	1349053b 	movtne	r0, #38203	; 0x953b
     b0c:	00000b38 	andeq	r0, r0, r8, lsr fp
     b10:	03000d0a 	movweq	r0, #3338	; 0xd0a
     b14:	3b0b3a0e 	blcc	2cf354 <__Stack_Size+0x2cef54>
     b18:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     b1c:	0b00000b 	bleq	b50 <__Stack_Size+0x750>
     b20:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b28:	00001349 	andeq	r1, r0, r9, asr #6
     b2c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     b30:	00130113 	andseq	r0, r3, r3, lsl r1
     b34:	00210d00 	eoreq	r0, r1, r0, lsl #26
     b38:	0b2f1349 	bleq	bc5864 <__Stack_Size+0xbc5464>
     b3c:	130e0000 	movwne	r0, #57344	; 0xe000
     b40:	3a0b0b01 	bcc	2c374c <__Stack_Size+0x2c334c>
     b44:	010b3b0b 	tsteq	fp, fp, lsl #22
     b48:	0f000013 	svceq	0x00000013
     b4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b50:	0b3b0b3a 	bleq	ec3840 <__Stack_Size+0xec3440>
     b54:	0b381349 	bleq	e05880 <__Stack_Size+0xe05480>
     b58:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     b5c:	03193f01 	tsteq	r9, #1, 30
     b60:	3b0b3a0e 	blcc	2cf3a0 <__Stack_Size+0x2cefa0>
     b64:	1119270b 	tstne	r9, fp, lsl #14
     b68:	40061201 	andmi	r1, r6, r1, lsl #4
     b6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b70:	00001301 	andeq	r1, r0, r1, lsl #6
     b74:	03000511 	movweq	r0, #1297	; 0x511
     b78:	3b0b3a0e 	blcc	2cf3b8 <__Stack_Size+0x2cefb8>
     b7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b80:	12000017 	andne	r0, r0, #23
     b84:	01018289 	smlabbeq	r1, r9, r2, r8
     b88:	13310111 	teqne	r1, #1073741828	; 0x40000004
     b8c:	00001301 	andeq	r1, r0, r1, lsl #6
     b90:	01828a13 	orreq	r8, r2, r3, lsl sl
     b94:	91180200 	tstls	r8, r0, lsl #4
     b98:	00001842 	andeq	r1, r0, r2, asr #16
     b9c:	01828914 	orreq	r8, r2, r4, lsl r9
     ba0:	95011101 	strls	r1, [r1, #-257]	; 0x101
     ba4:	13311942 	teqne	r1, #1081344	; 0x108000
     ba8:	0f150000 	svceq	0x00150000
     bac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     bb0:	16000013 			; <UNDEFINED> instruction: 0x16000013
     bb4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bb8:	0b3b0b3a 	bleq	ec38a8 <__Stack_Size+0xec34a8>
     bbc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     bc0:	34170000 	ldrcc	r0, [r7], #-0
     bc4:	3a0e0300 	bcc	3817cc <__Stack_Size+0x3813cc>
     bc8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bcc:	00170213 	andseq	r0, r7, r3, lsl r2
     bd0:	00341800 	eorseq	r1, r4, r0, lsl #16
     bd4:	0b3a0803 	bleq	e82be8 <__Stack_Size+0xe827e8>
     bd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bdc:	00001702 	andeq	r1, r0, r2, lsl #14
     be0:	3f012e19 	svccc	0x00012e19
     be4:	3a0e0319 	bcc	381850 <__Stack_Size+0x381450>
     be8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bec:	11134919 	tstne	r3, r9, lsl r9
     bf0:	40061201 	andmi	r1, r6, r1, lsl #4
     bf4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     bf8:	00001301 	andeq	r1, r0, r1, lsl #6
     bfc:	3f012e1a 	svccc	0x00012e1a
     c00:	3a0e0319 	bcc	38186c <__Stack_Size+0x38146c>
     c04:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c08:	11134919 	tstne	r3, r9, lsl r9
     c0c:	40061201 	andmi	r1, r6, r1, lsl #4
     c10:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c14:	00001301 	andeq	r1, r0, r1, lsl #6
     c18:	0300051b 	movweq	r0, #1307	; 0x51b
     c1c:	3b0b3a0e 	blcc	2cf45c <__Stack_Size+0x2cf05c>
     c20:	02134905 	andseq	r4, r3, #81920	; 0x14000
     c24:	1c000017 	stcne	0, cr0, [r0], {23}
     c28:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c30:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c34:	341d0000 	ldrcc	r0, [sp], #-0
     c38:	3a0e0300 	bcc	381840 <__Stack_Size+0x381440>
     c3c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c40:	00170213 	andseq	r0, r7, r3, lsl r2
     c44:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     c48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c50:	01111927 	tsteq	r1, r7, lsr #18
     c54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c58:	01194297 			; <UNDEFINED> instruction: 0x01194297
     c5c:	1f000013 	svcne	0x00000013
     c60:	08030034 	stmdaeq	r3, {r2, r4, r5}
     c64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c68:	17021349 	strne	r1, [r2, -r9, asr #6]
     c6c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     c70:	03193f01 	tsteq	r9, #1, 30
     c74:	3b0b3a0e 	blcc	2cf4b4 <__Stack_Size+0x2cf0b4>
     c78:	3c192705 	ldccc	7, cr2, [r9], {5}
     c7c:	21000019 	tstcs	r0, r9, lsl r0
     c80:	13490005 	movtne	r0, #36869	; 0x9005
     c84:	01000000 	mrseq	r0, (UNDEF: 0)
     c88:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c8c:	0e030b13 	vmoveq.32	d3[0], r0
     c90:	01110e1b 	tsteq	r1, fp, lsl lr
     c94:	17100612 			; <UNDEFINED> instruction: 0x17100612
     c98:	24020000 	strcs	r0, [r2], #-0
     c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ca0:	000e030b 	andeq	r0, lr, fp, lsl #6
     ca4:	00160300 	andseq	r0, r6, r0, lsl #6
     ca8:	0b3a0803 	bleq	e82cbc <__Stack_Size+0xe828bc>
     cac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cb0:	16040000 	strne	r0, [r4], -r0
     cb4:	3a0e0300 	bcc	3818bc <__Stack_Size+0x3814bc>
     cb8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cbc:	05000013 	streq	r0, [r0, #-19]
     cc0:	13490035 	movtne	r0, #36917	; 0x9035
     cc4:	26060000 	strcs	r0, [r6], -r0
     cc8:	00134900 	andseq	r4, r3, r0, lsl #18
     ccc:	01040700 	tsteq	r4, r0, lsl #14
     cd0:	0b3a0b0b 	bleq	e83904 <__Stack_Size+0xe83504>
     cd4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     cd8:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
     cdc:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     ce0:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     ce4:	08030028 	stmdaeq	r3, {r3, r5}
     ce8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     cec:	0b01130a 	bleq	4591c <__Stack_Size+0x4551c>
     cf0:	3b0b3a05 	blcc	2cf50c <__Stack_Size+0x2cf10c>
     cf4:	00130105 	andseq	r0, r3, r5, lsl #2
     cf8:	000d0b00 	andeq	r0, sp, r0, lsl #22
     cfc:	0b3a0e03 	bleq	e84510 <__Stack_Size+0xe84110>
     d00:	1349053b 	movtne	r0, #38203	; 0x953b
     d04:	00000b38 	andeq	r0, r0, r8, lsr fp
     d08:	03000d0c 	movweq	r0, #3340	; 0xd0c
     d0c:	3b0b3a0e 	blcc	2cf54c <__Stack_Size+0x2cf14c>
     d10:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     d14:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     d18:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d20:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     d24:	010e0000 	mrseq	r0, (UNDEF: 14)
     d28:	01134901 	tsteq	r3, r1, lsl #18
     d2c:	0f000013 	svceq	0x00000013
     d30:	13490021 	movtne	r0, #36897	; 0x9021
     d34:	00000b2f 	andeq	r0, r0, pc, lsr #22
     d38:	03001610 	movweq	r1, #1552	; 0x610
     d3c:	3b0b3a0e 	blcc	2cf57c <__Stack_Size+0x2cf17c>
     d40:	00134905 	andseq	r4, r3, r5, lsl #18
     d44:	01131100 	tsteq	r3, r0, lsl #2
     d48:	0b3a0b0b 	bleq	e8397c <__Stack_Size+0xe8357c>
     d4c:	1301053b 	movwne	r0, #5435	; 0x153b
     d50:	0d120000 	ldceq	0, cr0, [r2, #-0]
     d54:	3a080300 	bcc	20195c <__Stack_Size+0x20155c>
     d58:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d5c:	000b3813 	andeq	r3, fp, r3, lsl r8
     d60:	01131300 	tsteq	r3, r0, lsl #6
     d64:	0b3a0b0b 	bleq	e83998 <__Stack_Size+0xe83598>
     d68:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     d6c:	0d140000 	ldceq	0, cr0, [r4, #-0]
     d70:	3a0e0300 	bcc	381978 <__Stack_Size+0x381578>
     d74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d78:	000b3813 	andeq	r3, fp, r3, lsl r8
     d7c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     d80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d84:	0b3b0b3a 	bleq	ec3a74 <__Stack_Size+0xec3674>
     d88:	01111927 	tsteq	r1, r7, lsr #18
     d8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d90:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d94:	16000013 			; <UNDEFINED> instruction: 0x16000013
     d98:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d9c:	0b3b0b3a 	bleq	ec3a8c <__Stack_Size+0xec368c>
     da0:	17021349 	strne	r1, [r2, -r9, asr #6]
     da4:	05170000 	ldreq	r0, [r7, #-0]
     da8:	3a0e0300 	bcc	3819b0 <__Stack_Size+0x3815b0>
     dac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db0:	00170213 	andseq	r0, r7, r3, lsl r2
     db4:	00051800 	andeq	r1, r5, r0, lsl #16
     db8:	0b3a0e03 	bleq	e845cc <__Stack_Size+0xe841cc>
     dbc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     dc0:	00001802 	andeq	r1, r0, r2, lsl #16
     dc4:	0b000f19 	bleq	4a30 <__Stack_Size+0x4630>
     dc8:	0013490b 	andseq	r4, r3, fp, lsl #18
     dcc:	82891a00 	addhi	r1, r9, #0, 20
     dd0:	01110001 	tsteq	r1, r1
     dd4:	31194295 			; <UNDEFINED> instruction: 0x31194295
     dd8:	1b000013 	blne	e2c <__Stack_Size+0xa2c>
     ddc:	01018289 	smlabbeq	r1, r9, r2, r8
     de0:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     de4:	00133119 	andseq	r3, r3, r9, lsl r1
     de8:	828a1c00 	addhi	r1, sl, #0, 24
     dec:	18020001 	stmdane	r2, {r0}
     df0:	00184291 	mulseq	r8, r1, r2
     df4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     df8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     dfc:	0b3b0b3a 	bleq	ec3aec <__Stack_Size+0xec36ec>
     e00:	13491927 	movtne	r1, #39207	; 0x9927
     e04:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e0c:	00130119 	andseq	r0, r3, r9, lsl r1
     e10:	002e1e00 	eoreq	r1, lr, r0, lsl #28
     e14:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e1c:	13491927 	movtne	r1, #39207	; 0x9927
     e20:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e24:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e28:	1f000019 	svcne	0x00000019
     e2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e30:	0b3a0e03 	bleq	e84644 <__Stack_Size+0xe84244>
     e34:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e38:	01111349 	tsteq	r1, r9, asr #6
     e3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e40:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e44:	20000013 	andcs	r0, r0, r3, lsl r0
     e48:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e50:	17021349 	strne	r1, [r2, -r9, asr #6]
     e54:	34210000 	strtcc	r0, [r1], #-0
     e58:	3a0e0300 	bcc	381a60 <__Stack_Size+0x381660>
     e5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e60:	00170213 	andseq	r0, r7, r3, lsl r2
     e64:	00342200 	eorseq	r2, r4, r0, lsl #4
     e68:	0b3a0803 	bleq	e82e7c <__Stack_Size+0xe82a7c>
     e6c:	1349053b 	movtne	r0, #38203	; 0x953b
     e70:	00001702 	andeq	r1, r0, r2, lsl #14
     e74:	3f012e23 	svccc	0x00012e23
     e78:	3a0e0319 	bcc	381ae4 <__Stack_Size+0x3816e4>
     e7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     e84:	97184006 	ldrls	r4, [r8, -r6]
     e88:	13011942 	movwne	r1, #6466	; 0x1942
     e8c:	05240000 	streq	r0, [r4, #-0]!
     e90:	3a0e0300 	bcc	381a98 <__Stack_Size+0x381698>
     e94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e98:	00180213 	andseq	r0, r8, r3, lsl r2
     e9c:	002e2500 	eoreq	r2, lr, r0, lsl #10
     ea0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ea8:	01111927 	tsteq	r1, r7, lsr #18
     eac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     eb0:	00194297 	mulseq	r9, r7, r2
     eb4:	002e2600 	eoreq	r2, lr, r0, lsl #12
     eb8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ebc:	0b3b0b3a 	bleq	ec3bac <__Stack_Size+0xec37ac>
     ec0:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     ec4:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     ec8:	03193f01 	tsteq	r9, #1, 30
     ecc:	3b0b3a0e 	blcc	2cf70c <__Stack_Size+0x2cf30c>
     ed0:	3c19270b 	ldccc	7, cr2, [r9], {11}
     ed4:	00130119 	andseq	r0, r3, r9, lsl r1
     ed8:	00052800 	andeq	r2, r5, r0, lsl #16
     edc:	00001349 	andeq	r1, r0, r9, asr #6
     ee0:	3f002e29 	svccc	0x00002e29
     ee4:	3a0e0319 	bcc	381b50 <__Stack_Size+0x381750>
     ee8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     eec:	3c134919 	ldccc	9, cr4, [r3], {25}
     ef0:	00000019 	andeq	r0, r0, r9, lsl r0
     ef4:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     ef8:	030b130e 	movweq	r1, #45838	; 0xb30e
     efc:	110e1b0e 	tstne	lr, lr, lsl #22
     f00:	10061201 	andne	r1, r6, r1, lsl #4
     f04:	02000017 	andeq	r0, r0, #23
     f08:	0b0b0024 	bleq	2c0fa0 <__Stack_Size+0x2c0ba0>
     f0c:	0e030b3e 	vmoveq.16	d3[0], r0
     f10:	16030000 	strne	r0, [r3], -r0
     f14:	3a080300 	bcc	201b1c <__Stack_Size+0x20171c>
     f18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f1c:	04000013 	streq	r0, [r0], #-19
     f20:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f24:	0b3b0b3a 	bleq	ec3c14 <__Stack_Size+0xec3814>
     f28:	00001349 	andeq	r1, r0, r9, asr #6
     f2c:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     f30:	06000013 			; <UNDEFINED> instruction: 0x06000013
     f34:	0b0b0104 	bleq	2c134c <__Stack_Size+0x2c0f4c>
     f38:	0b3b0b3a 	bleq	ec3c28 <__Stack_Size+0xec3828>
     f3c:	00001301 	andeq	r1, r0, r1, lsl #6
     f40:	03002807 	movweq	r2, #2055	; 0x807
     f44:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     f48:	00280800 	eoreq	r0, r8, r0, lsl #16
     f4c:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     f50:	13090000 	movwne	r0, #36864	; 0x9000
     f54:	3a0b0b01 	bcc	2c3b60 <__Stack_Size+0x2c3760>
     f58:	01053b0b 	tsteq	r5, fp, lsl #22
     f5c:	0a000013 	beq	fb0 <__Stack_Size+0xbb0>
     f60:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     f64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     f68:	0b381349 	bleq	e05c94 <__Stack_Size+0xe05894>
     f6c:	160b0000 	strne	r0, [fp], -r0
     f70:	3a0e0300 	bcc	381b78 <__Stack_Size+0x381778>
     f74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f78:	0c000013 	stceq	0, cr0, [r0], {19}
     f7c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f80:	0b3a0e03 	bleq	e84794 <__Stack_Size+0xe84394>
     f84:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f88:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f8c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     f90:	00130119 	andseq	r0, r3, r9, lsl r1
     f94:	82890d00 	addhi	r0, r9, #0, 26
     f98:	01110101 	tsteq	r1, r1, lsl #2
     f9c:	13011331 	movwne	r1, #4913	; 0x1331
     fa0:	8a0e0000 	bhi	380fa8 <__Stack_Size+0x380ba8>
     fa4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     fa8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     fac:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     fb0:	11010182 	smlabbne	r1, r2, r1, r0
     fb4:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     fb8:	00001331 	andeq	r1, r0, r1, lsr r3
     fbc:	03000510 	movweq	r0, #1296	; 0x510
     fc0:	3b0b3a0e 	blcc	2cf800 <__Stack_Size+0x2cf400>
     fc4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fc8:	11000018 	tstne	r0, r8, lsl r0
     fcc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     fd0:	0b3b0b3a 	bleq	ec3cc0 <__Stack_Size+0xec38c0>
     fd4:	17021349 	strne	r1, [r2, -r9, asr #6]
     fd8:	34120000 	ldrcc	r0, [r2], #-0
     fdc:	3a0e0300 	bcc	381be4 <__Stack_Size+0x3817e4>
     fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	00170213 	andseq	r0, r7, r3, lsl r2
     fe8:	82891300 	addhi	r1, r9, #0, 6
     fec:	01110001 	tsteq	r1, r1
     ff0:	31194295 			; <UNDEFINED> instruction: 0x31194295
     ff4:	14000013 	strne	r0, [r0], #-19
     ff8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ffc:	0b3a0e03 	bleq	e84810 <__Stack_Size+0xe84410>
    1000:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1004:	01111349 	tsteq	r1, r9, asr #6
    1008:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    100c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1010:	15000013 	strne	r0, [r0, #-19]
    1014:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1018:	0b3a0e03 	bleq	e8482c <__Stack_Size+0xe8442c>
    101c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1020:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1024:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1028:	00130119 	andseq	r0, r3, r9, lsl r1
    102c:	00051600 	andeq	r1, r5, r0, lsl #12
    1030:	0b3a0e03 	bleq	e84844 <__Stack_Size+0xe84444>
    1034:	1349053b 	movtne	r0, #38203	; 0x953b
    1038:	00001702 	andeq	r1, r0, r2, lsl #14
    103c:	3f012e17 	svccc	0x00012e17
    1040:	3a0e0319 	bcc	381cac <__Stack_Size+0x3818ac>
    1044:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1048:	01193c19 	tsteq	r9, r9, lsl ip
    104c:	18000013 	stmdane	r0, {r0, r1, r4}
    1050:	13490005 	movtne	r0, #36869	; 0x9005
    1054:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1058:	03193f00 	tsteq	r9, #0, 30
    105c:	3b0b3a0e 	blcc	2cf89c <__Stack_Size+0x2cf49c>
    1060:	3c19270b 	ldccc	7, cr2, [r9], {11}
    1064:	00000019 	andeq	r0, r0, r9, lsl r0
    1068:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    106c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1070:	110e1b0e 	tstne	lr, lr, lsl #22
    1074:	10061201 	andne	r1, r6, r1, lsl #4
    1078:	02000017 	andeq	r0, r0, #23
    107c:	0b0b0024 	bleq	2c1114 <__Stack_Size+0x2c0d14>
    1080:	0e030b3e 	vmoveq.16	d3[0], r0
    1084:	16030000 	strne	r0, [r3], -r0
    1088:	3a080300 	bcc	201c90 <__Stack_Size+0x201890>
    108c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1090:	04000013 	streq	r0, [r0], #-19
    1094:	13490026 	movtne	r0, #36902	; 0x9026
    1098:	16050000 	strne	r0, [r5], -r0
    109c:	3a0e0300 	bcc	381ca4 <__Stack_Size+0x3818a4>
    10a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10a4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    10a8:	13490035 	movtne	r0, #36917	; 0x9035
    10ac:	04070000 	streq	r0, [r7], #-0
    10b0:	3a0b0b01 	bcc	2c3cbc <__Stack_Size+0x2c38bc>
    10b4:	010b3b0b 	tsteq	fp, fp, lsl #22
    10b8:	08000013 	stmdaeq	r0, {r0, r1, r4}
    10bc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    10c0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    10c4:	03002809 	movweq	r2, #2057	; 0x809
    10c8:	000d1c08 	andeq	r1, sp, r8, lsl #24
    10cc:	01130a00 	tsteq	r3, r0, lsl #20
    10d0:	0b3a0b0b 	bleq	e83d04 <__Stack_Size+0xe83904>
    10d4:	1301053b 	movwne	r0, #5435	; 0x153b
    10d8:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    10dc:	3a080300 	bcc	201ce4 <__Stack_Size+0x2018e4>
    10e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10e4:	000b3813 	andeq	r3, fp, r3, lsl r8
    10e8:	000d0c00 	andeq	r0, sp, r0, lsl #24
    10ec:	0b3a0e03 	bleq	e84900 <__Stack_Size+0xe84500>
    10f0:	1349053b 	movtne	r0, #38203	; 0x953b
    10f4:	00000b38 	andeq	r0, r0, r8, lsr fp
    10f8:	0300160d 	movweq	r1, #1549	; 0x60d
    10fc:	3b0b3a0e 	blcc	2cf93c <__Stack_Size+0x2cf53c>
    1100:	00134905 	andseq	r4, r3, r5, lsl #18
    1104:	01130e00 	tsteq	r3, r0, lsl #28
    1108:	0b3a0b0b 	bleq	e83d3c <__Stack_Size+0xe8393c>
    110c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1110:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 1118 <__Stack_Size+0xd18>
    1114:	3a0e0300 	bcc	381d1c <__Stack_Size+0x38191c>
    1118:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    111c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1120:	002e1000 	eoreq	r1, lr, r0
    1124:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1128:	0b3b0b3a 	bleq	ec3e18 <__Stack_Size+0xec3a18>
    112c:	01111927 	tsteq	r1, r7, lsr #18
    1130:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1134:	00194297 	mulseq	r9, r7, r2
    1138:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    113c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1140:	0b3b0b3a 	bleq	ec3e30 <__Stack_Size+0xec3a30>
    1144:	01111927 	tsteq	r1, r7, lsr #18
    1148:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    114c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1150:	12000013 	andne	r0, r0, #19
    1154:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1158:	0b3b0b3a 	bleq	ec3e48 <__Stack_Size+0xec3a48>
    115c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1160:	05130000 	ldreq	r0, [r3, #-0]
    1164:	3a0e0300 	bcc	381d6c <__Stack_Size+0x38196c>
    1168:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    116c:	00170213 	andseq	r0, r7, r3, lsl r2
    1170:	00341400 	eorseq	r1, r4, r0, lsl #8
    1174:	0b3a0e03 	bleq	e84988 <__Stack_Size+0xe84588>
    1178:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    117c:	00001702 	andeq	r1, r0, r2, lsl #14
    1180:	3f012e15 	svccc	0x00012e15
    1184:	3a0e0319 	bcc	381df0 <__Stack_Size+0x3819f0>
    1188:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    118c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1190:	97184006 	ldrls	r4, [r8, -r6]
    1194:	13011942 	movwne	r1, #6466	; 0x1942
    1198:	05160000 	ldreq	r0, [r6, #-0]
    119c:	3a0e0300 	bcc	381da4 <__Stack_Size+0x3819a4>
    11a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11a4:	00180213 	andseq	r0, r8, r3, lsl r2
    11a8:	00051700 	andeq	r1, r5, r0, lsl #14
    11ac:	0b3a0e03 	bleq	e849c0 <__Stack_Size+0xe845c0>
    11b0:	1349053b 	movtne	r0, #38203	; 0x953b
    11b4:	00001702 	andeq	r1, r0, r2, lsl #14
    11b8:	03003418 	movweq	r3, #1048	; 0x418
    11bc:	3b0b3a0e 	blcc	2cf9fc <__Stack_Size+0x2cf5fc>
    11c0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11c4:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    11c8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    11cc:	0b3a0e03 	bleq	e849e0 <__Stack_Size+0xe845e0>
    11d0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    11d4:	01111349 	tsteq	r1, r9, asr #6
    11d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11dc:	00194297 	mulseq	r9, r7, r2
    11e0:	00341a00 	eorseq	r1, r4, r0, lsl #20
    11e4:	0b3a0803 	bleq	e831f8 <__Stack_Size+0xe82df8>
    11e8:	1349053b 	movtne	r0, #38203	; 0x953b
    11ec:	00001702 	andeq	r1, r0, r2, lsl #14
    11f0:	0b000f1b 	bleq	4e64 <__Stack_Size+0x4a64>
    11f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    11f8:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    11fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1204:	13491927 	movtne	r1, #39207	; 0x9927
    1208:	06120111 			; <UNDEFINED> instruction: 0x06120111
    120c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1210:	00130119 	andseq	r0, r3, r9, lsl r1
    1214:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
    1218:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    121c:	0b3b0b3a 	bleq	ec3f0c <__Stack_Size+0xec3b0c>
    1220:	13491927 	movtne	r1, #39207	; 0x9927
    1224:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1228:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    122c:	00130119 	andseq	r0, r3, r9, lsl r1
    1230:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1234:	0b3a0e03 	bleq	e84a48 <__Stack_Size+0xe84648>
    1238:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    123c:	00001802 	andeq	r1, r0, r2, lsl #16
    1240:	0182891f 	orreq	r8, r2, pc, lsl r9
    1244:	31011101 	tstcc	r1, r1, lsl #2
    1248:	00130113 	andseq	r0, r3, r3, lsl r1
    124c:	828a2000 	addhi	r2, sl, #0
    1250:	18020001 	stmdane	r2, {r0}
    1254:	00184291 	mulseq	r8, r1, r2
    1258:	82892100 	addhi	r2, r9, #0, 2
    125c:	01110101 	tsteq	r1, r1, lsl #2
    1260:	00001331 	andeq	r1, r0, r1, lsr r3
    1264:	3f002e22 	svccc	0x00002e22
    1268:	3a0e0319 	bcc	381ed4 <__Stack_Size+0x381ad4>
    126c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1270:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1274:	97184006 	ldrls	r4, [r8, -r6]
    1278:	00001942 	andeq	r1, r0, r2, asr #18
    127c:	49010123 	stmdbmi	r1, {r0, r1, r5, r8}
    1280:	00130113 	andseq	r0, r3, r3, lsl r1
    1284:	00212400 	eoreq	r2, r1, r0, lsl #8
    1288:	0b2f1349 	bleq	bc5fb4 <__Stack_Size+0xbc5bb4>
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
    1290:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1294:	0e030b13 	vmoveq.32	d3[0], r0
    1298:	01110e1b 	tsteq	r1, fp, lsl lr
    129c:	17100612 			; <UNDEFINED> instruction: 0x17100612
    12a0:	24020000 	strcs	r0, [r2], #-0
    12a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12a8:	000e030b 	andeq	r0, lr, fp, lsl #6
    12ac:	00160300 	andseq	r0, r6, r0, lsl #6
    12b0:	0b3a0803 	bleq	e832c4 <__Stack_Size+0xe82ec4>
    12b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12b8:	16040000 	strne	r0, [r4], -r0
    12bc:	3a0e0300 	bcc	381ec4 <__Stack_Size+0x381ac4>
    12c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12c4:	05000013 	streq	r0, [r0, #-19]
    12c8:	13490035 	movtne	r0, #36917	; 0x9035
    12cc:	26060000 	strcs	r0, [r6], -r0
    12d0:	00134900 	andseq	r4, r3, r0, lsl #18
    12d4:	01040700 	tsteq	r4, r0, lsl #14
    12d8:	0b3a0b0b 	bleq	e83f0c <__Stack_Size+0xe83b0c>
    12dc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    12e0:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    12e4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    12e8:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    12ec:	08030028 	stmdaeq	r3, {r3, r5}
    12f0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    12f4:	0b01130a 	bleq	45f24 <__Stack_Size+0x45b24>
    12f8:	3b0b3a0b 	blcc	2cfb2c <__Stack_Size+0x2cf72c>
    12fc:	00130105 	andseq	r0, r3, r5, lsl #2
    1300:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1304:	0b3a0e03 	bleq	e84b18 <__Stack_Size+0xe84718>
    1308:	1349053b 	movtne	r0, #38203	; 0x953b
    130c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1310:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1314:	3b0b3a08 	blcc	2cfb3c <__Stack_Size+0x2cf73c>
    1318:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    131c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1320:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1324:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1328:	00001349 	andeq	r1, r0, r9, asr #6
    132c:	3f012e0e 	svccc	0x00012e0e
    1330:	3a0e0319 	bcc	381f9c <__Stack_Size+0x381b9c>
    1334:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1338:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    133c:	97184006 	ldrls	r4, [r8, -r6]
    1340:	13011942 	movwne	r1, #6466	; 0x1942
    1344:	050f0000 	streq	r0, [pc, #-0]	; 134c <__Stack_Size+0xf4c>
    1348:	3a0e0300 	bcc	381f50 <__Stack_Size+0x381b50>
    134c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1350:	00180213 	andseq	r0, r8, r3, lsl r2
    1354:	00051000 	andeq	r1, r5, r0
    1358:	0b3a0e03 	bleq	e84b6c <__Stack_Size+0xe8476c>
    135c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1360:	00001702 	andeq	r1, r0, r2, lsl #14
    1364:	3f002e11 	svccc	0x00002e11
    1368:	3a0e0319 	bcc	381fd4 <__Stack_Size+0x381bd4>
    136c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1370:	11134919 	tstne	r3, r9, lsl r9
    1374:	40061201 	andmi	r1, r6, r1, lsl #4
    1378:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    137c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1380:	03193f01 	tsteq	r9, #1, 30
    1384:	3b0b3a0e 	blcc	2cfbc4 <__Stack_Size+0x2cf7c4>
    1388:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    138c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1390:	97184006 	ldrls	r4, [r8, -r6]
    1394:	00001942 	andeq	r1, r0, r2, asr #18
    1398:	03003413 	movweq	r3, #1043	; 0x413
    139c:	3b0b3a0e 	blcc	2cfbdc <__Stack_Size+0x2cf7dc>
    13a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13a4:	14000017 	strne	r0, [r0], #-23
    13a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    13ac:	0b3b0b3a 	bleq	ec409c <__Stack_Size+0xec3c9c>
    13b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    13b4:	01000000 	mrseq	r0, (UNDEF: 0)
    13b8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    13bc:	0e030b13 	vmoveq.32	d3[0], r0
    13c0:	01110e1b 	tsteq	r1, fp, lsl lr
    13c4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    13c8:	24020000 	strcs	r0, [r2], #-0
    13cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    13d0:	000e030b 	andeq	r0, lr, fp, lsl #6
    13d4:	00160300 	andseq	r0, r6, r0, lsl #6
    13d8:	0b3a0803 	bleq	e833ec <__Stack_Size+0xe82fec>
    13dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13e0:	16040000 	strne	r0, [r4], -r0
    13e4:	3a0e0300 	bcc	381fec <__Stack_Size+0x381bec>
    13e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13ec:	05000013 	streq	r0, [r0, #-19]
    13f0:	13490035 	movtne	r0, #36917	; 0x9035
    13f4:	04060000 	streq	r0, [r6], #-0
    13f8:	3a0b0b01 	bcc	2c4004 <__Stack_Size+0x2c3c04>
    13fc:	010b3b0b 	tsteq	fp, fp, lsl #22
    1400:	07000013 	smladeq	r0, r3, r0, r0
    1404:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1408:	00000d1c 	andeq	r0, r0, ip, lsl sp
    140c:	03002808 	movweq	r2, #2056	; 0x808
    1410:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1414:	01130900 	tsteq	r3, r0, lsl #18
    1418:	0b3a0b0b 	bleq	e8404c <__Stack_Size+0xe83c4c>
    141c:	1301053b 	movwne	r0, #5435	; 0x153b
    1420:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1424:	3a080300 	bcc	20202c <__Stack_Size+0x201c2c>
    1428:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    142c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1430:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1434:	0b3a0e03 	bleq	e84c48 <__Stack_Size+0xe84848>
    1438:	1349053b 	movtne	r0, #38203	; 0x953b
    143c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1440:	0300160c 	movweq	r1, #1548	; 0x60c
    1444:	3b0b3a0e 	blcc	2cfc84 <__Stack_Size+0x2cf884>
    1448:	00134905 	andseq	r4, r3, r5, lsl #18
    144c:	01130d00 	tsteq	r3, r0, lsl #26
    1450:	0b3a0b0b 	bleq	e84084 <__Stack_Size+0xe83c84>
    1454:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1458:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    145c:	3a0e0300 	bcc	382064 <__Stack_Size+0x381c64>
    1460:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1464:	000b3813 	andeq	r3, fp, r3, lsl r8
    1468:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    146c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1470:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1474:	0b201927 	bleq	807918 <__Stack_Size+0x807518>
    1478:	00001301 	andeq	r1, r0, r1, lsl #6
    147c:	03000510 	movweq	r0, #1296	; 0x510
    1480:	3b0b3a0e 	blcc	2cfcc0 <__Stack_Size+0x2cf8c0>
    1484:	00134905 	andseq	r4, r3, r5, lsl #18
    1488:	00341100 	eorseq	r1, r4, r0, lsl #2
    148c:	0b3a0e03 	bleq	e84ca0 <__Stack_Size+0xe848a0>
    1490:	1349053b 	movtne	r0, #38203	; 0x953b
    1494:	0f120000 	svceq	0x00120000
    1498:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    149c:	13000013 	movwne	r0, #19
    14a0:	0e03012e 	adfeqsp	f0, f3, #0.5
    14a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14a8:	01111927 	tsteq	r1, r7, lsr #18
    14ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    14b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    14b4:	14000013 	strne	r0, [r0], #-19
    14b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    14bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    14c4:	05150000 	ldreq	r0, [r5, #-0]
    14c8:	3a0e0300 	bcc	3820d0 <__Stack_Size+0x381cd0>
    14cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14d0:	00170213 	andseq	r0, r7, r3, lsl r2
    14d4:	00341600 	eorseq	r1, r4, r0, lsl #12
    14d8:	0b3a0e03 	bleq	e84cec <__Stack_Size+0xe848ec>
    14dc:	1349053b 	movtne	r0, #38203	; 0x953b
    14e0:	00001702 	andeq	r1, r0, r2, lsl #14
    14e4:	03003417 	movweq	r3, #1047	; 0x417
    14e8:	3b0b3a08 	blcc	2cfd10 <__Stack_Size+0x2cf910>
    14ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
    14f0:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    14f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14f8:	0b3a0e03 	bleq	e84d0c <__Stack_Size+0xe8490c>
    14fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1500:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1504:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1508:	00130119 	andseq	r0, r3, r9, lsl r1
    150c:	00051900 	andeq	r1, r5, r0, lsl #18
    1510:	0b3a0e03 	bleq	e84d24 <__Stack_Size+0xe84924>
    1514:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1518:	00001702 	andeq	r1, r0, r2, lsl #14
    151c:	0182891a 	orreq	r8, r2, sl, lsl r9
    1520:	31011101 	tstcc	r1, r1, lsl #2
    1524:	00130113 	andseq	r0, r3, r3, lsl r1
    1528:	828a1b00 	addhi	r1, sl, #0, 22
    152c:	18020001 	stmdane	r2, {r0}
    1530:	00184291 	mulseq	r8, r1, r2
    1534:	82891c00 	addhi	r1, r9, #0, 24
    1538:	01110101 	tsteq	r1, r1, lsl #2
    153c:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1540:	00130113 	andseq	r0, r3, r3, lsl r1
    1544:	82891d00 	addhi	r1, r9, #0, 26
    1548:	01110101 	tsteq	r1, r1, lsl #2
    154c:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1550:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1554:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1558:	0b3b0b3a 	bleq	ec4248 <__Stack_Size+0xec3e48>
    155c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1560:	341f0000 	ldrcc	r0, [pc], #-0	; 1568 <__Stack_Size+0x1168>
    1564:	3a0e0300 	bcc	38216c <__Stack_Size+0x381d6c>
    1568:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    156c:	00170213 	andseq	r0, r7, r3, lsl r2
    1570:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    1574:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    157c:	01111927 	tsteq	r1, r7, lsr #18
    1580:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1584:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1588:	21000013 	tstcs	r0, r3, lsl r0
    158c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1590:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1594:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1598:	05220000 	streq	r0, [r2, #-0]!
    159c:	02133100 	andseq	r3, r3, #0, 2
    15a0:	23000017 	movwcs	r0, #23
    15a4:	13310005 	teqne	r1, #5
    15a8:	00001802 	andeq	r1, r0, r2, lsl #16
    15ac:	11010b24 	tstne	r1, r4, lsr #22
    15b0:	00061201 	andeq	r1, r6, r1, lsl #4
    15b4:	00342500 	eorseq	r2, r4, r0, lsl #10
    15b8:	17021331 	smladxne	r2, r1, r3, r1
    15bc:	1d260000 	stcne	0, cr0, [r6, #-0]
    15c0:	11133101 	tstne	r3, r1, lsl #2
    15c4:	58061201 	stmdapl	r6, {r0, r9, ip}
    15c8:	0105590b 	tsteq	r5, fp, lsl #18
    15cc:	27000013 	smladcs	r0, r3, r0, r0
    15d0:	00018289 	andeq	r8, r1, r9, lsl #5
    15d4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    15d8:	89280000 	stmdbhi	r8!, {}	; <UNPREDICTABLE>
    15dc:	11010182 	smlabbne	r1, r2, r1, r0
    15e0:	00133101 	andseq	r3, r3, r1, lsl #2
    15e4:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    15e8:	01111331 	tsteq	r1, r1, lsr r3
    15ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    15f4:	2a000013 	bcs	1648 <__Stack_Size+0x1248>
    15f8:	0e03012e 	adfeqsp	f0, f3, #0.5
    15fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1600:	0b201927 	bleq	807aa4 <__Stack_Size+0x8076a4>
    1604:	00001301 	andeq	r1, r0, r1, lsl #6
    1608:	0300342b 	movweq	r3, #1067	; 0x42b
    160c:	3b0b3a08 	blcc	2cfe34 <__Stack_Size+0x2cfa34>
    1610:	00134905 	andseq	r4, r3, r5, lsl #18
    1614:	011d2c00 	tsteq	sp, r0, lsl #24
    1618:	01521331 	cmpeq	r2, r1, lsr r3
    161c:	0b581755 	bleq	1607378 <__Stack_Size+0x1606f78>
    1620:	13010559 	movwne	r0, #5465	; 0x1559
    1624:	0b2d0000 	bleq	b4162c <__Stack_Size+0xb4122c>
    1628:	00175501 	andseq	r5, r7, r1, lsl #10
    162c:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
    1630:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1634:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1638:	13491927 	movtne	r1, #39207	; 0x9927
    163c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1640:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1644:	00130119 	andseq	r0, r3, r9, lsl r1
    1648:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    164c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1650:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1654:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1658:	00001301 	andeq	r1, r0, r1, lsl #6
    165c:	49000530 	stmdbmi	r0, {r4, r5, r8, sl}
    1660:	31000013 	tstcc	r0, r3, lsl r0
    1664:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1668:	0b3a0e03 	bleq	e84e7c <__Stack_Size+0xe84a7c>
    166c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1670:	0000193c 	andeq	r1, r0, ip, lsr r9
    1674:	01110100 	tsteq	r1, r0, lsl #2
    1678:	0b130e25 	bleq	4c4f14 <__Stack_Size+0x4c4b14>
    167c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1680:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1684:	00001710 	andeq	r1, r0, r0, lsl r7
    1688:	0b002402 	bleq	a698 <__Stack_Size+0xa298>
    168c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1690:	0300000e 	movweq	r0, #14
    1694:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1698:	0b3b0b3a 	bleq	ec4388 <__Stack_Size+0xec3f88>
    169c:	00001349 	andeq	r1, r0, r9, asr #6
    16a0:	03001604 	movweq	r1, #1540	; 0x604
    16a4:	3b0b3a0e 	blcc	2cfee4 <__Stack_Size+0x2cfae4>
    16a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    16ac:	00350500 	eorseq	r0, r5, r0, lsl #10
    16b0:	00001349 	andeq	r1, r0, r9, asr #6
    16b4:	0b010406 	bleq	426d4 <__Stack_Size+0x422d4>
    16b8:	3b0b3a0b 	blcc	2cfeec <__Stack_Size+0x2cfaec>
    16bc:	0013010b 	andseq	r0, r3, fp, lsl #2
    16c0:	00280700 	eoreq	r0, r8, r0, lsl #14
    16c4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    16c8:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    16cc:	1c080300 	stcne	3, cr0, [r8], {-0}
    16d0:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    16d4:	0b0b0113 	bleq	2c1b28 <__Stack_Size+0x2c1728>
    16d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16dc:	00001301 	andeq	r1, r0, r1, lsl #6
    16e0:	03000d0a 	movweq	r0, #3338	; 0xd0a
    16e4:	3b0b3a08 	blcc	2cff0c <__Stack_Size+0x2cfb0c>
    16e8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    16ec:	0b00000b 	bleq	1720 <__Stack_Size+0x1320>
    16f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    16f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    16f8:	0b381349 	bleq	e06424 <__Stack_Size+0xe06024>
    16fc:	160c0000 	strne	r0, [ip], -r0
    1700:	3a0e0300 	bcc	382308 <__Stack_Size+0x381f08>
    1704:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1708:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    170c:	0b0b0113 	bleq	2c1b60 <__Stack_Size+0x2c1760>
    1710:	0b3b0b3a 	bleq	ec4400 <__Stack_Size+0xec4000>
    1714:	00001301 	andeq	r1, r0, r1, lsl #6
    1718:	03000d0e 	movweq	r0, #3342	; 0xd0e
    171c:	3b0b3a0e 	blcc	2cff5c <__Stack_Size+0x2cfb5c>
    1720:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1724:	0f00000b 	svceq	0x0000000b
    1728:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    172c:	0b3a0e03 	bleq	e84f40 <__Stack_Size+0xe84b40>
    1730:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1734:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1738:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    173c:	00130119 	andseq	r0, r3, r9, lsl r1
    1740:	00051000 	andeq	r1, r5, r0
    1744:	0b3a0e03 	bleq	e84f58 <__Stack_Size+0xe84b58>
    1748:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    174c:	00001702 	andeq	r1, r0, r2, lsl #14
    1750:	01828911 	orreq	r8, r2, r1, lsl r9
    1754:	31011101 	tstcc	r1, r1, lsl #2
    1758:	00130113 	andseq	r0, r3, r3, lsl r1
    175c:	828a1200 	addhi	r1, sl, #0, 4
    1760:	18020001 	stmdane	r2, {r0}
    1764:	00184291 	mulseq	r8, r1, r2
    1768:	82891300 	addhi	r1, r9, #0, 6
    176c:	01110101 	tsteq	r1, r1, lsl #2
    1770:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1774:	00130113 	andseq	r0, r3, r3, lsl r1
    1778:	82891400 	addhi	r1, r9, #0, 8
    177c:	01110101 	tsteq	r1, r1, lsl #2
    1780:	31194295 			; <UNDEFINED> instruction: 0x31194295
    1784:	15000013 	strne	r0, [r0, #-19]
    1788:	0b0b000f 	bleq	2c17cc <__Stack_Size+0x2c13cc>
    178c:	00001349 	andeq	r1, r0, r9, asr #6
    1790:	03003416 	movweq	r3, #1046	; 0x416
    1794:	3b0b3a0e 	blcc	2cffd4 <__Stack_Size+0x2cfbd4>
    1798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    179c:	17000017 	smladne	r0, r7, r0, r0
    17a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    17a4:	0b3b0b3a 	bleq	ec4494 <__Stack_Size+0xec4094>
    17a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    17ac:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    17b0:	11010182 	smlabbne	r1, r2, r1, r0
    17b4:	00133101 	andseq	r3, r3, r1, lsl #2
    17b8:	00051900 	andeq	r1, r5, r0, lsl #18
    17bc:	0b3a0e03 	bleq	e84fd0 <__Stack_Size+0xe84bd0>
    17c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17c4:	00001802 	andeq	r1, r0, r2, lsl #16
    17c8:	0300341a 	movweq	r3, #1050	; 0x41a
    17cc:	3b0b3a0e 	blcc	2d000c <__Stack_Size+0x2cfc0c>
    17d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    17d4:	1b000017 	blne	1838 <__Stack_Size+0x1438>
    17d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17dc:	0b3a0e03 	bleq	e84ff0 <__Stack_Size+0xe84bf0>
    17e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    17e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    17ec:	00130119 	andseq	r0, r3, r9, lsl r1
    17f0:	00051c00 	andeq	r1, r5, r0, lsl #24
    17f4:	0b3a0e03 	bleq	e85008 <__Stack_Size+0xe84c08>
    17f8:	1349053b 	movtne	r0, #38203	; 0x953b
    17fc:	00001802 	andeq	r1, r0, r2, lsl #16
    1800:	0300051d 	movweq	r0, #1309	; 0x51d
    1804:	3b0b3a0e 	blcc	2d0044 <__Stack_Size+0x2cfc44>
    1808:	02134905 	andseq	r4, r3, #81920	; 0x14000
    180c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    1810:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1814:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1818:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    181c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    1820:	03193f01 	tsteq	r9, #1, 30
    1824:	3b0b3a0e 	blcc	2d0064 <__Stack_Size+0x2cfc64>
    1828:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    182c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1830:	97184006 	ldrls	r4, [r8, -r6]
    1834:	13011942 	movwne	r1, #6466	; 0x1942
    1838:	34200000 	strtcc	r0, [r0], #-0
    183c:	3a0e0300 	bcc	382444 <__Stack_Size+0x382044>
    1840:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1844:	21000013 	tstcs	r0, r3, lsl r0
    1848:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    184c:	0b3a0e03 	bleq	e85060 <__Stack_Size+0xe84c60>
    1850:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1854:	1301193c 	movwne	r1, #6460	; 0x193c
    1858:	05220000 	streq	r0, [r2, #-0]!
    185c:	00134900 	andseq	r4, r3, r0, lsl #18
    1860:	11010000 	mrsne	r0, (UNDEF: 1)
    1864:	11061000 	mrsne	r1, (UNDEF: 6)
    1868:	03011201 	movweq	r1, #4609	; 0x1201
    186c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    1870:	00051308 	andeq	r1, r5, r8, lsl #6
    1874:	11010000 	mrsne	r0, (UNDEF: 1)
    1878:	130e2501 	movwne	r2, #58625	; 0xe501
    187c:	1b0e030b 	blne	3824b0 <__Stack_Size+0x3820b0>
    1880:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1884:	00171006 	andseq	r1, r7, r6
    1888:	00240200 	eoreq	r0, r4, r0, lsl #4
    188c:	0b3e0b0b 	bleq	f844c0 <__Stack_Size+0xf840c0>
    1890:	00000e03 	andeq	r0, r0, r3, lsl #28
    1894:	3f012e03 	svccc	0x00012e03
    1898:	3a0e0319 	bcc	382504 <__Stack_Size+0x382104>
    189c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    18a0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18a4:	97184006 	ldrls	r4, [r8, -r6]
    18a8:	13011942 	movwne	r1, #6466	; 0x1942
    18ac:	34040000 	strcc	r0, [r4], #-0
    18b0:	3a0e0300 	bcc	3824b8 <__Stack_Size+0x3820b8>
    18b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18b8:	05000013 	streq	r0, [r0, #-19]
    18bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18c0:	0b3b0b3a 	bleq	ec45b0 <__Stack_Size+0xec41b0>
    18c4:	17021349 	strne	r1, [r2, -r9, asr #6]
    18c8:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    18cc:	11000182 	smlabbne	r0, r2, r1, r0
    18d0:	00133101 	andseq	r3, r3, r1, lsl #2
    18d4:	000f0700 	andeq	r0, pc, r0, lsl #14
    18d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    18dc:	34080000 	strcc	r0, [r8], #-0
    18e0:	3a0e0300 	bcc	3824e8 <__Stack_Size+0x3820e8>
    18e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    18ec:	09000019 	stmdbeq	r0, {r0, r3, r4}
    18f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18f4:	0b3b0b3a 	bleq	ec45e4 <__Stack_Size+0xec41e4>
    18f8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    18fc:	010a0000 	mrseq	r0, (UNDEF: 10)
    1900:	01134901 	tsteq	r3, r1, lsl #18
    1904:	0b000013 	bleq	1958 <__Stack_Size+0x1558>
    1908:	13490021 	movtne	r0, #36897	; 0x9021
    190c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1910:	2700150c 	strcs	r1, [r0, -ip, lsl #10]
    1914:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    1918:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    191c:	0b3b0b3a 	bleq	ec460c <__Stack_Size+0xec420c>
    1920:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1924:	00001802 	andeq	r1, r0, r2, lsl #16
    1928:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    192c:	0f000013 	svceq	0x00000013
    1930:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1934:	0b3a0e03 	bleq	e85148 <__Stack_Size+0xe84d48>
    1938:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    193c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1940:	24100000 	ldrcs	r0, [r0], #-0
    1944:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1948:	0008030b 	andeq	r0, r8, fp, lsl #6
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000004f5 	strdeq	r0, [r0], -r5
       4:	01250002 			; <UNDEFINED> instruction: 0x01250002
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	41010000 	mrsmi	r0, (UNDEF: 1)
      1c:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
      20:	73006372 	movwvc	r6, #882	; 0x372
      24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      2c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      34:	50504100 	subspl	r4, r0, r0, lsl #2
      38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      3c:	616d0000 	cmnvs	sp, r0
      40:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
      44:	00000100 	andeq	r0, r0, r0, lsl #2
      48:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      4c:	30316632 	eorscc	r6, r1, r2, lsr r6
      50:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      54:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
      58:	00000200 	andeq	r0, r0, r0, lsl #4
      5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      60:	30316632 	eorscc	r6, r1, r2, lsr r6
      64:	616d5f78 	smcvs	54776	; 0xd5f8
      68:	00682e70 	rsbeq	r2, r8, r0, ror lr
      6c:	73000002 	movwvc	r0, #2
      70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      74:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      78:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
      7c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
      80:	73000002 	movwvc	r0, #2
      84:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      88:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      8c:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
      90:	00682e63 	rsbeq	r2, r8, r3, ror #28
      94:	73000002 	movwvc	r0, #2
      98:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      9c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      a0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
      a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      a8:	74730000 	ldrbtvc	r0, [r3], #-0
      ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
      b0:	5f783031 	svcpl	0x00783031
      b4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
      b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
      bc:	3c000002 	stccc	0, cr0, [r0], {2}
      c0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
      c4:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
      c8:	0000003e 	andeq	r0, r0, lr, lsr r0
      cc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
      d0:	31663233 	cmncc	r6, r3, lsr r2
      d4:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
      d8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
      dc:	00000200 	andeq	r0, r0, r0, lsl #4
      e0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      e4:	30316632 	eorscc	r6, r1, r2, lsr r6
      e8:	77705f78 			; <UNDEFINED> instruction: 0x77705f78
      ec:	00682e72 	rsbeq	r2, r8, r2, ror lr
      f0:	73000002 	movwvc	r0, #2
      f4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      fc:	616c665f 	cmnvs	ip, pc, asr r6
     100:	682e6873 	stmdavs	lr!, {r0, r1, r4, r5, r6, fp, sp, lr}
     104:	00000200 	andeq	r0, r0, r0, lsl #4
     108:	616e7964 	cmnvs	lr, r4, ror #18
     10c:	6578696d 	ldrbvs	r6, [r8, #-2413]!	; 0x96d
     110:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     114:	73000003 	movwvc	r0, #3
     118:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     11c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     120:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     124:	6b636974 	blvs	18da6fc <__Stack_Size+0x18da2fc>
     128:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     12c:	00000000 	andeq	r0, r0, r0
     130:	31340205 	teqcc	r4, r5, lsl #4
     134:	c8030800 	stmdagt	r3, {fp}
     138:	31230106 			; <UNDEFINED> instruction: 0x31230106
     13c:	221e304d 	andscs	r3, lr, #77	; 0x4d
     140:	5b202803 	blpl	80a154 <__Stack_Size+0x809d54>
     144:	56032d4d 	strpl	r2, [r3], -sp, asr #26
     148:	3f3f3f3c 	svccc	0x003f3f3c
     14c:	00694d3f 	rsbeq	r4, r9, pc, lsr sp
     150:	3f010402 	svccc	0x00010402
     154:	0402005d 	streq	r0, [r2], #-93	; 0x5d
     158:	18033f01 	stmdane	r3, {r0, r8, r9, sl, fp, ip, sp}
     15c:	4e6a2874 	mcrmi	8, 3, r2, cr10, cr4, {3}
     160:	1c241d22 	stcne	13, cr1, [r4], #-136	; 0xffffff78
     164:	2f2f2f2f 	svccs	0x002f2f2f
     168:	2f1c2431 	svccs	0x001c2431
     16c:	2f2f2f2f 	svccs	0x002f2f2f
     170:	282e0a03 	stmdacs	lr!, {r0, r1, r9, fp}
     174:	03207a03 			; <UNDEFINED> instruction: 0x03207a03
     178:	7a033c09 	bvc	cf1a4 <__Stack_Size+0xceda4>
     17c:	21212120 			; <UNDEFINED> instruction: 0x21212120
     180:	2f2f2f2b 	svccs	0x002f2f2b
     184:	2f3a3030 	svccs	0x003a3030
     188:	1f4d302f 	svcne	0x004d302f
     18c:	302d2d21 	eorcc	r2, sp, r1, lsr #26
     190:	4b4c4b30 	blmi	1312e58 <__Stack_Size+0x1312a58>
     194:	7437034b 	ldrtvc	r0, [r7], #-843	; 0x34b
     198:	86136a13 			; <UNDEFINED> instruction: 0x86136a13
     19c:	20774013 	rsbscs	r4, r7, r3, lsl r0
     1a0:	004c4b21 	subeq	r4, ip, r1, lsr #22
     1a4:	4b010402 	blmi	411b4 <__Stack_Size+0x40db4>
     1a8:	862d4c68 	strthi	r4, [sp], -r8, ror #24
     1ac:	4d3d5b17 	fldmdbxmi	sp!, {d5-d15}	;@ Deprecated
     1b0:	4a00da03 	bmi	369c4 <__Stack_Size+0x365c4>
     1b4:	00211f13 	eoreq	r1, r1, r3, lsl pc
     1b8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     1bc:	3c630367 	stclcc	3, cr0, [r3], #-412	; 0xfffffe64
     1c0:	033d3d2f 	teqeq	sp, #3008	; 0xbc0
     1c4:	202078ae 	eorcs	r7, r0, lr, lsr #17
     1c8:	592f4b21 	stmdbpl	pc!, {r0, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
     1cc:	206c2d30 	rsbcs	r2, ip, r0, lsr sp
     1d0:	672f4b21 	strvs	r4, [pc, -r1, lsr #22]!
     1d4:	84032d30 	strhi	r2, [r3], #-3376	; 0xd30
     1d8:	85136607 	ldrhi	r6, [r3, #-1543]	; 0x607
     1dc:	32323232 	eorscc	r3, r2, #536870915	; 0x20000003
     1e0:	27083232 	smladxcs	r8, r2, r2, r3
     1e4:	593e5921 	ldmdbpl	lr!, {r0, r5, r8, fp, ip, lr}
     1e8:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     1ec:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     1f0:	032d5a3e 			; <UNDEFINED> instruction: 0x032d5a3e
     1f4:	20200810 	eorcs	r0, r0, r0, lsl r8
     1f8:	3e213d23 	cdpcc	13, 2, cr3, cr1, cr3, {1}
     1fc:	212f2f2d 			; <UNDEFINED> instruction: 0x212f2f2d
     200:	70032d3e 	andvc	r2, r3, lr, lsr sp
     204:	3d21202e 	stccc	0, cr2, [r1, #-184]!	; 0xffffff48
     208:	c2032d21 	andgt	r2, r3, #2112	; 0x840
     20c:	1e142e78 	mrcne	14, 0, r2, cr4, cr8, {3}
     210:	2f3d3d25 	svccs	0x003d3d25
     214:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     218:	a2032c3f 	andge	r2, r3, #16128	; 0x3f00
     21c:	21208204 			; <UNDEFINED> instruction: 0x21208204
     220:	312d2f4b 			; <UNDEFINED> instruction: 0x312d2f4b
     224:	5a213f13 	bpl	84fe78 <__Stack_Size+0x84fa78>
     228:	5a215b2d 	bpl	856ee4 <__Stack_Size+0x856ae4>
     22c:	7bd6032d 	blvc	ff580ee8 <SCS_BASE+0x1f572ee8>
     230:	3f2f2058 	svccc	0x002f2058
     234:	2f593e24 	svccs	0x00593e24
     238:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     23c:	a5032c3f 	strge	r2, [r3, #-3135]	; 0xc3f
     240:	212e9004 			; <UNDEFINED> instruction: 0x212e9004
     244:	032d2159 			; <UNDEFINED> instruction: 0x032d2159
     248:	21204a1d 			; <UNDEFINED> instruction: 0x21204a1d
     24c:	7bc1034b 	blvc	ff040f80 <SCS_BASE+0x1f032f80>
     250:	2f4b213c 	svccs	0x004b213c
     254:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     258:	21882c3f 	orrcs	r2, r8, pc, lsr ip
     25c:	211f2f4b 	tstcs	pc, fp, asr #30
     260:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 1e0 <_Minimum_Stack_Size+0xe0>
     264:	8203d903 	andhi	sp, r3, #49152	; 0xc000
     268:	1c212321 	stcne	3, cr2, [r1], #-132	; 0xffffff7c
     26c:	59593e2f 	ldmdbpl	r9, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     270:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     274:	a5032d21 	strge	r2, [r3, #-3361]	; 0xd21
     278:	2120827c 			; <UNDEFINED> instruction: 0x2120827c
     27c:	211f2f4b 	tstcs	pc, fp, asr #30
     280:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 200 <_Minimum_Stack_Size+0x100>
     284:	20900903 	addscs	r0, r0, r3, lsl #18
     288:	1f2f4b21 	svcne	0x002f4b21
     28c:	3f3d2221 	svccc	0x003d2221
     290:	03f0032c 	mvnseq	r0, #44, 6	; 0xb0000000
     294:	2b312090 	blcs	c484dc <__Stack_Size+0xc480dc>
     298:	004b2f23 	subeq	r2, fp, r3, lsr #30
     29c:	06010402 	streq	r0, [r1], -r2, lsl #8
     2a0:	04020058 	streq	r0, [r2], #-88	; 0x58
     2a4:	3d4b0601 	stclcc	6, cr0, [fp, #-4]
     2a8:	202e0a03 	eorcs	r0, lr, r3, lsl #20
     2ac:	2f232b31 	svccs	0x00232b31
     2b0:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     2b4:	00580601 	subseq	r0, r8, r1, lsl #12
     2b8:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
     2bc:	03040200 	movweq	r0, #16896	; 0x4200
     2c0:	04020058 	streq	r0, [r2], #-88	; 0x58
     2c4:	3d210603 	stccc	6, cr0, [r1, #-12]!
     2c8:	2e7c8303 	cdpcs	3, 7, cr8, cr12, cr3, {0}
     2cc:	2f4b2120 	svccs	0x004b2120
     2d0:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     2d4:	09032b40 	stmdbeq	r3, {r6, r8, r9, fp, sp}
     2d8:	4b212090 	blmi	848520 <__Stack_Size+0x848120>
     2dc:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     2e0:	972b403d 			; <UNDEFINED> instruction: 0x972b403d
     2e4:	3d4b2120 	stfcce	f2, [fp, #-128]	; 0xffffff80
     2e8:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
     2ec:	a52c3f3d 	strge	r3, [ip, #-3901]!	; 0xf3d
     2f0:	2f4b2120 	svccs	0x004b2120
     2f4:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     2f8:	20972c3f 	addscs	r2, r7, pc, lsr ip
     2fc:	1f2f4b21 	svcne	0x002f4b21
     300:	3f3d2221 	svccc	0x003d2221
     304:	2120982c 			; <UNDEFINED> instruction: 0x2120982c
     308:	211f2f4b 	tstcs	pc, fp, asr #30
     30c:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 28c <_Minimum_Stack_Size+0x18c>
     310:	4b212097 	blmi	848574 <__Stack_Size+0x848174>
     314:	22211f2f 	eorcs	r1, r1, #47, 30	; 0xbc
     318:	972c3f3d 			; <UNDEFINED> instruction: 0x972c3f3d
     31c:	2f4b2120 	svccs	0x004b2120
     320:	3d22211f 	stfccs	f2, [r2, #-124]!	; 0xffffff84
     324:	20972c3f 	addscs	r2, r7, pc, lsr ip
     328:	1f2f4b21 	svcne	0x002f4b21
     32c:	3f3d2221 	svccc	0x003d2221
     330:	2120962c 			; <UNDEFINED> instruction: 0x2120962c
     334:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
     338:	2c3f3d22 	ldccs	13, cr3, [pc], #-136	; 2b8 <_Minimum_Stack_Size+0x1b8>
     33c:	2b594087 	blcs	1650560 <__Stack_Size+0x1650160>
     340:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
     344:	322005d1 	eorcc	r0, r0, #876609536	; 0x34400000
     348:	2f4d3e3d 	svccs	0x004d3e3d
     34c:	2f2f3724 	svccs	0x002f3724
     350:	7a31302f 	bvc	c4c414 <__Stack_Size+0xc4c014>
     354:	2c221e22 	stccs	14, cr1, [r2], #-136	; 0xffffff78
     358:	312f2f2b 			; <UNDEFINED> instruction: 0x312f2f2b
     35c:	59695b2f 	stmdbpl	r9!, {r0, r1, r2, r3, r5, r8, r9, fp, ip, lr}^
     360:	5a68215b 	bpl	1a088d4 <__Stack_Size+0x1a084d4>
     364:	922f1f59 	eorls	r1, pc, #356	; 0x164
     368:	6721a43d 			; <UNDEFINED> instruction: 0x6721a43d
     36c:	4e221608 	cfmadda32mi	mvax0, mvax1, mvfx2, mvfx8
     370:	4b13402d 	blmi	4d042c <__Stack_Size+0x4d002c>
     374:	3e222086 	cdpcc	0, 2, cr2, cr2, cr6, {4}
     378:	01040200 	mrseq	r0, R12_usr
     37c:	214c4d3e 	cmpcs	ip, lr, lsr sp
     380:	79df032d 	ldmibvc	pc, {r0, r2, r3, r5, r8, r9}^	; <UNPREDICTABLE>
     384:	1d312058 	ldcne	0, cr2, [r1, #-352]!	; 0xfffffea0
     388:	004c2f23 	subeq	r2, ip, r3, lsr #30
     38c:	06010402 	streq	r0, [r1], -r2, lsl #8
     390:	04020020 	streq	r0, [r2], #-32
     394:	002f0603 	eoreq	r0, pc, r3, lsl #12
     398:	3b030402 	blcc	c13a8 <__Stack_Size+0xc0fa8>
     39c:	032b2333 			; <UNDEFINED> instruction: 0x032b2333
     3a0:	223c01b6 	eorscs	r0, ip, #-2147483603	; 0x8000002d
     3a4:	4c595959 	mrrcmi	9, 5, r5, r9, cr9
     3a8:	5c2d5a59 	stcpl	10, cr5, [sp], #-356	; 0xfffffe9c
     3ac:	593d5921 	ldmdbpl	sp!, {r0, r5, r8, fp, ip, lr}
     3b0:	3d673f59 	stclcc	15, cr3, [r7, #-356]!	; 0xfffffe9c
     3b4:	59593d59 	ldmdbpl	r9, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
     3b8:	412d683d 			; <UNDEFINED> instruction: 0x412d683d
     3bc:	03040200 	movweq	r0, #16896	; 0x4200
     3c0:	04020032 	streq	r0, [r2], #-50	; 0x32
     3c4:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     3c8:	003d0304 	eorseq	r0, sp, r4, lsl #6
     3cc:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     3d0:	03040200 	movweq	r0, #16896	; 0x4200
     3d4:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     3d8:	02005903 	andeq	r5, r0, #49152	; 0xc000
     3dc:	00590304 	subseq	r0, r9, r4, lsl #6
     3e0:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     3e4:	03040200 	movweq	r0, #16896	; 0x4200
     3e8:	04020059 	streq	r0, [r2], #-89	; 0x59
     3ec:	02005903 	andeq	r5, r0, #49152	; 0xc000
     3f0:	003e0304 	eorseq	r0, lr, r4, lsl #6
     3f4:	59030402 	stmdbpl	r3, {r1, sl}
     3f8:	03040200 	movweq	r0, #16896	; 0x4200
     3fc:	04020059 	streq	r0, [r2], #-89	; 0x59
     400:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     404:	00590304 	subseq	r0, r9, r4, lsl #6
     408:	59030402 	stmdbpl	r3, {r1, sl}
     40c:	03040200 	movweq	r0, #16896	; 0x4200
     410:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     414:	02005903 	andeq	r5, r0, #49152	; 0xc000
     418:	00590304 	subseq	r0, r9, r4, lsl #6
     41c:	3e030402 	cdpcc	4, 0, cr0, cr3, cr2, {0}
     420:	03040200 	movweq	r0, #16896	; 0x4200
     424:	04020059 	streq	r0, [r2], #-89	; 0x59
     428:	02005903 	andeq	r5, r0, #49152	; 0xc000
     42c:	003e0304 	eorseq	r0, lr, r4, lsl #6
     430:	59030402 	stmdbpl	r3, {r1, sl}
     434:	03040200 	movweq	r0, #16896	; 0x4200
     438:	04020059 	streq	r0, [r2], #-89	; 0x59
     43c:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
     440:	003d0304 	eorseq	r0, sp, r4, lsl #6
     444:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     448:	03040200 	movweq	r0, #16896	; 0x4200
     44c:	033c5b03 	teqeq	ip, #3072	; 0xc00
     450:	c2034a27 	andgt	r4, r3, #159744	; 0x27000
     454:	3d20ac00 	stccc	12, cr10, [r0, #-0]
     458:	4b4b4b59 	blmi	12d31c4 <__Stack_Size+0x12d2dc4>
     45c:	20581603 	subscs	r1, r8, r3, lsl #12
     460:	2f3d3d2f 	svccs	0x003d3d2f
     464:	587fbe03 	ldmdapl	pc!, {r0, r1, r9, sl, fp, ip, sp, pc}^	; <UNPREDICTABLE>
     468:	3c00c403 	cfstrscc	mvf12, [r0], {3}
     46c:	032c314b 			; <UNDEFINED> instruction: 0x032c314b
     470:	4e9001a3 	fmlmidp	f0, f0, f3
     474:	2f2f3d40 	svccs	0x002f3d40
     478:	31251b2f 			; <UNDEFINED> instruction: 0x31251b2f
     47c:	4d3e3d22 	ldcmi	13, cr3, [lr, #-136]!	; 0xffffff78
     480:	3d30316a 	ldfccs	f3, [r0, #-424]!	; 0xfffffe58
     484:	034c513e 	movteq	r5, #49470	; 0xc13e
     488:	22747ced 	rsbscs	r7, r4, #60672	; 0xed00
     48c:	30303131 	eorscc	r3, r0, r1, lsr r1
     490:	2d3d4b30 	vldmdbcs	sp!, {d4-d27}
     494:	4a02d303 	bmi	b50a8 <__Stack_Size+0xb4ca8>
     498:	95032101 	strls	r2, [r3, #-257]	; 0x101
     49c:	6a133c02 	bvs	4cf4ac <__Stack_Size+0x4cf0ac>
     4a0:	07024016 	smladeq	r2, r6, r0, r4
     4a4:	00010100 	andeq	r0, r1, r0, lsl #2
     4a8:	5fc80205 	svcpl	0x00c80205
     4ac:	d2030800 	andle	r0, r3, #0, 16
     4b0:	03320103 	teqeq	r2, #-1073741824	; 0xc0000000
     4b4:	3d3d2e0f 	ldccc	14, cr2, [sp, #-60]!	; 0xffffffc4
     4b8:	4d4b5c59 	stclmi	12, cr5, [fp, #-356]	; 0xfffffe9c
     4bc:	2f232b23 	svccs	0x00232b23
     4c0:	304a0a03 	subcc	r0, sl, r3, lsl #20
     4c4:	214b4b32 	cmpcs	fp, r2, lsr fp
     4c8:	4d592f28 	ldclmi	15, cr2, [r9, #-160]	; 0xffffff60
     4cc:	212e7203 			; <UNDEFINED> instruction: 0x212e7203
     4d0:	36200d03 	strtcc	r0, [r0], -r3, lsl #26
     4d4:	592f5c4b 	stmdbpl	pc!, {r0, r1, r3, r6, sl, fp, ip, lr}	; <UNPREDICTABLE>
     4d8:	515b5b2f 	cmppl	fp, pc, lsr #22
     4dc:	5b4b5959 	blpl	12d6a48 <__Stack_Size+0x12d6648>
     4e0:	2e01e503 	cfsh32cs	mvfx14, mvfx1, #3
     4e4:	7e9e034b 	cdpvc	3, 9, cr0, cr14, cr11, {2}
     4e8:	3d5c3d2e 	ldclcc	13, cr3, [ip, #-184]	; 0xffffff48
     4ec:	5c5c3d5b 	mrrcpl	13, 5, r3, ip, cr11
     4f0:	4a62032f 	bmi	18811b4 <__Stack_Size+0x1880db4>
     4f4:	01000702 	tsteq	r0, r2, lsl #14
     4f8:	00012501 	andeq	r2, r1, r1, lsl #10
     4fc:	2d000200 	sfmcs	f0, 4, [r0, #-0]
     500:	02000000 	andeq	r0, r0, #0
     504:	0d0efb01 	vstreq	d15, [lr, #-4]
     508:	01010100 	mrseq	r0, (UNDEF: 17)
     50c:	00000001 	andeq	r0, r0, r1
     510:	01000001 	tsteq	r0, r1
     514:	2f505041 	svccs	0x00505041
     518:	00637273 	rsbeq	r7, r3, r3, ror r2
     51c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     520:	31663233 	cmncc	r6, r3, lsr r2
     524:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     528:	00632e74 	rsbeq	r2, r3, r4, ror lr
     52c:	00000001 	andeq	r0, r0, r1
     530:	94020500 	strls	r0, [r2], #-1280	; 0x500
     534:	0308003e 	movweq	r0, #32830	; 0x803e
     538:	0b030123 	bleq	c09cc <__Stack_Size+0xc05cc>
     53c:	04020020 	streq	r0, [r2], #-32
     540:	0b031601 	bleq	c5d4c <__Stack_Size+0xc594c>
     544:	04020020 	streq	r0, [r2], #-32
     548:	0b031601 	bleq	c5d54 <__Stack_Size+0xc5954>
     54c:	04020020 	streq	r0, [r2], #-32
     550:	0b031601 	bleq	c5d5c <__Stack_Size+0xc595c>
     554:	04020020 	streq	r0, [r2], #-32
     558:	0b031601 	bleq	c5d64 <__Stack_Size+0xc5964>
     55c:	200b0320 	andcs	r0, fp, r0, lsr #6
     560:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     564:	0313200b 	tsteq	r3, #11
     568:	0b032e0b 	bleq	cbd9c <__Stack_Size+0xcb99c>
     56c:	200b0320 	andcs	r0, fp, r0, lsr #6
     570:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     574:	0b03200b 	bleq	c85a8 <__Stack_Size+0xc81a8>
     578:	200b0320 	andcs	r0, fp, r0, lsr #6
     57c:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     580:	0b03200b 	bleq	c85b4 <__Stack_Size+0xc81b4>
     584:	200b0320 	andcs	r0, fp, r0, lsr #6
     588:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     58c:	0b03200b 	bleq	c85c0 <__Stack_Size+0xc81c0>
     590:	200b0320 	andcs	r0, fp, r0, lsr #6
     594:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     598:	0b03200b 	bleq	c85cc <__Stack_Size+0xc81cc>
     59c:	200c0320 	andcs	r0, ip, r0, lsr #6
     5a0:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     5a4:	0b03200c 	bleq	c85dc <__Stack_Size+0xc81dc>
     5a8:	200b0320 	andcs	r0, fp, r0, lsr #6
     5ac:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5b0:	0c03200b 	stceq	0, cr2, [r3], {11}
     5b4:	200c0320 	andcs	r0, ip, r0, lsr #6
     5b8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5bc:	0313200b 	tsteq	r3, #11
     5c0:	0b032e0b 	bleq	cbdf4 <__Stack_Size+0xcb9f4>
     5c4:	200b0320 	andcs	r0, fp, r0, lsr #6
     5c8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5cc:	0b03200b 	bleq	c8600 <__Stack_Size+0xc8200>
     5d0:	200b0320 	andcs	r0, fp, r0, lsr #6
     5d4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5d8:	0313200b 	tsteq	r3, #11
     5dc:	0b032e0b 	bleq	cbe10 <__Stack_Size+0xcba10>
     5e0:	200b0320 	andcs	r0, fp, r0, lsr #6
     5e4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     5e8:	0b03200b 	bleq	c861c <__Stack_Size+0xc821c>
     5ec:	200c0320 	andcs	r0, ip, r0, lsr #6
     5f0:	03200c03 			; <UNDEFINED> instruction: 0x03200c03
     5f4:	0b03200b 	bleq	c8628 <__Stack_Size+0xc8228>
     5f8:	200b0320 	andcs	r0, fp, r0, lsr #6
     5fc:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     600:	0b03200b 	bleq	c8634 <__Stack_Size+0xc8234>
     604:	200b0320 	andcs	r0, fp, r0, lsr #6
     608:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     60c:	0b03200b 	bleq	c8640 <__Stack_Size+0xc8240>
     610:	200b0320 	andcs	r0, fp, r0, lsr #6
     614:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
     618:	0c03200b 	stceq	0, cr2, [r3], {11}
     61c:	00010220 	andeq	r0, r1, r0, lsr #4
     620:	00620101 	rsbeq	r0, r2, r1, lsl #2
     624:	00020000 	andeq	r0, r2, r0
     628:	00000028 	andeq	r0, r0, r8, lsr #32
     62c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     630:	0101000d 	tsteq	r1, sp
     634:	00000101 	andeq	r0, r0, r1, lsl #2
     638:	00000100 	andeq	r0, r0, r0, lsl #2
     63c:	50504101 	subspl	r4, r0, r1, lsl #2
     640:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     644:	78640000 	stmdavc	r4!, {}^	; <UNPREDICTABLE>
     648:	61685f6c 	cmnvs	r8, ip, ror #30
     64c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     650:	00000001 	andeq	r0, r0, r1
     654:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     658:	1608003f 			; <UNDEFINED> instruction: 0x1608003f
     65c:	16313e26 	ldrtne	r3, [r1], -r6, lsr #28
     660:	20321532 	eorscs	r1, r2, r2, lsr r5
     664:	04020035 	streq	r0, [r2], #-53	; 0x35
     668:	003c0601 	eorseq	r0, ip, r1, lsl #12
     66c:	06030402 	streq	r0, [r3], -r2, lsl #8
     670:	20315b2f 	eorscs	r5, r1, pc, lsr #22
     674:	04020035 	streq	r0, [r2], #-53	; 0x35
     678:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     67c:	315d4b30 	cmpcc	sp, r0, lsr fp
     680:	02164e17 	andseq	r4, r6, #368	; 0x170
     684:	01010002 	tsteq	r1, r2
     688:	00000154 	andeq	r0, r0, r4, asr r1
     68c:	003f0002 	eorseq	r0, pc, r2
     690:	01020000 	mrseq	r0, (UNDEF: 2)
     694:	000d0efb 	strdeq	r0, [sp], -fp
     698:	01010101 	tsteq	r1, r1, lsl #2
     69c:	01000000 	mrseq	r0, (UNDEF: 0)
     6a0:	41010000 	mrsmi	r0, (UNDEF: 1)
     6a4:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
     6a8:	41006372 	tstmi	r0, r2, ror r3
     6ac:	692f5050 	stmdbvs	pc!, {r4, r6, ip, lr}	; <UNPREDICTABLE>
     6b0:	0000636e 	andeq	r6, r0, lr, ror #6
     6b4:	616e7964 	cmnvs	lr, r4, ror #18
     6b8:	6578696d 	ldrbvs	r6, [r8, #-2413]!	; 0x96d
     6bc:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     6c0:	64000001 	strvs	r0, [r0], #-1
     6c4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     6c8:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
     6cc:	00000200 	andeq	r0, r0, r0, lsl #4
     6d0:	02050000 	andeq	r0, r5, #0
     6d4:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
     6d8:	24011303 	strcs	r1, [r1], #-771	; 0x303
     6dc:	3d5b221e 	lfmcc	f2, 2, [fp, #-120]	; 0xffffff88
     6e0:	32138541 	andscc	r8, r3, #272629760	; 0x10400000
     6e4:	221e5125 	andscs	r5, lr, #1073741833	; 0x40000009
     6e8:	3d22221e 	sfmcc	f2, 4, [r2, #-120]!	; 0xffffff88
     6ec:	3550232f 	ldrbcc	r2, [r0, #-815]	; 0x32f
     6f0:	03211e22 			; <UNDEFINED> instruction: 0x03211e22
     6f4:	02002062 	andeq	r2, r0, #98	; 0x62
     6f8:	1f030104 	svcne	0x00030104
     6fc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     700:	22594b03 	subscs	r4, r9, #3072	; 0xc00
     704:	3150301e 	cmpcc	r0, lr, lsl r0
     708:	2f3f4c4b 	svccs	0x003f4c4b
     70c:	1e302f40 	cdpne	15, 3, cr2, cr0, cr0, {2}
     710:	24783022 	ldrbtcs	r3, [r8], #-34	; 0x22
     714:	30334c5b 	eorscc	r4, r3, fp, asr ip
     718:	3db23f2f 	ldccc	15, cr3, [r2, #188]!	; 0xbc
     71c:	2f1f212d 	svccs	0x001f212d
     720:	033d4e22 	teqeq	sp, #544	; 0x220
     724:	7c312e19 	ldcvc	14, cr2, [r1], #-100	; 0xffffff9c
     728:	2f585e03 	svccs	0x00585e03
     72c:	0334252f 	teqeq	r4, #197132288	; 0xbc00000
     730:	0326207a 			; <UNDEFINED> instruction: 0x0326207a
     734:	03303c7a 	teqeq	r0, #31232	; 0x7a00
     738:	a5459e09 	strbge	r9, [r5, #-3593]	; 0xe09
     73c:	82140359 	andshi	r0, r4, #1677721601	; 0x64000001
     740:	222f1f4b 	eorcs	r1, pc, #300	; 0x12c
     744:	212d3d4b 			; <UNDEFINED> instruction: 0x212d3d4b
     748:	6e032f1f 	mcrvs	15, 0, r2, cr3, cr15, {0}
     74c:	3c1a0320 	ldccc	3, cr0, [sl], {32}
     750:	03226791 			; <UNDEFINED> instruction: 0x03226791
     754:	3022c80c 	eorcc	ip, r2, ip, lsl #16
     758:	147a304f 	ldrbtne	r3, [sl], #-79	; 0x4f
     75c:	136a1369 	cmnne	sl, #-1543503871	; 0xa4000001
     760:	136a136a 	cmnne	sl, #-1476395007	; 0xa8000001
     764:	694e136a 	stmdbvs	lr, {r1, r3, r5, r6, r8, r9, ip}^
     768:	2f136914 	svccs	0x00136914
     76c:	31301769 	teqcc	r0, r9, ror #14
     770:	3f183117 	svccc	0x00183117
     774:	04020013 	streq	r0, [r2], #-19
     778:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     77c:	221e2f31 	andscs	r2, lr, #49, 30	; 0xc4
     780:	00214e22 	eoreq	r4, r1, r2, lsr #28
     784:	06010402 	streq	r0, [r1], -r2, lsl #8
     788:	3031062e 	eorscc	r0, r1, lr, lsr #12
     78c:	22221c2f 	eorcs	r1, r2, #12032	; 0x2f00
     790:	135b3122 	cmpne	fp, #-2147483640	; 0x80000008
     794:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
     798:	20060104 	andcs	r0, r6, r4, lsl #2
     79c:	1e233006 	cdpne	0, 2, cr3, cr3, cr6, {0}
     7a0:	22211d23 	eorcs	r1, r1, #2240	; 0x8c0
     7a4:	214e2d23 	cmpcs	lr, r3, lsr #26
     7a8:	01040200 	mrseq	r0, R12_usr
     7ac:	31062e06 	tstcc	r6, r6, lsl #28
     7b0:	241c2130 	ldrcs	r2, [ip], #-304	; 0x130
     7b4:	b503271e 	strlt	r2, [r3, #-1822]	; 0x71e
     7b8:	03302e7f 	teqeq	r0, #2032	; 0x7f0
     7bc:	4d4a00cc 	stclmi	0, cr0, [sl, #-816]	; 0xfffffcd0
     7c0:	00211f13 	eoreq	r1, r1, r3, lsl pc
     7c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     7c8:	03330620 	teqeq	r3, #32, 12	; 0x2000000
     7cc:	03207fbc 			; <UNDEFINED> instruction: 0x03207fbc
     7d0:	242e00c1 	strtcs	r0, [lr], #-193	; 0xc1
     7d4:	211c241d 	tstcs	ip, sp, lsl r4
     7d8:	022d2323 	eoreq	r2, sp, #-1946157056	; 0x8c000000
     7dc:	01010005 	tsteq	r1, r5
     7e0:	00000206 	andeq	r0, r0, r6, lsl #4
     7e4:	00880002 	addeq	r0, r8, r2
     7e8:	01020000 	mrseq	r0, (UNDEF: 2)
     7ec:	000d0efb 	strdeq	r0, [sp], -fp
     7f0:	01010101 	tsteq	r1, r1, lsl #2
     7f4:	01000000 	mrseq	r0, (UNDEF: 0)
     7f8:	73010000 	movwvc	r0, #4096	; 0x1000
     7fc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     800:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     804:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     808:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     80c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     810:	31663233 	cmncc	r6, r3, lsr r2
     814:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     818:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     81c:	0000636e 	andeq	r6, r0, lr, ror #6
     820:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     824:	30316632 	eorscc	r6, r1, r2, lsr r6
     828:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     82c:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     830:	00010063 	andeq	r0, r1, r3, rrx
     834:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     838:	31663233 	cmncc	r6, r3, lsr r2
     83c:	745f7830 	ldrbvc	r7, [pc], #-2096	; 844 <__Stack_Size+0x444>
     840:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     844:	00020068 	andeq	r0, r2, r8, rrx
     848:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     84c:	31663233 	cmncc	r6, r3, lsr r2
     850:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 798 <__Stack_Size+0x398>
     854:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     858:	00000200 	andeq	r0, r0, r0, lsl #4
     85c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     860:	30316632 	eorscc	r6, r1, r2, lsr r6
     864:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     868:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     86c:	00020068 	andeq	r0, r2, r8, rrx
     870:	05000000 	streq	r0, [r0, #-0]
     874:	00430402 	subeq	r0, r3, r2, lsl #8
     878:	00d60308 	sbcseq	r0, r6, r8, lsl #6
     87c:	03591701 	cmpeq	r9, #262144	; 0x40000
     880:	5917740e 	ldmdbpl	r7, {r1, r2, r3, sl, ip, sp, lr}
     884:	17740e03 	ldrbne	r0, [r4, -r3, lsl #28]!
     888:	740c0359 	strvc	r0, [ip], #-857	; 0x359
     88c:	0b033d14 	bleq	cfce4 <__Stack_Size+0xcf8e4>
     890:	f6031490 			; <UNDEFINED> instruction: 0xf6031490
     894:	2f148203 	svccs	0x00148203
     898:	144a0a03 	strbne	r0, [sl], #-2563	; 0xa03
     89c:	4a0b032f 	bmi	2c1560 <__Stack_Size+0x2c1160>
     8a0:	2e090315 	mcrcs	3, 0, r0, cr9, cr5, {0}
     8a4:	15660a03 	strbne	r0, [r6, #-2563]!	; 0xa03
     8a8:	032e0a03 			; <UNDEFINED> instruction: 0x032e0a03
     8ac:	1d28660e 	stcne	6, cr6, [r8, #-56]!	; 0xffffffc8
     8b0:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
     8b4:	263e1874 			; <UNDEFINED> instruction: 0x263e1874
     8b8:	10032941 	andne	r2, r3, r1, asr #18
     8bc:	4a0f033c 	bmi	3c15b4 <__Stack_Size+0x3c11b4>
     8c0:	660c0317 			; <UNDEFINED> instruction: 0x660c0317
     8c4:	42425015 	submi	r5, r2, #21
     8c8:	344a7003 	strbcc	r7, [sl], #-3
     8cc:	03201003 			; <UNDEFINED> instruction: 0x03201003
     8d0:	24203c0c 	strtcs	r3, [r0], #-3084	; 0xc0c
     8d4:	04020031 	streq	r0, [r2], #-49	; 0x31
     8d8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     8dc:	30201903 	eorcc	r1, r0, r3, lsl #18
     8e0:	2f746803 	svccs	0x00746803
     8e4:	b2035d33 	andlt	r5, r3, #3264	; 0xcc0
     8e8:	27202e7a 			; <UNDEFINED> instruction: 0x27202e7a
     8ec:	2925314c 	stmdbcs	r5!, {r2, r3, r6, r8, ip, sp}
     8f0:	304d214b 	subcc	r2, sp, fp, asr #2
     8f4:	0c036b23 	stceq	11, cr6, [r3], {35}	; 0x23
     8f8:	314c244a 	cmpcc	ip, sl, asr #8
     8fc:	4d4b2a24 	vstrmi	s5, [fp, #-144]	; 0xffffff70
     900:	036b2330 	cmneq	fp, #48, 6	; 0xc0000000
     904:	4c243c0c 	stcmi	12, cr3, [r4], #-48	; 0xffffffd0
     908:	78033631 	stmdavc	r3, {r0, r4, r5, r9, sl, ip, sp}
     90c:	4b3f212e 	blmi	fc8dcc <__Stack_Size+0xfc89cc>
     910:	0331304d 	teqeq	r1, #77	; 0x4d
     914:	77033c09 	strvc	r3, [r3, -r9, lsl #24]
     918:	1d233120 	stfnes	f3, [r3, #-128]!	; 0xffffff80
     91c:	0a03313f 	beq	cce20 <__Stack_Size+0xcca20>
     920:	036c232e 	cmneq	ip, #-1207959552	; 0xb8000000
     924:	2720740d 	strcs	r7, [r0, -sp, lsl #8]!
     928:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
     92c:	1b253230 	blne	94d1f4 <__Stack_Size+0x94cdf4>
     930:	3230314c 	eorscc	r3, r0, #76, 2
     934:	3c0a0331 	stccc	3, cr0, [sl], {49}	; 0x31
     938:	0d036c23 	stceq	12, cr6, [r3, #-140]	; 0xffffff74
     93c:	0327204a 			; <UNDEFINED> instruction: 0x0327204a
     940:	30272079 	eorcc	r2, r7, r9, ror r0
     944:	4c1c2431 	cfldrsmi	mvf2, [ip], {49}	; 0x31
     948:	6b233022 	blvs	8cc9d8 <__Stack_Size+0x8cc5d8>
     94c:	204a0e03 	subcs	r0, sl, r3, lsl #28
     950:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     954:	33313026 	teqcc	r1, #38	; 0x26
     958:	243f211b 	ldrtcs	r2, [pc], #-283	; 960 <__Stack_Size+0x560>
     95c:	30233d1c 	eorcc	r3, r3, ip, lsl sp
     960:	14036b23 	strne	r6, [r3], #-2851	; 0xb23
     964:	0f032066 	svceq	0x00032066
     968:	77033e20 	strvc	r3, [r3, -r0, lsr #28]
     96c:	200c032e 	andcs	r0, ip, lr, lsr #6
     970:	032e7503 			; <UNDEFINED> instruction: 0x032e7503
     974:	3d21200b 	stccc	0, cr2, [r1, #-44]!	; 0xffffffd4
     978:	033e1e22 	teqeq	lr, #544	; 0x220
     97c:	15032072 	strne	r2, [r3, #-114]	; 0x72
     980:	1d23372e 	stcne	7, cr3, [r3, #-184]!	; 0xffffff48
     984:	033e3023 	teqeq	lr, #35	; 0x23
     988:	17032069 	strne	r2, [r3, -r9, rrx]
     98c:	033f2320 	teqeq	pc, #32, 6	; 0x80000000
     990:	1c032e64 	stcne	14, cr2, [r3], {100}	; 0x64
     994:	6203302e 	andvs	r3, r3, #46	; 0x2e
     998:	201e0320 	andscs	r0, lr, r0, lsr #6
     99c:	5d033f23 	stcpl	15, cr3, [r3, #-140]	; 0xffffff74
     9a0:	2023032e 	eorcs	r0, r3, lr, lsr #6
     9a4:	205b034c 	subscs	r0, fp, ip, asr #6
     9a8:	23202503 			; <UNDEFINED> instruction: 0x23202503
     9ac:	036b313f 	cmneq	fp, #-1073741809	; 0xc000000f
     9b0:	26207410 			; <UNDEFINED> instruction: 0x26207410
     9b4:	0335314c 	teqeq	r5, #76, 2
     9b8:	3e212e79 	mcrcc	14, 1, r2, cr1, cr9, {3}
     9bc:	31304d4b 	teqcc	r0, fp, asr #26
     9c0:	32225a5b 	eorcc	r5, r2, #372736	; 0x5b000
     9c4:	79314c32 	ldmdbvc	r1!, {r1, r4, r5, sl, fp, lr}
     9c8:	18036c23 	stmdane	r3, {r0, r1, r5, sl, fp, sp, lr}
     9cc:	20090374 	andcs	r0, r9, r4, ror r3
     9d0:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
     9d4:	3f212009 	svccc	0x00212009
     9d8:	03207303 			; <UNDEFINED> instruction: 0x03207303
     9dc:	31302e0d 	teqcc	r0, sp, lsl #28
     9e0:	233e3f76 	teqcs	lr, #472	; 0x1d8
     9e4:	0007026b 	andeq	r0, r7, fp, ror #4
     9e8:	017e0101 	cmneq	lr, r1, lsl #2
     9ec:	00020000 	andeq	r0, r2, r0
     9f0:	00000099 	muleq	r0, r9, r0
     9f4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9f8:	0101000d 	tsteq	r1, sp
     9fc:	00000101 	andeq	r0, r0, r1, lsl #2
     a00:	00000100 	andeq	r0, r0, r0, lsl #2
     a04:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     a08:	31663233 	cmncc	r6, r3, lsr r2
     a0c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     a10:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     a14:	73006372 	movwvc	r6, #882	; 0x372
     a18:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     a1c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     a20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     a24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a28:	74730000 	ldrbtvc	r0, [r3], #-0
     a2c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a30:	5f783031 	svcpl	0x00783031
     a34:	6f697067 	svcvs	0x00697067
     a38:	0100632e 	tsteq	r0, lr, lsr #6
     a3c:	74730000 	ldrbtvc	r0, [r3], #-0
     a40:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a44:	5f783031 	svcpl	0x00783031
     a48:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     a4c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a50:	74730000 	ldrbtvc	r0, [r3], #-0
     a54:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a58:	5f783031 	svcpl	0x00783031
     a5c:	2e70616d 	rpwcssz	f6, f0, #5.0
     a60:	00020068 	andeq	r0, r2, r8, rrx
     a64:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a68:	31663233 	cmncc	r6, r3, lsr r2
     a6c:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
     a70:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     a74:	00020068 	andeq	r0, r2, r8, rrx
     a78:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a7c:	31663233 	cmncc	r6, r3, lsr r2
     a80:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     a84:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     a88:	00000200 	andeq	r0, r0, r0, lsl #4
     a8c:	02050000 	andeq	r0, r5, #0
     a90:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
     a94:	24013303 	strcs	r3, [r1], #-771	; 0x303
     a98:	032a4bf5 			; <UNDEFINED> instruction: 0x032a4bf5
     a9c:	034bac17 	movteq	sl, #48151	; 0xbc17
     aa0:	324b2e70 	subcc	r2, fp, #112, 28	; 0x700
     aa4:	034b324b 	movteq	r3, #45643	; 0xb24b
     aa8:	324b2e09 	subcc	r2, fp, #9, 28	; 0x90
     aac:	7a034259 	bvc	d1418 <__Stack_Size+0xd1018>
     ab0:	8212032e 	andshi	r0, r2, #-1207959552	; 0xb8000000
     ab4:	032d4c21 			; <UNDEFINED> instruction: 0x032d4c21
     ab8:	0a034a0f 	beq	d32fc <__Stack_Size+0xd2efc>
     abc:	20760301 	rsbscs	r0, r6, r1, lsl #6
     ac0:	25200c03 	strcs	r0, [r0, #-3075]!	; 0xc03
     ac4:	20740333 	rsbscs	r0, r4, r3, lsr r3
     ac8:	223e3335 	eorscs	r3, lr, #-738197504	; 0xd4000000
     acc:	30303022 	eorscc	r3, r0, r2, lsr #32
     ad0:	1d343d30 	ldcne	13, cr3, [r4, #-192]!	; 0xffffff40
     ad4:	2233224d 	eorscs	r2, r3, #-805306364	; 0xd0000004
     ad8:	02040200 	andeq	r0, r4, #0, 4
     adc:	032e6603 			; <UNDEFINED> instruction: 0x032e6603
     ae0:	30253c1f 	eorcc	r3, r5, pc, lsl ip
     ae4:	2f303e21 	svccs	0x00303e21
     ae8:	343d3030 	ldrtcc	r3, [sp], #-48	; 0x30
     aec:	31224d1d 			; <UNDEFINED> instruction: 0x31224d1d
     af0:	04020022 	streq	r0, [r2], #-34	; 0x22
     af4:	2e690302 	cdpcs	3, 6, cr0, cr9, cr2, {0}
     af8:	033c1b03 	teqeq	ip, #3072	; 0xc00
     afc:	3d142e0d 	ldccc	14, cr2, [r4, #-52]	; 0xffffffcc
     b00:	3c0d032f 	stccc	3, cr0, [sp], {47}	; 0x2f
     b04:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     b08:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     b0c:	2e0c0321 	cdpcs	3, 0, cr0, cr12, cr1, {1}
     b10:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     b14:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     b18:	2e0d0321 	cdpcs	3, 0, cr0, cr13, cr1, {1}
     b1c:	2e0e0317 	mcrcs	3, 0, r0, cr14, cr7, {0}
     b20:	2e110317 	mrccs	3, 0, r0, cr1, cr7, {0}
     b24:	03322218 	teqeq	r2, #24, 4	; 0x80000001
     b28:	03162e0e 	tsteq	r6, #14, 28	; 0xe0
     b2c:	30192e0e 	andscc	r2, r9, lr, lsl #28
     b30:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
     b34:	192e1003 	stmdbne	lr!, {r0, r1, ip}
     b38:	03305a30 	teqeq	r0, #48, 20	; 0x30000
     b3c:	0316580c 	tsteq	r6, #12, 16	; 0xc0000
     b40:	25276627 	strcs	r6, [r7, #-1575]!	; 0x627
     b44:	23222345 			; <UNDEFINED> instruction: 0x23222345
     b48:	284c2f1f 	stmdacs	ip, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}^
     b4c:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
     b50:	03207003 			; <UNDEFINED> instruction: 0x03207003
     b54:	4b342e0a 	blmi	d0c384 <__Stack_Size+0xd0bf84>
     b58:	034d2231 	movteq	r2, #53809	; 0xd231
     b5c:	03196610 	tsteq	r9, #16, 12	; 0x1000000
     b60:	22278279 	eorcs	r8, r7, #-1879048185	; 0x90000007
     b64:	023d301e 	eorseq	r3, sp, #30
     b68:	01010005 	tsteq	r1, r5
     b6c:	000001ce 	andeq	r0, r0, lr, asr #3
     b70:	009a0002 	addseq	r0, sl, r2
     b74:	01020000 	mrseq	r0, (UNDEF: 2)
     b78:	000d0efb 	strdeq	r0, [sp], -fp
     b7c:	01010101 	tsteq	r1, r1, lsl #2
     b80:	01000000 	mrseq	r0, (UNDEF: 0)
     b84:	73010000 	movwvc	r0, #4096	; 0x1000
     b88:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b8c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b90:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     b94:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     b98:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     b9c:	31663233 	cmncc	r6, r3, lsr r2
     ba0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     ba4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     ba8:	0000636e 	andeq	r6, r0, lr, ror #6
     bac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bb0:	30316632 	eorscc	r6, r1, r2, lsr r6
     bb4:	766e5f78 	uqsub16vc	r5, lr, r8
     bb8:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
     bbc:	00000100 	andeq	r0, r0, r0, lsl #2
     bc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bc4:	30316632 	eorscc	r6, r1, r2, lsr r6
     bc8:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bcc:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     bd0:	00000200 	andeq	r0, r0, r0, lsl #4
     bd4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bd8:	30316632 	eorscc	r6, r1, r2, lsr r6
     bdc:	616d5f78 	smcvs	54776	; 0xd5f8
     be0:	00682e70 	rsbeq	r2, r8, r0, ror lr
     be4:	73000002 	movwvc	r0, #2
     be8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     bec:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     bf0:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     bf4:	00682e63 	rsbeq	r2, r8, r3, ror #28
     bf8:	63000002 	movwvs	r0, #2
     bfc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     c00:	5f336d78 	svcpl	0x00336d78
     c04:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     c08:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     c0c:	00000002 	andeq	r0, r0, r2
     c10:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     c14:	03080049 	movweq	r0, #32841	; 0x8049
     c18:	21150124 	tstcs	r5, r4, lsr #2
     c1c:	2f2f4b2d 	svccs	0x002f4b2d
     c20:	04020030 	streq	r0, [r2], #-48	; 0x30
     c24:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
     c28:	002c0304 	eoreq	r0, ip, r4, lsl #6
     c2c:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
     c30:	03040200 	movweq	r0, #16896	; 0x4200
     c34:	0402001e 	streq	r0, [r2], #-30
     c38:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
     c3c:	242c0304 	strtcs	r0, [ip], #-772	; 0x304
     c40:	154a0b03 	strbne	r0, [sl, #-2819]	; 0xb03
     c44:	2f211e3e 	svccs	0x00211e3e
     c48:	3e232121 	sufccsp	f2, f3, f1
     c4c:	03213d21 			; <UNDEFINED> instruction: 0x03213d21
     c50:	03176617 	tsteq	r7, #24117248	; 0x1700000
     c54:	0a039e0e 	beq	e8494 <__Stack_Size+0xe8094>
     c58:	20760301 	rsbscs	r0, r6, r1, lsl #6
     c5c:	232e0a03 			; <UNDEFINED> instruction: 0x232e0a03
     c60:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
     c64:	313d1c24 	teqcc	sp, r4, lsr #24
     c68:	2c95312c 	ldfcss	f3, [r5], {44}	; 0x2c
     c6c:	242b241f 	strtcs	r2, [fp], #-1055	; 0x41f
     c70:	3122212f 			; <UNDEFINED> instruction: 0x3122212f
     c74:	49211f21 	stmdbmi	r1!, {r0, r5, r8, r9, sl, fp, ip}
     c78:	03492150 	movteq	r2, #37200	; 0x9150
     c7c:	2f149e0e 	svccs	0x00149e0e
     c80:	0b032121 	bleq	c910c <__Stack_Size+0xc8d0c>
     c84:	0b03132e 	bleq	c5944 <__Stack_Size+0xc5544>
     c88:	0b03132e 	bleq	c5948 <__Stack_Size+0xc5548>
     c8c:	0b03132e 	bleq	c594c <__Stack_Size+0xc554c>
     c90:	0d03132e 	stceq	3, cr1, [r3, #-184]	; 0xffffff48
     c94:	0b03162e 	bleq	c6554 <__Stack_Size+0xc6154>
     c98:	0b03133c 	bleq	c5990 <__Stack_Size+0xc5590>
     c9c:	032f132e 			; <UNDEFINED> instruction: 0x032f132e
     ca0:	4c19580b 	ldcmi	8, cr5, [r9], {11}
     ca4:	03660903 	cmneq	r6, #49152	; 0xc000
     ca8:	0316660a 	tsteq	r6, #10485760	; 0xa00000
     cac:	0316660b 	tsteq	r6, #11534336	; 0xb00000
     cb0:	2f13ba0c 	svccs	0x0013ba0c
     cb4:	19660b03 	stmdbne	r6!, {r0, r1, r8, r9, fp}^
     cb8:	6609034c 	strvs	r0, [r9], -ip, asr #6
     cbc:	13660b03 	cmnne	r6, #3072	; 0xc00
     cc0:	4a10032f 	bmi	401984 <__Stack_Size+0x401584>
     cc4:	9e0b0317 	mcrls	3, 0, r0, cr11, cr7, {0}
     cc8:	820b0313 	andhi	r0, fp, #1275068416	; 0x4c000000
     ccc:	82120313 	andshi	r0, r2, #1275068416	; 0x4c000000
     cd0:	32221e27 	eorcc	r1, r2, #624	; 0x270
     cd4:	19741303 	ldmdbne	r4!, {r0, r1, r8, r9, ip}^
     cd8:	0340225a 	movteq	r2, #602	; 0x25a
     cdc:	0903741a 	stmdbeq	r3, {r1, r3, r4, sl, ip, sp, lr}
     ce0:	20770301 	rsbscs	r0, r7, r1, lsl #6
     ce4:	4b200903 	blmi	8030f8 <__Stack_Size+0x802cf8>
     ce8:	253f1e31 	ldrcs	r1, [pc, #-3633]!	; fffffebf <SCS_BASE+0x1fff1ebf>
     cec:	2326702d 			; <UNDEFINED> instruction: 0x2326702d
     cf0:	033d221e 	teqeq	sp, #-536870911	; 0xe0000001
     cf4:	24242078 	strtcs	r2, [r4], #-120	; 0x78
     cf8:	03661103 	cmneq	r6, #-1073741824	; 0xc0000000
     cfc:	301c010c 	andscc	r0, ip, ip, lsl #2
     d00:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     d04:	03740f03 	cmneq	r4, #3, 30
     d08:	301e0109 	andscc	r0, lr, r9, lsl #2
     d0c:	03900f03 	orrseq	r0, r0, #3, 30
     d10:	301e0109 	andscc	r0, lr, r9, lsl #2
     d14:	03901503 	orrseq	r1, r0, #12582912	; 0xc00000
     d18:	301c010c 	andscc	r0, ip, ip, lsl #2
     d1c:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     d20:	19741103 	ldmdbne	r4!, {r0, r1, r8, ip}^
     d24:	0330223f 	teqeq	r0, #-268435453	; 0xf0000003
     d28:	3d362e7a 	ldccc	14, cr2, [r6, #-488]!	; 0xfffffe18
     d2c:	23334022 	teqcs	r3, #34	; 0x22
     d30:	034a0f03 	movteq	r0, #44803	; 0xaf03
     d34:	32302009 	eorscc	r2, r0, #9
     d38:	00040223 	andeq	r0, r4, r3, lsr #4
     d3c:	00e70101 	rsceq	r0, r7, r1, lsl #2
     d40:	00020000 	andeq	r0, r2, r0
     d44:	00000098 	muleq	r0, r8, r0
     d48:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d4c:	0101000d 	tsteq	r1, sp
     d50:	00000101 	andeq	r0, r0, r1, lsl #2
     d54:	00000100 	andeq	r0, r0, r0, lsl #2
     d58:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     d5c:	31663233 	cmncc	r6, r3, lsr r2
     d60:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     d64:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     d68:	73006372 	movwvc	r6, #882	; 0x372
     d6c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     d70:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     d74:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     d78:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     d7c:	74730000 	ldrbtvc	r0, [r3], #-0
     d80:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d84:	5f783031 	svcpl	0x00783031
     d88:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
     d8c:	00010063 	andeq	r0, r1, r3, rrx
     d90:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     d94:	31663233 	cmncc	r6, r3, lsr r2
     d98:	745f7830 	ldrbvc	r7, [pc], #-2096	; da0 <__Stack_Size+0x9a0>
     d9c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     da0:	00020068 	andeq	r0, r2, r8, rrx
     da4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     da8:	31663233 	cmncc	r6, r3, lsr r2
     dac:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; cf4 <__Stack_Size+0x8f4>
     db0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     db4:	00000200 	andeq	r0, r0, r0, lsl #4
     db8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     dbc:	336d7865 	cmncc	sp, #6619136	; 0x650000
     dc0:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
     dc4:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     dc8:	00000200 	andeq	r0, r0, r0, lsl #4
     dcc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     dd0:	30316632 	eorscc	r6, r1, r2, lsr r6
     dd4:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     dd8:	00682e63 	rsbeq	r2, r8, r3, ror #28
     ddc:	00000002 	andeq	r0, r0, r2
     de0:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     de4:	0308004c 	movweq	r0, #32844	; 0x804c
     de8:	210100c3 	smlabtcs	r1, r3, r0, r0
     dec:	0c032d5a 	stceq	13, cr2, [r3], {90}	; 0x5a
     df0:	0c031658 	stceq	6, cr1, [r3], {88}	; 0x58
     df4:	15031658 	strne	r1, [r3, #-1624]	; 0x658
     df8:	31311866 	teqcc	r1, r6, ror #16
     dfc:	580c0323 	stmdapl	ip, {r0, r1, r5, r8, r9}
     e00:	66140316 			; <UNDEFINED> instruction: 0x66140316
     e04:	200f031a 	andcs	r0, pc, sl, lsl r3	; <UNPREDICTABLE>
     e08:	23207103 			; <UNDEFINED> instruction: 0x23207103
     e0c:	5b233131 	blpl	8cd2d8 <__Stack_Size+0x8cced8>
     e10:	0c033323 	stceq	3, cr3, [r3], {35}	; 0x23
     e14:	4d5b1466 	cfldrdmi	mvd1, [fp, #-408]	; 0xfffffe68
     e18:	660f035b 			; <UNDEFINED> instruction: 0x660f035b
     e1c:	3c0b0318 	stccc	3, cr0, [fp], {24}
     e20:	16740d03 	ldrbtne	r0, [r4], -r3, lsl #26
     e24:	01000802 	tsteq	r0, r2, lsl #16
     e28:	00019c01 	andeq	r9, r1, r1, lsl #24
     e2c:	84000200 	strhi	r0, [r0], #-512	; 0x200
     e30:	02000000 	andeq	r0, r0, #0
     e34:	0d0efb01 	vstreq	d15, [lr, #-4]
     e38:	01010100 	mrseq	r0, (UNDEF: 17)
     e3c:	00000001 	andeq	r0, r0, r1
     e40:	01000001 	tsteq	r0, r1
     e44:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e48:	30316632 	eorscc	r6, r1, r2, lsr r6
     e4c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e50:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     e54:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     e58:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e5c:	5f783031 	svcpl	0x00783031
     e60:	2f62696c 	svccs	0x0062696c
     e64:	00636e69 	rsbeq	r6, r3, r9, ror #28
     e68:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     e6c:	31663233 	cmncc	r6, r3, lsr r2
     e70:	725f7830 	subsvc	r7, pc, #48, 16	; 0x300000
     e74:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     e78:	00000100 	andeq	r0, r0, r0, lsl #2
     e7c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e80:	30316632 	eorscc	r6, r1, r2, lsr r6
     e84:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e88:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     e8c:	00000200 	andeq	r0, r0, r0, lsl #4
     e90:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e94:	30316632 	eorscc	r6, r1, r2, lsr r6
     e98:	616d5f78 	smcvs	54776	; 0xd5f8
     e9c:	00682e70 	rsbeq	r2, r8, r0, ror lr
     ea0:	73000002 	movwvc	r0, #2
     ea4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     ea8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     eac:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     eb0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	4db80205 	lfmmi	f0, 4, [r8, #20]!
     ebc:	fc030800 	stc2	8, cr0, [r3], {-0}
     ec0:	5b140100 	blpl	5012c8 <__Stack_Size+0x500ec8>
     ec4:	4d4d694d 	stclmi	9, cr6, [sp, #-308]	; 0xfffffecc
     ec8:	18741203 	ldmdane	r4!, {r0, r1, r9, ip}^
     ecc:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
     ed0:	4f5c4d4d 	svcmi	0x005c4d4d
     ed4:	18823503 	stmne	r2, {r0, r1, r8, sl, ip, sp}
     ed8:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
     edc:	03164a0e 	tsteq	r6, #57344	; 0xe000
     ee0:	31196615 	tstcc	r9, r5, lsl r6
     ee4:	0d03233f 	stceq	3, cr2, [r3, #-252]	; 0xffffff04
     ee8:	0f03164a 	svceq	0x0003164a
     eec:	31311866 	teqcc	r1, r6, ror #16
     ef0:	580f0323 	stmdapl	pc, {r0, r1, r5, r8, r9}	; <UNPREDICTABLE>
     ef4:	15032f13 	strne	r2, [r3, #-3859]	; 0xf13
     ef8:	31311866 	teqcc	r1, r6, ror #16
     efc:	58120323 	ldmdapl	r2, {r0, r1, r5, r8, r9}
     f00:	23313118 	teqcs	r1, #24, 2
     f04:	18581203 	ldmdane	r8, {r0, r1, r9, ip}^
     f08:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
     f0c:	1d284a14 	vstmdbne	r8!, {s8-s27}
     f10:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
     f14:	11031674 	tstne	r3, r4, ror r6
     f18:	31311866 	teqcc	r1, r6, ror #16
     f1c:	58100323 	ldmdapl	r0, {r0, r1, r5, r8, r9}
     f20:	7a033418 	bvc	cdf88 <__Stack_Size+0xcdb88>
     f24:	4e232320 	cdpmi	3, 2, cr2, cr3, cr0, {1}
     f28:	12032421 	andne	r2, r3, #553648128	; 0x21000000
     f2c:	12031658 	andne	r1, r3, #88, 12	; 0x5800000
     f30:	0e031766 	cdpeq	7, 0, cr1, cr3, cr6, {3}
     f34:	0c031682 	stceq	6, cr1, [r3], {130}	; 0x82
     f38:	241c1666 	ldrcs	r1, [ip], #-1638	; 0x666
     f3c:	2333513e 	teqcs	r3, #-2147483633	; 0x8000000f
     f40:	321c321e 	andscc	r3, ip, #-536870911	; 0xe0000001
     f44:	03323f27 	teqeq	r2, #39, 30	; 0x9c
     f48:	1f223c0c 	svcne	0x00223c0c
     f4c:	32214d32 	eorcc	r4, r1, #3200	; 0xc80
     f50:	3f32214d 	svccc	0x0032214d
     f54:	03312f21 	teqeq	r1, #33, 30	; 0x84
     f58:	1e27c816 	mcrne	8, 1, ip, cr7, cr6, {0}
     f5c:	16033222 	strne	r3, [r3], -r2, lsr #4
     f60:	221e2774 	andscs	r2, lr, #116, 14	; 0x1d00000
     f64:	74170332 	ldrvc	r0, [r7], #-818	; 0x332
     f68:	32221e27 	eorcc	r1, r2, #624	; 0x270
     f6c:	27741503 	ldrbcs	r1, [r4, -r3, lsl #10]!
     f70:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
     f74:	1e277416 	mcrne	4, 1, r7, cr7, cr6, {0}
     f78:	0d033222 	sfmeq	f3, 4, [r3, #-136]	; 0xffffff78
     f7c:	0c031674 	stceq	6, cr1, [r3], {116}	; 0x74
     f80:	11031666 	tstne	r3, r6, ror #12
     f84:	17031766 	strne	r1, [r3, -r6, ror #14]
     f88:	01090366 	tsteq	r9, r6, ror #6
     f8c:	22303e22 	eorscs	r3, r0, #544	; 0x220
     f90:	0b032632 	bleq	ca860 <__Stack_Size+0xca460>
     f94:	79c3034a 	stmibvc	r3, {r1, r3, r6, r8, r9}^
     f98:	02002166 	andeq	r2, r0, #-2147483623	; 0x80000019
     f9c:	00350204 	eorseq	r0, r5, r4, lsl #4
     fa0:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     fa4:	02040200 	andeq	r0, r4, #0, 4
     fa8:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     fac:	06200601 	strteq	r0, [r0], -r1, lsl #12
     fb0:	3c0a034d 	stccc	3, cr0, [sl], {77}	; 0x4d
     fb4:	6606b303 	strvs	fp, [r6], -r3, lsl #6
     fb8:	90120314 	andsls	r0, r2, r4, lsl r3
     fbc:	3c0b0319 	stccc	3, cr0, [fp], {25}
     fc0:	18741103 	ldmdane	r4!, {r0, r1, r8, ip}^
     fc4:	01000602 	tsteq	r0, r2, lsl #12
     fc8:	0000b101 	andeq	fp, r0, r1, lsl #2
     fcc:	75000200 	strvc	r0, [r0, #-512]	; 0x200
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	0d0efb01 	vstreq	d15, [lr, #-4]
     fd8:	01010100 	mrseq	r0, (UNDEF: 17)
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	01000001 	tsteq	r0, r1
     fe4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fe8:	30316632 	eorscc	r6, r1, r2, lsr r6
     fec:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ff0:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     ff4:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     ff8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     ffc:	5f783031 	svcpl	0x00783031
    1000:	2f62696c 	svccs	0x0062696c
    1004:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1008:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    100c:	31663233 	cmncc	r6, r3, lsr r2
    1010:	735f7830 	cmpvc	pc, #48, 16	; 0x300000
    1014:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1018:	632e6b63 			; <UNDEFINED> instruction: 0x632e6b63
    101c:	00000100 	andeq	r0, r0, r0, lsl #2
    1020:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1024:	30316632 	eorscc	r6, r1, r2, lsr r6
    1028:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    102c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1030:	00000200 	andeq	r0, r0, r0, lsl #4
    1034:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1038:	30316632 	eorscc	r6, r1, r2, lsr r6
    103c:	616d5f78 	smcvs	54776	; 0xd5f8
    1040:	00682e70 	rsbeq	r2, r8, r0, ror lr
    1044:	00000002 	andeq	r0, r0, r2
    1048:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    104c:	03080050 	movweq	r0, #32848	; 0x8050
    1050:	2224012b 	eorcs	r0, r4, #-1073741814	; 0xc000000a
    1054:	660d034e 	strvs	r0, [sp], -lr, asr #6
    1058:	660f0316 			; <UNDEFINED> instruction: 0x660f0316
    105c:	304c3e16 	subcc	r3, ip, r6, lsl lr
    1060:	660d035c 			; <UNDEFINED> instruction: 0x660d035c
    1064:	40221e26 	eormi	r1, r2, r6, lsr #28
    1068:	13660c03 	cmnne	r6, #768	; 0x300
    106c:	4a0e032f 	bmi	381d30 <__Stack_Size+0x381930>
    1070:	3e010a03 	vmlacc.f32	s0, s2, s6
    1074:	09032332 	stmdbeq	r3, {r1, r4, r5, r8, r9, sp}
    1078:	0006022e 	andeq	r0, r6, lr, lsr #4
    107c:	04d70101 	ldrbeq	r0, [r7], #257	; 0x101
    1080:	00020000 	andeq	r0, r2, r0
    1084:	00000097 	muleq	r0, r7, r0
    1088:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    108c:	0101000d 	tsteq	r1, sp
    1090:	00000101 	andeq	r0, r0, r1, lsl #2
    1094:	00000100 	andeq	r0, r0, r0, lsl #2
    1098:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    109c:	31663233 	cmncc	r6, r3, lsr r2
    10a0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    10a4:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    10a8:	73006372 	movwvc	r6, #882	; 0x372
    10ac:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    10b0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    10b4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    10b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10bc:	74730000 	ldrbtvc	r0, [r3], #-0
    10c0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    10c4:	5f783031 	svcpl	0x00783031
    10c8:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
    10cc:	00010063 	andeq	r0, r1, r3, rrx
    10d0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    10d4:	31663233 	cmncc	r6, r3, lsr r2
    10d8:	745f7830 	ldrbvc	r7, [pc], #-2096	; 10e0 <__Stack_Size+0xce0>
    10dc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    10e0:	00020068 	andeq	r0, r2, r8, rrx
    10e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    10e8:	31663233 	cmncc	r6, r3, lsr r2
    10ec:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 1034 <__Stack_Size+0xc34>
    10f0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    10f4:	00000200 	andeq	r0, r0, r0, lsl #4
    10f8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10fc:	30316632 	eorscc	r6, r1, r2, lsr r6
    1100:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1104:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1108:	73000002 	movwvc	r0, #2
    110c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1110:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1114:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1118:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    111c:	00000000 	andeq	r0, r0, r0
    1120:	51800205 	orrpl	r0, r0, r5, lsl #4
    1124:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
    1128:	68240117 	stmdavs	r4!, {r0, r1, r2, r4, r8}
    112c:	23211f21 			; <UNDEFINED> instruction: 0x23211f21
    1130:	235c2b40 	cmpcs	ip, #64, 22	; 0x10000
    1134:	2e1b0321 	cdpcs	3, 1, cr0, cr11, cr1, {1}
    1138:	24216824 	strtcs	r6, [r1], #-2084	; 0x824
    113c:	6333242a 	teqvs	r3, #704643072	; 0x2a000000
    1140:	23242a32 			; <UNDEFINED> instruction: 0x23242a32
    1144:	68d50321 	ldmvs	r5, {r0, r5, r8, r9}^
    1148:	4bec242e 	blmi	ffb0a208 <SCS_BASE+0x1fafc208>
    114c:	082e7703 	stmdaeq	lr!, {r0, r1, r8, r9, sl, ip, sp, lr}
    1150:	09035915 	stmdbeq	r3, {r0, r2, r4, r8, fp, ip, lr}
    1154:	1f034b3c 	svcne	0x00034b3c
    1158:	2e61032e 	cdpcs	3, 6, cr0, cr1, cr14, {1}
    115c:	4b324b32 	blmi	c93e2c <__Stack_Size+0xc93a2c>
    1160:	4b324b32 	blmi	c93e30 <__Stack_Size+0xc93a30>
    1164:	03425932 	movteq	r5, #10546	; 0x2932
    1168:	15032e7a 	strne	r2, [r3, #-3706]	; 0xe7a
    116c:	77591990 			; <UNDEFINED> instruction: 0x77591990
    1170:	00303131 	eorseq	r3, r0, r1, lsr r1
    1174:	06010402 	streq	r0, [r1], -r2, lsl #8
    1178:	034d063c 	movteq	r0, #54844	; 0xd63c
    117c:	0a035811 	beq	d71c8 <__Stack_Size+0xd6dc8>
    1180:	20760301 	rsbscs	r0, r6, r1, lsl #6
    1184:	5b200a03 	blpl	803998 <__Stack_Size+0x803598>
    1188:	1d262323 	stcne	3, cr2, [r6, #-140]!	; 0xffffff74
    118c:	033f2b50 	teqeq	pc, #80, 22	; 0x14000
    1190:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    1194:	20090320 	andcs	r0, r9, r0, lsr #6
    1198:	03251b22 			; <UNDEFINED> instruction: 0x03251b22
    119c:	12032069 	andne	r2, r3, #105	; 0x69
    11a0:	02002520 	andeq	r2, r0, #32, 10	; 0x8000000
    11a4:	20060104 	andcs	r0, r6, r4, lsl #2
    11a8:	4a150306 	bmi	541dc8 <__Stack_Size+0x5419c8>
    11ac:	1d2e7603 	stcne	6, cr7, [lr, #-12]!
    11b0:	351d2631 	ldrcc	r2, [sp, #-1585]	; 0x631
    11b4:	4a0a031c 	bmi	281e2c <__Stack_Size+0x281a2c>
    11b8:	03232331 			; <UNDEFINED> instruction: 0x03232331
    11bc:	0a035810 	beq	d7204 <__Stack_Size+0xd6e04>
    11c0:	20760301 	rsbscs	r0, r6, r1, lsl #6
    11c4:	5b200a03 	blpl	8039d8 <__Stack_Size+0x8035d8>
    11c8:	1d262323 	stcne	3, cr2, [r6, #-140]!	; 0xffffff74
    11cc:	232b314d 			; <UNDEFINED> instruction: 0x232b314d
    11d0:	31231d23 			; <UNDEFINED> instruction: 0x31231d23
    11d4:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
    11d8:	1d312012 	ldcne	0, cr2, [r1, #-72]!	; 0xffffffb8
    11dc:	02002223 	andeq	r2, r0, #805306370	; 0x30000002
    11e0:	3c060104 	stfccs	f0, [r6], {4}
    11e4:	1d315206 	lfmne	f5, 4, [r1, #-24]!	; 0xffffffe8
    11e8:	403f3123 	eorsmi	r3, pc, r3, lsr #2
    11ec:	2079033f 	rsbscs	r0, r9, pc, lsr r3
    11f0:	234e3127 	movtcs	r3, #57639	; 0xe127
    11f4:	4a100323 	bmi	401e88 <__Stack_Size+0x401a88>
    11f8:	03010a03 	movweq	r0, #6659	; 0x1a03
    11fc:	0a032076 	beq	c93dc <__Stack_Size+0xc8fdc>
    1200:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1204:	2b501d26 	blcs	14086a4 <__Stack_Size+0x14082a4>
    1208:	231d2323 	tstcs	sp, #-1946157056	; 0x8c000000
    120c:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    1210:	31201203 			; <UNDEFINED> instruction: 0x31201203
    1214:	0022231d 	eoreq	r2, r2, sp, lsl r3
    1218:	06010402 	streq	r0, [r1], -r2, lsl #8
    121c:	3152063c 	cmpcc	r2, ip, lsr r6
    1220:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    1224:	31232e73 			; <UNDEFINED> instruction: 0x31232e73
    1228:	76032335 			; <UNDEFINED> instruction: 0x76032335
    122c:	200a0320 	andcs	r0, sl, r0, lsr #6
    1230:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    1234:	7603200a 	strvc	r2, [r3], -sl
    1238:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    123c:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    1240:	2324200a 			; <UNDEFINED> instruction: 0x2324200a
    1244:	4a100323 	bmi	401ed8 <__Stack_Size+0x401ad8>
    1248:	03010a03 	movweq	r0, #6659	; 0x1a03
    124c:	0a032076 	beq	c942c <__Stack_Size+0xc902c>
    1250:	23235b20 			; <UNDEFINED> instruction: 0x23235b20
    1254:	2b501d26 	blcs	14086f4 <__Stack_Size+0x14082f4>
    1258:	231d2331 	tstcs	sp, #-1006632960	; 0xc4000000
    125c:	206e0331 	rsbcs	r0, lr, r1, lsr r3
    1260:	31201203 			; <UNDEFINED> instruction: 0x31201203
    1264:	03207403 			; <UNDEFINED> instruction: 0x03207403
    1268:	1b30200c 	blne	c092a0 <__Stack_Size+0xc08ea0>
    126c:	04020025 	streq	r0, [r2], #-37	; 0x25
    1270:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1274:	40311d52 	eorsmi	r1, r1, r2, asr sp
    1278:	98032323 	stmdals	r3, {r0, r1, r5, r8, r9, sp}
    127c:	0d034a01 	vstreq	s8, [r3, #-4]
    1280:	08100301 	ldmdaeq	r0, {r0, r8, r9}
    1284:	2f3d1412 	svccs	0x003d1412
    1288:	0c032121 	stfeqs	f2, [r3], {33}	; 0x21
    128c:	212f142e 			; <UNDEFINED> instruction: 0x212f142e
    1290:	21212121 			; <UNDEFINED> instruction: 0x21212121
    1294:	2e0c0321 	cdpcs	3, 0, cr0, cr12, cr1, {1}
    1298:	211e2214 	tstcs	lr, r4, lsl r2
    129c:	03212121 			; <UNDEFINED> instruction: 0x03212121
    12a0:	2f142e0c 	svccs	0x00142e0c
    12a4:	21212121 			; <UNDEFINED> instruction: 0x21212121
    12a8:	2e0d0321 	cdpcs	3, 0, cr0, cr13, cr1, {1}
    12ac:	4f231d1a 	svcmi	0x00231d1a
    12b0:	1a660e03 	bne	1984ac4 <__Stack_Size+0x19846c4>
    12b4:	036b232b 	cmneq	fp, #-1409286144	; 0xac000000
    12b8:	0a035819 	beq	d7324 <__Stack_Size+0xd6f24>
    12bc:	33232b01 			; <UNDEFINED> instruction: 0x33232b01
    12c0:	194a1403 	stmdbne	sl, {r0, r1, sl, ip}^
    12c4:	192e1803 	stmdbne	lr!, {r0, r1, fp, ip}
    12c8:	034a1603 	movteq	r1, #42499	; 0xa603
    12cc:	232b010a 			; <UNDEFINED> instruction: 0x232b010a
    12d0:	4a0d0333 	bmi	341fa4 <__Stack_Size+0x341ba4>
    12d4:	74110317 	ldrvc	r0, [r1], #-791	; 0x317
    12d8:	01029203 	tsteq	r2, r3, lsl #4
    12dc:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    12e0:	03207dee 			; <UNDEFINED> instruction: 0x03207dee
    12e4:	28206617 	stmdacs	r0!, {r0, r1, r2, r4, r9, sl, sp, lr}
    12e8:	03207803 			; <UNDEFINED> instruction: 0x03207803
    12ec:	222c2e0a 	eorcs	r2, ip, #10, 28	; 0xa0
    12f0:	01e40340 	mvneq	r0, r0, asr #6
    12f4:	234d232e 	movtcs	r2, #54062	; 0xd32e
    12f8:	207e9a03 	rsbscs	r9, lr, r3, lsl #20
    12fc:	6600ef03 	strvs	lr, [r0], -r3, lsl #30
    1300:	3f200903 	svccc	0x00200903
    1304:	9803233f 	stmdals	r3, {r0, r1, r2, r3, r4, r5, r8, r9, sp}
    1308:	03202e7f 			; <UNDEFINED> instruction: 0x03202e7f
    130c:	2831200a 	ldmdacs	r1!, {r1, r3, sp}
    1310:	1903314b 	stmdbne	r3, {r0, r1, r3, r6, r8, ip, sp}
    1314:	3128202e 			; <UNDEFINED> instruction: 0x3128202e
    1318:	18663d03 	stmdane	r6!, {r0, r1, r8, sl, fp, ip, sp}^
    131c:	2e130323 	cdpcs	3, 1, cr0, cr3, cr3, {1}
    1320:	234d2319 	movtcs	r2, #54041	; 0xd319
    1324:	1a2e1603 	bne	b86b38 <__Stack_Size+0xb86738>
    1328:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    132c:	0c032e1d 	stceq	14, cr2, [r3], {29}
    1330:	27232320 	strcs	r2, [r3, -r0, lsr #6]!
    1334:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    1338:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    133c:	1c242a32 	stcne	10, cr2, [r4], #-200	; 0xffffff38
    1340:	78033225 	stmdavc	r3, {r0, r2, r5, r9, ip, sp}
    1344:	2332242e 	teqcs	r2, #771751936	; 0x2e000000
    1348:	12032323 	andne	r2, r3, #-1946157056	; 0x8c000000
    134c:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    1350:	2e120323 	cdpcs	3, 1, cr0, cr2, cr3, {1}
    1354:	3f4d2319 	svccc	0x004d2319
    1358:	192e1203 	stmdbne	lr!, {r0, r1, r9, ip}
    135c:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1360:	23182e12 	tstcs	r8, #288	; 0x120
    1364:	0e033f4d 	cdpeq	15, 0, cr3, cr3, cr13, {2}
    1368:	231d1a2e 	tstcs	sp, #188416	; 0x2e000
    136c:	660e034f 	strvs	r0, [lr], -pc, asr #6
    1370:	4f231d1a 	svcmi	0x00231d1a
    1374:	1a660f03 	bne	1984f88 <__Stack_Size+0x1984b88>
    1378:	034f231d 	movteq	r2, #62237	; 0xf31d
    137c:	1d1a660f 	ldcne	6, cr6, [sl, #-60]	; 0xffffffc4
    1380:	12034f23 	andne	r4, r3, #35, 30	; 0x8c
    1384:	4d231966 	stcmi	9, cr1, [r3, #-408]!	; 0xfffffe68
    1388:	2e110323 	cdpcs	3, 1, cr0, cr1, cr3, {1}
    138c:	3f4d2319 	svccc	0x004d2319
    1390:	192e1103 	stmdbne	lr!, {r0, r1, r8, ip}
    1394:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    1398:	23192e11 	tstcs	r9, #272	; 0x110
    139c:	10033f4d 	andne	r3, r3, sp, asr #30
    13a0:	4d231a2e 	vstmdbmi	r3!, {s2-s47}
    13a4:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    13a8:	3f4d231a 	svccc	0x004d231a
    13ac:	1a2e1003 	bne	b853c0 <__Stack_Size+0xb84fc0>
    13b0:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    13b4:	231a2e10 	tstcs	sl, #16, 28	; 0x100
    13b8:	10033f4d 	andne	r3, r3, sp, asr #30
    13bc:	4d23192e 	stcmi	9, cr1, [r3, #-184]!	; 0xffffff48
    13c0:	2e100323 	cdpcs	3, 1, cr0, cr0, cr3, {1}
    13c4:	3f312319 	svccc	0x00312319
    13c8:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    13cc:	03234d23 			; <UNDEFINED> instruction: 0x03234d23
    13d0:	23192e10 	tstcs	r9, #16, 28	; 0x100
    13d4:	10033f31 	andne	r3, r3, r1, lsr pc
    13d8:	4b23192e 	blmi	8c7898 <__Stack_Size+0x8c7498>
    13dc:	2e0f0323 	cdpcs	3, 0, cr0, cr15, cr3, {1}
    13e0:	234b2319 	movtcs	r2, #45849	; 0xb319
    13e4:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    13e8:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    13ec:	23192e0f 	tstcs	r9, #15, 28	; 0xf0
    13f0:	10033f4b 	andne	r3, r3, fp, asr #30
    13f4:	4b23192e 	blmi	8c78b4 <__Stack_Size+0x8c74b4>
    13f8:	2e0f033f 	mcrcs	3, 0, r0, cr15, cr15, {1}
    13fc:	3f4b2319 	svccc	0x004b2319
    1400:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    1404:	033f4b23 	teqeq	pc, #35840	; 0x8c00
    1408:	03192e14 	tsteq	r9, #20, 28	; 0x140
    140c:	69272079 	stmdbvs	r7!, {r0, r3, r4, r5, r6, sp}
    1410:	19661203 	stmdbne	r6!, {r0, r1, r9, ip}^
    1414:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1418:	661e0369 	ldrvs	r0, [lr], -r9, ror #6
    141c:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1420:	694d6827 	stmdbvs	sp, {r0, r1, r2, r5, fp, sp, lr}^
    1424:	311d6934 	tstcc	sp, r4, lsr r9
    1428:	1a580e03 	bne	1604c3c <__Stack_Size+0x160483c>
    142c:	034f231d 	movteq	r2, #62237	; 0xf31d
    1430:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    1434:	0e034f23 	cdpeq	15, 0, cr4, cr3, cr3, {1}
    1438:	231d1a66 	tstcs	sp, #417792	; 0x66000
    143c:	6610034f 	ldrvs	r0, [r0], -pc, asr #6
    1440:	18036918 	stmdane	r3, {r3, r4, r8, fp, sp, lr}
    1444:	03691958 	cmneq	r9, #88, 18	; 0x160000
    1448:	69185812 	ldmdbvs	r8, {r1, r4, fp, ip, lr}
    144c:	18581103 	ldmdane	r8, {r0, r1, r8, ip}^
    1450:	580c0369 	stmdapl	ip, {r0, r3, r5, r6, r8, r9}
    1454:	2e0c0317 	mcrcs	3, 0, r0, cr12, cr7, {0}
    1458:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    145c:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    1460:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    1464:	2e0d0317 	mcrcs	3, 0, r0, cr13, cr7, {0}
    1468:	3c130317 	ldccc	3, cr0, [r3], {23}
    146c:	13036918 	movwne	r6, #14616	; 0x3918
    1470:	03691858 	cmneq	r9, #88, 16	; 0x580000
    1474:	20746ffb 	ldrshtcs	r6, [r4], #-251	; 0xffffff05
    1478:	200a0328 	andcs	r0, sl, r8, lsr #6
    147c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    1480:	73032013 	movwvc	r2, #12307	; 0x3013
    1484:	6e03402e 	cdpvs	0, 0, cr4, cr3, cr14, {1}
    1488:	20180320 	andscs	r0, r8, r0, lsr #6
    148c:	4d323f4d 	ldcmi	15, cr3, [r2, #-308]!	; 0xfffffecc
    1490:	2e110369 	cdpcs	3, 1, cr0, cr1, cr9, {3}
    1494:	332e6f03 			; <UNDEFINED> instruction: 0x332e6f03
    1498:	30694d32 	rsbcc	r4, r9, r2, lsr sp
    149c:	0fe1032c 	svceq	0x00e1032c
    14a0:	0369182e 	cmneq	r9, #3014656	; 0x2e0000
    14a4:	69185813 	ldmdbvs	r8, {r0, r1, r4, fp, ip, lr}
    14a8:	746f8203 	strbtvc	r8, [pc], #-515	; 14b0 <__Stack_Size+0x10b0>
    14ac:	20090320 	andcs	r0, r9, r0, lsr #6
    14b0:	03207703 			; <UNDEFINED> instruction: 0x03207703
    14b4:	33234a09 			; <UNDEFINED> instruction: 0x33234a09
    14b8:	032e2003 			; <UNDEFINED> instruction: 0x032e2003
    14bc:	31302e60 	teqcc	r0, r0, ror #28
    14c0:	2e160333 	mrccs	3, 0, r0, cr6, cr3, {1}
    14c4:	302e6a03 	eorcc	r6, lr, r3, lsl #20
    14c8:	3c13ea03 	ldccc	10, cr14, [r3], {3}
    14cc:	206c9603 	rsbcs	r9, ip, r3, lsl #12
    14d0:	2013ea03 	andscs	lr, r3, r3, lsl #20
    14d4:	211f215a 	tstcs	pc, sl, asr r1	; <UNPREDICTABLE>
    14d8:	464b3224 	strbmi	r3, [fp], -r4, lsr #4
    14dc:	8f033124 	svchi	0x00033124
    14e0:	f203206c 	vhadd.s8	q1, <illegal reg q1.5>, q14
    14e4:	9a032013 	bls	c9538 <__Stack_Size+0xc9138>
    14e8:	7403206c 	strvc	r2, [r3], #-108	; 0x6c
    14ec:	1491032e 	ldrne	r0, [r1], #814	; 0x32e
    14f0:	24215a2e 	strtcs	r5, [r1], #-2606	; 0xa2e
    14f4:	2f402438 	svccs	0x00402438
    14f8:	241c322a 	ldrcs	r3, [ip], #-554	; 0x22a
    14fc:	6bea0331 	blvs	ffa821c8 <SCS_BASE+0x1fa741c8>
    1500:	95032220 	strls	r2, [r3, #-544]	; 0x220
    1504:	e9032e14 	stmdb	r3, {r2, r4, r9, sl, fp, sp}
    1508:	e003206b 	and	r2, r3, fp, rrx
    150c:	3f182e10 	svccc	0x00182e10
    1510:	17580b03 	ldrbne	r0, [r8, -r3, lsl #22]
    1514:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    1518:	0b032117 	bleq	c997c <__Stack_Size+0xc957c>
    151c:	0321172e 			; <UNDEFINED> instruction: 0x0321172e
    1520:	2f172e0b 	svccs	0x00172e0b
    1524:	172e0a03 	strne	r0, [lr, -r3, lsl #20]!
    1528:	2e0a0321 	cdpcs	3, 0, cr0, cr10, cr1, {1}
    152c:	18032117 	stmdane	r3, {r0, r1, r2, r4, r8, sp}
    1530:	09031a2e 	stmdbeq	r3, {r1, r2, r3, r5, r9, fp, ip}
    1534:	4a18032e 	bmi	6021f4 <__Stack_Size+0x601df4>
    1538:	4a160318 	bmi	5821a0 <__Stack_Size+0x581da0>
    153c:	22010903 	andcs	r0, r1, #49152	; 0xc000
    1540:	00222c22 	eoreq	r2, r2, r2, lsr #24
    1544:	06010402 	streq	r0, [r1], -r2, lsl #8
    1548:	04020020 	streq	r0, [r2], #-32
    154c:	43220601 			; <UNDEFINED> instruction: 0x43220601
    1550:	18201503 	stmdane	r0!, {r0, r1, r8, sl, ip}
    1554:	01000402 	tsteq	r0, r2, lsl #8
    1558:	0001d601 	andeq	sp, r1, r1, lsl #12
    155c:	9b000200 	blls	1d64 <__Stack_Size+0x1964>
    1560:	02000000 	andeq	r0, r0, #0
    1564:	0d0efb01 	vstreq	d15, [lr, #-4]
    1568:	01010100 	mrseq	r0, (UNDEF: 17)
    156c:	00000001 	andeq	r0, r0, r1
    1570:	01000001 	tsteq	r0, r1
    1574:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1578:	30316632 	eorscc	r6, r1, r2, lsr r6
    157c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1580:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1584:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
    1588:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    158c:	5f783031 	svcpl	0x00783031
    1590:	2f62696c 	svccs	0x0062696c
    1594:	00636e69 	rsbeq	r6, r3, r9, ror #28
    1598:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    159c:	31663233 	cmncc	r6, r3, lsr r2
    15a0:	755f7830 	ldrbvc	r7, [pc, #-2096]	; d78 <__Stack_Size+0x978>
    15a4:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    15a8:	0100632e 	tsteq	r0, lr, lsr #6
    15ac:	74730000 	ldrbtvc	r0, [r3], #-0
    15b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    15b4:	5f783031 	svcpl	0x00783031
    15b8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    15bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    15c0:	74730000 	ldrbtvc	r0, [r3], #-0
    15c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    15c8:	5f783031 	svcpl	0x00783031
    15cc:	2e70616d 	rpwcssz	f6, f0, #5.0
    15d0:	00020068 	andeq	r0, r2, r8, rrx
    15d4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    15d8:	31663233 	cmncc	r6, r3, lsr r2
    15dc:	755f7830 	ldrbvc	r7, [pc, #-2096]	; db4 <__Stack_Size+0x9b4>
    15e0:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    15e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    15e8:	74730000 	ldrbtvc	r0, [r3], #-0
    15ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    15f0:	5f783031 	svcpl	0x00783031
    15f4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    15f8:	00020068 	andeq	r0, r2, r8, rrx
    15fc:	05000000 	streq	r0, [r0, #-0]
    1600:	005bc402 	subseq	ip, fp, r2, lsl #8
    1604:	00da0308 	sbcseq	r0, sl, r8, lsl #6
    1608:	3f082401 	svccc	0x00082401
    160c:	03581b03 	cmpeq	r8, #3072	; 0xc00
    1610:	595c2e66 	ldmdbpl	ip, {r1, r2, r5, r6, r9, sl, fp, sp}^
    1614:	59405940 	stmdbpl	r0, {r6, r8, fp, ip, lr}^
    1618:	03425940 	movteq	r5, #10560	; 0x2940
    161c:	16032e7a 			; <UNDEFINED> instruction: 0x16032e7a
    1620:	3c150374 	ldccc	3, cr0, [r5], {116}	; 0x74
    1624:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    1628:	23233222 			; <UNDEFINED> instruction: 0x23233222
    162c:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
    1630:	2e7a0328 	cdpcs	3, 7, cr0, cr10, cr8, {1}
    1634:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    1638:	26233234 			; <UNDEFINED> instruction: 0x26233234
    163c:	22207a03 	eorcs	r7, r0, #12288	; 0x3000
    1640:	032e4e03 			; <UNDEFINED> instruction: 0x032e4e03
    1644:	24232036 	strtcs	r2, [r3], #-54	; 0x36
    1648:	4e241c43 	cdpmi	12, 2, cr1, cr4, cr3, {2}
    164c:	773d4d67 	ldrvc	r4, [sp, -r7, ror #26]!
    1650:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    1654:	2f1d4014 	svccs	0x001d4014
    1658:	03212121 			; <UNDEFINED> instruction: 0x03212121
    165c:	15032e10 	strne	r2, [r3, #-3600]	; 0xe10
    1660:	206b0301 	rsbcs	r0, fp, r1, lsl #6
    1664:	03201503 			; <UNDEFINED> instruction: 0x03201503
    1668:	0a032076 	beq	c9848 <__Stack_Size+0xc9448>
    166c:	3c760320 	ldclcc	3, cr0, [r6], #-128	; 0xffffff80
    1670:	03200a03 			; <UNDEFINED> instruction: 0x03200a03
    1674:	32352e78 	eorscc	r2, r5, #120, 28	; 0x780
    1678:	142e0c03 	strtne	r0, [lr], #-3075	; 0xc03
    167c:	0321212f 			; <UNDEFINED> instruction: 0x0321212f
    1680:	1d1a2e0f 	ldcne	14, cr2, [sl, #-60]	; 0xffffffc4
    1684:	1e034f23 	cdpne	15, 0, cr4, cr3, cr3, {1}
    1688:	200d0366 	andcs	r0, sp, r6, ror #6
    168c:	301e3e33 	andscc	r3, lr, r3, lsr lr
    1690:	32223022 	eorcc	r3, r2, #34	; 0x22
    1694:	03402222 	movteq	r2, #546	; 0x222
    1698:	0a035815 	beq	d76f4 <__Stack_Size+0xd72f4>
    169c:	34242a01 	strtcc	r2, [r4], #-2561	; 0xa01
    16a0:	184a0f03 	stmdane	sl, {r0, r1, r8, r9, sl, fp}^
    16a4:	58110368 	ldmdapl	r1, {r3, r5, r6, r8, r9}
    16a8:	0f036717 	svceq	0x00036717
    16ac:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    16b0:	6613034f 	ldrvs	r0, [r3], -pc, asr #6
    16b4:	0f036717 	svceq	0x00036717
    16b8:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    16bc:	660f034f 	strvs	r0, [pc], -pc, asr #6
    16c0:	4a0d0318 	bmi	342328 <__Stack_Size+0x341f28>
    16c4:	0c032117 	stfeqs	f2, [r3], {23}
    16c8:	0e03173c 	mcreq	7, 0, r1, cr3, cr12, {1}
    16cc:	033e1766 	teqeq	lr, #26738688	; 0x1980000
    16d0:	4c17660f 	ldcmi	6, cr6, [r7], {15}
    16d4:	1a580f03 	bne	16052e8 <__Stack_Size+0x1604ee8>
    16d8:	034f231d 	movteq	r2, #62237	; 0xf31d
    16dc:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    16e0:	10034f23 	andne	r4, r3, r3, lsr #30
    16e4:	231d1a66 	tstcs	sp, #417792	; 0x66000
    16e8:	6612034f 	ldrvs	r0, [r2], -pc, asr #6
    16ec:	0f036717 	svceq	0x00036717
    16f0:	231d1a58 	tstcs	sp, #88, 20	; 0x58000
    16f4:	661b034f 	ldrvs	r0, [fp], -pc, asr #6
    16f8:	2e09031a 	mcrcs	3, 0, r0, cr9, cr10, {0}
    16fc:	184a2303 	stmdane	sl, {r0, r1, r8, r9, sp}^
    1700:	034a1b03 	movteq	r1, #43779	; 0xab03
    1704:	7103010f 	tstvc	r3, pc, lsl #2
    1708:	200a0320 	andcs	r0, sl, r0, lsr #6
    170c:	301e3033 	andscc	r3, lr, r3, lsr r0
    1710:	32223022 	eorcc	r3, r2, #34	; 0x22
    1714:	02003042 	andeq	r3, r0, #66	; 0x42
    1718:	001d0104 	andseq	r0, sp, r4, lsl #2
    171c:	3f010402 	svccc	0x00010402
    1720:	01040200 	mrseq	r0, R12_usr
    1724:	03244e22 			; <UNDEFINED> instruction: 0x03244e22
    1728:	0a032023 	beq	c97bc <__Stack_Size+0xc93bc>
    172c:	04023d01 	streq	r3, [r2], #-3329	; 0xd01
    1730:	a0010100 	andge	r0, r1, r0, lsl #2
    1734:	02000000 	andeq	r0, r0, #0
    1738:	00003900 	andeq	r3, r0, r0, lsl #18
    173c:	fb010200 	blx	41f46 <__Stack_Size+0x41b46>
    1740:	01000d0e 	tsteq	r0, lr, lsl #26
    1744:	00010101 	andeq	r0, r1, r1, lsl #2
    1748:	00010000 	andeq	r0, r1, r0
    174c:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    1750:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1754:	5f783031 	svcpl	0x00783031
    1758:	2f62696c 	svccs	0x0062696c
    175c:	00637273 	rsbeq	r7, r3, r3, ror r2
    1760:	726f6300 	rsbvc	r6, pc, #0, 6
    1764:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    1768:	616d5f33 	cmnvs	sp, r3, lsr pc
    176c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    1770:	00010073 	andeq	r0, r1, r3, ror r0
    1774:	05000000 	streq	r0, [r0, #-0]
    1778:	005f0802 	subseq	r0, pc, r2, lsl #16
    177c:	01340308 	teqeq	r4, r8, lsl #6
    1780:	200b0321 	andcs	r0, fp, r1, lsr #6
    1784:	200b0321 	andcs	r0, fp, r1, lsr #6
    1788:	200b0321 	andcs	r0, fp, r1, lsr #6
    178c:	200b032f 	andcs	r0, fp, pc, lsr #6
    1790:	200b032f 	andcs	r0, fp, pc, lsr #6
    1794:	200b032f 	andcs	r0, fp, pc, lsr #6
    1798:	200b0321 	andcs	r0, fp, r1, lsr #6
    179c:	200b032f 	andcs	r0, fp, pc, lsr #6
    17a0:	0a032f2f 	beq	cd464 <__Stack_Size+0xcd064>
    17a4:	0b032f20 	bleq	cd42c <__Stack_Size+0xcd02c>
    17a8:	0b032f20 	bleq	cd430 <__Stack_Size+0xcd030>
    17ac:	0b032f20 	bleq	cd434 <__Stack_Size+0xcd034>
    17b0:	0a032f20 	beq	cd438 <__Stack_Size+0xcd038>
    17b4:	0b032120 	bleq	c9c3c <__Stack_Size+0xc983c>
    17b8:	0b032120 	bleq	c9c40 <__Stack_Size+0xc9840>
    17bc:	0b032120 	bleq	c9c44 <__Stack_Size+0xc9844>
    17c0:	0b032120 	bleq	c9c48 <__Stack_Size+0xc9848>
    17c4:	0b032f20 	bleq	cd44c <__Stack_Size+0xcd04c>
    17c8:	0a032f20 	beq	cd450 <__Stack_Size+0xcd050>
    17cc:	0b032120 	bleq	c9c54 <__Stack_Size+0xc9854>
    17d0:	01022120 	tsteq	r2, r0, lsr #2
    17d4:	5f010100 	svcpl	0x00010100
    17d8:	02000000 	andeq	r0, r0, #0
    17dc:	00003b00 	andeq	r3, r0, r0, lsl #22
    17e0:	fb010200 	blx	41fea <__Stack_Size+0x41bea>
    17e4:	01000d0e 	tsteq	r0, lr, lsl #26
    17e8:	00010101 	andeq	r0, r1, r1, lsl #2
    17ec:	00010000 	andeq	r0, r1, r0
    17f0:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    17f4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    17f8:	5f783031 	svcpl	0x00783031
    17fc:	2f62696c 	svccs	0x0062696c
    1800:	00637273 	rsbeq	r7, r3, r3, ror r2
    1804:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1808:	31663233 	cmncc	r6, r3, lsr r2
    180c:	765f7830 			; <UNDEFINED> instruction: 0x765f7830
    1810:	6f746365 	svcvs	0x00746365
    1814:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1818:	00000001 	andeq	r0, r0, r1
    181c:	78020500 	stmdavc	r2, {r8, sl}
    1820:	0308005f 	movweq	r0, #32863	; 0x805f
    1824:	00010191 	muleq	r1, r1, r1
    1828:	7b010402 	blvc	42838 <__Stack_Size+0x42438>
    182c:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    1830:	503e6c01 	eorspl	r6, lr, r1, lsl #24
    1834:	000f022f 	andeq	r0, pc, pc, lsr #4
    1838:	Address 0x00001838 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000084 	andeq	r0, r0, r4, lsl #1
      20:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      24:	56018e02 	strpl	r8, [r1], -r2, lsl #28
      28:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
      2c:	000b4300 	andeq	r4, fp, r0, lsl #6
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	080031b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip, sp}
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
      44:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      48:	0c0e6501 	cfstr32eq	mvfx6, [lr], {1}
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	08003206 	stmdaeq	r0, {r1, r2, r9, ip, sp}
      58:	00000086 	andeq	r0, r0, r6, lsl #1
      5c:	84200e41 	strthi	r0, [r0], #-3649	; 0xe41
      60:	86048505 	strhi	r8, [r4], -r5, lsl #10
      64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      68:	140e7c01 	strne	r7, [lr], #-3073	; 0xc01
      6c:	0000000c 	andeq	r0, r0, ip
      70:	00000000 	andeq	r0, r0, r0
      74:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
      78:	0000000c 	andeq	r0, r0, ip
      7c:	0000000c 	andeq	r0, r0, ip
      80:	00000000 	andeq	r0, r0, r0
      84:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      88:	00000010 	andeq	r0, r0, r0, lsl r0
      8c:	0000000c 	andeq	r0, r0, ip
      90:	00000000 	andeq	r0, r0, r0
      94:	080032a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp}
      98:	00000014 	andeq	r0, r0, r4, lsl r0
      9c:	00000018 	andeq	r0, r0, r8, lsl r0
      a0:	00000000 	andeq	r0, r0, r0
      a4:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
      a8:	00000044 	andeq	r0, r0, r4, asr #32
      ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      b0:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
      b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
      b8:	0000000c 	andeq	r0, r0, ip
      bc:	00000000 	andeq	r0, r0, r0
      c0:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
      c4:	00000020 	andeq	r0, r0, r0, lsr #32
      c8:	00000014 	andeq	r0, r0, r4, lsl r0
      cc:	00000000 	andeq	r0, r0, r0
      d0:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	83080e42 	movwhi	r0, #36418	; 0x8e42
      dc:	00018e02 	andeq	r8, r1, r2, lsl #28
      e0:	00000014 	andeq	r0, r0, r4, lsl r0
      e4:	00000000 	andeq	r0, r0, r0
      e8:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
      ec:	00000012 	andeq	r0, r0, r2, lsl r0
      f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      f4:	00018e02 	andeq	r8, r1, r2, lsl #28
      f8:	00000018 	andeq	r0, r0, r8, lsl r0
      fc:	00000000 	andeq	r0, r0, r0
     100:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
     104:	0000002e 	andeq	r0, r0, lr, lsr #32
     108:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     10c:	50018e02 	andpl	r8, r1, r2, lsl #28
     110:	000ec4ce 	andeq	ip, lr, lr, asr #9
     114:	00000018 	andeq	r0, r0, r8, lsl r0
     118:	00000000 	andeq	r0, r0, r0
     11c:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
     120:	00000030 	andeq	r0, r0, r0, lsr r0
     124:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     128:	51018e02 	tstpl	r1, r2, lsl #28
     12c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     130:	0000000c 	andeq	r0, r0, ip
     134:	00000000 	andeq	r0, r0, r0
     138:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     13c:	0000004c 	andeq	r0, r0, ip, asr #32
     140:	0000001c 	andeq	r0, r0, ip, lsl r0
     144:	00000000 	andeq	r0, r0, r0
     148:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     14c:	00000094 	muleq	r0, r4, r0
     150:	83080e41 	movwhi	r0, #36417	; 0x8e41
     154:	77018e02 	strvc	r8, [r1, -r2, lsl #28]
     158:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     15c:	000b4300 	andeq	r4, fp, r0, lsl #6
     160:	00000018 	andeq	r0, r0, r8, lsl r0
     164:	00000000 	andeq	r0, r0, r0
     168:	0800348c 	stmdaeq	r0, {r2, r3, r7, sl, ip, sp}
     16c:	0000002e 	andeq	r0, r0, lr, lsr #32
     170:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     174:	54018e02 	strpl	r8, [r1], #-3586	; 0xe02
     178:	000ec4ce 	andeq	ip, lr, lr, asr #9
     17c:	00000018 	andeq	r0, r0, r8, lsl r0
     180:	00000000 	andeq	r0, r0, r0
     184:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     188:	00000014 	andeq	r0, r0, r4, lsl r0
     18c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     190:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     194:	000ec4ce 	andeq	ip, lr, lr, asr #9
     198:	0000001c 	andeq	r0, r0, ip, lsl r0
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	080034ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp}
     1a4:	0000003a 	andeq	r0, r0, sl, lsr r0
     1a8:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     1ac:	53018e02 	movwpl	r8, #7682	; 0x1e02
     1b0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     1b4:	000b4300 	andeq	r4, fp, r0, lsl #6
     1b8:	00000018 	andeq	r0, r0, r8, lsl r0
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     1c4:	00000018 	andeq	r0, r0, r8, lsl r0
     1c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     1cc:	49018e02 	stmdbmi	r1, {r1, r9, sl, fp, pc}
     1d0:	000ec4ce 	andeq	ip, lr, lr, asr #9
     1d4:	0000000c 	andeq	r0, r0, ip
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	08003520 	stmdaeq	r0, {r5, r8, sl, ip, sp}
     1e0:	00000006 	andeq	r0, r0, r6
     1e4:	00000018 	andeq	r0, r0, r8, lsl r0
     1e8:	00000000 	andeq	r0, r0, r0
     1ec:	08003526 	stmdaeq	r0, {r1, r2, r5, r8, sl, ip, sp}
     1f0:	0000001a 	andeq	r0, r0, sl, lsl r0
     1f4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     1f8:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     1fc:	000ec3ce 	andeq	ip, lr, lr, asr #7
     200:	00000018 	andeq	r0, r0, r8, lsl r0
     204:	00000000 	andeq	r0, r0, r0
     208:	08003540 	stmdaeq	r0, {r6, r8, sl, ip, sp}
     20c:	0000001a 	andeq	r0, r0, sl, lsl r0
     210:	83080e41 	movwhi	r0, #36417	; 0x8e41
     214:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     218:	000ec3ce 	andeq	ip, lr, lr, asr #7
     21c:	00000024 	andeq	r0, r0, r4, lsr #32
     220:	00000000 	andeq	r0, r0, r0
     224:	0800355a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip, sp}
     228:	0000004a 	andeq	r0, r0, sl, asr #32
     22c:	83100e41 	tsthi	r0, #1040	; 0x410
     230:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     234:	5b018e02 	blpl	63a44 <__Stack_Size+0x63644>
     238:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     23c:	43000ec3 	movwmi	r0, #3779	; 0xec3
     240:	0000000b 	andeq	r0, r0, fp
     244:	00000018 	andeq	r0, r0, r8, lsl r0
     248:	00000000 	andeq	r0, r0, r0
     24c:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
     250:	0000001e 	andeq	r0, r0, lr, lsl r0
     254:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     258:	49018e02 	stmdbmi	r1, {r1, r9, sl, fp, pc}
     25c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     260:	00000014 	andeq	r0, r0, r4, lsl r0
     264:	00000000 	andeq	r0, r0, r0
     268:	080035c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, sp}
     26c:	00000012 	andeq	r0, r0, r2, lsl r0
     270:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     274:	00018e02 	andeq	r8, r1, r2, lsl #28
     278:	0000001c 	andeq	r0, r0, ip, lsl r0
     27c:	00000000 	andeq	r0, r0, r0
     280:	080035d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, sp}
     284:	00000034 	andeq	r0, r0, r4, lsr r0
     288:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     28c:	51018e02 	tstpl	r1, r2, lsl #28
     290:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     294:	000b4300 	andeq	r4, fp, r0, lsl #6
     298:	0000001c 	andeq	r0, r0, ip, lsl r0
     29c:	00000000 	andeq	r0, r0, r0
     2a0:	08003608 	stmdaeq	r0, {r3, r9, sl, ip, sp}
     2a4:	00000034 	andeq	r0, r0, r4, lsr r0
     2a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2ac:	51018e02 	tstpl	r1, r2, lsl #28
     2b0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2b4:	000b4300 	andeq	r4, fp, r0, lsl #6
     2b8:	00000020 	andeq	r0, r0, r0, lsr #32
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	0800363c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp}
     2c4:	00000064 	andeq	r0, r0, r4, rrx
     2c8:	83100e41 	tsthi	r0, #1040	; 0x410
     2cc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     2d0:	69018e02 	stmdbvs	r1, {r1, r9, sl, fp, pc}
     2d4:	c3c4c5ce 	bicgt	ip, r4, #864026624	; 0x33800000
     2d8:	0000000e 	andeq	r0, r0, lr
     2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e0:	00000000 	andeq	r0, r0, r0
     2e4:	080036a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp}
     2e8:	00000038 	andeq	r0, r0, r8, lsr r0
     2ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     2f0:	52018e02 	andpl	r8, r1, #2, 28
     2f4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     2f8:	000b4300 	andeq	r4, fp, r0, lsl #6
     2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     300:	00000000 	andeq	r0, r0, r0
     304:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
     308:	00000038 	andeq	r0, r0, r8, lsr r0
     30c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     310:	52018e02 	andpl	r8, r1, #2, 28
     314:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     318:	000b4300 	andeq	r4, fp, r0, lsl #6
     31c:	0000001c 	andeq	r0, r0, ip, lsl r0
     320:	00000000 	andeq	r0, r0, r0
     324:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     328:	00000034 	andeq	r0, r0, r4, lsr r0
     32c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
     330:	86038504 	strhi	r8, [r3], -r4, lsl #10
     334:	58018e02 	stmdapl	r1, {r1, r9, sl, fp, pc}
     338:	0000100e 	andeq	r1, r0, lr
     33c:	0000001c 	andeq	r0, r0, ip, lsl r0
     340:	00000000 	andeq	r0, r0, r0
     344:	08003744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, sp}
     348:	0000003c 	andeq	r0, r0, ip, lsr r0
     34c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xe41
     350:	86038504 	strhi	r8, [r3], -r4, lsl #10
     354:	5c018e02 	stcpl	14, cr8, [r1], {2}
     358:	0000100e 	andeq	r1, r0, lr
     35c:	0000001c 	andeq	r0, r0, ip, lsl r0
     360:	00000000 	andeq	r0, r0, r0
     364:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     368:	00000038 	andeq	r0, r0, r8, lsr r0
     36c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     370:	52018e02 	andpl	r8, r1, #2, 28
     374:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     378:	000b4300 	andeq	r4, fp, r0, lsl #6
     37c:	0000001c 	andeq	r0, r0, ip, lsl r0
     380:	00000000 	andeq	r0, r0, r0
     384:	080037b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, sp}
     388:	00000038 	andeq	r0, r0, r8, lsr r0
     38c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     390:	52018e02 	andpl	r8, r1, #2, 28
     394:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     398:	000b4300 	andeq	r4, fp, r0, lsl #6
     39c:	00000024 	andeq	r0, r0, r4, lsr #32
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	080037f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp}
     3a8:	0000004c 	andeq	r0, r0, ip, asr #32
     3ac:	83100e41 	tsthi	r0, #1040	; 0x410
     3b0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     3b4:	5b018e02 	blpl	63bc4 <__Stack_Size+0x637c4>
     3b8:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     3bc:	43000ec3 	movwmi	r0, #3779	; 0xec3
     3c0:	0000000b 	andeq	r0, r0, fp
     3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c8:	00000000 	andeq	r0, r0, r0
     3cc:	0800383c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, sp}
     3d0:	00000038 	andeq	r0, r0, r8, lsr r0
     3d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3d8:	52018e02 	andpl	r8, r1, #2, 28
     3dc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     3e0:	000b4300 	andeq	r4, fp, r0, lsl #6
     3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	08003874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp}
     3f0:	00000038 	andeq	r0, r0, r8, lsr r0
     3f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     3f8:	52018e02 	andpl	r8, r1, #2, 28
     3fc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     400:	000b4300 	andeq	r4, fp, r0, lsl #6
     404:	0000001c 	andeq	r0, r0, ip, lsl r0
     408:	00000000 	andeq	r0, r0, r0
     40c:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
     410:	00000038 	andeq	r0, r0, r8, lsr r0
     414:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     418:	52018e02 	andpl	r8, r1, #2, 28
     41c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     420:	000b4300 	andeq	r4, fp, r0, lsl #6
     424:	0000001c 	andeq	r0, r0, ip, lsl r0
     428:	00000000 	andeq	r0, r0, r0
     42c:	080038e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp}
     430:	00000038 	andeq	r0, r0, r8, lsr r0
     434:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     438:	52018e02 	andpl	r8, r1, #2, 28
     43c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     440:	000b4300 	andeq	r4, fp, r0, lsl #6
     444:	0000001c 	andeq	r0, r0, ip, lsl r0
     448:	00000000 	andeq	r0, r0, r0
     44c:	0800391c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp}
     450:	00000038 	andeq	r0, r0, r8, lsr r0
     454:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     458:	52018e02 	andpl	r8, r1, #2, 28
     45c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     460:	000b4300 	andeq	r4, fp, r0, lsl #6
     464:	0000001c 	andeq	r0, r0, ip, lsl r0
     468:	00000000 	andeq	r0, r0, r0
     46c:	08003954 	stmdaeq	r0, {r2, r4, r6, r8, fp, ip, sp}
     470:	00000038 	andeq	r0, r0, r8, lsr r0
     474:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     478:	52018e02 	andpl	r8, r1, #2, 28
     47c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     480:	000b4300 	andeq	r4, fp, r0, lsl #6
     484:	0000001c 	andeq	r0, r0, ip, lsl r0
     488:	00000000 	andeq	r0, r0, r0
     48c:	0800398c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, sp}
     490:	00000034 	andeq	r0, r0, r4, lsr r0
     494:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     498:	51018e02 	tstpl	r1, r2, lsl #28
     49c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     4a0:	000b4300 	andeq	r4, fp, r0, lsl #6
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
     4b0:	0000001a 	andeq	r0, r0, sl, lsl r0
     4b4:	83100e41 	tsthi	r0, #1040	; 0x410
     4b8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	080039da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, sp}
     4cc:	0000008e 	andeq	r0, r0, lr, lsl #1
     4d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4d4:	41018e02 	tstmi	r1, r2, lsl #28
     4d8:	4102280e 	tstmi	r2, lr, lsl #16
     4dc:	0000080e 	andeq	r0, r0, lr, lsl #16
     4e0:	00000014 	andeq	r0, r0, r4, lsl r0
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	08003a68 	stmdaeq	r0, {r3, r5, r6, r9, fp, ip, sp}
     4ec:	00000054 	andeq	r0, r0, r4, asr r0
     4f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f8:	00000018 	andeq	r0, r0, r8, lsl r0
     4fc:	00000000 	andeq	r0, r0, r0
     500:	08003abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, ip, sp}
     504:	00000030 	andeq	r0, r0, r0, lsr r0
     508:	83100e41 	tsthi	r0, #1040	; 0x410
     50c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
     514:	00000018 	andeq	r0, r0, r8, lsl r0
     518:	00000000 	andeq	r0, r0, r0
     51c:	08003aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, ip, sp}
     520:	00000014 	andeq	r0, r0, r4, lsl r0
     524:	83080e41 	movwhi	r0, #36417	; 0x8e41
     528:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     52c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     530:	0000000c 	andeq	r0, r0, ip
     534:	00000000 	andeq	r0, r0, r0
     538:	08003b00 	stmdaeq	r0, {r8, r9, fp, ip, sp}
     53c:	00000018 	andeq	r0, r0, r8, lsl r0
     540:	00000018 	andeq	r0, r0, r8, lsl r0
     544:	00000000 	andeq	r0, r0, r0
     548:	08003b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, ip, sp}
     54c:	00000030 	andeq	r0, r0, r0, lsr r0
     550:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     554:	52018e02 	andpl	r8, r1, #2, 28
     558:	000ec4ce 	andeq	ip, lr, lr, asr #9
     55c:	00000020 	andeq	r0, r0, r0, lsr #32
     560:	00000000 	andeq	r0, r0, r0
     564:	08003b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, sp}
     568:	00000032 	andeq	r0, r0, r2, lsr r0
     56c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     570:	86038504 	strhi	r8, [r3], -r4, lsl #10
     574:	55018e02 	strpl	r8, [r1, #-3586]	; 0xe02
     578:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     57c:	0000000e 	andeq	r0, r0, lr
     580:	00000018 	andeq	r0, r0, r8, lsl r0
     584:	00000000 	andeq	r0, r0, r0
     588:	08003b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp}
     58c:	0000004a 	andeq	r0, r0, sl, asr #32
     590:	83080e41 	movwhi	r0, #36417	; 0x8e41
     594:	5f018e02 	svcpl	0x00018e02
     598:	000ec3ce 	andeq	ip, lr, lr, asr #7
     59c:	00000018 	andeq	r0, r0, r8, lsl r0
     5a0:	00000000 	andeq	r0, r0, r0
     5a4:	08003bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, sp}
     5a8:	0000007e 	andeq	r0, r0, lr, ror r0
     5ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5b0:	7b018e02 	blvc	63dc0 <__Stack_Size+0x639c0>
     5b4:	000ec3ce 	andeq	ip, lr, lr, asr #7
     5b8:	00000014 	andeq	r0, r0, r4, lsl r0
     5bc:	00000000 	andeq	r0, r0, r0
     5c0:	08003c42 	stmdaeq	r0, {r1, r6, sl, fp, ip, sp}
     5c4:	00000102 	andeq	r0, r0, r2, lsl #2
     5c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     5cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5d0:	00000018 	andeq	r0, r0, r8, lsl r0
     5d4:	00000000 	andeq	r0, r0, r0
     5d8:	08003d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, sp}
     5dc:	00000034 	andeq	r0, r0, r4, lsr r0
     5e0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     5e4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     5e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5ec:	00000024 	andeq	r0, r0, r4, lsr #32
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	08003d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, sp}
     5f8:	00000048 	andeq	r0, r0, r8, asr #32
     5fc:	83100e41 	tsthi	r0, #1040	; 0x410
     600:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     604:	5a018e02 	bpl	63e14 <__Stack_Size+0x63a14>
     608:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
     60c:	44000ec3 	strmi	r0, [r0], #-3779	; 0xec3
     610:	0000000b 	andeq	r0, r0, fp
     614:	0000001c 	andeq	r0, r0, ip, lsl r0
     618:	00000000 	andeq	r0, r0, r0
     61c:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
     620:	0000007c 	andeq	r0, r0, ip, ror r0
     624:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     628:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     62c:	200e4301 	andcs	r4, lr, r1, lsl #6
     630:	000c0e74 	andeq	r0, ip, r4, ror lr
     634:	00000018 	andeq	r0, r0, r8, lsl r0
     638:	00000000 	andeq	r0, r0, r0
     63c:	08003e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip, sp}
     640:	00000030 	andeq	r0, r0, r0, lsr r0
     644:	83080e41 	movwhi	r0, #36417	; 0x8e41
     648:	53018e02 	movwpl	r8, #7682	; 0x1e02
     64c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     650:	0000000c 	andeq	r0, r0, ip
     654:	00000000 	andeq	r0, r0, r0
     658:	08003e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, sp}
     65c:	00000008 	andeq	r0, r0, r8
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	00000000 	andeq	r0, r0, r0
     668:	08005fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, lr}
     66c:	00000154 	andeq	r0, r0, r4, asr r1
     670:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     674:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     678:	280e4101 	stmdacs	lr, {r0, r8, lr}
     67c:	0000000c 	andeq	r0, r0, ip
     680:	00000000 	andeq	r0, r0, r0
     684:	08003e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, sp}
     688:	0000000c 	andeq	r0, r0, ip
     68c:	0000000c 	andeq	r0, r0, ip
     690:	00000000 	andeq	r0, r0, r0
     694:	08003e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp}
     698:	00000014 	andeq	r0, r0, r4, lsl r0
     69c:	0000000c 	andeq	r0, r0, ip
     6a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     6a4:	7c020001 	stcvc	0, cr0, [r2], {1}
     6a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     6ac:	0000000c 	andeq	r0, r0, ip
     6b0:	0000069c 	muleq	r0, ip, r6
     6b4:	08003e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, ip, sp}
     6b8:	00000002 	andeq	r0, r0, r2
     6bc:	0000000c 	andeq	r0, r0, ip
     6c0:	0000069c 	muleq	r0, ip, r6
     6c4:	08003e96 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, fp, ip, sp}
     6c8:	00000002 	andeq	r0, r0, r2
     6cc:	0000000c 	andeq	r0, r0, ip
     6d0:	0000069c 	muleq	r0, ip, r6
     6d4:	08003e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, sp}
     6d8:	00000002 	andeq	r0, r0, r2
     6dc:	0000000c 	andeq	r0, r0, ip
     6e0:	0000069c 	muleq	r0, ip, r6
     6e4:	08003e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, ip, sp}
     6e8:	00000002 	andeq	r0, r0, r2
     6ec:	0000000c 	andeq	r0, r0, ip
     6f0:	0000069c 	muleq	r0, ip, r6
     6f4:	08003e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, ip, sp}
     6f8:	00000002 	andeq	r0, r0, r2
     6fc:	0000000c 	andeq	r0, r0, ip
     700:	0000069c 	muleq	r0, ip, r6
     704:	08003e9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, fp, ip, sp}
     708:	00000002 	andeq	r0, r0, r2
     70c:	0000000c 	andeq	r0, r0, ip
     710:	0000069c 	muleq	r0, ip, r6
     714:	08003ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, sp}
     718:	00000002 	andeq	r0, r0, r2
     71c:	0000000c 	andeq	r0, r0, ip
     720:	0000069c 	muleq	r0, ip, r6
     724:	08003ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, ip, sp}
     728:	00000002 	andeq	r0, r0, r2
     72c:	0000000c 	andeq	r0, r0, ip
     730:	0000069c 	muleq	r0, ip, r6
     734:	08003ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, sp}
     738:	00000004 	andeq	r0, r0, r4
     73c:	0000000c 	andeq	r0, r0, ip
     740:	0000069c 	muleq	r0, ip, r6
     744:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
     748:	00000002 	andeq	r0, r0, r2
     74c:	0000000c 	andeq	r0, r0, ip
     750:	0000069c 	muleq	r0, ip, r6
     754:	08003eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp, ip, sp}
     758:	00000002 	andeq	r0, r0, r2
     75c:	0000000c 	andeq	r0, r0, ip
     760:	0000069c 	muleq	r0, ip, r6
     764:	08003eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, sp}
     768:	00000002 	andeq	r0, r0, r2
     76c:	0000000c 	andeq	r0, r0, ip
     770:	0000069c 	muleq	r0, ip, r6
     774:	08003eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp, ip, sp}
     778:	00000002 	andeq	r0, r0, r2
     77c:	0000000c 	andeq	r0, r0, ip
     780:	0000069c 	muleq	r0, ip, r6
     784:	08003eb0 	stmdaeq	r0, {r4, r5, r7, r9, sl, fp, ip, sp}
     788:	00000002 	andeq	r0, r0, r2
     78c:	0000000c 	andeq	r0, r0, ip
     790:	0000069c 	muleq	r0, ip, r6
     794:	08003eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp, ip, sp}
     798:	00000002 	andeq	r0, r0, r2
     79c:	0000000c 	andeq	r0, r0, ip
     7a0:	0000069c 	muleq	r0, ip, r6
     7a4:	08003eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, sp}
     7a8:	00000002 	andeq	r0, r0, r2
     7ac:	0000000c 	andeq	r0, r0, ip
     7b0:	0000069c 	muleq	r0, ip, r6
     7b4:	08003eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, ip, sp}
     7b8:	00000002 	andeq	r0, r0, r2
     7bc:	0000000c 	andeq	r0, r0, ip
     7c0:	0000069c 	muleq	r0, ip, r6
     7c4:	08003eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, sp}
     7c8:	00000002 	andeq	r0, r0, r2
     7cc:	0000000c 	andeq	r0, r0, ip
     7d0:	0000069c 	muleq	r0, ip, r6
     7d4:	08003eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     7d8:	00000002 	andeq	r0, r0, r2
     7dc:	0000000c 	andeq	r0, r0, ip
     7e0:	0000069c 	muleq	r0, ip, r6
     7e4:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     7e8:	00000002 	andeq	r0, r0, r2
     7ec:	0000000c 	andeq	r0, r0, ip
     7f0:	0000069c 	muleq	r0, ip, r6
     7f4:	08003ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     7f8:	00000002 	andeq	r0, r0, r2
     7fc:	0000000c 	andeq	r0, r0, ip
     800:	0000069c 	muleq	r0, ip, r6
     804:	08003ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip, sp}
     808:	00000002 	andeq	r0, r0, r2
     80c:	0000000c 	andeq	r0, r0, ip
     810:	0000069c 	muleq	r0, ip, r6
     814:	08003ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp, ip, sp}
     818:	00000002 	andeq	r0, r0, r2
     81c:	0000000c 	andeq	r0, r0, ip
     820:	0000069c 	muleq	r0, ip, r6
     824:	08003ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, sp}
     828:	00000002 	andeq	r0, r0, r2
     82c:	0000000c 	andeq	r0, r0, ip
     830:	0000069c 	muleq	r0, ip, r6
     834:	08003ec6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, fp, ip, sp}
     838:	00000002 	andeq	r0, r0, r2
     83c:	0000000c 	andeq	r0, r0, ip
     840:	0000069c 	muleq	r0, ip, r6
     844:	08003ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip, sp}
     848:	00000002 	andeq	r0, r0, r2
     84c:	0000000c 	andeq	r0, r0, ip
     850:	0000069c 	muleq	r0, ip, r6
     854:	08003eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, ip, sp}
     858:	00000002 	andeq	r0, r0, r2
     85c:	0000000c 	andeq	r0, r0, ip
     860:	0000069c 	muleq	r0, ip, r6
     864:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
     868:	00000002 	andeq	r0, r0, r2
     86c:	0000000c 	andeq	r0, r0, ip
     870:	0000069c 	muleq	r0, ip, r6
     874:	08003ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, ip, sp}
     878:	00000002 	andeq	r0, r0, r2
     87c:	0000000c 	andeq	r0, r0, ip
     880:	0000069c 	muleq	r0, ip, r6
     884:	08003ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, sp}
     888:	00000002 	andeq	r0, r0, r2
     88c:	0000000c 	andeq	r0, r0, ip
     890:	0000069c 	muleq	r0, ip, r6
     894:	08003ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, ip, sp}
     898:	00000002 	andeq	r0, r0, r2
     89c:	0000000c 	andeq	r0, r0, ip
     8a0:	0000069c 	muleq	r0, ip, r6
     8a4:	08003ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, ip, sp}
     8a8:	00000002 	andeq	r0, r0, r2
     8ac:	0000000c 	andeq	r0, r0, ip
     8b0:	0000069c 	muleq	r0, ip, r6
     8b4:	08003ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp}
     8b8:	00000002 	andeq	r0, r0, r2
     8bc:	0000000c 	andeq	r0, r0, ip
     8c0:	0000069c 	muleq	r0, ip, r6
     8c4:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
     8c8:	00000002 	andeq	r0, r0, r2
     8cc:	0000000c 	andeq	r0, r0, ip
     8d0:	0000069c 	muleq	r0, ip, r6
     8d4:	08003eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, sp}
     8d8:	00000002 	andeq	r0, r0, r2
     8dc:	0000000c 	andeq	r0, r0, ip
     8e0:	0000069c 	muleq	r0, ip, r6
     8e4:	08003edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp}
     8e8:	00000002 	andeq	r0, r0, r2
     8ec:	0000000c 	andeq	r0, r0, ip
     8f0:	0000069c 	muleq	r0, ip, r6
     8f4:	08003ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp}
     8f8:	00000002 	andeq	r0, r0, r2
     8fc:	0000000c 	andeq	r0, r0, ip
     900:	0000069c 	muleq	r0, ip, r6
     904:	08003ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, ip, sp}
     908:	00000004 	andeq	r0, r0, r4
     90c:	0000000c 	andeq	r0, r0, ip
     910:	0000069c 	muleq	r0, ip, r6
     914:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
     918:	00000002 	andeq	r0, r0, r2
     91c:	0000000c 	andeq	r0, r0, ip
     920:	0000069c 	muleq	r0, ip, r6
     924:	08003ee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, ip, sp}
     928:	00000002 	andeq	r0, r0, r2
     92c:	0000000c 	andeq	r0, r0, ip
     930:	0000069c 	muleq	r0, ip, r6
     934:	08003ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip, sp}
     938:	00000002 	andeq	r0, r0, r2
     93c:	0000000c 	andeq	r0, r0, ip
     940:	0000069c 	muleq	r0, ip, r6
     944:	08003eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, ip, sp}
     948:	00000002 	andeq	r0, r0, r2
     94c:	0000000c 	andeq	r0, r0, ip
     950:	0000069c 	muleq	r0, ip, r6
     954:	08003eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, ip, sp}
     958:	00000002 	andeq	r0, r0, r2
     95c:	0000000c 	andeq	r0, r0, ip
     960:	0000069c 	muleq	r0, ip, r6
     964:	08003eee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, fp, ip, sp}
     968:	00000002 	andeq	r0, r0, r2
     96c:	0000000c 	andeq	r0, r0, ip
     970:	0000069c 	muleq	r0, ip, r6
     974:	08003ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, sp}
     978:	00000002 	andeq	r0, r0, r2
     97c:	0000000c 	andeq	r0, r0, ip
     980:	0000069c 	muleq	r0, ip, r6
     984:	08003ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     988:	00000002 	andeq	r0, r0, r2
     98c:	0000000c 	andeq	r0, r0, ip
     990:	0000069c 	muleq	r0, ip, r6
     994:	08003ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     998:	00000004 	andeq	r0, r0, r4
     99c:	0000000c 	andeq	r0, r0, ip
     9a0:	0000069c 	muleq	r0, ip, r6
     9a4:	08003ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     9a8:	00000002 	andeq	r0, r0, r2
     9ac:	0000000c 	andeq	r0, r0, ip
     9b0:	0000069c 	muleq	r0, ip, r6
     9b4:	08003efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     9b8:	00000002 	andeq	r0, r0, r2
     9bc:	0000000c 	andeq	r0, r0, ip
     9c0:	0000069c 	muleq	r0, ip, r6
     9c4:	08003efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     9c8:	00000002 	andeq	r0, r0, r2
     9cc:	0000000c 	andeq	r0, r0, ip
     9d0:	0000069c 	muleq	r0, ip, r6
     9d4:	08003efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
     9d8:	00000002 	andeq	r0, r0, r2
     9dc:	0000000c 	andeq	r0, r0, ip
     9e0:	0000069c 	muleq	r0, ip, r6
     9e4:	08003f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp}
     9e8:	00000002 	andeq	r0, r0, r2
     9ec:	0000000c 	andeq	r0, r0, ip
     9f0:	0000069c 	muleq	r0, ip, r6
     9f4:	08003f02 	stmdaeq	r0, {r1, r8, r9, sl, fp, ip, sp}
     9f8:	00000002 	andeq	r0, r0, r2
     9fc:	0000000c 	andeq	r0, r0, ip
     a00:	0000069c 	muleq	r0, ip, r6
     a04:	08003f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, sp}
     a08:	00000002 	andeq	r0, r0, r2
     a0c:	0000000c 	andeq	r0, r0, ip
     a10:	0000069c 	muleq	r0, ip, r6
     a14:	08003f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip, sp}
     a18:	00000002 	andeq	r0, r0, r2
     a1c:	0000000c 	andeq	r0, r0, ip
     a20:	0000069c 	muleq	r0, ip, r6
     a24:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
     a28:	00000002 	andeq	r0, r0, r2
     a2c:	0000000c 	andeq	r0, r0, ip
     a30:	0000069c 	muleq	r0, ip, r6
     a34:	08003f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, ip, sp}
     a38:	00000002 	andeq	r0, r0, r2
     a3c:	0000000c 	andeq	r0, r0, ip
     a40:	0000069c 	muleq	r0, ip, r6
     a44:	08003f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, sp}
     a48:	00000002 	andeq	r0, r0, r2
     a4c:	0000000c 	andeq	r0, r0, ip
     a50:	0000069c 	muleq	r0, ip, r6
     a54:	08003f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp, ip, sp}
     a58:	00000002 	andeq	r0, r0, r2
     a5c:	0000000c 	andeq	r0, r0, ip
     a60:	0000069c 	muleq	r0, ip, r6
     a64:	08003f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp}
     a68:	00000002 	andeq	r0, r0, r2
     a6c:	0000000c 	andeq	r0, r0, ip
     a70:	0000069c 	muleq	r0, ip, r6
     a74:	08003f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip, sp}
     a78:	00000002 	andeq	r0, r0, r2
     a7c:	0000000c 	andeq	r0, r0, ip
     a80:	0000069c 	muleq	r0, ip, r6
     a84:	08003f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, sp}
     a88:	00000002 	andeq	r0, r0, r2
     a8c:	0000000c 	andeq	r0, r0, ip
     a90:	0000069c 	muleq	r0, ip, r6
     a94:	08003f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, ip, sp}
     a98:	00000002 	andeq	r0, r0, r2
     a9c:	0000000c 	andeq	r0, r0, ip
     aa0:	0000069c 	muleq	r0, ip, r6
     aa4:	08003f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, sp}
     aa8:	00000002 	andeq	r0, r0, r2
     aac:	0000000c 	andeq	r0, r0, ip
     ab0:	0000069c 	muleq	r0, ip, r6
     ab4:	08003f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, ip, sp}
     ab8:	00000002 	andeq	r0, r0, r2
     abc:	0000000c 	andeq	r0, r0, ip
     ac0:	0000069c 	muleq	r0, ip, r6
     ac4:	08003f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp}
     ac8:	00000002 	andeq	r0, r0, r2
     acc:	0000000c 	andeq	r0, r0, ip
     ad0:	0000069c 	muleq	r0, ip, r6
     ad4:	08003f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip, sp}
     ad8:	00000002 	andeq	r0, r0, r2
     adc:	0000000c 	andeq	r0, r0, ip
     ae0:	0000069c 	muleq	r0, ip, r6
     ae4:	08003f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, sp}
     ae8:	00000002 	andeq	r0, r0, r2
     aec:	0000000c 	andeq	r0, r0, ip
     af0:	0000069c 	muleq	r0, ip, r6
     af4:	08003f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp, ip, sp}
     af8:	00000002 	andeq	r0, r0, r2
     afc:	0000000c 	andeq	r0, r0, ip
     b00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b04:	7c020001 	stcvc	0, cr0, [r2], {1}
     b08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b0c:	00000014 	andeq	r0, r0, r4, lsl r0
     b10:	00000afc 	strdeq	r0, [r0], -ip
     b14:	08003f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp}
     b18:	0000000c 	andeq	r0, r0, ip
     b1c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
     b24:	0000000c 	andeq	r0, r0, ip
     b28:	00000afc 	strdeq	r0, [r0], -ip
     b2c:	08003f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, ip, sp}
     b30:	00000004 	andeq	r0, r0, r4
     b34:	0000000c 	andeq	r0, r0, ip
     b38:	00000afc 	strdeq	r0, [r0], -ip
     b3c:	08003f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip, sp}
     b40:	00000004 	andeq	r0, r0, r4
     b44:	00000018 	andeq	r0, r0, r8, lsl r0
     b48:	00000afc 	strdeq	r0, [r0], -ip
     b4c:	08003f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, ip, sp}
     b50:	0000001e 	andeq	r0, r0, lr, lsl r0
     b54:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     b58:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b60:	0000001c 	andeq	r0, r0, ip, lsl r0
     b64:	00000afc 	strdeq	r0, [r0], -ip
     b68:	08003f56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, ip, sp}
     b6c:	00000024 	andeq	r0, r0, r4, lsr #32
     b70:	83180e41 	tsthi	r8, #1040	; 0x410
     b74:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     b78:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     b7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b80:	0000000c 	andeq	r0, r0, ip
     b84:	00000afc 	strdeq	r0, [r0], -ip
     b88:	08003f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp}
     b8c:	00000008 	andeq	r0, r0, r8
     b90:	0000000c 	andeq	r0, r0, ip
     b94:	00000afc 	strdeq	r0, [r0], -ip
     b98:	08003f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip, sp}
     b9c:	00000004 	andeq	r0, r0, r4
     ba0:	0000000c 	andeq	r0, r0, ip
     ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ba8:	7c020001 	stcvc	0, cr0, [r2], {1}
     bac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bb0:	00000014 	andeq	r0, r0, r4, lsl r0
     bb4:	00000ba0 	andeq	r0, r0, r0, lsr #23
     bb8:	08003f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip, sp}
     bbc:	0000002c 	andeq	r0, r0, ip, lsr #32
     bc0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bc8:	0000000c 	andeq	r0, r0, ip
     bcc:	00000ba0 	andeq	r0, r0, r0, lsr #23
     bd0:	08003fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
     bd4:	00000004 	andeq	r0, r0, r4
     bd8:	00000018 	andeq	r0, r0, r8, lsl r0
     bdc:	00000ba0 	andeq	r0, r0, r0, lsr #23
     be0:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
     be4:	0000009c 	muleq	r0, ip, r0
     be8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     bec:	86038504 	strhi	r8, [r3], -r4, lsl #10
     bf0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	00000ba0 	andeq	r0, r0, r0, lsr #23
     bfc:	08004054 	stmdaeq	r0, {r2, r4, r6, lr}
     c00:	00000150 	andeq	r0, r0, r0, asr r1
     c04:	83180e41 	tsthi	r8, #1040	; 0x410
     c08:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     c0c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	00000014 	andeq	r0, r0, r4, lsl r0
     c18:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c1c:	080041a4 	stmdaeq	r0, {r2, r5, r7, r8, lr}
     c20:	00000020 	andeq	r0, r0, r0, lsr #32
     c24:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	0000000c 	andeq	r0, r0, ip
     c30:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c34:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
     c38:	0000000c 	andeq	r0, r0, ip
     c3c:	0000000c 	andeq	r0, r0, ip
     c40:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c44:	080041d0 	stmdaeq	r0, {r4, r6, r7, r8, lr}
     c48:	0000000c 	andeq	r0, r0, ip
     c4c:	0000000c 	andeq	r0, r0, ip
     c50:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c54:	080041dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, lr}
     c58:	0000000c 	andeq	r0, r0, ip
     c5c:	0000000c 	andeq	r0, r0, ip
     c60:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c64:	080041e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, lr}
     c68:	0000000c 	andeq	r0, r0, ip
     c6c:	0000000c 	andeq	r0, r0, ip
     c70:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c74:	080041f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, lr}
     c78:	0000000c 	andeq	r0, r0, ip
     c7c:	0000000c 	andeq	r0, r0, ip
     c80:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c84:	08004200 	stmdaeq	r0, {r9, lr}
     c88:	00000014 	andeq	r0, r0, r4, lsl r0
     c8c:	0000000c 	andeq	r0, r0, ip
     c90:	00000ba0 	andeq	r0, r0, r0, lsr #23
     c94:	08004214 	stmdaeq	r0, {r2, r4, r9, lr}
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	0000000c 	andeq	r0, r0, ip
     ca0:	00000ba0 	andeq	r0, r0, r0, lsr #23
     ca4:	08004220 	stmdaeq	r0, {r5, r9, lr}
     ca8:	00000010 	andeq	r0, r0, r0, lsl r0
     cac:	0000000c 	andeq	r0, r0, ip
     cb0:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cb4:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
     cb8:	00000008 	andeq	r0, r0, r8
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cc4:	08004238 	stmdaeq	r0, {r3, r4, r5, r9, lr}
     cc8:	00000004 	andeq	r0, r0, r4
     ccc:	0000000c 	andeq	r0, r0, ip
     cd0:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cd4:	0800423c 	stmdaeq	r0, {r2, r3, r4, r5, r9, lr}
     cd8:	00000006 	andeq	r0, r0, r6
     cdc:	0000000c 	andeq	r0, r0, ip
     ce0:	00000ba0 	andeq	r0, r0, r0, lsr #23
     ce4:	08004242 	stmdaeq	r0, {r1, r6, r9, lr}
     ce8:	0000001a 	andeq	r0, r0, sl, lsl r0
     cec:	00000014 	andeq	r0, r0, r4, lsl r0
     cf0:	00000ba0 	andeq	r0, r0, r0, lsr #23
     cf4:	0800425c 	stmdaeq	r0, {r2, r3, r4, r6, r9, lr}
     cf8:	00000028 	andeq	r0, r0, r8, lsr #32
     cfc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d00:	00018e02 	andeq	r8, r1, r2, lsl #28
     d04:	00000018 	andeq	r0, r0, r8, lsl r0
     d08:	00000ba0 	andeq	r0, r0, r0, lsr #23
     d0c:	08004284 	stmdaeq	r0, {r2, r7, r9, lr}
     d10:	00000024 	andeq	r0, r0, r4, lsr #32
     d14:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     d18:	4c018e02 	stcmi	14, cr8, [r1], {2}
     d1c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     d20:	00000014 	andeq	r0, r0, r4, lsl r0
     d24:	00000ba0 	andeq	r0, r0, r0, lsr #23
     d28:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
     d2c:	00000030 	andeq	r0, r0, r0, lsr r0
     d30:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	00000018 	andeq	r0, r0, r8, lsl r0
     d3c:	00000ba0 	andeq	r0, r0, r0, lsr #23
     d40:	080042d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, lr}
     d44:	0000002c 	andeq	r0, r0, ip, lsr #32
     d48:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     d4c:	4f018e02 	svcmi	0x00018e02
     d50:	000ec4ce 	andeq	ip, lr, lr, asr #9
     d54:	0000000c 	andeq	r0, r0, ip
     d58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d5c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d60:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d64:	0000000c 	andeq	r0, r0, ip
     d68:	00000d54 	andeq	r0, r0, r4, asr sp
     d6c:	08004304 	stmdaeq	r0, {r2, r8, r9, lr}
     d70:	00000018 	andeq	r0, r0, r8, lsl r0
     d74:	0000000c 	andeq	r0, r0, ip
     d78:	00000d54 	andeq	r0, r0, r4, asr sp
     d7c:	0800431c 	stmdaeq	r0, {r2, r3, r4, r8, r9, lr}
     d80:	00000018 	andeq	r0, r0, r8, lsl r0
     d84:	0000000c 	andeq	r0, r0, ip
     d88:	00000d54 	andeq	r0, r0, r4, asr sp
     d8c:	08004334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr}
     d90:	00000018 	andeq	r0, r0, r8, lsl r0
     d94:	0000000c 	andeq	r0, r0, ip
     d98:	00000d54 	andeq	r0, r0, r4, asr sp
     d9c:	0800434c 	stmdaeq	r0, {r2, r3, r6, r8, r9, lr}
     da0:	00000018 	andeq	r0, r0, r8, lsl r0
     da4:	0000000c 	andeq	r0, r0, ip
     da8:	00000d54 	andeq	r0, r0, r4, asr sp
     dac:	08004364 	stmdaeq	r0, {r2, r5, r6, r8, r9, lr}
     db0:	00000010 	andeq	r0, r0, r0, lsl r0
     db4:	0000000c 	andeq	r0, r0, ip
     db8:	00000d54 	andeq	r0, r0, r4, asr sp
     dbc:	08004374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr}
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	0000000c 	andeq	r0, r0, ip
     dc8:	00000d54 	andeq	r0, r0, r4, asr sp
     dcc:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
     dd0:	0000000c 	andeq	r0, r0, ip
     dd4:	0000000c 	andeq	r0, r0, ip
     dd8:	00000d54 	andeq	r0, r0, r4, asr sp
     ddc:	0800438c 	stmdaeq	r0, {r2, r3, r7, r8, r9, lr}
     de0:	00000010 	andeq	r0, r0, r0, lsl r0
     de4:	0000000c 	andeq	r0, r0, ip
     de8:	00000d54 	andeq	r0, r0, r4, asr sp
     dec:	0800439c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, lr}
     df0:	00000010 	andeq	r0, r0, r0, lsl r0
     df4:	0000000c 	andeq	r0, r0, ip
     df8:	00000d54 	andeq	r0, r0, r4, asr sp
     dfc:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
     e00:	00000018 	andeq	r0, r0, r8, lsl r0
     e04:	0000000c 	andeq	r0, r0, ip
     e08:	00000d54 	andeq	r0, r0, r4, asr sp
     e0c:	080043c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, lr}
     e10:	00000020 	andeq	r0, r0, r0, lsr #32
     e14:	0000000c 	andeq	r0, r0, ip
     e18:	00000d54 	andeq	r0, r0, r4, asr sp
     e1c:	080043e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, lr}
     e20:	0000000c 	andeq	r0, r0, ip
     e24:	0000000c 	andeq	r0, r0, ip
     e28:	00000d54 	andeq	r0, r0, r4, asr sp
     e2c:	080043f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, lr}
     e30:	00000028 	andeq	r0, r0, r8, lsr #32
     e34:	00000018 	andeq	r0, r0, r8, lsl r0
     e38:	00000d54 	andeq	r0, r0, r4, asr sp
     e3c:	08004418 	stmdaeq	r0, {r3, r4, sl, lr}
     e40:	00000036 	andeq	r0, r0, r6, lsr r0
     e44:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     e48:	59018e02 	stmdbpl	r1, {r1, r9, sl, fp, pc}
     e4c:	0000080e 	andeq	r0, r0, lr, lsl #16
     e50:	00000018 	andeq	r0, r0, r8, lsl r0
     e54:	00000d54 	andeq	r0, r0, r4, asr sp
     e58:	0800444e 	stmdaeq	r0, {r1, r2, r3, r6, sl, lr}
     e5c:	00000042 	andeq	r0, r0, r2, asr #32
     e60:	83100e41 	tsthi	r0, #1040	; 0x410
     e64:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     e68:	00018e02 	andeq	r8, r1, r2, lsl #28
     e6c:	00000014 	andeq	r0, r0, r4, lsl r0
     e70:	00000d54 	andeq	r0, r0, r4, asr sp
     e74:	08004490 	stmdaeq	r0, {r4, r7, sl, lr}
     e78:	0000003c 	andeq	r0, r0, ip, lsr r0
     e7c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e80:	00018e02 	andeq	r8, r1, r2, lsl #28
     e84:	00000014 	andeq	r0, r0, r4, lsl r0
     e88:	00000d54 	andeq	r0, r0, r4, asr sp
     e8c:	080044cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, lr}
     e90:	00000070 	andeq	r0, r0, r0, ror r0
     e94:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e98:	00018e02 	andeq	r8, r1, r2, lsl #28
     e9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ea0:	00000d54 	andeq	r0, r0, r4, asr sp
     ea4:	0800453c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, lr}
     ea8:	00000048 	andeq	r0, r0, r8, asr #32
     eac:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     eb0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     eb4:	00018e02 	andeq	r8, r1, r2, lsl #28
     eb8:	00000018 	andeq	r0, r0, r8, lsl r0
     ebc:	00000d54 	andeq	r0, r0, r4, asr sp
     ec0:	08004584 	stmdaeq	r0, {r2, r7, r8, sl, lr}
     ec4:	00000038 	andeq	r0, r0, r8, lsr r0
     ec8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     ecc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ed0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ed4:	00000018 	andeq	r0, r0, r8, lsl r0
     ed8:	00000d54 	andeq	r0, r0, r4, asr sp
     edc:	080045bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, lr}
     ee0:	00000048 	andeq	r0, r0, r8, asr #32
     ee4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     ee8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     eec:	00018e02 	andeq	r8, r1, r2, lsl #28
     ef0:	00000014 	andeq	r0, r0, r4, lsl r0
     ef4:	00000d54 	andeq	r0, r0, r4, asr sp
     ef8:	08004604 	stmdaeq	r0, {r2, r9, sl, lr}
     efc:	000000a0 	andeq	r0, r0, r0, lsr #1
     f00:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     f04:	00018e02 	andeq	r8, r1, r2, lsl #28
     f08:	00000018 	andeq	r0, r0, r8, lsl r0
     f0c:	00000d54 	andeq	r0, r0, r4, asr sp
     f10:	080046a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, lr}
     f14:	0000008c 	andeq	r0, r0, ip, lsl #1
     f18:	83100e41 	tsthi	r0, #1040	; 0x410
     f1c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     f20:	00018e02 	andeq	r8, r1, r2, lsl #28
     f24:	0000001c 	andeq	r0, r0, ip, lsl r0
     f28:	00000d54 	andeq	r0, r0, r4, asr sp
     f2c:	08004730 	stmdaeq	r0, {r4, r5, r8, r9, sl, lr}
     f30:	00000054 	andeq	r0, r0, r4, asr r0
     f34:	83180e41 	tsthi	r8, #1040	; 0x410
     f38:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     f3c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     f40:	00018e02 	andeq	r8, r1, r2, lsl #28
     f44:	0000000c 	andeq	r0, r0, ip
     f48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f4c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f54:	0000001c 	andeq	r0, r0, ip, lsl r0
     f58:	00000f44 	andeq	r0, r0, r4, asr #30
     f5c:	08004784 	stmdaeq	r0, {r2, r7, r8, r9, sl, lr}
     f60:	000000a4 	andeq	r0, r0, r4, lsr #1
     f64:	83080e41 	movwhi	r0, #36417	; 0x8e41
     f68:	02018e02 	andeq	r8, r1, #2, 28
     f6c:	c3ce0a49 	bicgt	r0, lr, #299008	; 0x49000
     f70:	0b42000e 	bleq	1080fb0 <__Stack_Size+0x1080bb0>
     f74:	00000018 	andeq	r0, r0, r8, lsl r0
     f78:	00000f44 	andeq	r0, r0, r4, asr #30
     f7c:	08004828 	stmdaeq	r0, {r3, r5, fp, lr}
     f80:	00000016 	andeq	r0, r0, r6, lsl r0
     f84:	83080e41 	movwhi	r0, #36417	; 0x8e41
     f88:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     f8c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     f90:	0000001c 	andeq	r0, r0, ip, lsl r0
     f94:	00000f44 	andeq	r0, r0, r4, asr #30
     f98:	0800483e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, lr}
     f9c:	0000009c 	muleq	r0, ip, r0
     fa0:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
     fa4:	86048505 	strhi	r8, [r4], -r5, lsl #10
     fa8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     fac:	00000001 	andeq	r0, r0, r1
     fb0:	0000000c 	andeq	r0, r0, ip
     fb4:	00000f44 	andeq	r0, r0, r4, asr #30
     fb8:	080048da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, lr}
     fbc:	00000010 	andeq	r0, r0, r0, lsl r0
     fc0:	0000000c 	andeq	r0, r0, ip
     fc4:	00000f44 	andeq	r0, r0, r4, asr #30
     fc8:	080048ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, lr}
     fcc:	0000000c 	andeq	r0, r0, ip
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	00000f44 	andeq	r0, r0, r4, asr #30
     fd8:	080048f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, lr}
     fdc:	00000006 	andeq	r0, r0, r6
     fe0:	0000000c 	andeq	r0, r0, ip
     fe4:	00000f44 	andeq	r0, r0, r4, asr #30
     fe8:	080048fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, lr}
     fec:	0000000c 	andeq	r0, r0, ip
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	00000f44 	andeq	r0, r0, r4, asr #30
     ff8:	08004908 	stmdaeq	r0, {r3, r8, fp, lr}
     ffc:	00000006 	andeq	r0, r0, r6
    1000:	0000000c 	andeq	r0, r0, ip
    1004:	00000f44 	andeq	r0, r0, r4, asr #30
    1008:	0800490e 	stmdaeq	r0, {r1, r2, r3, r8, fp, lr}
    100c:	00000004 	andeq	r0, r0, r4
    1010:	0000000c 	andeq	r0, r0, ip
    1014:	00000f44 	andeq	r0, r0, r4, asr #30
    1018:	08004912 	stmdaeq	r0, {r1, r4, r8, fp, lr}
    101c:	00000004 	andeq	r0, r0, r4
    1020:	0000000c 	andeq	r0, r0, ip
    1024:	00000f44 	andeq	r0, r0, r4, asr #30
    1028:	08004916 	stmdaeq	r0, {r1, r2, r4, r8, fp, lr}
    102c:	0000000a 	andeq	r0, r0, sl
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000f44 	andeq	r0, r0, r4, asr #30
    1038:	08004920 	stmdaeq	r0, {r5, r8, fp, lr}
    103c:	00000004 	andeq	r0, r0, r4
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000f44 	andeq	r0, r0, r4, asr #30
    1048:	08004924 	stmdaeq	r0, {r2, r5, r8, fp, lr}
    104c:	00000010 	andeq	r0, r0, r0, lsl r0
    1050:	0000000c 	andeq	r0, r0, ip
    1054:	00000f44 	andeq	r0, r0, r4, asr #30
    1058:	08004934 	stmdaeq	r0, {r2, r4, r5, r8, fp, lr}
    105c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	00000f44 	andeq	r0, r0, r4, asr #30
    1068:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    106c:	0000000c 	andeq	r0, r0, ip
    1070:	00000018 	andeq	r0, r0, r8, lsl r0
    1074:	00000f44 	andeq	r0, r0, r4, asr #30
    1078:	0800495c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, lr}
    107c:	00000054 	andeq	r0, r0, r4, asr r0
    1080:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1084:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1088:	00000001 	andeq	r0, r0, r1
    108c:	00000014 	andeq	r0, r0, r4, lsl r0
    1090:	00000f44 	andeq	r0, r0, r4, asr #30
    1094:	080049b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, lr}
    1098:	0000002a 	andeq	r0, r0, sl, lsr #32
    109c:	84080e49 	strhi	r0, [r8], #-3657	; 0xe49
    10a0:	00018e02 	andeq	r8, r1, r2, lsl #28
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    10b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	000010a4 	andeq	r1, r0, r4, lsr #1
    10bc:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    10c0:	00000034 	andeq	r0, r0, r4, lsr r0
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	000010a4 	andeq	r1, r0, r4, lsr #1
    10cc:	08004a10 	stmdaeq	r0, {r4, r9, fp, lr}
    10d0:	00000030 	andeq	r0, r0, r0, lsr r0
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	000010a4 	andeq	r1, r0, r4, lsr #1
    10dc:	08004a40 	stmdaeq	r0, {r6, r9, fp, lr}
    10e0:	00000014 	andeq	r0, r0, r4, lsl r0
    10e4:	00000018 	andeq	r0, r0, r8, lsl r0
    10e8:	000010a4 	andeq	r1, r0, r4, lsr #1
    10ec:	08004a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, lr}
    10f0:	00000084 	andeq	r0, r0, r4, lsl #1
    10f4:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    10f8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    10fc:	00000001 	andeq	r0, r0, r1
    1100:	0000000c 	andeq	r0, r0, ip
    1104:	000010a4 	andeq	r1, r0, r4, lsr #1
    1108:	08004ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, lr}
    110c:	0000000c 	andeq	r0, r0, ip
    1110:	0000000c 	andeq	r0, r0, ip
    1114:	000010a4 	andeq	r1, r0, r4, lsr #1
    1118:	08004ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, lr}
    111c:	00000004 	andeq	r0, r0, r4
    1120:	0000000c 	andeq	r0, r0, ip
    1124:	000010a4 	andeq	r1, r0, r4, lsr #1
    1128:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
    112c:	00000004 	andeq	r0, r0, r4
    1130:	0000000c 	andeq	r0, r0, ip
    1134:	000010a4 	andeq	r1, r0, r4, lsr #1
    1138:	08004aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, lr}
    113c:	00000004 	andeq	r0, r0, r4
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	000010a4 	andeq	r1, r0, r4, lsr #1
    1148:	08004af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, lr}
    114c:	00000004 	andeq	r0, r0, r4
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	000010a4 	andeq	r1, r0, r4, lsr #1
    1158:	08004af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, lr}
    115c:	00000006 	andeq	r0, r0, r6
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	000010a4 	andeq	r1, r0, r4, lsr #1
    1168:	08004afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, lr}
    116c:	00000004 	andeq	r0, r0, r4
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	000010a4 	andeq	r1, r0, r4, lsr #1
    1178:	08004afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, lr}
    117c:	0000000e 	andeq	r0, r0, lr
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	000010a4 	andeq	r1, r0, r4, lsr #1
    1188:	08004b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, lr}
    118c:	00000020 	andeq	r0, r0, r0, lsr #32
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	000010a4 	andeq	r1, r0, r4, lsr #1
    1198:	08004b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, lr}
    119c:	0000000c 	andeq	r0, r0, ip
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	000010a4 	andeq	r1, r0, r4, lsr #1
    11a8:	08004b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, lr}
    11ac:	00000018 	andeq	r0, r0, r8, lsl r0
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	000010a4 	andeq	r1, r0, r4, lsr #1
    11b8:	08004b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, lr}
    11bc:	00000010 	andeq	r0, r0, r0, lsl r0
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	000010a4 	andeq	r1, r0, r4, lsr #1
    11c8:	08004b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, lr}
    11cc:	00000020 	andeq	r0, r0, r0, lsr #32
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	000010a4 	andeq	r1, r0, r4, lsr #1
    11d8:	08004b80 	stmdaeq	r0, {r7, r8, r9, fp, lr}
    11dc:	0000000c 	andeq	r0, r0, ip
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	000010a4 	andeq	r1, r0, r4, lsr #1
    11e8:	08004b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, lr}
    11ec:	00000014 	andeq	r0, r0, r4, lsl r0
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	000010a4 	andeq	r1, r0, r4, lsr #1
    11f8:	08004ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, lr}
    11fc:	00000010 	andeq	r0, r0, r0, lsl r0
    1200:	0000000c 	andeq	r0, r0, ip
    1204:	000010a4 	andeq	r1, r0, r4, lsr #1
    1208:	08004bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, lr}
    120c:	00000010 	andeq	r0, r0, r0, lsl r0
    1210:	0000000c 	andeq	r0, r0, ip
    1214:	000010a4 	andeq	r1, r0, r4, lsr #1
    1218:	08004bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, lr}
    121c:	00000018 	andeq	r0, r0, r8, lsl r0
    1220:	0000000c 	andeq	r0, r0, ip
    1224:	000010a4 	andeq	r1, r0, r4, lsr #1
    1228:	08004bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, lr}
    122c:	00000020 	andeq	r0, r0, r0, lsr #32
    1230:	00000014 	andeq	r0, r0, r4, lsl r0
    1234:	000010a4 	andeq	r1, r0, r4, lsr #1
    1238:	08004bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, lr}
    123c:	0000004c 	andeq	r0, r0, ip, asr #32
    1240:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1244:	00018e02 	andeq	r8, r1, r2, lsl #28
    1248:	0000000c 	andeq	r0, r0, ip
    124c:	000010a4 	andeq	r1, r0, r4, lsr #1
    1250:	08004c44 	stmdaeq	r0, {r2, r6, sl, fp, lr}
    1254:	0000001c 	andeq	r0, r0, ip, lsl r0
    1258:	0000000c 	andeq	r0, r0, ip
    125c:	000010a4 	andeq	r1, r0, r4, lsr #1
    1260:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
    1264:	00000018 	andeq	r0, r0, r8, lsl r0
    1268:	0000000c 	andeq	r0, r0, ip
    126c:	000010a4 	andeq	r1, r0, r4, lsr #1
    1270:	08004c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, lr}
    1274:	00000018 	andeq	r0, r0, r8, lsl r0
    1278:	0000000c 	andeq	r0, r0, ip
    127c:	000010a4 	andeq	r1, r0, r4, lsr #1
    1280:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    1284:	0000001c 	andeq	r0, r0, ip, lsl r0
    1288:	0000000c 	andeq	r0, r0, ip
    128c:	000010a4 	andeq	r1, r0, r4, lsr #1
    1290:	08004cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, lr}
    1294:	00000030 	andeq	r0, r0, r0, lsr r0
    1298:	0000000c 	andeq	r0, r0, ip
    129c:	000010a4 	andeq	r1, r0, r4, lsr #1
    12a0:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    12a4:	00000014 	andeq	r0, r0, r4, lsl r0
    12a8:	0000000c 	andeq	r0, r0, ip
    12ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    12b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	000012a8 	andeq	r1, r0, r8, lsr #5
    12c0:	08004cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, lr}
    12c4:	0000001a 	andeq	r0, r0, sl, lsl r0
    12c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
    12cc:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
    12d0:	000ec3ce 	andeq	ip, lr, lr, asr #7
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	000012a8 	andeq	r1, r0, r8, lsr #5
    12dc:	08004d0a 	stmdaeq	r0, {r1, r3, r8, sl, fp, lr}
    12e0:	0000000a 	andeq	r0, r0, sl
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	000012a8 	andeq	r1, r0, r8, lsr #5
    12ec:	08004d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, lr}
    12f0:	0000000c 	andeq	r0, r0, ip
    12f4:	0000000c 	andeq	r0, r0, ip
    12f8:	000012a8 	andeq	r1, r0, r8, lsr #5
    12fc:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    1300:	00000014 	andeq	r0, r0, r4, lsl r0
    1304:	0000000c 	andeq	r0, r0, ip
    1308:	000012a8 	andeq	r1, r0, r8, lsr #5
    130c:	08004d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp, lr}
    1310:	0000000c 	andeq	r0, r0, ip
    1314:	0000000c 	andeq	r0, r0, ip
    1318:	000012a8 	andeq	r1, r0, r8, lsr #5
    131c:	08004d40 	stmdaeq	r0, {r6, r8, sl, fp, lr}
    1320:	0000002c 	andeq	r0, r0, ip, lsr #32
    1324:	0000000c 	andeq	r0, r0, ip
    1328:	000012a8 	andeq	r1, r0, r8, lsr #5
    132c:	08004d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, lr}
    1330:	00000028 	andeq	r0, r0, r8, lsr #32
    1334:	0000000c 	andeq	r0, r0, ip
    1338:	000012a8 	andeq	r1, r0, r8, lsr #5
    133c:	08004d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, lr}
    1340:	00000014 	andeq	r0, r0, r4, lsl r0
    1344:	0000000c 	andeq	r0, r0, ip
    1348:	000012a8 	andeq	r1, r0, r8, lsr #5
    134c:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    1350:	00000010 	andeq	r0, r0, r0, lsl r0
    1354:	0000000c 	andeq	r0, r0, ip
    1358:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    135c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1360:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1364:	0000000c 	andeq	r0, r0, ip
    1368:	00001354 	andeq	r1, r0, r4, asr r3
    136c:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    1370:	0000003c 	andeq	r0, r0, ip, lsr r0
    1374:	0000000c 	andeq	r0, r0, ip
    1378:	00001354 	andeq	r1, r0, r4, asr r3
    137c:	08004df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, lr}
    1380:	00000038 	andeq	r0, r0, r8, lsr r0
    1384:	0000000c 	andeq	r0, r0, ip
    1388:	00001354 	andeq	r1, r0, r4, asr r3
    138c:	08004e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, lr}
    1390:	00000014 	andeq	r0, r0, r4, lsl r0
    1394:	0000000c 	andeq	r0, r0, ip
    1398:	00001354 	andeq	r1, r0, r4, asr r3
    139c:	08004e40 	stmdaeq	r0, {r6, r9, sl, fp, lr}
    13a0:	0000000c 	andeq	r0, r0, ip
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	00001354 	andeq	r1, r0, r4, asr r3
    13ac:	08004e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, lr}
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
    13b4:	0000000c 	andeq	r0, r0, ip
    13b8:	00001354 	andeq	r1, r0, r4, asr r3
    13bc:	08004e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, lr}
    13c0:	0000000c 	andeq	r0, r0, ip
    13c4:	0000000c 	andeq	r0, r0, ip
    13c8:	00001354 	andeq	r1, r0, r4, asr r3
    13cc:	08004e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, lr}
    13d0:	00000014 	andeq	r0, r0, r4, lsl r0
    13d4:	0000000c 	andeq	r0, r0, ip
    13d8:	00001354 	andeq	r1, r0, r4, asr r3
    13dc:	08004e80 	stmdaeq	r0, {r7, r9, sl, fp, lr}
    13e0:	00000010 	andeq	r0, r0, r0, lsl r0
    13e4:	0000000c 	andeq	r0, r0, ip
    13e8:	00001354 	andeq	r1, r0, r4, asr r3
    13ec:	08004e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, lr}
    13f0:	00000014 	andeq	r0, r0, r4, lsl r0
    13f4:	0000000c 	andeq	r0, r0, ip
    13f8:	00001354 	andeq	r1, r0, r4, asr r3
    13fc:	08004ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, lr}
    1400:	00000014 	andeq	r0, r0, r4, lsl r0
    1404:	0000000c 	andeq	r0, r0, ip
    1408:	00001354 	andeq	r1, r0, r4, asr r3
    140c:	08004eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, lr}
    1410:	00000014 	andeq	r0, r0, r4, lsl r0
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	00001354 	andeq	r1, r0, r4, asr r3
    141c:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    1420:	00000018 	andeq	r0, r0, r8, lsl r0
    1424:	0000000c 	andeq	r0, r0, ip
    1428:	00001354 	andeq	r1, r0, r4, asr r3
    142c:	08004ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, lr}
    1430:	0000000c 	andeq	r0, r0, ip
    1434:	0000000c 	andeq	r0, r0, ip
    1438:	00001354 	andeq	r1, r0, r4, asr r3
    143c:	08004ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, lr}
    1440:	00000014 	andeq	r0, r0, r4, lsl r0
    1444:	0000000c 	andeq	r0, r0, ip
    1448:	00001354 	andeq	r1, r0, r4, asr r3
    144c:	08004f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, lr}
    1450:	00000020 	andeq	r0, r0, r0, lsr #32
    1454:	0000000c 	andeq	r0, r0, ip
    1458:	00001354 	andeq	r1, r0, r4, asr r3
    145c:	08004f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, lr}
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	0000000c 	andeq	r0, r0, ip
    1468:	00001354 	andeq	r1, r0, r4, asr r3
    146c:	08004f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, lr}
    1470:	00000010 	andeq	r0, r0, r0, lsl r0
    1474:	0000000c 	andeq	r0, r0, ip
    1478:	00001354 	andeq	r1, r0, r4, asr r3
    147c:	08004f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, lr}
    1480:	0000000c 	andeq	r0, r0, ip
    1484:	00000014 	andeq	r0, r0, r4, lsl r0
    1488:	00001354 	andeq	r1, r0, r4, asr r3
    148c:	08004f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, lr}
    1490:	00000084 	andeq	r0, r0, r4, lsl #1
    1494:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1498:	00018e02 	andeq	r8, r1, r2, lsl #28
    149c:	0000000c 	andeq	r0, r0, ip
    14a0:	00001354 	andeq	r1, r0, r4, asr r3
    14a4:	08004fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, lr}
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	0000000c 	andeq	r0, r0, ip
    14b0:	00001354 	andeq	r1, r0, r4, asr r3
    14b4:	08004fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, lr}
    14b8:	00000018 	andeq	r0, r0, r8, lsl r0
    14bc:	0000000c 	andeq	r0, r0, ip
    14c0:	00001354 	andeq	r1, r0, r4, asr r3
    14c4:	08005000 	stmdaeq	r0, {ip, lr}
    14c8:	00000018 	andeq	r0, r0, r8, lsl r0
    14cc:	0000000c 	andeq	r0, r0, ip
    14d0:	00001354 	andeq	r1, r0, r4, asr r3
    14d4:	08005018 	stmdaeq	r0, {r3, r4, ip, lr}
    14d8:	00000018 	andeq	r0, r0, r8, lsl r0
    14dc:	0000000c 	andeq	r0, r0, ip
    14e0:	00001354 	andeq	r1, r0, r4, asr r3
    14e4:	08005030 	stmdaeq	r0, {r4, r5, ip, lr}
    14e8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ec:	0000000c 	andeq	r0, r0, ip
    14f0:	00001354 	andeq	r1, r0, r4, asr r3
    14f4:	08005048 	stmdaeq	r0, {r3, r6, ip, lr}
    14f8:	0000000c 	andeq	r0, r0, ip
    14fc:	0000000c 	andeq	r0, r0, ip
    1500:	00001354 	andeq	r1, r0, r4, asr r3
    1504:	08005054 	stmdaeq	r0, {r2, r4, r6, ip, lr}
    1508:	0000000c 	andeq	r0, r0, ip
    150c:	0000000c 	andeq	r0, r0, ip
    1510:	00001354 	andeq	r1, r0, r4, asr r3
    1514:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    1518:	0000000c 	andeq	r0, r0, ip
    151c:	0000000c 	andeq	r0, r0, ip
    1520:	00001354 	andeq	r1, r0, r4, asr r3
    1524:	0800506c 	stmdaeq	r0, {r2, r3, r5, r6, ip, lr}
    1528:	00000028 	andeq	r0, r0, r8, lsr #32
    152c:	00000014 	andeq	r0, r0, r4, lsl r0
    1530:	00001354 	andeq	r1, r0, r4, asr r3
    1534:	08005094 	stmdaeq	r0, {r2, r4, r7, ip, lr}
    1538:	0000002e 	andeq	r0, r0, lr, lsr #32
    153c:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    1540:	040e5401 	streq	r5, [lr], #-1025	; 0x401
    1544:	0000000c 	andeq	r0, r0, ip
    1548:	00001354 	andeq	r1, r0, r4, asr r3
    154c:	080050c2 	stmdaeq	r0, {r1, r6, r7, ip, lr}
    1550:	00000012 	andeq	r0, r0, r2, lsl r0
    1554:	0000000c 	andeq	r0, r0, ip
    1558:	00001354 	andeq	r1, r0, r4, asr r3
    155c:	080050d4 	stmdaeq	r0, {r2, r4, r6, r7, ip, lr}
    1560:	00000014 	andeq	r0, r0, r4, lsl r0
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	00001354 	andeq	r1, r0, r4, asr r3
    156c:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
    1570:	0000000c 	andeq	r0, r0, ip
    1574:	0000000c 	andeq	r0, r0, ip
    1578:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    157c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1580:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1584:	0000000c 	andeq	r0, r0, ip
    1588:	00001574 	andeq	r1, r0, r4, ror r5
    158c:	080050f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip, lr}
    1590:	00000018 	andeq	r0, r0, r8, lsl r0
    1594:	0000000c 	andeq	r0, r0, ip
    1598:	00001574 	andeq	r1, r0, r4, ror r5
    159c:	0800510c 	stmdaeq	r0, {r2, r3, r8, ip, lr}
    15a0:	0000000c 	andeq	r0, r0, ip
    15a4:	0000000c 	andeq	r0, r0, ip
    15a8:	00001574 	andeq	r1, r0, r4, ror r5
    15ac:	08005118 	stmdaeq	r0, {r3, r4, r8, ip, lr}
    15b0:	00000028 	andeq	r0, r0, r8, lsr #32
    15b4:	0000000c 	andeq	r0, r0, ip
    15b8:	00001574 	andeq	r1, r0, r4, ror r5
    15bc:	08005140 	stmdaeq	r0, {r6, r8, ip, lr}
    15c0:	00000018 	andeq	r0, r0, r8, lsl r0
    15c4:	0000000c 	andeq	r0, r0, ip
    15c8:	00001574 	andeq	r1, r0, r4, ror r5
    15cc:	08005158 	stmdaeq	r0, {r3, r4, r6, r8, ip, lr}
    15d0:	0000000c 	andeq	r0, r0, ip
    15d4:	0000000c 	andeq	r0, r0, ip
    15d8:	00001574 	andeq	r1, r0, r4, ror r5
    15dc:	08005164 	stmdaeq	r0, {r2, r5, r6, r8, ip, lr}
    15e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    15e4:	0000000c 	andeq	r0, r0, ip
    15e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    15f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15f4:	00000018 	andeq	r0, r0, r8, lsl r0
    15f8:	000015e4 	andeq	r1, r0, r4, ror #11
    15fc:	08005180 	stmdaeq	r0, {r7, r8, ip, lr}
    1600:	00000032 	andeq	r0, r0, r2, lsr r0
    1604:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1608:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    160c:	00000001 	andeq	r0, r0, r1
    1610:	00000018 	andeq	r0, r0, r8, lsl r0
    1614:	000015e4 	andeq	r1, r0, r4, ror #11
    1618:	080051b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip, lr}
    161c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1620:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1624:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1628:	00000001 	andeq	r0, r0, r1
    162c:	00000024 	andeq	r0, r0, r4, lsr #32
    1630:	000015e4 	andeq	r1, r0, r4, ror #11
    1634:	080051ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, lr}
    1638:	000000c8 	andeq	r0, r0, r8, asr #1
    163c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1640:	76018e02 	strvc	r8, [r1], -r2, lsl #28
    1644:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1648:	620b4200 	andvs	r4, fp, #0, 4
    164c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1650:	000b4200 	andeq	r4, fp, r0, lsl #4
    1654:	0000000c 	andeq	r0, r0, ip
    1658:	000015e4 	andeq	r1, r0, r4, ror #11
    165c:	080052b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, lr}
    1660:	0000003c 	andeq	r0, r0, ip, lsr r0
    1664:	00000018 	andeq	r0, r0, r8, lsl r0
    1668:	000015e4 	andeq	r1, r0, r4, ror #11
    166c:	080052f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, lr}
    1670:	00000074 	andeq	r0, r0, r4, ror r0
    1674:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1678:	86038504 	strhi	r8, [r3], -r4, lsl #10
    167c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1680:	00000018 	andeq	r0, r0, r8, lsl r0
    1684:	000015e4 	andeq	r1, r0, r4, ror #11
    1688:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    168c:	00000088 	andeq	r0, r0, r8, lsl #1
    1690:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    1694:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1698:	00000001 	andeq	r0, r0, r1
    169c:	00000018 	andeq	r0, r0, r8, lsl r0
    16a0:	000015e4 	andeq	r1, r0, r4, ror #11
    16a4:	080053ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip, lr}
    16a8:	00000084 	andeq	r0, r0, r4, lsl #1
    16ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    16b0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    16b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16b8:	00000018 	andeq	r0, r0, r8, lsl r0
    16bc:	000015e4 	andeq	r1, r0, r4, ror #11
    16c0:	08005470 	stmdaeq	r0, {r4, r5, r6, sl, ip, lr}
    16c4:	00000068 	andeq	r0, r0, r8, rrx
    16c8:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    16cc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    16d0:	00000001 	andeq	r0, r0, r1
    16d4:	0000000c 	andeq	r0, r0, ip
    16d8:	000015e4 	andeq	r1, r0, r4, ror #11
    16dc:	080054d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip, lr}
    16e0:	00000022 	andeq	r0, r0, r2, lsr #32
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	000015e4 	andeq	r1, r0, r4, ror #11
    16ec:	080054fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, ip, lr}
    16f0:	00000012 	andeq	r0, r0, r2, lsl r0
    16f4:	0000000c 	andeq	r0, r0, ip
    16f8:	000015e4 	andeq	r1, r0, r4, ror #11
    16fc:	0800550c 	stmdaeq	r0, {r2, r3, r8, sl, ip, lr}
    1700:	00000014 	andeq	r0, r0, r4, lsl r0
    1704:	0000000c 	andeq	r0, r0, ip
    1708:	000015e4 	andeq	r1, r0, r4, ror #11
    170c:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
    1710:	00000010 	andeq	r0, r0, r0, lsl r0
    1714:	0000000c 	andeq	r0, r0, ip
    1718:	000015e4 	andeq	r1, r0, r4, ror #11
    171c:	08005530 	stmdaeq	r0, {r4, r5, r8, sl, ip, lr}
    1720:	00000012 	andeq	r0, r0, r2, lsl r0
    1724:	0000000c 	andeq	r0, r0, ip
    1728:	000015e4 	andeq	r1, r0, r4, ror #11
    172c:	08005542 	stmdaeq	r0, {r1, r6, r8, sl, ip, lr}
    1730:	00000018 	andeq	r0, r0, r8, lsl r0
    1734:	0000000c 	andeq	r0, r0, ip
    1738:	000015e4 	andeq	r1, r0, r4, ror #11
    173c:	0800555a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip, lr}
    1740:	0000001c 	andeq	r0, r0, ip, lsl r0
    1744:	0000000c 	andeq	r0, r0, ip
    1748:	000015e4 	andeq	r1, r0, r4, ror #11
    174c:	08005576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, lr}
    1750:	00000012 	andeq	r0, r0, r2, lsl r0
    1754:	0000000c 	andeq	r0, r0, ip
    1758:	000015e4 	andeq	r1, r0, r4, ror #11
    175c:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
    1760:	00000004 	andeq	r0, r0, r4
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	000015e4 	andeq	r1, r0, r4, ror #11
    176c:	0800558c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip, lr}
    1770:	00000008 	andeq	r0, r0, r8
    1774:	0000000c 	andeq	r0, r0, ip
    1778:	000015e4 	andeq	r1, r0, r4, ror #11
    177c:	08005594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, lr}
    1780:	00000012 	andeq	r0, r0, r2, lsl r0
    1784:	0000000c 	andeq	r0, r0, ip
    1788:	000015e4 	andeq	r1, r0, r4, ror #11
    178c:	080055a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, ip, lr}
    1790:	0000000e 	andeq	r0, r0, lr
    1794:	0000000c 	andeq	r0, r0, ip
    1798:	000015e4 	andeq	r1, r0, r4, ror #11
    179c:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
    17a0:	0000001a 	andeq	r0, r0, sl, lsl r0
    17a4:	00000018 	andeq	r0, r0, r8, lsl r0
    17a8:	000015e4 	andeq	r1, r0, r4, ror #11
    17ac:	080055ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, ip, lr}
    17b0:	00000034 	andeq	r0, r0, r4, lsr r0
    17b4:	83100e41 	tsthi	r0, #1040	; 0x410
    17b8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    17bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    17c0:	00000014 	andeq	r0, r0, r4, lsl r0
    17c4:	000015e4 	andeq	r1, r0, r4, ror #11
    17c8:	08005602 	stmdaeq	r0, {r1, r9, sl, ip, lr}
    17cc:	00000014 	andeq	r0, r0, r4, lsl r0
    17d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    17d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    17d8:	00000014 	andeq	r0, r0, r4, lsl r0
    17dc:	000015e4 	andeq	r1, r0, r4, ror #11
    17e0:	08005616 	stmdaeq	r0, {r1, r2, r4, r9, sl, ip, lr}
    17e4:	0000001a 	andeq	r0, r0, sl, lsl r0
    17e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    17ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    17f0:	00000014 	andeq	r0, r0, r4, lsl r0
    17f4:	000015e4 	andeq	r1, r0, r4, ror #11
    17f8:	08005630 	stmdaeq	r0, {r4, r5, r9, sl, ip, lr}
    17fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1800:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1804:	00018e02 	andeq	r8, r1, r2, lsl #28
    1808:	0000000c 	andeq	r0, r0, ip
    180c:	000015e4 	andeq	r1, r0, r4, ror #11
    1810:	08005644 	stmdaeq	r0, {r2, r6, r9, sl, ip, lr}
    1814:	00000006 	andeq	r0, r0, r6
    1818:	0000000c 	andeq	r0, r0, ip
    181c:	000015e4 	andeq	r1, r0, r4, ror #11
    1820:	0800564a 	stmdaeq	r0, {r1, r3, r6, r9, sl, ip, lr}
    1824:	00000010 	andeq	r0, r0, r0, lsl r0
    1828:	0000000c 	andeq	r0, r0, ip
    182c:	000015e4 	andeq	r1, r0, r4, ror #11
    1830:	0800565a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, ip, lr}
    1834:	00000010 	andeq	r0, r0, r0, lsl r0
    1838:	00000018 	andeq	r0, r0, r8, lsl r0
    183c:	000015e4 	andeq	r1, r0, r4, ror #11
    1840:	0800566a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, ip, lr}
    1844:	0000003c 	andeq	r0, r0, ip, lsr r0
    1848:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    184c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1850:	00018e02 	andeq	r8, r1, r2, lsl #28
    1854:	0000000c 	andeq	r0, r0, ip
    1858:	000015e4 	andeq	r1, r0, r4, ror #11
    185c:	080056a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, lr}
    1860:	00000010 	andeq	r0, r0, r0, lsl r0
    1864:	0000000c 	andeq	r0, r0, ip
    1868:	000015e4 	andeq	r1, r0, r4, ror #11
    186c:	080056b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, ip, lr}
    1870:	00000014 	andeq	r0, r0, r4, lsl r0
    1874:	0000000c 	andeq	r0, r0, ip
    1878:	000015e4 	andeq	r1, r0, r4, ror #11
    187c:	080056ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip, lr}
    1880:	00000010 	andeq	r0, r0, r0, lsl r0
    1884:	0000000c 	andeq	r0, r0, ip
    1888:	000015e4 	andeq	r1, r0, r4, ror #11
    188c:	080056da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, ip, lr}
    1890:	00000014 	andeq	r0, r0, r4, lsl r0
    1894:	0000000c 	andeq	r0, r0, ip
    1898:	000015e4 	andeq	r1, r0, r4, ror #11
    189c:	080056ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, lr}
    18a0:	00000018 	andeq	r0, r0, r8, lsl r0
    18a4:	0000000c 	andeq	r0, r0, ip
    18a8:	000015e4 	andeq	r1, r0, r4, ror #11
    18ac:	08005706 	stmdaeq	r0, {r1, r2, r8, r9, sl, ip, lr}
    18b0:	00000018 	andeq	r0, r0, r8, lsl r0
    18b4:	0000000c 	andeq	r0, r0, ip
    18b8:	000015e4 	andeq	r1, r0, r4, ror #11
    18bc:	0800571e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, ip, lr}
    18c0:	00000018 	andeq	r0, r0, r8, lsl r0
    18c4:	0000000c 	andeq	r0, r0, ip
    18c8:	000015e4 	andeq	r1, r0, r4, ror #11
    18cc:	08005736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip, lr}
    18d0:	00000018 	andeq	r0, r0, r8, lsl r0
    18d4:	0000000c 	andeq	r0, r0, ip
    18d8:	000015e4 	andeq	r1, r0, r4, ror #11
    18dc:	0800574e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip, lr}
    18e0:	00000010 	andeq	r0, r0, r0, lsl r0
    18e4:	0000000c 	andeq	r0, r0, ip
    18e8:	000015e4 	andeq	r1, r0, r4, ror #11
    18ec:	0800575e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}
    18f0:	00000014 	andeq	r0, r0, r4, lsl r0
    18f4:	0000000c 	andeq	r0, r0, ip
    18f8:	000015e4 	andeq	r1, r0, r4, ror #11
    18fc:	08005772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, ip, lr}
    1900:	00000010 	andeq	r0, r0, r0, lsl r0
    1904:	0000000c 	andeq	r0, r0, ip
    1908:	000015e4 	andeq	r1, r0, r4, ror #11
    190c:	08005782 	stmdaeq	r0, {r1, r7, r8, r9, sl, ip, lr}
    1910:	00000014 	andeq	r0, r0, r4, lsl r0
    1914:	0000000c 	andeq	r0, r0, ip
    1918:	000015e4 	andeq	r1, r0, r4, ror #11
    191c:	08005796 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, ip, lr}
    1920:	00000010 	andeq	r0, r0, r0, lsl r0
    1924:	0000000c 	andeq	r0, r0, ip
    1928:	000015e4 	andeq	r1, r0, r4, ror #11
    192c:	080057a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, ip, lr}
    1930:	00000014 	andeq	r0, r0, r4, lsl r0
    1934:	0000000c 	andeq	r0, r0, ip
    1938:	000015e4 	andeq	r1, r0, r4, ror #11
    193c:	080057ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr}
    1940:	00000010 	andeq	r0, r0, r0, lsl r0
    1944:	0000000c 	andeq	r0, r0, ip
    1948:	000015e4 	andeq	r1, r0, r4, ror #11
    194c:	080057ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip, lr}
    1950:	00000014 	andeq	r0, r0, r4, lsl r0
    1954:	0000000c 	andeq	r0, r0, ip
    1958:	000015e4 	andeq	r1, r0, r4, ror #11
    195c:	080057de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
    1960:	00000010 	andeq	r0, r0, r0, lsl r0
    1964:	0000000c 	andeq	r0, r0, ip
    1968:	000015e4 	andeq	r1, r0, r4, ror #11
    196c:	080057ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, lr}
    1970:	00000010 	andeq	r0, r0, r0, lsl r0
    1974:	0000000c 	andeq	r0, r0, ip
    1978:	000015e4 	andeq	r1, r0, r4, ror #11
    197c:	080057fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, lr}
    1980:	00000010 	andeq	r0, r0, r0, lsl r0
    1984:	0000000c 	andeq	r0, r0, ip
    1988:	000015e4 	andeq	r1, r0, r4, ror #11
    198c:	0800580e 	stmdaeq	r0, {r1, r2, r3, fp, ip, lr}
    1990:	00000010 	andeq	r0, r0, r0, lsl r0
    1994:	0000000c 	andeq	r0, r0, ip
    1998:	000015e4 	andeq	r1, r0, r4, ror #11
    199c:	0800581e 	stmdaeq	r0, {r1, r2, r3, r4, fp, ip, lr}
    19a0:	00000010 	andeq	r0, r0, r0, lsl r0
    19a4:	0000000c 	andeq	r0, r0, ip
    19a8:	000015e4 	andeq	r1, r0, r4, ror #11
    19ac:	0800582e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip, lr}
    19b0:	00000010 	andeq	r0, r0, r0, lsl r0
    19b4:	0000000c 	andeq	r0, r0, ip
    19b8:	000015e4 	andeq	r1, r0, r4, ror #11
    19bc:	0800583e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, ip, lr}
    19c0:	00000014 	andeq	r0, r0, r4, lsl r0
    19c4:	0000000c 	andeq	r0, r0, ip
    19c8:	000015e4 	andeq	r1, r0, r4, ror #11
    19cc:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
    19d0:	00000014 	andeq	r0, r0, r4, lsl r0
    19d4:	0000000c 	andeq	r0, r0, ip
    19d8:	000015e4 	andeq	r1, r0, r4, ror #11
    19dc:	08005866 	stmdaeq	r0, {r1, r2, r5, r6, fp, ip, lr}
    19e0:	00000014 	andeq	r0, r0, r4, lsl r0
    19e4:	0000000c 	andeq	r0, r0, ip
    19e8:	000015e4 	andeq	r1, r0, r4, ror #11
    19ec:	0800587a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, ip, lr}
    19f0:	00000014 	andeq	r0, r0, r4, lsl r0
    19f4:	0000000c 	andeq	r0, r0, ip
    19f8:	000015e4 	andeq	r1, r0, r4, ror #11
    19fc:	0800588e 	stmdaeq	r0, {r1, r2, r3, r7, fp, ip, lr}
    1a00:	00000014 	andeq	r0, r0, r4, lsl r0
    1a04:	00000014 	andeq	r0, r0, r4, lsl r0
    1a08:	000015e4 	andeq	r1, r0, r4, ror #11
    1a0c:	080058a2 	stmdaeq	r0, {r1, r5, r7, fp, ip, lr}
    1a10:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a14:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1a18:	00018e02 	andeq	r8, r1, r2, lsl #28
    1a1c:	00000014 	andeq	r0, r0, r4, lsl r0
    1a20:	000015e4 	andeq	r1, r0, r4, ror #11
    1a24:	080058be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, ip, lr}
    1a28:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a2c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1a30:	00018e02 	andeq	r8, r1, r2, lsl #28
    1a34:	00000014 	andeq	r0, r0, r4, lsl r0
    1a38:	000015e4 	andeq	r1, r0, r4, ror #11
    1a3c:	080058da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp, ip, lr}
    1a40:	00000044 	andeq	r0, r0, r4, asr #32
    1a44:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1a48:	00018e02 	andeq	r8, r1, r2, lsl #28
    1a4c:	0000000c 	andeq	r0, r0, ip
    1a50:	000015e4 	andeq	r1, r0, r4, ror #11
    1a54:	0800591e 	stmdaeq	r0, {r1, r2, r3, r4, r8, fp, ip, lr}
    1a58:	00000018 	andeq	r0, r0, r8, lsl r0
    1a5c:	0000000c 	andeq	r0, r0, ip
    1a60:	000015e4 	andeq	r1, r0, r4, ror #11
    1a64:	08005936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, ip, lr}
    1a68:	00000018 	andeq	r0, r0, r8, lsl r0
    1a6c:	0000000c 	andeq	r0, r0, ip
    1a70:	000015e4 	andeq	r1, r0, r4, ror #11
    1a74:	0800594e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, ip, lr}
    1a78:	00000018 	andeq	r0, r0, r8, lsl r0
    1a7c:	0000000c 	andeq	r0, r0, ip
    1a80:	000015e4 	andeq	r1, r0, r4, ror #11
    1a84:	08005966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, ip, lr}
    1a88:	00000016 	andeq	r0, r0, r6, lsl r0
    1a8c:	0000000c 	andeq	r0, r0, ip
    1a90:	000015e4 	andeq	r1, r0, r4, ror #11
    1a94:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
    1a98:	00000016 	andeq	r0, r0, r6, lsl r0
    1a9c:	0000000c 	andeq	r0, r0, ip
    1aa0:	000015e4 	andeq	r1, r0, r4, ror #11
    1aa4:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
    1aa8:	00000016 	andeq	r0, r0, r6, lsl r0
    1aac:	0000000c 	andeq	r0, r0, ip
    1ab0:	000015e4 	andeq	r1, r0, r4, ror #11
    1ab4:	080059a8 	stmdaeq	r0, {r3, r5, r7, r8, fp, ip, lr}
    1ab8:	00000016 	andeq	r0, r0, r6, lsl r0
    1abc:	0000000c 	andeq	r0, r0, ip
    1ac0:	000015e4 	andeq	r1, r0, r4, ror #11
    1ac4:	080059be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, lr}
    1ac8:	00000004 	andeq	r0, r0, r4
    1acc:	0000000c 	andeq	r0, r0, ip
    1ad0:	000015e4 	andeq	r1, r0, r4, ror #11
    1ad4:	080059c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, ip, lr}
    1ad8:	00000004 	andeq	r0, r0, r4
    1adc:	0000000c 	andeq	r0, r0, ip
    1ae0:	000015e4 	andeq	r1, r0, r4, ror #11
    1ae4:	080059c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, lr}
    1ae8:	00000004 	andeq	r0, r0, r4
    1aec:	0000000c 	andeq	r0, r0, ip
    1af0:	000015e4 	andeq	r1, r0, r4, ror #11
    1af4:	080059ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, ip, lr}
    1af8:	00000004 	andeq	r0, r0, r4
    1afc:	0000000c 	andeq	r0, r0, ip
    1b00:	000015e4 	andeq	r1, r0, r4, ror #11
    1b04:	080059ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, lr}
    1b08:	00000004 	andeq	r0, r0, r4
    1b0c:	0000000c 	andeq	r0, r0, ip
    1b10:	000015e4 	andeq	r1, r0, r4, ror #11
    1b14:	080059d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, lr}
    1b18:	00000006 	andeq	r0, r0, r6
    1b1c:	0000000c 	andeq	r0, r0, ip
    1b20:	000015e4 	andeq	r1, r0, r4, ror #11
    1b24:	080059d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, ip, lr}
    1b28:	00000016 	andeq	r0, r0, r6, lsl r0
    1b2c:	0000000c 	andeq	r0, r0, ip
    1b30:	000015e4 	andeq	r1, r0, r4, ror #11
    1b34:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
    1b38:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b3c:	00000030 	andeq	r0, r0, r0, lsr r0
    1b40:	000015e4 	andeq	r1, r0, r4, ror #11
    1b44:	08005a08 	stmdaeq	r0, {r3, r9, fp, ip, lr}
    1b48:	0000006e 	andeq	r0, r0, lr, rrx
    1b4c:	83180e41 	tsthi	r8, #1040	; 0x410
    1b50:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1b54:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1b58:	62018e02 	andvs	r8, r1, #2, 28
    1b5c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1b60:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1b64:	500b4200 	andpl	r4, fp, r0, lsl #4
    1b68:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1b6c:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1b70:	0000000c 	andeq	r0, r0, ip
    1b74:	000015e4 	andeq	r1, r0, r4, ror #11
    1b78:	08005a76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, fp, ip, lr}
    1b7c:	00000016 	andeq	r0, r0, r6, lsl r0
    1b80:	0000000c 	andeq	r0, r0, ip
    1b84:	000015e4 	andeq	r1, r0, r4, ror #11
    1b88:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    1b8c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1b90:	00000048 	andeq	r0, r0, r8, asr #32
    1b94:	000015e4 	andeq	r1, r0, r4, ror #11
    1b98:	08005aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, lr}
    1b9c:	000000b6 	strheq	r0, [r0], -r6
    1ba0:	83180e41 	tsthi	r8, #1040	; 0x410
    1ba4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1ba8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1bac:	4d018e02 	stcmi	14, cr8, [r1, #-8]
    1bb0:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1bb4:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1bb8:	480b4200 	stmdami	fp, {r9, lr}
    1bbc:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1bc0:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1bc4:	600b4200 	andvs	r4, fp, r0, lsl #4
    1bc8:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1bcc:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1bd0:	5c0b4200 	sfmpl	f4, 4, [fp], {-0}
    1bd4:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    1bd8:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1bdc:	0000000c 	andeq	r0, r0, ip
    1be0:	000015e4 	andeq	r1, r0, r4, ror #11
    1be4:	08005b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, lr}
    1be8:	00000010 	andeq	r0, r0, r0, lsl r0
    1bec:	0000000c 	andeq	r0, r0, ip
    1bf0:	000015e4 	andeq	r1, r0, r4, ror #11
    1bf4:	08005b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, lr}
    1bf8:	00000006 	andeq	r0, r0, r6
    1bfc:	0000000c 	andeq	r0, r0, ip
    1c00:	000015e4 	andeq	r1, r0, r4, ror #11
    1c04:	08005b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, ip, lr}
    1c08:	00000006 	andeq	r0, r0, r6
    1c0c:	0000000c 	andeq	r0, r0, ip
    1c10:	000015e4 	andeq	r1, r0, r4, ror #11
    1c14:	08005b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, lr}
    1c18:	00000006 	andeq	r0, r0, r6
    1c1c:	0000000c 	andeq	r0, r0, ip
    1c20:	000015e4 	andeq	r1, r0, r4, ror #11
    1c24:	08005b7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
    1c28:	00000008 	andeq	r0, r0, r8
    1c2c:	0000000c 	andeq	r0, r0, ip
    1c30:	000015e4 	andeq	r1, r0, r4, ror #11
    1c34:	08005b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, lr}
    1c38:	00000006 	andeq	r0, r0, r6
    1c3c:	0000000c 	andeq	r0, r0, ip
    1c40:	000015e4 	andeq	r1, r0, r4, ror #11
    1c44:	08005b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, lr}
    1c48:	00000006 	andeq	r0, r0, r6
    1c4c:	0000000c 	andeq	r0, r0, ip
    1c50:	000015e4 	andeq	r1, r0, r4, ror #11
    1c54:	08005b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, lr}
    1c58:	0000000c 	andeq	r0, r0, ip
    1c5c:	0000000c 	andeq	r0, r0, ip
    1c60:	000015e4 	andeq	r1, r0, r4, ror #11
    1c64:	08005b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp, ip, lr}
    1c68:	00000008 	andeq	r0, r0, r8
    1c6c:	0000000c 	andeq	r0, r0, ip
    1c70:	000015e4 	andeq	r1, r0, r4, ror #11
    1c74:	08005ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, ip, lr}
    1c78:	00000016 	andeq	r0, r0, r6, lsl r0
    1c7c:	0000000c 	andeq	r0, r0, ip
    1c80:	000015e4 	andeq	r1, r0, r4, ror #11
    1c84:	08005bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, lr}
    1c88:	00000008 	andeq	r0, r0, r8
    1c8c:	0000000c 	andeq	r0, r0, ip
    1c90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1c94:	7c020001 	stcvc	0, cr0, [r2], {1}
    1c98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1c9c:	00000024 	andeq	r0, r0, r4, lsr #32
    1ca0:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1ca4:	08005bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, lr}
    1ca8:	00000094 	muleq	r0, r4, r0
    1cac:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1cb0:	5b018e02 	blpl	654c0 <__Stack_Size+0x650c0>
    1cb4:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1cb8:	620b4500 	andvs	r4, fp, #0, 10
    1cbc:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    1cc0:	000b4200 	andeq	r4, fp, r0, lsl #4
    1cc4:	0000001c 	andeq	r0, r0, ip, lsl r0
    1cc8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1ccc:	08005c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, lr}
    1cd0:	00000088 	andeq	r0, r0, r8, lsl #1
    1cd4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1cd8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1cdc:	280e5d01 	stmdacs	lr, {r0, r8, sl, fp, ip, lr}
    1ce0:	000c0e62 	andeq	r0, ip, r2, ror #28
    1ce4:	0000000c 	andeq	r0, r0, ip
    1ce8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1cec:	08005ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, ip, lr}
    1cf0:	00000016 	andeq	r0, r0, r6, lsl r0
    1cf4:	00000014 	andeq	r0, r0, r4, lsl r0
    1cf8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1cfc:	08005cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp, ip, lr}
    1d00:	00000020 	andeq	r0, r0, r0, lsr #32
    1d04:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1d08:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d0c:	0000000c 	andeq	r0, r0, ip
    1d10:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d14:	08005d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip, lr}
    1d18:	0000000c 	andeq	r0, r0, ip
    1d1c:	0000000c 	andeq	r0, r0, ip
    1d20:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d24:	08005d22 	stmdaeq	r0, {r1, r5, r8, sl, fp, ip, lr}
    1d28:	00000018 	andeq	r0, r0, r8, lsl r0
    1d2c:	00000014 	andeq	r0, r0, r4, lsl r0
    1d30:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d34:	08005d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip, lr}
    1d38:	00000032 	andeq	r0, r0, r2, lsr r0
    1d3c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1d40:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d44:	0000000c 	andeq	r0, r0, ip
    1d48:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d4c:	08005d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, lr}
    1d50:	00000012 	andeq	r0, r0, r2, lsl r0
    1d54:	0000000c 	andeq	r0, r0, ip
    1d58:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d5c:	08005d7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}
    1d60:	00000016 	andeq	r0, r0, r6, lsl r0
    1d64:	0000000c 	andeq	r0, r0, ip
    1d68:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d6c:	08005d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, lr}
    1d70:	00000016 	andeq	r0, r0, r6, lsl r0
    1d74:	0000000c 	andeq	r0, r0, ip
    1d78:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d7c:	08005daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, ip, lr}
    1d80:	00000018 	andeq	r0, r0, r8, lsl r0
    1d84:	0000000c 	andeq	r0, r0, ip
    1d88:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d8c:	08005dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, ip, lr}
    1d90:	00000016 	andeq	r0, r0, r6, lsl r0
    1d94:	0000000c 	andeq	r0, r0, ip
    1d98:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1d9c:	08005dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, lr}
    1da0:	00000018 	andeq	r0, r0, r8, lsl r0
    1da4:	0000000c 	andeq	r0, r0, ip
    1da8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1dac:	08005df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, lr}
    1db0:	00000008 	andeq	r0, r0, r8
    1db4:	0000000c 	andeq	r0, r0, ip
    1db8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1dbc:	08005df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    1dc0:	00000008 	andeq	r0, r0, r8
    1dc4:	0000000c 	andeq	r0, r0, ip
    1dc8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1dcc:	08005e00 	stmdaeq	r0, {r9, sl, fp, ip, lr}
    1dd0:	0000000c 	andeq	r0, r0, ip
    1dd4:	0000000c 	andeq	r0, r0, ip
    1dd8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1ddc:	08005e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, lr}
    1de0:	00000012 	andeq	r0, r0, r2, lsl r0
    1de4:	0000000c 	andeq	r0, r0, ip
    1de8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1dec:	08005e1e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, fp, ip, lr}
    1df0:	00000012 	andeq	r0, r0, r2, lsl r0
    1df4:	0000000c 	andeq	r0, r0, ip
    1df8:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1dfc:	08005e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip, lr}
    1e00:	00000018 	andeq	r0, r0, r8, lsl r0
    1e04:	0000000c 	andeq	r0, r0, ip
    1e08:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e0c:	08005e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, lr}
    1e10:	00000018 	andeq	r0, r0, r8, lsl r0
    1e14:	0000000c 	andeq	r0, r0, ip
    1e18:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e1c:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
    1e20:	00000018 	andeq	r0, r0, r8, lsl r0
    1e24:	0000000c 	andeq	r0, r0, ip
    1e28:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e2c:	08005e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, lr}
    1e30:	00000016 	andeq	r0, r0, r6, lsl r0
    1e34:	0000000c 	andeq	r0, r0, ip
    1e38:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e3c:	08005e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, ip, lr}
    1e40:	00000018 	andeq	r0, r0, r8, lsl r0
    1e44:	0000000c 	andeq	r0, r0, ip
    1e48:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e4c:	08005ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, lr}
    1e50:	0000000c 	andeq	r0, r0, ip
    1e54:	0000000c 	andeq	r0, r0, ip
    1e58:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e5c:	08005eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp, ip, lr}
    1e60:	00000008 	andeq	r0, r0, r8
    1e64:	00000014 	andeq	r0, r0, r4, lsl r0
    1e68:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e6c:	08005eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip, lr}
    1e70:	0000003e 	andeq	r0, r0, lr, lsr r0
    1e74:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1e78:	00018e02 	andeq	r8, r1, r2, lsl #28
    1e7c:	0000000c 	andeq	r0, r0, ip
    1e80:	00001c8c 	andeq	r1, r0, ip, lsl #25
    1e84:	08005ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    1e88:	0000000e 	andeq	r0, r0, lr
    1e8c:	0000000c 	andeq	r0, r0, ip
    1e90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1e94:	7c020001 	stcvc	0, cr0, [r2], {1}
    1e98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1ea0:	00001e8c 	andeq	r1, r0, ip, lsl #29
    1ea4:	08005f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    1ea8:	00000050 	andeq	r0, r0, r0, asr r0
    1eac:	000d0941 	andeq	r0, sp, r1, asr #18
    1eb0:	8d080e44 	stchi	14, cr0, [r8, #-272]	; 0xfffffef0
    1eb4:	56018e02 	strpl	r8, [r1], -r2, lsl #28
    1eb8:	000ec0ce 	andeq	ip, lr, lr, asr #1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0, 10
      14:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
      18:	535f4343 	cmppl	pc, #201326593	; 0xc000001
      1c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
      20:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
      24:	00676966 	rsbeq	r6, r7, r6, ror #18
      28:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
      2c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
      30:	53550065 	cmppl	r5, #101	; 0x65
      34:	5f545241 	svcpl	0x00545241
      38:	00646d43 	rsbeq	r6, r4, r3, asr #26
      3c:	5f434352 	svcpl	0x00434352
      40:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
      44:	47007469 	strmi	r7, [r0, -r9, ror #8]
      48:	5f4f4950 	svcpl	0x004f4950
      4c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
      50:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
      54:	63007469 	movwvs	r7, #1129	; 0x469
      58:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
      5c:	6d754c72 	ldclvs	12, cr4, [r5, #-456]!	; 0xfffffe38
      60:	736f6e69 	cmnvc	pc, #1680	; 0x690
      64:	00797469 	rsbseq	r7, r9, r9, ror #8
      68:	5f4d4954 	svcpl	0x004d4954
      6c:	73657250 	cmnvc	r5, #80, 4
      70:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
      74:	53420072 	movtpl	r0, #8306	; 0x2072
      78:	74005252 	strvc	r5, [r0], #-594	; 0x252
      7c:	5f6e7275 	svcpl	0x006e7275
      80:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
      84:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
      88:	75427261 	strbvc	r7, [r2, #-609]	; 0x261
      8c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      90:	00363532 	eorseq	r3, r6, r2, lsr r5
      94:	5f4d4954 	svcpl	0x004d4954
      98:	6e49434f 	cdpvs	3, 4, cr4, cr9, cr15, {2}
      9c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
      a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
      a4:	62670066 	rsbvs	r0, r7, #102	; 0x66
      a8:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
      ac:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      b0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
      b4:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
      b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      c0:	6f4d5f4f 	svcvs	0x004d5f4f
      c4:	54006564 	strpl	r6, [r0], #-1380	; 0x564
      c8:	4f5f4d49 	svcmi	0x005f4d49
      cc:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; ffffffc8 <SCS_BASE+0x1fff1fc8>
      d0:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
      d4:	50470079 	subpl	r0, r7, r9, ror r0
      d8:	505f4f49 	subspl	r4, pc, r9, asr #30
      dc:	62006e69 	andvs	r6, r0, #1680	; 0x690
      e0:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
      e4:	00657461 	rsbeq	r7, r5, r1, ror #8
      e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      ec:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
      f0:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
      f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
      f8:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
      fc:	2f656d6f 	svccs	0x00656d6f
     100:	6d656c63 	stclvs	12, cr6, [r5, #-396]!	; 0xfffffe74
     104:	2f746e65 	svccs	0x00746e65
     108:	30314f4d 	eorscc	r4, r1, sp, asr #30
     10c:	6f522f33 	svcvs	0x00522f33
     110:	00746f62 	rsbseq	r6, r4, r2, ror #30
     114:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     118:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     11c:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
     120:	00657461 	rsbeq	r7, r5, r1, ror #8
     124:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
     128:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
     12c:	4c58445f 	cfldrdmi	mvd4, [r8], {95}	; 0x5f
     130:	67697200 	strbvs	r7, [r9, -r0, lsl #4]!
     134:	754c7468 	strbvc	r7, [ip, #-1128]	; 0x468
     138:	6f6e696d 	svcvs	0x006e696d
     13c:	79746973 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     140:	41535500 	cmpmi	r3, r0, lsl #10
     144:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     148:	0074696e 	rsbseq	r6, r4, lr, ror #18
     14c:	6f727245 	svcvs	0x00727245
     150:	61745372 	cmnvs	r4, r2, ror r3
     154:	00737574 	rsbseq	r7, r3, r4, ror r5
     158:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     15c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     160:	00676966 	rsbeq	r6, r7, r6, ror #18
     164:	6f666e69 	svcvs	0x00666e69
     168:	7473624f 	ldrbtvc	r6, [r3], #-591	; 0x24f
     16c:	78546200 	ldmdavc	r4, {r9, sp, lr}^
     170:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     174:	656c0061 	strbvs	r0, [ip, #-97]!	; 0x61
     178:	69667466 	stmdbvs	r6!, {r1, r2, r5, r6, sl, ip, sp, lr}^
     17c:	00646c65 	rsbeq	r6, r4, r5, ror #24
     180:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     184:	73756d5f 	cmnvc	r5, #6080	; 0x17c0
     188:	52006369 	andpl	r6, r0, #-1543503871	; 0xa4000001
     18c:	505f4343 	subspl	r4, pc, r3, asr #6
     190:	6f434c4c 	svcvs	0x00434c4c
     194:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     198:	41535500 	cmpmi	r3, r0, lsl #10
     19c:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
     1a0:	4c64726f 	sfmmi	f7, 2, [r4], #-444	; 0xfffffe44
     1a4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     1a8:	756f0068 	strbvc	r0, [pc, #-104]!	; 148 <_Minimum_Stack_Size+0x48>
     1ac:	676e4174 			; <UNDEFINED> instruction: 0x676e4174
     1b0:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
     1b4:	69766f4d 	ldmdbvs	r6!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     1b8:	7300676e 	movwvc	r6, #1902	; 0x76e
     1bc:	65766f68 	ldrbvs	r6, [r6, #-3944]!	; 0xf68
     1c0:	74735f6c 	ldrbtvc	r5, [r3], #-3948	; 0xf6c
     1c4:	00657461 	rsbeq	r7, r5, r1, ror #8
     1c8:	5f4d4954 	svcpl	0x004d4954
     1cc:	4931434f 	ldmdbmi	r1!, {r0, r1, r2, r3, r6, r8, r9, lr}
     1d0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     1d4:	5f4d4954 	svcpl	0x004d4954
     1d8:	5031434f 	eorspl	r4, r1, pc, asr #6
     1dc:	6f6c6572 	svcvs	0x006c6572
     1e0:	6f436461 	svcvs	0x00436461
     1e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     1e8:	41535500 	cmpmi	r3, r0, lsl #10
     1ec:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
     1f0:	42706f74 	rsbsmi	r6, r0, #116, 30	; 0x1d0
     1f4:	00737469 	rsbseq	r7, r3, r9, ror #8
     1f8:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     1fc:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
     200:	75007468 	strvc	r7, [r0, #-1128]	; 0x468
     204:	6f745f70 	svcvs	0x00745f70
     208:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
     20c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
     210:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     214:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     218:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0x449
     21c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     220:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
     224:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     228:	65535f6b 	ldrbvs	r5, [r3, #-3947]	; 0xf6b
     22c:	6c655274 	sfmvs	f5, 2, [r5], #-464	; 0xfffffe30
     230:	0064616f 	rsbeq	r6, r4, pc, ror #2
     234:	5f74756f 	svcpl	0x0074756f
     238:	6c676e41 	stclvs	14, cr6, [r7], #-260	; 0xfffffefc
     23c:	6f003165 	svcvs	0x00003165
     240:	415f7475 	cmpmi	pc, r5, ror r4	; <UNPREDICTABLE>
     244:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     248:	50470032 	subpl	r0, r7, r2, lsr r0
     24c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     250:	0074696e 	rsbseq	r6, r4, lr, ror #18
     254:	5f434352 	svcpl	0x00434352
     258:	4b4c4350 	blmi	1310fa0 <__Stack_Size+0x1310ba0>
     25c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     260:	00676966 	rsbeq	r6, r7, r6, ror #18
     264:	31524343 	cmpcc	r2, r3, asr #6
     268:	6c61565f 	stclvs	6, cr5, [r1], #-380	; 0xfffffe84
     26c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0x300
     270:	63006465 	movwvs	r6, #1125	; 0x465
     274:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     278:	415f746e 	cmpmi	pc, lr, ror #8
     27c:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     280:	75630031 	strbvc	r0, [r3, #-49]!	; 0x31
     284:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     288:	6e415f74 	mcrvs	15, 2, r5, cr1, cr4, {3}
     28c:	32656c67 	rsbcc	r6, r5, #26368	; 0x6700
     290:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     294:	70535f4f 	subsvc	r5, r3, pc, asr #30
     298:	5f646565 	svcpl	0x00646565
     29c:	7a484d32 	bvc	121376c <__Stack_Size+0x121336c>
     2a0:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
     2a4:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
     2a8:	65526172 	ldrbvs	r6, [r2, #-370]	; 0x172
     2ac:	54470064 	strbpl	r0, [r7], #-100	; 0x64
     2b0:	54005250 	strpl	r5, [r0], #-592	; 0x250
     2b4:	74534478 	ldrbvc	r4, [r3], #-1144	; 0x478
     2b8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     2bc:	43435200 	movtmi	r5, #12800	; 0x3200
     2c0:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     2c4:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
     2c8:	53455348 	movtpl	r5, #21320	; 0x5348
     2cc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     2d0:	54007055 	strpl	r7, [r0], #-85	; 0x55
     2d4:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2dc <_Minimum_Stack_Size+0x1dc>
     2d8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     2dc:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     2e0:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
     2e4:	61437465 	cmpvs	r3, r5, ror #8
     2e8:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
     2ec:	54003165 	strpl	r3, [r0], #-357	; 0x165
     2f0:	505f4d49 	subspl	r4, pc, r9, asr #26
     2f4:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xc75
     2f8:	41535500 	cmpmi	r3, r0, lsl #10
     2fc:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     300:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     304:	00657461 	rsbeq	r7, r5, r1, ror #8
     308:	5f4d4954 	svcpl	0x004d4954
     30c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     310:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     314:	6f697369 	svcvs	0x00697369
     318:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     31c:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffff3d7 <SCS_BASE+0x1fff13d7>
     320:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     324:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     328:	53550065 	cmppl	r5, #101	; 0x65
     32c:	5f545241 	svcpl	0x00545241
     330:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
     334:	44657669 	strbtmi	r7, [r5], #-1641	; 0x669
     338:	00617461 	rsbeq	r7, r1, r1, ror #8
     33c:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
     340:	61446200 	mrsvs	r6, (UNDEF: 100)
     344:	76006174 			; <UNDEFINED> instruction: 0x76006174
     348:	00363175 	eorseq	r3, r6, r5, ror r1
     34c:	7a7a7562 	bvc	1e9d8dc <__Stack_Size+0x1e9d4dc>
     350:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
     354:	616c6544 	cmnvs	ip, r4, asr #10
     358:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
     35c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     360:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
     364:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     368:	62006665 	andvs	r6, r0, #105906176	; 0x6500000
     36c:	746e6553 	strbtvc	r6, [lr], #-1363	; 0x553
     370:	61746144 	cmnvs	r4, r4, asr #2
     374:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     378:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     37c:	54497261 	strbpl	r7, [r9], #-609	; 0x261
     380:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     384:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     388:	43007469 	movwmi	r7, #1129	; 0x469
     38c:	00315243 	eorseq	r5, r1, r3, asr #4
     390:	32524343 	subscc	r4, r2, #201326593	; 0xc000001
     394:	52434300 	subpl	r4, r3, #0, 6
     398:	43430033 	movtmi	r0, #12339	; 0x3033
     39c:	43003452 	movwmi	r3, #1106	; 0x452
     3a0:	31524d43 	cmpcc	r2, r3, asr #26
     3a4:	4d434300 	stclmi	3, cr4, [r3, #-0]
     3a8:	47003252 	smlsdmi	r0, r2, r2, r3
     3ac:	5f4f4950 	svcpl	0x004f4950
     3b0:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     3b4:	30315f64 	eorscc	r5, r1, r4, ror #30
     3b8:	007a484d 	rsbseq	r4, sl, sp, asr #16
     3bc:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     3c0:	5f657479 	svcpl	0x00657479
     3c4:	63004350 	movwvs	r4, #848	; 0x350
     3c8:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0x61
     3cc:	55006572 	strpl	r6, [r0, #-1394]	; 0x572
     3d0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     3d4:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     3d8:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     3dc:	53770061 	cmnpl	r7, #97	; 0x61
     3e0:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xe65
     3e4:	00617461 	rsbeq	r7, r1, r1, ror #8
     3e8:	2f505041 	svccs	0x00505041
     3ec:	2f637273 	svccs	0x00637273
     3f0:	6e69616d 	powvsez	f6, f1, #5.0
     3f4:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
     3f8:	5f4f4950 	svcpl	0x004f4950
     3fc:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
     400:	00737469 	rsbseq	r7, r3, r9, ror #8
     404:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xf56
     408:	00656761 	rsbeq	r6, r5, r1, ror #14
     40c:	69666e69 	stmdbvs	r6!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     410:	6574696e 	ldrbvs	r6, [r4, #-2414]!	; 0x96e
     414:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
     418:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     41c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     420:	6d65526e 	sfmvs	f5, 2, [r5, #-440]!	; 0xfffffe48
     424:	6f437061 	svcvs	0x00437061
     428:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     42c:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     430:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     434:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     438:	00657479 	rsbeq	r7, r5, r9, ror r4
     43c:	30447852 	subcc	r7, r4, r2, asr r8
     440:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     444:	70757272 	rsbsvc	r7, r5, r2, ror r2
     448:	57500074 			; <UNDEFINED> instruction: 0x57500074
     44c:	61425f52 	cmpvs	r2, r2, asr pc
     450:	70756b63 	rsbsvc	r6, r5, r3, ror #22
     454:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
     458:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
     45c:	72500064 	subsvc	r0, r0, #100	; 0x64
     460:	43746e69 	cmnmi	r4, #1680	; 0x690
     464:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
     468:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     46c:	50470073 	subpl	r0, r7, r3, ror r0
     470:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 354 <_Minimum_Stack_Size+0x254>
     474:	5f65646f 	svcpl	0x0065646f
     478:	00445049 	subeq	r5, r4, r9, asr #32
     47c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     480:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     484:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     488:	775f6574 			; <UNDEFINED> instruction: 0x775f6574
     48c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     490:	4f495047 	svcmi	0x00495047
     494:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 49c <__Stack_Size+0x9c>
     498:	50495f65 	subpl	r5, r9, r5, ror #30
     49c:	53550055 	cmppl	r5, #85	; 0x55
     4a0:	5f545241 	svcpl	0x00545241
     4a4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     4a8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     4ac:	67007469 	strvs	r7, [r0, -r9, ror #8]
     4b0:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
     4b4:	00656c67 	rsbeq	r6, r5, r7, ror #24
     4b8:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     4bc:	5f657479 	svcpl	0x00657479
     4c0:	004c5844 	subeq	r5, ip, r4, asr #16
     4c4:	4f495047 	svcmi	0x00495047
     4c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4d0 <__Stack_Size+0xd0>
     4cc:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff56f <SCS_BASE+0x1fff156f>
     4d0:	444f5f74 	strbmi	r5, [pc], #-3956	; 4d8 <__Stack_Size+0xd8>
     4d4:	44785400 	ldrbtmi	r5, [r8], #-1024	; 0x400
     4d8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     4dc:	67003631 	smladxvs	r0, r1, r6, r3
     4e0:	736d3177 	cmnvc	sp, #-1073741795	; 0xc000001d
     4e4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     4e8:	00726574 	rsbseq	r6, r2, r4, ror r5
     4ec:	32337576 	eorscc	r7, r3, #494927872	; 0x1d800000
     4f0:	43435200 	movtmi	r5, #12800	; 0x3200
     4f4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     4f8:	72655032 	rsbvc	r5, r5, #50	; 0x32
     4fc:	43687069 	cmnmi	r8, #105	; 0x69
     500:	6b636f6c 	blvs	18dc2b8 <__Stack_Size+0x18dbeb8>
     504:	00646d43 	rsbeq	r6, r4, r3, asr #26
     508:	4349564e 	movtmi	r5, #38478	; 0x964e
     50c:	5152495f 	cmppl	r2, pc, asr r9
     510:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     514:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
     518:	4400646d 	strmi	r6, [r0], #-1133	; 0x46d
     51c:	00524549 	subseq	r4, r2, r9, asr #10
     520:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
     524:	696d754c 	stmdbvs	sp!, {r2, r3, r6, r8, sl, ip, sp, lr}^
     528:	69736f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     52c:	67007974 	smlsdxvs	r0, r4, r9, r7
     530:	6d695477 	cfstrdvs	mvd5, [r9, #-476]!	; 0xfffffe24
     534:	44676e69 	strbtmi	r6, [r7], #-3689	; 0xe69
     538:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     53c:	41535500 	cmpmi	r3, r0, lsl #10
     540:	545f5452 	ldrbpl	r5, [pc], #-1106	; 548 <__Stack_Size+0x148>
     544:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     548:	54006665 	strpl	r6, [r0], #-1637	; 0x665
     54c:	4f5f4d49 	svcmi	0x005f4d49
     550:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
     554:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     558:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     55c:	69006572 	stmdbvs	r0, {r1, r4, r5, r6, r8, sl, sp, lr}
     560:	5f74696e 	svcpl	0x0074696e
     564:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     568:	54007374 	strpl	r7, [r0], #-884	; 0x374
     56c:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
     570:	74657065 	strbtvc	r7, [r5], #-101	; 0x65
     574:	6f697469 	svcvs	0x00697469
     578:	756f436e 	strbvc	r4, [pc, #-878]!	; 212 <_Minimum_Stack_Size+0x112>
     57c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     580:	6e657300 	cdpvs	3, 6, cr7, cr5, cr0, {0}
     584:	00726f73 	rsbseq	r6, r2, r3, ror pc
     588:	5f4d4954 	svcpl	0x004d4954
     58c:	504e434f 	subpl	r4, lr, pc, asr #6
     590:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
     594:	00797469 	rsbseq	r7, r9, r9, ror #8
     598:	6c65446d 	cfstrdvs	mvd4, [r5], #-436	; 0xfffffe4c
     59c:	55007961 	strpl	r7, [r0, #-2401]	; 0x961
     5a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     5a4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     5a8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     5ac:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     5b0:	6c006572 	cfstr32vs	mvfx6, [r0], {114}	; 0x72
     5b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
     5b8:	0066664f 	rsbeq	r6, r6, pc, asr #12
     5bc:	52454343 	subpl	r4, r5, #201326593	; 0xc000001
     5c0:	736f5000 	cmnvc	pc, #0
     5c4:	6f697469 	svcvs	0x00697469
     5c8:	6142006e 	cmpvs	r2, lr, rrx
     5cc:	61726475 	cmnvs	r2, r5, ror r4
     5d0:	505f6574 	subspl	r6, pc, r4, ror r5	; <UNPREDICTABLE>
     5d4:	55530043 	ldrbpl	r0, [r3, #-67]	; 0x43
     5d8:	53454343 	movtpl	r4, #21315	; 0x5343
     5dc:	564e0053 			; <UNDEFINED> instruction: 0x564e0053
     5e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5e4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     5e8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     5ec:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5f0:	53494400 	movtpl	r4, #37888	; 0x9400
     5f4:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     5f8:	43435200 	movtmi	r5, #12800	; 0x3200
     5fc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     600:	72655031 	rsbvc	r5, r5, #49	; 0x31
     604:	43687069 	cmnmi	r8, #105	; 0x69
     608:	6b636f6c 	blvs	18dc3c0 <__Stack_Size+0x18dbfc0>
     60c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     610:	63656843 	cmnvs	r5, #4390912	; 0x430000
     614:	77654e6b 	strbvc	r4, [r5, -fp, ror #28]!
     618:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
     61c:	64006576 	strvs	r6, [r0], #-1398	; 0x576
     620:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
     624:	00626c74 	rsbeq	r6, r2, r4, ror ip
     628:	6564726f 	strbvs	r7, [r4, #-623]!	; 0x26f
     62c:	70750072 	rsbsvc	r0, r5, r2, ror r0
     630:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
     634:	5f6f745f 	svcpl	0x006f745f
     638:	64007075 	strvs	r7, [r0], #-117	; 0x75
     63c:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
     640:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
     644:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     648:	756f435f 	strbvc	r4, [pc, #-863]!	; 2f1 <_Minimum_Stack_Size+0x1f1>
     64c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     650:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     654:	41535500 	cmpmi	r3, r0, lsl #10
     658:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 518 <__Stack_Size+0x118>
     65c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     660:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     664:	435f3154 	cmpmi	pc, #84, 2
     668:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     66c:	61727567 	cmnvs	r2, r7, ror #10
     670:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     674:	444e4900 	strbmi	r4, [lr], #-2304	; 0x900
     678:	63005845 	movwvs	r5, #2117	; 0x845
     67c:	6b636568 	blvs	18d9c24 <__Stack_Size+0x18d9824>
     680:	7473624f 	ldrbtvc	r6, [r3], #-591	; 0x24f
     684:	656c6361 	strbvs	r6, [ip, #-865]!	; 0x361
     688:	69777300 	ldmdbvs	r7!, {r8, r9, ip, sp, lr}^
     68c:	5f686374 	svcpl	0x00686374
     690:	5f66666f 	svcpl	0x0066666f
     694:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     698:	53007374 	movwpl	r7, #884	; 0x374
     69c:	0052434d 	subseq	r4, r2, sp, asr #6
     6a0:	5f434352 	svcpl	0x00434352
     6a4:	43455348 	movtmi	r5, #21320	; 0x5348
     6a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     6ac:	53550067 	cmppl	r5, #103	; 0x67
     6b0:	5f545241 	svcpl	0x00545241
     6b4:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     6b8:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     6bc:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
     6c0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     6c4:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     6c8:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
     6cc:	6f6e5f65 	svcvs	0x006e5f65
     6d0:	54006d72 	strpl	r6, [r0], #-3442	; 0xd72
     6d4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     6d8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     6dc:	70757272 	rsbsvc	r7, r5, r2, ror r2
     6e0:	6d315f74 	ldcvs	15, cr5, [r1, #-464]!	; 0xfffffe30
     6e4:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
     6e8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     6ec:	6f435f6b 	svcvs	0x00435f6b
     6f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6f4:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     6f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6fc:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
     700:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     704:	7a754265 	bvc	1d510a0 <__Stack_Size+0x1d50ca0>
     708:	6f64007a 	svcvs	0x0064007a
     70c:	745f6e77 	ldrbvc	r6, [pc], #-3703	; 714 <__Stack_Size+0x314>
     710:	70755f6f 	rsbsvc	r5, r5, pc, ror #30
     714:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
     718:	70626700 	rsbvc	r6, r2, r0, lsl #14
     71c:	6e497852 	mcrvs	8, 2, r7, cr9, cr2, {2}
     720:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     724:	42747075 	rsbsmi	r7, r4, #117	; 0x75
     728:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     72c:	43520072 	cmpmi	r2, #114	; 0x72
     730:	6f435f43 	svcvs	0x00435f43
     734:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     738:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     73c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     740:	5f4d4954 	svcpl	0x004d4954
     744:	494e434f 	stmdbmi	lr, {r0, r1, r2, r3, r6, r8, r9, lr}^
     748:	53656c64 	cmnpl	r5, #100, 24	; 0x6400
     74c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     750:	776f6c00 	strbvc	r6, [pc, -r0, lsl #24]!
     754:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
     758:	6f745f67 	svcvs	0x00745f67
     75c:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
     760:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     764:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
     768:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
     76c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     770:	50470074 	subpl	r0, r7, r4, ror r0
     774:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     778:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     77c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     780:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     784:	72507700 	subsvc	r7, r0, #0, 14
     788:	6e657365 	cdpvs	3, 6, cr7, cr5, cr5, {3}
     78c:	736f5074 	cmnvc	pc, #116	; 0x74
     790:	66696c00 	strbtvs	r6, [r9], -r0, lsl #24
     794:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     798:	666e6900 	strbtvs	r6, [lr], -r0, lsl #18
     79c:	4352006f 	cmpmi	r2, #111	; 0x6f
     7a0:	43485f43 	movtmi	r5, #36675	; 0x8f43
     7a4:	6f434b4c 	svcvs	0x00434b4c
     7a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     7ac:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     7b0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
     7b4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     7b8:	00746c75 	rsbseq	r6, r4, r5, ror ip
     7bc:	6d655462 	cfstrdvs	mvd5, [r5, #-392]!	; 0xfffffe78
     7c0:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
     7c4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     7c8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     7cc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     7d0:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
     7d4:	65505f4d 	ldrbvs	r5, [r0, #-3917]	; 0xf4d
     7d8:	646f6972 	strbtvs	r6, [pc], #-2418	; 7e0 <__Stack_Size+0x3e0>
     7dc:	43435200 	movtmi	r5, #12800	; 0x3200
     7e0:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     7e4:	6f43314b 	svcvs	0x0043314b
     7e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     7ec:	41535500 	cmpmi	r3, r0, lsl #10
     7f0:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
     7f4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     7f8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
     7fc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     800:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     804:	6c676e41 	stclvs	14, cr6, [r7], #-260	; 0xfffffefc
     808:	564e0065 	strbpl	r0, [lr], -r5, rrx
     80c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     810:	0074696e 	rsbseq	r6, r4, lr, ror #18
     814:	4f495047 	svcmi	0x00495047
     818:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 820 <__Stack_Size+0x420>
     81c:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     820:	00444f5f 	subeq	r4, r4, pc, asr pc
     824:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     828:	6f435f72 	svcvs	0x00435f72
     82c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     830:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     834:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     838:	4f495047 	svcmi	0x00495047
     83c:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
     840:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     844:	46007374 			; <UNDEFINED> instruction: 0x46007374
     848:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     84c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     850:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0x14c
     854:	0079636e 	rsbseq	r6, r9, lr, ror #6
     858:	42447854 	submi	r7, r4, #84, 16	; 0x540000
     85c:	31657479 	smccc	22345	; 0x5749
     860:	4e470036 	mcrmi	0, 2, r0, cr7, cr6, {1}
     864:	20432055 	subcs	r2, r3, r5, asr r0
     868:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
     86c:	30322033 	eorscc	r2, r2, r3, lsr r0
     870:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0x531
     874:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
     878:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
     87c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     880:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     884:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
     888:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     88c:	342d6465 	strtcc	r6, [sp], #-1125	; 0x465
     890:	622d395f 	eorvs	r3, sp, #1556480	; 0x17c000
     894:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     898:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0x68
     89c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     8a0:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     8a4:	37393732 			; <UNDEFINED> instruction: 0x37393732
     8a8:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
     8ac:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
     8b0:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     8b4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     8b8:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
     8bc:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
     8c0:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     8c4:	4f2d2067 	svcmi	0x002d2067
     8c8:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     8cc:	632d6f6e 			; <UNDEFINED> instruction: 0x632d6f6e
     8d0:	6f6d6d6f 	svcvs	0x006d6d6f
     8d4:	7953006e 	ldmdbvc	r3, {r1, r2, r3, r5, r6}^
     8d8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     8dc:	54495f6b 	strbpl	r5, [r9], #-3947	; 0xf6b
     8e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8e4:	73006769 	movwvc	r6, #1897	; 0x769
     8e8:	70537465 	subsvc	r7, r3, r5, ror #8
     8ec:	00646565 	rsbeq	r6, r4, r5, ror #10
     8f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     8f4:	006e4f74 	rsbeq	r4, lr, r4, ror pc
     8f8:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
     8fc:	43520065 	cmpmi	r2, #101	; 0x65
     900:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
     904:	616c4674 	smcvs	50276	; 0xc464
     908:	61745367 	cmnvs	r4, r7, ror #6
     90c:	00737574 	rsbseq	r7, r3, r4, ror r5
     910:	4f495047 	svcmi	0x00495047
     914:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     918:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     91c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     920:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     924:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     928:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     92c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     930:	6f4d5f4f 	svcvs	0x004d5f4f
     934:	415f6564 	cmpmi	pc, r4, ror #10
     938:	46004e49 	strmi	r4, [r0], -r9, asr #28
     93c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     940:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
     944:	63746566 	cmnvs	r4, #427819008	; 0x19800000
     948:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
     94c:	43726566 	cmnmi	r2, #427819008	; 0x19800000
     950:	6d00646d 	cfstrsvs	mvf6, [r0, #-436]	; 0xfffffe4c
     954:	5f65766f 	svcpl	0x0065766f
     958:	77726f66 	ldrbvc	r6, [r2, -r6, ror #30]!
     95c:	00647261 	rsbeq	r7, r4, r1, ror #4
     960:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     964:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     968:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
     96c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     970:	00314445 	eorseq	r4, r1, r5, asr #8
     974:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     978:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     97c:	45520032 	ldrbmi	r0, [r2, #-50]	; 0x32
     980:	56524553 			; <UNDEFINED> instruction: 0x56524553
     984:	00334445 	eorseq	r4, r3, r5, asr #8
     988:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     98c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     990:	45520034 	ldrbmi	r0, [r2, #-52]	; 0x34
     994:	56524553 			; <UNDEFINED> instruction: 0x56524553
     998:	00354445 	eorseq	r4, r5, r5, asr #8
     99c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     9a0:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     9a4:	68730036 	ldmdavs	r3!, {r1, r2, r4, r5}^
     9a8:	2074726f 	rsbscs	r7, r4, pc, ror #4
     9ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
     9b0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     9b4:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     9b8:	45520038 	ldrbmi	r0, [r2, #-56]	; 0x38
     9bc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     9c0:	00394445 	eorseq	r4, r9, r5, asr #8
     9c4:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     9c8:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
     9cc:	65526172 	ldrbvs	r6, [r2, #-370]	; 0x172
     9d0:	50470064 	subpl	r0, r7, r4, rrx
     9d4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 8b8 <__Stack_Size+0x4b8>
     9d8:	5f65646f 	svcpl	0x0065646f
     9dc:	505f4641 	subspl	r4, pc, r1, asr #12
     9e0:	6f6c0050 	svcvs	0x006c0050
     9e4:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     9e8:	4400746e 	strmi	r7, [r0], #-1134	; 0x46e
     9ec:	0052414d 	subseq	r4, r2, sp, asr #2
     9f0:	4f495047 	svcmi	0x00495047
     9f4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     9f8:	69006465 	stmdbvs	r0, {r0, r2, r5, r6, sl, sp, lr}
     9fc:	5f74696e 	svcpl	0x0074696e
     a00:	6973756d 	ldmdbvs	r3!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     a04:	43003263 	movwmi	r3, #611	; 0x263
     a08:	6b636568 	blvs	18d9fb0 <__Stack_Size+0x18d9bb0>
     a0c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     a10:	0074754f 	rsbseq	r7, r4, pc, asr #10
     a14:	42447852 	submi	r7, r4, #5373952	; 0x520000
     a18:	5f657479 	svcpl	0x00657479
     a1c:	004c5844 	subeq	r5, ip, r4, asr #16
     a20:	61736944 	cmnvs	r3, r4, asr #18
     a24:	55656c62 	strbpl	r6, [r5, #-3170]!	; 0xc62
     a28:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     a2c:	53550031 	cmppl	r5, #49	; 0x31
     a30:	5f545241 	svcpl	0x00545241
     a34:	6f435449 	svcvs	0x00435449
     a38:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     a3c:	72687400 	rsbvc	r7, r8, #0, 8
     a40:	6f687365 	svcvs	0x00687365
     a44:	6e49646c 	cdpvs	4, 4, cr6, cr9, cr12, {3}
     a48:	72617266 	rsbvc	r7, r1, #1610612742	; 0x60000006
     a4c:	63006465 	movwvs	r6, #1125	; 0x465
     a50:	6b636568 	blvs	18d9ff8 <__Stack_Size+0x18d9bf8>
     a54:	696d754c 	stmdbvs	sp!, {r2, r3, r6, r8, sl, ip, sp, lr}^
     a58:	69736f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     a5c:	54007974 	strpl	r7, [r0], #-2420	; 0x974
     a60:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
     a64:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     a68:	00676966 	rsbeq	r6, r7, r6, ror #18
     a6c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     a70:	5f6b6369 	svcpl	0x006b6369
     a74:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     a78:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
     a7c:	5300646d 	movwpl	r6, #1133	; 0x46d
     a80:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     a84:	63736944 	cmnvs	r3, #68, 18	; 0x110000
     a88:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     a8c:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xf00
     a90:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     a94:	50470064 	subpl	r0, r7, r4, rrx
     a98:	545f4f49 	ldrbpl	r4, [pc], #-3913	; aa0 <__Stack_Size+0x6a0>
     a9c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     aa0:	63006665 	movwvs	r6, #1637	; 0x665
     aa4:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xe65
     aa8:	666e4972 			; <UNDEFINED> instruction: 0x666e4972
     aac:	65526172 	ldrbvs	r6, [r2, #-370]	; 0x172
     ab0:	50470064 	subpl	r0, r7, r4, rrx
     ab4:	6f4d4f49 	svcvs	0x004d4f49
     ab8:	545f6564 	ldrbpl	r6, [pc], #-1380	; ac0 <__Stack_Size+0x6c0>
     abc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     ac0:	6e006665 	cfmadd32vs	mvax3, mvfx6, mvfx0, mvfx5
     ac4:	0065746f 	rsbeq	r7, r5, pc, ror #8
     ac8:	5f4d4954 	svcpl	0x004d4954
     acc:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     ad0:	534e7475 	movtpl	r7, #58485	; 0xe475
     ad4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     ad8:	43435200 	movtmi	r5, #12800	; 0x3200
     adc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     ae0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     ae4:	6f534b4c 	svcvs	0x00534b4c
     ae8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     aec:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     af0:	4e45006e 	cdpmi	0, 4, cr0, cr5, cr14, {3}
     af4:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
     af8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     afc:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
     b00:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
     b04:	72745365 	rsbsvc	r5, r4, #-1811939327	; 0x94000001
     b08:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     b0c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b10:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0x973
     b14:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     b18:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     b1c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     b20:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     b24:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     b28:	7400746e 	strvc	r7, [r0], #-1134	; 0x46e
     b2c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
     b30:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
     b34:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     b38:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
     b3c:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     b40:	6142656d 	cmpvs	r2, sp, ror #10
     b44:	74536573 	ldrbvc	r6, [r3], #-1395	; 0x573
     b48:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     b4c:	00657275 	rsbeq	r7, r5, r5, ror r2
     b50:	4349564e 	movtmi	r5, #38478	; 0x964e
     b54:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     b58:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
     b5c:	6154726f 	cmpvs	r4, pc, ror #4
     b60:	00656c62 	rsbeq	r6, r5, r2, ror #24
     b64:	4f495047 	svcmi	0x00495047
     b68:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     b6c:	70795474 	rsbsvc	r5, r9, r4, ror r4
     b70:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     b74:	736e7500 	cmnvc	lr, #0, 10
     b78:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     b7c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     b80:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
     b84:	00706d54 	rsbseq	r6, r0, r4, asr sp
     b88:	5f4d4954 	svcpl	0x004d4954
     b8c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     b90:	6e007469 	cdpvs	4, 0, cr7, cr0, cr9, {3}
     b94:	616d726f 	cmnvs	sp, pc, ror #4
     b98:	7275546c 	rsbsvc	r5, r5, #108, 8	; 0x6c000000
     b9c:	5047006e 	subpl	r0, r7, lr, rrx
     ba0:	535f4f49 	cmppl	pc, #292	; 0x124
     ba4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     ba8:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!	; 0xfffffe84
     bac:	55007a48 	strpl	r7, [r0, #-2632]	; 0xa48
     bb0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     bb4:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     bb8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     bbc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     bc0:	64006e6f 	strvs	r6, [r0], #-3695	; 0xe6f
     bc4:	725f6c78 	subsvc	r6, pc, #120, 24	; 0x7800
     bc8:	5f646165 	svcpl	0x00646165
     bcc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
     bd0:	41535500 	cmpmi	r3, r0, lsl #10
     bd4:	445f5452 	ldrbmi	r5, [pc], #-1106	; bdc <__Stack_Size+0x7dc>
     bd8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     bdc:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     be0:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
     be4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     be8:	61727567 	cmnvs	r2, r7, ror #10
     bec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     bf0:	53455200 	movtpl	r5, #20992	; 0x5200
     bf4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     bf8:	00303144 	eorseq	r3, r0, r4, asr #2
     bfc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c00:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c04:	52003131 	andpl	r3, r0, #1073741836	; 0x4000000c
     c08:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c0c:	31444556 	cmpcc	r4, r6, asr r5
     c10:	45520032 	ldrbmi	r0, [r2, #-50]	; 0x32
     c14:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c18:	33314445 	teqcc	r1, #1157627904	; 0x45000000
     c1c:	53455200 	movtpl	r5, #20992	; 0x5200
     c20:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c24:	00343144 	eorseq	r3, r4, r4, asr #2
     c28:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c2c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c30:	52003531 	andpl	r3, r0, #205520896	; 0xc400000
     c34:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c38:	31444556 	cmpcc	r4, r6, asr r5
     c3c:	45520036 	ldrbmi	r0, [r2, #-54]	; 0x36
     c40:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c44:	37314445 	ldrcc	r4, [r1, -r5, asr #8]!
     c48:	53455200 	movtpl	r5, #20992	; 0x5200
     c4c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c50:	00383144 	eorseq	r3, r8, r4, asr #2
     c54:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     c58:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
     c5c:	47003931 	smladxmi	r0, r1, r9, r3
     c60:	5f4f4950 	svcpl	0x004f4950
     c64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     c68:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     c6c:	6f697461 	svcvs	0x00697461
     c70:	7864006e 	stmdavc	r4!, {r1, r2, r3, r5, r6}^
     c74:	65725f6c 	ldrbvs	r5, [r2, #-3948]!	; 0xf6c
     c78:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
     c7c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     c80:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     c84:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     c88:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     c8c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     c90:	564e0066 	strbpl	r0, [lr], -r6, rrx
     c94:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     c98:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     c9c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     ca0:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     ca4:	6f697250 	svcvs	0x00697250
     ca8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     cac:	41535500 	cmpmi	r3, r0, lsl #10
     cb0:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
     cb4:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
     cb8:	5f5f0079 	svcpl	0x005f0079
     cbc:	5f525349 	svcpl	0x00525349
     cc0:	414c4544 	cmpmi	ip, r4, asr #10
     cc4:	43520059 	cmpmi	r2, #89	; 0x59
     cc8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     ccc:	646d434c 	strbtvs	r4, [sp], #-844	; 0x34c
     cd0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     cd4:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
     cd8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     cdc:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     ce0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
     ce4:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     ce8:	6142656d 	cmpvs	r2, sp, ror #10
     cec:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
     cf0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     cf4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     cf8:	564e0066 	strbpl	r0, [lr], -r6, rrx
     cfc:	505f4349 	subspl	r4, pc, r9, asr #6
     d00:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     d04:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     d08:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     d0c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d10:	67006769 	strvs	r6, [r0, -r9, ror #14]
     d14:	42785262 	rsbsmi	r5, r8, #536870918	; 0x20000006
     d18:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     d1c:	61655272 	smcvs	21794	; 0x5522
     d20:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     d24:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     d28:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     d2c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     d30:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
     d34:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d38:	6f687300 	svcvs	0x00687300
     d3c:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     d40:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     d44:	2064656e 	rsbcs	r6, r4, lr, ror #10
     d48:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d4c:	65746f6e 	ldrbvs	r6, [r4, #-3950]!	; 0xf6e
     d50:	7a7a7542 	bvc	1e9e260 <__Stack_Size+0x1e9de60>
     d54:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     d58:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     d5c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
     d60:	31657261 	cmncc	r5, r1, ror #4
     d64:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     d68:	6e415f74 	mcrvs	15, 2, r5, cr1, cr4, {3}
     d6c:	31656c67 	cmncc	r5, r7, ror #24
     d70:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     d74:	6e415f74 	mcrvs	15, 2, r5, cr1, cr4, {3}
     d78:	32656c67 	rsbcc	r6, r5, #26368	; 0x6700
     d7c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
     d80:	61625f65 	cmnvs	r2, r5, ror #30
     d84:	61776b63 	cmnvs	r7, r3, ror #22
     d88:	47006472 	smlsdxmi	r0, r2, r4, r6
     d8c:	506c616f 	rsbpl	r6, ip, pc, ror #2
     d90:	5400736f 	strpl	r7, [r0], #-879	; 0x36f
     d94:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     d98:	6700646d 	strvs	r6, [r0, -sp, ror #8]
     d9c:	70537465 	subsvc	r7, r3, r5, ror #8
     da0:	00646565 	rsbeq	r6, r4, r5, ror #10
     da4:	4349564e 	movtmi	r5, #38478	; 0x964e
     da8:	5152495f 	cmppl	r2, pc, asr r9
     dac:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     db0:	506c656e 	rsbpl	r6, ip, lr, ror #10
     db4:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     db8:	6f697470 	svcvs	0x00697470
     dbc:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     dc0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     dc4:	78640079 	stmdavc	r4!, {r0, r3, r4, r5, r6}^
     dc8:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
     dcc:	61697469 	cmnvs	r9, r9, ror #8
     dd0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
     dd4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     dd8:	6f4d5f4f 	svcvs	0x004d5f4f
     ddc:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     de0:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
     de4:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
     de8:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
     dec:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     df0:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
     df4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     df8:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0x5f
     dfc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     e00:	6f437265 	svcvs	0x00437265
     e04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e08:	69546e00 	ldmdbvs	r4, {r9, sl, fp, sp, lr}^
     e0c:	5000656d 	andpl	r6, r0, sp, ror #10
     e10:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     e14:	6f727245 	svcvs	0x00727245
     e18:	646f4372 	strbtvs	r4, [pc], #-882	; e20 <__Stack_Size+0xa20>
     e1c:	53480065 	movtpl	r0, #32869	; 0x8065
     e20:	61745345 	cmnvs	r4, r5, asr #6
     e24:	70557472 	subsvc	r7, r5, r2, ror r4
     e28:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e2c:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
     e30:	00524b43 	subseq	r4, r2, r3, asr #22
     e34:	5f6c7864 	svcpl	0x006c7864
     e38:	5f746567 	svcpl	0x00746567
     e3c:	61707872 	cmnvs	r0, r2, ror r8
     e40:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
     e44:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     e48:	4200726f 	andmi	r7, r0, #-268435450	; 0xf0000006
     e4c:	61467375 	hvcvs	26421	; 0x6735
     e50:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     e54:	70656378 	rsbvc	r6, r5, r8, ror r3
     e58:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e5c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     e60:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     e64:	61485152 	cmpvs	r8, r2, asr r1
     e68:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e6c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     e70:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     e74:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     e78:	61485152 	cmpvs	r8, r2, asr r1
     e7c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     e80:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     e84:	5f304954 	svcpl	0x00304954
     e88:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     e8c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     e90:	50007265 	andpl	r7, r0, r5, ror #4
     e94:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     e98:	61485152 	cmpvs	r8, r2, asr r1
     e9c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     ea0:	61480072 	hvcvs	32770	; 0x8002
     ea4:	61466472 	hvcvs	26178	; 0x6642
     ea8:	45746c75 	ldrbmi	r6, [r4, #-3189]!	; 0xc75
     eac:	70656378 	rsbvc	r6, r5, r8, ror r3
     eb0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     eb4:	43444100 	movtmi	r4, #16640	; 0x4100
     eb8:	5f325f31 	svcpl	0x00325f31
     ebc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ec0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ec4:	54007265 	strpl	r7, [r0], #-613	; 0x265
     ec8:	45504d41 	ldrbmi	r4, [r0, #-3393]	; 0xd41
     ecc:	52495f52 	subpl	r5, r9, #328	; 0x148
     ed0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     ed4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     ed8:	43435200 	movtmi	r5, #12800	; 0x3200
     edc:	5152495f 	cmppl	r2, pc, asr r9
     ee0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ee4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ee8:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
     eec:	5152495f 	cmppl	r2, pc, asr r9
     ef0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ef4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ef8:	5f4e4143 	svcpl	0x004e4143
     efc:	5f315852 	svcpl	0x00315852
     f00:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     f04:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     f08:	44007265 	strmi	r7, [r0], #-613	; 0x265
     f0c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     f10:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     f14:	00726f74 	rsbseq	r6, r2, r4, ror pc
     f18:	31414d44 	cmpcc	r1, r4, asr #26
     f1c:	6168435f 	cmnvs	r8, pc, asr r3
     f20:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     f24:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     f28:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f2c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f30:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     f34:	50555f31 	subspl	r5, r5, r1, lsr pc
     f38:	5152495f 	cmppl	r2, pc, asr r9
     f3c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     f40:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f44:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     f48:	5f50555f 	svcpl	0x0050555f
     f4c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     f50:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     f54:	54007265 	strpl	r7, [r0], #-613	; 0x265
     f58:	5f314d49 	svcpl	0x00314d49
     f5c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f60:	61485152 	cmpvs	r8, r2, asr r1
     f64:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f68:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f6c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     f70:	52495f43 	subpl	r5, r9, #268	; 0x10c
     f74:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f78:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f7c:	414d4400 	cmpmi	sp, r0, lsl #8
     f80:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     f84:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     f88:	495f326c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     f8c:	61485152 	cmpvs	r8, r2, asr r1
     f90:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     f94:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f98:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     f9c:	61485152 	cmpvs	r8, r2, asr r1
     fa0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     fa4:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     fa8:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0x954
     fac:	5f30315f 	svcpl	0x0030315f
     fb0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     fb4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fb8:	44007265 	strmi	r7, [r0], #-613	; 0x265
     fbc:	5f31414d 	svcpl	0x0031414d
     fc0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     fc4:	316c656e 	cmncc	ip, lr, ror #10
     fc8:	5152495f 	cmppl	r2, pc, asr r9
     fcc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     fd0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     fd4:	48435653 	stmdami	r3, {r0, r1, r4, r6, r9, sl, ip, lr}^
     fd8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fdc:	55007265 	strpl	r7, [r0, #-613]	; 0x265
     fe0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     fe4:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     fe8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     fec:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     ff0:	43545200 	cmpmi	r4, #0, 4
     ff4:	5152495f 	cmppl	r2, pc, asr r9
     ff8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     ffc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1000:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1004:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1008:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    100c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1010:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1014:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    1018:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    101c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1020:	414d4400 	cmpmi	sp, r0, lsl #8
    1024:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1028:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    102c:	355f346c 	ldrbcc	r3, [pc, #-1132]	; bc8 <__Stack_Size+0x7c8>
    1030:	5152495f 	cmppl	r2, pc, asr r9
    1034:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1038:	0072656c 	rsbseq	r6, r2, ip, ror #10
    103c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    1040:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    1044:	63784565 	cmnvs	r8, #423624704	; 0x19400000
    1048:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    104c:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
    1050:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
    1054:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
    1058:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    105c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1060:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    1064:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1068:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    106c:	414d4400 	cmpmi	sp, r0, lsl #8
    1070:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1074:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1078:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    107c:	61485152 	cmpvs	r8, r2, asr r1
    1080:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1084:	53550072 	cmppl	r5, #114	; 0x72
    1088:	6b615742 	blvs	1856d98 <__Stack_Size+0x1856998>
    108c:	5f705565 	svcpl	0x00705565
    1090:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1094:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1098:	53007265 	movwpl	r7, #613	; 0x265
    109c:	5f4f4944 	svcpl	0x004f4944
    10a0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10a4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10a8:	46007265 	strmi	r7, [r0], -r5, ror #4
    10ac:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    10b0:	5152495f 	cmppl	r2, pc, asr r9
    10b4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    10b8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    10bc:	67617355 			; <UNDEFINED> instruction: 0x67617355
    10c0:	75614665 	strbvc	r4, [r1, #-1637]!	; 0x665
    10c4:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
    10c8:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
    10cc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    10d0:	31433249 	cmpcc	r3, r9, asr #4
    10d4:	5f56455f 	svcpl	0x0056455f
    10d8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10dc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10e0:	54007265 	strpl	r7, [r0], #-613	; 0x265
    10e4:	5f384d49 	svcpl	0x00384d49
    10e8:	5f475254 	svcpl	0x00475254
    10ec:	5f4d4f43 	svcpl	0x004d4f43
    10f0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    10f4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    10f8:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    10fc:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
    1100:	5f6d7261 	svcpl	0x006d7261
    1104:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1108:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    110c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1110:	5f31414d 	svcpl	0x0031414d
    1114:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1118:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
    111c:	5152495f 	cmppl	r2, pc, asr r9
    1120:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1124:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1128:	33495053 	movtcc	r5, #36947	; 0x9053
    112c:	5152495f 	cmppl	r2, pc, asr r9
    1130:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1134:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1138:	334d4954 	movtcc	r4, #55636	; 0xd954
    113c:	5152495f 	cmppl	r2, pc, asr r9
    1140:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1144:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1148:	5f4e4143 	svcpl	0x004e4143
    114c:	5f454353 	svcpl	0x00454353
    1150:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1154:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1158:	44007265 	strmi	r7, [r0], #-613	; 0x265
    115c:	5f31414d 	svcpl	0x0031414d
    1160:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1164:	346c656e 	strbtcc	r6, [ip], #-1390	; 0x56e
    1168:	5152495f 	cmppl	r2, pc, asr r9
    116c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1170:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1174:	434d5346 	movtmi	r5, #54086	; 0xd346
    1178:	5152495f 	cmppl	r2, pc, asr r9
    117c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1180:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1184:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1188:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    118c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1190:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1194:	43444100 	movtmi	r4, #16640	; 0x4100
    1198:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    119c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    11a0:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    11a4:	43324900 	teqmi	r2, #0, 18
    11a8:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
    11ac:	5152495f 	cmppl	r2, pc, asr r9
    11b0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    11b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11b8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
    11bc:	5f52455f 	svcpl	0x0052455f
    11c0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11c4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11c8:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    11cc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11d0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    11d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    11d8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    11dc:	42535500 	subsmi	r5, r3, #0, 10
    11e0:	5f504c5f 	svcpl	0x00504c5f
    11e4:	5f4e4143 	svcpl	0x004e4143
    11e8:	5f305852 	svcpl	0x00305852
    11ec:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11f0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11f4:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    11f8:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^	; <UNPREDICTABLE>
    11fc:	41435f50 	cmpmi	r3, r0, asr pc
    1200:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1204:	5152495f 	cmppl	r2, pc, asr r9
    1208:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    120c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1210:	31433249 	cmpcc	r3, r9, asr #4
    1214:	5f52455f 	svcpl	0x0052455f
    1218:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    121c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1220:	53007265 	movwpl	r7, #613	; 0x265
    1224:	5f314950 	svcpl	0x00314950
    1228:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    122c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1230:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1234:	5f384d49 	svcpl	0x00384d49
    1238:	5f4b5242 	svcpl	0x004b5242
    123c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1240:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1244:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1248:	5f31414d 	svcpl	0x0031414d
    124c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1250:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
    1254:	5152495f 	cmppl	r2, pc, asr r9
    1258:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    125c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1260:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
    1264:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1268:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    126c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1270:	41535500 	cmpmi	r3, r0, lsl #10
    1274:	5f325452 	svcpl	0x00325452
    1278:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    127c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1280:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1284:	5f344d49 	svcpl	0x00344d49
    1288:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    128c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1290:	54007265 	strpl	r7, [r0], #-613	; 0x265
    1294:	5f314d49 	svcpl	0x00314d49
    1298:	5f475254 	svcpl	0x00475254
    129c:	5f4d4f43 	svcpl	0x004d4f43
    12a0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    12a4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    12a8:	44007265 	strmi	r7, [r0], #-613	; 0x265
    12ac:	5f32414d 	svcpl	0x0032414d
    12b0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    12b4:	316c656e 	cmncc	ip, lr, ror #10
    12b8:	5152495f 	cmppl	r2, pc, asr r9
    12bc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12c4:	374d4954 	smlsldcc	r4, sp, r4, r9
    12c8:	5152495f 	cmppl	r2, pc, asr r9
    12cc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12d4:	47445757 	smlsldmi	r5, r4, r7, r7
    12d8:	5152495f 	cmppl	r2, pc, asr r9
    12dc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12e4:	32495053 	subcc	r5, r9, #83	; 0x53
    12e8:	5152495f 	cmppl	r2, pc, asr r9
    12ec:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    12f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12f4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    12f8:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    12fc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1300:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1304:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1308:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 9c7 <__Stack_Size+0x5c7>
    130c:	5152495f 	cmppl	r2, pc, asr r9
    1310:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1314:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1318:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    131c:	00435653 	subeq	r5, r3, r3, asr r6
    1320:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    1324:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    1328:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    132c:	41007265 	tstmi	r0, r5, ror #4
    1330:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
    1334:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1338:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    133c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1340:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
    1344:	4d440063 	stclmi	0, cr0, [r4, #-396]	; 0xfffffe74
    1348:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
    134c:	6e6e6168 	powvsez	f6, f6, #0.0
    1350:	5f376c65 	svcpl	0x00376c65
    1354:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1358:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    135c:	44007265 	strmi	r7, [r0], #-613	; 0x265
    1360:	5f31414d 	svcpl	0x0031414d
    1364:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1368:	356c656e 	strbcc	r6, [ip, #-1390]!	; 0x56e
    136c:	5152495f 	cmppl	r2, pc, asr r9
    1370:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1374:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1378:	5f6c7864 	svcpl	0x006c7864
    137c:	5f6c6168 	svcpl	0x006c6168
    1380:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1384:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1388:	49766564 	ldmdbmi	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    138c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1390:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1394:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    1398:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    139c:	70007261 	andvc	r7, r0, r1, ror #4
    13a0:	6b636150 	blvs	18d98e8 <__Stack_Size+0x18d94e8>
    13a4:	64007465 	strvs	r7, [r0], #-1125	; 0x465
    13a8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    13ac:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    13b0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 13b8 <__Stack_Size+0xfb8>
    13b4:	6f656d69 	svcvs	0x00656d69
    13b8:	41007475 	tstmi	r0, r5, ror r4
    13bc:	732f5050 			; <UNDEFINED> instruction: 0x732f5050
    13c0:	642f6372 	strtvs	r6, [pc], #-882	; 13c8 <__Stack_Size+0xfc8>
    13c4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    13c8:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    13cc:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    13d0:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    13d4:	6f6c635f 	svcvs	0x006c635f
    13d8:	64006573 	strvs	r6, [r0], #-1395	; 0x573
    13dc:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    13e0:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    13e4:	78640078 	stmdavc	r4!, {r3, r4, r5, r6}^
    13e8:	61685f6c 	cmnvs	r8, ip, ror #30
    13ec:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    13f0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    13f4:	6b636150 	blvs	18d993c <__Stack_Size+0x18d953c>
    13f8:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    13fc:	63526d75 	cmpvs	r2, #7488	; 0x1d40
    1400:	74794276 	ldrbtvc	r4, [r9], #-630	; 0x276
    1404:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    1408:	61685f6c 	cmnvs	r8, ip, ror #30
    140c:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    1410:	67006e65 	strvs	r6, [r0, -r5, ror #28]
    1414:	50785262 	rsbspl	r5, r8, r2, ror #4
    1418:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    141c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1420:	00687467 	rsbeq	r7, r8, r7, ror #8
    1424:	5f6c7864 	svcpl	0x006c7864
    1428:	705f7874 	subsvc	r7, pc, r4, ror r8	; <UNPREDICTABLE>
    142c:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1430:	526e0074 	rsbpl	r0, lr, #116	; 0x74
    1434:	00646165 	rsbeq	r6, r4, r5, ror #2
    1438:	5f6c7864 	svcpl	0x006c7864
    143c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    1440:	43626700 	cmnmi	r2, #0, 14
    1444:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
    1448:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    144c:	78640073 	stmdavc	r4!, {r0, r1, r4, r5, r6}^
    1450:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1454:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1458:	6b636170 	blvs	18d9a20 <__Stack_Size+0x18d9620>
    145c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    1460:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    1464:	78640068 	stmdavc	r4!, {r3, r5, r6}^
    1468:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    146c:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1470:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
    1474:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    1478:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    147c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1484 <__Stack_Size+0x1084>
    1480:	63617078 	cmnvs	r1, #120	; 0x78
    1484:	5f74656b 	svcpl	0x0074656b
    1488:	61726170 	cmnvs	r2, r0, ror r1
    148c:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0x56d
    1490:	78640072 	stmdavc	r4!, {r1, r4, r5, r6}^
    1494:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1498:	6f6c5f74 	svcvs	0x006c5f74
    149c:	74796277 	ldrbtvc	r6, [r9], #-631	; 0x277
    14a0:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
    14a4:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    14a8:	6361705f 	cmnvs	r1, #95	; 0x5f
    14ac:	0074656b 	rsbseq	r6, r4, fp, ror #10
    14b0:	63656863 	cmnvs	r5, #6488064	; 0x630000
    14b4:	6d75736b 	ldclvs	3, cr7, [r5, #-428]!	; 0xfffffe54
    14b8:	50504100 	subspl	r4, r0, r0, lsl #2
    14bc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    14c0:	6e79642f 	cdpvs	4, 7, cr6, cr9, cr15, {1}
    14c4:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    14c8:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
    14cc:	61655200 	cmnvs	r5, r0, lsl #4
    14d0:	4e78546c 	cdpmi	4, 7, cr5, cr8, cr12, {3}
    14d4:	79426d75 	stmdbvc	r2, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    14d8:	64006574 	strvs	r6, [r0], #-1396	; 0x574
    14dc:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    14e0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 14e8 <__Stack_Size+0x10e8>
    14e4:	63617078 	cmnvs	r1, #120	; 0x78
    14e8:	5f74656b 	svcpl	0x0074656b
    14ec:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    14f0:	74006874 	strvc	r6, [r0], #-2164	; 0x874
    14f4:	00706d65 	rsbseq	r6, r0, r5, ror #26
    14f8:	5f6c7864 	svcpl	0x006c7864
    14fc:	5f746573 	svcpl	0x00746573
    1500:	61707874 	cmnvs	r0, r4, ror r8
    1504:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1508:	0064695f 	rsbeq	r6, r4, pc, asr r9
    150c:	74536267 	ldrbvc	r6, [r3], #-615	; 0x267
    1510:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1514:	6b636150 	blvs	18d9a5c <__Stack_Size+0x18d965c>
    1518:	76007465 	strvc	r7, [r0], -r5, ror #8
    151c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1520:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1524:	7278745f 	rsbsvc	r7, r8, #1593835520	; 0x5f000000
    1528:	61705f78 	cmnvs	r0, r8, ror pc
    152c:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1530:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1534:	6b616d5f 	blvs	185cab8 <__Stack_Size+0x185c6b8>
    1538:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
    153c:	78640064 	stmdavc	r4!, {r2, r5, r6}^
    1540:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xf6c
    1544:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1548:	6b636170 	blvs	18d9b10 <__Stack_Size+0x18d9710>
    154c:	705f7465 	subsvc	r7, pc, r5, ror #8
    1550:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1554:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1558:	52626700 	rsbpl	r6, r2, #0, 14
    155c:	74654778 	strbtvc	r4, [r5], #-1912	; 0x778
    1560:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1564:	64006874 	strvs	r6, [r0], #-2164	; 0x874
    1568:	735f6c78 	cmpvc	pc, #120, 24	; 0x7800
    156c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 1574 <__Stack_Size+0x1174>
    1570:	63617078 	cmnvs	r1, #120	; 0x78
    1574:	5f74656b 	svcpl	0x0074656b
    1578:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xe69
    157c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1580:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1584:	62727265 	rsbsvs	r7, r2, #1342177286	; 0x50000006
    1588:	67007469 	strvs	r7, [r0, -r9, ror #8]
    158c:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    1590:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
    1594:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    1598:	00786564 	rsbseq	r6, r8, r4, ror #10
    159c:	6e496267 	cdpvs	2, 4, cr6, cr9, cr7, {3}
    15a0:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
    15a4:	6f697463 	svcvs	0x00697463
    15a8:	6361506e 	cmnvs	r1, #110	; 0x6e
    15ac:	0074656b 	rsbseq	r6, r4, fp, ror #10
    15b0:	64756162 	ldrbtvs	r6, [r5], #-354	; 0x162
    15b4:	006d756e 	rsbeq	r7, sp, lr, ror #10
    15b8:	5f6c7864 	svcpl	0x006c7864
    15bc:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!	; 0xfffffe30
    15c0:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xe69
    15c4:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    15c8:	5f485341 	svcpl	0x00485341
    15cc:	6f435449 	svcvs	0x00435449
    15d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15d4:	50525700 	subspl	r5, r2, r0, lsl #14
    15d8:	61445f32 	cmpvs	r4, r2, lsr pc
    15dc:	4f006174 	svcmi	0x00006174
    15e0:	54535f42 	ldrbpl	r5, [r3], #-3906	; 0xf42
    15e4:	4600504f 	strmi	r5, [r0], -pc, asr #32
    15e8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    15ec:	6172455f 	cmnvs	r2, pc, asr r5
    15f0:	704f6573 	subvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    15f4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    15f8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    15fc:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0x73
    1600:	756f6461 	strbvc	r6, [pc, #-1121]!	; 11a7 <__Stack_Size+0xda7>
    1604:	61747374 	cmnvs	r4, r4, ror r3
    1608:	00737574 	rsbseq	r7, r3, r4, ror r5
    160c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1610:	52455f48 	subpl	r5, r5, #72, 30	; 0x120
    1614:	5f524f52 	svcpl	0x00524f52
    1618:	00505257 	subseq	r5, r0, r7, asr r2
    161c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1620:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    1624:	50657361 	rsbpl	r7, r5, r1, ror #6
    1628:	00656761 	rsbeq	r6, r5, r1, ror #14
    162c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1630:	614c5f48 	cmpvs	ip, r8, asr #30
    1634:	636e6574 	cmnvs	lr, #116, 10	; 0x1d000000
    1638:	4c460079 	mcrrmi	0, 7, r0, r6, cr9
    163c:	5f485341 	svcpl	0x00485341
    1640:	50746547 	rsbspl	r6, r4, r7, asr #10
    1644:	65666572 	strbvs	r6, [r6, #-1394]!	; 0x572
    1648:	42686374 	rsbmi	r6, r8, #116, 6	; 0xd0000001
    164c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1650:	61745372 	cmnvs	r4, r2, ror r3
    1654:	00737574 	rsbseq	r7, r3, r4, ror r5
    1658:	616c6564 	cmnvs	ip, r4, ror #10
    165c:	52570079 	subspl	r0, r7, #121	; 0x79
    1660:	46005250 			; <UNDEFINED> instruction: 0x46005250
    1664:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1668:	6c6e555f 	cfstr64vs	mvdx5, [lr], #-380	; 0xfffffe84
    166c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1670:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1674:	72455f48 	subvc	r5, r5, #72, 30	; 0x120
    1678:	41657361 	cmnmi	r5, r1, ror #6
    167c:	61506c6c 	cmpvs	r0, ip, ror #24
    1680:	00736567 	rsbseq	r6, r3, r7, ror #10
    1684:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1688:	74535f48 	ldrbvc	r5, [r3], #-3912	; 0xf48
    168c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1690:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    1694:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1698:	52570065 	subspl	r0, r7, #101	; 0x65
    169c:	57003050 	smlsdpl	r0, r0, r0, r3
    16a0:	00315052 	eorseq	r5, r1, r2, asr r0
    16a4:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
    16a8:	50525700 	subspl	r5, r2, r0, lsl #14
    16ac:	4c460033 	mcrrmi	0, 3, r0, r6, cr3
    16b0:	5f485341 	svcpl	0x00485341
    16b4:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
    16b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    16bc:	746f7250 	strbtvc	r7, [pc], #-592	; 16c4 <__Stack_Size+0x12c4>
    16c0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16c4:	704f6e6f 	subvc	r6, pc, pc, ror #28
    16c8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    16cc:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    16d0:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
    16d4:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
    16d8:	414c4600 	cmpmi	ip, r0, lsl #12
    16dc:	555f4853 	ldrbpl	r4, [pc, #-2131]	; e91 <__Stack_Size+0xa91>
    16e0:	4f726573 	svcmi	0x00726573
    16e4:	6f697470 	svcvs	0x00697470
    16e8:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    16ec:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    16f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    16f4:	495f424f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r9, lr}^	; <UNPREDICTABLE>
    16f8:	00474457 	subeq	r4, r7, r7, asr r4
    16fc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1700:	65525f48 	ldrbvs	r5, [r2, #-3912]	; 0xf48
    1704:	754f6461 	strbvc	r6, [pc, #-1121]	; 12ab <__Stack_Size+0xeab>
    1708:	6f725074 	svcvs	0x00725074
    170c:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    1710:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1714:	73616c66 	cmnvc	r1, #26112	; 0x6600
    1718:	61747368 	cmnvs	r4, r8, ror #6
    171c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1720:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1724:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1728:	61500073 	cmpvs	r0, r3, ror r0
    172c:	415f6567 	cmpmi	pc, r7, ror #10
    1730:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    1734:	46007373 			; <UNDEFINED> instruction: 0x46007373
    1738:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    173c:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1740:	505f524f 	subspl	r5, pc, pc, asr #4
    1744:	4c460047 	mcrrmi	0, 4, r0, r6, cr7
    1748:	5f485341 	svcpl	0x00485341
    174c:	6b636f4c 	blvs	18dd484 <__Stack_Size+0x18dd084>
    1750:	50525700 	subspl	r5, r2, r0, lsl #14
    1754:	61445f33 	cmpvs	r4, r3, lsr pc
    1758:	73006174 	movwvc	r6, #372	; 0x174
    175c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1760:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1764:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1768:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    176c:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1770:	31663233 	cmncc	r6, r3, lsr r2
    1774:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
    1778:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    177c:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    1780:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1784:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1788:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    178c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1790:	46007375 			; <UNDEFINED> instruction: 0x46007375
    1794:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1798:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    179c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    17a0:	46006761 	strmi	r6, [r0], -r1, ror #14
    17a4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    17a8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 1634 <__Stack_Size+0x1234>
    17ac:	54454c50 	strbpl	r4, [r5], #-3152	; 0xc50
    17b0:	4c460045 	mcrrmi	0, 4, r0, r6, cr5
    17b4:	5f485341 	svcpl	0x00485341
    17b8:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
    17bc:	50525700 	subspl	r5, r2, r0, lsl #14
    17c0:	61445f31 	cmpvs	r4, r1, lsr pc
    17c4:	46006174 			; <UNDEFINED> instruction: 0x46006174
    17c8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    17cc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    17d0:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xf45
    17d4:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    17d8:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    17dc:	414c4600 	cmpmi	ip, r0, lsl #12
    17e0:	475f4853 			; <UNDEFINED> instruction: 0x475f4853
    17e4:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
    17e8:	754f6461 	strbvc	r6, [pc, #-1121]	; 138f <__Stack_Size+0xf8f>
    17ec:	6f725074 	svcvs	0x00725074
    17f0:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    17f4:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    17f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    17fc:	424f0073 	submi	r0, pc, #115	; 0x73
    1800:	4454535f 	ldrbmi	r5, [r4], #-863	; 0x35f
    1804:	57005942 	strpl	r5, [r0, -r2, asr #18]
    1808:	5f305052 	svcpl	0x00305052
    180c:	61746144 	cmnvs	r4, r4, asr #2
    1810:	414c4600 	cmpmi	ip, r0, lsl #12
    1814:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    1818:	43666c61 	cmnmi	r6, #24832	; 0x6100
    181c:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    1820:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    1824:	46007373 			; <UNDEFINED> instruction: 0x46007373
    1828:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    182c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1830:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1834:	4f007375 	svcmi	0x00007375
    1838:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    183c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1840:	4c460066 	mcrrmi	0, 6, r0, r6, cr6
    1844:	5f485341 	svcpl	0x00485341
    1848:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    184c:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    1850:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    1854:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
    1858:	4600646d 	strmi	r6, [r0], -sp, ror #8
    185c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1860:	6f72505f 	svcvs	0x0072505f
    1864:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1868:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    186c:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1870:	61446574 	hvcvs	18004	; 0x4654
    1874:	46006174 			; <UNDEFINED> instruction: 0x46006174
    1878:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    187c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1880:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1884:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1888:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    188c:	46006574 			; <UNDEFINED> instruction: 0x46006574
    1890:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1894:	6f72505f 	svcvs	0x0072505f
    1898:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    189c:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    18a0:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    18a4:	414c4600 	cmpmi	ip, r0, lsl #12
    18a8:	465f4853 			; <UNDEFINED> instruction: 0x465f4853
    18ac:	0047414c 	subeq	r4, r7, ip, asr #2
    18b0:	53414c46 	movtpl	r4, #7238	; 0x1c46
    18b4:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
    18b8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    18bc:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    18c0:	6f725065 	svcvs	0x00725065
    18c4:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    18c8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    18cc:	52455355 	subpl	r5, r5, #1409286145	; 0x54000001
    18d0:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    18d4:	44003061 	strmi	r3, [r0], #-97	; 0x61
    18d8:	31617461 	cmncc	r1, r1, ror #8
    18dc:	414c4600 	cmpmi	ip, r0, lsl #12
    18e0:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    18e4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    18e8:	414c4600 	cmpmi	ip, r0, lsl #12
    18ec:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    18f0:	4c460054 	mcrrmi	0, 5, r0, r6, cr4
    18f4:	5f485341 	svcpl	0x00485341
    18f8:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    18fc:	576d6172 			; <UNDEFINED> instruction: 0x576d6172
    1900:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1904:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1908:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    190c:	414c4600 	cmpmi	ip, r0, lsl #12
    1910:	545f4853 	ldrbpl	r4, [pc], #-2131	; 1918 <__Stack_Size+0x1518>
    1914:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1918:	46006665 	strmi	r6, [r0], -r5, ror #12
    191c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1920:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1924:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    1928:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    192c:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
    1930:	6f697461 	svcvs	0x00697461
    1934:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    1938:	5f485341 	svcpl	0x00485341
    193c:	66657250 			; <UNDEFINED> instruction: 0x66657250
    1940:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1944:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1948:	70007265 	andvc	r7, r0, r5, ror #4
    194c:	6f706e69 	svcvs	0x00706e69
    1950:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1954:	45535f74 	ldrbmi	r5, [r3, #-3956]	; 0xf74
    1958:	50470054 	subpl	r0, r7, r4, asr r0
    195c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1960:	4f646165 	svcmi	0x00646165
    1964:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    1968:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    196c:	50470061 	subpl	r0, r7, r1, rrx
    1970:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; a2f <__Stack_Size+0x62f>
    1974:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    1978:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    197c:	6d437475 	cfstrdvs	mvd7, [r3, #-468]	; 0xfffffe2c
    1980:	69420064 	stmdbvs	r2, {r2, r5, r6}^
    1984:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1988:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    198c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1990:	47005445 	strmi	r5, [r0, -r5, asr #8]
    1994:	5f4f4950 	svcpl	0x004f4950
    1998:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    199c:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
    19a0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    19a4:	00524349 	subseq	r4, r2, r9, asr #6
    19a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    19ac:	30316632 	eorscc	r6, r1, r2, lsr r6
    19b0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19b4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    19b8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    19bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    19c0:	5f783031 	svcpl	0x00783031
    19c4:	6f697067 	svcvs	0x00697067
    19c8:	7000632e 	andvc	r6, r0, lr, lsr #6
    19cc:	616d6e69 	cmnvs	sp, r9, ror #28
    19d0:	47006b73 	smlsdxmi	r0, r3, fp, r6
    19d4:	5f4f4950 	svcpl	0x004f4950
    19d8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    19dc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    19e0:	47006563 	strmi	r6, [r0, -r3, ror #10]
    19e4:	5f4f4950 	svcpl	0x004f4950
    19e8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    19ec:	47007469 	strmi	r7, [r0, -r9, ror #8]
    19f0:	5f4f4950 	svcpl	0x004f4950
    19f4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    19f8:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xf74
    19fc:	43747570 	cmnmi	r4, #112, 10	; 0x1c000000
    1a00:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a04:	50470067 	subpl	r0, r7, r7, rrx
    1a08:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1a0c:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1a10:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1a14:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    1a18:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1a1c:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    1a20:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1a24:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    1a28:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    1a2c:	6f500067 	svcvs	0x00500067
    1a30:	61567472 	cmpvs	r6, r2, ror r4
    1a34:	7563006c 	strbvc	r0, [r3, #-108]!	; 0x6c
    1a38:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1a3c:	646f6d74 	strbtvs	r6, [pc], #-3444	; 1a44 <__Stack_Size+0x1644>
    1a40:	50470065 	subpl	r0, r7, r5, rrx
    1a44:	505f4f49 	subspl	r4, pc, r9, asr #30
    1a48:	6f536e69 	svcvs	0x00536e69
    1a4c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1a50:	43435200 	movtmi	r5, #12800	; 0x3200
    1a54:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1a58:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1a5c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1a60:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1a64:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a68:	4f495047 	svcmi	0x00495047
    1a6c:	6165525f 	cmnvs	r5, pc, asr r2
    1a70:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1a74:	61447475 	hvcvs	18245	; 0x4745
    1a78:	74006174 	strvc	r6, [r0], #-372	; 0x174
    1a7c:	616d706d 	cmnvs	sp, sp, rrx
    1a80:	47006b73 	smlsdxmi	r0, r3, fp, r6
    1a84:	5f4f4950 	svcpl	0x004f4950
    1a88:	4c6e6950 	stclmi	9, cr6, [lr], #-320	; 0xfffffec0
    1a8c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1a90:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a94:	75630067 	strbvc	r0, [r3, #-103]!	; 0x67
    1a98:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1a9c:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
    1aa0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1aa4:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1aa8:	00657469 	rsbeq	r7, r5, r9, ror #8
    1aac:	31706d74 	cmncc	r0, r4, ror sp
    1ab0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ab4:	58455f4f 	stmdapl	r5, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1ab8:	694c4954 	stmdbvs	ip, {r2, r4, r6, r8, fp, lr}^
    1abc:	6f43656e 	svcvs	0x0043656e
    1ac0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ac4:	49464100 	stmdbmi	r6, {r8, lr}^
    1ac8:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1acc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1ad0:	69420066 	stmdbvs	r2, {r1, r2, r5, r6}^
    1ad4:	74634174 	strbtvc	r4, [r3], #-372	; 0x174
    1ad8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1adc:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    1ae0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ae4:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    1ae8:	5f4f4950 	svcpl	0x004f4950
    1aec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1af0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1af4:	45007463 	strmi	r7, [r0, #-1123]	; 0x463
    1af8:	00524356 	subseq	r4, r2, r6, asr r3
    1afc:	4f495047 	svcmi	0x00495047
    1b00:	6165525f 	cmnvs	r5, pc, asr r2
    1b04:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
    1b08:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
    1b0c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1b10:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1b14:	5f4f4950 	svcpl	0x004f4950
    1b18:	4f494641 	svcmi	0x00494641
    1b1c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1b20:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1b24:	00524241 	subseq	r4, r2, r1, asr #4
    1b28:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b2c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1b30:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    1b34:	61684351 	cmnvs	r8, r1, asr r3
    1b38:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1b3c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1b40:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1b44:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1b48:	5f434956 	svcpl	0x00434956
    1b4c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1b50:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1b54:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    1b58:	5f434956 	svcpl	0x00434956
    1b5c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1b60:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1b64:	6550746e 	ldrbvs	r7, [r0, #-1134]	; 0x46e
    1b68:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1b6c:	51524967 	cmppl	r2, r7, ror #18
    1b70:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1b74:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1b78:	4349564e 	movtmi	r5, #38478	; 0x964e
    1b7c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1b80:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
    1b84:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    1b88:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1b8c:	73795300 	cmnvc	r9, #0, 6
    1b90:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1b94:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1b98:	75537265 	ldrbvc	r7, [r3, #-613]	; 0x265
    1b9c:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1ba0:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1ba4:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1ba8:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1bac:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1bb0:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1bb4:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1bb8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1bbc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1bc0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    1bc4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1bc8:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
    1bcc:	74007465 	strvc	r7, [r0], #-1125	; 0x465
    1bd0:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1bd4:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1bd8:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1bdc:	54455345 	strbpl	r5, [r5], #-837	; 0x345
    1be0:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
    1be4:	004b5341 	subeq	r5, fp, r1, asr #6
    1be8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1bec:	64646174 	strbtvs	r6, [r4], #-372	; 0x174
    1bf0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1bf4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1bf8:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1bfc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1c00:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1c04:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1c08:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1c0c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1c10:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c14:	5f5f0067 	svcpl	0x005f0067
    1c18:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    1c1c:	50455341 	subpl	r5, r5, r1, asr #6
    1c20:	73004952 	movwvc	r4, #2386	; 0x952
    1c24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1c28:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1c2c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1c30:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1c34:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    1c38:	31663233 	cmncc	r6, r3, lsr r2
    1c3c:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
    1c40:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
    1c44:	564e0063 	strbpl	r0, [lr], -r3, rrx
    1c48:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1c4c:	50437465 	subpl	r7, r3, r5, ror #8
    1c50:	00444955 	subeq	r4, r4, r5, asr r9
    1c54:	4349564e 	movtmi	r5, #38478	; 0x964e
    1c58:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1c5c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1c60:	6f724779 	svcvs	0x00724779
    1c64:	4e007075 	mcrmi	0, 0, r7, cr0, cr5, {3}
    1c68:	5f434956 	svcpl	0x00434956
    1c6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1c70:	55414654 	strbpl	r4, [r1, #-1620]	; 0x654
    1c74:	414d544c 	cmpmi	sp, ip, asr #8
    1c78:	4e004b53 	mcrmi	11, 0, r4, cr0, cr3, {2}
    1c7c:	5f434956 	svcpl	0x00434956
    1c80:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1c84:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1c88:	6341746e 	movtvs	r7, #5230	; 0x146e
    1c8c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1c90:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1c94:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1c98:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1c9c:	61486d65 	cmpvs	r8, r5, ror #26
    1ca0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1ca4:	43490072 	movtmi	r0, #36978	; 0x9072
    1ca8:	5f005253 	svcpl	0x00005253
    1cac:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    1cb0:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    1cb4:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1cb8:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1cbc:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1cc0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1cc4:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    1cc8:	5265726f 	rsbpl	r7, r5, #-268435450	; 0xf0000006
    1ccc:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1cd0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1cd4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1cd8:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
    1cdc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1ce0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1ce4:	63417265 	movtvs	r7, #4709	; 0x1265
    1ce8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    1cec:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1cf0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1cf4:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    1cf8:	425f4349 	subsmi	r4, pc, #603979777	; 0x24000001
    1cfc:	50455341 	subpl	r5, r5, r1, asr #6
    1d00:	4f434952 	svcmi	0x00434952
    1d04:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1d08:	41464200 	mrsmi	r4, (UNDEF: 102)
    1d0c:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1d10:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1d14:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1d18:	61684351 	cmnvs	r8, r1, asr r3
    1d1c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1d20:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1d24:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1d28:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    1d2c:	6f70706d 	svcvs	0x0070706d
    1d30:	46430073 			; <UNDEFINED> instruction: 0x46430073
    1d34:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    1d38:	5f434956 	svcpl	0x00434956
    1d3c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    1d40:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1d44:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1d48:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1d4c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1d50:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1d54:	41007469 	tstmi	r0, r9, ror #8
    1d58:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
    1d5c:	50434900 	subpl	r4, r3, r0, lsl #18
    1d60:	5f5f0052 	svcpl	0x005f0052
    1d64:	45534142 	ldrbmi	r4, [r3, #-322]	; 0x142
    1d68:	43495250 	movtmi	r5, #37456	; 0x9250
    1d6c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1d70:	48530047 	ldmdami	r3, {r0, r1, r2, r6}^
    1d74:	53005250 	movwpl	r5, #592	; 0x250
    1d78:	52534348 	subspl	r4, r3, #72, 6	; 0x20000001
    1d7c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1d80:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1d84:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1d88:	564e0066 	strbpl	r0, [lr], -r6, rrx
    1d8c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1d90:	41427465 	cmpmi	r2, r5, ror #8
    1d94:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    1d98:	53520049 	cmppl	r2, #73	; 0x49
    1d9c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1da0:	5f003144 	svcpl	0x00003144
    1da4:	5345525f 	movtpl	r5, #21087	; 0x525f
    1da8:	41465445 	cmpmi	r6, r5, asr #8
    1dac:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
    1db0:	004b5341 	subeq	r5, fp, r1, asr #6
    1db4:	41464d4d 	cmpmi	r6, sp, asr #26
    1db8:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
    1dbc:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    1dc0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1dc4:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1dc8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1dcc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1dd0:	4372656c 	cmnmi	r2, #108, 10	; 0x1b000000
    1dd4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1dd8:	564e0067 	strbpl	r0, [lr], -r7, rrx
    1ddc:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1de0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1de4:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    1de8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1dec:	664f0067 	strbvs	r0, [pc], -r7, rrx
    1df0:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    1df4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1df8:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    1dfc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    1e00:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1e04:	45434900 	strbmi	r4, [r3, #-2304]	; 0x900
    1e08:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
    1e0c:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    1e10:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1e14:	54560079 	ldrbpl	r0, [r6], #-121	; 0x79
    1e18:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    1e1c:	00525053 	subseq	r5, r2, r3, asr r0
    1e20:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
    1e24:	53464800 	movtpl	r4, #26624	; 0x6800
    1e28:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1e2c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1e30:	41465445 	cmpmi	r6, r5, asr #8
    1e34:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
    1e38:	004b5341 	subeq	r5, fp, r1, asr #6
    1e3c:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
    1e40:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
    1e44:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1e48:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1e4c:	61467465 	cmpvs	r6, r5, ror #8
    1e50:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    1e54:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1e58:	6f537265 	svcvs	0x00537265
    1e5c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1e60:	43530073 	cmpmi	r3, #115	; 0x73
    1e64:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    1e68:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1e6c:	6d740066 	ldclvs	0, cr0, [r4, #-408]!	; 0xfffffe68
    1e70:	4e003270 	mcrmi	2, 0, r3, cr0, cr0, {3}
    1e74:	5f434956 	svcpl	0x00434956
    1e78:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1e7c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1e80:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1e84:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1e88:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1e8c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1e90:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1e94:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e98:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1e9c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1ea0:	53726165 	cmnpl	r2, #1073741849	; 0x40000019
    1ea4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    1ea8:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1eac:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1eb0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1eb4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1eb8:	76007469 	strvc	r7, [r0], -r9, ror #8
    1ebc:	32336375 	eorscc	r6, r3, #-738197503	; 0xd4000001
    1ec0:	75616600 	strbvc	r6, [r1, #-1536]!	; 0x600
    1ec4:	6f73746c 	svcvs	0x0073746c
    1ec8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1ecc:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    1ed0:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    1ed4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1ed8:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1edc:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    1ee0:	6f697470 	svcvs	0x00697470
    1ee4:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    1ee8:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1eec:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    1ef0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1ef4:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1ef8:	61684351 	cmnvs	r8, r1, asr r3
    1efc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1f00:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1f04:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1f08:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1f0c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f10:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1f14:	43535f43 	cmpmi	r3, #268	; 0x10c
    1f18:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
    1f1c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1f20:	5077654e 	rsbspl	r6, r7, lr, asr #10
    1f24:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1f28:	00797469 	rsbseq	r7, r9, r9, ror #8
    1f2c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1f30:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1f34:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    1f38:	74636100 	strbtvc	r6, [r3], #-256	; 0x100
    1f3c:	69657669 	stmdbvs	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1f40:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    1f44:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f48:	535f5f00 	cmppl	pc, #0, 30
    1f4c:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1f50:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1f54:	6168004b 	cmnvs	r8, fp, asr #32
    1f58:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    1f5c:	73616d72 	cmnvc	r1, #7296	; 0x1c80
    1f60:	5f5f006b 	svcpl	0x005f006b
    1f64:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1f68:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    1f6c:	4b53414d 	blmi	14d24a8 <__Stack_Size+0x14d20a8>
    1f70:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1f74:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
    1f78:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1f80 <__Stack_Size+0x1b80>
    1f7c:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1f80:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1f84:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1f88:	61684351 	cmnvs	r8, r1, asr r3
    1f8c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1f90:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1f94:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1f98:	61745374 	cmnvs	r4, r4, ror r3
    1f9c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1fa0:	4349564e 	movtmi	r5, #38478	; 0x964e
    1fa4:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1fa8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1fac:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1fb0:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1fb4:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    1fb8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1fbc:	52575000 	subspl	r5, r7, #0
    1fc0:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    1fc4:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    1fc8:	42444e41 	submi	r4, r4, #1040	; 0x410
    1fcc:	646f4d59 	strbtvs	r4, [pc], #-3417	; 1fd4 <__Stack_Size+0x1bd4>
    1fd0:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    1fd4:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    1fd8:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1fdc:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1fe0:	5f525750 	svcpl	0x00525750
    1fe4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1fe8:	50007469 	andpl	r7, r0, r9, ror #8
    1fec:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    1ff0:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1ff4:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    1ff8:	52575000 	subspl	r5, r7, #0
    1ffc:	4456505f 	ldrbmi	r5, [r6], #-95	; 0x5f
    2000:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    2004:	5750006c 	ldrbpl	r0, [r0, -ip, rrx]
    2008:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    200c:	50004741 	andpl	r4, r0, r1, asr #14
    2010:	545f5257 	ldrbpl	r5, [pc], #-599	; 2018 <__Stack_Size+0x1c18>
    2014:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2018:	50006665 	andpl	r6, r0, r5, ror #12
    201c:	505f5257 	subspl	r5, pc, r7, asr r2	; <UNPREDICTABLE>
    2020:	6d434456 	cfstrdvs	mvd4, [r3, #-344]	; 0xfffffea8
    2024:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
    2028:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    202c:	5f783031 	svcpl	0x00783031
    2030:	2f62696c 	svccs	0x0062696c
    2034:	2f637273 	svccs	0x00637273
    2038:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    203c:	30316632 	eorscc	r6, r1, r2, lsr r6
    2040:	77705f78 			; <UNDEFINED> instruction: 0x77705f78
    2044:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2048:	5f525750 	svcpl	0x00525750
    204c:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    2050:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    2054:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2058:	50006769 	andpl	r6, r0, r9, ror #14
    205c:	475f5257 			; <UNDEFINED> instruction: 0x475f5257
    2060:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    2064:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    2068:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    206c:	575f5f00 	ldrbpl	r5, [pc, -r0, lsl #30]
    2070:	5f004546 	svcpl	0x00004546
    2074:	4946575f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2078:	52575000 	subspl	r5, r7, #0
    207c:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    2080:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    2084:	6f4d504f 	svcvs	0x004d504f
    2088:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    208c:	415f4343 	cmpmi	pc, r3, asr #6
    2090:	50314250 	eorspl	r4, r1, r0, asr r2
    2094:	70697265 	rsbvc	r7, r9, r5, ror #4
    2098:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    209c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    20a0:	57500064 	ldrbpl	r0, [r0, -r4, rrx]
    20a4:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
    20a8:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    20ac:	00797274 	rsbseq	r7, r9, r4, ror r2
    20b0:	5f525750 	svcpl	0x00525750
    20b4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    20b8:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    20bc:	646d436e 	strbtvs	r4, [sp], #-878	; 0x36e
    20c0:	43435200 	movtmi	r5, #12800	; 0x3200
    20c4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    20c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    20cc:	42504100 	subsmi	r4, r0, #0, 2
    20d0:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
    20d4:	43520052 	cmpmi	r2, #82	; 0x52
    20d8:	43485f43 	movtmi	r5, #36675	; 0x8f43
    20dc:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
    20e0:	415f4343 	cmpmi	pc, r3, asr #6
    20e4:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    20e8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    20ec:	00676966 	rsbeq	r6, r7, r6, ror #18
    20f0:	5f434352 	svcpl	0x00434352
    20f4:	61656c43 	cmnvs	r5, r3, asr #24
    20f8:	50544972 	subspl	r4, r4, r2, ror r9
    20fc:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2100:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2104:	43520074 	cmpmi	r2, #116	; 0x74
    2108:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    210c:	43520045 	cmpmi	r2, #69	; 0x45
    2110:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2114:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    2118:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    211c:	44420073 	strbmi	r0, [r2], #-115	; 0x73
    2120:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    2124:	415f4343 	cmpmi	pc, r3, asr #6
    2128:	50324250 	eorspl	r4, r2, r0, asr r2
    212c:	70697265 	rsbvc	r7, r9, r5, ror #4
    2130:	43520068 	cmpmi	r2, #104	; 0x68
    2134:	43505f43 	cmpmi	r0, #268	; 0x10c
    2138:	00324b4c 	eorseq	r4, r2, ip, asr #22
    213c:	5f434352 	svcpl	0x00434352
    2140:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2144:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    2148:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    214c:	43520066 	cmpmi	r2, #102	; 0x66
    2150:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2154:	6c754d4c 	ldclvs	13, cr4, [r5], #-304	; 0xfffffed0
    2158:	43435200 	movtmi	r5, #12800	; 0x3200
    215c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2160:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2164:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2168:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    216c:	4300646d 	movwmi	r6, #1133	; 0x46d
    2170:	00524746 	subseq	r4, r2, r6, asr #14
    2174:	4b4c4348 	blmi	1312e9c <__Stack_Size+0x1312a9c>
    2178:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    217c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2180:	41007963 	tstmi	r0, r3, ror #18
    2184:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
    2188:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    218c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2088 <__Stack_Size+0x1c88>
    2190:	6f434f43 	svcvs	0x00434f43
    2194:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2198:	43435200 	movtmi	r5, #12800	; 0x3200
    219c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    21a0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    21a4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    21a8:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
    21ac:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    21b0:	4352006c 	cmpmi	r2, #108	; 0x6c
    21b4:	53555f43 	cmppl	r5, #268	; 0x10c
    21b8:	4b4c4342 	blmi	1312ec8 <__Stack_Size+0x1312ac8>
    21bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21c0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    21c4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    21c8:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    21cc:	50410064 	subpl	r0, r1, r4, rrx
    21d0:	53523242 	cmppl	r2, #536870916	; 0x20000004
    21d4:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    21d8:	415f4343 	cmpmi	pc, r3, asr #6
    21dc:	50314250 	eorspl	r4, r1, r0, asr r2
    21e0:	70697265 	rsbvc	r7, r9, r5, ror #4
    21e4:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
    21e8:	756f736c 	strbvc	r7, [pc, #-876]!	; 1e84 <__Stack_Size+0x1a84>
    21ec:	00656372 	rsbeq	r6, r5, r2, ror r3
    21f0:	45424841 	strbmi	r4, [r2, #-2113]	; 0x841
    21f4:	7300524e 	movwvc	r5, #590	; 0x24e
    21f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    21fc:	67657273 			; <UNDEFINED> instruction: 0x67657273
    2200:	42504100 	subsmi	r4, r0, #0, 2
    2204:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    2208:	61745300 	cmnvs	r4, r0, lsl #6
    220c:	70557472 	subsvc	r7, r5, r2, ror r4
    2210:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2214:	00726574 	rsbseq	r6, r2, r4, ror r5
    2218:	5f434352 	svcpl	0x00434352
    221c:	6b636142 	blvs	18da72c <__Stack_Size+0x18da32c>
    2220:	65527075 	ldrbvs	r7, [r2, #-117]	; 0x75
    2224:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2228:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    222c:	415f4343 	cmpmi	pc, r3, asr #6
    2230:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    2234:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
    2238:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    223c:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
    2240:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    2244:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    2248:	43444100 	movtmi	r4, #16640	; 0x4100
    224c:	5f4b4c43 	svcpl	0x004b4c43
    2250:	71657246 	cmnvc	r5, r6, asr #4
    2254:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2258:	43520079 	cmpmi	r2, #121	; 0x79
    225c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    2260:	52004741 	andpl	r4, r0, #17039360	; 0x1040000
    2264:	505f4343 	subspl	r4, pc, r3, asr #6
    2268:	6f534c4c 	svcvs	0x00534c4c
    226c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2270:	43435200 	movtmi	r5, #12800	; 0x3200
    2274:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2278:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    227c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2280:	43520067 	cmpmi	r2, #103	; 0x67
    2284:	53555f43 	cmppl	r5, #268	; 0x10c
    2288:	4b4c4342 	blmi	1312f98 <__Stack_Size+0x1312b98>
    228c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2290:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2294:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2298:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    229c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    22a0:	43435200 	movtmi	r5, #12800	; 0x3200
    22a4:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    22a8:	004b4c43 	subeq	r4, fp, r3, asr #24
    22ac:	53455348 	movtpl	r5, #21320	; 0x5348
    22b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    22b4:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    22b8:	4b4c4353 	blmi	131300c <__Stack_Size+0x1312c0c>
    22bc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    22c0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    22c4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    22c8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    22cc:	6b636f6c 	blvs	18de084 <__Stack_Size+0x18ddc84>
    22d0:	43500073 	cmpmi	r0, #115	; 0x73
    22d4:	5f324b4c 	svcpl	0x00324b4c
    22d8:	71657246 	cmnvc	r5, r6, asr #4
    22dc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    22e0:	43520079 	cmpmi	r2, #121	; 0x79
    22e4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    22e8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    22ec:	70006769 	andvc	r6, r0, r9, ror #14
    22f0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    22f4:	43435200 	movtmi	r5, #12800	; 0x3200
    22f8:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0x85f
    22fc:	43435200 	movtmi	r5, #12800	; 0x3200
    2300:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    2304:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2308:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    230c:	43500065 	cmpmi	r0, #101	; 0x65
    2310:	5f314b4c 	svcpl	0x00314b4c
    2314:	71657246 	cmnvc	r5, r6, asr #4
    2318:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    231c:	50410079 	subpl	r0, r1, r9, ror r0
    2320:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    2324:	73657250 	cmnvc	r5, #80, 4
    2328:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    232c:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    2330:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2334:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2338:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    233c:	71657246 	cmnvc	r5, r6, asr #4
    2340:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2344:	31663233 	cmncc	r6, r3, lsr r2
    2348:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    234c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    2350:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2354:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2358:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    235c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    2360:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    2364:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    2368:	6f434553 	svcvs	0x00434553
    236c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2370:	43435200 	movtmi	r5, #12800	; 0x3200
    2374:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2378:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    237c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2380:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2384:	6b636f6c 	blvs	18de13c <__Stack_Size+0x18ddd3c>
    2388:	75636553 	strbvc	r6, [r3, #-1363]!	; 0x553
    238c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2390:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    2394:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
    2398:	43520064 	cmpmi	r2, #100	; 0x64
    239c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    23a0:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    23a4:	43435200 	movtmi	r5, #12800	; 0x3200
    23a8:	4f434d5f 	svcmi	0x00434d5f
    23ac:	43435200 	movtmi	r5, #12800	; 0x3200
    23b0:	0054495f 	subseq	r4, r4, pc, asr r9
    23b4:	5f434352 	svcpl	0x00434352
    23b8:	50424841 	subpl	r4, r2, r1, asr #16
    23bc:	70697265 	rsbvc	r7, r9, r5, ror #4
    23c0:	44410068 	strbmi	r0, [r1], #-104	; 0x68
    23c4:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    23c8:	61546373 	cmpvs	r4, r3, ror r3
    23cc:	00656c62 	rsbeq	r6, r5, r2, ror #24
    23d0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    23d4:	5f6b6369 	svcpl	0x006b6369
    23d8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    23dc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    23e0:	53007265 	movwpl	r7, #613	; 0x265
    23e4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    23e8:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    23ec:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    23f0:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    23f4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    23f8:	73795300 	cmnvc	r9, #0, 6
    23fc:	6b636954 	blvs	18dc954 <__Stack_Size+0x18dc554>
    2400:	414c465f 	cmpmi	ip, pc, asr r6
    2404:	41430047 	cmpmi	r3, r7, asr #32
    2408:	0042494c 	subeq	r4, r2, ip, asr #18
    240c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2410:	30316632 	eorscc	r6, r1, r2, lsr r6
    2414:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2418:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    241c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2420:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2424:	5f783031 	svcpl	0x00783031
    2428:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    242c:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    2430:	54430063 	strbpl	r0, [r3], #-99	; 0x63
    2434:	53004c52 	movwpl	r4, #3154	; 0xc52
    2438:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    243c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2440:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2444:	53007265 	movwpl	r7, #613	; 0x265
    2448:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    244c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2450:	6f534b4c 	svcvs	0x00534b4c
    2454:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2458:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    245c:	4c006769 	stcmi	7, cr6, [r0], {105}	; 0x69
    2460:	0044414f 	subeq	r4, r4, pc, asr #2
    2464:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2468:	5f6b6369 	svcpl	0x006b6369
    246c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2470:	00666544 	rsbeq	r6, r6, r4, asr #10
    2474:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2478:	5f6b6369 	svcpl	0x006b6369
    247c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2480:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2484:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2488:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    248c:	73614634 	cmnvc	r1, #52, 12	; 0x3400000
    2490:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2494:	00676966 	rsbeq	r6, r7, r6, ror #18
    2498:	5f4d4954 	svcpl	0x004d4954
    249c:	5031434f 	eorspl	r4, r1, pc, asr #6
    24a0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    24a4:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    24a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24ac:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    24b0:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    24b4:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    24b8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    24bc:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    24c0:	4f5f4d49 	svcmi	0x005f4d49
    24c4:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    24c8:	616f6c65 	cmnvs	pc, r5, ror #24
    24cc:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    24d0:	00676966 	rsbeq	r6, r7, r6, ror #18
    24d4:	5f4d4954 	svcpl	0x004d4954
    24d8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    24dc:	61706d6f 	cmnvs	r0, pc, ror #26
    24e0:	00326572 	eorseq	r6, r2, r2, ror r5
    24e4:	5f4d4954 	svcpl	0x004d4954
    24e8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    24ec:	61706d6f 	cmnvs	r0, pc, ror #26
    24f0:	00346572 	eorseq	r6, r4, r2, ror r5
    24f4:	5f4d4954 	svcpl	0x004d4954
    24f8:	4e33434f 	cdpmi	3, 3, cr4, cr3, cr15, {2}
    24fc:	616c6f50 	cmnvs	ip, r0, asr pc
    2500:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2504:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2508:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    250c:	4f5f4d49 	svcmi	0x005f4d49
    2510:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    2514:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    2518:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    251c:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2520:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2524:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2528:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    252c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2530:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    2534:	616c4674 	smcvs	50276	; 0xc464
    2538:	61745367 	cmnvs	r4, r7, ror #6
    253c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2540:	5f324954 	svcpl	0x00324954
    2544:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2548:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    254c:	4f5f4d49 	svcmi	0x005f4d49
    2550:	73614643 	cmnvc	r1, #70254592	; 0x4300000
    2554:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2558:	4b435f4d 	blmi	10da294 <__Stack_Size+0x10d9e94>
    255c:	49540044 	ldmdbmi	r4, {r2, r6}^
    2560:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2564:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2568:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    256c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2570:	5f4d4954 	svcpl	0x004d4954
    2574:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
    2578:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    257c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2580:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2584:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2588:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1847 <__Stack_Size+0x1447>
    258c:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    2590:	65725047 	ldrbvs	r5, [r2, #-71]!	; 0x47
    2594:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2598:	54007265 	strpl	r7, [r0], #-613	; 0x265
    259c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    25a0:	434e7843 	movtmi	r7, #59459	; 0xe843
    25a4:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    25a8:	616e6574 	smcvs	58964	; 0xe654
    25ac:	00656c62 	rsbeq	r6, r5, r2, ror #24
    25b0:	5f4d4954 	svcpl	0x004d4954
    25b4:	5032434f 	eorspl	r4, r2, pc, asr #6
    25b8:	6f6c6572 	svcvs	0x006c6572
    25bc:	6f436461 	svcvs	0x00436461
    25c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25c4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25c8:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    25cc:	4f646563 	svcmi	0x00646563
    25d0:	6f433243 	svcvs	0x00433243
    25d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25dc:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    25e0:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    25e4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    25e8:	6f437473 	svcvs	0x00437473
    25ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25f0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    25f4:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    25f8:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    25fc:	414d4443 	cmpmi	sp, r3, asr #8
    2600:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2604:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
    2608:	0065646f 	rsbeq	r6, r5, pc, ror #8
    260c:	5f4d4954 	svcpl	0x004d4954
    2610:	50314349 	eorspl	r4, r1, r9, asr #6
    2614:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2618:	00797469 	rsbseq	r7, r9, r9, ror #8
    261c:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    2620:	0072636d 	rsbseq	r6, r2, sp, ror #6
    2624:	5f4d4954 	svcpl	0x004d4954
    2628:	4633434f 	ldrtmi	r4, [r3], -pc, asr #6
    262c:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    2630:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2634:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2638:	5400784d 	strpl	r7, [r0], #-2125	; 0x84d
    263c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2640:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2644:	74634164 	strbtvc	r4, [r3], #-356	; 0x164
    2648:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    264c:	5f4d4954 	svcpl	0x004d4954
    2650:	50324349 	eorspl	r4, r2, r9, asr #6
    2654:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2658:	00797469 	rsbseq	r7, r9, r9, ror #8
    265c:	5f4d4954 	svcpl	0x004d4954
    2660:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2664:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    2668:	61637365 	cmnvs	r3, r5, ror #6
    266c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2670:	5f4d4954 	svcpl	0x004d4954
    2674:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2678:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2680 <__Stack_Size+0x2280>
    267c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2680:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2684:	74534953 	ldrbvc	r4, [r3], #-2387	; 0x953
    2688:	00657461 	rsbeq	r7, r5, r1, ror #8
    268c:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    2690:	54003172 	strpl	r3, [r0], #-370	; 0x172
    2694:	4f5f4d49 	svcmi	0x005f4d49
    2698:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    269c:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    26a0:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 195f <__Stack_Size+0x155f>
    26a4:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    26a8:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    26ac:	3265646f 	rsbcc	r6, r5, #1862270976	; 0x6f000000
    26b0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    26b4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    26b8:	435f3149 	cmpmi	pc, #1073741842	; 0x40000012
    26bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26c0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26c4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    26c8:	70614374 	rsbvc	r4, r1, r4, ror r3
    26cc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    26d0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    26d4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    26d8:	70614374 	rsbvc	r4, r1, r4, ror r3
    26dc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    26e0:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    26e4:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    26e8:	70614374 	rsbvc	r4, r1, r4, ror r3
    26ec:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    26f0:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    26f4:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    26f8:	72754241 	rsbsvc	r4, r5, #268435460	; 0x10000004
    26fc:	654c7473 	strbvs	r7, [ip, #-1139]	; 0x473
    2700:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2704:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2708:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    270c:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2710:	54006761 	strpl	r6, [r0], #-1889	; 0x761
    2714:	4f5f4d49 	svcmi	0x005f4d49
    2718:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    271c:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2720:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2724:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2728:	5234434f 	eorspl	r4, r4, #1006632961	; 0x3c000001
    272c:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2730:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2734:	45785254 	ldrbmi	r5, [r8, #-596]!	; 0x254
    2738:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    273c:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2740:	6b636f6c 	blvs	18de4f8 <__Stack_Size+0x18de0f8>
    2744:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2748:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    274c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 2754 <__Stack_Size+0x2354>
    2750:	6f43414d 	svcvs	0x0043414d
    2754:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2758:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    275c:	5252415f 	subspl	r4, r2, #-1073741801	; 0xc0000017
    2760:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2764:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2768:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    276c:	74730067 	ldrbtvc	r0, [r3], #-103	; 0x67
    2770:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2774:	5f783031 	svcpl	0x00783031
    2778:	2f62696c 	svccs	0x0062696c
    277c:	2f637273 	svccs	0x00637273
    2780:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2784:	30316632 	eorscc	r6, r1, r2, lsr r6
    2788:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    278c:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2790:	5f4d4954 	svcpl	0x004d4954
    2794:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2798:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    279c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    27a0:	74007463 	strvc	r7, [r0], #-1123	; 0x463
    27a4:	6363706d 	cmnvs	r3, #109	; 0x6d
    27a8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    27ac:	535f4d49 	cmppl	pc, #4672	; 0x1240
    27b0:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    27b4:	446b636f 	strbtmi	r6, [fp], #-879	; 0x36f
    27b8:	73697669 	cmnvc	r9, #110100480	; 0x6900000
    27bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    27c0:	5f4d4954 	svcpl	0x004d4954
    27c4:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    27c8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    27cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    27d0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    27d4:	72425f4d 	subvc	r5, r2, #308	; 0x134
    27d8:	506b6165 	rsbpl	r6, fp, r5, ror #2
    27dc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    27e0:	00797469 	rsbseq	r7, r9, r9, ror #8
    27e4:	5f4d4954 	svcpl	0x004d4954
    27e8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    27ec:	754f7463 	strbvc	r7, [pc, #-1123]	; 2391 <__Stack_Size+0x1f91>
    27f0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    27f4:	67697254 			; <UNDEFINED> instruction: 0x67697254
    27f8:	00726567 	rsbseq	r6, r2, r7, ror #10
    27fc:	5f4d4954 	svcpl	0x004d4954
    2800:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2804:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    2808:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    280c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2810:	54007463 	strpl	r7, [r0], #-1123	; 0x463
    2814:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2818:	63656c65 	cmnvs	r5, #25856	; 0x6500
    281c:	78434f74 	stmdavc	r3, {r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    2820:	6d74004d 	ldclvs	0, cr0, [r4, #-308]!	; 0xfffffecc
    2824:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2828:	54007872 	strpl	r7, [r0], #-2162	; 0x872
    282c:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2830:	0047414c 	subeq	r4, r7, ip, asr #2
    2834:	5f4d4954 	svcpl	0x004d4954
    2838:	4b434f4c 	blmi	10d6570 <__Stack_Size+0x10d6170>
    283c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    2840:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    2844:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2848:	756f4374 	strbvc	r4, [pc, #-884]!	; 24dc <__Stack_Size+0x20dc>
    284c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2850:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2854:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    2858:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    285c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2860:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2864:	5043495f 	subpl	r4, r3, pc, asr r9
    2868:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    286c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2870:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2874:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    2878:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    287c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2880:	4353505f 	cmpmi	r3, #95	; 0x5f
    2884:	6f6c6552 	svcvs	0x006c6552
    2888:	6f4d6461 	svcvs	0x004d6461
    288c:	54006564 	strpl	r6, [r0], #-1380	; 0x564
    2890:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2894:	6d437843 	stclvs	8, cr7, [r3, #-268]	; 0xfffffef4
    2898:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    289c:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xf4d
    28a0:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    28a4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    28a8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    28ac:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 28b4 <__Stack_Size+0x24b4>
    28b0:	6142414d 	cmpvs	r2, sp, asr #2
    28b4:	54006573 	strpl	r6, [r0], #-1395	; 0x573
    28b8:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    28bc:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    28c0:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    28c4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    28c8:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    28cc:	535f4d49 	cmppl	pc, #4672	; 0x1240
    28d0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    28d4:	6c614874 	stclvs	8, cr4, [r1], #-464	; 0xfffffe30
    28d8:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    28dc:	00726f73 	rsbseq	r6, r2, r3, ror pc
    28e0:	5f4d4954 	svcpl	0x004d4954
    28e4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    28e8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
    28ec:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    28f0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    28f4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    28f8:	32434974 	subcc	r4, r3, #116, 18	; 0x1d0000
    28fc:	73657250 	cmnvc	r5, #80, 4
    2900:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    2904:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2908:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    290c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    2910:	746e4972 	strbtvc	r4, [lr], #-2418	; 0x972
    2914:	61667265 	cmnvs	r6, r5, ror #4
    2918:	6f436563 	svcvs	0x00436563
    291c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2920:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2924:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2928:	4954004e 	ldmdbmi	r4, {r1, r2, r3, r6}^
    292c:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2930:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2934:	5f4d4954 	svcpl	0x004d4954
    2938:	45784954 	ldrbmi	r4, [r8, #-2388]!	; 0x954
    293c:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    2940:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2944:	6f534b4c 	svcvs	0x00534b4c
    2948:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    294c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2950:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    2954:	44657461 	strbtmi	r7, [r5], #-1121	; 0x461
    2958:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    295c:	6f43656c 	svcvs	0x0043656c
    2960:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2964:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2968:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0x55f
    296c:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    2970:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2974:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2978:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    297c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2980:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2984:	54007463 	strpl	r7, [r0], #-1123	; 0x463
    2988:	435f3349 	cmpmi	pc, #603979777	; 0x24000001
    298c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2990:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2994:	6f435f4d 	svcvs	0x00435f4d
    2998:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    299c:	646f4d72 	strbtvs	r4, [pc], #-3442	; 29a4 <__Stack_Size+0x25a4>
    29a0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    29a4:	00676966 	rsbeq	r6, r7, r6, ror #18
    29a8:	5f4d4954 	svcpl	0x004d4954
    29ac:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    29b0:	61706d6f 	cmnvs	r0, pc, ror #26
    29b4:	00336572 	eorseq	r6, r3, r2, ror r5
    29b8:	5f4d4954 	svcpl	0x004d4954
    29bc:	61656c43 	cmnvs	r5, r3, asr #24
    29c0:	33434f72 	movtcc	r4, #16242	; 0x3f72
    29c4:	00666552 	rsbeq	r6, r6, r2, asr r5
    29c8:	5f4d4954 	svcpl	0x004d4954
    29cc:	4934434f 	ldmdbmi	r4!, {r0, r1, r2, r3, r6, r8, r9, lr}
    29d0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    29d4:	5f4d4954 	svcpl	0x004d4954
    29d8:	63726f46 	cmnvs	r2, #280	; 0x118
    29dc:	434f6465 	movtmi	r6, #62565	; 0xf465
    29e0:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
    29e4:	00676966 	rsbeq	r6, r7, r6, ror #18
    29e8:	5f4d4954 	svcpl	0x004d4954
    29ec:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    29f0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    29f4:	54007265 	strpl	r7, [r0], #-613	; 0x265
    29f8:	4f5f4d49 	svcmi	0x005f4d49
    29fc:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    2a00:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    2a04:	00746375 	rsbseq	r6, r4, r5, ror r3
    2a08:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0x845
    2a0c:	69464752 	stmdbvs	r6, {r1, r4, r6, r8, r9, sl, lr}^
    2a10:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2a14:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a18:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2a1c:	53746365 	cmnpl	r4, #-1811939327	; 0x94000001
    2a20:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
    2a24:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2a28:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a2c:	31434f5f 	cmpcc	r3, pc, asr pc
    2a30:	74736146 	ldrbtvc	r6, [r3], #-326	; 0x146
    2a34:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2a38:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2a3c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1cfb <__Stack_Size+0x18fb>
    2a40:	6f435254 	svcvs	0x00435254
    2a44:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a48:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2a4c:	31434f5f 	cmpcc	r3, pc, asr pc
    2a50:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 2920 <__Stack_Size+0x2520>
    2a54:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2a58:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2a5c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a60:	5f4d4954 	svcpl	0x004d4954
    2a64:	53504349 	cmppl	r0, #603979777	; 0x24000001
    2a68:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
    2a6c:	76455f4d 	strbvc	r5, [r5], -sp, asr #30
    2a70:	53746e65 	cmnpl	r4, #1616	; 0x650
    2a74:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2a78:	6d740065 	ldclvs	0, cr0, [r4, #-404]!	; 0xfffffe6c
    2a7c:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
    2a80:	74003172 	strvc	r3, [r0], #-370	; 0x172
    2a84:	6363706d 	cmnvs	r3, #109	; 0x6d
    2a88:	0032726d 	eorseq	r7, r2, sp, ror #4
    2a8c:	5f4d4954 	svcpl	0x004d4954
    2a90:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2a94:	006c656e 	rsbeq	r6, ip, lr, ror #10
    2a98:	5f4d4954 	svcpl	0x004d4954
    2a9c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0x553
    2aa0:	4f437463 	svcmi	0x00437463
    2aa4:	4954004d 	ldmdbmi	r4, {r0, r2, r3, r6}^
    2aa8:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2aac:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    2ab0:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2ab4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    2ab8:	69006c6f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}
    2abc:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    2ac0:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    2ac4:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    2ac8:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2acc:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
    2ad0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2ad4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2ad8:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2adc:	6b636f6c 	blvs	18de894 <__Stack_Size+0x18de494>
    2ae0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2ae4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2ae8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2aec:	43497465 	movtmi	r7, #37989	; 0x9465
    2af0:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0x31
    2af4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2af8:	54007265 	strpl	r7, [r0], #-613	; 0x265
    2afc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2b00:	54007843 	strpl	r7, [r0], #-2115	; 0x843
    2b04:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2b08:	43497465 	movtmi	r7, #37989	; 0x9465
    2b0c:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0x33
    2b10:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2b14:	54007265 	strpl	r7, [r0], #-613	; 0x265
    2b18:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2b1c:	6c655343 	stclvs	3, cr5, [r5], #-268	; 0xfffffef4
    2b20:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2b24:	54006e6f 	strpl	r6, [r0], #-3695	; 0xe6f
    2b28:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1de7 <__Stack_Size+0x19e7>
    2b2c:	6c435254 	sfmvs	f5, 2, [r3], {84}	; 0x54
    2b30:	4d6b636f 	stclmi	3, cr6, [fp, #-444]!	; 0xfffffe44
    2b34:	3165646f 	cmncc	r5, pc, ror #8
    2b38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b3c:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2b40:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2b44:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2b48:	656e4f74 	strbvs	r4, [lr, #-3956]!	; 0xf74
    2b4c:	736c7550 	cmnvc	ip, #80, 10	; 0x14000000
    2b50:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2b58 <__Stack_Size+0x2758>
    2b54:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2b58:	52545f4d 	subspl	r5, r4, #308	; 0x134
    2b5c:	6f534f47 	svcvs	0x00534f47
    2b60:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2b64:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2b68:	53534f5f 	cmppl	r3, #380	; 0x17c
    2b6c:	61745352 	cmnvs	r4, r2, asr r3
    2b70:	54006574 	strpl	r6, [r0], #-1396	; 0x574
    2b74:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    2b78:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 2a74 <__Stack_Size+0x2674>
    2b7c:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2b80:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2b84:	74435f4d 	strbvc	r5, [r3], #-3917	; 0xf4d
    2b88:	57506c72 			; <UNDEFINED> instruction: 0x57506c72
    2b8c:	74754f4d 	ldrbtvc	r4, [r5], #-3917	; 0xf4d
    2b90:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
    2b94:	6f636900 	svcvs	0x00636900
    2b98:	736f7070 	cmnvc	pc, #112	; 0x70
    2b9c:	70657469 	rsbvc	r7, r5, r9, ror #8
    2ba0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2ba4:	00797469 	rsbseq	r7, r9, r9, ror #8
    2ba8:	5f4d4954 	svcpl	0x004d4954
    2bac:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2bb0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2bb4:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2bb8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2bbc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2bc0:	5232434f 	eorspl	r4, r2, #1006632961	; 0x3c000001
    2bc4:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2bc8:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 2bd0 <__Stack_Size+0x27d0>
    2bcc:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2bd0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2bd4:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2bd8:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2bdc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2be0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2be4:	614d5f4d 	cmpvs	sp, sp, asr #30
    2be8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2bec:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    2bf0:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2bf8 <__Stack_Size+0x27f8>
    2bf4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2bf8:	75415f4d 	strbvc	r5, [r1, #-3917]	; 0xf4d
    2bfc:	616d6f74 	smcvs	55028	; 0xd6f4
    2c00:	4f636974 	svcmi	0x00636974
    2c04:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    2c08:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2c0c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xf4d
    2c10:	74754174 	ldrbtvc	r4, [r5], #-372	; 0x174
    2c14:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
    2c18:	0064616f 	rsbeq	r6, r4, pc, ror #2
    2c1c:	5f4d4954 	svcpl	0x004d4954
    2c20:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2c24:	5400646d 	strpl	r6, [r0], #-1133	; 0x46d
    2c28:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2c2c:	6563726f 	strbvs	r7, [r3, #-623]!	; 0x26f
    2c30:	31434f64 	cmpcc	r3, r4, ror #30
    2c34:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c38:	54006769 	strpl	r6, [r0], #-1897	; 0x769
    2c3c:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    2c40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c44:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c48:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xf4d
    2c4c:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    2c50:	5400656d 	strpl	r6, [r0], #-1389	; 0x56d
    2c54:	4f5f4d49 	svcmi	0x005f4d49
    2c58:	504e3243 	subpl	r3, lr, r3, asr #4
    2c5c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2c60:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2c64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c68:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2c6c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2c70:	6c6f5034 	stclvs	0, cr5, [pc], #-208	; 2ba8 <__Stack_Size+0x27a8>
    2c74:	74697261 	strbtvc	r7, [r9], #-609	; 0x261
    2c78:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2c7c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2c80:	5f4d4954 	svcpl	0x004d4954
    2c84:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2c88:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2c8c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2c90:	54007469 	strpl	r7, [r0], #-1129	; 0x469
    2c94:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2c98:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2c9c:	5231434f 	eorspl	r4, r1, #1006632961	; 0x3c000001
    2ca0:	54006665 	strpl	r6, [r0], #-1637	; 0x665
    2ca4:	4f5f4d49 	svcmi	0x005f4d49
    2ca8:	6f503343 	svcvs	0x00503343
    2cac:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2cb0:	6f437974 	svcvs	0x00437974
    2cb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2cb8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2cbc:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    2cc0:	50475254 	subpl	r5, r7, r4, asr r2
    2cc4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2cc8:	00797469 	rsbseq	r7, r9, r9, ror #8
    2ccc:	5f4d4954 	svcpl	0x004d4954
    2cd0:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    2cd4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2cd8:	74006769 	strvc	r6, [r0], #-1897	; 0x769
    2cdc:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    2ce0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    2ce4:	54495f4d 	strbpl	r5, [r9], #-3917	; 0xf4d
    2ce8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2cec:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2cf0:	4f646563 	svcmi	0x00646563
    2cf4:	6f433343 	svcvs	0x00433343
    2cf8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2cfc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d00:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2d04:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2d08:	5f4d4954 	svcpl	0x004d4954
    2d0c:	69464349 	stmdbvs	r6, {r0, r3, r6, r8, r9, lr}^
    2d10:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2d14:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d18:	414d445f 	cmpmi	sp, pc, asr r4
    2d1c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2d20:	54006563 	strpl	r6, [r0], #-1379	; 0x563
    2d24:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2d28:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2d2c:	73614d74 	cmnvc	r1, #116, 26	; 0x1d00
    2d30:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    2d34:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
    2d38:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    2d3c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2d40:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    2d44:	49746365 	ldmdbmi	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2d48:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
    2d4c:	67697254 			; <UNDEFINED> instruction: 0x67697254
    2d50:	00726567 	rsbseq	r6, r2, r7, ror #10
    2d54:	5f4d4954 	svcpl	0x004d4954
    2d58:	5032434f 	eorspl	r4, r2, pc, asr #6
    2d5c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2d60:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2d64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d68:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    2d6c:	65676574 	strbvs	r6, [r7, #-1396]!	; 0x574
    2d70:	76696472 			; <UNDEFINED> instruction: 0x76696472
    2d74:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2d78:	41535500 	cmpmi	r3, r0, lsl #10
    2d7c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2d80:	00414850 	subeq	r4, r1, r0, asr r8
    2d84:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d88:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    2d8c:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    2d90:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    2d94:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    2d98:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2d9c:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2da0:	61657242 	cmnvs	r5, r2, asr #4
    2da4:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    2da8:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    2dac:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    2db0:	53550068 	cmppl	r5, #104	; 0x68
    2db4:	5f545241 	svcpl	0x00545241
    2db8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2dbc:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2dc0:	70795474 	rsbsvc	r5, r9, r4, ror r4
    2dc4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2dc8:	41535500 	cmpmi	r3, r0, lsl #10
    2dcc:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2dd0:	44666c61 	strbtmi	r6, [r6], #-3169	; 0xc61
    2dd4:	656c7075 	strbvs	r7, [ip, #-117]!	; 0x75
    2dd8:	646d4378 	strbtvs	r4, [sp], #-888	; 0x378
    2ddc:	41535500 	cmpmi	r3, r0, lsl #10
    2de0:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    2de4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    2de8:	53550070 	cmppl	r5, #112	; 0x70
    2dec:	5f545241 	svcpl	0x00545241
    2df0:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2df4:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2df8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2dfc:	0054495f 	subseq	r4, r4, pc, asr r9
    2e00:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e04:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    2e08:	6f4d4144 	svcvs	0x004d4144
    2e0c:	61006564 	tstvs	r0, r4, ror #10
    2e10:	6c636270 	sfmvs	f6, 2, [r3], #-448	; 0xfffffe40
    2e14:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2e18:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e1c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2e20:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2e24:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2e28:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2e2c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2e30:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e34:	75475f54 	strbvc	r5, [r7, #-3924]	; 0xf54
    2e38:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    2e3c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2e40:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e44:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2e48:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0x24e
    2e4c:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xb61
    2e50:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    2e54:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2e58:	6f436874 	svcvs	0x00436874
    2e5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2e60:	41535500 	cmpmi	r3, r0, lsl #10
    2e64:	465f5452 			; <UNDEFINED> instruction: 0x465f5452
    2e68:	0047414c 	subeq	r4, r7, ip, asr #2
    2e6c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e70:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2e74:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2e78:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2e7c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2e80:	53550074 	cmppl	r5, #116	; 0x74
    2e84:	5f545241 	svcpl	0x00545241
    2e88:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    2e8c:	55007165 	strpl	r7, [r0, #-357]	; 0x165
    2e90:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e94:	6f6c435f 	svcvs	0x006c435f
    2e98:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xb63
    2e9c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2ea0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2ea4:	61737500 	cmnvs	r3, r0, lsl #10
    2ea8:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    2eac:	00657361 	rsbeq	r7, r5, r1, ror #6
    2eb0:	5f434352 	svcpl	0x00434352
    2eb4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2eb8:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    2ebc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2ec0:	41535500 	cmpmi	r3, r0, lsl #10
    2ec4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ec8:	64417465 	strbvs	r7, [r1], #-1125	; 0x465
    2ecc:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2ed0:	53550073 	cmppl	r5, #115	; 0x73
    2ed4:	5f545241 	svcpl	0x00545241
    2ed8:	47746553 			; <UNDEFINED> instruction: 0x47746553
    2edc:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    2ee0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2ee4:	41535500 	cmpmi	r3, r0, lsl #10
    2ee8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2eec:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    2ef0:	6b616572 	blvs	185c4c0 <__Stack_Size+0x185c0c0>
    2ef4:	41535500 	cmpmi	r3, r0, lsl #10
    2ef8:	00785452 	rsbseq	r5, r8, r2, asr r4
    2efc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f00:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    2f04:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2f08:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2f0c:	41535500 	cmpmi	r3, r0, lsl #10
    2f10:	415f5452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    2f14:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    2f18:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    2f1c:	6f707469 	svcvs	0x00707469
    2f20:	53550073 	cmppl	r5, #115	; 0x73
    2f24:	5f545241 	svcpl	0x00545241
    2f28:	61656c43 	cmnvs	r5, r3, asr #24
    2f2c:	616c4672 	smcvs	50274	; 0xc462
    2f30:	53550067 	cmppl	r5, #103	; 0x67
    2f34:	5f545241 	svcpl	0x00545241
    2f38:	41447249 	cmpmi	r4, r9, asr #4
    2f3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2f40:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    2f44:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f48:	6f6c435f 	svcvs	0x006c435f
    2f4c:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    2f50:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f54:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2f58:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    2f5c:	6b615772 	blvs	1858d2c <__Stack_Size+0x185892c>
    2f60:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2f64:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2f68:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f6c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    2f70:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    2f74:	41535500 	cmpmi	r3, r0, lsl #10
    2f78:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    2f7c:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    2f80:	72660064 	rsbvc	r0, r6, #100	; 0x64
    2f84:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2f88:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    2f8c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2f90:	00726564 	rsbseq	r6, r2, r4, ror #10
    2f94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f98:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    2f9c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2fa0:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    2fa4:	434b4341 	movtmi	r4, #45889	; 0xb341
    2fa8:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2fac:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2fb0:	616d535f 	cmnvs	sp, pc, asr r3
    2fb4:	61437472 	hvcvs	14146	; 0x3742
    2fb8:	6d436472 	cfstrdvs	mvd6, [r3, #-456]	; 0xfffffe38
    2fbc:	53550064 	cmppl	r5, #100	; 0x64
    2fc0:	5f545241 	svcpl	0x00545241
    2fc4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2fc8:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2fcc:	53550074 	cmppl	r5, #116	; 0x74
    2fd0:	5f545241 	svcpl	0x00545241
    2fd4:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2fd8:	6f437055 	svcvs	0x00437055
    2fdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2fe0:	41535500 	cmpmi	r3, r0, lsl #10
    2fe4:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    2fe8:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2fec:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2ff0:	41535500 	cmpmi	r3, r0, lsl #10
    2ff4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2ff8:	004c4f50 	subeq	r4, ip, r0, asr pc
    2ffc:	616d7469 	cmnvs	sp, r9, ror #8
    3000:	55006b73 	strpl	r6, [r0, #-2931]	; 0xb73
    3004:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3008:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    300c:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    3010:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3014:	31663233 	cmncc	r6, r3, lsr r2
    3018:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    301c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    3020:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    3024:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3028:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    302c:	6173755f 	cmnvs	r3, pc, asr r5
    3030:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    3034:	61737500 	cmnvs	r3, r0, lsl #10
    3038:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    303c:	655f0067 	ldrbvs	r0, [pc, #-103]	; 2fdd <__Stack_Size+0x2bdd>
    3040:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    3044:	735f006b 	cmpvc	pc, #107	; 0x6b
    3048:	61746164 	cmnvs	r4, r4, ror #2
    304c:	73655200 	cmnvc	r5, #0, 4
    3050:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    3054:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    3058:	70007265 	andvc	r7, r0, r5, ror #4
    305c:	65446c75 	strbvs	r6, [r4, #-3189]	; 0xc75
    3060:	5f007473 	svcpl	0x00007473
    3064:	61646973 	smcvs	18067	; 0x4693
    3068:	5f006174 	svcpl	0x00006174
    306c:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    3070:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xf00
    3074:	00617461 	rsbeq	r7, r1, r1, ror #8
    3078:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    307c:	30316632 	eorscc	r6, r1, r2, lsr r6
    3080:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3084:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    3088:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    308c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3090:	5f783031 	svcpl	0x00783031
    3094:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
    3098:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    309c:	705f6700 	subsvc	r6, pc, r0, lsl #14
    30a0:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xe66
    30a4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    30a8:	75700073 	ldrbvc	r0, [r0, #-115]!	; 0x73
    30ac:	6372536c 	cmnvs	r2, #108, 6	; 0xb0000001
    30b0:	62735f00 	rsbsvs	r5, r3, #0, 30
    30b4:	Address 0x000030b4 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
       4:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
       8:	68500001 	ldmdavs	r0, {r0}^
       c:	6a080031 	bvs	2000d8 <__Stack_Size+0x1ffcd8>
      10:	01080031 	tsteq	r8, r1, lsr r0
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	32bc0000 	adcscc	r0, ip, #0
      20:	32c40800 	sbccc	r0, r4, #0, 16
      24:	00010800 	andeq	r0, r1, r0, lsl #16
      28:	0032c450 	eorseq	ip, r2, r0, asr r4
      2c:	00330008 	eorseq	r0, r3, r8
      30:	f3000408 	vshl.u8	d0, d8, d0
      34:	009f5001 	addseq	r5, pc, r1
      38:	00000000 	andeq	r0, r0, r0
      3c:	20000000 	andcs	r0, r0, r0
      40:	26080033 			; <UNDEFINED> instruction: 0x26080033
      44:	01080033 	tsteq	r8, r3, lsr r0
      48:	33265000 			; <UNDEFINED> instruction: 0x33265000
      4c:	333c0800 	teqcc	ip, #0, 16
      50:	00040800 	andeq	r0, r4, r0, lsl #16
      54:	9f5001f3 	svcls	0x005001f3
	...
      60:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
      64:	08003340 	stmdaeq	r0, {r6, r8, r9, ip, sp}
      68:	40500001 	subsmi	r0, r0, r1
      6c:	44080033 	strmi	r0, [r8], #-51	; 0x33
      70:	03080033 	movweq	r0, #32819	; 0x8033
      74:	9f017400 	svcls	0x00017400
      78:	08003344 	stmdaeq	r0, {r2, r6, r8, r9, ip, sp}
      7c:	08003346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, sp}
      80:	46540001 	ldrbmi	r0, [r4], -r1
      84:	4c080033 	stcmi	0, cr0, [r8], {51}	; 0x33
      88:	03080033 	movweq	r0, #32819	; 0x8033
      8c:	9f017400 	svcls	0x00017400
      90:	0800334c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp}
      94:	0800334e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, ip, sp}
      98:	00540001 	subseq	r0, r4, r1
      9c:	00000000 	andeq	r0, r0, r0
      a0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
      a4:	59080033 	stmdbpl	r8, {r0, r1, r4, r5}
      a8:	01080033 	tsteq	r8, r3, lsr r0
      ac:	33595000 	cmpcc	r9, #0
      b0:	337c0800 	cmncc	ip, #0, 16
      b4:	00040800 	andeq	r0, r4, r0, lsl #16
      b8:	9f5001f3 	svcls	0x005001f3
	...
      c4:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
      c8:	08003387 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, ip, sp}
      cc:	87500001 	ldrbhi	r0, [r0, -r1]
      d0:	ac080033 	stcge	0, cr0, [r8], {51}	; 0x33
      d4:	04080033 	streq	r0, [r8], #-51	; 0x33
      d8:	5001f300 	andpl	pc, r1, r0, lsl #6
      dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e0:	00000000 	andeq	r0, r0, r0
      e4:	0033ac00 	eorseq	sl, r3, r0, lsl #24
      e8:	0033ae08 	eorseq	sl, r3, r8, lsl #28
      ec:	50000108 	andpl	r0, r0, r8, lsl #2
      f0:	080033ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, sp}
      f4:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
      f8:	02700003 	rsbseq	r0, r0, #3
      fc:	0033be9f 	mlaseq	r3, pc, lr, fp	; <UNPREDICTABLE>
     100:	0033f808 	eorseq	pc, r3, r8, lsl #16
     104:	f3000408 	vshl.u8	d0, d8, d0
     108:	009f5001 	addseq	r5, pc, r1
     10c:	00000000 	andeq	r0, r0, r0
     110:	8c000000 	stchi	0, cr0, [r0], {-0}
     114:	96080034 			; <UNDEFINED> instruction: 0x96080034
     118:	01080034 	tsteq	r8, r4, lsr r0
     11c:	34965000 	ldrcc	r5, [r6], #0
     120:	34ba0800 	ldrtcc	r0, [sl], #2048	; 0x800
     124:	00040800 	andeq	r0, r4, r0, lsl #16
     128:	9f5001f3 	svcls	0x005001f3
	...
     134:	08003496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip, sp}
     138:	080034a5 	stmdaeq	r0, {r0, r2, r5, r7, sl, ip, sp}
     13c:	aa500001 	bge	1400148 <__Stack_Size+0x13ffd48>
     140:	b9080034 	stmdblt	r8, {r2, r4, r5}
     144:	01080034 	tsteq	r8, r4, lsr r0
     148:	00005000 	andeq	r5, r0, r0
     14c:	00000000 	andeq	r0, r0, r0
     150:	34ba0000 	ldrtcc	r0, [sl], #0
     154:	34c00800 	strbcc	r0, [r0], #2048	; 0x800
     158:	00010800 	andeq	r0, r1, r0, lsl #16
     15c:	0034c050 	eorseq	ip, r4, r0, asr r0
     160:	0034ce08 	eorseq	ip, r4, r8, lsl #28
     164:	f3000408 	vshl.u8	d0, d8, d0
     168:	009f5001 	addseq	r5, pc, r1
     16c:	00000000 	andeq	r0, r0, r0
     170:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
     174:	dd080034 	stcle	0, cr0, [r8, #-208]	; 0xffffff30
     178:	01080034 	tsteq	r8, r4, lsr r0
     17c:	34dd5000 	ldrbcc	r5, [sp], #0
     180:	35080800 	strcc	r0, [r8, #-2048]	; 0x800
     184:	00040800 	andeq	r0, r4, r0, lsl #16
     188:	9f5001f3 	svcls	0x005001f3
	...
     194:	080034ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip, sp}
     198:	080034da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, ip, sp}
     19c:	da510001 	ble	14401a8 <__Stack_Size+0x143fda8>
     1a0:	08080034 	stmdaeq	r8, {r2, r4, r5}
     1a4:	04080035 	streq	r0, [r8], #-53	; 0x35
     1a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	0034d800 	eorseq	sp, r4, r0, lsl #16
     1b8:	0034dd08 	eorseq	sp, r4, r8, lsl #26
     1bc:	52000108 	andpl	r0, r0, #8, 2
     1c0:	080034dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, ip, sp}
     1c4:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     1c8:	000a0015 	andeq	r0, sl, r5, lsl r0
     1cc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
     1d0:	5101f31c 	tstpl	r1, ip, lsl r3	; <UNPREDICTABLE>
     1d4:	305101f3 	ldrshcc	r0, [r1], #-19	; 0xffffffed
     1d8:	0001282d 	andeq	r2, r1, sp, lsr #16
     1dc:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	e6000000 	str	r0, [r0], -r0
     1e8:	ea080034 	b	2002c0 <__Stack_Size+0x1ffec0>
     1ec:	01080034 	tsteq	r8, r4, lsr r0
     1f0:	34ea5000 	strbtcc	r5, [sl], #0
     1f4:	34f80800 	ldrbtcc	r0, [r8], #2048	; 0x800
     1f8:	00010800 	andeq	r0, r1, r0, lsl #16
     1fc:	0034fe54 	eorseq	pc, r4, r4, asr lr	; <UNPREDICTABLE>
     200:	00350808 	eorseq	r0, r5, r8, lsl #16
     204:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     210:	08003508 	stmdaeq	r0, {r3, r8, sl, ip, sp}
     214:	0800350e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip, sp}
     218:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
     21c:	1c080035 	stcne	0, cr0, [r8], {53}	; 0x35
     220:	01080035 	tsteq	r8, r5, lsr r0
     224:	351c5400 	ldrcc	r5, [ip, #-1024]	; 0x400
     228:	351f0800 	ldrcc	r0, [pc, #-2048]	; fffffa30 <SCS_BASE+0x1fff1a30>
     22c:	00040800 	andeq	r0, r4, r0, lsl #16
     230:	9f1f0071 	svcls	0x001f0071
     234:	0800351f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sl, ip, sp}
     238:	08003520 	stmdaeq	r0, {r5, r8, sl, ip, sp}
     23c:	01f30004 	mvnseq	r0, r4
     240:	00009f50 	andeq	r9, r0, r0, asr pc
     244:	00000000 	andeq	r0, r0, r0
     248:	35200000 	strcc	r0, [r0, #-0]!
     24c:	35220800 	strcc	r0, [r2, #-2048]!	; 0x800
     250:	00010800 	andeq	r0, r1, r0, lsl #16
     254:	00352250 	eorseq	r2, r5, r0, asr r2
     258:	00352508 	eorseq	r2, r5, r8, lsl #10
     25c:	70000408 	andvc	r0, r0, r8, lsl #8
     260:	259f1f00 	ldrcs	r1, [pc, #3840]	; 1168 <__Stack_Size+0xd68>
     264:	26080035 			; <UNDEFINED> instruction: 0x26080035
     268:	04080035 	streq	r0, [r8], #-53	; 0x35
     26c:	5001f300 	andpl	pc, r1, r0, lsl #6
     270:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     274:	00000000 	andeq	r0, r0, r0
     278:	00355a00 	eorseq	r5, r5, r0, lsl #20
     27c:	00356508 	eorseq	r6, r5, r8, lsl #10
     280:	50000108 	andpl	r0, r0, r8, lsl #2
     284:	08003565 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, ip, sp}
     288:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
     28c:	01f30004 	mvnseq	r0, r4
     290:	00009f50 	andeq	r9, r0, r0, asr pc
     294:	00000000 	andeq	r0, r0, r0
     298:	355a0000 	ldrbcc	r0, [sl, #-0]
     29c:	35620800 	strbcc	r0, [r2, #-2048]!	; 0x800
     2a0:	00010800 	andeq	r0, r1, r0, lsl #16
     2a4:	00356251 	eorseq	r6, r5, r1, asr r2
     2a8:	00356e08 	eorseq	r6, r5, r8, lsl #28
     2ac:	54000108 	strpl	r0, [r0], #-264	; 0x108
     2b0:	0800356e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip, sp}
     2b4:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
     2b8:	01f30004 	mvnseq	r0, r4
     2bc:	00009f51 	andeq	r9, r0, r1, asr pc
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	355a0000 	ldrbcc	r0, [sl, #-0]
     2c8:	35650800 	strbcc	r0, [r5, #-2048]!	; 0x800
     2cc:	00010800 	andeq	r0, r1, r0, lsl #16
     2d0:	00356552 	eorseq	r6, r5, r2, asr r5
     2d4:	0035a408 	eorseq	sl, r5, r8, lsl #8
     2d8:	f3000408 	vshl.u8	d0, d8, d0
     2dc:	009f5201 	addseq	r5, pc, r1, lsl #4
     2e0:	00000000 	andeq	r0, r0, r0
     2e4:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     2e8:	80080035 	andhi	r0, r8, r5, lsr r0
     2ec:	01080035 	tsteq	r8, r5, lsr r0
     2f0:	35805400 	strcc	r5, [r0, #1024]	; 0x400
     2f4:	35a40800 	strcc	r0, [r4, #2048]!	; 0x800
     2f8:	00140800 	andseq	r0, r4, r0, lsl #16
     2fc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
     300:	01f30880 	mvnseq	r0, r0, lsl #17
     304:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
     308:	01282d30 			; <UNDEFINED> instruction: 0x01282d30
     30c:	9f131600 	svcls	0x00131600
	...
     318:	08003580 	stmdaeq	r0, {r7, r8, sl, ip, sp}
     31c:	08003584 	stmdaeq	r0, {r2, r7, r8, sl, ip, sp}
     320:	84500001 	ldrbhi	r0, [r0], #-1
     324:	92080035 	andls	r0, r8, #53	; 0x35
     328:	01080035 	tsteq	r8, r5, lsr r0
     32c:	35985400 	ldrcc	r5, [r8, #1024]	; 0x400
     330:	35a40800 	strcc	r0, [r4, #2048]!	; 0x800
     334:	00010800 	andeq	r0, r1, r0, lsl #16
     338:	00000050 	andeq	r0, r0, r0, asr r0
     33c:	00000000 	andeq	r0, r0, r0
     340:	0035a400 	eorseq	sl, r5, r0, lsl #8
     344:	0035ac08 	eorseq	sl, r5, r8, lsl #24
     348:	50000108 	andpl	r0, r0, r8, lsl #2
     34c:	080035ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, sp}
     350:	080035b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, ip, sp}
     354:	b3530001 	cmplt	r3, #1
     358:	c2080035 	andgt	r0, r8, #53	; 0x35
     35c:	04080035 	streq	r0, [r8], #-53	; 0x35
     360:	5001f300 	andpl	pc, r1, r0, lsl #6
     364:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     368:	00000000 	andeq	r0, r0, r0
     36c:	0035a400 	eorseq	sl, r5, r0, lsl #8
     370:	0035ae08 	eorseq	sl, r5, r8, lsl #28
     374:	51000108 	tstpl	r0, r8, lsl #2
     378:	080035ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, ip, sp}
     37c:	080035ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, ip, sp}
     380:	ba540001 	blt	150038c <__Stack_Size+0x14fff8c>
     384:	c1080035 	tstgt	r8, r5, lsr r0
     388:	01080035 	tsteq	r8, r5, lsr r0
     38c:	35c15100 	strbcc	r5, [r1, #256]	; 0x100
     390:	35c20800 	strbcc	r0, [r2, #2048]	; 0x800
     394:	00040800 	andeq	r0, r4, r0, lsl #16
     398:	9f5101f3 	svcls	0x005101f3
	...
     3a4:	080035c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, ip, sp}
     3a8:	080035c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip, sp}
     3ac:	c8500001 	ldmdagt	r0, {r0}^
     3b0:	d4080035 	strle	r0, [r8], #-53	; 0x35
     3b4:	01080035 	tsteq	r8, r5, lsr r0
     3b8:	00005400 	andeq	r5, r0, r0, lsl #8
     3bc:	00000000 	andeq	r0, r0, r0
     3c0:	35c20000 	strbcc	r0, [r2]
     3c4:	35ca0800 	strbcc	r0, [sl, #2048]	; 0x800
     3c8:	00010800 	andeq	r0, r1, r0, lsl #16
     3cc:	0035ca51 	eorseq	ip, r5, r1, asr sl
     3d0:	0035cd08 	eorseq	ip, r5, r8, lsl #26
     3d4:	50000108 	andpl	r0, r0, r8, lsl #2
     3d8:	080035cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, ip, sp}
     3dc:	080035d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, ip, sp}
     3e0:	01f30004 	mvnseq	r0, r4
     3e4:	00009f51 	andeq	r9, r0, r1, asr pc
     3e8:	00000000 	andeq	r0, r0, r0
     3ec:	35c20000 	strbcc	r0, [r2]
     3f0:	35cd0800 	strbcc	r0, [sp, #2048]	; 0x800
     3f4:	00010800 	andeq	r0, r1, r0, lsl #16
     3f8:	0035cd52 	eorseq	ip, r5, r2, asr sp
     3fc:	0035d408 	eorseq	sp, r5, r8, lsl #8
     400:	f3000408 	vshl.u8	d0, d8, d0
     404:	009f5201 	addseq	r5, pc, r1, lsl #4
     408:	00000000 	andeq	r0, r0, r0
     40c:	d4000000 	strle	r0, [r0], #-0
     410:	dd080035 	stcle	0, cr0, [r8, #-212]	; 0xffffff2c
     414:	01080035 	tsteq	r8, r5, lsr r0
     418:	35dd5000 	ldrbcc	r5, [sp]
     41c:	36080800 	strcc	r0, [r8], -r0, lsl #16
     420:	00040800 	andeq	r0, r4, r0, lsl #16
     424:	9f5001f3 	svcls	0x005001f3
	...
     430:	080035e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sl, ip, sp}
     434:	080035ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, ip, sp}
     438:	ea500001 	b	1400444 <__Stack_Size+0x1400044>
     43c:	f8080035 			; <UNDEFINED> instruction: 0xf8080035
     440:	01080035 	tsteq	r8, r5, lsr r0
     444:	35fe5400 	ldrbcc	r5, [lr, #1024]!	; 0x400
     448:	36080800 	strcc	r0, [r8], -r0, lsl #16
     44c:	00010800 	andeq	r0, r1, r0, lsl #16
     450:	00000050 	andeq	r0, r0, r0, asr r0
     454:	00000000 	andeq	r0, r0, r0
     458:	00360800 	eorseq	r0, r6, r0, lsl #16
     45c:	00361108 	eorseq	r1, r6, r8, lsl #2
     460:	50000108 	andpl	r0, r0, r8, lsl #2
     464:	08003611 	stmdaeq	r0, {r0, r4, r9, sl, ip, sp}
     468:	0800363c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp}
     46c:	01f30004 	mvnseq	r0, r4
     470:	00009f50 	andeq	r9, r0, r0, asr pc
     474:	00000000 	andeq	r0, r0, r0
     478:	361a0000 	ldrcc	r0, [sl], -r0
     47c:	361e0800 	ldrcc	r0, [lr], -r0, lsl #16
     480:	00010800 	andeq	r0, r1, r0, lsl #16
     484:	00361e50 	eorseq	r1, r6, r0, asr lr
     488:	00362c08 	eorseq	r2, r6, r8, lsl #24
     48c:	54000108 	strpl	r0, [r0], #-264	; 0x108
     490:	08003632 	stmdaeq	r0, {r1, r4, r5, r9, sl, ip, sp}
     494:	0800363c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, sp}
     498:	00500001 	subseq	r0, r0, r1
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	a0000000 	andge	r0, r0, r0
     4a4:	a9080036 	stmdbge	r8, {r1, r2, r4, r5}
     4a8:	01080036 	tsteq	r8, r6, lsr r0
     4ac:	36a95000 	strtcc	r5, [r9], r0
     4b0:	36d80800 	ldrbcc	r0, [r8], r0, lsl #16
     4b4:	00040800 	andeq	r0, r4, r0, lsl #16
     4b8:	9f5001f3 	svcls	0x005001f3
	...
     4c4:	080036a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, sp}
     4c8:	080036a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, ip, sp}
     4cc:	a6510001 	ldrbge	r0, [r1], -r1
     4d0:	b4080036 	strlt	r0, [r8], #-54	; 0x36
     4d4:	01080036 	tsteq	r8, r6, lsr r0
     4d8:	36b45400 	ldrtcc	r5, [r4], r0, lsl #8
     4dc:	36d80800 	ldrbcc	r0, [r8], r0, lsl #16
     4e0:	00040800 	andeq	r0, r4, r0, lsl #16
     4e4:	9f5101f3 	svcls	0x005101f3
	...
     4f0:	080036b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, sp}
     4f4:	080036b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, sp}
     4f8:	b8500001 	ldmdalt	r0, {r0}^
     4fc:	c6080036 			; <UNDEFINED> instruction: 0xc6080036
     500:	01080036 	tsteq	r8, r6, lsr r0
     504:	36cc5400 	strbcc	r5, [ip], r0, lsl #8
     508:	36d80800 	ldrbcc	r0, [r8], r0, lsl #16
     50c:	00010800 	andeq	r0, r1, r0, lsl #16
     510:	00000050 	andeq	r0, r0, r0, asr r0
     514:	00000000 	andeq	r0, r0, r0
     518:	0036d800 	eorseq	sp, r6, r0, lsl #16
     51c:	0036e108 	eorseq	lr, r6, r8, lsl #2
     520:	50000108 	andpl	r0, r0, r8, lsl #2
     524:	080036e1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, ip, sp}
     528:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     52c:	01f30004 	mvnseq	r0, r4
     530:	00009f50 	andeq	r9, r0, r0, asr pc
     534:	00000000 	andeq	r0, r0, r0
     538:	36d80000 	ldrbcc	r0, [r8], r0
     53c:	36de0800 	ldrbcc	r0, [lr], r0, lsl #16
     540:	00010800 	andeq	r0, r1, r0, lsl #16
     544:	0036de51 	eorseq	sp, r6, r1, asr lr
     548:	0036ec08 	eorseq	lr, r6, r8, lsl #24
     54c:	54000108 	strpl	r0, [r0], #-264	; 0x108
     550:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
     554:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     558:	01f30004 	mvnseq	r0, r4
     55c:	00009f51 	andeq	r9, r0, r1, asr pc
     560:	00000000 	andeq	r0, r0, r0
     564:	36ec0000 	strbtcc	r0, [ip], r0
     568:	36f00800 	ldrbtcc	r0, [r0], r0, lsl #16
     56c:	00010800 	andeq	r0, r1, r0, lsl #16
     570:	0036f050 	eorseq	pc, r6, r0, asr r0	; <UNPREDICTABLE>
     574:	0036fe08 	eorseq	pc, r6, r8, lsl #28
     578:	54000108 	strpl	r0, [r0], #-264	; 0x108
     57c:	08003704 	stmdaeq	r0, {r2, r8, r9, sl, ip, sp}
     580:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     584:	00500001 	subseq	r0, r0, r1
     588:	00000000 	andeq	r0, r0, r0
     58c:	10000000 	andne	r0, r0, r0
     590:	1a080037 	bne	200674 <__Stack_Size+0x200274>
     594:	01080037 	tsteq	r8, r7, lsr r0
     598:	371a5000 	ldrcc	r5, [sl, -r0]
     59c:	37440800 	strbcc	r0, [r4, -r0, lsl #16]
     5a0:	00010800 	andeq	r0, r1, r0, lsl #16
     5a4:	00000054 	andeq	r0, r0, r4, asr r0
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	00371000 	eorseq	r1, r7, r0
     5b0:	00371808 	eorseq	r1, r7, r8, lsl #16
     5b4:	51000108 	tstpl	r0, r8, lsl #2
     5b8:	08003718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, sp}
     5bc:	08003744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, sp}
     5c0:	00560001 	subseq	r0, r6, r1
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	10000000 	andne	r0, r0, r0
     5cc:	1f080037 	svcne	0x00080037
     5d0:	01080037 	tsteq	r8, r7, lsr r0
     5d4:	371f5200 	ldrcc	r5, [pc, -r0, lsl #4]
     5d8:	37440800 	strbcc	r0, [r4, -r0, lsl #16]
     5dc:	00010800 	andeq	r0, r1, r0, lsl #16
     5e0:	00000055 	andeq	r0, r0, r5, asr r0
     5e4:	00000000 	andeq	r0, r0, r0
     5e8:	00374400 	eorseq	r4, r7, r0, lsl #8
     5ec:	00374e08 	eorseq	r4, r7, r8, lsl #28
     5f0:	50000108 	andpl	r0, r0, r8, lsl #2
     5f4:	0800374e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, ip, sp}
     5f8:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     5fc:	00540001 	subseq	r0, r4, r1
     600:	00000000 	andeq	r0, r0, r0
     604:	44000000 	strmi	r0, [r0], #-0
     608:	4c080037 	stcmi	0, cr0, [r8], {55}	; 0x37
     60c:	01080037 	tsteq	r8, r7, lsr r0
     610:	374c5100 	strbcc	r5, [ip, -r0, lsl #2]
     614:	37800800 	strcc	r0, [r0, r0, lsl #16]
     618:	00010800 	andeq	r0, r1, r0, lsl #16
     61c:	00000056 	andeq	r0, r0, r6, asr r0
     620:	00000000 	andeq	r0, r0, r0
     624:	00374400 	eorseq	r4, r7, r0, lsl #8
     628:	00375308 	eorseq	r5, r7, r8, lsl #6
     62c:	52000108 	andpl	r0, r0, #8, 2
     630:	08003753 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, ip, sp}
     634:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     638:	00550001 	subseq	r0, r5, r1
     63c:	00000000 	andeq	r0, r0, r0
     640:	80000000 	andhi	r0, r0, r0
     644:	89080037 	stmdbhi	r8, {r0, r1, r2, r4, r5}
     648:	01080037 	tsteq	r8, r7, lsr r0
     64c:	37895000 	strcc	r5, [r9, r0]
     650:	37b80800 	ldrcc	r0, [r8, r0, lsl #16]!
     654:	00040800 	andeq	r0, r4, r0, lsl #16
     658:	9f5001f3 	svcls	0x005001f3
	...
     664:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     668:	08003786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip, sp}
     66c:	86510001 	ldrbhi	r0, [r1], -r1
     670:	94080037 	strls	r0, [r8], #-55	; 0x37
     674:	01080037 	tsteq	r8, r7, lsr r0
     678:	37945400 	ldrcc	r5, [r4, r0, lsl #8]
     67c:	37b80800 	ldrcc	r0, [r8, r0, lsl #16]!
     680:	00040800 	andeq	r0, r4, r0, lsl #16
     684:	9f5101f3 	svcls	0x005101f3
	...
     690:	08003794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp}
     694:	08003798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, sp}
     698:	98500001 	ldmdals	r0, {r0}^
     69c:	a6080037 			; <UNDEFINED> instruction: 0xa6080037
     6a0:	01080037 	tsteq	r8, r7, lsr r0
     6a4:	37ac5400 	strcc	r5, [ip, r0, lsl #8]!
     6a8:	37b80800 	ldrcc	r0, [r8, r0, lsl #16]!
     6ac:	00010800 	andeq	r0, r1, r0, lsl #16
     6b0:	00000050 	andeq	r0, r0, r0, asr r0
     6b4:	00000000 	andeq	r0, r0, r0
     6b8:	0037b800 	eorseq	fp, r7, r0, lsl #16
     6bc:	0037c108 	eorseq	ip, r7, r8, lsl #2
     6c0:	50000108 	andpl	r0, r0, r8, lsl #2
     6c4:	080037c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, ip, sp}
     6c8:	080037f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp}
     6cc:	01f30004 	mvnseq	r0, r4
     6d0:	00009f50 	andeq	r9, r0, r0, asr pc
     6d4:	00000000 	andeq	r0, r0, r0
     6d8:	37b80000 	ldrcc	r0, [r8, r0]!
     6dc:	37be0800 	ldrcc	r0, [lr, r0, lsl #16]!
     6e0:	00010800 	andeq	r0, r1, r0, lsl #16
     6e4:	0037be51 	eorseq	fp, r7, r1, asr lr
     6e8:	0037cc08 	eorseq	ip, r7, r8, lsl #24
     6ec:	54000108 	strpl	r0, [r0], #-264	; 0x108
     6f0:	080037cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip, sp}
     6f4:	080037f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp}
     6f8:	01f30004 	mvnseq	r0, r4
     6fc:	00009f51 	andeq	r9, r0, r1, asr pc
     700:	00000000 	andeq	r0, r0, r0
     704:	37cc0000 	strbcc	r0, [ip, r0]
     708:	37d00800 	ldrbcc	r0, [r0, r0, lsl #16]
     70c:	00010800 	andeq	r0, r1, r0, lsl #16
     710:	0037d050 	eorseq	sp, r7, r0, asr r0
     714:	0037de08 	eorseq	sp, r7, r8, lsl #28
     718:	54000108 	strpl	r0, [r0], #-264	; 0x108
     71c:	080037e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, sp}
     720:	080037f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp}
     724:	00500001 	subseq	r0, r0, r1
     728:	00000000 	andeq	r0, r0, r0
     72c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     730:	f9080037 			; <UNDEFINED> instruction: 0xf9080037
     734:	01080037 	tsteq	r8, r7, lsr r0
     738:	37f95000 	ldrbcc	r5, [r9, r0]!
     73c:	383c0800 	ldmdacc	ip!, {fp}
     740:	00040800 	andeq	r0, r4, r0, lsl #16
     744:	9f5001f3 	svcls	0x005001f3
	...
     750:	080037f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp}
     754:	080037f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp}
     758:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
     75c:	28080037 	stmdacs	r8, {r0, r1, r2, r4, r5}
     760:	01080038 	tsteq	r8, r8, lsr r0
     764:	38285500 	stmdacc	r8!, {r8, sl, ip, lr}
     768:	382e0800 	stmdacc	lr!, {fp}
     76c:	00040800 	andeq	r0, r4, r0, lsl #16
     770:	9f5101f3 	svcls	0x005101f3
     774:	0800382e 	stmdaeq	r0, {r1, r2, r3, r5, fp, ip, sp}
     778:	08003830 	stmdaeq	r0, {r4, r5, fp, ip, sp}
     77c:	30550001 	subscc	r0, r5, r1
     780:	3c080038 	stccc	0, cr0, [r8], {56}	; 0x38
     784:	04080038 	streq	r0, [r8], #-56	; 0x38
     788:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     78c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     790:	00000000 	andeq	r0, r0, r0
     794:	00380200 	eorseq	r0, r8, r0, lsl #4
     798:	00380408 	eorseq	r0, r8, r8, lsl #8
     79c:	50000108 	andpl	r0, r0, r8, lsl #2
     7a0:	08003804 	stmdaeq	r0, {r2, fp, ip, sp}
     7a4:	08003828 	stmdaeq	r0, {r3, r5, fp, ip, sp}
     7a8:	2e540001 	cdpcs	0, 5, cr0, cr4, cr1, {0}
     7ac:	30080038 	andcc	r0, r8, r8, lsr r0
     7b0:	01080038 	tsteq	r8, r8, lsr r0
     7b4:	00005400 	andeq	r5, r0, r0, lsl #8
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	383c0000 	ldmdacc	ip!, {}	; <UNPREDICTABLE>
     7c0:	38450800 	stmdacc	r5, {fp}^
     7c4:	00010800 	andeq	r0, r1, r0, lsl #16
     7c8:	00384550 	eorseq	r4, r8, r0, asr r5
     7cc:	00387408 	eorseq	r7, r8, r8, lsl #8
     7d0:	f3000408 	vshl.u8	d0, d8, d0
     7d4:	009f5001 	addseq	r5, pc, r1
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	3c000000 	stccc	0, cr0, [r0], {-0}
     7e0:	42080038 	andmi	r0, r8, #56	; 0x38
     7e4:	01080038 	tsteq	r8, r8, lsr r0
     7e8:	38425100 	stmdacc	r2, {r8, ip, lr}^
     7ec:	38500800 	ldmdacc	r0, {fp}^
     7f0:	00010800 	andeq	r0, r1, r0, lsl #16
     7f4:	00385054 	eorseq	r5, r8, r4, asr r0
     7f8:	00387408 	eorseq	r7, r8, r8, lsl #8
     7fc:	f3000408 	vshl.u8	d0, d8, d0
     800:	009f5101 	addseq	r5, pc, r1, lsl #2
     804:	00000000 	andeq	r0, r0, r0
     808:	50000000 	andpl	r0, r0, r0
     80c:	54080038 	strpl	r0, [r8], #-56	; 0x38
     810:	01080038 	tsteq	r8, r8, lsr r0
     814:	38545000 	ldmdacc	r4, {ip, lr}^
     818:	38620800 	stmdacc	r2!, {fp}^
     81c:	00010800 	andeq	r0, r1, r0, lsl #16
     820:	00386854 	eorseq	r6, r8, r4, asr r8
     824:	00387408 	eorseq	r7, r8, r8, lsl #8
     828:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     834:	08003874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp}
     838:	0800387d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, ip, sp}
     83c:	7d500001 	ldclvc	0, cr0, [r0, #-4]
     840:	ac080038 	stcge	0, cr0, [r8], {56}	; 0x38
     844:	04080038 	streq	r0, [r8], #-56	; 0x38
     848:	5001f300 	andpl	pc, r1, r0, lsl #6
     84c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     850:	00000000 	andeq	r0, r0, r0
     854:	00387400 	eorseq	r7, r8, r0, lsl #8
     858:	00387a08 	eorseq	r7, r8, r8, lsl #20
     85c:	51000108 	tstpl	r0, r8, lsl #2
     860:	0800387a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, ip, sp}
     864:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
     868:	88540001 	ldmdahi	r4, {r0}^
     86c:	ac080038 	stcge	0, cr0, [r8], {56}	; 0x38
     870:	04080038 	streq	r0, [r8], #-56	; 0x38
     874:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     878:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     87c:	00000000 	andeq	r0, r0, r0
     880:	00388800 	eorseq	r8, r8, r0, lsl #16
     884:	00388c08 	eorseq	r8, r8, r8, lsl #24
     888:	50000108 	andpl	r0, r0, r8, lsl #2
     88c:	0800388c 	stmdaeq	r0, {r2, r3, r7, fp, ip, sp}
     890:	0800389a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, sp}
     894:	a0540001 	subsge	r0, r4, r1
     898:	ac080038 	stcge	0, cr0, [r8], {56}	; 0x38
     89c:	01080038 	tsteq	r8, r8, lsr r0
     8a0:	00005000 	andeq	r5, r0, r0
     8a4:	00000000 	andeq	r0, r0, r0
     8a8:	38ac0000 	stmiacc	ip!, {}	; <UNPREDICTABLE>
     8ac:	38b50800 	ldmcc	r5!, {fp}
     8b0:	00010800 	andeq	r0, r1, r0, lsl #16
     8b4:	0038b550 	eorseq	fp, r8, r0, asr r5
     8b8:	0038e408 	eorseq	lr, r8, r8, lsl #8
     8bc:	f3000408 	vshl.u8	d0, d8, d0
     8c0:	009f5001 	addseq	r5, pc, r1
     8c4:	00000000 	andeq	r0, r0, r0
     8c8:	ac000000 	stcge	0, cr0, [r0], {-0}
     8cc:	b2080038 	andlt	r0, r8, #56	; 0x38
     8d0:	01080038 	tsteq	r8, r8, lsr r0
     8d4:	38b25100 	ldmcc	r2!, {r8, ip, lr}
     8d8:	38c00800 	stmiacc	r0, {fp}^
     8dc:	00010800 	andeq	r0, r1, r0, lsl #16
     8e0:	0038c054 	eorseq	ip, r8, r4, asr r0
     8e4:	0038e408 	eorseq	lr, r8, r8, lsl #8
     8e8:	f3000408 	vshl.u8	d0, d8, d0
     8ec:	009f5101 	addseq	r5, pc, r1, lsl #2
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	c0000000 	andgt	r0, r0, r0
     8f8:	c4080038 	strgt	r0, [r8], #-56	; 0x38
     8fc:	01080038 	tsteq	r8, r8, lsr r0
     900:	38c45000 	stmiacc	r4, {ip, lr}^
     904:	38d20800 	ldmcc	r2, {fp}^
     908:	00010800 	andeq	r0, r1, r0, lsl #16
     90c:	0038d854 	eorseq	sp, r8, r4, asr r8
     910:	0038e408 	eorseq	lr, r8, r8, lsl #8
     914:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     920:	080038e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp}
     924:	080038ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, ip, sp}
     928:	ed500001 	ldcl	0, cr0, [r0, #-4]
     92c:	1c080038 	stcne	0, cr0, [r8], {56}	; 0x38
     930:	04080039 	streq	r0, [r8], #-57	; 0x39
     934:	5001f300 	andpl	pc, r1, r0, lsl #6
     938:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     93c:	00000000 	andeq	r0, r0, r0
     940:	0038e400 	eorseq	lr, r8, r0, lsl #8
     944:	0038ea08 	eorseq	lr, r8, r8, lsl #20
     948:	51000108 	tstpl	r0, r8, lsl #2
     94c:	080038ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, sp}
     950:	080038f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip, sp}
     954:	f8540001 			; <UNDEFINED> instruction: 0xf8540001
     958:	1c080038 	stcne	0, cr0, [r8], {56}	; 0x38
     95c:	04080039 	streq	r0, [r8], #-57	; 0x39
     960:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     964:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     968:	00000000 	andeq	r0, r0, r0
     96c:	0038f800 	eorseq	pc, r8, r0, lsl #16
     970:	0038fc08 	eorseq	pc, r8, r8, lsl #24
     974:	50000108 	andpl	r0, r0, r8, lsl #2
     978:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
     97c:	0800390a 	stmdaeq	r0, {r1, r3, r8, fp, ip, sp}
     980:	10540001 	subsne	r0, r4, r1
     984:	1c080039 	stcne	0, cr0, [r8], {57}	; 0x39
     988:	01080039 	tsteq	r8, r9, lsr r0
     98c:	00005000 	andeq	r5, r0, r0
     990:	00000000 	andeq	r0, r0, r0
     994:	391c0000 	ldmdbcc	ip, {}	; <UNPREDICTABLE>
     998:	39250800 	stmdbcc	r5!, {fp}
     99c:	00010800 	andeq	r0, r1, r0, lsl #16
     9a0:	00392550 	eorseq	r2, r9, r0, asr r5
     9a4:	00395408 	eorseq	r5, r9, r8, lsl #8
     9a8:	f3000408 	vshl.u8	d0, d8, d0
     9ac:	009f5001 	addseq	r5, pc, r1
     9b0:	00000000 	andeq	r0, r0, r0
     9b4:	1c000000 	stcne	0, cr0, [r0], {-0}
     9b8:	22080039 	andcs	r0, r8, #57	; 0x39
     9bc:	01080039 	tsteq	r8, r9, lsr r0
     9c0:	39225100 	stmdbcc	r2!, {r8, ip, lr}
     9c4:	39300800 	ldmdbcc	r0!, {fp}
     9c8:	00010800 	andeq	r0, r1, r0, lsl #16
     9cc:	00393054 	eorseq	r3, r9, r4, asr r0
     9d0:	00395408 	eorseq	r5, r9, r8, lsl #8
     9d4:	f3000408 	vshl.u8	d0, d8, d0
     9d8:	009f5101 	addseq	r5, pc, r1, lsl #2
     9dc:	00000000 	andeq	r0, r0, r0
     9e0:	30000000 	andcc	r0, r0, r0
     9e4:	34080039 	strcc	r0, [r8], #-57	; 0x39
     9e8:	01080039 	tsteq	r8, r9, lsr r0
     9ec:	39345000 	ldmdbcc	r4!, {ip, lr}
     9f0:	39420800 	stmdbcc	r2, {fp}^
     9f4:	00010800 	andeq	r0, r1, r0, lsl #16
     9f8:	00394854 	eorseq	r4, r9, r4, asr r8
     9fc:	00395408 	eorseq	r5, r9, r8, lsl #8
     a00:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     a0c:	08003954 	stmdaeq	r0, {r2, r4, r6, r8, fp, ip, sp}
     a10:	0800395d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, fp, ip, sp}
     a14:	5d500001 	ldclpl	0, cr0, [r0, #-4]
     a18:	8c080039 	stchi	0, cr0, [r8], {57}	; 0x39
     a1c:	04080039 	streq	r0, [r8], #-57	; 0x39
     a20:	5001f300 	andpl	pc, r1, r0, lsl #6
     a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	00395400 	eorseq	r5, r9, r0, lsl #8
     a30:	00395a08 	eorseq	r5, r9, r8, lsl #20
     a34:	51000108 	tstpl	r0, r8, lsl #2
     a38:	0800395a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, ip, sp}
     a3c:	08003968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip, sp}
     a40:	68540001 	ldmdavs	r4, {r0}^
     a44:	8c080039 	stchi	0, cr0, [r8], {57}	; 0x39
     a48:	04080039 	streq	r0, [r8], #-57	; 0x39
     a4c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a54:	00000000 	andeq	r0, r0, r0
     a58:	00396800 	eorseq	r6, r9, r0, lsl #16
     a5c:	00396c08 	eorseq	r6, r9, r8, lsl #24
     a60:	50000108 	andpl	r0, r0, r8, lsl #2
     a64:	0800396c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, ip, sp}
     a68:	0800397a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, ip, sp}
     a6c:	80540001 	subshi	r0, r4, r1
     a70:	8c080039 	stchi	0, cr0, [r8], {57}	; 0x39
     a74:	01080039 	tsteq	r8, r9, lsr r0
     a78:	00005000 	andeq	r5, r0, r0
     a7c:	00000000 	andeq	r0, r0, r0
     a80:	398c0000 	stmibcc	ip, {}	; <UNPREDICTABLE>
     a84:	39950800 	ldmibcc	r5, {fp}
     a88:	00010800 	andeq	r0, r1, r0, lsl #16
     a8c:	00399550 	eorseq	r9, r9, r0, asr r5
     a90:	0039c008 	eorseq	ip, r9, r8
     a94:	f3000408 	vshl.u8	d0, d8, d0
     a98:	009f5001 	addseq	r5, pc, r1
     a9c:	00000000 	andeq	r0, r0, r0
     aa0:	8c000000 	stchi	0, cr0, [r0], {-0}
     aa4:	92080039 	andls	r0, r8, #57	; 0x39
     aa8:	01080039 	tsteq	r8, r9, lsr r0
     aac:	39925100 	ldmibcc	r2, {r8, ip, lr}
     ab0:	39950800 	ldmibcc	r5, {fp}
     ab4:	00010800 	andeq	r0, r1, r0, lsl #16
     ab8:	00399552 	eorseq	r9, r9, r2, asr r5
     abc:	0039c008 	eorseq	ip, r9, r8
     ac0:	f3000408 	vshl.u8	d0, d8, d0
     ac4:	009f5101 	addseq	r5, pc, r1, lsl #2
     ac8:	00000000 	andeq	r0, r0, r0
     acc:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
     ad0:	a2080039 	andge	r0, r8, #57	; 0x39
     ad4:	01080039 	tsteq	r8, r9, lsr r0
     ad8:	39a25000 	stmibcc	r2!, {ip, lr}
     adc:	39b00800 	ldmibcc	r0!, {fp}
     ae0:	00010800 	andeq	r0, r1, r0, lsl #16
     ae4:	0039b654 	eorseq	fp, r9, r4, asr r6
     ae8:	0039c008 	eorseq	ip, r9, r8
     aec:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     af8:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
     afc:	080039c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, sp}
     b00:	c6500001 	ldrbgt	r0, [r0], -r1
     b04:	da080039 	ble	200bf0 <__Stack_Size+0x2007f0>
     b08:	04080039 	streq	r0, [r8], #-57	; 0x39
     b0c:	5001f300 	andpl	pc, r1, r0, lsl #6
     b10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b14:	00000000 	andeq	r0, r0, r0
     b18:	0039c000 	eorseq	ip, r9, r0
     b1c:	0039c608 	eorseq	ip, r9, r8, lsl #12
     b20:	51000108 	tstpl	r0, r8, lsl #2
     b24:	080039c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, fp, ip, sp}
     b28:	080039da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, sp}
     b2c:	00540001 	subseq	r0, r4, r1
     b30:	00000000 	andeq	r0, r0, r0
     b34:	c6000000 	strgt	r0, [r0], -r0
     b38:	d4080039 	strle	r0, [r8], #-57	; 0x39
     b3c:	03080039 	movweq	r0, #32825	; 0x8039
     b40:	9fff0900 	svcls	0x00ff0900
     b44:	080039d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, sp}
     b48:	080039da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, sp}
     b4c:	00500001 	subseq	r0, r0, r1
     b50:	00000000 	andeq	r0, r0, r0
     b54:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     b58:	1e08003b 	mcrne	0, 0, r0, cr8, cr11, {1}
     b5c:	0108003b 	tsteq	r8, fp, lsr r0
     b60:	3b1e5000 	blcc	794b68 <__Stack_Size+0x794768>
     b64:	3b280800 	blcc	a02b6c <__Stack_Size+0xa0276c>
     b68:	00010800 	andeq	r0, r1, r0, lsl #16
     b6c:	003b2854 	eorseq	r2, fp, r4, asr r8
     b70:	003b3708 	eorseq	r3, fp, r8, lsl #14
     b74:	03000508 	movweq	r0, #1288	; 0x508
     b78:	20000124 	andcs	r0, r0, r4, lsr #2
     b7c:	08003b37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, fp, ip, sp}
     b80:	08003b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, ip, sp}
     b84:	01f30004 	mvnseq	r0, r4
     b88:	00009f50 	andeq	r9, r0, r0, asr pc
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	3b480000 	blcc	1200b98 <__Stack_Size+0x1200798>
     b94:	3b550800 	blcc	1542b9c <__Stack_Size+0x154279c>
     b98:	00010800 	andeq	r0, r1, r0, lsl #16
     b9c:	003b5550 	eorseq	r5, fp, r0, asr r5
     ba0:	003b7a08 	eorseq	r7, fp, r8, lsl #20
     ba4:	f3000408 	vshl.u8	d0, d8, d0
     ba8:	009f5001 	addseq	r5, pc, r1
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     bb4:	5008003b 	andpl	r0, r8, fp, lsr r0
     bb8:	0108003b 	tsteq	r8, fp, lsr r0
     bbc:	3b505100 	blcc	1414fc4 <__Stack_Size+0x1414bc4>
     bc0:	3b600800 	blcc	1802bc8 <__Stack_Size+0x18027c8>
     bc4:	00010800 	andeq	r0, r1, r0, lsl #16
     bc8:	003b6054 	eorseq	r6, fp, r4, asr r0
     bcc:	003b7a08 	eorseq	r7, fp, r8, lsl #20
     bd0:	f3000408 	vshl.u8	d0, d8, d0
     bd4:	009f5101 	addseq	r5, pc, r1, lsl #2
     bd8:	00000000 	andeq	r0, r0, r0
     bdc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     be0:	5508003b 	strpl	r0, [r8, #-59]	; 0x3b
     be4:	0108003b 	tsteq	r8, fp, lsr r0
     be8:	3b555200 	blcc	15553f0 <__Stack_Size+0x1554ff0>
     bec:	3b740800 	blcc	1d02bf4 <__Stack_Size+0x1d027f4>
     bf0:	00010800 	andeq	r0, r1, r0, lsl #16
     bf4:	003b7456 	eorseq	r7, fp, r6, asr r4
     bf8:	003b7a08 	eorseq	r7, fp, r8, lsl #20
     bfc:	f3000408 	vshl.u8	d0, d8, d0
     c00:	009f5201 	addseq	r5, pc, r1, lsl #4
     c04:	00000000 	andeq	r0, r0, r0
     c08:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     c0c:	6008003b 	andvs	r0, r8, fp, lsr r0
     c10:	0208003b 	andeq	r0, r8, #59	; 0x3b
     c14:	609f3000 	addsvs	r3, pc, r0
     c18:	7408003b 	strvc	r0, [r8], #-59	; 0x3b
     c1c:	0108003b 	tsteq	r8, fp, lsr r0
     c20:	00005400 	andeq	r5, r0, r0, lsl #8
     c24:	00000000 	andeq	r0, r0, r0
     c28:	3c420000 	marcc	acc0, r0, r2
     c2c:	3c460800 	mcrrcc	8, 0, r0, r6, cr0
     c30:	00020800 	andeq	r0, r2, r0, lsl #16
     c34:	3c469f30 	mcrrcc	15, 3, r9, r6, cr0
     c38:	3d260800 	stccc	8, cr0, [r6, #-0]
     c3c:	00050800 	andeq	r0, r5, r0, lsl #16
     c40:	1c007432 	cfstrsne	mvf7, [r0], {50}	; 0x32
     c44:	003d269f 	mlaseq	sp, pc, r6, r2	; <UNPREDICTABLE>
     c48:	003d2c08 	eorseq	r2, sp, r8, lsl #24
     c4c:	33000508 	movwcc	r0, #1288	; 0x508
     c50:	9f1c0074 	svcls	0x001c0074
     c54:	08003d2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, fp, ip, sp}
     c58:	08003d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip, sp}
     c5c:	74330005 	ldrtvc	r0, [r3], #-5
     c60:	009f1c00 	addseq	r1, pc, r0, lsl #24
     c64:	00000000 	andeq	r0, r0, r0
     c68:	44000000 	strmi	r0, [r0], #-0
     c6c:	5208003d 	andpl	r0, r8, #61	; 0x3d
     c70:	0108003d 	tsteq	r8, sp, lsr r0
     c74:	3d525000 	ldclcc	0, cr5, [r2, #-0]
     c78:	3d740800 	ldclcc	8, cr0, [r4, #-0]
     c7c:	00010800 	andeq	r0, r1, r0, lsl #16
     c80:	003d7454 	eorseq	r7, sp, r4, asr r4
     c84:	003d7808 	eorseq	r7, sp, r8, lsl #16
     c88:	f3000408 	vshl.u8	d0, d8, d0
     c8c:	009f5001 	addseq	r5, pc, r1
     c90:	00000000 	andeq	r0, r0, r0
     c94:	44000000 	strmi	r0, [r0], #-0
     c98:	5008003d 	andpl	r0, r8, sp, lsr r0
     c9c:	0108003d 	tsteq	r8, sp, lsr r0
     ca0:	3d505100 	ldfcce	f5, [r0, #-0]
     ca4:	3d740800 	ldclcc	8, cr0, [r4, #-0]
     ca8:	00010800 	andeq	r0, r1, r0, lsl #16
     cac:	003d7456 	eorseq	r7, sp, r6, asr r4
     cb0:	003d7808 	eorseq	r7, sp, r8, lsl #16
     cb4:	f3000408 	vshl.u8	d0, d8, d0
     cb8:	009f5101 	addseq	r5, pc, r1, lsl #2
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	44000000 	strmi	r0, [r0], #-0
     cc4:	5508003d 	strpl	r0, [r8, #-61]	; 0x3d
     cc8:	0108003d 	tsteq	r8, sp, lsr r0
     ccc:	3d555200 	lfmcc	f5, 2, [r5, #-0]
     cd0:	3d740800 	ldclcc	8, cr0, [r4, #-0]
     cd4:	00010800 	andeq	r0, r1, r0, lsl #16
     cd8:	003d7455 	eorseq	r7, sp, r5, asr r4
     cdc:	003d7808 	eorseq	r7, sp, r8, lsl #16
     ce0:	f3000408 	vshl.u8	d0, d8, d0
     ce4:	009f5201 	addseq	r5, pc, r1, lsl #4
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     cf0:	8008003d 	andhi	r0, r8, sp, lsr r0
     cf4:	0108003d 	tsteq	r8, sp, lsr r0
     cf8:	3d805000 	stccc	0, cr5, [r0]
     cfc:	3dae0800 	stccc	8, cr0, [lr]
     d00:	00010800 	andeq	r0, r1, r0, lsl #16
     d04:	003dae54 	eorseq	sl, sp, r4, asr lr
     d08:	003db608 	eorseq	fp, sp, r8, lsl #12
     d0c:	f3000408 	vshl.u8	d0, d8, d0
     d10:	b69f5001 	ldrlt	r5, [pc], r1
     d14:	b808003d 	stmdalt	r8, {r0, r2, r3, r4, r5}
     d18:	0108003d 	tsteq	r8, sp, lsr r0
     d1c:	3db85400 	cfldrscc	mvf5, [r8]
     d20:	3dc00800 	stclcc	8, cr0, [r0]
     d24:	00040800 	andeq	r0, r4, r0, lsl #16
     d28:	9f5001f3 	svcls	0x005001f3
	...
     d34:	08003d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, ip, sp}
     d38:	08003d83 	stmdaeq	r0, {r0, r1, r7, r8, sl, fp, ip, sp}
     d3c:	83510001 	cmphi	r1, #1
     d40:	ae08003d 	mcrge	0, 0, r0, cr8, cr13, {1}
     d44:	0108003d 	tsteq	r8, sp, lsr r0
     d48:	3dae5500 	cfstr32cc	mvfx5, [lr]
     d4c:	3db60800 	ldccc	8, cr0, [r6]
     d50:	00040800 	andeq	r0, r4, r0, lsl #16
     d54:	9f5101f3 	svcls	0x005101f3
     d58:	08003db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, ip, sp}
     d5c:	08003db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip, sp}
     d60:	b8550001 	ldmdalt	r5, {r0}^
     d64:	c008003d 	andgt	r0, r8, sp, lsr r0
     d68:	0408003d 	streq	r0, [r8], #-61	; 0x3d
     d6c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     d70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d74:	00000000 	andeq	r0, r0, r0
     d78:	003d8a00 	eorseq	r8, sp, r0, lsl #20
     d7c:	003dae08 	eorseq	sl, sp, r8, lsl #28
     d80:	54000108 	strpl	r0, [r0], #-264	; 0x108
     d84:	08003dae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, fp, ip, sp}
     d88:	08003db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, ip, sp}
     d8c:	01f30004 	mvnseq	r0, r4
     d90:	00009f50 	andeq	r9, r0, r0, asr pc
     d94:	00000000 	andeq	r0, r0, r0
     d98:	3d8a0000 	stccc	0, cr0, [sl]
     d9c:	3dae0800 	stccc	8, cr0, [lr]
     da0:	00010800 	andeq	r0, r1, r0, lsl #16
     da4:	003dae55 	eorseq	sl, sp, r5, asr lr
     da8:	003db608 	eorseq	fp, sp, r8, lsl #12
     dac:	f3000408 	vshl.u8	d0, d8, d0
     db0:	009f5101 	addseq	r5, pc, r1, lsl #2
     db4:	00000000 	andeq	r0, r0, r0
     db8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     dbc:	b608003d 			; <UNDEFINED> instruction: 0xb608003d
     dc0:	0408003d 	streq	r0, [r8], #-61	; 0x3d
     dc4:	03ff0a00 	mvnseq	r0, #0, 20
     dc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	003dc000 	eorseq	ip, sp, r0
     dd4:	003dca08 	eorseq	ip, sp, r8, lsl #20
     dd8:	50000108 	andpl	r0, r0, r8, lsl #2
     ddc:	08003dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip, sp}
     de0:	08003e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip, sp}
     de4:	01f30004 	mvnseq	r0, r4
     de8:	00009f50 	andeq	r9, r0, r0, asr pc
     dec:	00000000 	andeq	r0, r0, r0
     df0:	3dc00000 	stclcc	0, cr0, [r0]
     df4:	3dcd0800 	stclcc	8, cr0, [sp]
     df8:	00010800 	andeq	r0, r1, r0, lsl #16
     dfc:	003dcd51 	eorseq	ip, sp, r1, asr sp
     e00:	003e3208 	eorseq	r3, lr, r8, lsl #4
     e04:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     e08:	08003e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip, sp}
     e0c:	08003e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, ip, sp}
     e10:	01f30004 	mvnseq	r0, r4
     e14:	00009f51 	andeq	r9, r0, r1, asr pc
     e18:	00000000 	andeq	r0, r0, r0
     e1c:	3e6c0000 	cdpcc	0, 6, cr0, cr12, cr0, {0}
     e20:	3e700800 	cdpcc	8, 7, cr0, cr0, cr0, {0}
     e24:	00010800 	andeq	r0, r1, r0, lsl #16
     e28:	003e7050 	eorseq	r7, lr, r0, asr r0
     e2c:	003e7308 	eorseq	r7, lr, r8, lsl #6
     e30:	51000108 	tstpl	r0, r8, lsl #2
     e34:	08003e73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sl, fp, ip, sp}
     e38:	08003e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, sp}
     e3c:	01f30004 	mvnseq	r0, r4
     e40:	00009f50 	andeq	r9, r0, r0, asr pc
     e44:	00000000 	andeq	r0, r0, r0
     e48:	5fd00000 	svcpl	0x00d00000
     e4c:	604e0800 	subvs	r0, lr, r0, lsl #16
     e50:	00020800 	andeq	r0, r2, r0, lsl #16
     e54:	604e9f30 	subvs	r9, lr, r0, lsr pc
     e58:	60520800 	subsvs	r0, r2, r0, lsl #16
     e5c:	00020800 	andeq	r0, r2, r0, lsl #16
     e60:	60529f31 	subsvs	r9, r2, r1, lsr pc
     e64:	60920800 	addsvs	r0, r2, r0, lsl #16
     e68:	00020800 	andeq	r0, r2, r0, lsl #16
     e6c:	60929f32 	addsvs	r9, r2, r2, lsr pc
     e70:	610e0800 	tstvs	lr, r0, lsl #16
     e74:	00020800 	andeq	r0, r2, r0, lsl #16
     e78:	610e9f33 	tstvs	lr, r3, lsr pc
     e7c:	611c0800 	tstvs	ip, r0, lsl #16
     e80:	00010800 	andeq	r0, r1, r0, lsl #16
     e84:	00000053 	andeq	r0, r0, r3, asr r0
     e88:	00000000 	andeq	r0, r0, r0
     e8c:	00602e00 	rsbeq	r2, r0, r0, lsl #28
     e90:	00604c08 	rsbeq	r4, r0, r8, lsl #24
     e94:	74000408 	strvc	r0, [r0], #-1032	; 0x408
     e98:	4c9f7eea 	ldcmi	14, cr7, [pc], {234}	; 0xea
     e9c:	1c080060 	stcne	0, cr0, [r8], {96}	; 0x60
     ea0:	01080061 	tsteq	r8, r1, rrx
     ea4:	00005400 	andeq	r5, r0, r0, lsl #8
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	604c0000 	subvs	r0, ip, r0
     eb0:	604e0800 	subvs	r0, lr, r0, lsl #16
     eb4:	00040800 	andeq	r0, r4, r0, lsl #16
     eb8:	9f019675 	svcls	0x00019675
     ebc:	0800604e 	stmdaeq	r0, {r1, r2, r3, r6, sp, lr}
     ec0:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}
     ec4:	00550001 	subseq	r0, r5, r1
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	bc000000 	stclt	0, cr0, [r0], {-0}
     ed0:	c8080060 	stmdagt	r8, {r5, r6}
     ed4:	01080060 	tsteq	r8, r0, rrx
     ed8:	00005500 	andeq	r5, r0, r0, lsl #10
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	60bc0000 	adcsvs	r0, ip, r0
     ee4:	60c80800 	sbcvs	r0, r8, r0, lsl #16
     ee8:	00010800 	andeq	r0, r1, r0, lsl #16
     eec:	00000054 	andeq	r0, r0, r4, asr r0
     ef0:	00000000 	andeq	r0, r0, r0
     ef4:	0060bc00 	rsbeq	fp, r0, r0, lsl #24
     ef8:	0060c808 	rsbeq	ip, r0, r8, lsl #16
     efc:	91000308 	tstls	r0, r8, lsl #6
     f00:	00009f5c 	andeq	r9, r0, ip, asr pc
	...
     f0c:	00040000 	andeq	r0, r4, r0
     f10:	00010000 	andeq	r0, r1, r0
     f14:	00000450 	andeq	r0, r0, r0, asr r4
     f18:	00000c00 	andeq	r0, r0, r0, lsl #24
     f1c:	f3000400 	vshl.u8	d0, d0, d0
     f20:	009f5001 	addseq	r5, pc, r1
	...
     f2c:	07000000 	streq	r0, [r0, -r0]
     f30:	01000000 	mrseq	r0, (UNDEF: 0)
     f34:	00075100 	andeq	r5, r7, r0, lsl #2
     f38:	000c0000 	andeq	r0, ip, r0
     f3c:	00040000 	andeq	r0, r4, r0
     f40:	9f5101f3 	svcls	0x005101f3
	...
     f4c:	00000014 	andeq	r0, r0, r4, lsl r0
     f50:	0000001c 	andeq	r0, r0, ip, lsl r0
     f54:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     f58:	32000000 	andcc	r0, r0, #0
     f5c:	01000000 	mrseq	r0, (UNDEF: 0)
     f60:	00005600 	andeq	r5, r0, r0, lsl #12
     f64:	00000000 	andeq	r0, r0, r0
     f68:	00140000 	andseq	r0, r4, r0
     f6c:	001c0000 	andseq	r0, ip, r0
     f70:	00010000 	andeq	r0, r1, r0
     f74:	00001c51 	andeq	r1, r0, r1, asr ip
     f78:	00003200 	andeq	r3, r0, r0, lsl #4
     f7c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     f88:	00000014 	andeq	r0, r0, r4, lsl r0
     f8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f90:	9f300002 	svcls	0x00300002
     f94:	0000001c 	andeq	r0, r0, ip, lsl r0
     f98:	00000029 	andeq	r0, r0, r9, lsr #32
     f9c:	2a530001 	bcs	14c0fa8 <__Stack_Size+0x14c0ba8>
     fa0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     fa4:	01000000 	mrseq	r0, (UNDEF: 0)
     fa8:	002e5500 	eoreq	r5, lr, r0, lsl #10
     fac:	00320000 	eorseq	r0, r2, r0
     fb0:	00010000 	andeq	r0, r1, r0
     fb4:	00000053 	andeq	r0, r0, r3, asr r0
     fb8:	00000000 	andeq	r0, r0, r0
     fbc:	00003200 	andeq	r3, r0, r0, lsl #4
     fc0:	00003a00 	andeq	r3, r0, r0, lsl #20
     fc4:	50000100 	andpl	r0, r0, r0, lsl #2
     fc8:	0000003a 	andeq	r0, r0, sl, lsr r0
     fcc:	00000056 	andeq	r0, r0, r6, asr r0
     fd0:	00570001 	subseq	r0, r7, r1
     fd4:	00000000 	andeq	r0, r0, r0
     fd8:	32000000 	andcc	r0, r0, #0
     fdc:	3a000000 	bcc	fe4 <__Stack_Size+0xbe4>
     fe0:	01000000 	mrseq	r0, (UNDEF: 0)
     fe4:	003a5100 	eorseq	r5, sl, r0, lsl #2
     fe8:	00560000 	subseq	r0, r6, r0
     fec:	00010000 	andeq	r0, r1, r0
     ff0:	00000056 	andeq	r0, r0, r6, asr r0
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	00003200 	andeq	r3, r0, r0, lsl #4
     ffc:	00003a00 	andeq	r3, r0, r0, lsl #20
    1000:	30000200 	andcc	r0, r0, r0, lsl #4
    1004:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1008:	00003c00 	andeq	r3, r0, r0, lsl #24
    100c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1010:	0000003c 	andeq	r0, r0, ip, lsr r0
    1014:	0000004e 	andeq	r0, r0, lr, asr #32
    1018:	4e550001 	cdpmi	0, 5, cr0, cr5, cr1, {0}
    101c:	50000000 	andpl	r0, r0, r0
    1020:	01000000 	mrseq	r0, (UNDEF: 0)
    1024:	00505400 	subseq	r5, r0, r0, lsl #8
    1028:	00520000 	subseq	r0, r2, r0
    102c:	00010000 	andeq	r0, r1, r0
    1030:	00000055 	andeq	r0, r0, r5, asr r0
    1034:	00000000 	andeq	r0, r0, r0
    1038:	00005600 	andeq	r5, r0, r0, lsl #12
    103c:	00005a00 	andeq	r5, r0, r0, lsl #20
    1040:	50000100 	andpl	r0, r0, r0, lsl #2
    1044:	0000005a 	andeq	r0, r0, sl, asr r0
    1048:	0000005e 	andeq	r0, r0, lr, asr r0
    104c:	01f30004 	mvnseq	r0, r4
    1050:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    105c:	000d0000 	andeq	r0, sp, r0
    1060:	00010000 	andeq	r0, r1, r0
    1064:	00000d50 	andeq	r0, r0, r0, asr sp
    1068:	00002c00 	andeq	r2, r0, r0, lsl #24
    106c:	f3000400 	vshl.u8	d0, d0, d0
    1070:	009f5001 	addseq	r5, pc, r1
	...
    107c:	06000000 	streq	r0, [r0], -r0
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
    1084:	00065100 	andeq	r5, r6, r0, lsl #2
    1088:	000a0000 	andeq	r0, sl, r0
    108c:	00030000 	andeq	r0, r3, r0
    1090:	0a9f7f71 	beq	fe7e0e5c <SCS_BASE+0x1e7d2e5c>
    1094:	2c000000 	stccs	0, cr0, [r0], {-0}
    1098:	04000000 	streq	r0, [r0], #-0
    109c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    10a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    10ac:	00000600 	andeq	r0, r0, r0, lsl #12
    10b0:	0c000900 	stceq	9, cr0, [r0], {-0}
    10b4:	001e8480 	andseq	r8, lr, r0, lsl #9
    10b8:	9f1b0171 	svcls	0x001b0171
    10bc:	00000006 	andeq	r0, r0, r6
    10c0:	0000000a 	andeq	r0, r0, sl
    10c4:	800c0009 	andhi	r0, ip, r9
    10c8:	71001e84 	smlabbvc	r0, r4, lr, r1
    10cc:	0a9f1b00 	beq	fe7c7cd4 <SCS_BASE+0x1e7b9cd4>
    10d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    10d4:	01000000 	mrseq	r0, (UNDEF: 0)
    10d8:	000d5100 	andeq	r5, sp, r0, lsl #2
    10dc:	002c0000 	eoreq	r0, ip, r0
    10e0:	000c0000 	andeq	r0, ip, r0
    10e4:	1e84800c 	cdpne	0, 8, cr8, cr4, cr12, {0}
    10e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    10ec:	9f1b0123 	svcls	0x001b0123
	...
    10f8:	00000064 	andeq	r0, r0, r4, rrx
    10fc:	00000066 	andeq	r0, r0, r6, rrx
    1100:	9f300002 	svcls	0x00300002
    1104:	00000066 	andeq	r0, r0, r6, rrx
    1108:	00000068 	andeq	r0, r0, r8, rrx
    110c:	68500001 	ldmdavs	r0, {r0}^
    1110:	72000000 	andvc	r0, r0, #0
    1114:	01000000 	mrseq	r0, (UNDEF: 0)
    1118:	00785100 	rsbseq	r5, r8, r0, lsl #2
    111c:	007a0000 	rsbseq	r0, sl, r0
    1120:	00010000 	andeq	r0, r1, r0
    1124:	00007a50 	andeq	r7, r0, r0, asr sl
    1128:	00008d00 	andeq	r8, r0, r0, lsl #26
    112c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1138:	00000030 	andeq	r0, r0, r0, lsr r0
    113c:	00000066 	andeq	r0, r0, r6, rrx
    1140:	9f300002 	svcls	0x00300002
    1144:	00000066 	andeq	r0, r0, r6, rrx
    1148:	00000076 	andeq	r0, r0, r6, ror r0
    114c:	78530001 	ldmdavc	r3, {r0}^
    1150:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1154:	01000000 	mrseq	r0, (UNDEF: 0)
    1158:	00005300 	andeq	r5, r0, r0, lsl #6
    115c:	00000000 	andeq	r0, r0, r0
    1160:	00960000 	addseq	r0, r6, r0
    1164:	00c20000 	sbceq	r0, r2, r0
    1168:	00010000 	andeq	r0, r1, r0
    116c:	00000054 	andeq	r0, r0, r4, asr r0
    1170:	00000000 	andeq	r0, r0, r0
    1174:	00009e00 	andeq	r9, r0, r0, lsl #28
    1178:	0000b600 	andeq	fp, r0, r0, lsl #12
    117c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1188:	00000108 	andeq	r0, r0, r8, lsl #2
    118c:	0000010e 	andeq	r0, r0, lr, lsl #2
    1190:	00500001 	subseq	r0, r0, r1
    1194:	00000000 	andeq	r0, r0, r0
    1198:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    119c:	3a000001 	bcc	11a8 <__Stack_Size+0xda8>
    11a0:	01000001 	tsteq	r0, r1
    11a4:	01625300 	cmneq	r2, r0, lsl #6
    11a8:	01900000 	orrseq	r0, r0, r0
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	00019053 	andeq	r9, r1, r3, asr r0
    11b4:	00019200 	andeq	r9, r1, r0, lsl #4
    11b8:	72000300 	andvc	r0, r0, #0, 6
    11bc:	01929f01 	orrseq	r9, r2, r1, lsl #30
    11c0:	01940000 	orrseq	r0, r4, r0
    11c4:	00030000 	andeq	r0, r3, r0
    11c8:	949f0173 	ldrls	r0, [pc], #371	; 11d0 <__Stack_Size+0xdd0>
    11cc:	b0000001 	andlt	r0, r0, r1
    11d0:	01000001 	tsteq	r0, r1
    11d4:	01ea5300 	mvneq	r5, r0, lsl #6
    11d8:	01ec0000 	mvneq	r0, r0
    11dc:	00010000 	andeq	r0, r1, r0
    11e0:	0001ec50 	andeq	lr, r1, r0, asr ip
    11e4:	0001f600 	andeq	pc, r1, r0, lsl #12
    11e8:	51000100 	mrspl	r0, (UNDEF: 16)
    11ec:	000001fe 	strdeq	r0, [r0], -lr
    11f0:	00000200 	andeq	r0, r0, r0, lsl #4
    11f4:	00500001 	subseq	r0, r0, r1
    11f8:	10000002 	andne	r0, r0, r2
    11fc:	01000002 	tsteq	r0, r2
    1200:	00005100 	andeq	r5, r0, r0, lsl #2
    1204:	00000000 	andeq	r0, r0, r0
    1208:	012e0000 			; <UNDEFINED> instruction: 0x012e0000
    120c:	01320000 	teqeq	r2, r0
    1210:	00010000 	andeq	r0, r1, r0
    1214:	00019452 	andeq	r9, r1, r2, asr r4
    1218:	00019600 	andeq	r9, r1, r0, lsl #12
    121c:	50000100 	andpl	r0, r0, r0, lsl #2
    1220:	00000196 	muleq	r0, r6, r1
    1224:	000001aa 	andeq	r0, r0, sl, lsr #3
    1228:	ae520001 	cdpge	0, 5, cr0, cr2, cr1, {0}
    122c:	b0000001 	andlt	r0, r0, r1
    1230:	01000001 	tsteq	r0, r1
    1234:	00005000 	andeq	r5, r0, r0
    1238:	00000000 	andeq	r0, r0, r0
    123c:	01c80000 	biceq	r0, r8, r0
    1240:	01ce0000 	biceq	r0, lr, r0
    1244:	00010000 	andeq	r0, r1, r0
    1248:	00000050 	andeq	r0, r0, r0, asr r0
    124c:	00000000 	andeq	r0, r0, r0
    1250:	0001ea00 	andeq	lr, r1, r0, lsl #20
    1254:	0001fc00 	andeq	pc, r1, r0, lsl #24
    1258:	53000100 	movwpl	r0, #256	; 0x100
    125c:	000001fe 	strdeq	r0, [r0], -lr
    1260:	00000200 	andeq	r0, r0, r0, lsl #4
    1264:	00530001 	subseq	r0, r3, r1
    1268:	02000002 	andeq	r0, r0, #2
    126c:	04000002 	streq	r0, [r0], #-2
    1270:	20007300 	andcs	r7, r0, r0, lsl #6
    1274:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1278:	00000000 	andeq	r0, r0, r0
    127c:	00026000 	andeq	r6, r2, r0
    1280:	00026400 	andeq	r6, r2, r0, lsl #8
    1284:	50000100 	andpl	r0, r0, r0, lsl #2
    1288:	00000264 	andeq	r0, r0, r4, ror #4
    128c:	0000026c 	andeq	r0, r0, ip, ror #4
    1290:	00700009 	rsbseq	r0, r0, r9
    1294:	00013003 	andeq	r3, r1, r3
    1298:	009f1c20 	addseq	r1, pc, r0, lsr #24
    129c:	00000000 	andeq	r0, r0, r0
    12a0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    12a4:	84000002 	strhi	r0, [r0], #-2
    12a8:	01000002 	tsteq	r0, r2
    12ac:	02845000 	addeq	r5, r4, #0
    12b0:	028c0000 	addeq	r0, ip, #0
    12b4:	00040000 	andeq	r0, r4, r0
    12b8:	9f5001f3 	svcls	0x005001f3
	...
    12c4:	00000298 	muleq	r0, r8, r2
    12c8:	0000029c 	muleq	r0, ip, r2
    12cc:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    12d0:	a0000002 	andge	r0, r0, r2
    12d4:	09000002 	stmdbeq	r0, {r1}
    12d8:	03007000 	movweq	r7, #0
    12dc:	20000130 	andcs	r0, r0, r0, lsr r1
    12e0:	02a09f1c 	adceq	r9, r0, #28, 30	; 0x70
    12e4:	02a80000 	adceq	r0, r8, #0
    12e8:	00040000 	andeq	r0, r4, r0
    12ec:	9f5001f3 	svcls	0x005001f3
	...
    12f8:	000002a8 	andeq	r0, r0, r8, lsr #5
    12fc:	000002ac 	andeq	r0, r0, ip, lsr #5
    1300:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1304:	b0000002 	andlt	r0, r0, r2
    1308:	04000002 	streq	r0, [r0], #-2
    130c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1310:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1314:	00000000 	andeq	r0, r0, r0
    1318:	0002a800 	andeq	sl, r2, r0, lsl #16
    131c:	0002ac00 	andeq	sl, r2, r0, lsl #24
    1320:	71000c00 	tstvc	r0, r0, lsl #24
    1324:	0a243800 	beq	90f32c <__Stack_Size+0x90ef2c>
    1328:	701aff00 	andsvc	pc, sl, r0, lsl #30
    132c:	ac9f2200 	lfmge	f2, 4, [pc], {0}
    1330:	b0000002 	andlt	r0, r0, r2
    1334:	0d000002 	stceq	0, cr0, [r0, #-8]
    1338:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    133c:	ff000a24 			; <UNDEFINED> instruction: 0xff000a24
    1340:	5001f31a 	andpl	pc, r1, sl, lsl r3	; <UNPREDICTABLE>
    1344:	00009f22 	andeq	r9, r0, r2, lsr #30
    1348:	00000000 	andeq	r0, r0, r0
    134c:	02b00000 	adcseq	r0, r0, #0
    1350:	02b20000 	adcseq	r0, r2, #0
    1354:	00010000 	andeq	r0, r1, r0
    1358:	0002b250 	andeq	fp, r2, r0, asr r2
    135c:	0002b400 	andeq	fp, r2, r0, lsl #8
    1360:	f3000400 	vshl.u8	d0, d0, d0
    1364:	009f5001 	addseq	r5, pc, r1
    1368:	00000000 	andeq	r0, r0, r0
    136c:	b0000000 	andlt	r0, r0, r0
    1370:	b2000002 	andlt	r0, r0, #2
    1374:	06000002 	streq	r0, [r0], -r2
    1378:	08007000 	stmdaeq	r0, {ip, sp, lr}
    137c:	b29f1aff 	addslt	r1, pc, #1044480	; 0xff000
    1380:	b4000002 	strlt	r0, [r0], #-2
    1384:	07000002 	streq	r0, [r0, -r2]
    1388:	5001f300 	andpl	pc, r1, r0, lsl #6
    138c:	9f1aff08 	svcls	0x001aff08
	...
    1398:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    139c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    13a0:	b8500001 	ldmdalt	r0, {r0}^
    13a4:	ba000002 	blt	13b4 <__Stack_Size+0xfb4>
    13a8:	04000002 	streq	r0, [r0], #-2
    13ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    13b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	0002b400 	andeq	fp, r2, r0, lsl #8
    13bc:	0002b800 	andeq	fp, r2, r0, lsl #16
    13c0:	70000900 	andvc	r0, r0, r0, lsl #18
    13c4:	ff000a00 			; <UNDEFINED> instruction: 0xff000a00
    13c8:	9f25381a 	svcls	0x0025381a
    13cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    13d0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    13d4:	01f3000a 	mvnseq	r0, sl
    13d8:	ff000a50 			; <UNDEFINED> instruction: 0xff000a50
    13dc:	9f25381a 	svcls	0x0025381a
	...
    13e8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    13ec:	000002cf 	andeq	r0, r0, pc, asr #5
    13f0:	cf500001 	svcgt	0x00500001
    13f4:	d4000002 	strle	r0, [r0], #-2
    13f8:	04000002 	streq	r0, [r0], #-2
    13fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1400:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1404:	00000000 	andeq	r0, r0, r0
    1408:	0002d400 	andeq	sp, r2, r0, lsl #8
    140c:	0002f100 	andeq	pc, r2, r0, lsl #2
    1410:	50000100 	andpl	r0, r0, r0, lsl #2
    1414:	000002f1 	strdeq	r0, [r0], -r1
    1418:	000002fc 	strdeq	r0, [r0], -ip
    141c:	01f30004 	mvnseq	r0, r4
    1420:	00009f50 	andeq	r9, r0, r0, asr pc
    1424:	00000000 	andeq	r0, r0, r0
    1428:	02d40000 	sbcseq	r0, r4, #0
    142c:	02f10000 	rscseq	r0, r1, #0
    1430:	00010000 	andeq	r0, r1, r0
    1434:	0002f151 	andeq	pc, r2, r1, asr r1	; <UNPREDICTABLE>
    1438:	0002fc00 	andeq	pc, r2, r0, lsl #24
    143c:	f3000400 	vshl.u8	d0, d0, d0
    1440:	009f5101 	addseq	r5, pc, r1, lsl #2
    1444:	00000000 	andeq	r0, r0, r0
    1448:	fc000000 	stc2	0, cr0, [r0], {-0}
    144c:	0c000002 	stceq	0, cr0, [r0], {2}
    1450:	01000003 	tsteq	r0, r3
    1454:	030c5000 	movweq	r5, #49152	; 0xc000
    1458:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    145c:	00040000 	andeq	r0, r4, r0
    1460:	9f5001f3 	svcls	0x005001f3
	...
    146c:	000002fc 	strdeq	r0, [r0], -ip
    1470:	0000031b 	andeq	r0, r0, fp, lsl r3
    1474:	1b510001 	blne	1441480 <__Stack_Size+0x1441080>
    1478:	20000003 	andcs	r0, r0, r3
    147c:	04000003 	streq	r0, [r0], #-3
    1480:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1488:	00000000 	andeq	r0, r0, r0
    148c:	0002fc00 	andeq	pc, r2, r0, lsl #24
    1490:	00030e00 	andeq	r0, r3, r0, lsl #28
    1494:	52000100 	andpl	r0, r0, #0, 2
    1498:	0000030e 	andeq	r0, r0, lr, lsl #6
    149c:	00000320 	andeq	r0, r0, r0, lsr #6
    14a0:	01f30004 	mvnseq	r0, r4
    14a4:	00009f52 	andeq	r9, r0, r2, asr pc
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    14b0:	033b0000 	teqeq	fp, #0
    14b4:	00010000 	andeq	r0, r1, r0
    14b8:	00033b50 	andeq	r3, r3, r0, asr fp
    14bc:	00035000 	andeq	r5, r3, r0
    14c0:	f3000400 	vshl.u8	d0, d0, d0
    14c4:	009f5001 	addseq	r5, pc, r1
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	20000000 	andcs	r0, r0, r0
    14d0:	3b000003 	blcc	14e4 <__Stack_Size+0x10e4>
    14d4:	01000003 	tsteq	r0, r3
    14d8:	033b5100 	teqeq	fp, #0, 2
    14dc:	03500000 	cmpeq	r0, #0
    14e0:	00040000 	andeq	r0, r4, r0
    14e4:	9f5101f3 	svcls	0x005101f3
	...
    14f0:	0000033c 	andeq	r0, r0, ip, lsr r3
    14f4:	00000340 	andeq	r0, r0, r0, asr #6
    14f8:	dc03000b 	stcle	0, cr0, [r3], {11}
    14fc:	94200001 	strtls	r0, [r0], #-1
    1500:	1aff0801 	bne	fffc350c <SCS_BASE+0x1ffb550c>
    1504:	0003409f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1508:	00034800 	andeq	r4, r3, r0, lsl #16
    150c:	50000100 	andpl	r0, r0, r0, lsl #2
    1510:	00000348 	andeq	r0, r0, r8, asr #6
    1514:	00000350 	andeq	r0, r0, r0, asr r3
    1518:	dc03000b 	stcle	0, cr0, [r3], {11}
    151c:	94200001 	strtls	r0, [r0], #-1
    1520:	1aff0801 	bne	fffc352c <SCS_BASE+0x1ffb552c>
    1524:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1528:	00000000 	andeq	r0, r0, r0
    152c:	00033c00 	andeq	r3, r3, r0, lsl #24
    1530:	00034400 	andeq	r4, r3, r0, lsl #8
    1534:	03000b00 	movweq	r0, #2816	; 0xb00
    1538:	200001db 	ldrdcs	r0, [r0], -fp
    153c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1540:	03449f1a 	movteq	r9, #20250	; 0x4f1a
    1544:	03500000 	cmpeq	r0, #0
    1548:	00010000 	andeq	r0, r1, r0
    154c:	00000053 	andeq	r0, r0, r3, asr r0
    1550:	00000000 	andeq	r0, r0, r0
    1554:	00034000 	andeq	r4, r3, r0
    1558:	00034800 	andeq	r4, r3, r0, lsl #16
    155c:	03001000 	movweq	r1, #0
    1560:	200001db 	ldrdcs	r0, [r0], -fp
    1564:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1568:	3800701a 	stmdacc	r0, {r1, r3, r4, ip, sp, lr}
    156c:	489f2224 	ldmmi	pc, {r2, r5, r9, sp}	; <UNPREDICTABLE>
    1570:	50000003 	andpl	r0, r0, r3
    1574:	18000003 	stmdane	r0, {r0, r1}
    1578:	01db0300 	bicseq	r0, fp, r0, lsl #6
    157c:	01942000 	orrseq	r2, r4, r0
    1580:	031aff08 	tsteq	sl, #8, 30	; <UNPREDICTABLE>
    1584:	200001dc 	ldrdcs	r0, [r0], -ip
    1588:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    158c:	2224381a 	eorcs	r3, r4, #1703936	; 0x1a0000
    1590:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1594:	00000000 	andeq	r0, r0, r0
    1598:	00035000 	andeq	r5, r3, r0
    159c:	00036600 	andeq	r6, r3, r0, lsl #12
    15a0:	50000100 	andpl	r0, r0, r0, lsl #2
    15a4:	00000366 	andeq	r0, r0, r6, ror #6
    15a8:	0000037c 	andeq	r0, r0, ip, ror r3
    15ac:	01f30004 	mvnseq	r0, r4
    15b0:	00009f50 	andeq	r9, r0, r0, asr pc
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	03500000 	cmpeq	r0, #0
    15bc:	03750000 	cmneq	r5, #0
    15c0:	00010000 	andeq	r0, r1, r0
    15c4:	00037551 	andeq	r7, r3, r1, asr r5
    15c8:	00037c00 	andeq	r7, r3, r0, lsl #24
    15cc:	f3000400 	vshl.u8	d0, d0, d0
    15d0:	009f5101 	addseq	r5, pc, r1, lsl #2
    15d4:	00000000 	andeq	r0, r0, r0
    15d8:	50000000 	andpl	r0, r0, r0
    15dc:	60000003 	andvs	r0, r0, r3
    15e0:	01000003 	tsteq	r0, r3
    15e4:	03605200 	cmneq	r0, #0, 4
    15e8:	037c0000 	cmneq	ip, #0
    15ec:	00040000 	andeq	r0, r4, r0
    15f0:	9f5201f3 	svcls	0x005201f3
	...
    1600:	0000000e 	andeq	r0, r0, lr
    1604:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    1608:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    160c:	04000000 	streq	r0, [r0], #-0
    1610:	5001f300 	andpl	pc, r1, r0, lsl #6
    1614:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1618:	00000000 	andeq	r0, r0, r0
    161c:	00001800 	andeq	r1, r0, r0, lsl #16
    1620:	00002600 	andeq	r2, r0, r0, lsl #12
    1624:	50000100 	andpl	r0, r0, r0, lsl #2
    1628:	00000026 	andeq	r0, r0, r6, lsr #32
    162c:	00000030 	andeq	r0, r0, r0, lsr r0
    1630:	01f30004 	mvnseq	r0, r4
    1634:	00009f50 	andeq	r9, r0, r0, asr pc
    1638:	00000000 	andeq	r0, r0, r0
    163c:	00300000 	eorseq	r0, r0, r0
    1640:	003e0000 	eorseq	r0, lr, r0
    1644:	00010000 	andeq	r0, r1, r0
    1648:	00003e50 	andeq	r3, r0, r0, asr lr
    164c:	00004800 	andeq	r4, r0, r0, lsl #16
    1650:	f3000400 	vshl.u8	d0, d0, d0
    1654:	009f5001 	addseq	r5, pc, r1
    1658:	00000000 	andeq	r0, r0, r0
    165c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1660:	8c000000 	stchi	0, cr0, [r0], {-0}
    1664:	02000000 	andeq	r0, r0, #0
    1668:	8c9f3000 	ldchi	0, cr3, [pc], {0}
    166c:	90000000 	andls	r0, r0, r0
    1670:	07000000 	streq	r0, [r0, -r0]
    1674:	32007000 	andcc	r7, r0, #0
    1678:	9f2e301a 	svcls	0x002e301a
	...
    1684:	00000098 	muleq	r0, r8, r0
    1688:	0000009c 	muleq	r0, ip, r0
    168c:	9f300002 	svcls	0x00300002
    1690:	0000009c 	muleq	r0, ip, r0
    1694:	000000a0 	andeq	r0, r0, r0, lsr #1
    1698:	00700008 	rsbseq	r0, r0, r8
    169c:	301a2008 	andscc	r2, sl, r8
    16a0:	00009f2e 	andeq	r9, r0, lr, lsr #30
    16a4:	00000000 	andeq	r0, r0, r0
    16a8:	00a80000 	adceq	r0, r8, r0
    16ac:	00b00000 	adcseq	r0, r0, r0
    16b0:	00010000 	andeq	r0, r1, r0
    16b4:	0000b050 	andeq	fp, r0, r0, asr r0
    16b8:	0000b200 	andeq	fp, r0, r0, lsl #4
    16bc:	f3000400 	vshl.u8	d0, d0, d0
    16c0:	b29f5001 	addslt	r5, pc, #1
    16c4:	b6000000 	strlt	r0, [r0], -r0
    16c8:	01000000 	mrseq	r0, (UNDEF: 0)
    16cc:	00b65000 	adcseq	r5, r6, r0
    16d0:	00c00000 	sbceq	r0, r0, r0
    16d4:	00040000 	andeq	r0, r4, r0
    16d8:	9f5001f3 	svcls	0x005001f3
	...
    16e4:	000000c0 	andeq	r0, r0, r0, asr #1
    16e8:	000000c8 	andeq	r0, r0, r8, asr #1
    16ec:	c8500001 	ldmdagt	r0, {r0}^
    16f0:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    16f4:	04000000 	streq	r0, [r0], #-0
    16f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    16fc:	0000ce9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1700:	0000d600 	andeq	sp, r0, r0, lsl #12
    1704:	50000100 	andpl	r0, r0, r0, lsl #2
    1708:	000000d6 	ldrdeq	r0, [r0], -r6
    170c:	000000e0 	andeq	r0, r0, r0, ror #1
    1710:	01f30004 	mvnseq	r0, r4
    1714:	00009f50 	andeq	r9, r0, r0, asr pc
    1718:	00000000 	andeq	r0, r0, r0
    171c:	00c00000 	sbceq	r0, r0, r0
    1720:	00d80000 	sbcseq	r0, r8, r0
    1724:	00020000 	andeq	r0, r2, r0
    1728:	00d89f30 	sbcseq	r9, r8, r0, lsr pc
    172c:	00e00000 	rsceq	r0, r0, r0
    1730:	00010000 	andeq	r0, r1, r0
    1734:	00000050 	andeq	r0, r0, r0, asr r0
    1738:	00000000 	andeq	r0, r0, r0
    173c:	0000ec00 	andeq	lr, r0, r0, lsl #24
    1740:	00010e00 	andeq	r0, r1, r0, lsl #28
    1744:	34000200 	strcc	r0, [r0], #-512	; 0x200
    1748:	00010e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    174c:	00011400 	andeq	r1, r1, r0, lsl #8
    1750:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    175c:	00000114 	andeq	r0, r0, r4, lsl r1
    1760:	0000011b 	andeq	r0, r0, fp, lsl r1
    1764:	1b500001 	blne	1401770 <__Stack_Size+0x1401370>
    1768:	4a000001 	bmi	1774 <__Stack_Size+0x1374>
    176c:	01000001 	tsteq	r0, r1
    1770:	00005400 	andeq	r5, r0, r0, lsl #8
    1774:	00000000 	andeq	r0, r0, r0
    1778:	01140000 	tsteq	r4, r0
    177c:	011c0000 	tsteq	ip, r0
    1780:	00020000 	andeq	r0, r2, r0
    1784:	011c9f34 	tsteq	ip, r4, lsr pc
    1788:	01370000 	teqeq	r7, r0
    178c:	00010000 	andeq	r0, r1, r0
    1790:	00013850 	andeq	r3, r1, r0, asr r8
    1794:	00013e00 	andeq	r3, r1, r0, lsl #28
    1798:	50000100 	andpl	r0, r0, r0, lsl #2
    179c:	00000140 	andeq	r0, r0, r0, asr #2
    17a0:	0000014a 	andeq	r0, r0, sl, asr #2
    17a4:	00500001 	subseq	r0, r0, r1
    17a8:	00000000 	andeq	r0, r0, r0
    17ac:	4a000000 	bmi	17b4 <__Stack_Size+0x13b4>
    17b0:	52000001 	andpl	r0, r0, #1
    17b4:	01000001 	tsteq	r0, r1
    17b8:	01525000 	cmpeq	r2, r0
    17bc:	01860000 	orreq	r0, r6, r0
    17c0:	00010000 	andeq	r0, r1, r0
    17c4:	00018655 	andeq	r8, r1, r5, asr r6
    17c8:	00018c00 	andeq	r8, r1, r0, lsl #24
    17cc:	f3000400 	vshl.u8	d0, d0, d0
    17d0:	009f5001 	addseq	r5, pc, r1
    17d4:	00000000 	andeq	r0, r0, r0
    17d8:	4a000000 	bmi	17e0 <__Stack_Size+0x13e0>
    17dc:	56000001 	strpl	r0, [r0], -r1
    17e0:	02000001 	andeq	r0, r0, #1
    17e4:	569f3400 	ldrpl	r3, [pc], r0, lsl #8
    17e8:	60000001 	andvs	r0, r0, r1
    17ec:	01000001 	tsteq	r0, r1
    17f0:	01765000 	cmneq	r6, r0
    17f4:	018c0000 	orreq	r0, ip, r0
    17f8:	00010000 	andeq	r0, r1, r0
    17fc:	00000050 	andeq	r0, r0, r0, asr r0
    1800:	00000000 	andeq	r0, r0, r0
    1804:	00018c00 	andeq	r8, r1, r0, lsl #24
    1808:	00019600 	andeq	r9, r1, r0, lsl #12
    180c:	34000200 	strcc	r0, [r0], #-512	; 0x200
    1810:	0001969f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    1814:	0001a000 	andeq	sl, r1, r0
    1818:	50000100 	andpl	r0, r0, r0, lsl #2
    181c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    1820:	000001c8 	andeq	r0, r0, r8, asr #3
    1824:	00500001 	subseq	r0, r0, r1
    1828:	00000000 	andeq	r0, r0, r0
    182c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1830:	d2000001 	andle	r0, r0, #1
    1834:	02000001 	andeq	r0, r0, #1
    1838:	d29f3400 	addsle	r3, pc, #0, 8
    183c:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    1840:	01000001 	tsteq	r0, r1
    1844:	01fa5000 	mvnseq	r5, r0
    1848:	02060000 	andeq	r0, r6, #0
    184c:	00010000 	andeq	r0, r1, r0
    1850:	00021c50 	andeq	r1, r2, r0, asr ip
    1854:	00023800 	andeq	r3, r2, r0, lsl #16
    1858:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1864:	00000238 	andeq	r0, r0, r8, lsr r2
    1868:	0000023e 	andeq	r0, r0, lr, lsr r2
    186c:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    1870:	7a000002 	bvc	1880 <__Stack_Size+0x1480>
    1874:	01000002 	tsteq	r0, r2
    1878:	027a5600 	rsbseq	r5, sl, #0, 12
    187c:	02800000 	addeq	r0, r0, #0
    1880:	00040000 	andeq	r0, r4, r0
    1884:	9f5001f3 	svcls	0x005001f3
	...
    1890:	00000238 	andeq	r0, r0, r8, lsr r2
    1894:	00000243 	andeq	r0, r0, r3, asr #4
    1898:	43510001 	cmpmi	r1, #1
    189c:	62000002 	andvs	r0, r0, #2
    18a0:	01000002 	tsteq	r0, r2
    18a4:	02625500 	rsbeq	r5, r2, #0, 10
    18a8:	02800000 	addeq	r0, r0, #0
    18ac:	00040000 	andeq	r0, r4, r0
    18b0:	9f5101f3 	svcls	0x005101f3
	...
    18bc:	00000238 	andeq	r0, r0, r8, lsr r2
    18c0:	00000244 	andeq	r0, r0, r4, asr #4
    18c4:	9f340002 	svcls	0x00340002
    18c8:	00000244 	andeq	r0, r0, r4, asr #4
    18cc:	0000024c 	andeq	r0, r0, ip, asr #4
    18d0:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    18d4:	66000002 	strvs	r0, [r0], -r2
    18d8:	01000002 	tsteq	r0, r2
    18dc:	026a5000 	rsbeq	r5, sl, #0
    18e0:	02800000 	addeq	r0, r0, #0
    18e4:	00010000 	andeq	r0, r1, r0
    18e8:	00000050 	andeq	r0, r0, r0, asr r0
    18ec:	00000000 	andeq	r0, r0, r0
    18f0:	00028000 	andeq	r8, r2, r0
    18f4:	00028600 	andeq	r8, r2, r0, lsl #12
    18f8:	50000100 	andpl	r0, r0, r0, lsl #2
    18fc:	00000286 	andeq	r0, r0, r6, lsl #5
    1900:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1904:	b2550001 	subslt	r0, r5, #1
    1908:	b8000002 	stmdalt	r0, {r1}
    190c:	04000002 	streq	r0, [r0], #-2
    1910:	5001f300 	andpl	pc, r1, r0, lsl #6
    1914:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1918:	00000000 	andeq	r0, r0, r0
    191c:	00028000 	andeq	r8, r2, r0
    1920:	00028b00 	andeq	r8, r2, r0, lsl #22
    1924:	51000100 	mrspl	r0, (UNDEF: 16)
    1928:	0000028b 	andeq	r0, r0, fp, lsl #5
    192c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1930:	01f30004 	mvnseq	r0, r4
    1934:	00009f51 	andeq	r9, r0, r1, asr pc
    1938:	00000000 	andeq	r0, r0, r0
    193c:	02800000 	addeq	r0, r0, #0
    1940:	028c0000 	addeq	r0, ip, #0
    1944:	00020000 	andeq	r0, r2, r0
    1948:	028c9f34 	addeq	r9, ip, #52, 30	; 0xd0
    194c:	02940000 	addseq	r0, r4, #0
    1950:	00010000 	andeq	r0, r1, r0
    1954:	0002a250 	andeq	sl, r2, r0, asr r2
    1958:	0002b800 	andeq	fp, r2, r0, lsl #16
    195c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1968:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    196c:	000002be 			; <UNDEFINED> instruction: 0x000002be
    1970:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
    1974:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    1978:	01000002 	tsteq	r0, r2
    197c:	02f65600 	rscseq	r5, r6, #0, 12
    1980:	03000000 	movweq	r0, #0
    1984:	00040000 	andeq	r0, r4, r0
    1988:	9f5001f3 	svcls	0x005001f3
	...
    1994:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    1998:	000002c3 	andeq	r0, r0, r3, asr #5
    199c:	c3510001 	cmpgt	r1, #1
    19a0:	00000002 	andeq	r0, r0, r2
    19a4:	04000003 	streq	r0, [r0], #-3
    19a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    19ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	0002b800 	andeq	fp, r2, r0, lsl #16
    19b8:	0002c400 	andeq	ip, r2, r0, lsl #8
    19bc:	34000200 	strcc	r0, [r0], #-512	; 0x200
    19c0:	0002c49f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    19c4:	0002da00 	andeq	sp, r2, r0, lsl #20
    19c8:	50000100 	andpl	r0, r0, r0, lsl #2
    19cc:	000002e6 	andeq	r0, r0, r6, ror #5
    19d0:	00000300 	andeq	r0, r0, r0, lsl #6
    19d4:	00500001 	subseq	r0, r0, r1
	...
    19e0:	04000003 	streq	r0, [r0], #-3
    19e4:	01000003 	tsteq	r0, r3
    19e8:	03045000 	movweq	r5, #16384	; 0x4000
    19ec:	03060000 	movweq	r0, #24576	; 0x6000
    19f0:	00040000 	andeq	r0, r4, r0
    19f4:	9f200070 	svcls	0x00200070
    19f8:	00000306 	andeq	r0, r0, r6, lsl #6
    19fc:	00000310 	andeq	r0, r0, r0, lsl r3
    1a00:	00740004 	rsbseq	r0, r4, r4
    1a04:	03109f20 	tsteq	r0, #32, 30	; 0x80
    1a08:	036e0000 	cmneq	lr, #0
    1a0c:	00010000 	andeq	r0, r1, r0
    1a10:	00036e54 	andeq	r6, r3, r4, asr lr
    1a14:	0003a000 	andeq	sl, r3, r0
    1a18:	f3000500 	vrshl.u8	d0, d0, d0
    1a1c:	9f205001 	svcls	0x00205001
	...
    1a28:	00000304 	andeq	r0, r0, r4, lsl #6
    1a2c:	00000306 	andeq	r0, r0, r6, lsl #6
    1a30:	00700007 	rsbseq	r0, r0, r7
    1a34:	1aff0820 	bne	fffc3abc <SCS_BASE+0x1ffb5abc>
    1a38:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1a3c:	00031000 	andeq	r1, r3, r0
    1a40:	74000700 	strvc	r0, [r0], #-1792	; 0x700
    1a44:	ff082000 			; <UNDEFINED> instruction: 0xff082000
    1a48:	03109f1a 	tsteq	r0, #26, 30	; 0x68
    1a4c:	036e0000 	cmneq	lr, #0
    1a50:	00060000 	andeq	r0, r6, r0
    1a54:	ff080074 			; <UNDEFINED> instruction: 0xff080074
    1a58:	036e9f1a 	cmneq	lr, #26, 30	; 0x68
    1a5c:	03a00000 	moveq	r0, #0
    1a60:	00080000 	andeq	r0, r8, r0
    1a64:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    1a68:	9f1aff08 	svcls	0x001aff08
	...
    1a74:	00000304 	andeq	r0, r0, r4, lsl #6
    1a78:	00000306 	andeq	r0, r0, r6, lsl #6
    1a7c:	0070000a 	rsbseq	r0, r0, sl
    1a80:	ff000a20 			; <UNDEFINED> instruction: 0xff000a20
    1a84:	9f25381a 	svcls	0x0025381a
    1a88:	00000306 	andeq	r0, r0, r6, lsl #6
    1a8c:	00000310 	andeq	r0, r0, r0, lsl r3
    1a90:	0074000a 	rsbseq	r0, r4, sl
    1a94:	ff000a20 			; <UNDEFINED> instruction: 0xff000a20
    1a98:	9f25381a 	svcls	0x0025381a
    1a9c:	00000310 	andeq	r0, r0, r0, lsl r3
    1aa0:	0000036e 	andeq	r0, r0, lr, ror #6
    1aa4:	00740009 	rsbseq	r0, r4, r9
    1aa8:	1aff000a 	bne	fffc1ad8 <SCS_BASE+0x1ffb3ad8>
    1aac:	6e9f2538 	mrcvs	5, 4, r2, cr15, cr8, {1}
    1ab0:	a0000003 	andge	r0, r0, r3
    1ab4:	0b000003 	bleq	1ac8 <__Stack_Size+0x16c8>
    1ab8:	5001f300 	andpl	pc, r1, r0, lsl #6
    1abc:	ff000a20 			; <UNDEFINED> instruction: 0xff000a20
    1ac0:	9f25381a 	svcls	0x0025381a
	...
    1acc:	00000304 	andeq	r0, r0, r4, lsl #6
    1ad0:	00000306 	andeq	r0, r0, r6, lsl #6
    1ad4:	0070000b 	rsbseq	r0, r0, fp
    1ad8:	40ff0820 	rscsmi	r0, pc, r0, lsr #16
    1adc:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    1ae0:	0003069f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1ae4:	00031000 	andeq	r1, r3, r0
    1ae8:	74000b00 	strvc	r0, [r0], #-2816	; 0xb00
    1aec:	ff082000 			; <UNDEFINED> instruction: 0xff082000
    1af0:	401a2440 	andsmi	r2, sl, r0, asr #8
    1af4:	03109f25 	tsteq	r0, #37, 30	; 0x94
    1af8:	036e0000 	cmneq	lr, #0
    1afc:	000a0000 	andeq	r0, sl, r0
    1b00:	ff080074 			; <UNDEFINED> instruction: 0xff080074
    1b04:	401a2440 	andsmi	r2, sl, r0, asr #8
    1b08:	036e9f25 	cmneq	lr, #37, 30	; 0x94
    1b0c:	03a00000 	moveq	r0, #0
    1b10:	000c0000 	andeq	r0, ip, r0
    1b14:	205001f3 	ldrshcs	r0, [r0], #-19	; 0xffffffed
    1b18:	2440ff08 	strbcs	pc, [r0], #-3848	; 0xf08	; <UNPREDICTABLE>
    1b1c:	9f25401a 	svcls	0x0025401a
	...
    1b28:	00000304 	andeq	r0, r0, r4, lsl #6
    1b2c:	00000306 	andeq	r0, r0, r6, lsl #6
    1b30:	00700006 	rsbseq	r0, r0, r6
    1b34:	9f254820 	svcls	0x00254820
    1b38:	00000306 	andeq	r0, r0, r6, lsl #6
    1b3c:	00000310 	andeq	r0, r0, r0, lsl r3
    1b40:	00740006 	rsbseq	r0, r4, r6
    1b44:	9f254820 	svcls	0x00254820
    1b48:	00000310 	andeq	r0, r0, r0, lsl r3
    1b4c:	0000036e 	andeq	r0, r0, lr, ror #6
    1b50:	00740005 	rsbseq	r0, r4, r5
    1b54:	6e9f2548 	cdpvs	5, 9, cr2, cr15, cr8, {2}
    1b58:	a0000003 	andge	r0, r0, r3
    1b5c:	07000003 	streq	r0, [r0, -r3]
    1b60:	5001f300 	andpl	pc, r1, r0, lsl #6
    1b64:	9f254820 	svcls	0x00254820
	...
    1b70:	00000300 	andeq	r0, r0, r0, lsl #6
    1b74:	0000030a 	andeq	r0, r0, sl, lsl #6
    1b78:	9f340002 	svcls	0x00340002
    1b7c:	0000030a 	andeq	r0, r0, sl, lsl #6
    1b80:	0000032e 	andeq	r0, r0, lr, lsr #6
    1b84:	34500001 	ldrbcc	r0, [r0], #-1
    1b88:	38000003 	stmdacc	r0, {r0, r1}
    1b8c:	01000003 	tsteq	r0, r3
    1b90:	033e5000 	teqeq	lr, #0
    1b94:	03440000 	movteq	r0, #16384	; 0x4000
    1b98:	00010000 	andeq	r0, r1, r0
    1b9c:	00035050 	andeq	r5, r3, r0, asr r0
    1ba0:	00035400 	andeq	r5, r3, r0, lsl #8
    1ba4:	50000100 	andpl	r0, r0, r0, lsl #2
    1ba8:	00000368 	andeq	r0, r0, r8, ror #6
    1bac:	0000036c 	andeq	r0, r0, ip, ror #6
    1bb0:	82500001 	subshi	r0, r0, #1
    1bb4:	a0000003 	andge	r0, r0, r3
    1bb8:	01000003 	tsteq	r0, r3
    1bbc:	00005000 	andeq	r5, r0, r0
    1bc0:	00000000 	andeq	r0, r0, r0
    1bc4:	03a00000 	moveq	r0, #0
    1bc8:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    1bcc:	00010000 	andeq	r0, r1, r0
    1bd0:	0003a850 	andeq	sl, r3, r0, asr r8
    1bd4:	00042c00 	andeq	r2, r4, r0, lsl #24
    1bd8:	f3000400 	vshl.u8	d0, d0, d0
    1bdc:	009f5001 	addseq	r5, pc, r1
    1be0:	00000000 	andeq	r0, r0, r0
    1be4:	a0000000 	andge	r0, r0, r0
    1be8:	ac000003 	stcge	0, cr0, [r0], {3}
    1bec:	02000003 	andeq	r0, r0, #3
    1bf0:	ac9f3400 	cfldrsge	mvf3, [pc], {0}
    1bf4:	b8000003 	stmdalt	r0, {r0, r1}
    1bf8:	01000003 	tsteq	r0, r3
    1bfc:	03d45000 	bicseq	r5, r4, #0
    1c00:	03fa0000 	mvnseq	r0, #0
    1c04:	00010000 	andeq	r0, r1, r0
    1c08:	0003fe50 	andeq	pc, r3, r0, asr lr	; <UNPREDICTABLE>
    1c0c:	00042c00 	andeq	r2, r4, r0, lsl #24
    1c10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c1c:	0000042c 	andeq	r0, r0, ip, lsr #8
    1c20:	0000043e 	andeq	r0, r0, lr, lsr r4
    1c24:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    1c28:	80000004 	andhi	r0, r0, r4
    1c2c:	04000004 	streq	r0, [r0], #-4
    1c30:	5001f300 	andpl	pc, r1, r0, lsl #6
    1c34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c38:	00000000 	andeq	r0, r0, r0
    1c3c:	00042c00 	andeq	r2, r4, r0, lsl #24
    1c40:	00044500 	andeq	r4, r4, r0, lsl #10
    1c44:	51000100 	mrspl	r0, (UNDEF: 16)
    1c48:	00000445 	andeq	r0, r0, r5, asr #8
    1c4c:	00000480 	andeq	r0, r0, r0, lsl #9
    1c50:	01f30004 	mvnseq	r0, r4
    1c54:	00009f51 	andeq	r9, r0, r1, asr pc
    1c58:	00000000 	andeq	r0, r0, r0
    1c5c:	042c0000 	strteq	r0, [ip], #-0
    1c60:	04450000 	strbeq	r0, [r5], #-0
    1c64:	00010000 	andeq	r0, r1, r0
    1c68:	00044552 	andeq	r4, r4, r2, asr r5
    1c6c:	00048000 	andeq	r8, r4, r0
    1c70:	f3000400 	vshl.u8	d0, d0, d0
    1c74:	009f5201 	addseq	r5, pc, r1, lsl #4
    1c78:	00000000 	andeq	r0, r0, r0
    1c7c:	2c000000 	stccs	0, cr0, [r0], {-0}
    1c80:	46000004 	strmi	r0, [r0], -r4
    1c84:	02000004 	andeq	r0, r0, #4
    1c88:	469f3400 	ldrmi	r3, [pc], r0, lsl #8
    1c8c:	50000004 	andpl	r0, r0, r4
    1c90:	01000004 	tsteq	r0, r4
    1c94:	04645000 	strbteq	r5, [r4], #-0
    1c98:	04800000 	streq	r0, [r0], #0
    1c9c:	00010000 	andeq	r0, r1, r0
    1ca0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1cac:	00002400 	andeq	r2, r0, r0, lsl #8
    1cb0:	50000100 	andpl	r0, r0, r0, lsl #2
    1cb4:	00000024 	andeq	r0, r0, r4, lsr #32
    1cb8:	0000002e 	andeq	r0, r0, lr, lsr #32
    1cbc:	01f30004 	mvnseq	r0, r4
    1cc0:	002e9f50 	eoreq	r9, lr, r0, asr pc
    1cc4:	00460000 	subeq	r0, r6, r0
    1cc8:	00010000 	andeq	r0, r1, r0
    1ccc:	00004650 	andeq	r4, r0, r0, asr r6
    1cd0:	00005000 	andeq	r5, r0, r0
    1cd4:	f3000400 	vshl.u8	d0, d0, d0
    1cd8:	509f5001 	addspl	r5, pc, r1
    1cdc:	52000000 	andpl	r0, r0, #0
    1ce0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ce4:	00525000 	subseq	r5, r2, r0
    1ce8:	005c0000 	subseq	r0, ip, r0
    1cec:	00040000 	andeq	r0, r4, r0
    1cf0:	9f5001f3 	svcls	0x005001f3
    1cf4:	0000005c 	andeq	r0, r0, ip, asr r0
    1cf8:	0000005e 	andeq	r0, r0, lr, asr r0
    1cfc:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    1d00:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    1d04:	04000000 	streq	r0, [r0], #-0
    1d08:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d0c:	0000689f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1d10:	00006a00 	andeq	r6, r0, r0, lsl #20
    1d14:	50000100 	andpl	r0, r0, r0, lsl #2
    1d18:	0000006a 	andeq	r0, r0, sl, rrx
    1d1c:	00000074 	andeq	r0, r0, r4, ror r0
    1d20:	01f30004 	mvnseq	r0, r4
    1d24:	00749f50 	rsbseq	r9, r4, r0, asr pc
    1d28:	00760000 	rsbseq	r0, r6, r0
    1d2c:	00010000 	andeq	r0, r1, r0
    1d30:	00007650 	andeq	r7, r0, r0, asr r6
    1d34:	00008000 	andeq	r8, r0, r0
    1d38:	f3000400 	vshl.u8	d0, d0, d0
    1d3c:	809f5001 	addshi	r5, pc, r1
    1d40:	84000000 	strhi	r0, [r0], #-0
    1d44:	01000000 	mrseq	r0, (UNDEF: 0)
    1d48:	00845000 	addeq	r5, r4, r0
    1d4c:	00980000 	addseq	r0, r8, r0
    1d50:	00040000 	andeq	r0, r4, r0
    1d54:	9f5001f3 	svcls	0x005001f3
    1d58:	00000098 	muleq	r0, r8, r0
    1d5c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1d60:	00500001 	subseq	r0, r0, r1
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	ba000000 	blt	1d70 <__Stack_Size+0x1970>
    1d6c:	d6000000 	strle	r0, [r0], -r0
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	00d65100 	sbcseq	r5, r6, r0, lsl #2
    1d78:	01560000 	cmpeq	r6, r0
    1d7c:	00040000 	andeq	r0, r4, r0
    1d80:	9f5101f3 	svcls	0x005101f3
	...
    1d8c:	000000ba 	strheq	r0, [r0], -sl
    1d90:	000000ca 	andeq	r0, r0, sl, asr #1
    1d94:	9f300002 	svcls	0x00300002
    1d98:	000000ca 	andeq	r0, r0, sl, asr #1
    1d9c:	000000ce 	andeq	r0, r0, lr, asr #1
    1da0:	00730006 	rsbseq	r0, r3, r6
    1da4:	9f1aff08 	svcls	0x001aff08
    1da8:	000000ce 	andeq	r0, r0, lr, asr #1
    1dac:	00000156 	andeq	r0, r0, r6, asr r1
    1db0:	00530001 	subseq	r0, r3, r1
    1db4:	00000000 	andeq	r0, r0, r0
    1db8:	ba000000 	blt	1dc0 <__Stack_Size+0x19c0>
    1dbc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1dc0:	02000000 	andeq	r0, r0, #0
    1dc4:	e09f3000 	adds	r3, pc, r0
    1dc8:	10000000 	andne	r0, r0, r0
    1dcc:	01000001 	tsteq	r0, r1
    1dd0:	01245700 			; <UNDEFINED> instruction: 0x01245700
    1dd4:	01540000 	cmpeq	r4, r0
    1dd8:	00010000 	andeq	r0, r1, r0
    1ddc:	00000057 	andeq	r0, r0, r7, asr r0
    1de0:	00000000 	andeq	r0, r0, r0
    1de4:	0000ba00 	andeq	fp, r0, r0, lsl #20
    1de8:	0000d800 	andeq	sp, r0, r0, lsl #16
    1dec:	30000200 	andcc	r0, r0, r0, lsl #4
    1df0:	0000d89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1df4:	00011000 	andeq	r1, r1, r0
    1df8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1dfc:	00000116 	andeq	r0, r0, r6, lsl r1
    1e00:	00000118 	andeq	r0, r0, r8, lsl r1
    1e04:	9f300002 	svcls	0x00300002
    1e08:	00000118 	andeq	r0, r0, r8, lsl r1
    1e0c:	00000154 	andeq	r0, r0, r4, asr r1
    1e10:	00540001 	subseq	r0, r4, r1
    1e14:	00000000 	andeq	r0, r0, r0
    1e18:	ba000000 	blt	1e20 <__Stack_Size+0x1a20>
    1e1c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1e20:	02000000 	andeq	r0, r0, #0
    1e24:	dc9f3000 	ldcle	0, cr3, [pc], {0}
    1e28:	e4000000 	str	r0, [r0], #-0
    1e2c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e30:	00e45600 	rsceq	r5, r4, r0, lsl #12
    1e34:	00e80000 	rsceq	r0, r8, r0
    1e38:	00050000 	andeq	r0, r5, r0
    1e3c:	24320074 	ldrtcs	r0, [r2], #-116	; 0x74
    1e40:	0000e89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    1e44:	00010800 	andeq	r0, r1, r0, lsl #16
    1e48:	5e000100 	adfpls	f0, f0, f0
    1e4c:	00000120 	andeq	r0, r0, r0, lsr #2
    1e50:	00000128 	andeq	r0, r0, r8, lsr #2
    1e54:	28560001 	ldmdacs	r6, {r0}^
    1e58:	2c000001 	stccs	0, cr0, [r0], {1}
    1e5c:	05000001 	streq	r0, [r0, #-1]
    1e60:	32007400 	andcc	r7, r0, #0, 8
    1e64:	012c9f24 			; <UNDEFINED> instruction: 0x012c9f24
    1e68:	014c0000 	mrseq	r0, (UNDEF: 76)
    1e6c:	00010000 	andeq	r0, r1, r0
    1e70:	0000005e 	andeq	r0, r0, lr, asr r0
    1e74:	00000000 	andeq	r0, r0, r0
    1e78:	0000ba00 	andeq	fp, r0, r0, lsl #20
    1e7c:	0000d600 	andeq	sp, r0, r0, lsl #12
    1e80:	30000200 	andcc	r0, r0, r0, lsl #4
    1e84:	0000d69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1e88:	00011000 	andeq	r1, r1, r0
    1e8c:	51000100 	mrspl	r0, (UNDEF: 16)
    1e90:	00000116 	andeq	r0, r0, r6, lsl r1
    1e94:	00000154 	andeq	r0, r0, r4, asr r1
    1e98:	00510001 	subseq	r0, r1, r1
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	ba000000 	blt	1ea8 <__Stack_Size+0x1aa8>
    1ea4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1ea8:	02000000 	andeq	r0, r0, #0
    1eac:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    1eb0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    1eb4:	05000000 	streq	r0, [r0, #-0]
    1eb8:	007e3f00 	rsbseq	r3, lr, r0, lsl #30
    1ebc:	00ee9f24 	rsceq	r9, lr, r4, lsr #30
    1ec0:	00f80000 	rscseq	r0, r8, r0
    1ec4:	00010000 	andeq	r0, r1, r0
    1ec8:	0000f856 	andeq	pc, r0, r6, asr r8	; <UNPREDICTABLE>
    1ecc:	00010800 	andeq	r0, r1, r0, lsl #16
    1ed0:	3f000500 	svccc	0x00000500
    1ed4:	9f24007e 	svcls	0x0024007e
    1ed8:	0000012c 	andeq	r0, r0, ip, lsr #2
    1edc:	00000132 	andeq	r0, r0, r2, lsr r1
    1ee0:	7e3f0005 	cdpvc	0, 3, cr0, cr15, cr5, {0}
    1ee4:	329f2400 	addscc	r2, pc, #0, 8
    1ee8:	3c000001 	stccc	0, cr0, [r0], {1}
    1eec:	01000001 	tsteq	r0, r1
    1ef0:	013c5600 	teqeq	ip, r0, lsl #12
    1ef4:	014c0000 	mrseq	r0, (UNDEF: 76)
    1ef8:	00050000 	andeq	r0, r5, r0
    1efc:	24007e3f 	strcs	r7, [r0], #-3647	; 0xe3f
    1f00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	00016600 	andeq	r6, r1, r0, lsl #12
    1f0c:	00016e00 	andeq	r6, r1, r0, lsl #28
    1f10:	50000100 	andpl	r0, r0, r0, lsl #2
    1f14:	0000016e 	andeq	r0, r0, lr, ror #2
    1f18:	00000172 	andeq	r0, r0, r2, ror r1
    1f1c:	01f30004 	mvnseq	r0, r4
    1f20:	00009f50 	andeq	r9, r0, r0, asr pc
    1f24:	00000000 	andeq	r0, r0, r0
    1f28:	01660000 	cmneq	r6, r0
    1f2c:	01680000 	cmneq	r8, r0
    1f30:	00020000 	andeq	r0, r2, r0
    1f34:	01689f30 	cmneq	r8, r0, lsr pc
    1f38:	01720000 	cmneq	r2, r0
    1f3c:	000c0000 	andeq	r0, ip, r0
    1f40:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    1f44:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    1f48:	9f2e301a 	svcls	0x002e301a
	...
    1f54:	00000172 	andeq	r0, r0, r2, ror r1
    1f58:	00000174 	andeq	r0, r0, r4, ror r1
    1f5c:	74500001 	ldrbvc	r0, [r0], #-1
    1f60:	78000001 	stmdavc	r0, {r0}
    1f64:	04000001 	streq	r0, [r0], #-1
    1f68:	5001f300 	andpl	pc, r1, r0, lsl #6
    1f6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f70:	00000000 	andeq	r0, r0, r0
    1f74:	00017800 	andeq	r7, r1, r0, lsl #16
    1f78:	00018000 	andeq	r8, r1, r0
    1f7c:	50000100 	andpl	r0, r0, r0, lsl #2
    1f80:	00000180 	andeq	r0, r0, r0, lsl #3
    1f84:	00000184 	andeq	r0, r0, r4, lsl #3
    1f88:	01f30004 	mvnseq	r0, r4
    1f8c:	00009f50 	andeq	r9, r0, r0, asr pc
    1f90:	00000000 	andeq	r0, r0, r0
    1f94:	01780000 	cmneq	r8, r0
    1f98:	017a0000 	cmneq	sl, r0
    1f9c:	00020000 	andeq	r0, r2, r0
    1fa0:	017a9f30 	cmneq	sl, r0, lsr pc
    1fa4:	01840000 	orreq	r0, r4, r0
    1fa8:	000c0000 	andeq	r0, ip, r0
    1fac:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    1fb0:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    1fb4:	9f2e301a 	svcls	0x002e301a
	...
    1fc0:	00000184 	andeq	r0, r0, r4, lsl #3
    1fc4:	00000186 	andeq	r0, r0, r6, lsl #3
    1fc8:	86500001 	ldrbhi	r0, [r0], -r1
    1fcc:	8a000001 	bhi	1fd8 <__Stack_Size+0x1bd8>
    1fd0:	04000001 	streq	r0, [r0], #-1
    1fd4:	5001f300 	andpl	pc, r1, r0, lsl #6
    1fd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1fdc:	00000000 	andeq	r0, r0, r0
    1fe0:	0001a000 	andeq	sl, r1, r0
    1fe4:	0001a400 	andeq	sl, r1, r0, lsl #8
    1fe8:	40000400 	andmi	r0, r0, r0, lsl #8
    1fec:	a49f243c 	ldrge	r2, [pc], #1084	; 1ff4 <__Stack_Size+0x1bf4>
    1ff0:	ac000001 	stcge	0, cr0, [r0], {1}
    1ff4:	01000001 	tsteq	r0, r1
    1ff8:	00005300 	andeq	r5, r0, r0, lsl #6
    1ffc:	00000000 	andeq	r0, r0, r0
    2000:	01b00000 	movseq	r0, r0
    2004:	01c20000 	biceq	r0, r2, r0
    2008:	00010000 	andeq	r0, r1, r0
    200c:	0001c250 	andeq	ip, r1, r0, asr r2
    2010:	0001cc00 	andeq	ip, r1, r0, lsl #24
    2014:	f3000400 	vshl.u8	d0, d0, d0
    2018:	009f5001 	addseq	r5, pc, r1
    201c:	00000000 	andeq	r0, r0, r0
    2020:	b0000000 	andlt	r0, r0, r0
    2024:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    2028:	01000001 	tsteq	r0, r1
    202c:	01be5100 			; <UNDEFINED> instruction: 0x01be5100
    2030:	01cc0000 	biceq	r0, ip, r0
    2034:	00040000 	andeq	r0, r4, r0
    2038:	9f5101f3 	svcls	0x005101f3
	...
    2044:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2048:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    204c:	9f300002 	svcls	0x00300002
    2050:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    2054:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2058:	0073000f 	rsbseq	r0, r3, pc
    205c:	1aff800a 	bne	fffe208c <SCS_BASE+0x1ffd408c>
    2060:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    2064:	2124341a 			; <UNDEFINED> instruction: 0x2124341a
    2068:	0001c29f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    206c:	0001cc00 	andeq	ip, r1, r0, lsl #24
    2070:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    207c:	000001d8 	ldrdeq	r0, [r0], -r8
    2080:	0000021a 	andeq	r0, r0, sl, lsl r2
    2084:	1a500001 	bne	1402090 <__Stack_Size+0x1401c90>
    2088:	2c000002 	stccs	0, cr0, [r0], {2}
    208c:	04000002 	streq	r0, [r0], #-2
    2090:	5001f300 	andpl	pc, r1, r0, lsl #6
    2094:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2098:	00000000 	andeq	r0, r0, r0
    209c:	0001d800 	andeq	sp, r1, r0, lsl #16
    20a0:	0001e800 	andeq	lr, r1, r0, lsl #16
    20a4:	30000200 	andcc	r0, r0, r0, lsl #4
    20a8:	0001e89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    20ac:	00021e00 	andeq	r1, r2, r0, lsl #28
    20b0:	52000100 	andpl	r0, r0, #0, 2
    20b4:	0000021e 	andeq	r0, r0, lr, lsl r2
    20b8:	0000022c 	andeq	r0, r0, ip, lsr #4
    20bc:	01f30008 	mvnseq	r0, r8
    20c0:	ffff0a50 			; <UNDEFINED> instruction: 0xffff0a50
    20c4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    20c8:	00000000 	andeq	r0, r0, r0
    20cc:	01d80000 	bicseq	r0, r8, r0
    20d0:	01fa0000 	mvnseq	r0, r0
    20d4:	00020000 	andeq	r0, r2, r0
    20d8:	01fa9f30 	mvnseq	r9, r0, lsr pc
    20dc:	02160000 	andseq	r0, r6, #0
    20e0:	000b0000 	andeq	r0, fp, r0
    20e4:	4e007033 	mcrmi	0, 0, r7, cr0, cr3, {1}
    20e8:	401a243f 	andsmi	r2, sl, pc, lsr r4
    20ec:	009f2425 	addseq	r2, pc, r5, lsr #8
    20f0:	00000000 	andeq	r0, r0, r0
    20f4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    20f8:	e6000001 	str	r0, [r0], -r1
    20fc:	02000001 	andeq	r0, r0, #1
    2100:	e69f3000 	ldr	r3, [pc], r0
    2104:	2c000001 	stccs	0, cr0, [r0], {1}
    2108:	01000002 	tsteq	r0, r2
    210c:	00005300 	andeq	r5, r0, r0, lsl #6
    2110:	00000000 	andeq	r0, r0, r0
    2114:	01d80000 	bicseq	r0, r8, r0
    2118:	01e60000 	mvneq	r0, r0
    211c:	00020000 	andeq	r0, r2, r0
    2120:	01e69f30 	mvneq	r9, r0, lsr pc
    2124:	021a0000 	andseq	r0, sl, #0
    2128:	00090000 	andeq	r0, r9, r0
    212c:	3f4e0070 	svccc	0x004e0070
    2130:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    2134:	00021a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    2138:	00022c00 	andeq	r2, r2, r0, lsl #24
    213c:	f3000a00 	vpmax.u8	d0, d0, d0
    2140:	3f4e5001 	svccc	0x004e5001
    2144:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    2148:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    214c:	00000000 	andeq	r0, r0, r0
    2150:	00022c00 	andeq	r2, r2, r0, lsl #24
    2154:	00025000 	andeq	r5, r2, r0
    2158:	50000100 	andpl	r0, r0, r0, lsl #2
    215c:	00000250 	andeq	r0, r0, r0, asr r2
    2160:	00000256 	andeq	r0, r0, r6, asr r2
    2164:	01f30004 	mvnseq	r0, r4
    2168:	00009f50 	andeq	r9, r0, r0, asr pc
    216c:	00000000 	andeq	r0, r0, r0
    2170:	022c0000 	eoreq	r0, ip, #0
    2174:	02340000 	eorseq	r0, r4, #0
    2178:	00010000 	andeq	r0, r1, r0
    217c:	00023451 	andeq	r3, r2, r1, asr r4
    2180:	00025600 	andeq	r5, r2, r0, lsl #12
    2184:	f3000400 	vshl.u8	d0, d0, d0
    2188:	009f5101 	addseq	r5, pc, r1, lsl #2
    218c:	00000000 	andeq	r0, r0, r0
    2190:	2c000000 	stccs	0, cr0, [r0], {-0}
    2194:	40000002 	andmi	r0, r0, r2
    2198:	02000002 	andeq	r0, r0, #2
    219c:	409f3000 	addsmi	r3, pc, r0
    21a0:	46000002 	strmi	r0, [r0], -r2
    21a4:	05000002 	streq	r0, [r0, #-2]
    21a8:	00733f00 	rsbseq	r3, r3, r0, lsl #30
    21ac:	02469f24 	subeq	r9, r6, #36, 30	; 0x90
    21b0:	024a0000 	subeq	r0, sl, #0
    21b4:	00010000 	andeq	r0, r1, r0
    21b8:	00024a52 	andeq	r4, r2, r2, asr sl
    21bc:	00025600 	andeq	r5, r2, r0, lsl #12
    21c0:	3f000500 	svccc	0x00000500
    21c4:	9f240073 	svcls	0x00240073
	...
    21d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    21d8:	9f300002 	svcls	0x00300002
    21dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    21e0:	00000034 	andeq	r0, r0, r4, lsr r0
    21e4:	00520001 	subseq	r0, r2, r1
    21e8:	00000000 	andeq	r0, r0, r0
    21ec:	34000000 	strcc	r0, [r0], #-0
    21f0:	4a000000 	bmi	21f8 <__Stack_Size+0x1df8>
    21f4:	02000000 	andeq	r0, r0, #0
    21f8:	4a9f3000 	bmi	fe7ce200 <SCS_BASE+0x1e7c0200>
    21fc:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2200:	02000000 	andeq	r0, r0, #0
    2204:	4c9f3100 	ldfmis	f3, [pc], {0}
    2208:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    220c:	02000000 	andeq	r0, r0, #0
    2210:	4e9f3200 	cdpmi	2, 9, cr3, cr15, cr0, {0}
    2214:	64000000 	strvs	r0, [r0], #-0
    2218:	02000000 	andeq	r0, r0, #0
    221c:	009f3300 	addseq	r3, pc, r0, lsl #6
    2220:	00000000 	andeq	r0, r0, r0
    2224:	64000000 	strvs	r0, [r0], #-0
    2228:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    222c:	01000000 	mrseq	r0, (UNDEF: 0)
    2230:	00685000 	rsbeq	r5, r8, r0
    2234:	00780000 	rsbseq	r0, r8, r0
    2238:	00040000 	andeq	r0, r4, r0
    223c:	9f5001f3 	svcls	0x005001f3
	...
    2248:	00000078 	andeq	r0, r0, r8, ror r0
    224c:	00000090 	muleq	r0, r0, r0
    2250:	9f300002 	svcls	0x00300002
    2254:	00000090 	muleq	r0, r0, r0
    2258:	00000098 	muleq	r0, r8, r0
    225c:	98540001 	ldmdals	r4, {r0}^
    2260:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    2264:	01000000 	mrseq	r0, (UNDEF: 0)
    2268:	00ae5100 	adceq	r5, lr, r0, lsl #2
    226c:	00c00000 	sbceq	r0, r0, r0
    2270:	00010000 	andeq	r0, r1, r0
    2274:	0000c052 	andeq	ip, r0, r2, asr r0
    2278:	0000c200 	andeq	ip, r0, r0, lsl #4
    227c:	72000600 	andvc	r0, r0, #0, 12
    2280:	1a007100 	bne	1e688 <__Stack_Size+0x1e288>
    2284:	0000c29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    2288:	0000c400 	andeq	ip, r0, r0, lsl #8
    228c:	52000100 	andpl	r0, r0, #0, 2
    2290:	000000de 	ldrdeq	r0, [r0], -lr
    2294:	000000fc 	strdeq	r0, [r0], -ip
    2298:	9f300002 	svcls	0x00300002
	...
    22a4:	00000078 	andeq	r0, r0, r8, ror r0
    22a8:	000000b2 	strheq	r0, [r0], -r2
    22ac:	9f300002 	svcls	0x00300002
    22b0:	000000bc 	strheq	r0, [r0], -ip
    22b4:	000000c4 	andeq	r0, r0, r4, asr #1
    22b8:	c4540001 	ldrbgt	r0, [r4], #-1
    22bc:	cc000000 	stcgt	0, cr0, [r0], {-0}
    22c0:	01000000 	mrseq	r0, (UNDEF: 0)
    22c4:	00de5200 	sbcseq	r5, lr, r0, lsl #4
    22c8:	00fc0000 	rscseq	r0, ip, r0
    22cc:	00020000 	andeq	r0, r2, r0
    22d0:	00009f30 	andeq	r9, r0, r0, lsr pc
    22d4:	00000000 	andeq	r0, r0, r0
    22d8:	00780000 	rsbseq	r0, r8, r0
    22dc:	00bc0000 	adcseq	r0, ip, r0
    22e0:	00020000 	andeq	r0, r2, r0
    22e4:	00bc9f30 	adcseq	r9, ip, r0, lsr pc
    22e8:	00ce0000 	sbceq	r0, lr, r0
    22ec:	00010000 	andeq	r0, r1, r0
    22f0:	0000ce51 	andeq	ip, r0, r1, asr lr
    22f4:	0000de00 	andeq	sp, r0, r0, lsl #28
    22f8:	08000600 	stmdaeq	r0, {r9, sl}
    22fc:	240075ff 	strcs	r7, [r0], #-1535	; 0x5ff
    2300:	0000de9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    2304:	0000fc00 	andeq	pc, r0, r0, lsl #24
    2308:	30000200 	andcc	r0, r0, r0, lsl #4
    230c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2310:	00000000 	andeq	r0, r0, r0
    2314:	00007800 	andeq	r7, r0, r0, lsl #16
    2318:	00009000 	andeq	r9, r0, r0
    231c:	30000200 	andcc	r0, r0, r0, lsl #4
    2320:	0000909f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2324:	00009400 	andeq	r9, r0, r0, lsl #8
    2328:	34000500 	strcc	r0, [r0], #-1280	; 0x500
    232c:	9f1c0074 	svcls	0x001c0074
    2330:	00000094 	muleq	r0, r4, r0
    2334:	00000098 	muleq	r0, r8, r0
    2338:	98510001 	ldmdals	r1, {r0}^
    233c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    2340:	05000000 	streq	r0, [r0, #-0]
    2344:	00743400 	rsbseq	r3, r4, r0, lsl #8
    2348:	00de9f1c 	sbcseq	r9, lr, ip, lsl pc
    234c:	00fc0000 	rscseq	r0, ip, r0
    2350:	00020000 	andeq	r0, r2, r0
    2354:	00009f30 	andeq	r9, r0, r0, lsr pc
    2358:	00000000 	andeq	r0, r0, r0
    235c:	00780000 	rsbseq	r0, r8, r0
    2360:	00900000 	addseq	r0, r0, r0
    2364:	00020000 	andeq	r0, r2, r0
    2368:	00909f3f 	addseq	r9, r0, pc, lsr pc
    236c:	009c0000 	addseq	r0, ip, r0
    2370:	00050000 	andeq	r0, r5, r0
    2374:	2500743f 	strcs	r7, [r0, #-1087]	; 0x43f
    2378:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    237c:	0000a400 	andeq	sl, r0, r0, lsl #8
    2380:	52000100 	andpl	r0, r0, #0, 2
    2384:	000000de 	ldrdeq	r0, [r0], -lr
    2388:	000000fc 	strdeq	r0, [r0], -ip
    238c:	9f3f0002 	svcls	0x003f0002
	...
    2398:	00000118 	andeq	r0, r0, r8, lsl r1
    239c:	0000011a 	andeq	r0, r0, sl, lsl r1
    23a0:	1a500001 	bne	14023ac <__Stack_Size+0x1401fac>
    23a4:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    23a8:	04000001 	streq	r0, [r0], #-1
    23ac:	5001f300 	andpl	pc, r1, r0, lsl #6
    23b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	00013000 	andeq	r3, r1, r0
    23bc:	00014200 	andeq	r4, r1, r0, lsl #4
    23c0:	50000100 	andpl	r0, r0, r0, lsl #2
    23c4:	00000142 	andeq	r0, r0, r2, asr #2
    23c8:	00000150 	andeq	r0, r0, r0, asr r1
    23cc:	01f30004 	mvnseq	r0, r4
    23d0:	00009f50 	andeq	r9, r0, r0, asr pc
    23d4:	00000000 	andeq	r0, r0, r0
    23d8:	01300000 	teqeq	r0, r0
    23dc:	01420000 	mrseq	r0, (UNDEF: 66)
    23e0:	00020000 	andeq	r0, r2, r0
    23e4:	01429f30 	cmpeq	r2, r0, lsr pc
    23e8:	01440000 	mrseq	r0, (UNDEF: 68)
    23ec:	00090000 	andeq	r0, r9, r0
    23f0:	00720070 	rsbseq	r0, r2, r0, ror r0
    23f4:	2900721a 	stmdbcs	r0, {r1, r3, r4, r9, ip, sp, lr}
    23f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23fc:	00000000 	andeq	r0, r0, r0
    2400:	00013000 	andeq	r3, r1, r0
    2404:	00013800 	andeq	r3, r1, r0, lsl #16
    2408:	30000200 	andcc	r0, r0, r0, lsl #4
    240c:	0001389f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    2410:	00015000 	andeq	r5, r1, r0
    2414:	52000100 	andpl	r0, r0, #0, 2
	...
    2420:	0000015c 	andeq	r0, r0, ip, asr r1
    2424:	00000164 	andeq	r0, r0, r4, ror #2
    2428:	64500001 	ldrbvs	r0, [r0], #-1
    242c:	74000001 	strvc	r0, [r0], #-1
    2430:	04000001 	streq	r0, [r0], #-1
    2434:	5001f300 	andpl	pc, r1, r0, lsl #6
    2438:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    243c:	00000000 	andeq	r0, r0, r0
    2440:	00018400 	andeq	r8, r1, r0, lsl #8
    2444:	00019600 	andeq	r9, r1, r0, lsl #12
    2448:	50000100 	andpl	r0, r0, r0, lsl #2
    244c:	00000196 	muleq	r0, r6, r1
    2450:	000001a4 	andeq	r0, r0, r4, lsr #3
    2454:	01f30004 	mvnseq	r0, r4
    2458:	00009f50 	andeq	r9, r0, r0, asr pc
    245c:	00000000 	andeq	r0, r0, r0
    2460:	01840000 	orreq	r0, r4, r0
    2464:	01960000 	orrseq	r0, r6, r0
    2468:	00020000 	andeq	r0, r2, r0
    246c:	01969f30 	orrseq	r9, r6, r0, lsr pc
    2470:	01980000 	orrseq	r0, r8, r0
    2474:	00090000 	andeq	r0, r9, r0
    2478:	00720070 	rsbseq	r0, r2, r0, ror r0
    247c:	2900721a 	stmdbcs	r0, {r1, r3, r4, r9, ip, sp, lr}
    2480:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2484:	00000000 	andeq	r0, r0, r0
    2488:	00018400 	andeq	r8, r1, r0, lsl #8
    248c:	00018c00 	andeq	r8, r1, r0, lsl #24
    2490:	30000200 	andcc	r0, r0, r0, lsl #4
    2494:	00018c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2498:	0001a400 	andeq	sl, r1, r0, lsl #8
    249c:	52000100 	andpl	r0, r0, #0, 2
	...
    24a8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    24ac:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    24b0:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    24b4:	c4000001 	strgt	r0, [r0], #-1
    24b8:	04000001 	streq	r0, [r0], #-1
    24bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    24c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24c4:	00000000 	andeq	r0, r0, r0
    24c8:	0001b000 	andeq	fp, r1, r0
    24cc:	0001b400 	andeq	fp, r1, r0, lsl #8
    24d0:	51000100 	mrspl	r0, (UNDEF: 16)
    24d4:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    24d8:	000001c4 	andeq	r0, r0, r4, asr #3
    24dc:	01f30004 	mvnseq	r0, r4
    24e0:	00009f51 	andeq	r9, r0, r1, asr pc
    24e4:	00000000 	andeq	r0, r0, r0
    24e8:	01e40000 	mvneq	r0, r0
    24ec:	01ec0000 	mvneq	r0, r0
    24f0:	00010000 	andeq	r0, r1, r0
    24f4:	0001ec50 	andeq	lr, r1, r0, asr ip
    24f8:	0001ee00 	andeq	lr, r1, r0, lsl #28
    24fc:	f3000400 	vshl.u8	d0, d0, d0
    2500:	ee9f5001 	cdp	0, 9, cr5, cr15, cr1, {0}
    2504:	f2000001 	vhadd.s8	d0, d0, d1
    2508:	01000001 	tsteq	r0, r1
    250c:	01f25000 	mvnseq	r5, r0
    2510:	01fc0000 	mvnseq	r0, r0
    2514:	00040000 	andeq	r0, r4, r0
    2518:	9f5001f3 	svcls	0x005001f3
	...
    2524:	000001fc 	strdeq	r0, [r0], -ip
    2528:	00000200 	andeq	r0, r0, r0, lsl #4
    252c:	00500001 	subseq	r0, r0, r1
    2530:	1c000002 	stcne	0, cr0, [r0], {2}
    2534:	04000002 	streq	r0, [r0], #-2
    2538:	5001f300 	andpl	pc, r1, r0, lsl #6
    253c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2540:	00000000 	andeq	r0, r0, r0
    2544:	0001fc00 	andeq	pc, r1, r0, lsl #24
    2548:	00020a00 	andeq	r0, r2, r0, lsl #20
    254c:	51000100 	mrspl	r0, (UNDEF: 16)
    2550:	0000020a 	andeq	r0, r0, sl, lsl #4
    2554:	0000020e 	andeq	r0, r0, lr, lsl #4
    2558:	01f30004 	mvnseq	r0, r4
    255c:	020e9f51 	andeq	r9, lr, #324	; 0x144
    2560:	02100000 	andseq	r0, r0, #0
    2564:	00010000 	andeq	r0, r1, r0
    2568:	00021051 	andeq	r1, r2, r1, asr r0
    256c:	00021c00 	andeq	r1, r2, r0, lsl #24
    2570:	f3000400 	vshl.u8	d0, d0, d0
    2574:	009f5101 	addseq	r5, pc, r1, lsl #2
    2578:	00000000 	andeq	r0, r0, r0
    257c:	fc000000 	stc2	0, cr0, [r0], {-0}
    2580:	04000001 	streq	r0, [r0], #-1
    2584:	02000002 	andeq	r0, r0, #2
    2588:	049f3000 	ldreq	r3, [pc], #0	; 2590 <__Stack_Size+0x2190>
    258c:	0c000002 	stceq	0, cr0, [r0], {2}
    2590:	01000002 	tsteq	r0, r2
    2594:	020c5200 	andeq	r5, ip, #0, 4
    2598:	020e0000 	andeq	r0, lr, #0
    259c:	00050000 	andeq	r0, r5, r0
    25a0:	24007031 	strcs	r7, [r0], #-49	; 0x31
    25a4:	00020e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    25a8:	00021400 	andeq	r1, r2, r0, lsl #8
    25ac:	52000100 	andpl	r0, r0, #0, 2
    25b0:	00000214 	andeq	r0, r0, r4, lsl r2
    25b4:	0000021c 	andeq	r0, r0, ip, lsl r2
    25b8:	70310005 	eorsvc	r0, r1, r5
    25bc:	009f2400 	addseq	r2, pc, r0, lsl #8
    25c0:	00000000 	andeq	r0, r0, r0
    25c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    25c8:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    25cc:	01000002 	tsteq	r0, r2
    25d0:	023e5000 	eorseq	r5, lr, #0
    25d4:	02680000 	rsbeq	r0, r8, #0
    25d8:	00040000 	andeq	r0, r4, r0
    25dc:	9f5001f3 	svcls	0x005001f3
	...
    25e8:	0000021c 	andeq	r0, r0, ip, lsl r2
    25ec:	0000022e 	andeq	r0, r0, lr, lsr #4
    25f0:	2e510001 	cdpcs	0, 5, cr0, cr1, cr1, {0}
    25f4:	68000002 	stmdavs	r0, {r1}
    25f8:	04000002 	streq	r0, [r0], #-2
    25fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2600:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2604:	00000000 	andeq	r0, r0, r0
    2608:	00021c00 	andeq	r1, r2, r0, lsl #24
    260c:	00023600 	andeq	r3, r2, r0, lsl #12
    2610:	52000100 	andpl	r0, r0, #0, 2
    2614:	00000236 	andeq	r0, r0, r6, lsr r2
    2618:	00000268 	andeq	r0, r0, r8, ror #4
    261c:	01f30004 	mvnseq	r0, r4
    2620:	00009f52 	andeq	r9, r0, r2, asr pc
    2624:	00000000 	andeq	r0, r0, r0
    2628:	021c0000 	andseq	r0, ip, #0
    262c:	02280000 	eoreq	r0, r8, #0
    2630:	00020000 	andeq	r0, r2, r0
    2634:	02289f30 	eoreq	r9, r8, #48, 30	; 0xc0
    2638:	022c0000 	eoreq	r0, ip, #0
    263c:	00050000 	andeq	r0, r5, r0
    2640:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
    2644:	00022c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    2648:	00023000 	andeq	r3, r2, r0
    264c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    2650:	00000230 	andeq	r0, r0, r0, lsr r2
    2654:	00000234 	andeq	r0, r0, r4, lsr r2
    2658:	73340005 	teqvc	r4, #5
    265c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    2660:	00000000 	andeq	r0, r0, r0
    2664:	1c000000 	stcne	0, cr0, [r0], {-0}
    2668:	28000002 	stmdacs	r0, {r1}
    266c:	03000002 	movweq	r0, #2
    2670:	9fff0800 	svcls	0x00ff0800
    2674:	00000228 	andeq	r0, r0, r8, lsr #4
    2678:	00000234 	andeq	r0, r0, r4, lsr r2
    267c:	ff080006 			; <UNDEFINED> instruction: 0xff080006
    2680:	9f250073 	svcls	0x00250073
    2684:	00000234 	andeq	r0, r0, r4, lsr r2
    2688:	0000023a 	andeq	r0, r0, sl, lsr r2
    268c:	00530001 	subseq	r0, r3, r1
    2690:	00000000 	andeq	r0, r0, r0
    2694:	1c000000 	stcne	0, cr0, [r0], {-0}
    2698:	5a000002 	bpl	26a8 <__Stack_Size+0x22a8>
    269c:	02000002 	andeq	r0, r0, #2
    26a0:	5a9f3000 	bpl	fe7ce6a8 <SCS_BASE+0x1e7c06a8>
    26a4:	68000002 	stmdavs	r0, {r1}
    26a8:	06000002 	streq	r0, [r0], -r2
    26ac:	73ff0800 	mvnsvc	r0, #0, 16
    26b0:	009f2400 	addseq	r2, pc, r0, lsl #8
    26b4:	00000000 	andeq	r0, r0, r0
    26b8:	1c000000 	stcne	0, cr0, [r0], {-0}
    26bc:	28000002 	stmdacs	r0, {r1}
    26c0:	02000002 	andeq	r0, r0, #2
    26c4:	289f3000 	ldmcs	pc, {ip, sp}	; <UNPREDICTABLE>
    26c8:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    26cc:	01000002 	tsteq	r0, r2
    26d0:	022e5300 	eoreq	r5, lr, #0, 6
    26d4:	025a0000 	subseq	r0, sl, #0
    26d8:	00010000 	andeq	r0, r1, r0
    26dc:	00025a51 	andeq	r5, r2, r1, asr sl
    26e0:	00025c00 	andeq	r5, r2, r0, lsl #24
    26e4:	71000600 	tstvc	r0, r0, lsl #12
    26e8:	24007300 	strcs	r7, [r0], #-768	; 0x300
    26ec:	00025c9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    26f0:	00025e00 	andeq	r5, r2, r0, lsl #28
    26f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2700:	00000268 	andeq	r0, r0, r8, ror #4
    2704:	0000026e 	andeq	r0, r0, lr, ror #4
    2708:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    270c:	84000002 	strhi	r0, [r0], #-2
    2710:	04000002 	streq	r0, [r0], #-2
    2714:	5001f300 	andpl	pc, r1, r0, lsl #6
    2718:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    271c:	00000000 	andeq	r0, r0, r0
    2720:	00026800 	andeq	r6, r2, r0, lsl #16
    2724:	00027400 	andeq	r7, r2, r0, lsl #8
    2728:	30000200 	andcc	r0, r0, r0, lsl #4
    272c:	0002749f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    2730:	00027600 	andeq	r7, r2, r0, lsl #12
    2734:	73000900 	movwvc	r0, #2304	; 0x900
    2738:	1a007000 	bne	1e740 <__Stack_Size+0x1e340>
    273c:	9f290073 	svcls	0x00290073
	...
    2748:	00000268 	andeq	r0, r0, r8, ror #4
    274c:	00000274 	andeq	r0, r0, r4, ror r2
    2750:	9f300002 	svcls	0x00300002
    2754:	00000274 	andeq	r0, r0, r4, ror r2
    2758:	00000276 	andeq	r0, r0, r6, ror r2
    275c:	00730006 	rsbseq	r0, r3, r6
    2760:	9f1a0070 	svcls	0x001a0070
    2764:	00000276 	andeq	r0, r0, r6, ror r2
    2768:	0000027a 	andeq	r0, r0, sl, ror r2
    276c:	00500001 	subseq	r0, r0, r1
    2770:	00000000 	andeq	r0, r0, r0
    2774:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2778:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
    277c:	07000002 	streq	r0, [r0, -r2]
    2780:	3a007000 	bcc	1e788 <__Stack_Size+0x1e388>
    2784:	9f1a3f25 	svcls	0x001a3f25
    2788:	0000026e 	andeq	r0, r0, lr, ror #4
    278c:	00000272 	andeq	r0, r0, r2, ror r2
    2790:	01f30008 	mvnseq	r0, r8
    2794:	3f253a50 	svccc	0x00253a50
    2798:	02729f1a 	rsbseq	r9, r2, #26, 30	; 0x68
    279c:	02780000 	rsbseq	r0, r8, #0
    27a0:	00010000 	andeq	r0, r1, r0
    27a4:	00027853 	andeq	r7, r2, r3, asr r8
    27a8:	00028400 	andeq	r8, r2, r0, lsl #8
    27ac:	31000900 	tstcc	r0, r0, lsl #18
    27b0:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    27b4:	9f2424f6 	svcls	0x002424f6
	...
    27c0:	00000284 	andeq	r0, r0, r4, lsl #5
    27c4:	0000028a 	andeq	r0, r0, sl, lsl #5
    27c8:	8a500001 	bhi	14027d4 <__Stack_Size+0x14023d4>
    27cc:	9c000002 	stcls	0, cr0, [r0], {2}
    27d0:	04000002 	streq	r0, [r0], #-2
    27d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    27d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    27dc:	00000000 	andeq	r0, r0, r0
    27e0:	00028400 	andeq	r8, r2, r0, lsl #8
    27e4:	00028a00 	andeq	r8, r2, r0, lsl #20
    27e8:	70000500 	andvc	r0, r0, r0, lsl #10
    27ec:	9f1a4f00 	svcls	0x001a4f00
    27f0:	0000028a 	andeq	r0, r0, sl, lsl #5
    27f4:	0000029c 	muleq	r0, ip, r2
    27f8:	00500001 	subseq	r0, r0, r1
    27fc:	00000000 	andeq	r0, r0, r0
    2800:	9c000000 	stcls	0, cr0, [r0], {-0}
    2804:	a2000002 	andge	r0, r0, #2
    2808:	01000002 	tsteq	r0, r2
    280c:	02a25000 	adceq	r5, r2, #0
    2810:	02b40000 	adcseq	r0, r4, #0
    2814:	00040000 	andeq	r0, r4, r0
    2818:	9f5001f3 	svcls	0x005001f3
	...
    2824:	0000029c 	muleq	r0, ip, r2
    2828:	000002a2 	andeq	r0, r0, r2, lsr #5
    282c:	00700005 	rsbseq	r0, r0, r5
    2830:	a29f1a4f 	addsge	r1, pc, #323584	; 0x4f000
    2834:	a6000002 	strge	r0, [r0], -r2
    2838:	01000002 	tsteq	r0, r2
    283c:	02a65000 	adceq	r5, r6, #0
    2840:	02b40000 	adcseq	r0, r4, #0
    2844:	00030000 	andeq	r0, r3, r0
    2848:	009f0170 	addseq	r0, pc, r0, ror r1	; <UNPREDICTABLE>
    284c:	00000000 	andeq	r0, r0, r0
    2850:	b4000000 	strlt	r0, [r0], #-0
    2854:	ba000002 	blt	2864 <__Stack_Size+0x2464>
    2858:	01000002 	tsteq	r0, r2
    285c:	02ba5000 	adcseq	r5, sl, #0
    2860:	02d00000 	sbcseq	r0, r0, #0
    2864:	00040000 	andeq	r0, r4, r0
    2868:	9f5001f3 	svcls	0x005001f3
	...
    2874:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    2878:	000002c0 	andeq	r0, r0, r0, asr #5
    287c:	9f300002 	svcls	0x00300002
    2880:	000002c0 	andeq	r0, r0, r0, asr #5
    2884:	000002c2 	andeq	r0, r0, r2, asr #5
    2888:	00730009 	rsbseq	r0, r3, r9
    288c:	731a0070 	tstvc	sl, #112	; 0x70
    2890:	009f2900 	addseq	r2, pc, r0, lsl #18
    2894:	00000000 	andeq	r0, r0, r0
    2898:	b4000000 	strlt	r0, [r0], #-0
    289c:	c0000002 	andgt	r0, r0, r2
    28a0:	02000002 	andeq	r0, r0, #2
    28a4:	c09f3000 	addsgt	r3, pc, r0
    28a8:	c2000002 	andgt	r0, r0, #2
    28ac:	06000002 	streq	r0, [r0], -r2
    28b0:	70007300 	andvc	r7, r0, r0, lsl #6
    28b4:	c29f1a00 	addsgt	r1, pc, #0, 20
    28b8:	c6000002 	strgt	r0, [r0], -r2
    28bc:	01000002 	tsteq	r0, r2
    28c0:	00005000 	andeq	r5, r0, r0
    28c4:	00000000 	andeq	r0, r0, r0
    28c8:	02b40000 	adcseq	r0, r4, #0
    28cc:	02ba0000 	adcseq	r0, sl, #0
    28d0:	00070000 	andeq	r0, r7, r0
    28d4:	253e0070 	ldrcs	r0, [lr, #-112]!	; 0x70
    28d8:	ba9f1a3f 	blt	fe7c91dc <SCS_BASE+0x1e7bb1dc>
    28dc:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    28e0:	08000002 	stmdaeq	r0, {r1}
    28e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    28e8:	1a3f253e 	bne	fcbde8 <__Stack_Size+0xfcb9e8>
    28ec:	0002be9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    28f0:	0002c400 	andeq	ip, r2, r0, lsl #8
    28f4:	53000100 	movwpl	r0, #256	; 0x100
    28f8:	000002c4 	andeq	r0, r0, r4, asr #5
    28fc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2900:	f3310009 	vhadd.u<illegal width 64>	d0, d1, d9
    2904:	f2095001 	vhadd.s8	d5, d9, d1
    2908:	009f2424 	addseq	r2, pc, r4, lsr #8
    290c:	00000000 	andeq	r0, r0, r0
    2910:	d0000000 	andle	r0, r0, r0
    2914:	da000002 	ble	2924 <__Stack_Size+0x2524>
    2918:	01000002 	tsteq	r0, r2
    291c:	02da5000 	sbcseq	r5, sl, #0
    2920:	02dc0000 	sbcseq	r0, ip, #0
    2924:	00040000 	andeq	r0, r4, r0
    2928:	9f5001f3 	svcls	0x005001f3
    292c:	000002dc 	ldrdeq	r0, [r0], -ip
    2930:	000002e6 	andeq	r0, r0, r6, ror #5
    2934:	e6500001 	ldrb	r0, [r0], -r1
    2938:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    293c:	04000002 	streq	r0, [r0], #-2
    2940:	5001f300 	andpl	pc, r1, r0, lsl #6
    2944:	0002f69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    2948:	0002f800 	andeq	pc, r2, r0, lsl #16
    294c:	50000100 	andpl	r0, r0, r0, lsl #2
    2950:	000002f8 	strdeq	r0, [r0], -r8
    2954:	00000300 	andeq	r0, r0, r0, lsl #6
    2958:	01f30004 	mvnseq	r0, r4
    295c:	00009f50 	andeq	r9, r0, r0, asr pc
    2960:	00000000 	andeq	r0, r0, r0
    2964:	02d00000 	sbcseq	r0, r0, #0
    2968:	02da0000 	sbcseq	r0, sl, #0
    296c:	00020000 	andeq	r0, r2, r0
    2970:	02da9f30 	sbcseq	r9, sl, #48, 30	; 0xc0
    2974:	02dc0000 	sbcseq	r0, ip, #0
    2978:	00010000 	andeq	r0, r1, r0
    297c:	0002dc50 	andeq	sp, r2, r0, asr ip
    2980:	0002ea00 	andeq	lr, r2, r0, lsl #20
    2984:	30000200 	andcc	r0, r0, r0, lsl #4
    2988:	0002ea9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    298c:	0002f600 	andeq	pc, r2, r0, lsl #12
    2990:	50000100 	andpl	r0, r0, r0, lsl #2
    2994:	000002f6 	strdeq	r0, [r0], -r6
    2998:	000002f8 	strdeq	r0, [r0], -r8
    299c:	9f300002 	svcls	0x00300002
    29a0:	000002f8 	strdeq	r0, [r0], -r8
    29a4:	00000300 	andeq	r0, r0, r0, lsl #6
    29a8:	00500001 	subseq	r0, r0, r1
    29ac:	00000000 	andeq	r0, r0, r0
    29b0:	d0000000 	andle	r0, r0, r0
    29b4:	d4000002 	strle	r0, [r0], #-2
    29b8:	02000002 	andeq	r0, r0, #2
    29bc:	d49f3000 	ldrle	r3, [pc], #0	; 29c4 <__Stack_Size+0x25c4>
    29c0:	e4000002 	str	r0, [r0], #-2
    29c4:	01000002 	tsteq	r0, r2
    29c8:	02e45300 	rsceq	r5, r4, #0, 6
    29cc:	02e60000 	rsceq	r0, r6, #0
    29d0:	00080000 	andeq	r0, r8, r0
    29d4:	f0090070 			; <UNDEFINED> instruction: 0xf0090070
    29d8:	9f253224 	svcls	0x00253224
    29dc:	000002e6 	andeq	r0, r0, r6, ror #5
    29e0:	000002f6 	strdeq	r0, [r0], -r6
    29e4:	01f30009 	mvnseq	r0, r9
    29e8:	24f00950 	ldrbtcs	r0, [r0], #2384	; 0x950
    29ec:	f69f2532 			; <UNDEFINED> instruction: 0xf69f2532
    29f0:	00000002 	andeq	r0, r0, r2
    29f4:	01000003 	tsteq	r0, r3
    29f8:	00005300 	andeq	r5, r0, r0, lsl #6
    29fc:	00000000 	andeq	r0, r0, r0
    2a00:	02d00000 	sbcseq	r0, r0, #0
    2a04:	02d40000 	sbcseq	r0, r4, #0
    2a08:	00020000 	andeq	r0, r2, r0
    2a0c:	02d49f30 	sbcseq	r9, r4, #48, 30	; 0xc0
    2a10:	02da0000 	sbcseq	r0, sl, #0
    2a14:	00070000 	andeq	r0, r7, r0
    2a18:	25440070 	strbcs	r0, [r4, #-112]	; 0x70
    2a1c:	da9f1a33 	ble	fe7c92f0 <SCS_BASE+0x1e7bb2f0>
    2a20:	dc000002 	stcle	0, cr0, [r0], {2}
    2a24:	08000002 	stmdaeq	r0, {r1}
    2a28:	5001f300 	andpl	pc, r1, r0, lsl #6
    2a2c:	1a332544 	bne	ccbf44 <__Stack_Size+0xccbb44>
    2a30:	0002dc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    2a34:	0002e600 	andeq	lr, r2, r0, lsl #12
    2a38:	70000700 	andvc	r0, r0, r0, lsl #14
    2a3c:	33254400 			; <UNDEFINED> instruction: 0x33254400
    2a40:	02e69f1a 	rsceq	r9, r6, #26, 30	; 0x68
    2a44:	02f60000 	rscseq	r0, r6, #0
    2a48:	00080000 	andeq	r0, r8, r0
    2a4c:	445001f3 	ldrbmi	r0, [r0], #-499	; 0x1f3
    2a50:	9f1a3325 	svcls	0x001a3325
    2a54:	000002f6 	strdeq	r0, [r0], -r6
    2a58:	000002f8 	strdeq	r0, [r0], -r8
    2a5c:	00700007 	rsbseq	r0, r0, r7
    2a60:	1a332544 	bne	ccbf78 <__Stack_Size+0xccbb78>
    2a64:	0002f89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    2a68:	00030000 	andeq	r0, r3, r0
    2a6c:	f3000800 	vsub.i8	d0, d0, d0
    2a70:	25445001 	strbcs	r5, [r4, #-1]
    2a74:	009f1a33 	addseq	r1, pc, r3, lsr sl	; <UNPREDICTABLE>
	...
    2a80:	0a000003 	beq	2a94 <__Stack_Size+0x2694>
    2a84:	01000003 	tsteq	r0, r3
    2a88:	030a5000 	movweq	r5, #40960	; 0xa000
    2a8c:	03140000 	tsteq	r4, #0
    2a90:	00040000 	andeq	r0, r4, r0
    2a94:	9f5001f3 	svcls	0x005001f3
	...
    2aa0:	00000300 	andeq	r0, r0, r0, lsl #6
    2aa4:	0000030a 	andeq	r0, r0, sl, lsl #6
    2aa8:	9f300002 	svcls	0x00300002
    2aac:	0000030a 	andeq	r0, r0, sl, lsl #6
    2ab0:	00000314 	andeq	r0, r0, r4, lsl r3
    2ab4:	00500001 	subseq	r0, r0, r1
	...
    2ac0:	0a000003 	beq	2ad4 <__Stack_Size+0x26d4>
    2ac4:	07000003 	streq	r0, [r0, -r3]
    2ac8:	46007000 	strmi	r7, [r0], -r0
    2acc:	9f1a3125 	svcls	0x001a3125
    2ad0:	0000030a 	andeq	r0, r0, sl, lsl #6
    2ad4:	00000314 	andeq	r0, r0, r4, lsl r3
    2ad8:	01f30008 	mvnseq	r0, r8
    2adc:	31254650 			; <UNDEFINED> instruction: 0x31254650
    2ae0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2ae4:	00000000 	andeq	r0, r0, r0
    2ae8:	00300000 	eorseq	r0, r0, r0
    2aec:	003a0000 	eorseq	r0, sl, r0
    2af0:	00010000 	andeq	r0, r1, r0
    2af4:	00003a50 	andeq	r3, r0, r0, asr sl
    2af8:	00004400 	andeq	r4, r0, r0, lsl #8
    2afc:	f3000400 	vshl.u8	d0, d0, d0
    2b00:	009f5001 	addseq	r5, pc, r1
    2b04:	00000000 	andeq	r0, r0, r0
    2b08:	30000000 	andcc	r0, r0, r0
    2b0c:	34000000 	strcc	r0, [r0], #-0
    2b10:	02000000 	andeq	r0, r0, #0
    2b14:	349f3000 	ldrcc	r3, [pc], #0	; 2b1c <__Stack_Size+0x271c>
    2b18:	3a000000 	bcc	2b20 <__Stack_Size+0x2720>
    2b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2b20:	003a5300 	eorseq	r5, sl, r0, lsl #6
    2b24:	00440000 	subeq	r0, r4, r0
    2b28:	00010000 	andeq	r0, r1, r0
    2b2c:	00000050 	andeq	r0, r0, r0, asr r0
    2b30:	00000000 	andeq	r0, r0, r0
    2b34:	00005000 	andeq	r5, r0, r0
    2b38:	00005e00 	andeq	r5, r0, r0, lsl #28
    2b3c:	50000100 	andpl	r0, r0, r0, lsl #2
    2b40:	0000005e 	andeq	r0, r0, lr, asr r0
    2b44:	0000007c 	andeq	r0, r0, ip, ror r0
    2b48:	01f30004 	mvnseq	r0, r4
    2b4c:	00009f50 	andeq	r9, r0, r0, asr pc
    2b50:	00000000 	andeq	r0, r0, r0
    2b54:	00500000 	subseq	r0, r0, r0
    2b58:	006f0000 	rsbeq	r0, pc, r0
    2b5c:	00010000 	andeq	r0, r1, r0
    2b60:	00006f51 	andeq	r6, r0, r1, asr pc
    2b64:	00007000 	andeq	r7, r0, r0
    2b68:	f3000400 	vshl.u8	d0, d0, d0
    2b6c:	709f5101 	addsvc	r5, pc, r1, lsl #2
    2b70:	73000000 	movwvc	r0, #0
    2b74:	01000000 	mrseq	r0, (UNDEF: 0)
    2b78:	00735100 	rsbseq	r5, r3, r0, lsl #2
    2b7c:	007c0000 	rsbseq	r0, ip, r0
    2b80:	00040000 	andeq	r0, r4, r0
    2b84:	9f5101f3 	svcls	0x005101f3
	...
    2b90:	00000050 	andeq	r0, r0, r0, asr r0
    2b94:	00000056 	andeq	r0, r0, r6, asr r0
    2b98:	9f300002 	svcls	0x00300002
    2b9c:	00000056 	andeq	r0, r0, r6, asr r0
    2ba0:	0000005e 	andeq	r0, r0, lr, asr r0
    2ba4:	5e530001 	cdppl	0, 5, cr0, cr3, cr1, {0}
    2ba8:	6f000000 	svcvs	0x00000000
    2bac:	01000000 	mrseq	r0, (UNDEF: 0)
    2bb0:	00705000 	rsbseq	r5, r0, r0
    2bb4:	00730000 	rsbseq	r0, r3, r0
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	00000050 	andeq	r0, r0, r0, asr r0
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	0000a400 	andeq	sl, r0, r0, lsl #8
    2bc8:	0000ae00 	andeq	sl, r0, r0, lsl #28
    2bcc:	50000100 	andpl	r0, r0, r0, lsl #2
    2bd0:	000000ae 	andeq	r0, r0, lr, lsr #1
    2bd4:	000000b8 	strheq	r0, [r0], -r8
    2bd8:	01f30004 	mvnseq	r0, r4
    2bdc:	00009f50 	andeq	r9, r0, r0, asr pc
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	00a40000 	adceq	r0, r4, r0
    2be8:	00a80000 	adceq	r0, r8, r0
    2bec:	00020000 	andeq	r0, r2, r0
    2bf0:	00a89f30 	adceq	r9, r8, r0, lsr pc
    2bf4:	00ae0000 	adceq	r0, lr, r0
    2bf8:	00080000 	andeq	r0, r8, r0
    2bfc:	00730070 	rsbseq	r0, r3, r0, ror r0
    2c00:	9f2e301a 	svcls	0x002e301a
    2c04:	000000ae 	andeq	r0, r0, lr, lsr #1
    2c08:	000000b8 	strheq	r0, [r0], -r8
    2c0c:	01f30009 	mvnseq	r0, r9
    2c10:	1a007350 	bne	1f958 <__Stack_Size+0x1f558>
    2c14:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    2c18:	00000000 	andeq	r0, r0, r0
    2c1c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2c20:	c0000000 	andgt	r0, r0, r0
    2c24:	01000000 	mrseq	r0, (UNDEF: 0)
    2c28:	00c05000 	sbceq	r5, r0, r0
    2c2c:	00c80000 	sbceq	r0, r8, r0
    2c30:	00040000 	andeq	r0, r4, r0
    2c34:	9f5001f3 	svcls	0x005001f3
	...
    2c40:	00000074 	andeq	r0, r0, r4, ror r0
    2c44:	00000080 	andeq	r0, r0, r0, lsl #1
    2c48:	80500001 	subshi	r0, r0, r1
    2c4c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2c50:	04000000 	streq	r0, [r0], #-0
    2c54:	5001f300 	andpl	pc, r1, r0, lsl #6
    2c58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c5c:	00000000 	andeq	r0, r0, r0
    2c60:	00007400 	andeq	r7, r0, r0, lsl #8
    2c64:	00007800 	andeq	r7, r0, r0, lsl #16
    2c68:	30000200 	andcc	r0, r0, r0, lsl #4
    2c6c:	0000789f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2c70:	00008000 	andeq	r8, r0, r0
    2c74:	53000100 	movwpl	r0, #256	; 0x100
    2c78:	00000080 	andeq	r0, r0, r0, lsl #1
    2c7c:	00000088 	andeq	r0, r0, r8, lsl #1
    2c80:	00500001 	subseq	r0, r0, r1
    2c84:	00000000 	andeq	r0, r0, r0
    2c88:	94000000 	strls	r0, [r0], #-0
    2c8c:	a0000000 	andge	r0, r0, r0
    2c90:	01000000 	mrseq	r0, (UNDEF: 0)
    2c94:	00a05000 	adceq	r5, r0, r0
    2c98:	00a80000 	adceq	r0, r8, r0
    2c9c:	00040000 	andeq	r0, r4, r0
    2ca0:	9f5001f3 	svcls	0x005001f3
	...
    2cac:	00000094 	muleq	r0, r4, r0
    2cb0:	0000009e 	muleq	r0, lr, r0
    2cb4:	9e510001 	cdpls	0, 5, cr0, cr1, cr1, {0}
    2cb8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2cbc:	04000000 	streq	r0, [r0], #-0
    2cc0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2cc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	00009400 	andeq	r9, r0, r0, lsl #8
    2cd0:	00009800 	andeq	r9, r0, r0, lsl #16
    2cd4:	30000200 	andcc	r0, r0, r0, lsl #4
    2cd8:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2cdc:	00009c00 	andeq	r9, r0, r0, lsl #24
    2ce0:	73000900 	movwvc	r0, #2304	; 0x900
    2ce4:	ffff1100 			; <UNDEFINED> instruction: 0xffff1100
    2ce8:	9f1a7e83 	svcls	0x001a7e83
    2cec:	0000009c 	muleq	r0, ip, r0
    2cf0:	000000a0 	andeq	r0, r0, r0, lsr #1
    2cf4:	a0530001 	subsge	r0, r3, r1
    2cf8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    2d00:	00005000 	andeq	r5, r0, r0
    2d04:	00000000 	andeq	r0, r0, r0
    2d08:	00b40000 	adcseq	r0, r4, r0
    2d0c:	00be0000 	adcseq	r0, lr, r0
    2d10:	00010000 	andeq	r0, r1, r0
    2d14:	0000be50 	andeq	fp, r0, r0, asr lr
    2d18:	0000c800 	andeq	ip, r0, r0, lsl #16
    2d1c:	f3000400 	vshl.u8	d0, d0, d0
    2d20:	009f5001 	addseq	r5, pc, r1
    2d24:	00000000 	andeq	r0, r0, r0
    2d28:	b4000000 	strlt	r0, [r0], #-0
    2d2c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2d30:	02000000 	andeq	r0, r0, #0
    2d34:	b89f3000 	ldmlt	pc, {ip, sp}	; <UNPREDICTABLE>
    2d38:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    2d40:	00be5300 	adcseq	r5, lr, r0, lsl #6
    2d44:	00c80000 	sbceq	r0, r8, r0
    2d48:	00010000 	andeq	r0, r1, r0
    2d4c:	00000050 	andeq	r0, r0, r0, asr r0
    2d50:	00000000 	andeq	r0, r0, r0
    2d54:	0000d800 	andeq	sp, r0, r0, lsl #16
    2d58:	0000e200 	andeq	lr, r0, r0, lsl #4
    2d5c:	50000100 	andpl	r0, r0, r0, lsl #2
    2d60:	000000e2 	andeq	r0, r0, r2, ror #1
    2d64:	000000ec 	andeq	r0, r0, ip, ror #1
    2d68:	01f30004 	mvnseq	r0, r4
    2d6c:	00009f50 	andeq	r9, r0, r0, asr pc
    2d70:	00000000 	andeq	r0, r0, r0
    2d74:	00d80000 	sbcseq	r0, r8, r0
    2d78:	00dc0000 	sbcseq	r0, ip, r0
    2d7c:	00020000 	andeq	r0, r2, r0
    2d80:	00dc9f30 	sbcseq	r9, ip, r0, lsr pc
    2d84:	00e20000 	rsceq	r0, r2, r0
    2d88:	00010000 	andeq	r0, r1, r0
    2d8c:	0000e253 	andeq	lr, r0, r3, asr r2
    2d90:	0000ec00 	andeq	lr, r0, r0, lsl #24
    2d94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2da0:	000000ec 	andeq	r0, r0, ip, ror #1
    2da4:	000000f6 	strdeq	r0, [r0], -r6
    2da8:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    2dac:	00000000 	andeq	r0, r0, r0
    2db0:	04000001 	streq	r0, [r0], #-1
    2db4:	5001f300 	andpl	pc, r1, r0, lsl #6
    2db8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	0000ec00 	andeq	lr, r0, r0, lsl #24
    2dc4:	0000f000 	andeq	pc, r0, r0
    2dc8:	30000200 	andcc	r0, r0, r0, lsl #4
    2dcc:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2dd0:	0000f600 	andeq	pc, r0, r0, lsl #12
    2dd4:	53000100 	movwpl	r0, #256	; 0x100
    2dd8:	000000f6 	strdeq	r0, [r0], -r6
    2ddc:	00000100 	andeq	r0, r0, r0, lsl #2
    2de0:	00500001 	subseq	r0, r0, r1
	...
    2dec:	0c000001 	stceq	0, cr0, [r0], {1}
    2df0:	01000001 	tsteq	r0, r1
    2df4:	010c5000 	mrseq	r5, (UNDEF: 12)
    2df8:	01140000 	tsteq	r4, r0
    2dfc:	00040000 	andeq	r0, r4, r0
    2e00:	9f5001f3 	svcls	0x005001f3
	...
    2e0c:	00000100 	andeq	r0, r0, r0, lsl #2
    2e10:	00000104 	andeq	r0, r0, r4, lsl #2
    2e14:	9f300002 	svcls	0x00300002
    2e18:	00000104 	andeq	r0, r0, r4, lsl #2
    2e1c:	0000010c 	andeq	r0, r0, ip, lsl #2
    2e20:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    2e24:	14000001 	strne	r0, [r0], #-1
    2e28:	01000001 	tsteq	r0, r1
    2e2c:	00005000 	andeq	r5, r0, r0
    2e30:	00000000 	andeq	r0, r0, r0
    2e34:	01140000 	tsteq	r4, r0
    2e38:	011c0000 	tsteq	ip, r0
    2e3c:	00010000 	andeq	r0, r1, r0
    2e40:	00011c50 	andeq	r1, r1, r0, asr ip
    2e44:	00011e00 	andeq	r1, r1, r0, lsl #28
    2e48:	f3000400 	vshl.u8	d0, d0, d0
    2e4c:	1e9f5001 	cdpne	0, 9, cr5, cr15, cr1, {0}
    2e50:	22000001 	andcs	r0, r0, #1
    2e54:	01000001 	tsteq	r0, r1
    2e58:	01225000 			; <UNDEFINED> instruction: 0x01225000
    2e5c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2e60:	00040000 	andeq	r0, r4, r0
    2e64:	9f5001f3 	svcls	0x005001f3
	...
    2e70:	00000138 	andeq	r0, r0, r8, lsr r1
    2e74:	00000142 	andeq	r0, r0, r2, asr #2
    2e78:	42500001 	subsmi	r0, r0, #1
    2e7c:	4c000001 	stcmi	0, cr0, [r0], {1}
    2e80:	04000001 	streq	r0, [r0], #-1
    2e84:	5001f300 	andpl	pc, r1, r0, lsl #6
    2e88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	00013800 	andeq	r3, r1, r0, lsl #16
    2e94:	00013c00 	andeq	r3, r1, r0, lsl #24
    2e98:	30000200 	andcc	r0, r0, r0, lsl #4
    2e9c:	00013c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2ea0:	00014200 	andeq	r4, r1, r0, lsl #4
    2ea4:	53000100 	movwpl	r0, #256	; 0x100
    2ea8:	00000142 	andeq	r0, r0, r2, asr #2
    2eac:	0000014c 	andeq	r0, r0, ip, asr #2
    2eb0:	00500001 	subseq	r0, r0, r1
    2eb4:	00000000 	andeq	r0, r0, r0
    2eb8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    2ebc:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    2ec0:	01000001 	tsteq	r0, r1
    2ec4:	017e5000 	cmneq	lr, r0
    2ec8:	01880000 	orreq	r0, r8, r0
    2ecc:	00040000 	andeq	r0, r4, r0
    2ed0:	9f5001f3 	svcls	0x005001f3
	...
    2edc:	00000194 	muleq	r0, r4, r1
    2ee0:	0000019a 	muleq	r0, sl, r1
    2ee4:	9f300002 	svcls	0x00300002
    2ee8:	0000019a 	muleq	r0, sl, r1
    2eec:	0000019e 	muleq	r0, lr, r1
    2ef0:	00730005 	rsbseq	r0, r3, r5
    2ef4:	9e9f1a3c 	mrcls	10, 4, r1, cr15, cr12, {1}
    2ef8:	a8000001 	stmdage	r0, {r0}
    2efc:	01000001 	tsteq	r0, r1
    2f00:	01aa5300 			; <UNDEFINED> instruction: 0x01aa5300
    2f04:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    2f08:	00010000 	andeq	r0, r1, r0
    2f0c:	0001cc53 	andeq	ip, r1, r3, asr ip
    2f10:	0001d200 	andeq	sp, r1, r0, lsl #4
    2f14:	73000800 	movwvc	r0, #2048	; 0x800
    2f18:	1af00800 	bne	ffc04f20 <SCS_BASE+0x1fbf6f20>
    2f1c:	dc9f2534 	cfldr32le	mvfx2, [pc], {52}	; 0x34
    2f20:	e0000001 	and	r0, r0, r1
    2f24:	09000001 	stmdbeq	r0, {r0}
    2f28:	0a007400 	beq	1ff30 <__Stack_Size+0x1fb30>
    2f2c:	381a0700 	ldmdacc	sl, {r8, r9, sl}
    2f30:	01ea9f25 	mvneq	r9, r5, lsr #30
    2f34:	01ee0000 	mvneq	r0, r0
    2f38:	00090000 	andeq	r0, r9, r0
    2f3c:	000a0074 	andeq	r0, sl, r4, ror r0
    2f40:	253b1a38 	ldrcs	r1, [fp, #-2616]!	; 0xa38
    2f44:	0001f69f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    2f48:	0001fa00 	andeq	pc, r1, r0, lsl #20
    2f4c:	72000900 	andvc	r0, r0, #0, 18
    2f50:	c0000a00 	andgt	r0, r0, r0, lsl #20
    2f54:	9f253e1a 	svcls	0x00253e1a
	...
    2f60:	00000194 	muleq	r0, r4, r1
    2f64:	000001ac 	andeq	r0, r0, ip, lsr #3
    2f68:	9f300002 	svcls	0x00300002
    2f6c:	000001ac 	andeq	r0, r0, ip, lsr #3
    2f70:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    2f74:	00730007 	rsbseq	r0, r3, r7
    2f78:	1a24414e 	bne	9134b8 <__Stack_Size+0x9130b8>
    2f7c:	0001b89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    2f80:	0001c800 	andeq	ip, r1, r0, lsl #16
    2f84:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f90:	00000194 	muleq	r0, r4, r1
    2f94:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2f98:	9f300002 	svcls	0x00300002
    2f9c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2fa0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    2fa4:	00710007 	rsbseq	r0, r1, r7
    2fa8:	1a243c40 	bne	9120b0 <__Stack_Size+0x911cb0>
    2fac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2fb0:	00000000 	andeq	r0, r0, r0
    2fb4:	00019400 	andeq	r9, r1, r0, lsl #8
    2fb8:	0001cc00 	andeq	ip, r1, r0, lsl #24
    2fbc:	30000200 	andcc	r0, r0, r0, lsl #4
    2fc0:	0001cc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2fc4:	0001d200 	andeq	sp, r1, r0, lsl #4
    2fc8:	73001300 	movwvc	r1, #768	; 0x300
    2fcc:	1af00800 	bne	ffc04fd4 <SCS_BASE+0x1fbf6fd4>
    2fd0:	1c032534 	cfstr32ne	mvfx2, [r3], {52}	; 0x34
    2fd4:	22080061 	andcs	r0, r8, #97	; 0x61
    2fd8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    2fdc:	01dc9f1a 	bicseq	r9, ip, sl, lsl pc
    2fe0:	01e00000 	mvneq	r0, r0
    2fe4:	00140000 	andseq	r0, r4, r0
    2fe8:	000a0074 	andeq	r0, sl, r4, ror r0
    2fec:	25381a07 	ldrcs	r1, [r8, #-2567]!	; 0xa07
    2ff0:	00611c03 	rsbeq	r1, r1, r3, lsl #24
    2ff4:	01942208 	orrseq	r2, r4, r8, lsl #4
    2ff8:	9f1aff08 	svcls	0x001aff08
    2ffc:	000001ea 	andeq	r0, r0, sl, ror #3
    3000:	000001ee 	andeq	r0, r0, lr, ror #3
    3004:	00740014 	rsbseq	r0, r4, r4, lsl r0
    3008:	1a38000a 	bne	e03038 <__Stack_Size+0xe02c38>
    300c:	1c03253b 	cfstr32ne	mvfx2, [r3], {59}	; 0x3b
    3010:	22080061 	andcs	r0, r8, #97	; 0x61
    3014:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    3018:	01f69f1a 	mvnseq	r9, sl, lsl pc
    301c:	01fa0000 	mvnseq	r0, r0
    3020:	00140000 	andseq	r0, r4, r0
    3024:	000a0072 	andeq	r0, sl, r2, ror r0
    3028:	253e1ac0 	ldrcs	r1, [lr, #-2752]!	; 0xac0
    302c:	00612c03 	rsbeq	r2, r1, r3, lsl #24
    3030:	01942208 	orrseq	r2, r4, r8, lsl #4
    3034:	9f1aff08 	svcls	0x001aff08
	...
    3040:	00000218 	andeq	r0, r0, r8, lsl r2
    3044:	00000220 	andeq	r0, r0, r0, lsr #4
    3048:	20500001 	subscs	r0, r0, r1
    304c:	22000002 	andcs	r0, r0, #2
    3050:	04000002 	streq	r0, [r0], #-2
    3054:	5001f300 	andpl	pc, r1, r0, lsl #6
    3058:	0002229f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    305c:	00022600 	andeq	r2, r2, r0, lsl #12
    3060:	50000100 	andpl	r0, r0, r0, lsl #2
    3064:	00000226 	andeq	r0, r0, r6, lsr #4
    3068:	00000230 	andeq	r0, r0, r0, lsr r2
    306c:	01f30004 	mvnseq	r0, r4
    3070:	00009f50 	andeq	r9, r0, r0, asr pc
    3074:	00000000 	andeq	r0, r0, r0
    3078:	02300000 	eorseq	r0, r0, #0
    307c:	02380000 	eorseq	r0, r8, #0
    3080:	00010000 	andeq	r0, r1, r0
    3084:	00023850 	andeq	r3, r2, r0, asr r8
    3088:	00023a00 	andeq	r3, r2, r0, lsl #20
    308c:	f3000400 	vshl.u8	d0, d0, d0
    3090:	3a9f5001 	bcc	fe7d709c <SCS_BASE+0x1e7c909c>
    3094:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    3098:	01000002 	tsteq	r0, r2
    309c:	023e5000 	eorseq	r5, lr, #0
    30a0:	02480000 	subeq	r0, r8, #0
    30a4:	00040000 	andeq	r0, r4, r0
    30a8:	9f5001f3 	svcls	0x005001f3
	...
    30b4:	00000248 	andeq	r0, r0, r8, asr #4
    30b8:	00000250 	andeq	r0, r0, r0, asr r2
    30bc:	50500001 	subspl	r0, r0, r1
    30c0:	52000002 	andpl	r0, r0, #2
    30c4:	04000002 	streq	r0, [r0], #-2
    30c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    30cc:	0002529f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    30d0:	00025600 	andeq	r5, r2, r0, lsl #12
    30d4:	50000100 	andpl	r0, r0, r0, lsl #2
    30d8:	00000256 	andeq	r0, r0, r6, asr r2
    30dc:	00000260 	andeq	r0, r0, r0, ror #4
    30e0:	01f30004 	mvnseq	r0, r4
    30e4:	00009f50 	andeq	r9, r0, r0, asr pc
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	02600000 	rsbeq	r0, r0, #0
    30f0:	02680000 	rsbeq	r0, r8, #0
    30f4:	00010000 	andeq	r0, r1, r0
    30f8:	00026850 	andeq	r6, r2, r0, asr r8
    30fc:	00026a00 	andeq	r6, r2, r0, lsl #20
    3100:	f3000400 	vshl.u8	d0, d0, d0
    3104:	6a9f5001 	bvs	fe7d7110 <SCS_BASE+0x1e7c9110>
    3108:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
    310c:	01000002 	tsteq	r0, r2
    3110:	026e5000 	rsbeq	r5, lr, #0
    3114:	02780000 	rsbseq	r0, r8, #0
    3118:	00040000 	andeq	r0, r4, r0
    311c:	9f5001f3 	svcls	0x005001f3
	...
    3128:	00000278 	andeq	r0, r0, r8, ror r2
    312c:	00000280 	andeq	r0, r0, r0, lsl #5
    3130:	80500001 	subshi	r0, r0, r1
    3134:	82000002 	andhi	r0, r0, #2
    3138:	04000002 	streq	r0, [r0], #-2
    313c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3140:	0002829f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    3144:	00028600 	andeq	r8, r2, r0, lsl #12
    3148:	50000100 	andpl	r0, r0, r0, lsl #2
    314c:	00000286 	andeq	r0, r0, r6, lsl #5
    3150:	00000290 	muleq	r0, r0, r2
    3154:	01f30004 	mvnseq	r0, r4
    3158:	00009f50 	andeq	r9, r0, r0, asr pc
    315c:	00000000 	andeq	r0, r0, r0
    3160:	02b40000 	adcseq	r0, r4, #0
    3164:	02cc0000 	sbceq	r0, ip, #0
    3168:	00010000 	andeq	r0, r1, r0
    316c:	0002cc50 	andeq	ip, r2, r0, asr ip
    3170:	0002dc00 	andeq	sp, r2, r0, lsl #24
    3174:	f3000400 	vshl.u8	d0, d0, d0
    3178:	009f5001 	addseq	r5, pc, r1
    317c:	00000000 	andeq	r0, r0, r0
    3180:	b4000000 	strlt	r0, [r0], #-0
    3184:	b6000002 	strlt	r0, [r0], -r2
    3188:	02000002 	andeq	r0, r0, #2
    318c:	b69f3000 	ldrlt	r3, [pc], r0
    3190:	c8000002 	stmdagt	r0, {r1}
    3194:	06000002 	streq	r0, [r0], -r2
    3198:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    319c:	c89f1aff 	ldmgt	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip}	; <UNPREDICTABLE>
    31a0:	cc000002 	stcgt	0, cr0, [r0], {2}
    31a4:	08000002 	stmdaeq	r0, {r1}
    31a8:	4f007000 	svcmi	0x00007000
    31ac:	1aff081a 	bne	fffc521c <SCS_BASE+0x1ffb721c>
    31b0:	0002cc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    31b4:	0002dc00 	andeq	sp, r2, r0, lsl #24
    31b8:	f3000900 	vmls.i8	d0, d0, d0
    31bc:	1a4f5001 	bne	13d71c8 <__Stack_Size+0x13d6dc8>
    31c0:	9f1aff08 	svcls	0x001aff08
	...
    31cc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    31d0:	000002be 			; <UNDEFINED> instruction: 0x000002be
    31d4:	9f300002 	svcls	0x00300002
    31d8:	000002be 			; <UNDEFINED> instruction: 0x000002be
    31dc:	000002c0 	andeq	r0, r0, r0, asr #5
    31e0:	c0530001 	subsgt	r0, r3, r1
    31e4:	c6000002 	strgt	r0, [r0], -r2
    31e8:	02000002 	andeq	r0, r0, #2
    31ec:	c69f3000 	ldrgt	r3, [pc], r0
    31f0:	dc000002 	stcle	0, cr0, [r0], {2}
    31f4:	01000002 	tsteq	r0, r2
    31f8:	00005300 	andeq	r5, r0, r0, lsl #6
    31fc:	00000000 	andeq	r0, r0, r0
    3200:	02b40000 	adcseq	r0, r4, #0
    3204:	02c80000 	sbceq	r0, r8, #0
    3208:	00020000 	andeq	r0, r2, r0
    320c:	02c89f30 	sbceq	r9, r8, #48, 30	; 0xc0
    3210:	02cc0000 	sbceq	r0, ip, #0
    3214:	000d0000 	andeq	r0, sp, r0
    3218:	00700073 	rsbseq	r0, r0, r3, ror r0
    321c:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    3220:	1a31251a 	bne	c4c690 <__Stack_Size+0xc4c290>
    3224:	0002cc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
    3228:	0002dc00 	andeq	sp, r2, r0, lsl #24
    322c:	73000e00 	movwvc	r0, #3584	; 0xe00
    3230:	5001f300 	andpl	pc, r1, r0, lsl #6
    3234:	ff081a4f 			; <UNDEFINED> instruction: 0xff081a4f
    3238:	1a31251a 	bne	c4c6a8 <__Stack_Size+0xc4c2a8>
    323c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3240:	00000000 	andeq	r0, r0, r0
    3244:	0002e200 	andeq	lr, r2, r0, lsl #4
    3248:	0002fe00 	andeq	pc, r2, r0, lsl #28
    324c:	30000200 	andcc	r0, r0, r0, lsl #4
    3250:	0002fe9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    3254:	00030000 	andeq	r0, r3, r0
    3258:	70000700 	andvc	r0, r0, r0, lsl #14
    325c:	30244800 	eorcc	r4, r4, r0, lsl #16
    3260:	00009f2e 	andeq	r9, r0, lr, lsr #30
    3264:	00000000 	andeq	r0, r0, r0
    3268:	02e80000 	rsceq	r0, r8, #0
    326c:	02fa0000 	rscseq	r0, sl, #0
    3270:	00010000 	andeq	r0, r1, r0
    3274:	00000050 	andeq	r0, r0, r0, asr r0
    3278:	00000000 	andeq	r0, r0, r0
    327c:	00031c00 	andeq	r1, r3, r0, lsl #24
    3280:	00032600 	andeq	r2, r3, r0, lsl #12
    3284:	50000100 	andpl	r0, r0, r0, lsl #2
    3288:	00000326 	andeq	r0, r0, r6, lsr #6
    328c:	00000330 	andeq	r0, r0, r0, lsr r3
    3290:	01f30004 	mvnseq	r0, r4
    3294:	00009f50 	andeq	r9, r0, r0, asr pc
    3298:	00000000 	andeq	r0, r0, r0
    329c:	031c0000 	tsteq	ip, #0
    32a0:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    32a4:	00020000 	andeq	r0, r2, r0
    32a8:	03209f30 			; <UNDEFINED> instruction: 0x03209f30
    32ac:	03260000 			; <UNDEFINED> instruction: 0x03260000
    32b0:	000b0000 	andeq	r0, fp, r0
    32b4:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    32b8:	1a00731a 	bne	1ff28 <__Stack_Size+0x1fb28>
    32bc:	269f2e30 			; <UNDEFINED> instruction: 0x269f2e30
    32c0:	30000003 	andcc	r0, r0, r3
    32c4:	0c000003 	stceq	0, cr0, [r0], {3}
    32c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    32cc:	731aff08 	tstvc	sl, #8, 30	; <UNPREDICTABLE>
    32d0:	2e301a00 	vaddcs.f32	s2, s0, s0
    32d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32d8:	00000000 	andeq	r0, r0, r0
    32dc:	00002400 	andeq	r2, r0, r0, lsl #8
    32e0:	00003400 	andeq	r3, r0, r0, lsl #8
    32e4:	50000100 	andpl	r0, r0, r0, lsl #2
    32e8:	00000034 	andeq	r0, r0, r4, lsr r0
    32ec:	0000003c 	andeq	r0, r0, ip, lsr r0
    32f0:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    32f4:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    32f8:	00004000 	andeq	r4, r0, r0
    32fc:	f3000400 	vshl.u8	d0, d0, d0
    3300:	409f5001 	addsmi	r5, pc, r1
    3304:	4c000000 	stcmi	0, cr0, [r0], {-0}
    3308:	03000000 	movweq	r0, #0
    330c:	9f7e7000 	svcls	0x007e7000
	...
    3318:	00000070 	andeq	r0, r0, r0, ror r0
    331c:	00000080 	andeq	r0, r0, r0, lsl #1
    3320:	80500001 	subshi	r0, r0, r1
    3324:	8c000000 	stchi	0, cr0, [r0], {-0}
    3328:	04000000 	streq	r0, [r0], #-0
    332c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3330:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3334:	00000000 	andeq	r0, r0, r0
    3338:	00007000 	andeq	r7, r0, r0
    333c:	00007a00 	andeq	r7, r0, r0, lsl #20
    3340:	30000200 	andcc	r0, r0, r0, lsl #4
    3344:	00007a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    3348:	00008c00 	andeq	r8, r0, r0, lsl #24
    334c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3358:	00000070 	andeq	r0, r0, r0, ror r0
    335c:	00000080 	andeq	r0, r0, r0, lsl #1
    3360:	00700008 	rsbseq	r0, r0, r8
    3364:	ff082533 			; <UNDEFINED> instruction: 0xff082533
    3368:	00809f1a 	addeq	r9, r0, sl, lsl pc
    336c:	008c0000 	addeq	r0, ip, r0
    3370:	00090000 	andeq	r0, r9, r0
    3374:	335001f3 	cmpcc	r0, #-1073741764	; 0xc000003c
    3378:	1aff0825 	bne	fffc5414 <SCS_BASE+0x1ffb7414>
    337c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3380:	00000000 	andeq	r0, r0, r0
    3384:	00007000 	andeq	r7, r0, r0
    3388:	00007c00 	andeq	r7, r0, r0, lsl #24
    338c:	30000200 	andcc	r0, r0, r0, lsl #4
    3390:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    3394:	00008000 	andeq	r8, r0, r0
    3398:	73000b00 	movwvc	r0, #2816	; 0xb00
    339c:	08007000 	stmdaeq	r0, {ip, sp, lr}
    33a0:	31251aff 	strdcc	r1, [r5, -pc]!
    33a4:	00809f1a 	addeq	r9, r0, sl, lsl pc
    33a8:	008c0000 	addeq	r0, ip, r0
    33ac:	000c0000 	andeq	r0, ip, r0
    33b0:	01f30073 	mvnseq	r0, r3, ror r0
    33b4:	1aff0850 	bne	fffc54fc <SCS_BASE+0x1ffb74fc>
    33b8:	9f1a3125 	svcls	0x001a3125
	...
    33c8:	0000002c 	andeq	r0, r0, ip, lsr #32
    33cc:	2c510001 	mrrccs	0, 0, r0, r1, cr1
    33d0:	32000000 	andcc	r0, r0, #0
    33d4:	04000000 	streq	r0, [r0], #-0
    33d8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    33dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    33e8:	00001c00 	andeq	r1, r0, r0, lsl #24
    33ec:	52000100 	andpl	r0, r0, #0, 2
    33f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    33f4:	00000032 	andeq	r0, r0, r2, lsr r0
    33f8:	01f30004 	mvnseq	r0, r4
    33fc:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    3408:	00240000 	eoreq	r0, r4, r0
    340c:	00010000 	andeq	r0, r1, r0
    3410:	00002453 	andeq	r2, r0, r3, asr r4
    3414:	00003200 	andeq	r3, r0, r0, lsl #4
    3418:	f3000400 	vshl.u8	d0, d0, d0
    341c:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    3428:	14000000 	strne	r0, [r0], #-0
    342c:	02000000 	andeq	r0, r0, #0
    3430:	149f3000 	ldrne	r3, [pc], #0	; 3438 <__Stack_Size+0x3038>
    3434:	16000000 	strne	r0, [r0], -r0
    3438:	01000000 	mrseq	r0, (UNDEF: 0)
    343c:	00165400 	andseq	r5, r6, r0, lsl #8
    3440:	001a0000 	andseq	r0, sl, r0
    3444:	00070000 	andeq	r0, r7, r0
    3448:	0c0b0074 	stceq	0, cr0, [fp], {116}	; 0x74
    344c:	2a9f1aff 	bcs	fe7ca050 <SCS_BASE+0x1e7bc050>
    3450:	32000000 	andcc	r0, r0, #0
    3454:	01000000 	mrseq	r0, (UNDEF: 0)
    3458:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    3464:	00160000 	andseq	r0, r6, r0
    3468:	00020000 	andeq	r0, r2, r0
    346c:	00169f30 	andseq	r9, r6, r0, lsr pc
    3470:	00200000 	eoreq	r0, r0, r0
    3474:	00010000 	andeq	r0, r1, r0
    3478:	00002c55 	andeq	r2, r0, r5, asr ip
    347c:	00003200 	andeq	r3, r0, r0, lsl #4
    3480:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    348c:	00000032 	andeq	r0, r0, r2, lsr r0
    3490:	00000062 	andeq	r0, r0, r2, rrx
    3494:	62510001 	subsvs	r0, r1, #1
    3498:	6c000000 	stcvs	0, cr0, [r0], {-0}
    349c:	04000000 	streq	r0, [r0], #-0
    34a0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    34a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34a8:	00000000 	andeq	r0, r0, r0
    34ac:	00003200 	andeq	r3, r0, r0, lsl #4
    34b0:	00005a00 	andeq	r5, r0, r0, lsl #20
    34b4:	52000100 	andpl	r0, r0, #0, 2
    34b8:	0000005a 	andeq	r0, r0, sl, asr r0
    34bc:	0000006c 	andeq	r0, r0, ip, rrx
    34c0:	01f30004 	mvnseq	r0, r4
    34c4:	00009f52 	andeq	r9, r0, r2, asr pc
    34c8:	00000000 	andeq	r0, r0, r0
    34cc:	00320000 	eorseq	r0, r2, r0
    34d0:	005e0000 	subseq	r0, lr, r0
    34d4:	00010000 	andeq	r0, r1, r0
    34d8:	00005e53 	andeq	r5, r0, r3, asr lr
    34dc:	00006c00 	andeq	r6, r0, r0, lsl #24
    34e0:	f3000400 	vshl.u8	d0, d0, d0
    34e4:	009f5301 	addseq	r5, pc, r1, lsl #6
    34e8:	00000000 	andeq	r0, r0, r0
    34ec:	32000000 	andcc	r0, r0, #0
    34f0:	42000000 	andmi	r0, r0, #0
    34f4:	02000000 	andeq	r0, r0, #0
    34f8:	429f3000 	addsmi	r3, pc, #0
    34fc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    3500:	01000000 	mrseq	r0, (UNDEF: 0)
    3504:	00645500 	rsbeq	r5, r4, r0, lsl #10
    3508:	006c0000 	rsbeq	r0, ip, r0
    350c:	00010000 	andeq	r0, r1, r0
    3510:	00000053 	andeq	r0, r0, r3, asr r0
    3514:	00000000 	andeq	r0, r0, r0
    3518:	00003200 	andeq	r3, r0, r0, lsl #4
    351c:	00004a00 	andeq	r4, r0, r0, lsl #20
    3520:	30000200 	andcc	r0, r0, r0, lsl #4
    3524:	00004a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    3528:	00005200 	andeq	r5, r0, r0, lsl #4
    352c:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3530:	00000066 	andeq	r0, r0, r6, rrx
    3534:	0000006c 	andeq	r0, r0, ip, rrx
    3538:	00540001 	subseq	r0, r4, r1
    353c:	00000000 	andeq	r0, r0, r0
    3540:	32000000 	andcc	r0, r0, #0
    3544:	4a000000 	bmi	354c <__Stack_Size+0x314c>
    3548:	02000000 	andeq	r0, r0, #0
    354c:	4a9f3000 	bmi	fe7cf554 <SCS_BASE+0x1e7c1554>
    3550:	62000000 	andvs	r0, r0, #0
    3554:	05000000 	streq	r0, [r0, #-0]
    3558:	34007100 	strcc	r7, [r0], #-256	; 0x100
    355c:	00629f24 	rsbeq	r9, r2, r4, lsr #30
    3560:	006c0000 	rsbeq	r0, ip, r0
    3564:	00060000 	andeq	r0, r6, r0
    3568:	345101f3 	ldrbcc	r0, [r1], #-499	; 0x1f3
    356c:	00009f24 	andeq	r9, r0, r4, lsr #30
    3570:	00000000 	andeq	r0, r0, r0
    3574:	006c0000 	rsbeq	r0, ip, r0
    3578:	008e0000 	addeq	r0, lr, r0
    357c:	00010000 	andeq	r0, r1, r0
    3580:	00008e50 	andeq	r8, r0, r0, asr lr
    3584:	00009800 	andeq	r9, r0, r0, lsl #16
    3588:	f3000400 	vshl.u8	d0, d0, d0
    358c:	989f5001 	ldmls	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    3590:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3594:	01000000 	mrseq	r0, (UNDEF: 0)
    3598:	00be5000 	adcseq	r5, lr, r0
    359c:	00ca0000 	sbceq	r0, sl, r0
    35a0:	00040000 	andeq	r0, r4, r0
    35a4:	9f5001f3 	svcls	0x005001f3
    35a8:	000000ca 	andeq	r0, r0, sl, asr #1
    35ac:	000000cc 	andeq	r0, r0, ip, asr #1
    35b0:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    35b4:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    35b8:	04000000 	streq	r0, [r0], #-0
    35bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    35c0:	0000de9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    35c4:	0000e000 	andeq	lr, r0, r0
    35c8:	50000100 	andpl	r0, r0, r0, lsl #2
    35cc:	000000e0 	andeq	r0, r0, r0, ror #1
    35d0:	000000ea 	andeq	r0, r0, sl, ror #1
    35d4:	01f30004 	mvnseq	r0, r4
    35d8:	00ea9f50 	rsceq	r9, sl, r0, asr pc
    35dc:	00ec0000 	rsceq	r0, ip, r0
    35e0:	00010000 	andeq	r0, r1, r0
    35e4:	0000ec50 	andeq	lr, r0, r0, asr ip
    35e8:	0000f600 	andeq	pc, r0, r0, lsl #12
    35ec:	f3000400 	vshl.u8	d0, d0, d0
    35f0:	f69f5001 			; <UNDEFINED> instruction: 0xf69f5001
    35f4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    35f8:	01000000 	mrseq	r0, (UNDEF: 0)
    35fc:	00f85000 	rscseq	r5, r8, r0
    3600:	01020000 	mrseq	r0, (UNDEF: 2)
    3604:	00040000 	andeq	r0, r4, r0
    3608:	9f5001f3 	svcls	0x005001f3
    360c:	00000102 	andeq	r0, r0, r2, lsl #2
    3610:	00000104 	andeq	r0, r0, r4, lsl #2
    3614:	04500001 	ldrbeq	r0, [r0], #-1
    3618:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    361c:	04000001 	streq	r0, [r0], #-1
    3620:	5001f300 	andpl	pc, r1, r0, lsl #6
    3624:	00010e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    3628:	00011200 	andeq	r1, r1, r0, lsl #4
    362c:	50000100 	andpl	r0, r0, r0, lsl #2
    3630:	00000112 	andeq	r0, r0, r2, lsl r1
    3634:	00000126 	andeq	r0, r0, r6, lsr #2
    3638:	01f30004 	mvnseq	r0, r4
    363c:	01269f50 			; <UNDEFINED> instruction: 0x01269f50
    3640:	01340000 	teqeq	r4, r0
    3644:	00010000 	andeq	r0, r1, r0
    3648:	00000050 	andeq	r0, r0, r0, asr r0
    364c:	00000000 	andeq	r0, r0, r0
    3650:	00017000 	andeq	r7, r1, r0
    3654:	0001aa00 	andeq	sl, r1, r0, lsl #20
    3658:	30000200 	andcc	r0, r0, r0, lsl #4
    365c:	0001aa9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    3660:	0001de00 	andeq	sp, r1, r0, lsl #28
    3664:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3670:	00000170 	andeq	r0, r0, r0, ror r1
    3674:	00000180 	andeq	r0, r0, r0, lsl #3
    3678:	9f300002 	svcls	0x00300002
    367c:	00000180 	andeq	r0, r0, r0, lsl #3
    3680:	00000196 	muleq	r0, r6, r1
    3684:	ac530001 	mrrcge	0, 0, r0, r3, cr1
    3688:	e4000001 	str	r0, [r0], #-1
    368c:	01000001 	tsteq	r0, r1
    3690:	00005300 	andeq	r5, r0, r0, lsl #6
    3694:	00000000 	andeq	r0, r0, r0
    3698:	01700000 	cmneq	r0, r0
    369c:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    36a0:	00020000 	andeq	r0, r2, r0
    36a4:	01aa9f30 			; <UNDEFINED> instruction: 0x01aa9f30
    36a8:	01cc0000 	biceq	r0, ip, r0
    36ac:	00010000 	andeq	r0, r1, r0
    36b0:	0001cc54 	andeq	ip, r1, r4, asr ip
    36b4:	0001d600 	andeq	sp, r1, r0, lsl #12
    36b8:	71000800 	tstvc	r0, r0, lsl #16
    36bc:	7502940c 	strvc	r9, [r2, #-1036]	; 0x40c
    36c0:	d69f2100 	ldrle	r2, [pc], r0, lsl #2
    36c4:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    36c8:	01000001 	tsteq	r0, r1
    36cc:	00005400 	andeq	r5, r0, r0, lsl #8
    36d0:	00000000 	andeq	r0, r0, r0
    36d4:	01e40000 	mvneq	r0, r0
    36d8:	021a0000 	andseq	r0, sl, #0
    36dc:	00020000 	andeq	r0, r2, r0
    36e0:	021a9f30 	andseq	r9, sl, #48, 30	; 0xc0
    36e4:	02680000 	rsbeq	r0, r8, #0
    36e8:	00010000 	andeq	r0, r1, r0
    36ec:	00000054 	andeq	r0, r0, r4, asr r0
    36f0:	00000000 	andeq	r0, r0, r0
    36f4:	0001e400 	andeq	lr, r1, r0, lsl #8
    36f8:	0001f400 	andeq	pc, r1, r0, lsl #8
    36fc:	30000200 	andcc	r0, r0, r0, lsl #4
    3700:	0001f49f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    3704:	00020a00 	andeq	r0, r2, r0, lsl #20
    3708:	53000100 	movwpl	r0, #256	; 0x100
    370c:	0000021a 	andeq	r0, r0, sl, lsl r2
    3710:	0000021e 	andeq	r0, r0, lr, lsl r2
    3714:	22530001 	subscs	r0, r3, #1
    3718:	36000002 	strcc	r0, [r0], -r2
    371c:	01000002 	tsteq	r0, r2
    3720:	023a5300 	eorseq	r5, sl, #0, 6
    3724:	023e0000 	eorseq	r0, lr, #0
    3728:	00010000 	andeq	r0, r1, r0
    372c:	00023e53 	andeq	r3, r2, r3, asr lr
    3730:	00024400 	andeq	r4, r2, r0, lsl #8
    3734:	52000100 	andpl	r0, r0, #0, 2
    3738:	00000244 	andeq	r0, r0, r4, asr #4
    373c:	0000024a 	andeq	r0, r0, sl, asr #4
    3740:	54530001 	ldrbpl	r0, [r3], #-1
    3744:	6c000002 	stcvs	0, cr0, [r0], {2}
    3748:	01000002 	tsteq	r0, r2
    374c:	00005300 	andeq	r5, r0, r0, lsl #6
    3750:	00000000 	andeq	r0, r0, r0
    3754:	01e40000 	mvneq	r0, r0
    3758:	021a0000 	andseq	r0, sl, #0
    375c:	00020000 	andeq	r0, r2, r0
    3760:	021a9f30 	andseq	r9, sl, #48, 30	; 0xc0
    3764:	02520000 	subseq	r0, r2, #0
    3768:	00010000 	andeq	r0, r1, r0
    376c:	00025455 	andeq	r5, r2, r5, asr r4
    3770:	00026000 	andeq	r6, r2, r0
    3774:	52000100 	andpl	r0, r0, #0, 2
    3778:	00000260 	andeq	r0, r0, r0, ror #4
    377c:	00000268 	andeq	r0, r0, r8, ror #4
    3780:	00550001 	subseq	r0, r5, r1
    3784:	00000000 	andeq	r0, r0, r0
    3788:	6c000000 	stcvs	0, cr0, [r0], {-0}
    378c:	9e000002 	cdpls	0, 0, cr0, cr0, cr2, {0}
    3790:	02000002 	andeq	r0, r0, #2
    3794:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    3798:	ec000002 	stc	0, cr0, [r0], {2}
    379c:	01000002 	tsteq	r0, r2
    37a0:	00005600 	andeq	r5, r0, r0, lsl #12
    37a4:	00000000 	andeq	r0, r0, r0
    37a8:	026c0000 	rsbeq	r0, ip, #0
    37ac:	027c0000 	rsbseq	r0, ip, #0
    37b0:	00020000 	andeq	r0, r2, r0
    37b4:	027c9f30 	rsbseq	r9, ip, #48, 30	; 0xc0
    37b8:	028e0000 	addeq	r0, lr, #0
    37bc:	00010000 	andeq	r0, r1, r0
    37c0:	00029e53 	andeq	r9, r2, r3, asr lr
    37c4:	0002a200 	andeq	sl, r2, r0, lsl #4
    37c8:	53000100 	movwpl	r0, #256	; 0x100
    37cc:	000002a6 	andeq	r0, r0, r6, lsr #5
    37d0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    37d4:	c2530001 	subsgt	r0, r3, #1
    37d8:	c6000002 	strgt	r0, [r0], -r2
    37dc:	01000002 	tsteq	r0, r2
    37e0:	02c65300 	sbceq	r5, r6, #0, 6
    37e4:	02d00000 	sbcseq	r0, r0, #0
    37e8:	00010000 	andeq	r0, r1, r0
    37ec:	0002d052 	andeq	sp, r2, r2, asr r0
    37f0:	0002dc00 	andeq	sp, r2, r0, lsl #24
    37f4:	53000100 	movwpl	r0, #256	; 0x100
    37f8:	000002e2 	andeq	r0, r0, r2, ror #5
    37fc:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3800:	00530001 	subseq	r0, r3, r1
    3804:	00000000 	andeq	r0, r0, r0
    3808:	6c000000 	stcvs	0, cr0, [r0], {-0}
    380c:	9e000002 	cdpls	0, 0, cr0, cr0, cr2, {0}
    3810:	02000002 	andeq	r0, r0, #2
    3814:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    3818:	ce000002 	cdpgt	0, 0, cr0, cr0, cr2, {0}
    381c:	01000002 	tsteq	r0, r2
    3820:	02e25400 	rsceq	r5, r2, #0, 8
    3824:	02e40000 	rsceq	r0, r4, #0
    3828:	00010000 	andeq	r0, r1, r0
    382c:	0002e455 	andeq	lr, r2, r5, asr r4
    3830:	0002ec00 	andeq	lr, r2, r0, lsl #24
    3834:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    3840:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3844:	00000342 	andeq	r0, r0, r2, asr #6
    3848:	42510001 	subsmi	r0, r1, #1
    384c:	58000003 	stmdapl	r0, {r0, r1}
    3850:	04000003 	streq	r0, [r0], #-3
    3854:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3858:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    385c:	00000000 	andeq	r0, r0, r0
    3860:	0002f000 	andeq	pc, r2, r0
    3864:	00032400 	andeq	r2, r3, r0, lsl #8
    3868:	30000200 	andcc	r0, r0, r0, lsl #4
    386c:	00032c9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
    3870:	00035800 	andeq	r5, r3, r0, lsl #16
    3874:	52000100 	andpl	r0, r0, #0, 2
	...
    3880:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3884:	00000300 	andeq	r0, r0, r0, lsl #6
    3888:	9f300002 	svcls	0x00300002
    388c:	00000300 	andeq	r0, r0, r0, lsl #6
    3890:	00000312 	andeq	r0, r0, r2, lsl r3
    3894:	34530001 	ldrbcc	r0, [r3], #-1
    3898:	58000003 	stmdapl	r0, {r0, r1}
    389c:	01000003 	tsteq	r0, r3
    38a0:	00005300 	andeq	r5, r0, r0, lsl #6
    38a4:	00000000 	andeq	r0, r0, r0
    38a8:	02f00000 	rscseq	r0, r0, #0
    38ac:	03240000 			; <UNDEFINED> instruction: 0x03240000
    38b0:	00020000 	andeq	r0, r2, r0
    38b4:	03249f30 			; <UNDEFINED> instruction: 0x03249f30
    38b8:	034a0000 	movteq	r0, #40960	; 0xa000
    38bc:	00010000 	andeq	r0, r1, r0
    38c0:	00034c54 	andeq	r4, r3, r4, asr ip
    38c4:	00035400 	andeq	r5, r3, r0, lsl #8
    38c8:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    38d4:	000003f6 	strdeq	r0, [r0], -r6
    38d8:	000003fe 	strdeq	r0, [r0], -lr
    38dc:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
    38e0:	00000003 	andeq	r0, r0, r3
    38e4:	04000004 	streq	r0, [r0], #-4
    38e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    38ec:	0004009f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
    38f0:	00040400 	andeq	r0, r4, r0, lsl #8
    38f4:	51000100 	mrspl	r0, (UNDEF: 16)
    38f8:	00000404 	andeq	r0, r0, r4, lsl #8
    38fc:	00000408 	andeq	r0, r0, r8, lsl #8
    3900:	01f30004 	mvnseq	r0, r4
    3904:	00009f51 	andeq	r9, r0, r1, asr pc
    3908:	00000000 	andeq	r0, r0, r0
    390c:	040c0000 	streq	r0, [ip], #-0
    3910:	040e0000 	streq	r0, [lr], #-0
    3914:	00010000 	andeq	r0, r1, r0
    3918:	00040e52 	andeq	r0, r4, r2, asr lr
    391c:	00041400 	andeq	r1, r4, r0, lsl #8
    3920:	f3000400 	vshl.u8	d0, d0, d0
    3924:	009f5201 	addseq	r5, pc, r1, lsl #4
    3928:	00000000 	andeq	r0, r0, r0
    392c:	14000000 	strne	r0, [r0], #-0
    3930:	1c000004 	stcne	0, cr0, [r0], {4}
    3934:	01000004 	tsteq	r0, r4
    3938:	041c5100 	ldreq	r5, [ip], #-256	; 0x100
    393c:	041e0000 	ldreq	r0, [lr], #-0
    3940:	00040000 	andeq	r0, r4, r0
    3944:	9f5101f3 	svcls	0x005101f3
    3948:	0000041e 	andeq	r0, r0, lr, lsl r4
    394c:	00000422 	andeq	r0, r0, r2, lsr #8
    3950:	22510001 	subscs	r0, r1, #1
    3954:	26000004 	strcs	r0, [r0], -r4
    3958:	04000004 	streq	r0, [r0], #-4
    395c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3960:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3964:	00000000 	andeq	r0, r0, r0
    3968:	00043400 	andeq	r3, r4, r0, lsl #8
    396c:	00044000 	andeq	r4, r4, r0
    3970:	51000100 	mrspl	r0, (UNDEF: 16)
    3974:	00000440 	andeq	r0, r0, r0, asr #8
    3978:	0000044e 	andeq	r0, r0, lr, asr #8
    397c:	01f30004 	mvnseq	r0, r4
    3980:	00009f51 	andeq	r9, r0, r1, asr pc
    3984:	00000000 	andeq	r0, r0, r0
    3988:	04340000 	ldrteq	r0, [r4], #-0
    398c:	04360000 	ldrteq	r0, [r6], #-0
    3990:	00020000 	andeq	r0, r2, r0
    3994:	04369f30 	ldrteq	r9, [r6], #-3888	; 0xf30
    3998:	043a0000 	ldrteq	r0, [sl], #-0
    399c:	00010000 	andeq	r0, r1, r0
    39a0:	00043e53 	andeq	r3, r4, r3, asr lr
    39a4:	00044000 	andeq	r4, r4, r0
    39a8:	53000100 	movwpl	r0, #256	; 0x100
    39ac:	00000440 	andeq	r0, r0, r0, asr #8
    39b0:	0000044e 	andeq	r0, r0, lr, asr #8
    39b4:	00510001 	subseq	r0, r1, r1
    39b8:	00000000 	andeq	r0, r0, r0
    39bc:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    39c0:	61000004 	tstvs	r0, r4
    39c4:	01000004 	tsteq	r0, r4
    39c8:	04615000 	strbteq	r5, [r1], #-0
    39cc:	04640000 	strbteq	r0, [r4], #-0
    39d0:	00010000 	andeq	r0, r1, r0
    39d4:	00046454 	andeq	r6, r4, r4, asr r4
    39d8:	00046700 	andeq	r6, r4, r0, lsl #14
    39dc:	50000100 	andpl	r0, r0, r0, lsl #2
    39e0:	00000467 	andeq	r0, r0, r7, ror #8
    39e4:	00000482 	andeq	r0, r0, r2, lsl #9
    39e8:	00540001 	subseq	r0, r4, r1
    39ec:	00000000 	andeq	r0, r0, r0
    39f0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    39f4:	56000004 	strpl	r0, [r0], -r4
    39f8:	01000004 	tsteq	r0, r4
    39fc:	04565100 	ldrbeq	r5, [r6], #-256	; 0x100
    3a00:	04820000 	streq	r0, [r2], #0
    3a04:	00040000 	andeq	r0, r4, r0
    3a08:	9f5101f3 	svcls	0x005101f3
	...
    3a14:	0000044e 	andeq	r0, r0, lr, asr #8
    3a18:	0000045c 	andeq	r0, r0, ip, asr r4
    3a1c:	5c520001 	mrrcpl	0, 0, r0, r2, cr1
    3a20:	82000004 	andhi	r0, r0, #4
    3a24:	04000004 	streq	r0, [r0], #-4
    3a28:	5201f300 	andpl	pc, r1, #0, 6
    3a2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	00044e00 	andeq	r4, r4, r0, lsl #28
    3a38:	00046100 	andeq	r6, r4, r0, lsl #2
    3a3c:	53000100 	movwpl	r0, #256	; 0x100
    3a40:	00000461 	andeq	r0, r0, r1, ror #8
    3a44:	00000464 	andeq	r0, r0, r4, ror #8
    3a48:	01f30004 	mvnseq	r0, r4
    3a4c:	04649f53 	strbteq	r9, [r4], #-3923	; 0xf53
    3a50:	04670000 	strbteq	r0, [r7], #-0
    3a54:	00010000 	andeq	r0, r1, r0
    3a58:	00046753 	andeq	r6, r4, r3, asr r7
    3a5c:	00048200 	andeq	r8, r4, r0, lsl #4
    3a60:	f3000400 	vshl.u8	d0, d0, d0
    3a64:	009f5301 	addseq	r5, pc, r1, lsl #6
    3a68:	00000000 	andeq	r0, r0, r0
    3a6c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3a70:	6a000004 	bvs	3a88 <__Stack_Size+0x3688>
    3a74:	02000004 	andeq	r0, r0, #4
    3a78:	6a9f3000 	bvs	fe7cfa80 <SCS_BASE+0x1e7c1a80>
    3a7c:	6e000004 	cdpvs	0, 0, cr0, cr0, cr4, {0}
    3a80:	01000004 	tsteq	r0, r4
    3a84:	04725100 	ldrbteq	r5, [r2], #-256	; 0x100
    3a88:	04820000 	streq	r0, [r2], #0
    3a8c:	00010000 	andeq	r0, r1, r0
    3a90:	00000051 	andeq	r0, r0, r1, asr r0
    3a94:	00000000 	andeq	r0, r0, r0
    3a98:	00048200 	andeq	r8, r4, r0, lsl #4
    3a9c:	00049200 	andeq	r9, r4, r0, lsl #4
    3aa0:	51000100 	mrspl	r0, (UNDEF: 16)
    3aa4:	00000492 	muleq	r0, r2, r4
    3aa8:	00000496 	muleq	r0, r6, r4
    3aac:	01f30004 	mvnseq	r0, r4
    3ab0:	00009f51 	andeq	r9, r0, r1, asr pc
    3ab4:	00000000 	andeq	r0, r0, r0
    3ab8:	04820000 	streq	r0, [r2], #0
    3abc:	048a0000 	streq	r0, [sl], #0
    3ac0:	00010000 	andeq	r0, r1, r0
    3ac4:	00048a53 	andeq	r8, r4, r3, asr sl
    3ac8:	00049600 	andeq	r9, r4, r0, lsl #12
    3acc:	f3000400 	vshl.u8	d0, d0, d0
    3ad0:	009f5301 	addseq	r5, pc, r1, lsl #6
    3ad4:	00000000 	andeq	r0, r0, r0
    3ad8:	82000000 	andhi	r0, r0, #0
    3adc:	86000004 	strhi	r0, [r0], -r4
    3ae0:	02000004 	andeq	r0, r0, #4
    3ae4:	869f3000 	ldrhi	r3, [pc], r0
    3ae8:	8c000004 	stchi	0, cr0, [r0], {4}
    3aec:	06000004 	streq	r0, [r0], -r4
    3af0:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    3af4:	929f1aff 	addsls	r1, pc, #1044480	; 0xff000
    3af8:	96000004 	strls	r0, [r0], -r4
    3afc:	01000004 	tsteq	r0, r4
    3b00:	00005100 	andeq	r5, r0, r0, lsl #2
    3b04:	00000000 	andeq	r0, r0, r0
    3b08:	04960000 	ldreq	r0, [r6], #0
    3b0c:	049d0000 	ldreq	r0, [sp], #0
    3b10:	00010000 	andeq	r0, r1, r0
    3b14:	00049d50 	andeq	r9, r4, r0, asr sp
    3b18:	0004b000 	andeq	fp, r4, r0
    3b1c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    3b28:	00000496 	muleq	r0, r6, r4
    3b2c:	0000049d 	muleq	r0, sp, r4
    3b30:	9d510001 	ldclls	0, cr0, [r1, #-4]
    3b34:	b0000004 	andlt	r0, r0, r4
    3b38:	04000004 	streq	r0, [r0], #-4
    3b3c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3b40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b44:	00000000 	andeq	r0, r0, r0
    3b48:	00049600 	andeq	r9, r4, r0, lsl #12
    3b4c:	00049d00 	andeq	r9, r4, r0, lsl #26
    3b50:	52000100 	andpl	r0, r0, #0, 2
    3b54:	0000049d 	muleq	r0, sp, r4
    3b58:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3b5c:	01f30004 	mvnseq	r0, r4
    3b60:	00009f52 	andeq	r9, r0, r2, asr pc
    3b64:	00000000 	andeq	r0, r0, r0
    3b68:	04960000 	ldreq	r0, [r6], #0
    3b6c:	049d0000 	ldreq	r0, [sp], #0
    3b70:	00010000 	andeq	r0, r1, r0
    3b74:	00049d53 	andeq	r9, r4, r3, asr sp
    3b78:	0004b000 	andeq	fp, r4, r0
    3b7c:	f3000400 	vshl.u8	d0, d0, d0
    3b80:	009f5301 	addseq	r5, pc, r1, lsl #6
    3b84:	00000000 	andeq	r0, r0, r0
    3b88:	96000000 	strls	r0, [r0], -r0
    3b8c:	a0000004 	andge	r0, r0, r4
    3b90:	02000004 	andeq	r0, r0, #4
    3b94:	a09f3000 	addsge	r3, pc, r0
    3b98:	a4000004 	strge	r0, [r0], #-4
    3b9c:	05000004 	streq	r0, [r0, #-4]
    3ba0:	37007300 	strcc	r7, [r0, -r0, lsl #6]
    3ba4:	04a89f21 	strteq	r9, [r8], #3873	; 0xf21
    3ba8:	04ac0000 	strteq	r0, [ip], #0
    3bac:	00050000 	andeq	r0, r5, r0
    3bb0:	21370073 	teqcs	r7, r3, ror r0
    3bb4:	0004ac9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    3bb8:	0004b000 	andeq	fp, r4, r0
    3bbc:	53000100 	movwpl	r0, #256	; 0x100
	...
    3bc8:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3bcc:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3bd0:	b7500001 	ldrblt	r0, [r0, -r1]
    3bd4:	c4000004 	strgt	r0, [r0], #-4
    3bd8:	01000004 	tsteq	r0, r4
    3bdc:	00005400 	andeq	r5, r0, r0, lsl #8
    3be0:	00000000 	andeq	r0, r0, r0
    3be4:	04b00000 	ldrteq	r0, [r0], #0
    3be8:	04b70000 	ldrteq	r0, [r7], #0
    3bec:	00010000 	andeq	r0, r1, r0
    3bf0:	0004b751 	andeq	fp, r4, r1, asr r7
    3bf4:	0004c400 	andeq	ip, r4, r0, lsl #8
    3bf8:	f3000400 	vshl.u8	d0, d0, d0
    3bfc:	009f5101 	addseq	r5, pc, r1, lsl #2
    3c00:	00000000 	andeq	r0, r0, r0
    3c04:	b0000000 	andlt	r0, r0, r0
    3c08:	b7000004 	strlt	r0, [r0, -r4]
    3c0c:	01000004 	tsteq	r0, r4
    3c10:	04b75200 	ldrteq	r5, [r7], #512	; 0x200
    3c14:	04c40000 	strbeq	r0, [r4], #0
    3c18:	00040000 	andeq	r0, r4, r0
    3c1c:	9f5201f3 	svcls	0x005201f3
	...
    3c28:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    3c2c:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    3c30:	b7530001 	ldrblt	r0, [r3, -r1]
    3c34:	c4000004 	strgt	r0, [r0], #-4
    3c38:	04000004 	streq	r0, [r0], #-4
    3c3c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3c40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	0004ca00 	andeq	ip, r4, r0, lsl #20
    3c4c:	0004d600 	andeq	sp, r4, r0, lsl #12
    3c50:	51000100 	mrspl	r0, (UNDEF: 16)
    3c54:	000004d6 	ldrdeq	r0, [r0], -r6
    3c58:	000004da 	ldrdeq	r0, [r0], -sl
    3c5c:	01f30004 	mvnseq	r0, r4
    3c60:	00009f51 	andeq	r9, r0, r1, asr pc
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	04ca0000 	strbeq	r0, [sl], #0
    3c6c:	04cc0000 	strbeq	r0, [ip], #0
    3c70:	00020000 	andeq	r0, r2, r0
    3c74:	04cc9f30 	strbeq	r9, [ip], #3888	; 0xf30
    3c78:	04d00000 	ldrbeq	r0, [r0], #0
    3c7c:	00010000 	andeq	r0, r1, r0
    3c80:	0004d453 	andeq	sp, r4, r3, asr r4
    3c84:	0004d600 	andeq	sp, r4, r0, lsl #12
    3c88:	53000100 	movwpl	r0, #256	; 0x100
    3c8c:	000004d6 	ldrdeq	r0, [r0], -r6
    3c90:	000004da 	ldrdeq	r0, [r0], -sl
    3c94:	00510001 	subseq	r0, r1, r1
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	da000000 	ble	3ca4 <__Stack_Size+0x38a4>
    3ca0:	e6000004 	str	r0, [r0], -r4
    3ca4:	01000004 	tsteq	r0, r4
    3ca8:	04e65100 	strbteq	r5, [r6], #256	; 0x100
    3cac:	04ea0000 	strbteq	r0, [sl], #0
    3cb0:	00040000 	andeq	r0, r4, r0
    3cb4:	9f5101f3 	svcls	0x005101f3
	...
    3cc0:	000004da 	ldrdeq	r0, [r0], -sl
    3cc4:	000004dc 	ldrdeq	r0, [r0], -ip
    3cc8:	9f300002 	svcls	0x00300002
    3ccc:	000004dc 	ldrdeq	r0, [r0], -ip
    3cd0:	000004e0 	andeq	r0, r0, r0, ror #9
    3cd4:	e4530001 	ldrb	r0, [r3], #-1
    3cd8:	e6000004 	str	r0, [r0], -r4
    3cdc:	01000004 	tsteq	r0, r4
    3ce0:	04e65300 	strbteq	r5, [r6], #768	; 0x300
    3ce4:	04ea0000 	strbteq	r0, [sl], #0
    3ce8:	00010000 	andeq	r0, r1, r0
    3cec:	00000051 	andeq	r0, r0, r1, asr r0
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	0004ea00 	andeq	lr, r4, r0, lsl #20
    3cf8:	00051800 	andeq	r1, r5, r0, lsl #16
    3cfc:	51000100 	mrspl	r0, (UNDEF: 16)
    3d00:	00000518 	andeq	r0, r0, r8, lsl r5
    3d04:	00000526 	andeq	r0, r0, r6, lsr #10
    3d08:	01f30004 	mvnseq	r0, r4
    3d0c:	00009f51 	andeq	r9, r0, r1, asr pc
    3d10:	00000000 	andeq	r0, r0, r0
    3d14:	04ea0000 	strbteq	r0, [sl], #0
    3d18:	05080000 	streq	r0, [r8, #-0]
    3d1c:	00010000 	andeq	r0, r1, r0
    3d20:	00050852 	andeq	r0, r5, r2, asr r8
    3d24:	00052600 	andeq	r2, r5, r0, lsl #12
    3d28:	f3000400 	vshl.u8	d0, d0, d0
    3d2c:	009f5201 	addseq	r5, pc, r1, lsl #4
    3d30:	00000000 	andeq	r0, r0, r0
    3d34:	ea000000 	b	3d3c <__Stack_Size+0x393c>
    3d38:	16000004 	strne	r0, [r0], -r4
    3d3c:	01000005 	tsteq	r0, r5
    3d40:	05165300 	ldreq	r5, [r6, #-768]	; 0x300
    3d44:	05260000 	streq	r0, [r6, #-0]!
    3d48:	00040000 	andeq	r0, r4, r0
    3d4c:	9f5301f3 	svcls	0x005301f3
	...
    3d58:	000004ea 	andeq	r0, r0, sl, ror #9
    3d5c:	000004ee 	andeq	r0, r0, lr, ror #9
    3d60:	9f300002 	svcls	0x00300002
    3d64:	000004ee 	andeq	r0, r0, lr, ror #9
    3d68:	00000504 	andeq	r0, r0, r4, lsl #10
    3d6c:	0e560001 	cdpeq	0, 5, cr0, cr6, cr1, {0}
    3d70:	18000005 	stmdane	r0, {r0, r2}
    3d74:	01000005 	tsteq	r0, r5
    3d78:	05185600 	ldreq	r5, [r8, #-1536]	; 0x600
    3d7c:	05260000 	streq	r0, [r6, #-0]!
    3d80:	00010000 	andeq	r0, r1, r0
    3d84:	00000051 	andeq	r0, r0, r1, asr r0
    3d88:	00000000 	andeq	r0, r0, r0
    3d8c:	0004ea00 	andeq	lr, r4, r0, lsl #20
    3d90:	0004f000 	andeq	pc, r4, r0
    3d94:	30000200 	andcc	r0, r0, r0, lsl #4
    3d98:	0004f09f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
    3d9c:	0004f600 	andeq	pc, r4, r0, lsl #12
    3da0:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3da4:	0000051c 	andeq	r0, r0, ip, lsl r5
    3da8:	00000526 	andeq	r0, r0, r6, lsr #10
    3dac:	00540001 	subseq	r0, r4, r1
    3db0:	00000000 	andeq	r0, r0, r0
    3db4:	ea000000 	b	3dbc <__Stack_Size+0x39bc>
    3db8:	f8000004 			; <UNDEFINED> instruction: 0xf8000004
    3dbc:	02000004 	andeq	r0, r0, #4
    3dc0:	f89f3000 			; <UNDEFINED> instruction: 0xf89f3000
    3dc4:	00000004 	andeq	r0, r0, r4
    3dc8:	01000005 	tsteq	r0, r5
    3dcc:	051e5500 	ldreq	r5, [lr, #-1280]	; 0x500
    3dd0:	05260000 	streq	r0, [r6, #-0]!
    3dd4:	00010000 	andeq	r0, r1, r0
    3dd8:	00000055 	andeq	r0, r0, r5, asr r0
    3ddc:	00000000 	andeq	r0, r0, r0
    3de0:	00052600 	andeq	r2, r5, r0, lsl #12
    3de4:	00053200 	andeq	r3, r5, r0, lsl #4
    3de8:	51000100 	mrspl	r0, (UNDEF: 16)
    3dec:	00000532 	andeq	r0, r0, r2, lsr r5
    3df0:	00000536 	andeq	r0, r0, r6, lsr r5
    3df4:	01f30004 	mvnseq	r0, r4
    3df8:	00009f51 	andeq	r9, r0, r1, asr pc
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	05260000 	streq	r0, [r6, #-0]!
    3e04:	05280000 	streq	r0, [r8, #-0]!
    3e08:	00020000 	andeq	r0, r2, r0
    3e0c:	05289f30 	streq	r9, [r8, #-3888]!	; 0xf30
    3e10:	052c0000 	streq	r0, [ip, #-0]!
    3e14:	00010000 	andeq	r0, r1, r0
    3e18:	00053053 	andeq	r3, r5, r3, asr r0
    3e1c:	00053200 	andeq	r3, r5, r0, lsl #4
    3e20:	53000100 	movwpl	r0, #256	; 0x100
    3e24:	00000532 	andeq	r0, r0, r2, lsr r5
    3e28:	00000536 	andeq	r0, r0, r6, lsr r5
    3e2c:	00510001 	subseq	r0, r1, r1
    3e30:	00000000 	andeq	r0, r0, r0
    3e34:	36000000 	strcc	r0, [r0], -r0
    3e38:	44000005 	strmi	r0, [r0], #-5
    3e3c:	01000005 	tsteq	r0, r5
    3e40:	05445100 	strbeq	r5, [r4, #-256]	; 0x100
    3e44:	054a0000 	strbeq	r0, [sl, #-0]
    3e48:	00040000 	andeq	r0, r4, r0
    3e4c:	9f5101f3 	svcls	0x005101f3
	...
    3e58:	00000536 	andeq	r0, r0, r6, lsr r5
    3e5c:	00000538 	andeq	r0, r0, r8, lsr r5
    3e60:	9f300002 	svcls	0x00300002
    3e64:	00000538 	andeq	r0, r0, r8, lsr r5
    3e68:	0000053c 	andeq	r0, r0, ip, lsr r5
    3e6c:	40530001 	subsmi	r0, r3, r1
    3e70:	46000005 	strmi	r0, [r0], -r5
    3e74:	01000005 	tsteq	r0, r5
    3e78:	05465300 	strbeq	r5, [r6, #-768]	; 0x300
    3e7c:	054a0000 	strbeq	r0, [sl, #-0]
    3e80:	00010000 	andeq	r0, r1, r0
    3e84:	00000051 	andeq	r0, r0, r1, asr r0
    3e88:	00000000 	andeq	r0, r0, r0
    3e8c:	00054a00 	andeq	r4, r5, r0, lsl #20
    3e90:	00055600 	andeq	r5, r5, r0, lsl #12
    3e94:	51000100 	mrspl	r0, (UNDEF: 16)
    3e98:	00000556 	andeq	r0, r0, r6, asr r5
    3e9c:	0000055a 	andeq	r0, r0, sl, asr r5
    3ea0:	01f30004 	mvnseq	r0, r4
    3ea4:	00009f51 	andeq	r9, r0, r1, asr pc
    3ea8:	00000000 	andeq	r0, r0, r0
    3eac:	054a0000 	strbeq	r0, [sl, #-0]
    3eb0:	054c0000 	strbeq	r0, [ip, #-0]
    3eb4:	00020000 	andeq	r0, r2, r0
    3eb8:	054c9f30 	strbeq	r9, [ip, #-3888]	; 0xf30
    3ebc:	05500000 	ldrbeq	r0, [r0, #-0]
    3ec0:	00010000 	andeq	r0, r1, r0
    3ec4:	00055453 	andeq	r5, r5, r3, asr r4
    3ec8:	00055600 	andeq	r5, r5, r0, lsl #12
    3ecc:	53000100 	movwpl	r0, #256	; 0x100
    3ed0:	00000556 	andeq	r0, r0, r6, asr r5
    3ed4:	0000055a 	andeq	r0, r0, sl, asr r5
    3ed8:	00510001 	subseq	r0, r1, r1
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	5a000000 	bpl	3ee8 <__Stack_Size+0x3ae8>
    3ee4:	68000005 	stmdavs	r0, {r0, r2}
    3ee8:	01000005 	tsteq	r0, r5
    3eec:	05685100 	strbeq	r5, [r8, #-256]!	; 0x100
    3ef0:	056e0000 	strbeq	r0, [lr, #-0]!
    3ef4:	00040000 	andeq	r0, r4, r0
    3ef8:	9f5101f3 	svcls	0x005101f3
	...
    3f04:	0000055a 	andeq	r0, r0, sl, asr r5
    3f08:	0000055c 	andeq	r0, r0, ip, asr r5
    3f0c:	9f300002 	svcls	0x00300002
    3f10:	0000055c 	andeq	r0, r0, ip, asr r5
    3f14:	00000560 	andeq	r0, r0, r0, ror #10
    3f18:	64530001 	ldrbvs	r0, [r3], #-1
    3f1c:	6a000005 	bvs	3f38 <__Stack_Size+0x3b38>
    3f20:	01000005 	tsteq	r0, r5
    3f24:	056a5300 	strbeq	r5, [sl, #-768]!	; 0x300
    3f28:	056e0000 	strbeq	r0, [lr, #-0]!
    3f2c:	00010000 	andeq	r0, r1, r0
    3f30:	00000051 	andeq	r0, r0, r1, asr r0
    3f34:	00000000 	andeq	r0, r0, r0
    3f38:	0005ce00 	andeq	ip, r5, r0, lsl #28
    3f3c:	0005da00 	andeq	sp, r5, r0, lsl #20
    3f40:	51000100 	mrspl	r0, (UNDEF: 16)
    3f44:	000005da 	ldrdeq	r0, [r0], -sl
    3f48:	000005de 	ldrdeq	r0, [r0], -lr
    3f4c:	01f30004 	mvnseq	r0, r4
    3f50:	00009f51 	andeq	r9, r0, r1, asr pc
    3f54:	00000000 	andeq	r0, r0, r0
    3f58:	05ce0000 	strbeq	r0, [lr]
    3f5c:	05d00000 	ldrbeq	r0, [r0]
    3f60:	00020000 	andeq	r0, r2, r0
    3f64:	05d09f30 	ldrbeq	r9, [r0, #3888]	; 0xf30
    3f68:	05d40000 	ldrbeq	r0, [r4]
    3f6c:	00010000 	andeq	r0, r1, r0
    3f70:	0005d853 	andeq	sp, r5, r3, asr r8
    3f74:	0005da00 	andeq	sp, r5, r0, lsl #20
    3f78:	53000100 	movwpl	r0, #256	; 0x100
    3f7c:	000005da 	ldrdeq	r0, [r0], -sl
    3f80:	000005de 	ldrdeq	r0, [r0], -lr
    3f84:	00510001 	subseq	r0, r1, r1
    3f88:	00000000 	andeq	r0, r0, r0
    3f8c:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    3f90:	ec000005 	stc	0, cr0, [r0], {5}
    3f94:	01000005 	tsteq	r0, r5
    3f98:	05ec5100 	strbeq	r5, [ip, #256]!	; 0x100
    3f9c:	05f20000 	ldrbeq	r0, [r2, #0]!
    3fa0:	00040000 	andeq	r0, r4, r0
    3fa4:	9f5101f3 	svcls	0x005101f3
	...
    3fb0:	000005de 	ldrdeq	r0, [r0], -lr
    3fb4:	000005e0 	andeq	r0, r0, r0, ror #11
    3fb8:	9f300002 	svcls	0x00300002
    3fbc:	000005e0 	andeq	r0, r0, r0, ror #11
    3fc0:	000005e4 	andeq	r0, r0, r4, ror #11
    3fc4:	e8530001 	ldmda	r3, {r0}^
    3fc8:	ee000005 	cdp	0, 0, cr0, cr0, cr5, {0}
    3fcc:	01000005 	tsteq	r0, r5
    3fd0:	05ee5300 	strbeq	r5, [lr, #768]!	; 0x300
    3fd4:	05f20000 	ldrbeq	r0, [r2, #0]!
    3fd8:	00010000 	andeq	r0, r1, r0
    3fdc:	00000051 	andeq	r0, r0, r1, asr r0
    3fe0:	00000000 	andeq	r0, r0, r0
    3fe4:	0005f200 	andeq	pc, r5, r0, lsl #4
    3fe8:	0005fe00 	andeq	pc, r5, r0, lsl #28
    3fec:	51000100 	mrspl	r0, (UNDEF: 16)
    3ff0:	000005fe 	strdeq	r0, [r0], -lr
    3ff4:	00000602 	andeq	r0, r0, r2, lsl #12
    3ff8:	01f30004 	mvnseq	r0, r4
    3ffc:	00009f51 	andeq	r9, r0, r1, asr pc
    4000:	00000000 	andeq	r0, r0, r0
    4004:	05f20000 	ldrbeq	r0, [r2, #0]!
    4008:	05f40000 	ldrbeq	r0, [r4, #0]!
    400c:	00020000 	andeq	r0, r2, r0
    4010:	05f49f30 	ldrbeq	r9, [r4, #3888]!	; 0xf30
    4014:	05f80000 	ldrbeq	r0, [r8, #0]!
    4018:	00010000 	andeq	r0, r1, r0
    401c:	0005fc53 	andeq	pc, r5, r3, asr ip	; <UNPREDICTABLE>
    4020:	0005fe00 	andeq	pc, r5, r0, lsl #28
    4024:	53000100 	movwpl	r0, #256	; 0x100
    4028:	000005fe 	strdeq	r0, [r0], -lr
    402c:	00000602 	andeq	r0, r0, r2, lsl #12
    4030:	00510001 	subseq	r0, r1, r1
    4034:	00000000 	andeq	r0, r0, r0
    4038:	02000000 	andeq	r0, r0, #0
    403c:	10000006 	andne	r0, r0, r6
    4040:	01000006 	tsteq	r0, r6
    4044:	06105100 	ldreq	r5, [r0], -r0, lsl #2
    4048:	06160000 	ldreq	r0, [r6], -r0
    404c:	00040000 	andeq	r0, r4, r0
    4050:	9f5101f3 	svcls	0x005101f3
	...
    405c:	00000602 	andeq	r0, r0, r2, lsl #12
    4060:	00000604 	andeq	r0, r0, r4, lsl #12
    4064:	9f300002 	svcls	0x00300002
    4068:	00000604 	andeq	r0, r0, r4, lsl #12
    406c:	00000608 	andeq	r0, r0, r8, lsl #12
    4070:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    4074:	12000006 	andne	r0, r0, #6
    4078:	01000006 	tsteq	r0, r6
    407c:	06125300 	ldreq	r5, [r2], -r0, lsl #6
    4080:	06160000 	ldreq	r0, [r6], -r0
    4084:	00010000 	andeq	r0, r1, r0
    4088:	00000051 	andeq	r0, r0, r1, asr r0
    408c:	00000000 	andeq	r0, r0, r0
    4090:	00061600 	andeq	r1, r6, r0, lsl #12
    4094:	00062200 	andeq	r2, r6, r0, lsl #4
    4098:	51000100 	mrspl	r0, (UNDEF: 16)
    409c:	00000622 	andeq	r0, r0, r2, lsr #12
    40a0:	00000626 	andeq	r0, r0, r6, lsr #12
    40a4:	01f30004 	mvnseq	r0, r4
    40a8:	00009f51 	andeq	r9, r0, r1, asr pc
    40ac:	00000000 	andeq	r0, r0, r0
    40b0:	06160000 	ldreq	r0, [r6], -r0
    40b4:	06180000 	ldreq	r0, [r8], -r0
    40b8:	00020000 	andeq	r0, r2, r0
    40bc:	06189f30 	sasxeq	r9, r8, r0
    40c0:	061c0000 	ldreq	r0, [ip], -r0
    40c4:	00010000 	andeq	r0, r1, r0
    40c8:	00062053 	andeq	r2, r6, r3, asr r0
    40cc:	00062200 	andeq	r2, r6, r0, lsl #4
    40d0:	53000100 	movwpl	r0, #256	; 0x100
    40d4:	00000622 	andeq	r0, r0, r2, lsr #12
    40d8:	00000626 	andeq	r0, r0, r6, lsr #12
    40dc:	00510001 	subseq	r0, r1, r1
    40e0:	00000000 	andeq	r0, r0, r0
    40e4:	26000000 	strcs	r0, [r0], -r0
    40e8:	34000006 	strcc	r0, [r0], #-6
    40ec:	01000006 	tsteq	r0, r6
    40f0:	06345100 	ldrteq	r5, [r4], -r0, lsl #2
    40f4:	063a0000 	ldrteq	r0, [sl], -r0
    40f8:	00040000 	andeq	r0, r4, r0
    40fc:	9f5101f3 	svcls	0x005101f3
	...
    4108:	00000626 	andeq	r0, r0, r6, lsr #12
    410c:	00000628 	andeq	r0, r0, r8, lsr #12
    4110:	9f300002 	svcls	0x00300002
    4114:	00000628 	andeq	r0, r0, r8, lsr #12
    4118:	0000062c 	andeq	r0, r0, ip, lsr #12
    411c:	30530001 	subscc	r0, r3, r1
    4120:	36000006 	strcc	r0, [r0], -r6
    4124:	01000006 	tsteq	r0, r6
    4128:	06365300 	ldrteq	r5, [r6], -r0, lsl #6
    412c:	063a0000 	ldrteq	r0, [sl], -r0
    4130:	00010000 	andeq	r0, r1, r0
    4134:	00000051 	andeq	r0, r0, r1, asr r0
    4138:	00000000 	andeq	r0, r0, r0
    413c:	00063a00 	andeq	r3, r6, r0, lsl #20
    4140:	00064600 	andeq	r4, r6, r0, lsl #12
    4144:	51000100 	mrspl	r0, (UNDEF: 16)
    4148:	00000646 	andeq	r0, r0, r6, asr #12
    414c:	0000064a 	andeq	r0, r0, sl, asr #12
    4150:	01f30004 	mvnseq	r0, r4
    4154:	00009f51 	andeq	r9, r0, r1, asr pc
    4158:	00000000 	andeq	r0, r0, r0
    415c:	063a0000 	ldrteq	r0, [sl], -r0
    4160:	063c0000 	ldrteq	r0, [ip], -r0
    4164:	00020000 	andeq	r0, r2, r0
    4168:	063c9f30 	shasxeq	r9, ip, r0
    416c:	06400000 	strbeq	r0, [r0], -r0
    4170:	00010000 	andeq	r0, r1, r0
    4174:	00064453 	andeq	r4, r6, r3, asr r4
    4178:	00064600 	andeq	r4, r6, r0, lsl #12
    417c:	53000100 	movwpl	r0, #256	; 0x100
    4180:	00000646 	andeq	r0, r0, r6, asr #12
    4184:	0000064a 	andeq	r0, r0, sl, asr #12
    4188:	00510001 	subseq	r0, r1, r1
    418c:	00000000 	andeq	r0, r0, r0
    4190:	4a000000 	bmi	4198 <__Stack_Size+0x3d98>
    4194:	58000006 	stmdapl	r0, {r1, r2}
    4198:	01000006 	tsteq	r0, r6
    419c:	06585100 	ldrbeq	r5, [r8], -r0, lsl #2
    41a0:	065e0000 	ldrbeq	r0, [lr], -r0
    41a4:	00040000 	andeq	r0, r4, r0
    41a8:	9f5101f3 	svcls	0x005101f3
	...
    41b4:	0000064a 	andeq	r0, r0, sl, asr #12
    41b8:	0000064c 	andeq	r0, r0, ip, asr #12
    41bc:	9f300002 	svcls	0x00300002
    41c0:	0000064c 	andeq	r0, r0, ip, asr #12
    41c4:	00000650 	andeq	r0, r0, r0, asr r6
    41c8:	54530001 	ldrbpl	r0, [r3], #-1
    41cc:	5a000006 	bpl	41ec <__Stack_Size+0x3dec>
    41d0:	01000006 	tsteq	r0, r6
    41d4:	065a5300 	ldrbeq	r5, [sl], -r0, lsl #6
    41d8:	065e0000 	ldrbeq	r0, [lr], -r0
    41dc:	00010000 	andeq	r0, r1, r0
    41e0:	00000051 	andeq	r0, r0, r1, asr r0
    41e4:	00000000 	andeq	r0, r0, r0
    41e8:	00065e00 	andeq	r5, r6, r0, lsl #28
    41ec:	00066a00 	andeq	r6, r6, r0, lsl #20
    41f0:	51000100 	mrspl	r0, (UNDEF: 16)
    41f4:	0000066a 	andeq	r0, r0, sl, ror #12
    41f8:	0000066e 	andeq	r0, r0, lr, ror #12
    41fc:	01f30004 	mvnseq	r0, r4
    4200:	00009f51 	andeq	r9, r0, r1, asr pc
    4204:	00000000 	andeq	r0, r0, r0
    4208:	065e0000 	ldrbeq	r0, [lr], -r0
    420c:	06600000 	strbteq	r0, [r0], -r0
    4210:	00020000 	andeq	r0, r2, r0
    4214:	06609f30 	uqasxeq	r9, r0, r0
    4218:	06640000 	strbteq	r0, [r4], -r0
    421c:	00010000 	andeq	r0, r1, r0
    4220:	00066853 	andeq	r6, r6, r3, asr r8
    4224:	00066a00 	andeq	r6, r6, r0, lsl #20
    4228:	53000100 	movwpl	r0, #256	; 0x100
    422c:	0000066a 	andeq	r0, r0, sl, ror #12
    4230:	0000066e 	andeq	r0, r0, lr, ror #12
    4234:	00510001 	subseq	r0, r1, r1
    4238:	00000000 	andeq	r0, r0, r0
    423c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    4240:	78000006 	stmdavc	r0, {r1, r2}
    4244:	01000006 	tsteq	r0, r6
    4248:	06785100 	ldrbteq	r5, [r8], -r0, lsl #2
    424c:	067e0000 	ldrbteq	r0, [lr], -r0
    4250:	00040000 	andeq	r0, r4, r0
    4254:	9f5101f3 	svcls	0x005101f3
	...
    4260:	0000066e 	andeq	r0, r0, lr, ror #12
    4264:	00000670 	andeq	r0, r0, r0, ror r6
    4268:	9f300002 	svcls	0x00300002
    426c:	00000670 	andeq	r0, r0, r0, ror r6
    4270:	0000067a 	andeq	r0, r0, sl, ror r6
    4274:	7a530001 	bvc	14c4280 <__Stack_Size+0x14c3e80>
    4278:	7e000006 	cdpvc	0, 0, cr0, cr0, cr6, {0}
    427c:	01000006 	tsteq	r0, r6
    4280:	00005100 	andeq	r5, r0, r0, lsl #2
    4284:	00000000 	andeq	r0, r0, r0
    4288:	067e0000 	ldrbteq	r0, [lr], -r0
    428c:	068a0000 	streq	r0, [sl], r0
    4290:	00010000 	andeq	r0, r1, r0
    4294:	00068a51 	andeq	r8, r6, r1, asr sl
    4298:	00068e00 	andeq	r8, r6, r0, lsl #28
    429c:	f3000400 	vshl.u8	d0, d0, d0
    42a0:	009f5101 	addseq	r5, pc, r1, lsl #2
    42a4:	00000000 	andeq	r0, r0, r0
    42a8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    42ac:	80000006 	andhi	r0, r0, r6
    42b0:	02000006 	andeq	r0, r0, #6
    42b4:	809f3000 	addshi	r3, pc, r0
    42b8:	84000006 	strhi	r0, [r0], #-6
    42bc:	01000006 	tsteq	r0, r6
    42c0:	06885300 	streq	r5, [r8], r0, lsl #6
    42c4:	068a0000 	streq	r0, [sl], r0
    42c8:	00010000 	andeq	r0, r1, r0
    42cc:	00068a53 	andeq	r8, r6, r3, asr sl
    42d0:	00068e00 	andeq	r8, r6, r0, lsl #28
    42d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    42e0:	0000068e 	andeq	r0, r0, lr, lsl #13
    42e4:	00000698 	muleq	r0, r8, r6
    42e8:	98510001 	ldmdals	r1, {r0}^
    42ec:	9e000006 	cdpls	0, 0, cr0, cr0, cr6, {0}
    42f0:	04000006 	streq	r0, [r0], #-6
    42f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    42f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42fc:	00000000 	andeq	r0, r0, r0
    4300:	00068e00 	andeq	r8, r6, r0, lsl #28
    4304:	00069000 	andeq	r9, r6, r0
    4308:	30000200 	andcc	r0, r0, r0, lsl #4
    430c:	0006909f 	muleq	r6, pc, r0	; <UNPREDICTABLE>
    4310:	00069a00 	andeq	r9, r6, r0, lsl #20
    4314:	53000100 	movwpl	r0, #256	; 0x100
    4318:	0000069a 	muleq	r0, sl, r6
    431c:	0000069e 	muleq	r0, lr, r6
    4320:	00510001 	subseq	r0, r1, r1
    4324:	00000000 	andeq	r0, r0, r0
    4328:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    432c:	aa000006 	bge	434c <__Stack_Size+0x3f4c>
    4330:	01000006 	tsteq	r0, r6
    4334:	06aa5100 	strteq	r5, [sl], r0, lsl #2
    4338:	06ae0000 	strteq	r0, [lr], r0
    433c:	00040000 	andeq	r0, r4, r0
    4340:	9f5101f3 	svcls	0x005101f3
	...
    434c:	0000069e 	muleq	r0, lr, r6
    4350:	000006a0 	andeq	r0, r0, r0, lsr #13
    4354:	9f300002 	svcls	0x00300002
    4358:	000006a0 	andeq	r0, r0, r0, lsr #13
    435c:	000006a4 	andeq	r0, r0, r4, lsr #13
    4360:	a8530001 	ldmdage	r3, {r0}^
    4364:	aa000006 	bge	4384 <__Stack_Size+0x3f84>
    4368:	01000006 	tsteq	r0, r6
    436c:	06aa5300 	strteq	r5, [sl], r0, lsl #6
    4370:	06ae0000 	strteq	r0, [lr], r0
    4374:	00010000 	andeq	r0, r1, r0
    4378:	00000051 	andeq	r0, r0, r1, asr r0
    437c:	00000000 	andeq	r0, r0, r0
    4380:	0006ae00 	andeq	sl, r6, r0, lsl #28
    4384:	0006ba00 	andeq	fp, r6, r0, lsl #20
    4388:	51000100 	mrspl	r0, (UNDEF: 16)
    438c:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    4390:	000006be 			; <UNDEFINED> instruction: 0x000006be
    4394:	01f30004 	mvnseq	r0, r4
    4398:	00009f51 	andeq	r9, r0, r1, asr pc
    439c:	00000000 	andeq	r0, r0, r0
    43a0:	06ae0000 	strteq	r0, [lr], r0
    43a4:	06b00000 	ldrteq	r0, [r0], r0
    43a8:	00020000 	andeq	r0, r2, r0
    43ac:	06b09f30 			; <UNDEFINED> instruction: 0x06b09f30
    43b0:	06b40000 	ldrteq	r0, [r4], r0
    43b4:	00010000 	andeq	r0, r1, r0
    43b8:	0006b853 	andeq	fp, r6, r3, asr r8
    43bc:	0006ba00 	andeq	fp, r6, r0, lsl #20
    43c0:	53000100 	movwpl	r0, #256	; 0x100
    43c4:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    43c8:	000006be 			; <UNDEFINED> instruction: 0x000006be
    43cc:	00510001 	subseq	r0, r1, r1
    43d0:	00000000 	andeq	r0, r0, r0
    43d4:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    43d8:	cc000006 	stcgt	0, cr0, [r0], {6}
    43dc:	01000006 	tsteq	r0, r6
    43e0:	06cc5100 	strbeq	r5, [ip], r0, lsl #2
    43e4:	06d20000 	ldrbeq	r0, [r2], r0
    43e8:	00040000 	andeq	r0, r4, r0
    43ec:	9f5101f3 	svcls	0x005101f3
	...
    43f8:	000006be 			; <UNDEFINED> instruction: 0x000006be
    43fc:	000006c0 	andeq	r0, r0, r0, asr #13
    4400:	9f300002 	svcls	0x00300002
    4404:	000006c0 	andeq	r0, r0, r0, asr #13
    4408:	000006c4 	andeq	r0, r0, r4, asr #13
    440c:	c8530001 	ldmdagt	r3, {r0}^
    4410:	ce000006 	cdpgt	0, 0, cr0, cr0, cr6, {0}
    4414:	01000006 	tsteq	r0, r6
    4418:	06ce5300 	strbeq	r5, [lr], r0, lsl #6
    441c:	06d20000 	ldrbeq	r0, [r2], r0
    4420:	00010000 	andeq	r0, r1, r0
    4424:	00000051 	andeq	r0, r0, r1, asr r0
    4428:	00000000 	andeq	r0, r0, r0
    442c:	0006d200 	andeq	sp, r6, r0, lsl #4
    4430:	0006e000 	andeq	lr, r6, r0
    4434:	51000100 	mrspl	r0, (UNDEF: 16)
    4438:	000006e0 	andeq	r0, r0, r0, ror #13
    443c:	000006e6 	andeq	r0, r0, r6, ror #13
    4440:	01f30004 	mvnseq	r0, r4
    4444:	00009f51 	andeq	r9, r0, r1, asr pc
    4448:	00000000 	andeq	r0, r0, r0
    444c:	06d20000 	ldrbeq	r0, [r2], r0
    4450:	06d40000 	ldrbeq	r0, [r4], r0
    4454:	00020000 	andeq	r0, r2, r0
    4458:	06d49f30 			; <UNDEFINED> instruction: 0x06d49f30
    445c:	06d80000 	ldrbeq	r0, [r8], r0
    4460:	00010000 	andeq	r0, r1, r0
    4464:	0006dc53 	andeq	sp, r6, r3, asr ip
    4468:	0006e200 	andeq	lr, r6, r0, lsl #4
    446c:	53000100 	movwpl	r0, #256	; 0x100
    4470:	000006e2 	andeq	r0, r0, r2, ror #13
    4474:	000006e6 	andeq	r0, r0, r6, ror #13
    4478:	00510001 	subseq	r0, r1, r1
    447c:	00000000 	andeq	r0, r0, r0
    4480:	e6000000 	str	r0, [r0], -r0
    4484:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    4488:	01000006 	tsteq	r0, r6
    448c:	06f45100 	ldrbteq	r5, [r4], r0, lsl #2
    4490:	06fa0000 	ldrbteq	r0, [sl], r0
    4494:	00040000 	andeq	r0, r4, r0
    4498:	9f5101f3 	svcls	0x005101f3
	...
    44a4:	000006e6 	andeq	r0, r0, r6, ror #13
    44a8:	000006e8 	andeq	r0, r0, r8, ror #13
    44ac:	9f300002 	svcls	0x00300002
    44b0:	000006e8 	andeq	r0, r0, r8, ror #13
    44b4:	000006ec 	andeq	r0, r0, ip, ror #13
    44b8:	f0530001 			; <UNDEFINED> instruction: 0xf0530001
    44bc:	f6000006 			; <UNDEFINED> instruction: 0xf6000006
    44c0:	01000006 	tsteq	r0, r6
    44c4:	06f65300 	ldrbteq	r5, [r6], r0, lsl #6
    44c8:	06fa0000 	ldrbteq	r0, [sl], r0
    44cc:	00010000 	andeq	r0, r1, r0
    44d0:	00000051 	andeq	r0, r0, r1, asr r0
    44d4:	00000000 	andeq	r0, r0, r0
    44d8:	0006fa00 	andeq	pc, r6, r0, lsl #20
    44dc:	00070800 	andeq	r0, r7, r0, lsl #16
    44e0:	51000100 	mrspl	r0, (UNDEF: 16)
    44e4:	00000708 	andeq	r0, r0, r8, lsl #14
    44e8:	0000070e 	andeq	r0, r0, lr, lsl #14
    44ec:	01f30004 	mvnseq	r0, r4
    44f0:	00009f51 	andeq	r9, r0, r1, asr pc
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	06fa0000 	ldrbteq	r0, [sl], r0
    44fc:	06fc0000 	ldrbteq	r0, [ip], r0
    4500:	00020000 	andeq	r0, r2, r0
    4504:	06fc9f30 			; <UNDEFINED> instruction: 0x06fc9f30
    4508:	07000000 	streq	r0, [r0, -r0]
    450c:	00010000 	andeq	r0, r1, r0
    4510:	00070453 	andeq	r0, r7, r3, asr r4
    4514:	00070a00 	andeq	r0, r7, r0, lsl #20
    4518:	53000100 	movwpl	r0, #256	; 0x100
    451c:	0000070a 	andeq	r0, r0, sl, lsl #14
    4520:	0000070e 	andeq	r0, r0, lr, lsl #14
    4524:	00510001 	subseq	r0, r1, r1
    4528:	00000000 	andeq	r0, r0, r0
    452c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4530:	1c000007 	stcne	0, cr0, [r0], {7}
    4534:	01000007 	tsteq	r0, r7
    4538:	071c5100 	ldreq	r5, [ip, -r0, lsl #2]
    453c:	07220000 	streq	r0, [r2, -r0]!
    4540:	00040000 	andeq	r0, r4, r0
    4544:	9f5101f3 	svcls	0x005101f3
	...
    4550:	0000070e 	andeq	r0, r0, lr, lsl #14
    4554:	00000710 	andeq	r0, r0, r0, lsl r7
    4558:	9f300002 	svcls	0x00300002
    455c:	00000710 	andeq	r0, r0, r0, lsl r7
    4560:	00000714 	andeq	r0, r0, r4, lsl r7
    4564:	18530001 	ldmdane	r3, {r0}^
    4568:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    456c:	01000007 	tsteq	r0, r7
    4570:	071e5300 	ldreq	r5, [lr, -r0, lsl #6]
    4574:	07220000 	streq	r0, [r2, -r0]!
    4578:	00010000 	andeq	r0, r1, r0
    457c:	00000051 	andeq	r0, r0, r1, asr r0
    4580:	00000000 	andeq	r0, r0, r0
    4584:	00072200 	andeq	r2, r7, r0, lsl #4
    4588:	00073600 	andeq	r3, r7, r0, lsl #12
    458c:	52000100 	andpl	r0, r0, #0, 2
    4590:	00000736 	andeq	r0, r0, r6, lsr r7
    4594:	0000073e 	andeq	r0, r0, lr, lsr r7
    4598:	01f30004 	mvnseq	r0, r4
    459c:	00009f52 	andeq	r9, r0, r2, asr pc
    45a0:	00000000 	andeq	r0, r0, r0
    45a4:	073e0000 	ldreq	r0, [lr, -r0]!
    45a8:	07520000 	ldrbeq	r0, [r2, -r0]
    45ac:	00010000 	andeq	r0, r1, r0
    45b0:	00075252 	andeq	r5, r7, r2, asr r2
    45b4:	00075a00 	andeq	r5, r7, r0, lsl #20
    45b8:	f3000400 	vshl.u8	d0, d0, d0
    45bc:	009f5201 	addseq	r5, pc, r1, lsl #4
    45c0:	00000000 	andeq	r0, r0, r0
    45c4:	5a000000 	bpl	45cc <__Stack_Size+0x41cc>
    45c8:	70000007 	andvc	r0, r0, r7
    45cc:	01000007 	tsteq	r0, r7
    45d0:	07705000 	ldrbeq	r5, [r0, -r0]!
    45d4:	079e0000 	ldreq	r0, [lr, r0]
    45d8:	00030000 	andeq	r0, r3, r0
    45dc:	009f6870 	addseq	r6, pc, r0, ror r8	; <UNPREDICTABLE>
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	5a000000 	bpl	45ec <__Stack_Size+0x41ec>
    45e8:	78000007 	stmdavc	r0, {r0, r1, r2}
    45ec:	01000007 	tsteq	r0, r7
    45f0:	07785100 	ldrbeq	r5, [r8, -r0, lsl #2]!
    45f4:	07820000 	streq	r0, [r2, r0]
    45f8:	00040000 	andeq	r0, r4, r0
    45fc:	9f5101f3 	svcls	0x005101f3
    4600:	00000782 	andeq	r0, r0, r2, lsl #15
    4604:	00000788 	andeq	r0, r0, r8, lsl #15
    4608:	88510001 	ldmdahi	r1, {r0}^
    460c:	9e000007 	cdpls	0, 0, cr0, cr0, cr7, {0}
    4610:	04000007 	streq	r0, [r0], #-7
    4614:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4618:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    461c:	00000000 	andeq	r0, r0, r0
    4620:	00075a00 	andeq	r5, r7, r0, lsl #20
    4624:	00079000 	andeq	r9, r7, r0
    4628:	52000100 	andpl	r0, r0, #0, 2
    462c:	00000790 	muleq	r0, r0, r7
    4630:	0000079e 	muleq	r0, lr, r7
    4634:	01f30004 	mvnseq	r0, r4
    4638:	00009f52 	andeq	r9, r0, r2, asr pc
    463c:	00000000 	andeq	r0, r0, r0
    4640:	07e60000 	strbeq	r0, [r6, r0]!
    4644:	07f80000 	ldrbeq	r0, [r8, r0]!
    4648:	00010000 	andeq	r0, r1, r0
    464c:	0007f851 	andeq	pc, r7, r1, asr r8	; <UNPREDICTABLE>
    4650:	0007fc00 	andeq	pc, r7, r0, lsl #24
    4654:	f3000400 	vshl.u8	d0, d0, d0
    4658:	009f5101 	addseq	r5, pc, r1, lsl #2
    465c:	00000000 	andeq	r0, r0, r0
    4660:	fc000000 	stc2	0, cr0, [r0], {-0}
    4664:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    4668:	01000008 	tsteq	r0, r8
    466c:	080e5100 	stmdaeq	lr, {r8, ip, lr}
    4670:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    4674:	00040000 	andeq	r0, r4, r0
    4678:	9f5101f3 	svcls	0x005101f3
	...
    4684:	00000812 	andeq	r0, r0, r2, lsl r8
    4688:	00000824 	andeq	r0, r0, r4, lsr #16
    468c:	24510001 	ldrbcs	r0, [r1], #-1
    4690:	28000008 	stmdacs	r0, {r3}
    4694:	04000008 	streq	r0, [r0], #-8
    4698:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    469c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46a0:	00000000 	andeq	r0, r0, r0
    46a4:	00082800 	andeq	r2, r8, r0, lsl #16
    46a8:	00083a00 	andeq	r3, r8, r0, lsl #20
    46ac:	51000100 	mrspl	r0, (UNDEF: 16)
    46b0:	0000083a 	andeq	r0, r0, sl, lsr r8
    46b4:	0000083e 	andeq	r0, r0, lr, lsr r8
    46b8:	01f30004 	mvnseq	r0, r4
    46bc:	00009f51 	andeq	r9, r0, r1, asr pc
    46c0:	00000000 	andeq	r0, r0, r0
    46c4:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    46c8:	086a0000 	stmdaeq	sl!, {}^	; <UNPREDICTABLE>
    46cc:	00010000 	andeq	r0, r1, r0
    46d0:	00086a51 	andeq	r6, r8, r1, asr sl
    46d4:	00086e00 	andeq	r6, r8, r0, lsl #28
    46d8:	f3000400 	vshl.u8	d0, d0, d0
    46dc:	009f5101 	addseq	r5, pc, r1, lsl #2
    46e0:	00000000 	andeq	r0, r0, r0
    46e4:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    46e8:	82000008 	andhi	r0, r0, #8
    46ec:	01000008 	tsteq	r0, r8
    46f0:	08825100 	stmeq	r2, {r8, ip, lr}
    46f4:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
    46f8:	00040000 	andeq	r0, r4, r0
    46fc:	9f5101f3 	svcls	0x005101f3
	...
    4708:	00000888 	andeq	r0, r0, r8, lsl #17
    470c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    4710:	b1500001 	cmplt	r0, r1
    4714:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    4718:	01000008 	tsteq	r0, r8
    471c:	08ce5500 	stmiaeq	lr, {r8, sl, ip, lr}^
    4720:	08d10000 	ldmeq	r1, {}^	; <UNPREDICTABLE>
    4724:	00010000 	andeq	r0, r1, r0
    4728:	0008d150 	andeq	sp, r8, r0, asr r1
    472c:	0008d200 	andeq	sp, r8, r0, lsl #4
    4730:	f3000400 	vshl.u8	d0, d0, d0
    4734:	d29f5001 	addsle	r5, pc, #1
    4738:	d5000008 	strle	r0, [r0, #-8]
    473c:	01000008 	tsteq	r0, r8
    4740:	08d55000 	ldmeq	r5, {ip, lr}^
    4744:	08f20000 	ldmeq	r2!, {}^	; <UNPREDICTABLE>
    4748:	00010000 	andeq	r0, r1, r0
    474c:	0008f255 	andeq	pc, r8, r5, asr r2	; <UNPREDICTABLE>
    4750:	0008f500 	andeq	pc, r8, r0, lsl #10
    4754:	50000100 	andpl	r0, r0, r0, lsl #2
    4758:	000008f5 	strdeq	r0, [r0], -r5
    475c:	000008f6 	strdeq	r0, [r0], -r6
    4760:	01f30004 	mvnseq	r0, r4
    4764:	00009f50 	andeq	r9, r0, r0, asr pc
    4768:	00000000 	andeq	r0, r0, r0
    476c:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
    4770:	088e0000 	stmeq	lr, {}	; <UNPREDICTABLE>
    4774:	00010000 	andeq	r0, r1, r0
    4778:	00088e51 	andeq	r8, r8, r1, asr lr
    477c:	0008ce00 	andeq	ip, r8, r0, lsl #28
    4780:	54000100 	strpl	r0, [r0], #-256	; 0x100
    4784:	000008ce 	andeq	r0, r0, lr, asr #17
    4788:	000008d2 	ldrdeq	r0, [r0], -r2
    478c:	01f30004 	mvnseq	r0, r4
    4790:	08d29f51 	ldmeq	r2, {r0, r4, r6, r8, r9, sl, fp, ip, pc}^
    4794:	08f20000 	ldmeq	r2!, {}^	; <UNPREDICTABLE>
    4798:	00010000 	andeq	r0, r1, r0
    479c:	0008f254 	andeq	pc, r8, r4, asr r2	; <UNPREDICTABLE>
    47a0:	0008f600 	andeq	pc, r8, r0, lsl #12
    47a4:	f3000400 	vshl.u8	d0, d0, d0
    47a8:	009f5101 	addseq	r5, pc, r1, lsl #2
    47ac:	00000000 	andeq	r0, r0, r0
    47b0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    47b4:	9c000008 	stcls	0, cr0, [r0], {8}
    47b8:	02000008 	andeq	r0, r0, #8
    47bc:	9c9f3000 	ldcls	0, cr3, [pc], {0}
    47c0:	ce000008 	cdpgt	0, 0, cr0, cr0, cr8, {0}
    47c4:	01000008 	tsteq	r0, r8
    47c8:	08d25700 	ldmeq	r2, {r8, r9, sl, ip, lr}^
    47cc:	08f20000 	ldmeq	r2!, {}^	; <UNPREDICTABLE>
    47d0:	00010000 	andeq	r0, r1, r0
    47d4:	00000057 	andeq	r0, r0, r7, asr r0
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	00088800 	andeq	r8, r8, r0, lsl #16
    47e0:	0008a600 	andeq	sl, r8, r0, lsl #12
    47e4:	31000200 	mrscc	r0, R8_usr
    47e8:	0008a69f 	muleq	r8, pc, r6	; <UNPREDICTABLE>
    47ec:	0008ce00 	andeq	ip, r8, r0, lsl #28
    47f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    47f4:	000008d2 	ldrdeq	r0, [r0], -r2
    47f8:	000008f2 	strdeq	r0, [r0], -r2
    47fc:	00560001 	subseq	r0, r6, r1
    4800:	00000000 	andeq	r0, r0, r0
    4804:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    4808:	08000008 	stmdaeq	r0, {r3}
    480c:	01000009 	tsteq	r0, r9
    4810:	09085100 	stmdbeq	r8, {r8, ip, lr}
    4814:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    4818:	00040000 	andeq	r0, r4, r0
    481c:	9f5101f3 	svcls	0x005101f3
	...
    4828:	0000090c 	andeq	r0, r0, ip, lsl #18
    482c:	00000920 	andeq	r0, r0, r0, lsr #18
    4830:	20510001 	subscs	r0, r1, r1
    4834:	26000009 	strcs	r0, [r0], -r9
    4838:	04000009 	streq	r0, [r0], #-9
    483c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4840:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4844:	00000000 	andeq	r0, r0, r0
    4848:	00092600 	andeq	r2, r9, r0, lsl #12
    484c:	00093900 	andeq	r3, r9, r0, lsl #18
    4850:	50000100 	andpl	r0, r0, r0, lsl #2
    4854:	00000939 	andeq	r0, r0, r9, lsr r9
    4858:	00000942 	andeq	r0, r0, r2, asr #18
    485c:	42540001 	subsmi	r0, r4, #1
    4860:	45000009 	strmi	r0, [r0, #-9]
    4864:	01000009 	tsteq	r0, r9
    4868:	09455000 	stmdbeq	r5, {ip, lr}^
    486c:	09460000 	stmdbeq	r6, {}^	; <UNPREDICTABLE>
    4870:	00040000 	andeq	r0, r4, r0
    4874:	9f5001f3 	svcls	0x005001f3
    4878:	00000946 	andeq	r0, r0, r6, asr #18
    487c:	0000094d 	andeq	r0, r0, sp, asr #18
    4880:	4d500001 	ldclmi	0, cr0, [r0, #-4]
    4884:	56000009 	strpl	r0, [r0], -r9
    4888:	01000009 	tsteq	r0, r9
    488c:	09565400 	ldmdbeq	r6, {sl, ip, lr}^
    4890:	09590000 	ldmdbeq	r9, {}^	; <UNPREDICTABLE>
    4894:	00010000 	andeq	r0, r1, r0
    4898:	00095950 	andeq	r5, r9, r0, asr r9
    489c:	00095a00 	andeq	r5, r9, r0, lsl #20
    48a0:	f3000400 	vshl.u8	d0, d0, d0
    48a4:	5a9f5001 	bpl	fe7d88b0 <SCS_BASE+0x1e7ca8b0>
    48a8:	9d000009 	stcls	0, cr0, [r0, #-36]	; 0xffffffdc
    48ac:	01000009 	tsteq	r0, r9
    48b0:	099d5000 	ldmibeq	sp, {ip, lr}
    48b4:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    48b8:	00040000 	andeq	r0, r4, r0
    48bc:	9f5001f3 	svcls	0x005001f3
    48c0:	0000099e 	muleq	r0, lr, r9
    48c4:	000009db 	ldrdeq	r0, [r0], -fp
    48c8:	db500001 	blle	14048d4 <__Stack_Size+0x14044d4>
    48cc:	dc000009 	stcle	0, cr0, [r0], {9}
    48d0:	04000009 	streq	r0, [r0], #-9
    48d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    48d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48dc:	00000000 	andeq	r0, r0, r0
    48e0:	00092600 	andeq	r2, r9, r0, lsl #12
    48e4:	00093000 	andeq	r3, r9, r0
    48e8:	51000100 	mrspl	r0, (UNDEF: 16)
    48ec:	00000930 	andeq	r0, r0, r0, lsr r9
    48f0:	00000942 	andeq	r0, r0, r2, asr #18
    48f4:	42550001 	subsmi	r0, r5, #1
    48f8:	46000009 	strmi	r0, [r0], -r9
    48fc:	04000009 	streq	r0, [r0], #-9
    4900:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4904:	0009469f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
    4908:	00095600 	andeq	r5, r9, r0, lsl #12
    490c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    4910:	00000956 	andeq	r0, r0, r6, asr r9
    4914:	0000095a 	andeq	r0, r0, sl, asr r9
    4918:	01f30004 	mvnseq	r0, r4
    491c:	095a9f51 	ldmdbeq	sl, {r0, r4, r6, r8, r9, sl, fp, ip, pc}^
    4920:	09620000 	stmdbeq	r2!, {}^	; <UNPREDICTABLE>
    4924:	00010000 	andeq	r0, r1, r0
    4928:	00096255 	andeq	r6, r9, r5, asr r2
    492c:	0009dc00 	andeq	sp, r9, r0, lsl #24
    4930:	f3000400 	vshl.u8	d0, d0, d0
    4934:	009f5101 	addseq	r5, pc, r1, lsl #2
    4938:	00000000 	andeq	r0, r0, r0
    493c:	64000000 	strvs	r0, [r0], #-0
    4940:	82000009 	andhi	r0, r0, #9
    4944:	01000009 	tsteq	r0, r9
    4948:	00005300 	andeq	r5, r0, r0, lsl #6
    494c:	00000000 	andeq	r0, r0, r0
    4950:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    4954:	098c0000 	stmibeq	ip, {}	; <UNPREDICTABLE>
    4958:	00010000 	andeq	r0, r1, r0
    495c:	00000052 	andeq	r0, r0, r2, asr r0
    4960:	00000000 	andeq	r0, r0, r0
    4964:	00096400 	andeq	r6, r9, r0, lsl #8
    4968:	00099400 	andeq	r9, r9, r0, lsl #8
    496c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4978:	00000964 	andeq	r0, r0, r4, ror #18
    497c:	0000099d 	muleq	r0, sp, r9
    4980:	9d500001 	ldclls	0, cr0, [r0, #-4]
    4984:	9e000009 	cdpls	0, 0, cr0, cr0, cr9, {0}
    4988:	04000009 	streq	r0, [r0], #-9
    498c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4994:	00000000 	andeq	r0, r0, r0
    4998:	00096400 	andeq	r6, r9, r0, lsl #8
    499c:	00097400 	andeq	r7, r9, r0, lsl #8
    49a0:	30000200 	andcc	r0, r0, r0, lsl #4
    49a4:	0009749f 	muleq	r9, pc, r4	; <UNPREDICTABLE>
    49a8:	00097600 	andeq	r7, r9, r0, lsl #12
    49ac:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    49b0:	00000976 	andeq	r0, r0, r6, ror r9
    49b4:	0000097a 	andeq	r0, r0, sl, ror r9
    49b8:	00770007 	rsbseq	r0, r7, r7
    49bc:	1aff0c0b 	bne	fffc79f0 <SCS_BASE+0x1ffb99f0>
    49c0:	00098c9f 	muleq	r9, pc, ip	; <UNPREDICTABLE>
    49c4:	00099d00 	andeq	r9, r9, r0, lsl #26
    49c8:	52000100 	andpl	r0, r0, #0, 2
	...
    49d4:	00000964 	andeq	r0, r0, r4, ror #18
    49d8:	00000976 	andeq	r0, r0, r6, ror r9
    49dc:	9f300002 	svcls	0x00300002
    49e0:	00000976 	andeq	r0, r0, r6, ror r9
    49e4:	0000097e 	andeq	r0, r0, lr, ror r9
    49e8:	90560001 	subsls	r0, r6, r1
    49ec:	9a000009 	bls	4a18 <__Stack_Size+0x4618>
    49f0:	01000009 	tsteq	r0, r9
    49f4:	099a5600 	ldmibeq	sl, {r9, sl, ip, lr}
    49f8:	099d0000 	ldmibeq	sp, {}	; <UNPREDICTABLE>
    49fc:	00020000 	andeq	r0, r2, r0
    4a00:	00002070 	andeq	r2, r0, r0, ror r0
    4a04:	00000000 	andeq	r0, r0, r0
    4a08:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
    4a0c:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
    4a10:	00020000 	andeq	r0, r2, r0
    4a14:	09769f30 	ldmdbeq	r6!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    4a18:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
    4a1c:	00050000 	andeq	r0, r5, r0
    4a20:	24380071 	ldrtcs	r0, [r8], #-113	; 0x71
    4a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a28:	00000000 	andeq	r0, r0, r0
    4a2c:	00099e00 	andeq	r9, r9, r0, lsl #28
    4a30:	0009c600 	andeq	ip, r9, r0, lsl #12
    4a34:	53000100 	movwpl	r0, #256	; 0x100
	...
    4a40:	0000099e 	muleq	r0, lr, r9
    4a44:	000009be 			; <UNDEFINED> instruction: 0x000009be
    4a48:	00520001 	subseq	r0, r2, r1
    4a4c:	00000000 	andeq	r0, r0, r0
    4a50:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4a54:	d2000009 	andle	r0, r0, #9
    4a58:	01000009 	tsteq	r0, r9
    4a5c:	00005100 	andeq	r5, r0, r0, lsl #2
    4a60:	00000000 	andeq	r0, r0, r0
    4a64:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    4a68:	09db0000 	ldmibeq	fp, {}^	; <UNPREDICTABLE>
    4a6c:	00010000 	andeq	r0, r1, r0
    4a70:	0009db50 	andeq	sp, r9, r0, asr fp
    4a74:	0009dc00 	andeq	sp, r9, r0, lsl #24
    4a78:	f3000400 	vshl.u8	d0, d0, d0
    4a7c:	009f5001 	addseq	r5, pc, r1
    4a80:	00000000 	andeq	r0, r0, r0
    4a84:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4a88:	aa000009 	bge	4ab4 <__Stack_Size+0x46b4>
    4a8c:	02000009 	andeq	r0, r0, #9
    4a90:	aa9f3000 	bge	fe7d0a98 <SCS_BASE+0x1e7c2a98>
    4a94:	b4000009 	strlt	r0, [r0], #-9
    4a98:	01000009 	tsteq	r0, r9
    4a9c:	09b45600 	ldmibeq	r4!, {r9, sl, ip, lr}
    4aa0:	09ca0000 	stmibeq	sl, {}^	; <UNPREDICTABLE>
    4aa4:	00070000 	andeq	r0, r7, r0
    4aa8:	ff0a0076 			; <UNDEFINED> instruction: 0xff0a0076
    4aac:	ca9f1a0c 	bgt	fe7cb2e4 <SCS_BASE+0x1e7bd2e4>
    4ab0:	d6000009 	strle	r0, [r0], -r9
    4ab4:	01000009 	tsteq	r0, r9
    4ab8:	09d65300 	ldmibeq	r6, {r8, r9, ip, lr}^
    4abc:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
    4ac0:	00020000 	andeq	r0, r2, r0
    4ac4:	00001c70 	andeq	r1, r0, r0, ror ip
    4ac8:	00000000 	andeq	r0, r0, r0
    4acc:	099e0000 	ldmibeq	lr, {}	; <UNPREDICTABLE>
    4ad0:	09b40000 	ldmibeq	r4!, {}	; <UNPREDICTABLE>
    4ad4:	00020000 	andeq	r0, r2, r0
    4ad8:	09b49f30 	ldmibeq	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}
    4adc:	09ca0000 	stmibeq	sl, {}^	; <UNPREDICTABLE>
    4ae0:	00010000 	andeq	r0, r1, r0
    4ae4:	0009ca57 	andeq	ip, r9, r7, asr sl
    4ae8:	0009ce00 	andeq	ip, r9, r0, lsl #28
    4aec:	77000700 	strvc	r0, [r0, -r0, lsl #14]
    4af0:	dfff0b00 	svcle	0x00ff0b00
    4af4:	09ce9f1a 	stmibeq	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}^
    4af8:	09db0000 	ldmibeq	fp, {}^	; <UNPREDICTABLE>
    4afc:	00010000 	andeq	r0, r1, r0
    4b00:	00000052 	andeq	r0, r0, r2, asr r0
    4b04:	00000000 	andeq	r0, r0, r0
    4b08:	00099e00 	andeq	r9, r9, r0, lsl #28
    4b0c:	0009b400 	andeq	fp, r9, r0, lsl #8
    4b10:	30000200 	andcc	r0, r0, r0, lsl #4
    4b14:	0009b49f 	muleq	r9, pc, r4	; <UNPREDICTABLE>
    4b18:	0009d200 	andeq	sp, r9, r0, lsl #4
    4b1c:	71000500 	tstvc	r0, r0, lsl #10
    4b20:	9f243c00 	svcls	0x00243c00
	...
    4b2c:	000009dc 	ldrdeq	r0, [r0], -ip
    4b30:	000009e8 	andeq	r0, r0, r8, ror #19
    4b34:	e8510001 	ldmda	r1, {r0}^
    4b38:	ec000009 	stc	0, cr0, [r0], {9}
    4b3c:	04000009 	streq	r0, [r0], #-9
    4b40:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4b44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b48:	00000000 	andeq	r0, r0, r0
    4b4c:	0009ec00 	andeq	lr, r9, r0, lsl #24
    4b50:	0009ee00 	andeq	lr, r9, r0, lsl #28
    4b54:	50000100 	andpl	r0, r0, r0, lsl #2
    4b58:	000009ee 	andeq	r0, r0, lr, ror #19
    4b5c:	000009f2 	strdeq	r0, [r0], -r2
    4b60:	01f30004 	mvnseq	r0, r4
    4b64:	00009f50 	andeq	r9, r0, r0, asr pc
    4b68:	00000000 	andeq	r0, r0, r0
    4b6c:	09f20000 	ldmibeq	r2!, {}^	; <UNPREDICTABLE>
    4b70:	09f40000 	ldmibeq	r4!, {}^	; <UNPREDICTABLE>
    4b74:	00010000 	andeq	r0, r1, r0
    4b78:	0009f450 	andeq	pc, r9, r0, asr r4	; <UNPREDICTABLE>
    4b7c:	0009f800 	andeq	pc, r9, r0, lsl #16
    4b80:	f3000400 	vshl.u8	d0, d0, d0
    4b84:	009f5001 	addseq	r5, pc, r1
    4b88:	00000000 	andeq	r0, r0, r0
    4b8c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    4b90:	fa000009 	blx	4bbc <__Stack_Size+0x47bc>
    4b94:	01000009 	tsteq	r0, r9
    4b98:	09fa5000 	ldmibeq	sl!, {ip, lr}^
    4b9c:	09fe0000 	ldmibeq	lr!, {}^	; <UNPREDICTABLE>
    4ba0:	00040000 	andeq	r0, r4, r0
    4ba4:	9f5001f3 	svcls	0x005001f3
	...
    4bb0:	000009fe 	strdeq	r0, [r0], -lr
    4bb4:	00000a02 	andeq	r0, r0, r2, lsl #20
    4bb8:	02500001 	subseq	r0, r0, #1
    4bbc:	0600000a 	streq	r0, [r0], -sl
    4bc0:	0400000a 	streq	r0, [r0], #-10
    4bc4:	5001f300 	andpl	pc, r1, r0, lsl #6
    4bc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4bcc:	00000000 	andeq	r0, r0, r0
    4bd0:	000a0600 	andeq	r0, sl, r0, lsl #12
    4bd4:	000a0800 	andeq	r0, sl, r0, lsl #16
    4bd8:	50000100 	andpl	r0, r0, r0, lsl #2
    4bdc:	00000a08 	andeq	r0, r0, r8, lsl #20
    4be0:	00000a0c 	andeq	r0, r0, ip, lsl #20
    4be4:	01f30004 	mvnseq	r0, r4
    4be8:	00009f50 	andeq	r9, r0, r0, asr pc
    4bec:	00000000 	andeq	r0, r0, r0
    4bf0:	0a0c0000 	beq	304bf8 <__Stack_Size+0x3047f8>
    4bf4:	0a0e0000 	beq	384bfc <__Stack_Size+0x3847fc>
    4bf8:	00010000 	andeq	r0, r1, r0
    4bfc:	000a0e50 	andeq	r0, sl, r0, asr lr
    4c00:	000a1200 	andeq	r1, sl, r0, lsl #4
    4c04:	f3000400 	vshl.u8	d0, d0, d0
    4c08:	009f5001 	addseq	r5, pc, r1
    4c0c:	00000000 	andeq	r0, r0, r0
    4c10:	12000000 	andne	r0, r0, #0
    4c14:	1a00000a 	bne	4c44 <__Stack_Size+0x4844>
    4c18:	0100000a 	tsteq	r0, sl
    4c1c:	0a1a5000 	beq	698c24 <__Stack_Size+0x698824>
    4c20:	0a1e0000 	beq	784c28 <__Stack_Size+0x784828>
    4c24:	00040000 	andeq	r0, r4, r0
    4c28:	9f5001f3 	svcls	0x005001f3
	...
    4c34:	00000a12 	andeq	r0, r0, r2, lsl sl
    4c38:	00000a14 	andeq	r0, r0, r4, lsl sl
    4c3c:	9f300002 	svcls	0x00300002
    4c40:	00000a14 	andeq	r0, r0, r4, lsl sl
    4c44:	00000a1e 	andeq	r0, r0, lr, lsl sl
    4c48:	0071000a 	rsbseq	r0, r1, sl
    4c4c:	401a0073 	andsmi	r0, sl, r3, ror r0
    4c50:	9f2e3024 	svcls	0x002e3024
	...
    4c5c:	00000a1e 	andeq	r0, r0, lr, lsl sl
    4c60:	00000a20 	andeq	r0, r0, r0, lsr #20
    4c64:	20510001 	subscs	r0, r1, r1
    4c68:	2600000a 	strcs	r0, [r0], -sl
    4c6c:	0400000a 	streq	r0, [r0], #-10
    4c70:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4c74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c78:	00000000 	andeq	r0, r0, r0
    4c7c:	000a2600 	andeq	r2, sl, r0, lsl #12
    4c80:	000a2e00 	andeq	r2, sl, r0, lsl #28
    4c84:	50000100 	andpl	r0, r0, r0, lsl #2
    4c88:	00000a2e 	andeq	r0, r0, lr, lsr #20
    4c8c:	00000a3c 	andeq	r0, r0, ip, lsr sl
    4c90:	01f30004 	mvnseq	r0, r4
    4c94:	00009f50 	andeq	r9, r0, r0, asr pc
    4c98:	00000000 	andeq	r0, r0, r0
    4c9c:	0a260000 	beq	984ca4 <__Stack_Size+0x9848a4>
    4ca0:	0a3a0000 	beq	e84ca8 <__Stack_Size+0xe848a8>
    4ca4:	00020000 	andeq	r0, r2, r0
    4ca8:	0a3a9f30 	beq	eac970 <__Stack_Size+0xeac570>
    4cac:	0a3c0000 	beq	f04cb4 <__Stack_Size+0xf048b4>
    4cb0:	00010000 	andeq	r0, r1, r0
    4cb4:	00000050 	andeq	r0, r0, r0, asr r0
    4cb8:	00000000 	andeq	r0, r0, r0
    4cbc:	000a2600 	andeq	r2, sl, r0, lsl #12
    4cc0:	000a2800 	andeq	r2, sl, r0, lsl #16
    4cc4:	30000200 	andcc	r0, r0, r0, lsl #4
    4cc8:	000a289f 	muleq	sl, pc, r8	; <UNPREDICTABLE>
    4ccc:	000a3c00 	andeq	r3, sl, r0, lsl #24
    4cd0:	73000600 	movwvc	r0, #1536	; 0x600
    4cd4:	1a007100 	bne	210dc <__Stack_Size+0x20cdc>
    4cd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4cdc:	00000000 	andeq	r0, r0, r0
    4ce0:	000a2600 	andeq	r2, sl, r0, lsl #12
    4ce4:	000a3000 	andeq	r3, sl, r0
    4ce8:	30000200 	andcc	r0, r0, r0, lsl #4
    4cec:	000a309f 	muleq	sl, pc, r0	; <UNPREDICTABLE>
    4cf0:	000a3c00 	andeq	r3, sl, r0, lsl #24
    4cf4:	71000600 	tstvc	r0, r0, lsl #12
    4cf8:	1a007200 	bne	21500 <__Stack_Size+0x21100>
    4cfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d00:	00000000 	andeq	r0, r0, r0
    4d04:	000a3c00 	andeq	r3, sl, r0, lsl #24
    4d08:	000a3e00 	andeq	r3, sl, r0, lsl #28
    4d0c:	51000100 	mrspl	r0, (UNDEF: 16)
    4d10:	00000a3e 	andeq	r0, r0, lr, lsr sl
    4d14:	00000a44 	andeq	r0, r0, r4, asr #20
    4d18:	01f30004 	mvnseq	r0, r4
    4d1c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4d28:	002e0000 	eoreq	r0, lr, r0
    4d2c:	00010000 	andeq	r0, r1, r0
    4d30:	00002e50 	andeq	r2, r0, r0, asr lr
    4d34:	00004200 	andeq	r4, r0, r0, lsl #4
    4d38:	f3000400 	vshl.u8	d0, d0, d0
    4d3c:	429f5001 	addsmi	r5, pc, #1
    4d40:	46000000 	strmi	r0, [r0], -r0
    4d44:	01000000 	mrseq	r0, (UNDEF: 0)
    4d48:	00465000 	subeq	r5, r6, r0
    4d4c:	00520000 	subseq	r0, r2, r0
    4d50:	00040000 	andeq	r0, r4, r0
    4d54:	9f5001f3 	svcls	0x005001f3
    4d58:	00000052 	andeq	r0, r0, r2, asr r0
    4d5c:	00000056 	andeq	r0, r0, r6, asr r0
    4d60:	56500001 	ldrbpl	r0, [r0], -r1
    4d64:	62000000 	andvs	r0, r0, #0
    4d68:	04000000 	streq	r0, [r0], #-0
    4d6c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4d70:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    4d74:	00006600 	andeq	r6, r0, r0, lsl #12
    4d78:	50000100 	andpl	r0, r0, r0, lsl #2
    4d7c:	00000066 	andeq	r0, r0, r6, rrx
    4d80:	00000072 	andeq	r0, r0, r2, ror r0
    4d84:	01f30004 	mvnseq	r0, r4
    4d88:	00729f50 	rsbseq	r9, r2, r0, asr pc
    4d8c:	00760000 	rsbseq	r0, r6, r0
    4d90:	00010000 	andeq	r0, r1, r0
    4d94:	00007650 	andeq	r7, r0, r0, asr r6
    4d98:	00008a00 	andeq	r8, r0, r0, lsl #20
    4d9c:	f3000400 	vshl.u8	d0, d0, d0
    4da0:	8a9f5001 	bhi	fe7d8dac <SCS_BASE+0x1e7cadac>
    4da4:	94000000 	strls	r0, [r0], #-0
    4da8:	01000000 	mrseq	r0, (UNDEF: 0)
    4dac:	00005000 	andeq	r5, r0, r0
    4db0:	00000000 	andeq	r0, r0, r0
    4db4:	00940000 	addseq	r0, r4, r0
    4db8:	00d60000 	sbcseq	r0, r6, r0
    4dbc:	00010000 	andeq	r0, r1, r0
    4dc0:	0000d650 	andeq	sp, r0, r0, asr r6
    4dc4:	00011600 	andeq	r1, r1, r0, lsl #12
    4dc8:	54000100 	strpl	r0, [r0], #-256	; 0x100
    4dcc:	00000116 	andeq	r0, r0, r6, lsl r1
    4dd0:	0000011c 	andeq	r0, r0, ip, lsl r1
    4dd4:	01f30004 	mvnseq	r0, r4
    4dd8:	00009f50 	andeq	r9, r0, r0, asr pc
    4ddc:	00000000 	andeq	r0, r0, r0
    4de0:	00940000 	addseq	r0, r4, r0
    4de4:	00ac0000 	adceq	r0, ip, r0
    4de8:	00010000 	andeq	r0, r1, r0
    4dec:	0000ac51 	andeq	sl, r0, r1, asr ip
    4df0:	00011600 	andeq	r1, r1, r0, lsl #12
    4df4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    4df8:	00000116 	andeq	r0, r0, r6, lsl r1
    4dfc:	0000011c 	andeq	r0, r0, ip, lsl r1
    4e00:	01f30004 	mvnseq	r0, r4
    4e04:	00009f51 	andeq	r9, r0, r1, asr pc
    4e08:	00000000 	andeq	r0, r0, r0
    4e0c:	00940000 	addseq	r0, r4, r0
    4e10:	00a00000 	adceq	r0, r0, r0
    4e14:	00020000 	andeq	r0, r2, r0
    4e18:	00a09f30 	adceq	r9, r0, r0, lsr pc
    4e1c:	00a40000 	adceq	r0, r4, r0
    4e20:	000b0000 	andeq	r0, fp, r0
    4e24:	ff0b0073 			; <UNDEFINED> instruction: 0xff0b0073
    4e28:	ff0a1acf 			; <UNDEFINED> instruction: 0xff0a1acf
    4e2c:	a69f1aff 			; <UNDEFINED> instruction: 0xa69f1aff
    4e30:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4e34:	07000000 	streq	r0, [r0, -r0]
    4e38:	0a007300 	beq	21a40 <__Stack_Size+0x21640>
    4e3c:	9f1affff 	svcls	0x001affff
    4e40:	000000ae 	andeq	r0, r0, lr, lsr #1
    4e44:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4e48:	10700009 	rsbsne	r0, r0, r9
    4e4c:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    4e50:	b09f1aff 			; <UNDEFINED> instruction: 0xb09f1aff
    4e54:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    4e58:	0b000000 	bleq	4e60 <__Stack_Size+0x4a60>
    4e5c:	0b007200 	bleq	21664 <__Stack_Size+0x21264>
    4e60:	0a1ae9f3 	beq	6bf634 <__Stack_Size+0x6bf234>
    4e64:	9f1affff 	svcls	0x001affff
    4e68:	000000c2 	andeq	r0, r0, r2, asr #1
    4e6c:	000000c6 	andeq	r0, r0, r6, asr #1
    4e70:	00730007 	rsbseq	r0, r3, r7
    4e74:	1affff0a 	bne	4aa4 <__Stack_Size+0x46a4>
    4e78:	0000c69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    4e7c:	0000ca00 	andeq	ip, r0, r0, lsl #20
    4e80:	70000900 	andvc	r0, r0, r0, lsl #18
    4e84:	0a02940c 	beq	a9ebc <__Stack_Size+0xa9abc>
    4e88:	9f1affff 	svcls	0x001affff
    4e8c:	000000ca 	andeq	r0, r0, sl, asr #1
    4e90:	000000ce 	andeq	r0, r0, lr, asr #1
    4e94:	0073000b 	rsbseq	r0, r3, fp
    4e98:	1afcff0b 	bne	fff44acc <SCS_BASE+0x1ff36acc>
    4e9c:	1affff0a 	bne	4acc <__Stack_Size+0x46cc>
    4ea0:	0000d29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    4ea4:	0000d900 	andeq	sp, r0, r0, lsl #18
    4ea8:	73000700 	movwvc	r0, #1792	; 0x700
    4eac:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4eb0:	00fa9f1a 	rscseq	r9, sl, sl, lsl pc
    4eb4:	010c0000 	mrseq	r0, (UNDEF: 12)
    4eb8:	00010000 	andeq	r0, r1, r0
    4ebc:	00010c50 	andeq	r0, r1, r0, asr ip
    4ec0:	00010e00 	andeq	r0, r1, r0, lsl #28
    4ec4:	73000600 	movwvc	r0, #1536	; 0x600
    4ec8:	21007000 	mrscs	r7, (UNDEF: 0)
    4ecc:	00010e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    4ed0:	00011000 	andeq	r1, r1, r0
    4ed4:	53000100 	movwpl	r0, #256	; 0x100
    4ed8:	00000110 	andeq	r0, r0, r0, lsl r1
    4edc:	0000011c 	andeq	r0, r0, ip, lsl r1
    4ee0:	00720011 	rsbseq	r0, r2, r1, lsl r0
    4ee4:	640825f7 	strvs	r2, [r8], #-1527	; 0x5f7
    4ee8:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    4eec:	701a3f00 	andsvc	r3, sl, r0, lsl #30
    4ef0:	009f2100 	addseq	r2, pc, r0, lsl #2
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	94000000 	strls	r0, [r0], #-0
    4efc:	e6000000 	str	r0, [r0], -r0
    4f00:	02000000 	andeq	r0, r0, #0
    4f04:	e69f3000 	ldr	r3, [pc], r0
    4f08:	ec000000 	stc	0, cr0, [r0], {-0}
    4f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f10:	00ec5200 	rsceq	r5, ip, r0, lsl #4
    4f14:	00fc0000 	rscseq	r0, ip, r0
    4f18:	00110000 	andseq	r0, r1, r0
    4f1c:	91066891 			; <UNDEFINED> instruction: 0x91066891
    4f20:	00740664 	rsbseq	r0, r4, r4, ror #12
    4f24:	28290071 	stmdacs	r9!, {r0, r4, r5, r6}
    4f28:	13160001 	tstne	r6, #1
    4f2c:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    4f30:	00011600 	andeq	r1, r1, r0, lsl #12
    4f34:	91001400 	tstls	r0, r0, lsl #8
    4f38:	64910668 	ldrvs	r0, [r1], #1640	; 0x668
    4f3c:	0c007406 	cfstrseq	mvf7, [r0], {6}
    4f40:	40013800 	andmi	r3, r1, r0, lsl #16
    4f44:	00012829 	andeq	r2, r1, r9, lsr #16
    4f48:	169f1316 			; <UNDEFINED> instruction: 0x169f1316
    4f4c:	1c000001 	stcne	0, cr0, [r0], {1}
    4f50:	15000001 	strne	r0, [r0, #-1]
    4f54:	06687d00 	strbteq	r7, [r8], -r0, lsl #26
    4f58:	f306647d 	vqshl.u8	q3, <illegal reg q14.5>, q3
    4f5c:	000c5001 	andeq	r5, ip, r1
    4f60:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    4f64:	16000128 	strne	r0, [r0], -r8, lsr #2
    4f68:	00009f13 	andeq	r9, r0, r3, lsl pc
    4f6c:	00000000 	andeq	r0, r0, r0
    4f70:	00940000 	addseq	r0, r4, r0
    4f74:	00f20000 	rscseq	r0, r2, r0
    4f78:	00020000 	andeq	r0, r2, r0
    4f7c:	00f29f30 	rscseq	r9, r2, r0, lsr pc
    4f80:	01000000 	mrseq	r0, (UNDEF: 0)
    4f84:	00010000 	andeq	r0, r1, r0
    4f88:	00010052 	andeq	r0, r1, r2, asr r0
    4f8c:	00011600 	andeq	r1, r1, r0, lsl #12
    4f90:	91002200 	mrsls	r2, R8_usr
    4f94:	64910668 	ldrvs	r0, [r1], #1640	; 0x668
    4f98:	0c007406 	cfstrseq	mvf7, [r0], {6}
    4f9c:	40013800 	andmi	r3, r1, r0, lsl #16
    4fa0:	00012829 	andeq	r2, r1, r9, lsr #16
    4fa4:	1e491316 	mcrne	3, 2, r1, cr9, cr6, {0}
    4fa8:	007525f7 	ldrshteq	r2, [r5], #-87	; 0xffffffa9
    4fac:	f7243206 			; <UNDEFINED> instruction: 0xf7243206
    4fb0:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    4fb4:	0001169f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    4fb8:	00011c00 	andeq	r1, r1, r0, lsl #24
    4fbc:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    4fc0:	647d0668 	ldrbtvs	r0, [sp], #-1640	; 0x668
    4fc4:	5001f306 	andpl	pc, r1, r6, lsl #6
    4fc8:	0138000c 	teqeq	r8, ip
    4fcc:	01282940 			; <UNDEFINED> instruction: 0x01282940
    4fd0:	49131600 	ldmdbmi	r3, {r9, sl, ip}
    4fd4:	f325f71e 	vaba.u32	d15, d5, d14
    4fd8:	32065101 	andcc	r5, r6, #1073741824	; 0x40000000
    4fdc:	1b25f724 	blne	982c74 <__Stack_Size+0x982874>
    4fe0:	009f00f7 	ldrsheq	r0, [pc], r7
    4fe4:	00000000 	andeq	r0, r0, r0
    4fe8:	94000000 	strls	r0, [r0], #-0
    4fec:	fa000000 	blx	4ff4 <__Stack_Size+0x4bf4>
    4ff0:	02000000 	andeq	r0, r0, #0
    4ff4:	fa9f3000 	blx	fe7d0ffc <SCS_BASE+0x1e7c2ffc>
    4ff8:	00000000 	andeq	r0, r0, r0
    4ffc:	0b000001 	bleq	5008 <__Stack_Size+0x4c08>
    5000:	70007200 	andvc	r7, r0, r0, lsl #4
    5004:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    5008:	9f1c1e64 	svcls	0x001c1e64
    500c:	00000100 	andeq	r0, r0, r0, lsl #2
    5010:	00000102 	andeq	r0, r0, r2, lsl #2
    5014:	02520001 	subseq	r0, r2, #1
    5018:	16000001 	strne	r0, [r0], -r1
    501c:	2a000001 	bcs	5028 <__Stack_Size+0x4c28>
    5020:	06689100 	strbteq	r9, [r8], -r0, lsl #2
    5024:	74066491 	strvc	r6, [r6], #-1169	; 0x491
    5028:	38000c00 	stmdacc	r0, {sl, fp}
    502c:	28294001 	stmdacs	r9!, {r0, lr}
    5030:	13160001 	tstne	r6, #1
    5034:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    5038:	32060075 	andcc	r0, r6, #117	; 0x75
    503c:	1b25f724 	blne	982cd4 <__Stack_Size+0x9828d4>
    5040:	007000f7 	ldrshteq	r0, [r0], #-7
    5044:	64082534 	strvs	r2, [r8], #-1332	; 0x534
    5048:	169f1c1e 			; <UNDEFINED> instruction: 0x169f1c1e
    504c:	1c000001 	stcne	0, cr0, [r0], {1}
    5050:	2c000001 	stccs	0, cr0, [r0], {1}
    5054:	06687d00 	strbteq	r7, [r8], -r0, lsl #26
    5058:	f306647d 	vqshl.u8	q3, <illegal reg q14.5>, q3
    505c:	000c5001 	andeq	r5, ip, r1
    5060:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    5064:	16000128 	strne	r0, [r0], -r8, lsr #2
    5068:	f71e4913 			; <UNDEFINED> instruction: 0xf71e4913
    506c:	5101f325 	tstpl	r1, r5, lsr #6	; <UNPREDICTABLE>
    5070:	f7243206 			; <UNDEFINED> instruction: 0xf7243206
    5074:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    5078:	25340070 	ldrcs	r0, [r4, #-112]!	; 0x70
    507c:	1c1e6408 	cfldrsne	mvf6, [lr], {8}
    5080:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5084:	00000000 	andeq	r0, r0, r0
    5088:	00013200 	andeq	r3, r1, r0, lsl #4
    508c:	00014000 	andeq	r4, r1, r0
    5090:	51000100 	mrspl	r0, (UNDEF: 16)
    5094:	00000140 	andeq	r0, r0, r0, asr #2
    5098:	00000152 	andeq	r0, r0, r2, asr r1
    509c:	01f30004 	mvnseq	r0, r4
    50a0:	00009f51 	andeq	r9, r0, r1, asr pc
    50a4:	00000000 	andeq	r0, r0, r0
    50a8:	01320000 	teqeq	r2, r0
    50ac:	01420000 	mrseq	r0, (UNDEF: 66)
    50b0:	00020000 	andeq	r0, r2, r0
    50b4:	01429f30 	cmpeq	r2, r0, lsr pc
    50b8:	014a0000 	mrseq	r0, (UNDEF: 74)
    50bc:	000b0000 	andeq	r0, fp, r0
    50c0:	ff0b0072 			; <UNDEFINED> instruction: 0xff0b0072
    50c4:	ff0a1af0 			; <UNDEFINED> instruction: 0xff0a1af0
    50c8:	4e9f1aff 	mrcmi	10, 4, r1, cr15, cr15, {7}
    50cc:	52000001 	andpl	r0, r0, #1
    50d0:	07000001 	streq	r0, [r0, -r1]
    50d4:	0a007300 	beq	21cdc <__Stack_Size+0x218dc>
    50d8:	9f1affff 	svcls	0x001affff
	...
    50e4:	00000176 	andeq	r0, r0, r6, ror r1
    50e8:	0000018c 	andeq	r0, r0, ip, lsl #3
    50ec:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    50f0:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    50f4:	03000001 	movweq	r0, #1
    50f8:	9f747000 	svcls	0x00747000
    50fc:	0000018e 	andeq	r0, r0, lr, lsl #3
    5100:	00000194 	muleq	r0, r4, r1
    5104:	94500001 	ldrbls	r0, [r0], #-1
    5108:	a8000001 	stmdage	r0, {r0}
    510c:	04000001 	streq	r0, [r0], #-1
    5110:	5001f300 	andpl	pc, r1, r0, lsl #6
    5114:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5118:	00000000 	andeq	r0, r0, r0
    511c:	00017600 	andeq	r7, r1, r0, lsl #12
    5120:	00018200 	andeq	r8, r1, r0, lsl #4
    5124:	51000100 	mrspl	r0, (UNDEF: 16)
    5128:	00000182 	andeq	r0, r0, r2, lsl #3
    512c:	000001a8 	andeq	r0, r0, r8, lsr #3
    5130:	01f30004 	mvnseq	r0, r4
    5134:	00009f51 	andeq	r9, r0, r1, asr pc
    5138:	00000000 	andeq	r0, r0, r0
    513c:	01760000 	cmneq	r6, r0
    5140:	019a0000 	orrseq	r0, sl, r0
    5144:	00010000 	andeq	r0, r1, r0
    5148:	00019a52 	andeq	r9, r1, r2, asr sl
    514c:	00019e00 	andeq	r9, r1, r0, lsl #28
    5150:	f3000400 	vshl.u8	d0, d0, d0
    5154:	9e9f5201 	cdpls	2, 9, cr5, cr15, cr1, {0}
    5158:	a0000001 	andge	r0, r0, r1
    515c:	01000001 	tsteq	r0, r1
    5160:	01a05200 	lsleq	r5, r0, #4
    5164:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    5168:	00040000 	andeq	r0, r4, r0
    516c:	9f5201f3 	svcls	0x005201f3
	...
    5178:	00000176 	andeq	r0, r0, r6, ror r1
    517c:	0000017c 	andeq	r0, r0, ip, ror r1
    5180:	9f300002 	svcls	0x00300002
    5184:	0000017c 	andeq	r0, r0, ip, ror r1
    5188:	000001a8 	andeq	r0, r0, r8, lsr #3
    518c:	00740006 	rsbseq	r0, r4, r6
    5190:	9f1aff08 	svcls	0x001aff08
	...
    519c:	00000176 	andeq	r0, r0, r6, ror r1
    51a0:	0000017c 	andeq	r0, r0, ip, ror r1
    51a4:	9f300002 	svcls	0x00300002
    51a8:	0000017c 	andeq	r0, r0, ip, ror r1
    51ac:	00000182 	andeq	r0, r0, r2, lsl #3
    51b0:	00710009 	rsbseq	r0, r1, r9
    51b4:	ff0a1a4f 			; <UNDEFINED> instruction: 0xff0a1a4f
    51b8:	829f1aff 	addshi	r1, pc, #1044480	; 0xff000
    51bc:	a8000001 	stmdage	r0, {r0}
    51c0:	0a000001 	beq	51cc <__Stack_Size+0x4dcc>
    51c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    51c8:	ff0a1a4f 			; <UNDEFINED> instruction: 0xff0a1a4f
    51cc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    51d0:	00000000 	andeq	r0, r0, r0
    51d4:	76000000 	strvc	r0, [r0], -r0
    51d8:	88000001 	stmdahi	r0, {r0}
    51dc:	02000001 	andeq	r0, r0, #1
    51e0:	889f3000 	ldmhi	pc, {ip, sp}	; <UNPREDICTABLE>
    51e4:	9c000001 	stcls	0, cr0, [r0], {1}
    51e8:	01000001 	tsteq	r0, r1
    51ec:	019c5300 	orrseq	r5, ip, r0, lsl #6
    51f0:	019e0000 	orrseq	r0, lr, r0
    51f4:	00050000 	andeq	r0, r5, r0
    51f8:	24007131 	strcs	r7, [r0], #-305	; 0x131
    51fc:	00019e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    5200:	0001a400 	andeq	sl, r1, r0, lsl #8
    5204:	53000100 	movwpl	r0, #256	; 0x100
    5208:	000001a4 	andeq	r0, r0, r4, lsr #3
    520c:	000001a8 	andeq	r0, r0, r8, lsr #3
    5210:	71310005 	teqvc	r1, r5
    5214:	009f2400 	addseq	r2, pc, r0, lsl #8
    5218:	00000000 	andeq	r0, r0, r0
    521c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    5220:	b0000001 	andlt	r0, r0, r1
    5224:	01000001 	tsteq	r0, r1
    5228:	01b05100 	lslseq	r5, r0, #2
    522c:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    5230:	00040000 	andeq	r0, r4, r0
    5234:	9f5101f3 	svcls	0x005101f3
    5238:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    523c:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    5240:	b6510001 	ldrblt	r0, [r1], -r1
    5244:	ba000001 	blt	5250 <__Stack_Size+0x4e50>
    5248:	04000001 	streq	r0, [r0], #-1
    524c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5250:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5254:	00000000 	andeq	r0, r0, r0
    5258:	0001ba00 	andeq	fp, r1, r0, lsl #20
    525c:	0001cc00 	andeq	ip, r1, r0, lsl #24
    5260:	51000100 	mrspl	r0, (UNDEF: 16)
    5264:	000001cc 	andeq	r0, r0, ip, asr #3
    5268:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    526c:	01f30004 	mvnseq	r0, r4
    5270:	00009f51 	andeq	r9, r0, r1, asr pc
    5274:	00000000 	andeq	r0, r0, r0
    5278:	01d00000 	bicseq	r0, r0, r0
    527c:	01e20000 	mvneq	r0, r0
    5280:	00010000 	andeq	r0, r1, r0
    5284:	0001e251 	andeq	lr, r1, r1, asr r2
    5288:	0001e600 	andeq	lr, r1, r0, lsl #12
    528c:	f3000400 	vshl.u8	d0, d0, d0
    5290:	009f5101 	addseq	r5, pc, r1, lsl #2
    5294:	00000000 	andeq	r0, r0, r0
    5298:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    529c:	10000001 	andne	r0, r0, r1
    52a0:	01000002 	tsteq	r0, r2
    52a4:	02105100 	andseq	r5, r0, #0, 2
    52a8:	02140000 	andseq	r0, r4, #0
    52ac:	00040000 	andeq	r0, r4, r0
    52b0:	9f5101f3 	svcls	0x005101f3
	...
    52bc:	0000022c 	andeq	r0, r0, ip, lsr #4
    52c0:	00000230 	andeq	r0, r0, r0, lsr r2
    52c4:	30510001 	subscc	r0, r1, r1
    52c8:	34000002 	strcc	r0, [r0], #-2
    52cc:	04000002 	streq	r0, [r0], #-2
    52d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    52d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52d8:	00000000 	andeq	r0, r0, r0
    52dc:	00023400 	andeq	r3, r2, r0, lsl #8
    52e0:	00023600 	andeq	r3, r2, r0, lsl #12
    52e4:	50000100 	andpl	r0, r0, r0, lsl #2
    52e8:	00000236 	andeq	r0, r0, r6, lsr r2
    52ec:	0000023c 	andeq	r0, r0, ip, lsr r2
    52f0:	01f30004 	mvnseq	r0, r4
    52f4:	00009f50 	andeq	r9, r0, r0, asr pc
    52f8:	00000000 	andeq	r0, r0, r0
    52fc:	02480000 	subeq	r0, r8, #0
    5300:	02560000 	subseq	r0, r6, #0
    5304:	00010000 	andeq	r0, r1, r0
    5308:	00025651 	andeq	r5, r2, r1, asr r6
    530c:	00025a00 	andeq	r5, r2, r0, lsl #20
    5310:	f3000400 	vshl.u8	d0, d0, d0
    5314:	009f5101 	addseq	r5, pc, r1, lsl #2
    5318:	00000000 	andeq	r0, r0, r0
    531c:	5a000000 	bpl	5324 <__Stack_Size+0x4f24>
    5320:	68000002 	stmdavs	r0, {r1}
    5324:	01000002 	tsteq	r0, r2
    5328:	02685100 	rsbeq	r5, r8, #0, 2
    532c:	026c0000 	rsbeq	r0, ip, #0
    5330:	00040000 	andeq	r0, r4, r0
    5334:	9f5101f3 	svcls	0x005101f3
	...
    5340:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    5344:	000002c6 	andeq	r0, r0, r6, asr #5
    5348:	c6510001 	ldrbgt	r0, [r1], -r1
    534c:	ca000002 	bgt	535c <__Stack_Size+0x4f5c>
    5350:	04000002 	streq	r0, [r0], #-2
    5354:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5358:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    535c:	00000000 	andeq	r0, r0, r0
    5360:	0002e200 	andeq	lr, r2, r0, lsl #4
    5364:	0002ea00 	andeq	lr, r2, r0, lsl #20
    5368:	50000100 	andpl	r0, r0, r0, lsl #2
    536c:	000002ea 	andeq	r0, r0, sl, ror #5
    5370:	000002ee 	andeq	r0, r0, lr, ror #5
    5374:	01f30004 	mvnseq	r0, r4
    5378:	00009f50 	andeq	r9, r0, r0, asr pc
    537c:	00000000 	andeq	r0, r0, r0
    5380:	02e20000 	rsceq	r0, r2, #0
    5384:	02e40000 	rsceq	r0, r4, #0
    5388:	00020000 	andeq	r0, r2, r0
    538c:	02e49f30 	rsceq	r9, r4, #48, 30	; 0xc0
    5390:	02ee0000 	rsceq	r0, lr, #0
    5394:	000a0000 	andeq	r0, sl, r0
    5398:	00730071 	rsbseq	r0, r3, r1, ror r0
    539c:	3024401a 	eorcc	r4, r4, sl, lsl r0
    53a0:	00009f2e 	andeq	r9, r0, lr, lsr #30
    53a4:	00000000 	andeq	r0, r0, r0
    53a8:	02ee0000 	rsceq	r0, lr, #0
    53ac:	02f00000 	rscseq	r0, r0, #0
    53b0:	00010000 	andeq	r0, r1, r0
    53b4:	0002f051 	andeq	pc, r2, r1, asr r0	; <UNPREDICTABLE>
    53b8:	0002f600 	andeq	pc, r2, r0, lsl #12
    53bc:	f3000400 	vshl.u8	d0, d0, d0
    53c0:	009f5101 	addseq	r5, pc, r1, lsl #2
    53c4:	00000000 	andeq	r0, r0, r0
    53c8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    53cc:	2c000002 	stccs	0, cr0, [r0], {2}
    53d0:	01000003 	tsteq	r0, r3
    53d4:	032c5000 			; <UNDEFINED> instruction: 0x032c5000
    53d8:	03300000 	teqeq	r0, #0
    53dc:	00040000 	andeq	r0, r4, r0
    53e0:	9f5001f3 	svcls	0x005001f3
    53e4:	00000330 	andeq	r0, r0, r0, lsr r3
    53e8:	00000332 	andeq	r0, r0, r2, lsr r3
    53ec:	32500001 	subscc	r0, r0, #1
    53f0:	34000003 	strcc	r0, [r0], #-3
    53f4:	04000003 	streq	r0, [r0], #-3
    53f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    53fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5400:	00000000 	andeq	r0, r0, r0
    5404:	0002f600 	andeq	pc, r2, r0, lsl #12
    5408:	00032200 	andeq	r2, r3, r0, lsl #4
    540c:	51000100 	mrspl	r0, (UNDEF: 16)
    5410:	00000322 	andeq	r0, r0, r2, lsr #6
    5414:	00000330 	andeq	r0, r0, r0, lsr r3
    5418:	01f30004 	mvnseq	r0, r4
    541c:	03309f51 	teqeq	r0, #324	; 0x144
    5420:	03340000 	teqeq	r4, #0
    5424:	00010000 	andeq	r0, r1, r0
    5428:	00000051 	andeq	r0, r0, r1, asr r0
    542c:	00000000 	andeq	r0, r0, r0
    5430:	0002f600 	andeq	pc, r2, r0, lsl #12
    5434:	00031a00 	andeq	r1, r3, r0, lsl #20
    5438:	30000200 	andcc	r0, r0, r0, lsl #4
    543c:	00031a9f 	muleq	r3, pc, sl	; <UNPREDICTABLE>
    5440:	00031e00 	andeq	r1, r3, r0, lsl #28
    5444:	31000b00 	tstcc	r0, r0, lsl #22
    5448:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    544c:	1affff0a 	bne	507c <__Stack_Size+0x4c7c>
    5450:	031e9f24 	tsteq	lr, #36, 30	; 0x90
    5454:	03220000 			; <UNDEFINED> instruction: 0x03220000
    5458:	00120000 	andseq	r0, r2, r0
    545c:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    5460:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    5464:	0072241a 	rsbseq	r2, r2, sl, lsl r4
    5468:	1affff0a 	bne	5098 <__Stack_Size+0x4c98>
    546c:	03229f1a 			; <UNDEFINED> instruction: 0x03229f1a
    5470:	03300000 	teqeq	r0, #0
    5474:	00130000 	andseq	r0, r3, r0
    5478:	5101f331 	tstpl	r1, r1, lsr r3	; <UNPREDICTABLE>
    547c:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    5480:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    5484:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5488:	309f1a1a 	addscc	r1, pc, sl, lsl sl	; <UNPREDICTABLE>
    548c:	34000003 	strcc	r0, [r0], #-3
    5490:	12000003 	andne	r0, r0, #3
    5494:	00713100 	rsbseq	r3, r1, r0, lsl #2
    5498:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    549c:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    54a0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    54a4:	009f1a1a 	addseq	r1, pc, sl, lsl sl	; <UNPREDICTABLE>
    54a8:	00000000 	andeq	r0, r0, r0
    54ac:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    54b0:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    54b4:	02000002 	andeq	r0, r0, #2
    54b8:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    54bc:	08000002 	stmdaeq	r0, {r1}
    54c0:	09000003 	stmdbeq	r0, {r0, r1}
    54c4:	4f007100 	svcmi	0x00007100
    54c8:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    54cc:	03089f1a 	movweq	r9, #36634	; 0x8f1a
    54d0:	031a0000 	tsteq	sl, #0
    54d4:	00010000 	andeq	r0, r1, r0
    54d8:	00031a52 	andeq	r1, r3, r2, asr sl
    54dc:	00032400 	andeq	r2, r3, r0, lsl #8
    54e0:	53000100 	movwpl	r0, #256	; 0x100
    54e4:	00000330 	andeq	r0, r0, r0, lsr r3
    54e8:	00000334 	andeq	r0, r0, r4, lsr r3
    54ec:	00530001 	subseq	r0, r3, r1
    54f0:	00000000 	andeq	r0, r0, r0
    54f4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    54f8:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    54fc:	02000002 	andeq	r0, r0, #2
    5500:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    5504:	34000002 	strcc	r0, [r0], #-2
    5508:	06000003 	streq	r0, [r0], -r3
    550c:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    5510:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    5514:	00000000 	andeq	r0, r0, r0
    5518:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    551c:	32000002 	andcc	r0, r0, #2
    5520:	02000003 	andeq	r0, r0, #3
    5524:	329f3000 	addscc	r3, pc, #0
    5528:	34000003 	strcc	r0, [r0], #-3
    552c:	01000003 	tsteq	r0, r3
    5530:	00005000 	andeq	r5, r0, r0
    5534:	00000000 	andeq	r0, r0, r0
    5538:	03340000 	teqeq	r4, #0
    553c:	03360000 	teqeq	r6, #0
    5540:	00010000 	andeq	r0, r1, r0
    5544:	00033651 	andeq	r3, r3, r1, asr r6
    5548:	00034200 	andeq	r4, r3, r0, lsl #4
    554c:	f3000400 	vshl.u8	d0, d0, d0
    5550:	009f5101 	addseq	r5, pc, r1, lsl #2
    5554:	00000000 	andeq	r0, r0, r0
    5558:	34000000 	strcc	r0, [r0], #-0
    555c:	36000003 	strcc	r0, [r0], -r3
    5560:	05000003 	streq	r0, [r0, #-3]
    5564:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    5568:	03369f25 	teqeq	r6, #37, 30	; 0x94
    556c:	03420000 	movteq	r0, #8192	; 0x2000
    5570:	00060000 	andeq	r0, r6, r0
    5574:	385101f3 	ldmdacc	r1, {r0, r1, r4, r5, r6, r7, r8}^
    5578:	00009f25 	andeq	r9, r0, r5, lsr #30
    557c:	00000000 	andeq	r0, r0, r0
    5580:	000e0000 	andeq	r0, lr, r0
    5584:	00140000 	andseq	r0, r4, r0
    5588:	00010000 	andeq	r0, r1, r0
    558c:	00001453 	andeq	r1, r0, r3, asr r4
    5590:	00001c00 	andeq	r1, r0, r0, lsl #24
    5594:	73000300 	movwvc	r0, #768	; 0x300
    5598:	001c9f04 	andseq	r9, ip, r4, lsl #30
    559c:	002c0000 	eoreq	r0, ip, r0
    55a0:	00010000 	andeq	r0, r1, r0
    55a4:	00002c53 	andeq	r2, r0, r3, asr ip
    55a8:	00002e00 	andeq	r2, r0, r0, lsl #28
    55ac:	73000300 	movwvc	r0, #768	; 0x300
    55b0:	002e9f7c 	eoreq	r9, lr, ip, ror pc
    55b4:	00310000 	eorseq	r0, r1, r0
    55b8:	00010000 	andeq	r0, r1, r0
    55bc:	00000053 	andeq	r0, r0, r3, asr r0
    55c0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	08003d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp, ip, sp}
   4:	08003daa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, fp, ip, sp}
   8:	08003dae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, fp, ip, sp}
   c:	08003dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp}
	...
  18:	08006014 	stmdaeq	r0, {r2, r4, sp, lr}
  1c:	08006030 	stmdaeq	r0, {r4, r5, sp, lr}
  20:	0800604a 	stmdaeq	r0, {r1, r3, r6, sp, lr}
  24:	0800604e 	stmdaeq	r0, {r1, r2, r3, r6, sp, lr}
	...
  30:	08006030 	stmdaeq	r0, {r4, r5, sp, lr}
  34:	0800604a 	stmdaeq	r0, {r1, r3, r6, sp, lr}
  38:	0800604e 	stmdaeq	r0, {r1, r2, r3, r6, sp, lr}
  3c:	08006052 	stmdaeq	r0, {r1, r4, r6, sp, lr}
	...
  48:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  4c:	08003e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, ip, sp}
  50:	08005fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, lr}
  54:	0800611c 	stmdaeq	r0, {r2, r3, r4, r8, sp, lr}
	...
  60:	0000012e 	andeq	r0, r0, lr, lsr #2
  64:	0000014a 	andeq	r0, r0, sl, asr #2
  68:	00000154 	andeq	r0, r0, r4, asr r1
  6c:	0000021c 	andeq	r0, r0, ip, lsl r2
	...
  78:	00000960 	andeq	r0, r0, r0, ror #18
  7c:	00000962 	andeq	r0, r0, r2, ror #18
  80:	00000964 	andeq	r0, r0, r4, ror #18
  84:	00000992 	muleq	r0, r2, r9
  88:	00000994 	muleq	r0, r4, r9
  8c:	00000996 	muleq	r0, r6, r9
	...
  98:	0000099e 	muleq	r0, lr, r9
  9c:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  a0:	000009d6 	ldrdeq	r0, [r0], -r6
  a4:	000009d8 	ldrdeq	r0, [r0], -r8
	...
